
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ota_region   00000000  08010140  08010140  00030259  2**0
                  CONTENTS
  2 .text         00017c74  08010140  08010140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .RamFunc      00000078  08027db4  08027db4  00027db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000017a0  08027e30  08027e30  00027e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  080295d0  080295d0  000295d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  080295d8  080295d8  000295d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080295dc  080295dc  000295dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ota_region_end 00000000  080295e0  080295e0  00030259  2**0
                  CONTENTS
  9 .data         000001a8  20000004  080295e0  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 TIMERSERVER_CONTEXT 00000099  200001ac  08029788  000301ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 SYSTEM_DRIVER_CONTEXT 00000011  20000248  08029821  00030248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0002875c  20000260  08029832  00030260  2**3
                  ALLOC
 13 ._user_heap_stack 00000604  200289bc  08029832  000389bc  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00030259  2**0
                  CONTENTS, READONLY
 15 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 16 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 17 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 18 .debug_info   000669d4  00000000  00000000  00030289  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000b694  00000000  00000000  00096c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00003d40  00000000  00000000  000a22f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00003828  00000000  00000000  000a6038  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00027947  00000000  00000000  000a9860  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00019111  00000000  00000000  000d11a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      000000f0  00000000  00000000  000ea2b8  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000fc90  00000000  00000000  000ea3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_loc    0000131b  00000000  00000000  000fa038  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010140 <__do_global_dtors_aux>:
 8010140:	b510      	push	{r4, lr}
 8010142:	4c05      	ldr	r4, [pc, #20]	; (8010158 <__do_global_dtors_aux+0x18>)
 8010144:	7823      	ldrb	r3, [r4, #0]
 8010146:	b933      	cbnz	r3, 8010156 <__do_global_dtors_aux+0x16>
 8010148:	4b04      	ldr	r3, [pc, #16]	; (801015c <__do_global_dtors_aux+0x1c>)
 801014a:	b113      	cbz	r3, 8010152 <__do_global_dtors_aux+0x12>
 801014c:	4804      	ldr	r0, [pc, #16]	; (8010160 <__do_global_dtors_aux+0x20>)
 801014e:	f3af 8000 	nop.w
 8010152:	2301      	movs	r3, #1
 8010154:	7023      	strb	r3, [r4, #0]
 8010156:	bd10      	pop	{r4, pc}
 8010158:	20000260 	.word	0x20000260
 801015c:	00000000 	.word	0x00000000
 8010160:	08027d9c 	.word	0x08027d9c

08010164 <frame_dummy>:
 8010164:	b508      	push	{r3, lr}
 8010166:	4b03      	ldr	r3, [pc, #12]	; (8010174 <frame_dummy+0x10>)
 8010168:	b11b      	cbz	r3, 8010172 <frame_dummy+0xe>
 801016a:	4903      	ldr	r1, [pc, #12]	; (8010178 <frame_dummy+0x14>)
 801016c:	4803      	ldr	r0, [pc, #12]	; (801017c <frame_dummy+0x18>)
 801016e:	f3af 8000 	nop.w
 8010172:	bd08      	pop	{r3, pc}
 8010174:	00000000 	.word	0x00000000
 8010178:	20000264 	.word	0x20000264
 801017c:	08027d9c 	.word	0x08027d9c

08010180 <strcmp>:
 8010180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010188:	2a01      	cmp	r2, #1
 801018a:	bf28      	it	cs
 801018c:	429a      	cmpcs	r2, r3
 801018e:	d0f7      	beq.n	8010180 <strcmp>
 8010190:	1ad0      	subs	r0, r2, r3
 8010192:	4770      	bx	lr

08010194 <__aeabi_drsub>:
 8010194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8010198:	e002      	b.n	80101a0 <__adddf3>
 801019a:	bf00      	nop

0801019c <__aeabi_dsub>:
 801019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080101a0 <__adddf3>:
 80101a0:	b530      	push	{r4, r5, lr}
 80101a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80101a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80101aa:	ea94 0f05 	teq	r4, r5
 80101ae:	bf08      	it	eq
 80101b0:	ea90 0f02 	teqeq	r0, r2
 80101b4:	bf1f      	itttt	ne
 80101b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80101ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80101be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80101c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80101c6:	f000 80e2 	beq.w	801038e <__adddf3+0x1ee>
 80101ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80101ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80101d2:	bfb8      	it	lt
 80101d4:	426d      	neglt	r5, r5
 80101d6:	dd0c      	ble.n	80101f2 <__adddf3+0x52>
 80101d8:	442c      	add	r4, r5
 80101da:	ea80 0202 	eor.w	r2, r0, r2
 80101de:	ea81 0303 	eor.w	r3, r1, r3
 80101e2:	ea82 0000 	eor.w	r0, r2, r0
 80101e6:	ea83 0101 	eor.w	r1, r3, r1
 80101ea:	ea80 0202 	eor.w	r2, r0, r2
 80101ee:	ea81 0303 	eor.w	r3, r1, r3
 80101f2:	2d36      	cmp	r5, #54	; 0x36
 80101f4:	bf88      	it	hi
 80101f6:	bd30      	pophi	{r4, r5, pc}
 80101f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80101fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010208:	d002      	beq.n	8010210 <__adddf3+0x70>
 801020a:	4240      	negs	r0, r0
 801020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 801021c:	d002      	beq.n	8010224 <__adddf3+0x84>
 801021e:	4252      	negs	r2, r2
 8010220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010224:	ea94 0f05 	teq	r4, r5
 8010228:	f000 80a7 	beq.w	801037a <__adddf3+0x1da>
 801022c:	f1a4 0401 	sub.w	r4, r4, #1
 8010230:	f1d5 0e20 	rsbs	lr, r5, #32
 8010234:	db0d      	blt.n	8010252 <__adddf3+0xb2>
 8010236:	fa02 fc0e 	lsl.w	ip, r2, lr
 801023a:	fa22 f205 	lsr.w	r2, r2, r5
 801023e:	1880      	adds	r0, r0, r2
 8010240:	f141 0100 	adc.w	r1, r1, #0
 8010244:	fa03 f20e 	lsl.w	r2, r3, lr
 8010248:	1880      	adds	r0, r0, r2
 801024a:	fa43 f305 	asr.w	r3, r3, r5
 801024e:	4159      	adcs	r1, r3
 8010250:	e00e      	b.n	8010270 <__adddf3+0xd0>
 8010252:	f1a5 0520 	sub.w	r5, r5, #32
 8010256:	f10e 0e20 	add.w	lr, lr, #32
 801025a:	2a01      	cmp	r2, #1
 801025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8010260:	bf28      	it	cs
 8010262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010266:	fa43 f305 	asr.w	r3, r3, r5
 801026a:	18c0      	adds	r0, r0, r3
 801026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8010270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010274:	d507      	bpl.n	8010286 <__adddf3+0xe6>
 8010276:	f04f 0e00 	mov.w	lr, #0
 801027a:	f1dc 0c00 	rsbs	ip, ip, #0
 801027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8010282:	eb6e 0101 	sbc.w	r1, lr, r1
 8010286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801028a:	d31b      	bcc.n	80102c4 <__adddf3+0x124>
 801028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010290:	d30c      	bcc.n	80102ac <__adddf3+0x10c>
 8010292:	0849      	lsrs	r1, r1, #1
 8010294:	ea5f 0030 	movs.w	r0, r0, rrx
 8010298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 801029c:	f104 0401 	add.w	r4, r4, #1
 80102a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80102a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80102a8:	f080 809a 	bcs.w	80103e0 <__adddf3+0x240>
 80102ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80102b0:	bf08      	it	eq
 80102b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80102b6:	f150 0000 	adcs.w	r0, r0, #0
 80102ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80102be:	ea41 0105 	orr.w	r1, r1, r5
 80102c2:	bd30      	pop	{r4, r5, pc}
 80102c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80102c8:	4140      	adcs	r0, r0
 80102ca:	eb41 0101 	adc.w	r1, r1, r1
 80102ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80102d2:	f1a4 0401 	sub.w	r4, r4, #1
 80102d6:	d1e9      	bne.n	80102ac <__adddf3+0x10c>
 80102d8:	f091 0f00 	teq	r1, #0
 80102dc:	bf04      	itt	eq
 80102de:	4601      	moveq	r1, r0
 80102e0:	2000      	moveq	r0, #0
 80102e2:	fab1 f381 	clz	r3, r1
 80102e6:	bf08      	it	eq
 80102e8:	3320      	addeq	r3, #32
 80102ea:	f1a3 030b 	sub.w	r3, r3, #11
 80102ee:	f1b3 0220 	subs.w	r2, r3, #32
 80102f2:	da0c      	bge.n	801030e <__adddf3+0x16e>
 80102f4:	320c      	adds	r2, #12
 80102f6:	dd08      	ble.n	801030a <__adddf3+0x16a>
 80102f8:	f102 0c14 	add.w	ip, r2, #20
 80102fc:	f1c2 020c 	rsb	r2, r2, #12
 8010300:	fa01 f00c 	lsl.w	r0, r1, ip
 8010304:	fa21 f102 	lsr.w	r1, r1, r2
 8010308:	e00c      	b.n	8010324 <__adddf3+0x184>
 801030a:	f102 0214 	add.w	r2, r2, #20
 801030e:	bfd8      	it	le
 8010310:	f1c2 0c20 	rsble	ip, r2, #32
 8010314:	fa01 f102 	lsl.w	r1, r1, r2
 8010318:	fa20 fc0c 	lsr.w	ip, r0, ip
 801031c:	bfdc      	itt	le
 801031e:	ea41 010c 	orrle.w	r1, r1, ip
 8010322:	4090      	lslle	r0, r2
 8010324:	1ae4      	subs	r4, r4, r3
 8010326:	bfa2      	ittt	ge
 8010328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 801032c:	4329      	orrge	r1, r5
 801032e:	bd30      	popge	{r4, r5, pc}
 8010330:	ea6f 0404 	mvn.w	r4, r4
 8010334:	3c1f      	subs	r4, #31
 8010336:	da1c      	bge.n	8010372 <__adddf3+0x1d2>
 8010338:	340c      	adds	r4, #12
 801033a:	dc0e      	bgt.n	801035a <__adddf3+0x1ba>
 801033c:	f104 0414 	add.w	r4, r4, #20
 8010340:	f1c4 0220 	rsb	r2, r4, #32
 8010344:	fa20 f004 	lsr.w	r0, r0, r4
 8010348:	fa01 f302 	lsl.w	r3, r1, r2
 801034c:	ea40 0003 	orr.w	r0, r0, r3
 8010350:	fa21 f304 	lsr.w	r3, r1, r4
 8010354:	ea45 0103 	orr.w	r1, r5, r3
 8010358:	bd30      	pop	{r4, r5, pc}
 801035a:	f1c4 040c 	rsb	r4, r4, #12
 801035e:	f1c4 0220 	rsb	r2, r4, #32
 8010362:	fa20 f002 	lsr.w	r0, r0, r2
 8010366:	fa01 f304 	lsl.w	r3, r1, r4
 801036a:	ea40 0003 	orr.w	r0, r0, r3
 801036e:	4629      	mov	r1, r5
 8010370:	bd30      	pop	{r4, r5, pc}
 8010372:	fa21 f004 	lsr.w	r0, r1, r4
 8010376:	4629      	mov	r1, r5
 8010378:	bd30      	pop	{r4, r5, pc}
 801037a:	f094 0f00 	teq	r4, #0
 801037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8010382:	bf06      	itte	eq
 8010384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8010388:	3401      	addeq	r4, #1
 801038a:	3d01      	subne	r5, #1
 801038c:	e74e      	b.n	801022c <__adddf3+0x8c>
 801038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010392:	bf18      	it	ne
 8010394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010398:	d029      	beq.n	80103ee <__adddf3+0x24e>
 801039a:	ea94 0f05 	teq	r4, r5
 801039e:	bf08      	it	eq
 80103a0:	ea90 0f02 	teqeq	r0, r2
 80103a4:	d005      	beq.n	80103b2 <__adddf3+0x212>
 80103a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80103aa:	bf04      	itt	eq
 80103ac:	4619      	moveq	r1, r3
 80103ae:	4610      	moveq	r0, r2
 80103b0:	bd30      	pop	{r4, r5, pc}
 80103b2:	ea91 0f03 	teq	r1, r3
 80103b6:	bf1e      	ittt	ne
 80103b8:	2100      	movne	r1, #0
 80103ba:	2000      	movne	r0, #0
 80103bc:	bd30      	popne	{r4, r5, pc}
 80103be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80103c2:	d105      	bne.n	80103d0 <__adddf3+0x230>
 80103c4:	0040      	lsls	r0, r0, #1
 80103c6:	4149      	adcs	r1, r1
 80103c8:	bf28      	it	cs
 80103ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80103ce:	bd30      	pop	{r4, r5, pc}
 80103d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80103d4:	bf3c      	itt	cc
 80103d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80103da:	bd30      	popcc	{r4, r5, pc}
 80103dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80103e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80103e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80103e8:	f04f 0000 	mov.w	r0, #0
 80103ec:	bd30      	pop	{r4, r5, pc}
 80103ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80103f2:	bf1a      	itte	ne
 80103f4:	4619      	movne	r1, r3
 80103f6:	4610      	movne	r0, r2
 80103f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80103fc:	bf1c      	itt	ne
 80103fe:	460b      	movne	r3, r1
 8010400:	4602      	movne	r2, r0
 8010402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010406:	bf06      	itte	eq
 8010408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 801040c:	ea91 0f03 	teqeq	r1, r3
 8010410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010414:	bd30      	pop	{r4, r5, pc}
 8010416:	bf00      	nop

08010418 <__aeabi_ui2d>:
 8010418:	f090 0f00 	teq	r0, #0
 801041c:	bf04      	itt	eq
 801041e:	2100      	moveq	r1, #0
 8010420:	4770      	bxeq	lr
 8010422:	b530      	push	{r4, r5, lr}
 8010424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801042c:	f04f 0500 	mov.w	r5, #0
 8010430:	f04f 0100 	mov.w	r1, #0
 8010434:	e750      	b.n	80102d8 <__adddf3+0x138>
 8010436:	bf00      	nop

08010438 <__aeabi_i2d>:
 8010438:	f090 0f00 	teq	r0, #0
 801043c:	bf04      	itt	eq
 801043e:	2100      	moveq	r1, #0
 8010440:	4770      	bxeq	lr
 8010442:	b530      	push	{r4, r5, lr}
 8010444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8010450:	bf48      	it	mi
 8010452:	4240      	negmi	r0, r0
 8010454:	f04f 0100 	mov.w	r1, #0
 8010458:	e73e      	b.n	80102d8 <__adddf3+0x138>
 801045a:	bf00      	nop

0801045c <__aeabi_f2d>:
 801045c:	0042      	lsls	r2, r0, #1
 801045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8010462:	ea4f 0131 	mov.w	r1, r1, rrx
 8010466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 801046a:	bf1f      	itttt	ne
 801046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8010470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010478:	4770      	bxne	lr
 801047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801047e:	bf08      	it	eq
 8010480:	4770      	bxeq	lr
 8010482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8010486:	bf04      	itt	eq
 8010488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 801048c:	4770      	bxeq	lr
 801048e:	b530      	push	{r4, r5, lr}
 8010490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801049c:	e71c      	b.n	80102d8 <__adddf3+0x138>
 801049e:	bf00      	nop

080104a0 <__aeabi_ul2d>:
 80104a0:	ea50 0201 	orrs.w	r2, r0, r1
 80104a4:	bf08      	it	eq
 80104a6:	4770      	bxeq	lr
 80104a8:	b530      	push	{r4, r5, lr}
 80104aa:	f04f 0500 	mov.w	r5, #0
 80104ae:	e00a      	b.n	80104c6 <__aeabi_l2d+0x16>

080104b0 <__aeabi_l2d>:
 80104b0:	ea50 0201 	orrs.w	r2, r0, r1
 80104b4:	bf08      	it	eq
 80104b6:	4770      	bxeq	lr
 80104b8:	b530      	push	{r4, r5, lr}
 80104ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80104be:	d502      	bpl.n	80104c6 <__aeabi_l2d+0x16>
 80104c0:	4240      	negs	r0, r0
 80104c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80104c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80104ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80104ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80104d2:	f43f aed8 	beq.w	8010286 <__adddf3+0xe6>
 80104d6:	f04f 0203 	mov.w	r2, #3
 80104da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80104de:	bf18      	it	ne
 80104e0:	3203      	addne	r2, #3
 80104e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80104e6:	bf18      	it	ne
 80104e8:	3203      	addne	r2, #3
 80104ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80104ee:	f1c2 0320 	rsb	r3, r2, #32
 80104f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80104f6:	fa20 f002 	lsr.w	r0, r0, r2
 80104fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80104fe:	ea40 000e 	orr.w	r0, r0, lr
 8010502:	fa21 f102 	lsr.w	r1, r1, r2
 8010506:	4414      	add	r4, r2
 8010508:	e6bd      	b.n	8010286 <__adddf3+0xe6>
 801050a:	bf00      	nop

0801050c <__aeabi_dmul>:
 801050c:	b570      	push	{r4, r5, r6, lr}
 801050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801051a:	bf1d      	ittte	ne
 801051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010520:	ea94 0f0c 	teqne	r4, ip
 8010524:	ea95 0f0c 	teqne	r5, ip
 8010528:	f000 f8de 	bleq	80106e8 <__aeabi_dmul+0x1dc>
 801052c:	442c      	add	r4, r5
 801052e:	ea81 0603 	eor.w	r6, r1, r3
 8010532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 801053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801053e:	bf18      	it	ne
 8010540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801054c:	d038      	beq.n	80105c0 <__aeabi_dmul+0xb4>
 801054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8010552:	f04f 0500 	mov.w	r5, #0
 8010556:	fbe1 e502 	umlal	lr, r5, r1, r2
 801055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8010562:	f04f 0600 	mov.w	r6, #0
 8010566:	fbe1 5603 	umlal	r5, r6, r1, r3
 801056a:	f09c 0f00 	teq	ip, #0
 801056e:	bf18      	it	ne
 8010570:	f04e 0e01 	orrne.w	lr, lr, #1
 8010574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 801057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8010580:	d204      	bcs.n	801058c <__aeabi_dmul+0x80>
 8010582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8010586:	416d      	adcs	r5, r5
 8010588:	eb46 0606 	adc.w	r6, r6, r6
 801058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8010590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8010598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 801059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80105a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80105a4:	bf88      	it	hi
 80105a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80105aa:	d81e      	bhi.n	80105ea <__aeabi_dmul+0xde>
 80105ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80105b0:	bf08      	it	eq
 80105b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80105b6:	f150 0000 	adcs.w	r0, r0, #0
 80105ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80105be:	bd70      	pop	{r4, r5, r6, pc}
 80105c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80105c4:	ea46 0101 	orr.w	r1, r6, r1
 80105c8:	ea40 0002 	orr.w	r0, r0, r2
 80105cc:	ea81 0103 	eor.w	r1, r1, r3
 80105d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80105d4:	bfc2      	ittt	gt
 80105d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80105da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80105de:	bd70      	popgt	{r4, r5, r6, pc}
 80105e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80105e4:	f04f 0e00 	mov.w	lr, #0
 80105e8:	3c01      	subs	r4, #1
 80105ea:	f300 80ab 	bgt.w	8010744 <__aeabi_dmul+0x238>
 80105ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80105f2:	bfde      	ittt	le
 80105f4:	2000      	movle	r0, #0
 80105f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80105fa:	bd70      	pople	{r4, r5, r6, pc}
 80105fc:	f1c4 0400 	rsb	r4, r4, #0
 8010600:	3c20      	subs	r4, #32
 8010602:	da35      	bge.n	8010670 <__aeabi_dmul+0x164>
 8010604:	340c      	adds	r4, #12
 8010606:	dc1b      	bgt.n	8010640 <__aeabi_dmul+0x134>
 8010608:	f104 0414 	add.w	r4, r4, #20
 801060c:	f1c4 0520 	rsb	r5, r4, #32
 8010610:	fa00 f305 	lsl.w	r3, r0, r5
 8010614:	fa20 f004 	lsr.w	r0, r0, r4
 8010618:	fa01 f205 	lsl.w	r2, r1, r5
 801061c:	ea40 0002 	orr.w	r0, r0, r2
 8010620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801062c:	fa21 f604 	lsr.w	r6, r1, r4
 8010630:	eb42 0106 	adc.w	r1, r2, r6
 8010634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010638:	bf08      	it	eq
 801063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801063e:	bd70      	pop	{r4, r5, r6, pc}
 8010640:	f1c4 040c 	rsb	r4, r4, #12
 8010644:	f1c4 0520 	rsb	r5, r4, #32
 8010648:	fa00 f304 	lsl.w	r3, r0, r4
 801064c:	fa20 f005 	lsr.w	r0, r0, r5
 8010650:	fa01 f204 	lsl.w	r2, r1, r4
 8010654:	ea40 0002 	orr.w	r0, r0, r2
 8010658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010660:	f141 0100 	adc.w	r1, r1, #0
 8010664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010668:	bf08      	it	eq
 801066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801066e:	bd70      	pop	{r4, r5, r6, pc}
 8010670:	f1c4 0520 	rsb	r5, r4, #32
 8010674:	fa00 f205 	lsl.w	r2, r0, r5
 8010678:	ea4e 0e02 	orr.w	lr, lr, r2
 801067c:	fa20 f304 	lsr.w	r3, r0, r4
 8010680:	fa01 f205 	lsl.w	r2, r1, r5
 8010684:	ea43 0302 	orr.w	r3, r3, r2
 8010688:	fa21 f004 	lsr.w	r0, r1, r4
 801068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010690:	fa21 f204 	lsr.w	r2, r1, r4
 8010694:	ea20 0002 	bic.w	r0, r0, r2
 8010698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 801069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80106a0:	bf08      	it	eq
 80106a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80106a6:	bd70      	pop	{r4, r5, r6, pc}
 80106a8:	f094 0f00 	teq	r4, #0
 80106ac:	d10f      	bne.n	80106ce <__aeabi_dmul+0x1c2>
 80106ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80106b2:	0040      	lsls	r0, r0, #1
 80106b4:	eb41 0101 	adc.w	r1, r1, r1
 80106b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80106bc:	bf08      	it	eq
 80106be:	3c01      	subeq	r4, #1
 80106c0:	d0f7      	beq.n	80106b2 <__aeabi_dmul+0x1a6>
 80106c2:	ea41 0106 	orr.w	r1, r1, r6
 80106c6:	f095 0f00 	teq	r5, #0
 80106ca:	bf18      	it	ne
 80106cc:	4770      	bxne	lr
 80106ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80106d2:	0052      	lsls	r2, r2, #1
 80106d4:	eb43 0303 	adc.w	r3, r3, r3
 80106d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80106dc:	bf08      	it	eq
 80106de:	3d01      	subeq	r5, #1
 80106e0:	d0f7      	beq.n	80106d2 <__aeabi_dmul+0x1c6>
 80106e2:	ea43 0306 	orr.w	r3, r3, r6
 80106e6:	4770      	bx	lr
 80106e8:	ea94 0f0c 	teq	r4, ip
 80106ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80106f0:	bf18      	it	ne
 80106f2:	ea95 0f0c 	teqne	r5, ip
 80106f6:	d00c      	beq.n	8010712 <__aeabi_dmul+0x206>
 80106f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80106fc:	bf18      	it	ne
 80106fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010702:	d1d1      	bne.n	80106a8 <__aeabi_dmul+0x19c>
 8010704:	ea81 0103 	eor.w	r1, r1, r3
 8010708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801070c:	f04f 0000 	mov.w	r0, #0
 8010710:	bd70      	pop	{r4, r5, r6, pc}
 8010712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010716:	bf06      	itte	eq
 8010718:	4610      	moveq	r0, r2
 801071a:	4619      	moveq	r1, r3
 801071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010720:	d019      	beq.n	8010756 <__aeabi_dmul+0x24a>
 8010722:	ea94 0f0c 	teq	r4, ip
 8010726:	d102      	bne.n	801072e <__aeabi_dmul+0x222>
 8010728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 801072c:	d113      	bne.n	8010756 <__aeabi_dmul+0x24a>
 801072e:	ea95 0f0c 	teq	r5, ip
 8010732:	d105      	bne.n	8010740 <__aeabi_dmul+0x234>
 8010734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010738:	bf1c      	itt	ne
 801073a:	4610      	movne	r0, r2
 801073c:	4619      	movne	r1, r3
 801073e:	d10a      	bne.n	8010756 <__aeabi_dmul+0x24a>
 8010740:	ea81 0103 	eor.w	r1, r1, r3
 8010744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010750:	f04f 0000 	mov.w	r0, #0
 8010754:	bd70      	pop	{r4, r5, r6, pc}
 8010756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801075e:	bd70      	pop	{r4, r5, r6, pc}

08010760 <__aeabi_ddiv>:
 8010760:	b570      	push	{r4, r5, r6, lr}
 8010762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801076e:	bf1d      	ittte	ne
 8010770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010774:	ea94 0f0c 	teqne	r4, ip
 8010778:	ea95 0f0c 	teqne	r5, ip
 801077c:	f000 f8a7 	bleq	80108ce <__aeabi_ddiv+0x16e>
 8010780:	eba4 0405 	sub.w	r4, r4, r5
 8010784:	ea81 0e03 	eor.w	lr, r1, r3
 8010788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010790:	f000 8088 	beq.w	80108a4 <__aeabi_ddiv+0x144>
 8010794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 801079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80107a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80107a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80107a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80107ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80107b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80107b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80107b8:	429d      	cmp	r5, r3
 80107ba:	bf08      	it	eq
 80107bc:	4296      	cmpeq	r6, r2
 80107be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80107c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80107c6:	d202      	bcs.n	80107ce <__aeabi_ddiv+0x6e>
 80107c8:	085b      	lsrs	r3, r3, #1
 80107ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80107ce:	1ab6      	subs	r6, r6, r2
 80107d0:	eb65 0503 	sbc.w	r5, r5, r3
 80107d4:	085b      	lsrs	r3, r3, #1
 80107d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80107da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80107de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80107e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80107e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80107ea:	bf22      	ittt	cs
 80107ec:	1ab6      	subcs	r6, r6, r2
 80107ee:	4675      	movcs	r5, lr
 80107f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80107f4:	085b      	lsrs	r3, r3, #1
 80107f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80107fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80107fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010802:	bf22      	ittt	cs
 8010804:	1ab6      	subcs	r6, r6, r2
 8010806:	4675      	movcs	r5, lr
 8010808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 801080c:	085b      	lsrs	r3, r3, #1
 801080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8010812:	ebb6 0e02 	subs.w	lr, r6, r2
 8010816:	eb75 0e03 	sbcs.w	lr, r5, r3
 801081a:	bf22      	ittt	cs
 801081c:	1ab6      	subcs	r6, r6, r2
 801081e:	4675      	movcs	r5, lr
 8010820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010824:	085b      	lsrs	r3, r3, #1
 8010826:	ea4f 0232 	mov.w	r2, r2, rrx
 801082a:	ebb6 0e02 	subs.w	lr, r6, r2
 801082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010832:	bf22      	ittt	cs
 8010834:	1ab6      	subcs	r6, r6, r2
 8010836:	4675      	movcs	r5, lr
 8010838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8010840:	d018      	beq.n	8010874 <__aeabi_ddiv+0x114>
 8010842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 801084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801085e:	d1c0      	bne.n	80107e2 <__aeabi_ddiv+0x82>
 8010860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010864:	d10b      	bne.n	801087e <__aeabi_ddiv+0x11e>
 8010866:	ea41 0100 	orr.w	r1, r1, r0
 801086a:	f04f 0000 	mov.w	r0, #0
 801086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8010872:	e7b6      	b.n	80107e2 <__aeabi_ddiv+0x82>
 8010874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010878:	bf04      	itt	eq
 801087a:	4301      	orreq	r1, r0
 801087c:	2000      	moveq	r0, #0
 801087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010882:	bf88      	it	hi
 8010884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010888:	f63f aeaf 	bhi.w	80105ea <__aeabi_dmul+0xde>
 801088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8010890:	bf04      	itt	eq
 8010892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8010896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801089a:	f150 0000 	adcs.w	r0, r0, #0
 801089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80108a2:	bd70      	pop	{r4, r5, r6, pc}
 80108a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80108a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80108ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80108b0:	bfc2      	ittt	gt
 80108b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80108b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80108ba:	bd70      	popgt	{r4, r5, r6, pc}
 80108bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80108c0:	f04f 0e00 	mov.w	lr, #0
 80108c4:	3c01      	subs	r4, #1
 80108c6:	e690      	b.n	80105ea <__aeabi_dmul+0xde>
 80108c8:	ea45 0e06 	orr.w	lr, r5, r6
 80108cc:	e68d      	b.n	80105ea <__aeabi_dmul+0xde>
 80108ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80108d2:	ea94 0f0c 	teq	r4, ip
 80108d6:	bf08      	it	eq
 80108d8:	ea95 0f0c 	teqeq	r5, ip
 80108dc:	f43f af3b 	beq.w	8010756 <__aeabi_dmul+0x24a>
 80108e0:	ea94 0f0c 	teq	r4, ip
 80108e4:	d10a      	bne.n	80108fc <__aeabi_ddiv+0x19c>
 80108e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80108ea:	f47f af34 	bne.w	8010756 <__aeabi_dmul+0x24a>
 80108ee:	ea95 0f0c 	teq	r5, ip
 80108f2:	f47f af25 	bne.w	8010740 <__aeabi_dmul+0x234>
 80108f6:	4610      	mov	r0, r2
 80108f8:	4619      	mov	r1, r3
 80108fa:	e72c      	b.n	8010756 <__aeabi_dmul+0x24a>
 80108fc:	ea95 0f0c 	teq	r5, ip
 8010900:	d106      	bne.n	8010910 <__aeabi_ddiv+0x1b0>
 8010902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010906:	f43f aefd 	beq.w	8010704 <__aeabi_dmul+0x1f8>
 801090a:	4610      	mov	r0, r2
 801090c:	4619      	mov	r1, r3
 801090e:	e722      	b.n	8010756 <__aeabi_dmul+0x24a>
 8010910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010914:	bf18      	it	ne
 8010916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801091a:	f47f aec5 	bne.w	80106a8 <__aeabi_dmul+0x19c>
 801091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010922:	f47f af0d 	bne.w	8010740 <__aeabi_dmul+0x234>
 8010926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 801092a:	f47f aeeb 	bne.w	8010704 <__aeabi_dmul+0x1f8>
 801092e:	e712      	b.n	8010756 <__aeabi_dmul+0x24a>

08010930 <__gedf2>:
 8010930:	f04f 3cff 	mov.w	ip, #4294967295
 8010934:	e006      	b.n	8010944 <__cmpdf2+0x4>
 8010936:	bf00      	nop

08010938 <__ledf2>:
 8010938:	f04f 0c01 	mov.w	ip, #1
 801093c:	e002      	b.n	8010944 <__cmpdf2+0x4>
 801093e:	bf00      	nop

08010940 <__cmpdf2>:
 8010940:	f04f 0c01 	mov.w	ip, #1
 8010944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010954:	bf18      	it	ne
 8010956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 801095a:	d01b      	beq.n	8010994 <__cmpdf2+0x54>
 801095c:	b001      	add	sp, #4
 801095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010962:	bf0c      	ite	eq
 8010964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010968:	ea91 0f03 	teqne	r1, r3
 801096c:	bf02      	ittt	eq
 801096e:	ea90 0f02 	teqeq	r0, r2
 8010972:	2000      	moveq	r0, #0
 8010974:	4770      	bxeq	lr
 8010976:	f110 0f00 	cmn.w	r0, #0
 801097a:	ea91 0f03 	teq	r1, r3
 801097e:	bf58      	it	pl
 8010980:	4299      	cmppl	r1, r3
 8010982:	bf08      	it	eq
 8010984:	4290      	cmpeq	r0, r2
 8010986:	bf2c      	ite	cs
 8010988:	17d8      	asrcs	r0, r3, #31
 801098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801098e:	f040 0001 	orr.w	r0, r0, #1
 8010992:	4770      	bx	lr
 8010994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801099c:	d102      	bne.n	80109a4 <__cmpdf2+0x64>
 801099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80109a2:	d107      	bne.n	80109b4 <__cmpdf2+0x74>
 80109a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80109a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80109ac:	d1d6      	bne.n	801095c <__cmpdf2+0x1c>
 80109ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80109b2:	d0d3      	beq.n	801095c <__cmpdf2+0x1c>
 80109b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop

080109bc <__aeabi_cdrcmple>:
 80109bc:	4684      	mov	ip, r0
 80109be:	4610      	mov	r0, r2
 80109c0:	4662      	mov	r2, ip
 80109c2:	468c      	mov	ip, r1
 80109c4:	4619      	mov	r1, r3
 80109c6:	4663      	mov	r3, ip
 80109c8:	e000      	b.n	80109cc <__aeabi_cdcmpeq>
 80109ca:	bf00      	nop

080109cc <__aeabi_cdcmpeq>:
 80109cc:	b501      	push	{r0, lr}
 80109ce:	f7ff ffb7 	bl	8010940 <__cmpdf2>
 80109d2:	2800      	cmp	r0, #0
 80109d4:	bf48      	it	mi
 80109d6:	f110 0f00 	cmnmi.w	r0, #0
 80109da:	bd01      	pop	{r0, pc}

080109dc <__aeabi_dcmpeq>:
 80109dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80109e0:	f7ff fff4 	bl	80109cc <__aeabi_cdcmpeq>
 80109e4:	bf0c      	ite	eq
 80109e6:	2001      	moveq	r0, #1
 80109e8:	2000      	movne	r0, #0
 80109ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80109ee:	bf00      	nop

080109f0 <__aeabi_dcmplt>:
 80109f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80109f4:	f7ff ffea 	bl	80109cc <__aeabi_cdcmpeq>
 80109f8:	bf34      	ite	cc
 80109fa:	2001      	movcc	r0, #1
 80109fc:	2000      	movcs	r0, #0
 80109fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a02:	bf00      	nop

08010a04 <__aeabi_dcmple>:
 8010a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a08:	f7ff ffe0 	bl	80109cc <__aeabi_cdcmpeq>
 8010a0c:	bf94      	ite	ls
 8010a0e:	2001      	movls	r0, #1
 8010a10:	2000      	movhi	r0, #0
 8010a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a16:	bf00      	nop

08010a18 <__aeabi_dcmpge>:
 8010a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a1c:	f7ff ffce 	bl	80109bc <__aeabi_cdrcmple>
 8010a20:	bf94      	ite	ls
 8010a22:	2001      	movls	r0, #1
 8010a24:	2000      	movhi	r0, #0
 8010a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a2a:	bf00      	nop

08010a2c <__aeabi_dcmpgt>:
 8010a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a30:	f7ff ffc4 	bl	80109bc <__aeabi_cdrcmple>
 8010a34:	bf34      	ite	cc
 8010a36:	2001      	movcc	r0, #1
 8010a38:	2000      	movcs	r0, #0
 8010a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a3e:	bf00      	nop

08010a40 <__aeabi_dcmpun>:
 8010a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a48:	d102      	bne.n	8010a50 <__aeabi_dcmpun+0x10>
 8010a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010a4e:	d10a      	bne.n	8010a66 <__aeabi_dcmpun+0x26>
 8010a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a58:	d102      	bne.n	8010a60 <__aeabi_dcmpun+0x20>
 8010a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010a5e:	d102      	bne.n	8010a66 <__aeabi_dcmpun+0x26>
 8010a60:	f04f 0000 	mov.w	r0, #0
 8010a64:	4770      	bx	lr
 8010a66:	f04f 0001 	mov.w	r0, #1
 8010a6a:	4770      	bx	lr

08010a6c <__aeabi_d2f>:
 8010a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010a74:	bf24      	itt	cs
 8010a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010a7e:	d90d      	bls.n	8010a9c <__aeabi_d2f+0x30>
 8010a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010a94:	bf08      	it	eq
 8010a96:	f020 0001 	biceq.w	r0, r0, #1
 8010a9a:	4770      	bx	lr
 8010a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010aa0:	d121      	bne.n	8010ae6 <__aeabi_d2f+0x7a>
 8010aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010aa6:	bfbc      	itt	lt
 8010aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010aac:	4770      	bxlt	lr
 8010aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010ab6:	f1c2 0218 	rsb	r2, r2, #24
 8010aba:	f1c2 0c20 	rsb	ip, r2, #32
 8010abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8010ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8010ac6:	bf18      	it	ne
 8010ac8:	f040 0001 	orrne.w	r0, r0, #1
 8010acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010ad8:	ea40 000c 	orr.w	r0, r0, ip
 8010adc:	fa23 f302 	lsr.w	r3, r3, r2
 8010ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010ae4:	e7cc      	b.n	8010a80 <__aeabi_d2f+0x14>
 8010ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010aea:	d107      	bne.n	8010afc <__aeabi_d2f+0x90>
 8010aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010af0:	bf1e      	ittt	ne
 8010af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010afa:	4770      	bxne	lr
 8010afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop

08010b0c <__aeabi_uldivmod>:
 8010b0c:	b953      	cbnz	r3, 8010b24 <__aeabi_uldivmod+0x18>
 8010b0e:	b94a      	cbnz	r2, 8010b24 <__aeabi_uldivmod+0x18>
 8010b10:	2900      	cmp	r1, #0
 8010b12:	bf08      	it	eq
 8010b14:	2800      	cmpeq	r0, #0
 8010b16:	bf1c      	itt	ne
 8010b18:	f04f 31ff 	movne.w	r1, #4294967295
 8010b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8010b20:	f000 b972 	b.w	8010e08 <__aeabi_idiv0>
 8010b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8010b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010b2c:	f000 f806 	bl	8010b3c <__udivmoddi4>
 8010b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b38:	b004      	add	sp, #16
 8010b3a:	4770      	bx	lr

08010b3c <__udivmoddi4>:
 8010b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b40:	9e08      	ldr	r6, [sp, #32]
 8010b42:	4604      	mov	r4, r0
 8010b44:	4688      	mov	r8, r1
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d14b      	bne.n	8010be2 <__udivmoddi4+0xa6>
 8010b4a:	428a      	cmp	r2, r1
 8010b4c:	4615      	mov	r5, r2
 8010b4e:	d967      	bls.n	8010c20 <__udivmoddi4+0xe4>
 8010b50:	fab2 f282 	clz	r2, r2
 8010b54:	b14a      	cbz	r2, 8010b6a <__udivmoddi4+0x2e>
 8010b56:	f1c2 0720 	rsb	r7, r2, #32
 8010b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8010b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8010b62:	4095      	lsls	r5, r2
 8010b64:	ea47 0803 	orr.w	r8, r7, r3
 8010b68:	4094      	lsls	r4, r2
 8010b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010b6e:	0c23      	lsrs	r3, r4, #16
 8010b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8010b74:	fa1f fc85 	uxth.w	ip, r5
 8010b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8010b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010b80:	fb07 f10c 	mul.w	r1, r7, ip
 8010b84:	4299      	cmp	r1, r3
 8010b86:	d909      	bls.n	8010b9c <__udivmoddi4+0x60>
 8010b88:	18eb      	adds	r3, r5, r3
 8010b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8010b8e:	f080 811b 	bcs.w	8010dc8 <__udivmoddi4+0x28c>
 8010b92:	4299      	cmp	r1, r3
 8010b94:	f240 8118 	bls.w	8010dc8 <__udivmoddi4+0x28c>
 8010b98:	3f02      	subs	r7, #2
 8010b9a:	442b      	add	r3, r5
 8010b9c:	1a5b      	subs	r3, r3, r1
 8010b9e:	b2a4      	uxth	r4, r4
 8010ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8010ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8010ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8010bb0:	45a4      	cmp	ip, r4
 8010bb2:	d909      	bls.n	8010bc8 <__udivmoddi4+0x8c>
 8010bb4:	192c      	adds	r4, r5, r4
 8010bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8010bba:	f080 8107 	bcs.w	8010dcc <__udivmoddi4+0x290>
 8010bbe:	45a4      	cmp	ip, r4
 8010bc0:	f240 8104 	bls.w	8010dcc <__udivmoddi4+0x290>
 8010bc4:	3802      	subs	r0, #2
 8010bc6:	442c      	add	r4, r5
 8010bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8010bcc:	eba4 040c 	sub.w	r4, r4, ip
 8010bd0:	2700      	movs	r7, #0
 8010bd2:	b11e      	cbz	r6, 8010bdc <__udivmoddi4+0xa0>
 8010bd4:	40d4      	lsrs	r4, r2
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8010bdc:	4639      	mov	r1, r7
 8010bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be2:	428b      	cmp	r3, r1
 8010be4:	d909      	bls.n	8010bfa <__udivmoddi4+0xbe>
 8010be6:	2e00      	cmp	r6, #0
 8010be8:	f000 80eb 	beq.w	8010dc2 <__udivmoddi4+0x286>
 8010bec:	2700      	movs	r7, #0
 8010bee:	e9c6 0100 	strd	r0, r1, [r6]
 8010bf2:	4638      	mov	r0, r7
 8010bf4:	4639      	mov	r1, r7
 8010bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bfa:	fab3 f783 	clz	r7, r3
 8010bfe:	2f00      	cmp	r7, #0
 8010c00:	d147      	bne.n	8010c92 <__udivmoddi4+0x156>
 8010c02:	428b      	cmp	r3, r1
 8010c04:	d302      	bcc.n	8010c0c <__udivmoddi4+0xd0>
 8010c06:	4282      	cmp	r2, r0
 8010c08:	f200 80fa 	bhi.w	8010e00 <__udivmoddi4+0x2c4>
 8010c0c:	1a84      	subs	r4, r0, r2
 8010c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8010c12:	2001      	movs	r0, #1
 8010c14:	4698      	mov	r8, r3
 8010c16:	2e00      	cmp	r6, #0
 8010c18:	d0e0      	beq.n	8010bdc <__udivmoddi4+0xa0>
 8010c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8010c1e:	e7dd      	b.n	8010bdc <__udivmoddi4+0xa0>
 8010c20:	b902      	cbnz	r2, 8010c24 <__udivmoddi4+0xe8>
 8010c22:	deff      	udf	#255	; 0xff
 8010c24:	fab2 f282 	clz	r2, r2
 8010c28:	2a00      	cmp	r2, #0
 8010c2a:	f040 808f 	bne.w	8010d4c <__udivmoddi4+0x210>
 8010c2e:	1b49      	subs	r1, r1, r5
 8010c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010c34:	fa1f f885 	uxth.w	r8, r5
 8010c38:	2701      	movs	r7, #1
 8010c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8010c3e:	0c23      	lsrs	r3, r4, #16
 8010c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8010c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010c48:	fb08 f10c 	mul.w	r1, r8, ip
 8010c4c:	4299      	cmp	r1, r3
 8010c4e:	d907      	bls.n	8010c60 <__udivmoddi4+0x124>
 8010c50:	18eb      	adds	r3, r5, r3
 8010c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8010c56:	d202      	bcs.n	8010c5e <__udivmoddi4+0x122>
 8010c58:	4299      	cmp	r1, r3
 8010c5a:	f200 80cd 	bhi.w	8010df8 <__udivmoddi4+0x2bc>
 8010c5e:	4684      	mov	ip, r0
 8010c60:	1a59      	subs	r1, r3, r1
 8010c62:	b2a3      	uxth	r3, r4
 8010c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8010c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8010c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8010c70:	fb08 f800 	mul.w	r8, r8, r0
 8010c74:	45a0      	cmp	r8, r4
 8010c76:	d907      	bls.n	8010c88 <__udivmoddi4+0x14c>
 8010c78:	192c      	adds	r4, r5, r4
 8010c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c7e:	d202      	bcs.n	8010c86 <__udivmoddi4+0x14a>
 8010c80:	45a0      	cmp	r8, r4
 8010c82:	f200 80b6 	bhi.w	8010df2 <__udivmoddi4+0x2b6>
 8010c86:	4618      	mov	r0, r3
 8010c88:	eba4 0408 	sub.w	r4, r4, r8
 8010c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8010c90:	e79f      	b.n	8010bd2 <__udivmoddi4+0x96>
 8010c92:	f1c7 0c20 	rsb	ip, r7, #32
 8010c96:	40bb      	lsls	r3, r7
 8010c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8010c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8010ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8010ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8010ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8010cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8010cb0:	4325      	orrs	r5, r4
 8010cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8010cb6:	0c2c      	lsrs	r4, r5, #16
 8010cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8010cbc:	fa1f fa8e 	uxth.w	sl, lr
 8010cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8010cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8010cc8:	429c      	cmp	r4, r3
 8010cca:	fa02 f207 	lsl.w	r2, r2, r7
 8010cce:	fa00 f107 	lsl.w	r1, r0, r7
 8010cd2:	d90b      	bls.n	8010cec <__udivmoddi4+0x1b0>
 8010cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8010cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8010cdc:	f080 8087 	bcs.w	8010dee <__udivmoddi4+0x2b2>
 8010ce0:	429c      	cmp	r4, r3
 8010ce2:	f240 8084 	bls.w	8010dee <__udivmoddi4+0x2b2>
 8010ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8010cea:	4473      	add	r3, lr
 8010cec:	1b1b      	subs	r3, r3, r4
 8010cee:	b2ad      	uxth	r5, r5
 8010cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8010cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8010cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8010cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8010d00:	45a2      	cmp	sl, r4
 8010d02:	d908      	bls.n	8010d16 <__udivmoddi4+0x1da>
 8010d04:	eb1e 0404 	adds.w	r4, lr, r4
 8010d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d0c:	d26b      	bcs.n	8010de6 <__udivmoddi4+0x2aa>
 8010d0e:	45a2      	cmp	sl, r4
 8010d10:	d969      	bls.n	8010de6 <__udivmoddi4+0x2aa>
 8010d12:	3802      	subs	r0, #2
 8010d14:	4474      	add	r4, lr
 8010d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8010d1e:	eba4 040a 	sub.w	r4, r4, sl
 8010d22:	454c      	cmp	r4, r9
 8010d24:	46c2      	mov	sl, r8
 8010d26:	464b      	mov	r3, r9
 8010d28:	d354      	bcc.n	8010dd4 <__udivmoddi4+0x298>
 8010d2a:	d051      	beq.n	8010dd0 <__udivmoddi4+0x294>
 8010d2c:	2e00      	cmp	r6, #0
 8010d2e:	d069      	beq.n	8010e04 <__udivmoddi4+0x2c8>
 8010d30:	ebb1 050a 	subs.w	r5, r1, sl
 8010d34:	eb64 0403 	sbc.w	r4, r4, r3
 8010d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8010d3c:	40fd      	lsrs	r5, r7
 8010d3e:	40fc      	lsrs	r4, r7
 8010d40:	ea4c 0505 	orr.w	r5, ip, r5
 8010d44:	e9c6 5400 	strd	r5, r4, [r6]
 8010d48:	2700      	movs	r7, #0
 8010d4a:	e747      	b.n	8010bdc <__udivmoddi4+0xa0>
 8010d4c:	f1c2 0320 	rsb	r3, r2, #32
 8010d50:	fa20 f703 	lsr.w	r7, r0, r3
 8010d54:	4095      	lsls	r5, r2
 8010d56:	fa01 f002 	lsl.w	r0, r1, r2
 8010d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8010d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010d62:	4338      	orrs	r0, r7
 8010d64:	0c01      	lsrs	r1, r0, #16
 8010d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8010d6a:	fa1f f885 	uxth.w	r8, r5
 8010d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8010d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010d76:	fb07 f308 	mul.w	r3, r7, r8
 8010d7a:	428b      	cmp	r3, r1
 8010d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8010d80:	d907      	bls.n	8010d92 <__udivmoddi4+0x256>
 8010d82:	1869      	adds	r1, r5, r1
 8010d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8010d88:	d22f      	bcs.n	8010dea <__udivmoddi4+0x2ae>
 8010d8a:	428b      	cmp	r3, r1
 8010d8c:	d92d      	bls.n	8010dea <__udivmoddi4+0x2ae>
 8010d8e:	3f02      	subs	r7, #2
 8010d90:	4429      	add	r1, r5
 8010d92:	1acb      	subs	r3, r1, r3
 8010d94:	b281      	uxth	r1, r0
 8010d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8010d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8010d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010da2:	fb00 f308 	mul.w	r3, r0, r8
 8010da6:	428b      	cmp	r3, r1
 8010da8:	d907      	bls.n	8010dba <__udivmoddi4+0x27e>
 8010daa:	1869      	adds	r1, r5, r1
 8010dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8010db0:	d217      	bcs.n	8010de2 <__udivmoddi4+0x2a6>
 8010db2:	428b      	cmp	r3, r1
 8010db4:	d915      	bls.n	8010de2 <__udivmoddi4+0x2a6>
 8010db6:	3802      	subs	r0, #2
 8010db8:	4429      	add	r1, r5
 8010dba:	1ac9      	subs	r1, r1, r3
 8010dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8010dc0:	e73b      	b.n	8010c3a <__udivmoddi4+0xfe>
 8010dc2:	4637      	mov	r7, r6
 8010dc4:	4630      	mov	r0, r6
 8010dc6:	e709      	b.n	8010bdc <__udivmoddi4+0xa0>
 8010dc8:	4607      	mov	r7, r0
 8010dca:	e6e7      	b.n	8010b9c <__udivmoddi4+0x60>
 8010dcc:	4618      	mov	r0, r3
 8010dce:	e6fb      	b.n	8010bc8 <__udivmoddi4+0x8c>
 8010dd0:	4541      	cmp	r1, r8
 8010dd2:	d2ab      	bcs.n	8010d2c <__udivmoddi4+0x1f0>
 8010dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8010dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8010ddc:	3801      	subs	r0, #1
 8010dde:	4613      	mov	r3, r2
 8010de0:	e7a4      	b.n	8010d2c <__udivmoddi4+0x1f0>
 8010de2:	4660      	mov	r0, ip
 8010de4:	e7e9      	b.n	8010dba <__udivmoddi4+0x27e>
 8010de6:	4618      	mov	r0, r3
 8010de8:	e795      	b.n	8010d16 <__udivmoddi4+0x1da>
 8010dea:	4667      	mov	r7, ip
 8010dec:	e7d1      	b.n	8010d92 <__udivmoddi4+0x256>
 8010dee:	4681      	mov	r9, r0
 8010df0:	e77c      	b.n	8010cec <__udivmoddi4+0x1b0>
 8010df2:	3802      	subs	r0, #2
 8010df4:	442c      	add	r4, r5
 8010df6:	e747      	b.n	8010c88 <__udivmoddi4+0x14c>
 8010df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8010dfc:	442b      	add	r3, r5
 8010dfe:	e72f      	b.n	8010c60 <__udivmoddi4+0x124>
 8010e00:	4638      	mov	r0, r7
 8010e02:	e708      	b.n	8010c16 <__udivmoddi4+0xda>
 8010e04:	4637      	mov	r7, r6
 8010e06:	e6e9      	b.n	8010bdc <__udivmoddi4+0xa0>

08010e08 <__aeabi_idiv0>:
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop

08010e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b085      	sub	sp, #20
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8010e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4313      	orrs	r3, r2
 8010e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4013      	ands	r3, r2
 8010e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010e30:	68fb      	ldr	r3, [r7, #12]
}
 8010e32:	bf00      	nop
 8010e34:	3714      	adds	r7, #20
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr
	...

08010e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b086      	sub	sp, #24
 8010e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8010e46:	463b      	mov	r3, r7
 8010e48:	2200      	movs	r2, #0
 8010e4a:	601a      	str	r2, [r3, #0]
 8010e4c:	605a      	str	r2, [r3, #4]
 8010e4e:	609a      	str	r2, [r3, #8]
 8010e50:	60da      	str	r2, [r3, #12]
 8010e52:	611a      	str	r2, [r3, #16]
 8010e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8010e56:	4b2b      	ldr	r3, [pc, #172]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e58:	4a2b      	ldr	r2, [pc, #172]	; (8010f08 <MX_ADC1_Init+0xc8>)
 8010e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8010e5c:	4b29      	ldr	r3, [pc, #164]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8010e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8010e64:	4b27      	ldr	r3, [pc, #156]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e66:	2210      	movs	r2, #16
 8010e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8010e6a:	4b26      	ldr	r3, [pc, #152]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8010e70:	4b24      	ldr	r3, [pc, #144]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e72:	2200      	movs	r2, #0
 8010e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8010e76:	4b23      	ldr	r3, [pc, #140]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e78:	2204      	movs	r2, #4
 8010e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8010e7c:	4b21      	ldr	r3, [pc, #132]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e7e:	2200      	movs	r2, #0
 8010e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8010e82:	4b20      	ldr	r3, [pc, #128]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e84:	2201      	movs	r2, #1
 8010e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8010e88:	4b1e      	ldr	r3, [pc, #120]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e8a:	2201      	movs	r2, #1
 8010e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8010e8e:	4b1d      	ldr	r3, [pc, #116]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e90:	2200      	movs	r2, #0
 8010e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8010e96:	4b1b      	ldr	r3, [pc, #108]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e98:	2201      	movs	r2, #1
 8010e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010e9c:	4b19      	ldr	r3, [pc, #100]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010ea2:	4b18      	ldr	r3, [pc, #96]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8010ea8:	4b16      	ldr	r3, [pc, #88]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010eaa:	2201      	movs	r2, #1
 8010eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8010eb0:	4b14      	ldr	r3, [pc, #80]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8010eb6:	4b13      	ldr	r3, [pc, #76]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010eb8:	2200      	movs	r2, #0
 8010eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010ebe:	4811      	ldr	r0, [pc, #68]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010ec0:	f005 fbc6 	bl	8016650 <HAL_ADC_Init>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d001      	beq.n	8010ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8010eca:	f003 f9f3 	bl	80142b4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8010ece:	4b0f      	ldr	r3, [pc, #60]	; (8010f0c <MX_ADC1_Init+0xcc>)
 8010ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010ed2:	2306      	movs	r3, #6
 8010ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8010ed6:	2306      	movs	r3, #6
 8010ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8010eda:	237f      	movs	r3, #127	; 0x7f
 8010edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010ede:	2304      	movs	r3, #4
 8010ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010ee6:	463b      	mov	r3, r7
 8010ee8:	4619      	mov	r1, r3
 8010eea:	4806      	ldr	r0, [pc, #24]	; (8010f04 <MX_ADC1_Init+0xc4>)
 8010eec:	f005 fde6 	bl	8016abc <HAL_ADC_ConfigChannel>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d001      	beq.n	8010efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8010ef6:	f003 f9dd 	bl	80142b4 <Error_Handler>
  }

}
 8010efa:	bf00      	nop
 8010efc:	3718      	adds	r7, #24
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	200279f8 	.word	0x200279f8
 8010f08:	50040000 	.word	0x50040000
 8010f0c:	14f00020 	.word	0x14f00020

08010f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b088      	sub	sp, #32
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f18:	f107 030c 	add.w	r3, r7, #12
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	601a      	str	r2, [r3, #0]
 8010f20:	605a      	str	r2, [r3, #4]
 8010f22:	609a      	str	r2, [r3, #8]
 8010f24:	60da      	str	r2, [r3, #12]
 8010f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4a21      	ldr	r2, [pc, #132]	; (8010fb4 <HAL_ADC_MspInit+0xa4>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d13c      	bne.n	8010fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8010f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010f36:	f7ff ff69 	bl	8010e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010f3a:	2001      	movs	r0, #1
 8010f3c:	f7ff ff66 	bl	8010e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8010f40:	2301      	movs	r3, #1
 8010f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010f44:	2303      	movs	r3, #3
 8010f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f4c:	f107 030c 	add.w	r3, r7, #12
 8010f50:	4619      	mov	r1, r3
 8010f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010f56:	f007 fbdf 	bl	8018718 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8010f5a:	4b17      	ldr	r3, [pc, #92]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f5c:	4a17      	ldr	r2, [pc, #92]	; (8010fbc <HAL_ADC_MspInit+0xac>)
 8010f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8010f60:	4b15      	ldr	r3, [pc, #84]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f62:	2205      	movs	r2, #5
 8010f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010f66:	4b14      	ldr	r3, [pc, #80]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f68:	2200      	movs	r2, #0
 8010f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8010f6c:	4b12      	ldr	r3, [pc, #72]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f6e:	2200      	movs	r2, #0
 8010f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8010f72:	4b11      	ldr	r3, [pc, #68]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f74:	2280      	movs	r2, #128	; 0x80
 8010f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010f78:	4b0f      	ldr	r3, [pc, #60]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010f7e:	4b0e      	ldr	r3, [pc, #56]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f80:	2200      	movs	r2, #0
 8010f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8010f84:	4b0c      	ldr	r3, [pc, #48]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f86:	2220      	movs	r2, #32
 8010f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8010f8a:	4b0b      	ldr	r3, [pc, #44]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8010f90:	4809      	ldr	r0, [pc, #36]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010f92:	f006 fead 	bl	8017cf0 <HAL_DMA_Init>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d001      	beq.n	8010fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8010f9c:	f003 f98a 	bl	80142b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	4a05      	ldr	r2, [pc, #20]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8010fa6:	4a04      	ldr	r2, [pc, #16]	; (8010fb8 <HAL_ADC_MspInit+0xa8>)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8010fac:	bf00      	nop
 8010fae:	3720      	adds	r7, #32
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	50040000 	.word	0x50040000
 8010fb8:	20027a5c 	.word	0x20027a5c
 8010fbc:	40020008 	.word	0x40020008

08010fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8010fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8010fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	608b      	str	r3, [r1, #8]
}
 8010fdc:	bf00      	nop
 8010fde:	370c      	adds	r7, #12
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr

08010fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8010fec:	f000 f80a 	bl	8011004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8010ff0:	4903      	ldr	r1, [pc, #12]	; (8011000 <APPE_Init+0x18>)
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	f002 f8fc 	bl	80131f0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8010ff8:	f000 f80e 	bl	8011018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8010ffc:	bf00      	nop
}
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	20028720 	.word	0x20028720

08011004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8011004:	b580      	push	{r7, lr}
 8011006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8011008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801100c:	f7ff ffd8 	bl	8010fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8011010:	f015 fad8 	bl	80265c4 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8011014:	bf00      	nop
}
 8011016:	bd80      	pop	{r7, pc}

08011018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b088      	sub	sp, #32
 801101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 801101e:	f013 f941 	bl	80242a4 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8011022:	2000      	movs	r0, #0
 8011024:	f00d fd08 	bl	801ea38 <osMutexNew>
 8011028:	4602      	mov	r2, r0
 801102a:	4b17      	ldr	r3, [pc, #92]	; (8011088 <appe_Tl_Init+0x70>)
 801102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 801102e:	2200      	movs	r2, #0
 8011030:	2100      	movs	r1, #0
 8011032:	2001      	movs	r0, #1
 8011034:	f00d fe48 	bl	801ecc8 <osSemaphoreNew>
 8011038:	4602      	mov	r2, r0
 801103a:	4b14      	ldr	r3, [pc, #80]	; (801108c <appe_Tl_Init+0x74>)
 801103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 801103e:	4a14      	ldr	r2, [pc, #80]	; (8011090 <appe_Tl_Init+0x78>)
 8011040:	2100      	movs	r1, #0
 8011042:	4814      	ldr	r0, [pc, #80]	; (8011094 <appe_Tl_Init+0x7c>)
 8011044:	f00d f9b4 	bl	801e3b0 <osThreadNew>
 8011048:	4602      	mov	r2, r0
 801104a:	4b13      	ldr	r3, [pc, #76]	; (8011098 <appe_Tl_Init+0x80>)
 801104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 801104e:	4b13      	ldr	r3, [pc, #76]	; (801109c <appe_Tl_Init+0x84>)
 8011050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8011052:	4b13      	ldr	r3, [pc, #76]	; (80110a0 <appe_Tl_Init+0x88>)
 8011054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8011056:	463b      	mov	r3, r7
 8011058:	4619      	mov	r1, r3
 801105a:	4812      	ldr	r0, [pc, #72]	; (80110a4 <appe_Tl_Init+0x8c>)
 801105c:	f012 fe26 	bl	8023cac <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8011060:	2300      	movs	r3, #0
 8011062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8011064:	4b10      	ldr	r3, [pc, #64]	; (80110a8 <appe_Tl_Init+0x90>)
 8011066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8011068:	4b10      	ldr	r3, [pc, #64]	; (80110ac <appe_Tl_Init+0x94>)
 801106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 801106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8011070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8011072:	f107 0308 	add.w	r3, r7, #8
 8011076:	4618      	mov	r0, r3
 8011078:	f013 fa52 	bl	8024520 <TL_MM_Init>

  TL_Enable();
 801107c:	f013 f90c 	bl	8024298 <TL_Enable>

  return;
 8011080:	bf00      	nop
}
 8011082:	3720      	adds	r7, #32
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	20027abc 	.word	0x20027abc
 801108c:	20027ad4 	.word	0x20027ad4
 8011090:	080288a8 	.word	0x080288a8
 8011094:	08011199 	.word	0x08011199
 8011098:	20027ac0 	.word	0x20027ac0
 801109c:	20030600 	.word	0x20030600
 80110a0:	080110b1 	.word	0x080110b1
 80110a4:	080110f1 	.word	0x080110f1
 80110a8:	2003070c 	.word	0x2003070c
 80110ac:	200300c4 	.word	0x200300c4

080110b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	4603      	mov	r3, r0
 80110b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80110ba:	79fb      	ldrb	r3, [r7, #7]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d002      	beq.n	80110c6 <APPE_SysStatusNot+0x16>
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d008      	beq.n	80110d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80110c4:	e00d      	b.n	80110e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80110c6:	4b09      	ldr	r3, [pc, #36]	; (80110ec <APPE_SysStatusNot+0x3c>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f04f 31ff 	mov.w	r1, #4294967295
 80110ce:	4618      	mov	r0, r3
 80110d0:	f00d fd4c 	bl	801eb6c <osMutexAcquire>
      break;
 80110d4:	e005      	b.n	80110e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80110d6:	4b05      	ldr	r3, [pc, #20]	; (80110ec <APPE_SysStatusNot+0x3c>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4618      	mov	r0, r3
 80110dc:	f00d fda4 	bl	801ec28 <osMutexRelease>
      break;
 80110e0:	bf00      	nop
  }
  return;
 80110e2:	bf00      	nop
}
 80110e4:	3708      	adds	r7, #8
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	20027abc 	.word	0x20027abc

080110f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	330b      	adds	r3, #11
 80110fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	881b      	ldrh	r3, [r3, #0]
 8011104:	b29b      	uxth	r3, r3
 8011106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 801110a:	d004      	beq.n	8011116 <APPE_SysUserEvtRx+0x26>
 801110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8011110:	4293      	cmp	r3, r2
 8011112:	d003      	beq.n	801111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8011114:	e008      	b.n	8011128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8011116:	f000 f833 	bl	8011180 <APPE_SysEvtReadyProcessing>
         break;
 801111a:	e005      	b.n	8011128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	789b      	ldrb	r3, [r3, #2]
 8011120:	4618      	mov	r0, r3
 8011122:	f000 f805 	bl	8011130 <APPE_SysEvtError>
         break;
 8011126:	bf00      	nop
  }
  return;
 8011128:	bf00      	nop
}
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	4603      	mov	r3, r0
 8011138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 801113a:	79fb      	ldrb	r3, [r7, #7]
 801113c:	2b7d      	cmp	r3, #125	; 0x7d
 801113e:	d002      	beq.n	8011146 <APPE_SysEvtError+0x16>
 8011140:	2b7e      	cmp	r3, #126	; 0x7e
 8011142:	d006      	beq.n	8011152 <APPE_SysEvtError+0x22>
 8011144:	e00b      	b.n	801115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8011146:	4a0b      	ldr	r2, [pc, #44]	; (8011174 <APPE_SysEvtError+0x44>)
 8011148:	2101      	movs	r1, #1
 801114a:	2000      	movs	r0, #0
 801114c:	f004 f96a 	bl	8015424 <logApplication>
       break;
 8011150:	e00c      	b.n	801116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8011152:	4a09      	ldr	r2, [pc, #36]	; (8011178 <APPE_SysEvtError+0x48>)
 8011154:	2101      	movs	r1, #1
 8011156:	2000      	movs	r0, #0
 8011158:	f004 f964 	bl	8015424 <logApplication>
       break;
 801115c:	e006      	b.n	801116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 801115e:	79fb      	ldrb	r3, [r7, #7]
 8011160:	4a06      	ldr	r2, [pc, #24]	; (801117c <APPE_SysEvtError+0x4c>)
 8011162:	2101      	movs	r1, #1
 8011164:	2000      	movs	r0, #0
 8011166:	f004 f95d 	bl	8015424 <logApplication>
       break;
 801116a:	bf00      	nop
  }
  return;
 801116c:	bf00      	nop
}
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	08027e48 	.word	0x08027e48
 8011178:	08027e6c 	.word	0x08027e6c
 801117c:	08027e8c 	.word	0x08027e8c

08011180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8011180:	b580      	push	{r7, lr}
 8011182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8011184:	f013 fa3c 	bl	8024600 <TL_TRACES_Init>

  APP_THREAD_Init();
 8011188:	f013 faba 	bl	8024700 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 801118c:	2100      	movs	r1, #0
 801118e:	2001      	movs	r0, #1
 8011190:	f015 fa2a 	bl	80265e8 <UTIL_LPM_SetOffMode>
  return;
 8011194:	bf00      	nop
}
 8011196:	bd80      	pop	{r7, pc}

08011198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80111a0:	f04f 32ff 	mov.w	r2, #4294967295
 80111a4:	2100      	movs	r1, #0
 80111a6:	2001      	movs	r0, #1
 80111a8:	f00d fa60 	bl	801e66c <osThreadFlagsWait>
     shci_user_evt_proc();
 80111ac:	f012 fd9a 	bl	8023ce4 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80111b0:	e7f6      	b.n	80111a0 <ShciUserEvtProcess+0x8>
	...

080111b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80111bc:	4b04      	ldr	r3, [pc, #16]	; (80111d0 <shci_notify_asynch_evt+0x1c>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	2101      	movs	r1, #1
 80111c2:	4618      	mov	r0, r3
 80111c4:	f00d f9a0 	bl	801e508 <osThreadFlagsSet>
  return;
 80111c8:	bf00      	nop
}
 80111ca:	3708      	adds	r7, #8
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	20027ac0 	.word	0x20027ac0

080111d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80111dc:	4b04      	ldr	r3, [pc, #16]	; (80111f0 <shci_cmd_resp_release+0x1c>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f00d fe75 	bl	801eed0 <osSemaphoreRelease>
  return;
 80111e6:	bf00      	nop
}
 80111e8:	3708      	adds	r7, #8
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	20027ad4 	.word	0x20027ad4

080111f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80111fc:	4b05      	ldr	r3, [pc, #20]	; (8011214 <shci_cmd_resp_wait+0x20>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	f04f 31ff 	mov.w	r1, #4294967295
 8011204:	4618      	mov	r0, r3
 8011206:	f00d fdfd 	bl	801ee04 <osSemaphoreAcquire>
  return;
 801120a:	bf00      	nop
}
 801120c:	3708      	adds	r7, #8
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	20027ad4 	.word	0x20027ad4

08011218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f013 f9b9 	bl	8024598 <TL_MM_EvtDone>
}
 8011226:	bf00      	nop
 8011228:	3708      	adds	r7, #8
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 801122e:	b480      	push	{r7}
 8011230:	af00      	add	r7, sp, #0

}
 8011232:	bf00      	nop
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr

0801123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8011240:	f004 ffcc 	bl	80161dc <HAL_GetTick>
 8011244:	4603      	mov	r3, r0
}
 8011246:	4618      	mov	r0, r3
 8011248:	bd80      	pop	{r7, pc}

0801124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 801124a:	b480      	push	{r7}
 801124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 801124e:	bf00      	nop
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr

08011258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8011258:	b480      	push	{r7}
 801125a:	b083      	sub	sp, #12
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8011262:	4b06      	ldr	r3, [pc, #24]	; (801127c <vApplicationStackOverflowHook+0x24>)
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	b2db      	uxtb	r3, r3
 8011268:	3301      	adds	r3, #1
 801126a:	b2da      	uxtb	r2, r3
 801126c:	4b03      	ldr	r3, [pc, #12]	; (801127c <vApplicationStackOverflowHook+0x24>)
 801126e:	701a      	strb	r2, [r3, #0]
}
 8011270:	bf00      	nop
 8011272:	370c      	adds	r7, #12
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr
 801127c:	2000027c 	.word	0x2000027c

08011280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8011280:	b480      	push	{r7}
 8011282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8011284:	4b05      	ldr	r3, [pc, #20]	; (801129c <vApplicationMallocFailedHook+0x1c>)
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	b2db      	uxtb	r3, r3
 801128a:	3301      	adds	r3, #1
 801128c:	b2da      	uxtb	r2, r3
 801128e:	4b03      	ldr	r3, [pc, #12]	; (801129c <vApplicationMallocFailedHook+0x1c>)
 8011290:	701a      	strb	r2, [r3, #0]

}
 8011292:	bf00      	nop
 8011294:	46bd      	mov	sp, r7
 8011296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129a:	4770      	bx	lr
 801129c:	2000027c 	.word	0x2000027c

080112a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80112a0:	b580      	push	{r7, lr}
 80112a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80112a4:	4a5c      	ldr	r2, [pc, #368]	; (8011418 <MX_FREERTOS_Init+0x178>)
 80112a6:	2101      	movs	r1, #1
 80112a8:	2001      	movs	r0, #1
 80112aa:	f00d fd0d 	bl	801ecc8 <osSemaphoreNew>
 80112ae:	4602      	mov	r2, r0
 80112b0:	4b5a      	ldr	r3, [pc, #360]	; (801141c <MX_FREERTOS_Init+0x17c>)
 80112b2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80112b4:	4a5a      	ldr	r2, [pc, #360]	; (8011420 <MX_FREERTOS_Init+0x180>)
 80112b6:	2101      	movs	r1, #1
 80112b8:	2001      	movs	r0, #1
 80112ba:	f00d fd05 	bl	801ecc8 <osSemaphoreNew>
 80112be:	4602      	mov	r2, r0
 80112c0:	4b58      	ldr	r3, [pc, #352]	; (8011424 <MX_FREERTOS_Init+0x184>)
 80112c2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80112c4:	4a58      	ldr	r2, [pc, #352]	; (8011428 <MX_FREERTOS_Init+0x188>)
 80112c6:	2101      	movs	r1, #1
 80112c8:	2001      	movs	r0, #1
 80112ca:	f00d fcfd 	bl	801ecc8 <osSemaphoreNew>
 80112ce:	4602      	mov	r2, r0
 80112d0:	4b56      	ldr	r3, [pc, #344]	; (801142c <MX_FREERTOS_Init+0x18c>)
 80112d2:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, NULL, &viveTimer_attributes);
 80112d4:	4b56      	ldr	r3, [pc, #344]	; (8011430 <MX_FREERTOS_Init+0x190>)
 80112d6:	2200      	movs	r2, #0
 80112d8:	2101      	movs	r1, #1
 80112da:	4856      	ldr	r0, [pc, #344]	; (8011434 <MX_FREERTOS_Init+0x194>)
 80112dc:	f00d fa9e 	bl	801e81c <osTimerNew>
 80112e0:	4602      	mov	r2, r0
 80112e2:	4b55      	ldr	r3, [pc, #340]	; (8011438 <MX_FREERTOS_Init+0x198>)
 80112e4:	601a      	str	r2, [r3, #0]
//  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 80112e6:	4a55      	ldr	r2, [pc, #340]	; (801143c <MX_FREERTOS_Init+0x19c>)
 80112e8:	216c      	movs	r1, #108	; 0x6c
 80112ea:	200a      	movs	r0, #10
 80112ec:	f00d fe48 	bl	801ef80 <osMessageQueueNew>
 80112f0:	4602      	mov	r2, r0
 80112f2:	4b53      	ldr	r3, [pc, #332]	; (8011440 <MX_FREERTOS_Init+0x1a0>)
 80112f4:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 80112f6:	4a53      	ldr	r2, [pc, #332]	; (8011444 <MX_FREERTOS_Init+0x1a4>)
 80112f8:	2104      	movs	r1, #4
 80112fa:	2003      	movs	r0, #3
 80112fc:	f00d fe40 	bl	801ef80 <osMessageQueueNew>
 8011300:	4602      	mov	r2, r0
 8011302:	4b51      	ldr	r3, [pc, #324]	; (8011448 <MX_FREERTOS_Init+0x1a8>)
 8011304:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8011306:	4a51      	ldr	r2, [pc, #324]	; (801144c <MX_FREERTOS_Init+0x1ac>)
 8011308:	2106      	movs	r1, #6
 801130a:	2004      	movs	r0, #4
 801130c:	f00d fe38 	bl	801ef80 <osMessageQueueNew>
 8011310:	4602      	mov	r2, r0
 8011312:	4b4f      	ldr	r3, [pc, #316]	; (8011450 <MX_FREERTOS_Init+0x1b0>)
 8011314:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8011316:	4a4f      	ldr	r2, [pc, #316]	; (8011454 <MX_FREERTOS_Init+0x1b4>)
 8011318:	2118      	movs	r1, #24
 801131a:	200a      	movs	r0, #10
 801131c:	f00d fe30 	bl	801ef80 <osMessageQueueNew>
 8011320:	4602      	mov	r2, r0
 8011322:	4b4d      	ldr	r3, [pc, #308]	; (8011458 <MX_FREERTOS_Init+0x1b8>)
 8011324:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8011326:	4a4d      	ldr	r2, [pc, #308]	; (801145c <MX_FREERTOS_Init+0x1bc>)
 8011328:	2128      	movs	r1, #40	; 0x28
 801132a:	200a      	movs	r0, #10
 801132c:	f00d fe28 	bl	801ef80 <osMessageQueueNew>
 8011330:	4602      	mov	r2, r0
 8011332:	4b4b      	ldr	r3, [pc, #300]	; (8011460 <MX_FREERTOS_Init+0x1c0>)
 8011334:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8011336:	4a4b      	ldr	r2, [pc, #300]	; (8011464 <MX_FREERTOS_Init+0x1c4>)
 8011338:	2110      	movs	r1, #16
 801133a:	200a      	movs	r0, #10
 801133c:	f00d fe20 	bl	801ef80 <osMessageQueueNew>
 8011340:	4602      	mov	r2, r0
 8011342:	4b49      	ldr	r3, [pc, #292]	; (8011468 <MX_FREERTOS_Init+0x1c8>)
 8011344:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8011346:	4a49      	ldr	r2, [pc, #292]	; (801146c <MX_FREERTOS_Init+0x1cc>)
 8011348:	2118      	movs	r1, #24
 801134a:	2003      	movs	r0, #3
 801134c:	f00d fe18 	bl	801ef80 <osMessageQueueNew>
 8011350:	4602      	mov	r2, r0
 8011352:	4b47      	ldr	r3, [pc, #284]	; (8011470 <MX_FREERTOS_Init+0x1d0>)
 8011354:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8011356:	4a47      	ldr	r2, [pc, #284]	; (8011474 <MX_FREERTOS_Init+0x1d4>)
 8011358:	2106      	movs	r1, #6
 801135a:	200a      	movs	r0, #10
 801135c:	f00d fe10 	bl	801ef80 <osMessageQueueNew>
 8011360:	4602      	mov	r2, r0
 8011362:	4b45      	ldr	r3, [pc, #276]	; (8011478 <MX_FREERTOS_Init+0x1d8>)
 8011364:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8011366:	4a45      	ldr	r2, [pc, #276]	; (801147c <MX_FREERTOS_Init+0x1dc>)
 8011368:	2118      	movs	r1, #24
 801136a:	200a      	movs	r0, #10
 801136c:	f00d fe08 	bl	801ef80 <osMessageQueueNew>
 8011370:	4602      	mov	r2, r0
 8011372:	4b43      	ldr	r3, [pc, #268]	; (8011480 <MX_FREERTOS_Init+0x1e0>)
 8011374:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 8011376:	4a43      	ldr	r2, [pc, #268]	; (8011484 <MX_FREERTOS_Init+0x1e4>)
 8011378:	2104      	movs	r1, #4
 801137a:	2001      	movs	r0, #1
 801137c:	f00d fe00 	bl	801ef80 <osMessageQueueNew>
 8011380:	4602      	mov	r2, r0
 8011382:	4b41      	ldr	r3, [pc, #260]	; (8011488 <MX_FREERTOS_Init+0x1e8>)
 8011384:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8011386:	4a41      	ldr	r2, [pc, #260]	; (801148c <MX_FREERTOS_Init+0x1ec>)
 8011388:	2100      	movs	r1, #0
 801138a:	4841      	ldr	r0, [pc, #260]	; (8011490 <MX_FREERTOS_Init+0x1f0>)
 801138c:	f00d f810 	bl	801e3b0 <osThreadNew>
 8011390:	4602      	mov	r2, r0
 8011392:	4b40      	ldr	r3, [pc, #256]	; (8011494 <MX_FREERTOS_Init+0x1f4>)
 8011394:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 8011396:	4a40      	ldr	r2, [pc, #256]	; (8011498 <MX_FREERTOS_Init+0x1f8>)
 8011398:	2100      	movs	r1, #0
 801139a:	4840      	ldr	r0, [pc, #256]	; (801149c <MX_FREERTOS_Init+0x1fc>)
 801139c:	f00d f808 	bl	801e3b0 <osThreadNew>
 80113a0:	4602      	mov	r2, r0
 80113a2:	4b3f      	ldr	r3, [pc, #252]	; (80114a0 <MX_FREERTOS_Init+0x200>)
 80113a4:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80113a6:	4a3f      	ldr	r2, [pc, #252]	; (80114a4 <MX_FREERTOS_Init+0x204>)
 80113a8:	2100      	movs	r1, #0
 80113aa:	483f      	ldr	r0, [pc, #252]	; (80114a8 <MX_FREERTOS_Init+0x208>)
 80113ac:	f00d f800 	bl	801e3b0 <osThreadNew>
 80113b0:	4602      	mov	r2, r0
 80113b2:	4b3e      	ldr	r3, [pc, #248]	; (80114ac <MX_FREERTOS_Init+0x20c>)
 80113b4:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80113b6:	4a3e      	ldr	r2, [pc, #248]	; (80114b0 <MX_FREERTOS_Init+0x210>)
 80113b8:	2100      	movs	r1, #0
 80113ba:	483e      	ldr	r0, [pc, #248]	; (80114b4 <MX_FREERTOS_Init+0x214>)
 80113bc:	f00c fff8 	bl	801e3b0 <osThreadNew>
 80113c0:	4602      	mov	r2, r0
 80113c2:	4b3d      	ldr	r3, [pc, #244]	; (80114b8 <MX_FREERTOS_Init+0x218>)
 80113c4:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 80113c6:	4a3d      	ldr	r2, [pc, #244]	; (80114bc <MX_FREERTOS_Init+0x21c>)
 80113c8:	2100      	movs	r1, #0
 80113ca:	483d      	ldr	r0, [pc, #244]	; (80114c0 <MX_FREERTOS_Init+0x220>)
 80113cc:	f00c fff0 	bl	801e3b0 <osThreadNew>
 80113d0:	4602      	mov	r2, r0
 80113d2:	4b3c      	ldr	r3, [pc, #240]	; (80114c4 <MX_FREERTOS_Init+0x224>)
 80113d4:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 80113d6:	4a3c      	ldr	r2, [pc, #240]	; (80114c8 <MX_FREERTOS_Init+0x228>)
 80113d8:	2100      	movs	r1, #0
 80113da:	483c      	ldr	r0, [pc, #240]	; (80114cc <MX_FREERTOS_Init+0x22c>)
 80113dc:	f00c ffe8 	bl	801e3b0 <osThreadNew>
 80113e0:	4602      	mov	r2, r0
 80113e2:	4b3b      	ldr	r3, [pc, #236]	; (80114d0 <MX_FREERTOS_Init+0x230>)
 80113e4:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 80113e6:	4a3b      	ldr	r2, [pc, #236]	; (80114d4 <MX_FREERTOS_Init+0x234>)
 80113e8:	2100      	movs	r1, #0
 80113ea:	483b      	ldr	r0, [pc, #236]	; (80114d8 <MX_FREERTOS_Init+0x238>)
 80113ec:	f00c ffe0 	bl	801e3b0 <osThreadNew>
 80113f0:	4602      	mov	r2, r0
 80113f2:	4b3a      	ldr	r3, [pc, #232]	; (80114dc <MX_FREERTOS_Init+0x23c>)
 80113f4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 80113f6:	4b0b      	ldr	r3, [pc, #44]	; (8011424 <MX_FREERTOS_Init+0x184>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	2100      	movs	r1, #0
 80113fc:	4618      	mov	r0, r3
 80113fe:	f00d fd01 	bl	801ee04 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8011402:	4b0a      	ldr	r3, [pc, #40]	; (801142c <MX_FREERTOS_Init+0x18c>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	2100      	movs	r1, #0
 8011408:	4618      	mov	r0, r3
 801140a:	f00d fcfb 	bl	801ee04 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 801140e:	f7ff fdeb 	bl	8010fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8011412:	bf00      	nop
 8011414:	bd80      	pop	{r7, pc}
 8011416:	bf00      	nop
 8011418:	08028ac8 	.word	0x08028ac8
 801141c:	20027bc4 	.word	0x20027bc4
 8011420:	08028ad8 	.word	0x08028ad8
 8011424:	20028008 	.word	0x20028008
 8011428:	08028ae8 	.word	0x08028ae8
 801142c:	20028000 	.word	0x20028000
 8011430:	08028ab8 	.word	0x08028ab8
 8011434:	08013a71 	.word	0x08013a71
 8011438:	20027bb4 	.word	0x20027bb4
 801143c:	080289c8 	.word	0x080289c8
 8011440:	20028014 	.word	0x20028014
 8011444:	080289e0 	.word	0x080289e0
 8011448:	20027bcc 	.word	0x20027bcc
 801144c:	080289f8 	.word	0x080289f8
 8011450:	20027ff8 	.word	0x20027ff8
 8011454:	08028a10 	.word	0x08028a10
 8011458:	20027bd0 	.word	0x20027bd0
 801145c:	08028a28 	.word	0x08028a28
 8011460:	20027bc8 	.word	0x20027bc8
 8011464:	08028a40 	.word	0x08028a40
 8011468:	20027bbc 	.word	0x20027bbc
 801146c:	08028a58 	.word	0x08028a58
 8011470:	20027bd8 	.word	0x20027bd8
 8011474:	08028a70 	.word	0x08028a70
 8011478:	20027ac4 	.word	0x20027ac4
 801147c:	08028a88 	.word	0x08028a88
 8011480:	20027ac8 	.word	0x20027ac8
 8011484:	08028aa0 	.word	0x08028aa0
 8011488:	20027bd4 	.word	0x20027bd4
 801148c:	080288cc 	.word	0x080288cc
 8011490:	080114e1 	.word	0x080114e1
 8011494:	20027bac 	.word	0x20027bac
 8011498:	080288f0 	.word	0x080288f0
 801149c:	08013ebd 	.word	0x08013ebd
 80114a0:	20027bb8 	.word	0x20027bb8
 80114a4:	08028914 	.word	0x08028914
 80114a8:	080142c5 	.word	0x080142c5
 80114ac:	20027ffc 	.word	0x20027ffc
 80114b0:	08028938 	.word	0x08028938
 80114b4:	08013875 	.word	0x08013875
 80114b8:	20028018 	.word	0x20028018
 80114bc:	0802895c 	.word	0x0802895c
 80114c0:	080139e1 	.word	0x080139e1
 80114c4:	2002800c 	.word	0x2002800c
 80114c8:	08028980 	.word	0x08028980
 80114cc:	08013b99 	.word	0x08013b99
 80114d0:	20028004 	.word	0x20028004
 80114d4:	080289a4 	.word	0x080289a4
 80114d8:	080114f1 	.word	0x080114f1
 80114dc:	20027bb0 	.word	0x20027bb0

080114e0 <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80114e8:	2001      	movs	r0, #1
 80114ea:	f00d f953 	bl	801e794 <osDelay>
 80114ee:	e7fb      	b.n	80114e8 <DefaultTask+0x8>

080114f0 <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80114f8:	f04f 32ff 	mov.w	r2, #4294967295
 80114fc:	2100      	movs	r1, #0
 80114fe:	2001      	movs	r0, #1
 8011500:	f00d f8b4 	bl	801e66c <osThreadFlagsWait>
 8011504:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f003 0301 	and.w	r3, r3, #1
 801150c:	2b00      	cmp	r3, #0
 801150e:	d0f3      	beq.n	80114f8 <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8011510:	4b62      	ldr	r3, [pc, #392]	; (801169c <BlinkTask+0x1ac>)
 8011512:	6818      	ldr	r0, [r3, #0]
 8011514:	f04f 33ff 	mov.w	r3, #4294967295
 8011518:	2200      	movs	r2, #0
 801151a:	4961      	ldr	r1, [pc, #388]	; (80116a0 <BlinkTask+0x1b0>)
 801151c:	f00d fe2a 	bl	801f174 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 8011520:	4b5f      	ldr	r3, [pc, #380]	; (80116a0 <BlinkTask+0x1b0>)
 8011522:	2201      	movs	r2, #1
 8011524:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8011526:	4b5d      	ldr	r3, [pc, #372]	; (801169c <BlinkTask+0x1ac>)
 8011528:	6818      	ldr	r0, [r3, #0]
 801152a:	2300      	movs	r3, #0
 801152c:	2200      	movs	r2, #0
 801152e:	495c      	ldr	r1, [pc, #368]	; (80116a0 <BlinkTask+0x1b0>)
 8011530:	f00d fdac 	bl	801f08c <osMessageQueuePut>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 8011534:	485b      	ldr	r0, [pc, #364]	; (80116a4 <BlinkTask+0x1b4>)
 8011536:	f00b fc57 	bl	801cde8 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 801153a:	2104      	movs	r1, #4
 801153c:	4859      	ldr	r0, [pc, #356]	; (80116a4 <BlinkTask+0x1b4>)
 801153e:	f00b fd09 	bl	801cf54 <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 8011542:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8011546:	4958      	ldr	r1, [pc, #352]	; (80116a8 <BlinkTask+0x1b8>)
 8011548:	4858      	ldr	r0, [pc, #352]	; (80116ac <BlinkTask+0x1bc>)
 801154a:	f005 f9c7 	bl	80168dc <HAL_ADC_Start_DMA>
			// message passing until told to stop
			//      note: DMA triggers callback where buffers are switched and the full one
			//      is passed by reference via queue to masterThread for packetization
			while (1) {
				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 801154e:	f04f 32ff 	mov.w	r2, #4294967295
 8011552:	2100      	movs	r1, #0
 8011554:	2006      	movs	r0, #6
 8011556:	f00d f889 	bl	801e66c <osThreadFlagsWait>
 801155a:	60f8      	str	r0, [r7, #12]

				if ((evt & 0x00000004U) == 0x00000004U) {
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f003 0304 	and.w	r3, r3, #4
 8011562:	2b00      	cmp	r3, #0
 8011564:	d064      	beq.n	8011630 <BlinkTask+0x140>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 8011566:	4b52      	ldr	r3, [pc, #328]	; (80116b0 <BlinkTask+0x1c0>)
 8011568:	edd3 7a00 	vldr	s15, [r3]
 801156c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011574:	d108      	bne.n	8011588 <BlinkTask+0x98>
						previousTick_ms = HAL_GetTick();
 8011576:	f004 fe31 	bl	80161dc <HAL_GetTick>
 801157a:	ee07 0a90 	vmov	s15, r0
 801157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011582:	4b4b      	ldr	r3, [pc, #300]	; (80116b0 <BlinkTask+0x1c0>)
 8011584:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 8011588:	f004 fe28 	bl	80161dc <HAL_GetTick>
 801158c:	ee07 0a90 	vmov	s15, r0
 8011590:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011594:	4b46      	ldr	r3, [pc, #280]	; (80116b0 <BlinkTask+0x1c0>)
 8011596:	edd3 7a00 	vldr	s15, [r3]
 801159a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801159e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80115a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80115a6:	4b43      	ldr	r3, [pc, #268]	; (80116b4 <BlinkTask+0x1c4>)
 80115a8:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 80115ac:	4b42      	ldr	r3, [pc, #264]	; (80116b8 <BlinkTask+0x1c8>)
 80115ae:	2200      	movs	r2, #0
 80115b0:	601a      	str	r2, [r3, #0]
 80115b2:	e039      	b.n	8011628 <BlinkTask+0x138>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80115b4:	4b40      	ldr	r3, [pc, #256]	; (80116b8 <BlinkTask+0x1c8>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2264      	movs	r2, #100	; 0x64
 80115ba:	fb02 f303 	mul.w	r3, r2, r3
 80115be:	4a3a      	ldr	r2, [pc, #232]	; (80116a8 <BlinkTask+0x1b8>)
 80115c0:	4413      	add	r3, r2
 80115c2:	4a3e      	ldr	r2, [pc, #248]	; (80116bc <BlinkTask+0x1cc>)
 80115c4:	4610      	mov	r0, r2
 80115c6:	4619      	mov	r1, r3
 80115c8:	2364      	movs	r3, #100	; 0x64
 80115ca:	461a      	mov	r2, r3
 80115cc:	f015 fb2a 	bl	8026c24 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80115d0:	4b37      	ldr	r3, [pc, #220]	; (80116b0 <BlinkTask+0x1c0>)
 80115d2:	ed93 7a00 	vldr	s14, [r3]
 80115d6:	4b37      	ldr	r3, [pc, #220]	; (80116b4 <BlinkTask+0x1c4>)
 80115d8:	edd3 7a00 	vldr	s15, [r3]
 80115dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115e4:	ee17 2a90 	vmov	r2, s15
 80115e8:	4b34      	ldr	r3, [pc, #208]	; (80116bc <BlinkTask+0x1cc>)
 80115ea:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 80115ec:	4b34      	ldr	r3, [pc, #208]	; (80116c0 <BlinkTask+0x1d0>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4a32      	ldr	r2, [pc, #200]	; (80116bc <BlinkTask+0x1cc>)
 80115f2:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 80115f4:	4b31      	ldr	r3, [pc, #196]	; (80116bc <BlinkTask+0x1cc>)
 80115f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115f8:	ee07 3a90 	vmov	s15, r3
 80115fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011600:	4b2b      	ldr	r3, [pc, #172]	; (80116b0 <BlinkTask+0x1c0>)
 8011602:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 8011606:	4b2e      	ldr	r3, [pc, #184]	; (80116c0 <BlinkTask+0x1d0>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	3301      	adds	r3, #1
 801160c:	4a2c      	ldr	r2, [pc, #176]	; (80116c0 <BlinkTask+0x1d0>)
 801160e:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 8011610:	4b2c      	ldr	r3, [pc, #176]	; (80116c4 <BlinkTask+0x1d4>)
 8011612:	6818      	ldr	r0, [r3, #0]
 8011614:	2300      	movs	r3, #0
 8011616:	2200      	movs	r2, #0
 8011618:	4928      	ldr	r1, [pc, #160]	; (80116bc <BlinkTask+0x1cc>)
 801161a:	f00d fd37 	bl	801f08c <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 801161e:	4b26      	ldr	r3, [pc, #152]	; (80116b8 <BlinkTask+0x1c8>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	3301      	adds	r3, #1
 8011624:	4a24      	ldr	r2, [pc, #144]	; (80116b8 <BlinkTask+0x1c8>)
 8011626:	6013      	str	r3, [r2, #0]
 8011628:	4b23      	ldr	r3, [pc, #140]	; (80116b8 <BlinkTask+0x1c8>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2b09      	cmp	r3, #9
 801162e:	d9c1      	bls.n	80115b4 <BlinkTask+0xc4>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f003 0302 	and.w	r3, r3, #2
 8011636:	2b00      	cmp	r3, #0
 8011638:	d089      	beq.n	801154e <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 801163a:	481c      	ldr	r0, [pc, #112]	; (80116ac <BlinkTask+0x1bc>)
 801163c:	f005 f9d2 	bl	80169e4 <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8011640:	2104      	movs	r1, #4
 8011642:	4818      	ldr	r0, [pc, #96]	; (80116a4 <BlinkTask+0x1b4>)
 8011644:	f00b fcd0 	bl	801cfe8 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8011648:	4816      	ldr	r0, [pc, #88]	; (80116a4 <BlinkTask+0x1b4>)
 801164a:	f00b fbf7 	bl	801ce3c <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 801164e:	4b18      	ldr	r3, [pc, #96]	; (80116b0 <BlinkTask+0x1c0>)
 8011650:	f04f 0200 	mov.w	r2, #0
 8011654:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8011656:	4b11      	ldr	r3, [pc, #68]	; (801169c <BlinkTask+0x1ac>)
 8011658:	6818      	ldr	r0, [r3, #0]
 801165a:	f04f 33ff 	mov.w	r3, #4294967295
 801165e:	2200      	movs	r2, #0
 8011660:	490f      	ldr	r1, [pc, #60]	; (80116a0 <BlinkTask+0x1b0>)
 8011662:	f00d fd87 	bl	801f174 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 8011666:	4b0e      	ldr	r3, [pc, #56]	; (80116a0 <BlinkTask+0x1b0>)
 8011668:	2200      	movs	r2, #0
 801166a:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 801166c:	4b0c      	ldr	r3, [pc, #48]	; (80116a0 <BlinkTask+0x1b0>)
 801166e:	795b      	ldrb	r3, [r3, #5]
 8011670:	2b01      	cmp	r3, #1
 8011672:	d104      	bne.n	801167e <BlinkTask+0x18e>
						osSemaphoreRelease(locNotifyHandle);
 8011674:	4b14      	ldr	r3, [pc, #80]	; (80116c8 <BlinkTask+0x1d8>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4618      	mov	r0, r3
 801167a:	f00d fc29 	bl	801eed0 <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 801167e:	4b07      	ldr	r3, [pc, #28]	; (801169c <BlinkTask+0x1ac>)
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	2300      	movs	r3, #0
 8011684:	2200      	movs	r2, #0
 8011686:	4906      	ldr	r1, [pc, #24]	; (80116a0 <BlinkTask+0x1b0>)
 8011688:	f00d fd00 	bl	801f08c <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 801168c:	4b0d      	ldr	r3, [pc, #52]	; (80116c4 <BlinkTask+0x1d4>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4618      	mov	r0, r3
 8011692:	f00d fde1 	bl	801f258 <osMessageQueueReset>

					break;
 8011696:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8011698:	e72e      	b.n	80114f8 <BlinkTask+0x8>
 801169a:	bf00      	nop
 801169c:	20027bd4 	.word	0x20027bd4
 80116a0:	20028020 	.word	0x20028020
 80116a4:	20028784 	.word	0x20028784
 80116a8:	200002ec 	.word	0x200002ec
 80116ac:	200279f8 	.word	0x200279f8
 80116b0:	20000ac4 	.word	0x20000ac4
 80116b4:	20000ac8 	.word	0x20000ac8
 80116b8:	20000ac0 	.word	0x20000ac0
 80116bc:	20000280 	.word	0x20000280
 80116c0:	20000abc 	.word	0x20000abc
 80116c4:	20028014 	.word	0x20028014
 80116c8:	20028008 	.word	0x20028008

080116cc <HAL_ADC_ConvCpltCallback>:
//volatile uint8_t i = 0;
//void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
//	i++;
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 80116d4:	4b06      	ldr	r3, [pc, #24]	; (80116f0 <HAL_ADC_ConvCpltCallback+0x24>)
 80116d6:	4a07      	ldr	r2, [pc, #28]	; (80116f4 <HAL_ADC_ConvCpltCallback+0x28>)
 80116d8:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80116da:	4b07      	ldr	r3, [pc, #28]	; (80116f8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	2104      	movs	r1, #4
 80116e0:	4618      	mov	r0, r3
 80116e2:	f00c ff11 	bl	801e508 <osThreadFlagsSet>

}
 80116e6:	bf00      	nop
 80116e8:	3708      	adds	r7, #8
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	2002801c 	.word	0x2002801c
 80116f4:	200006d4 	.word	0x200006d4
 80116f8:	20027bb0 	.word	0x20027bb0

080116fc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 8011704:	4b06      	ldr	r3, [pc, #24]	; (8011720 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8011706:	4a07      	ldr	r2, [pc, #28]	; (8011724 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8011708:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 801170a:	4b07      	ldr	r3, [pc, #28]	; (8011728 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	2104      	movs	r1, #4
 8011710:	4618      	mov	r0, r3
 8011712:	f00c fef9 	bl	801e508 <osThreadFlagsSet>

}
 8011716:	bf00      	nop
 8011718:	3708      	adds	r7, #8
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	2002801c 	.word	0x2002801c
 8011724:	200002ec 	.word	0x200002ec
 8011728:	20027bb0 	.word	0x20027bb0

0801172c <LL_AHB2_GRP1_EnableClock>:
{
 801172c:	b480      	push	{r7}
 801172e:	b085      	sub	sp, #20
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801173a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	4313      	orrs	r3, r2
 8011742:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8011744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	4013      	ands	r3, r2
 801174e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011750:	68fb      	ldr	r3, [r7, #12]
}
 8011752:	bf00      	nop
 8011754:	3714      	adds	r7, #20
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr
	...

08011760 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8011764:	4b12      	ldr	r3, [pc, #72]	; (80117b0 <MX_COMP1_Init+0x50>)
 8011766:	4a13      	ldr	r2, [pc, #76]	; (80117b4 <MX_COMP1_Init+0x54>)
 8011768:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 801176a:	4b11      	ldr	r3, [pc, #68]	; (80117b0 <MX_COMP1_Init+0x50>)
 801176c:	4a12      	ldr	r2, [pc, #72]	; (80117b8 <MX_COMP1_Init+0x58>)
 801176e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8011770:	4b0f      	ldr	r3, [pc, #60]	; (80117b0 <MX_COMP1_Init+0x50>)
 8011772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011776:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8011778:	4b0d      	ldr	r3, [pc, #52]	; (80117b0 <MX_COMP1_Init+0x50>)
 801177a:	2200      	movs	r2, #0
 801177c:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 801177e:	4b0c      	ldr	r3, [pc, #48]	; (80117b0 <MX_COMP1_Init+0x50>)
 8011780:	2200      	movs	r2, #0
 8011782:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8011784:	4b0a      	ldr	r3, [pc, #40]	; (80117b0 <MX_COMP1_Init+0x50>)
 8011786:	2200      	movs	r2, #0
 8011788:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 801178a:	4b09      	ldr	r3, [pc, #36]	; (80117b0 <MX_COMP1_Init+0x50>)
 801178c:	2200      	movs	r2, #0
 801178e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8011790:	4b07      	ldr	r3, [pc, #28]	; (80117b0 <MX_COMP1_Init+0x50>)
 8011792:	2200      	movs	r2, #0
 8011794:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8011796:	4b06      	ldr	r3, [pc, #24]	; (80117b0 <MX_COMP1_Init+0x50>)
 8011798:	2231      	movs	r2, #49	; 0x31
 801179a:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 801179c:	4804      	ldr	r0, [pc, #16]	; (80117b0 <MX_COMP1_Init+0x50>)
 801179e:	f005 ff87 	bl	80176b0 <HAL_COMP_Init>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d001      	beq.n	80117ac <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80117a8:	f002 fd84 	bl	80142b4 <Error_Handler>
  }

}
 80117ac:	bf00      	nop
 80117ae:	bd80      	pop	{r7, pc}
 80117b0:	20028028 	.word	0x20028028
 80117b4:	40010200 	.word	0x40010200
 80117b8:	00c00010 	.word	0x00c00010

080117bc <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b088      	sub	sp, #32
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80117c4:	f107 030c 	add.w	r3, r7, #12
 80117c8:	2200      	movs	r2, #0
 80117ca:	601a      	str	r2, [r3, #0]
 80117cc:	605a      	str	r2, [r3, #4]
 80117ce:	609a      	str	r2, [r3, #8]
 80117d0:	60da      	str	r2, [r3, #12]
 80117d2:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	4a0f      	ldr	r2, [pc, #60]	; (8011818 <HAL_COMP_MspInit+0x5c>)
 80117da:	4293      	cmp	r3, r2
 80117dc:	d117      	bne.n	801180e <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80117de:	2001      	movs	r0, #1
 80117e0:	f7ff ffa4 	bl	801172c <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 80117e4:	2302      	movs	r3, #2
 80117e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80117e8:	2303      	movs	r3, #3
 80117ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117ec:	2300      	movs	r3, #0
 80117ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 80117f0:	f107 030c 	add.w	r3, r7, #12
 80117f4:	4619      	mov	r1, r3
 80117f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80117fa:	f006 ff8d 	bl	8018718 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 80117fe:	2200      	movs	r2, #0
 8011800:	2105      	movs	r1, #5
 8011802:	2016      	movs	r0, #22
 8011804:	f006 fa1d 	bl	8017c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8011808:	2016      	movs	r0, #22
 801180a:	f006 fa34 	bl	8017c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 801180e:	bf00      	nop
 8011810:	3720      	adds	r7, #32
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	40010200 	.word	0x40010200

0801181c <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 801181c:	b480      	push	{r7}
 801181e:	b089      	sub	sp, #36	; 0x24
 8011820:	af00      	add	r7, sp, #0
 8011822:	60f8      	str	r0, [r7, #12]
 8011824:	60b9      	str	r1, [r7, #8]
 8011826:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8011828:	f04f 33ff 	mov.w	r3, #4294967295
 801182c:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	881b      	ldrh	r3, [r3, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d02a      	beq.n	801188c <process_pulse_lengths+0x70>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	3302      	adds	r3, #2
 801183a:	881b      	ldrh	r3, [r3, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d025      	beq.n	801188c <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	881a      	ldrh	r2, [r3, #0]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	3302      	adds	r3, #2
 8011848:	881b      	ldrh	r3, [r3, #0]
 801184a:	429a      	cmp	r2, r3
 801184c:	bf8c      	ite	hi
 801184e:	2301      	movhi	r3, #1
 8011850:	2300      	movls	r3, #0
 8011852:	b2db      	uxtb	r3, r3
 8011854:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	3301      	adds	r3, #1
 801185c:	68ba      	ldr	r2, [r7, #8]
 801185e:	429a      	cmp	r2, r3
 8011860:	d10e      	bne.n	8011880 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	005a      	lsls	r2, r3, #1
 8011868:	7efb      	ldrb	r3, [r7, #27]
 801186a:	431a      	orrs	r2, r3
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	f003 0303 	and.w	r3, r3, #3
 8011878:	4a1c      	ldr	r2, [pc, #112]	; (80118ec <process_pulse_lengths+0xd0>)
 801187a:	5cd3      	ldrb	r3, [r2, r3]
 801187c:	61fb      	str	r3, [r7, #28]
 801187e:	e002      	b.n	8011886 <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 8011880:	7efa      	ldrb	r2, [r7, #27]
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	68ba      	ldr	r2, [r7, #8]
 801188a:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	2b00      	cmp	r3, #0
 8011890:	db26      	blt.n	80118e0 <process_pulse_lengths+0xc4>
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	689b      	ldr	r3, [r3, #8]
 8011896:	2b0f      	cmp	r3, #15
 8011898:	dc22      	bgt.n	80118e0 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	689b      	ldr	r3, [r3, #8]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d10a      	bne.n	80118b8 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	2201      	movs	r2, #1
 80118a6:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 80118a8:	69fa      	ldr	r2, [r7, #28]
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	1ad3      	subs	r3, r2, r3
 80118ae:	f003 0203 	and.w	r2, r3, #3
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 80118b6:	e013      	b.n	80118e0 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	68da      	ldr	r2, [r3, #12]
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	4413      	add	r3, r2
 80118c0:	f003 0303 	and.w	r3, r3, #3
 80118c4:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	689b      	ldr	r3, [r3, #8]
 80118ca:	69f9      	ldr	r1, [r7, #28]
 80118cc:	697a      	ldr	r2, [r7, #20]
 80118ce:	4291      	cmp	r1, r2
 80118d0:	d101      	bne.n	80118d6 <process_pulse_lengths+0xba>
 80118d2:	2201      	movs	r2, #1
 80118d4:	e001      	b.n	80118da <process_pulse_lengths+0xbe>
 80118d6:	f04f 32ff 	mov.w	r2, #4294967295
 80118da:	441a      	add	r2, r3
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	609a      	str	r2, [r3, #8]
}
 80118e0:	bf00      	nop
 80118e2:	3724      	adds	r7, #36	; 0x24
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr
 80118ec:	08028af8 	.word	0x08028af8

080118f0 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	689b      	ldr	r3, [r3, #8]
 80118fe:	2b03      	cmp	r3, #3
 8011900:	dd06      	ble.n	8011910 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	68da      	ldr	r2, [r3, #12]
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	4413      	add	r3, r2
 801190a:	f003 0303 	and.w	r3, r3, #3
 801190e:	e001      	b.n	8011914 <get_phase+0x24>
    } else {
        return -1;
 8011910:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8011914:	4618      	mov	r0, r3
 8011916:	370c      	adds	r7, #12
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <reset>:

void reset(CyclePhaseClassifier * self) {
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f04f 32ff 	mov.w	r2, #4294967295
 8011934:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	4a05      	ldr	r2, [pc, #20]	; (8011950 <reset+0x30>)
 801193a:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2200      	movs	r2, #0
 8011940:	605a      	str	r2, [r3, #4]
}
 8011942:	bf00      	nop
 8011944:	370c      	adds	r7, #12
 8011946:	46bd      	mov	sp, r7
 8011948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194c:	4770      	bx	lr
 801194e:	bf00      	nop
 8011950:	427a0000 	.word	0x427a0000

08011954 <LL_AHB1_GRP1_EnableClock>:
{
 8011954:	b480      	push	{r7}
 8011956:	b085      	sub	sp, #20
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 801195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	4313      	orrs	r3, r2
 801196a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 801196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	4013      	ands	r3, r2
 8011976:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011978:	68fb      	ldr	r3, [r7, #12]
}
 801197a:	bf00      	nop
 801197c:	3714      	adds	r7, #20
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr

08011986 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8011986:	b580      	push	{r7, lr}
 8011988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 801198a:	2004      	movs	r0, #4
 801198c:	f7ff ffe2 	bl	8011954 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8011990:	2001      	movs	r0, #1
 8011992:	f7ff ffdf 	bl	8011954 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8011996:	2200      	movs	r2, #0
 8011998:	2105      	movs	r1, #5
 801199a:	200b      	movs	r0, #11
 801199c:	f006 f951 	bl	8017c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80119a0:	200b      	movs	r0, #11
 80119a2:	f006 f968 	bl	8017c76 <HAL_NVIC_EnableIRQ>

}
 80119a6:	bf00      	nop
 80119a8:	bd80      	pop	{r7, pc}
	...

080119ac <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 80119b0:	4b17      	ldr	r3, [pc, #92]	; (8011a10 <IMU_dataAvailable+0x64>)
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	2bff      	cmp	r3, #255	; 0xff
 80119b6:	d00d      	beq.n	80119d4 <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80119b8:	4b16      	ldr	r3, [pc, #88]	; (8011a14 <IMU_dataAvailable+0x68>)
 80119ba:	681a      	ldr	r2, [r3, #0]
 80119bc:	4b14      	ldr	r3, [pc, #80]	; (8011a10 <IMU_dataAvailable+0x64>)
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	b29b      	uxth	r3, r3
 80119c2:	4619      	mov	r1, r3
 80119c4:	4610      	mov	r0, r2
 80119c6:	f007 f817 	bl	80189f8 <HAL_GPIO_ReadPin>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	d101      	bne.n	80119d4 <IMU_dataAvailable+0x28>
			return (false);
 80119d0:	2300      	movs	r3, #0
 80119d2:	e01b      	b.n	8011a0c <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 80119d4:	f000 fb3c 	bl	8012050 <IMU_receivePacket>
 80119d8:	4603      	mov	r3, r0
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d015      	beq.n	8011a0a <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80119de:	4b0e      	ldr	r3, [pc, #56]	; (8011a18 <IMU_dataAvailable+0x6c>)
 80119e0:	789b      	ldrb	r3, [r3, #2]
 80119e2:	2203      	movs	r2, #3
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d107      	bne.n	80119f8 <IMU_dataAvailable+0x4c>
 80119e8:	4b0c      	ldr	r3, [pc, #48]	; (8011a1c <IMU_dataAvailable+0x70>)
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	2bfb      	cmp	r3, #251	; 0xfb
 80119ee:	d103      	bne.n	80119f8 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80119f0:	f000 f832 	bl	8011a58 <IMU_parseInputReport>
			return (true);
 80119f4:	2301      	movs	r3, #1
 80119f6:	e009      	b.n	8011a0c <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80119f8:	4b07      	ldr	r3, [pc, #28]	; (8011a18 <IMU_dataAvailable+0x6c>)
 80119fa:	789b      	ldrb	r3, [r3, #2]
 80119fc:	2202      	movs	r2, #2
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d103      	bne.n	8011a0a <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8011a02:	f000 f80d 	bl	8011a20 <IMU_parseCommandReport>
			return (true);
 8011a06:	2301      	movs	r3, #1
 8011a08:	e000      	b.n	8011a0c <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8011a0a:	2300      	movs	r3, #0
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	200280aa 	.word	0x200280aa
 8011a14:	20028170 	.word	0x20028170
 8011a18:	20028058 	.word	0x20028058
 8011a1c:	200280e8 	.word	0x200280e8

08011a20 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b083      	sub	sp, #12
 8011a24:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8011a26:	4b0a      	ldr	r3, [pc, #40]	; (8011a50 <IMU_parseCommandReport+0x30>)
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	2bf1      	cmp	r3, #241	; 0xf1
 8011a2c:	d109      	bne.n	8011a42 <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8011a2e:	4b08      	ldr	r3, [pc, #32]	; (8011a50 <IMU_parseCommandReport+0x30>)
 8011a30:	789b      	ldrb	r3, [r3, #2]
 8011a32:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8011a34:	79fb      	ldrb	r3, [r7, #7]
 8011a36:	2b07      	cmp	r3, #7
 8011a38:	d103      	bne.n	8011a42 <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8011a3a:	4b05      	ldr	r3, [pc, #20]	; (8011a50 <IMU_parseCommandReport+0x30>)
 8011a3c:	795a      	ldrb	r2, [r3, #5]
 8011a3e:	4b05      	ldr	r3, [pc, #20]	; (8011a54 <IMU_parseCommandReport+0x34>)
 8011a40:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8011a42:	bf00      	nop
 8011a44:	370c      	adds	r7, #12
 8011a46:	46bd      	mov	sp, r7
 8011a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4c:	4770      	bx	lr
 8011a4e:	bf00      	nop
 8011a50:	200280e8 	.word	0x200280e8
 8011a54:	2002819b 	.word	0x2002819b

08011a58 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b086      	sub	sp, #24
 8011a5c:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8011a5e:	4b96      	ldr	r3, [pc, #600]	; (8011cb8 <IMU_parseInputReport+0x260>)
 8011a60:	785b      	ldrb	r3, [r3, #1]
 8011a62:	021b      	lsls	r3, r3, #8
 8011a64:	b21a      	sxth	r2, r3
 8011a66:	4b94      	ldr	r3, [pc, #592]	; (8011cb8 <IMU_parseInputReport+0x260>)
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	b21b      	sxth	r3, r3
 8011a6c:	4313      	orrs	r3, r2
 8011a6e:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8011a70:	8a3b      	ldrh	r3, [r7, #16]
 8011a72:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011a76:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8011a78:	8a3b      	ldrh	r3, [r7, #16]
 8011a7a:	3b04      	subs	r3, #4
 8011a7c:	b29b      	uxth	r3, r3
 8011a7e:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8011a80:	4b8e      	ldr	r3, [pc, #568]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011a82:	791b      	ldrb	r3, [r3, #4]
 8011a84:	061a      	lsls	r2, r3, #24
 8011a86:	4b8d      	ldr	r3, [pc, #564]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011a88:	78db      	ldrb	r3, [r3, #3]
 8011a8a:	041b      	lsls	r3, r3, #16
 8011a8c:	431a      	orrs	r2, r3
 8011a8e:	4b8b      	ldr	r3, [pc, #556]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011a90:	789b      	ldrb	r3, [r3, #2]
 8011a92:	021b      	lsls	r3, r3, #8
 8011a94:	4313      	orrs	r3, r2
 8011a96:	4a89      	ldr	r2, [pc, #548]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011a98:	7852      	ldrb	r2, [r2, #1]
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	4a88      	ldr	r2, [pc, #544]	; (8011cc0 <IMU_parseInputReport+0x268>)
 8011a9e:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8011aa0:	4b86      	ldr	r3, [pc, #536]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011aa2:	79db      	ldrb	r3, [r3, #7]
 8011aa4:	f003 0303 	and.w	r3, r3, #3
 8011aa8:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8011aaa:	4b84      	ldr	r3, [pc, #528]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011aac:	7a9b      	ldrb	r3, [r3, #10]
 8011aae:	021b      	lsls	r3, r3, #8
 8011ab0:	b21a      	sxth	r2, r3
 8011ab2:	4b82      	ldr	r3, [pc, #520]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011ab4:	7a5b      	ldrb	r3, [r3, #9]
 8011ab6:	b21b      	sxth	r3, r3
 8011ab8:	4313      	orrs	r3, r2
 8011aba:	b21b      	sxth	r3, r3
 8011abc:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8011abe:	4b7f      	ldr	r3, [pc, #508]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011ac0:	7b1b      	ldrb	r3, [r3, #12]
 8011ac2:	021b      	lsls	r3, r3, #8
 8011ac4:	b21a      	sxth	r2, r3
 8011ac6:	4b7d      	ldr	r3, [pc, #500]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011ac8:	7adb      	ldrb	r3, [r3, #11]
 8011aca:	b21b      	sxth	r3, r3
 8011acc:	4313      	orrs	r3, r2
 8011ace:	b21b      	sxth	r3, r3
 8011ad0:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8011ad2:	4b7a      	ldr	r3, [pc, #488]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011ad4:	7b9b      	ldrb	r3, [r3, #14]
 8011ad6:	021b      	lsls	r3, r3, #8
 8011ad8:	b21a      	sxth	r2, r3
 8011ada:	4b78      	ldr	r3, [pc, #480]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011adc:	7b5b      	ldrb	r3, [r3, #13]
 8011ade:	b21b      	sxth	r3, r3
 8011ae0:	4313      	orrs	r3, r2
 8011ae2:	b21b      	sxth	r3, r3
 8011ae4:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8011aea:	2300      	movs	r3, #0
 8011aec:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8011aee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011af2:	3b05      	subs	r3, #5
 8011af4:	2b09      	cmp	r3, #9
 8011af6:	dd09      	ble.n	8011b0c <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8011af8:	4b70      	ldr	r3, [pc, #448]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011afa:	7c1b      	ldrb	r3, [r3, #16]
 8011afc:	021b      	lsls	r3, r3, #8
 8011afe:	b21a      	sxth	r2, r3
 8011b00:	4b6e      	ldr	r3, [pc, #440]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011b02:	7bdb      	ldrb	r3, [r3, #15]
 8011b04:	b21b      	sxth	r3, r3
 8011b06:	4313      	orrs	r3, r2
 8011b08:	b21b      	sxth	r3, r3
 8011b0a:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8011b0c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011b10:	3b05      	subs	r3, #5
 8011b12:	2b0b      	cmp	r3, #11
 8011b14:	dd09      	ble.n	8011b2a <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8011b16:	4b69      	ldr	r3, [pc, #420]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011b18:	7c9b      	ldrb	r3, [r3, #18]
 8011b1a:	021b      	lsls	r3, r3, #8
 8011b1c:	b21a      	sxth	r2, r3
 8011b1e:	4b67      	ldr	r3, [pc, #412]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011b20:	7c5b      	ldrb	r3, [r3, #17]
 8011b22:	b21b      	sxth	r3, r3
 8011b24:	4313      	orrs	r3, r2
 8011b26:	b21b      	sxth	r3, r3
 8011b28:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8011b2a:	4b64      	ldr	r3, [pc, #400]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011b2c:	795b      	ldrb	r3, [r3, #5]
 8011b2e:	2b01      	cmp	r3, #1
 8011b30:	d10d      	bne.n	8011b4e <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8011b32:	7bfb      	ldrb	r3, [r7, #15]
 8011b34:	b29a      	uxth	r2, r3
 8011b36:	4b63      	ldr	r3, [pc, #396]	; (8011cc4 <IMU_parseInputReport+0x26c>)
 8011b38:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8011b3a:	4a63      	ldr	r2, [pc, #396]	; (8011cc8 <IMU_parseInputReport+0x270>)
 8011b3c:	89bb      	ldrh	r3, [r7, #12]
 8011b3e:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8011b40:	4a62      	ldr	r2, [pc, #392]	; (8011ccc <IMU_parseInputReport+0x274>)
 8011b42:	897b      	ldrh	r3, [r7, #10]
 8011b44:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8011b46:	4a62      	ldr	r2, [pc, #392]	; (8011cd0 <IMU_parseInputReport+0x278>)
 8011b48:	893b      	ldrh	r3, [r7, #8]
 8011b4a:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8011b4c:	e16a      	b.n	8011e24 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8011b4e:	4b5b      	ldr	r3, [pc, #364]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011b50:	795b      	ldrb	r3, [r3, #5]
 8011b52:	2b04      	cmp	r3, #4
 8011b54:	d10d      	bne.n	8011b72 <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8011b56:	7bfb      	ldrb	r3, [r7, #15]
 8011b58:	b29a      	uxth	r2, r3
 8011b5a:	4b5e      	ldr	r3, [pc, #376]	; (8011cd4 <IMU_parseInputReport+0x27c>)
 8011b5c:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8011b5e:	4a5e      	ldr	r2, [pc, #376]	; (8011cd8 <IMU_parseInputReport+0x280>)
 8011b60:	89bb      	ldrh	r3, [r7, #12]
 8011b62:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8011b64:	4a5d      	ldr	r2, [pc, #372]	; (8011cdc <IMU_parseInputReport+0x284>)
 8011b66:	897b      	ldrh	r3, [r7, #10]
 8011b68:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8011b6a:	4a5d      	ldr	r2, [pc, #372]	; (8011ce0 <IMU_parseInputReport+0x288>)
 8011b6c:	893b      	ldrh	r3, [r7, #8]
 8011b6e:	8013      	strh	r3, [r2, #0]
}
 8011b70:	e158      	b.n	8011e24 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8011b72:	4b52      	ldr	r3, [pc, #328]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011b74:	795b      	ldrb	r3, [r3, #5]
 8011b76:	2b02      	cmp	r3, #2
 8011b78:	d10d      	bne.n	8011b96 <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8011b7a:	7bfb      	ldrb	r3, [r7, #15]
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	4b59      	ldr	r3, [pc, #356]	; (8011ce4 <IMU_parseInputReport+0x28c>)
 8011b80:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8011b82:	4a59      	ldr	r2, [pc, #356]	; (8011ce8 <IMU_parseInputReport+0x290>)
 8011b84:	89bb      	ldrh	r3, [r7, #12]
 8011b86:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8011b88:	4a58      	ldr	r2, [pc, #352]	; (8011cec <IMU_parseInputReport+0x294>)
 8011b8a:	897b      	ldrh	r3, [r7, #10]
 8011b8c:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8011b8e:	4a58      	ldr	r2, [pc, #352]	; (8011cf0 <IMU_parseInputReport+0x298>)
 8011b90:	893b      	ldrh	r3, [r7, #8]
 8011b92:	8013      	strh	r3, [r2, #0]
}
 8011b94:	e146      	b.n	8011e24 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8011b96:	4b49      	ldr	r3, [pc, #292]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011b98:	795b      	ldrb	r3, [r3, #5]
 8011b9a:	2b03      	cmp	r3, #3
 8011b9c:	d10d      	bne.n	8011bba <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8011b9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ba0:	b29a      	uxth	r2, r3
 8011ba2:	4b54      	ldr	r3, [pc, #336]	; (8011cf4 <IMU_parseInputReport+0x29c>)
 8011ba4:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8011ba6:	4a54      	ldr	r2, [pc, #336]	; (8011cf8 <IMU_parseInputReport+0x2a0>)
 8011ba8:	89bb      	ldrh	r3, [r7, #12]
 8011baa:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8011bac:	4a53      	ldr	r2, [pc, #332]	; (8011cfc <IMU_parseInputReport+0x2a4>)
 8011bae:	897b      	ldrh	r3, [r7, #10]
 8011bb0:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8011bb2:	4a53      	ldr	r2, [pc, #332]	; (8011d00 <IMU_parseInputReport+0x2a8>)
 8011bb4:	893b      	ldrh	r3, [r7, #8]
 8011bb6:	8013      	strh	r3, [r2, #0]
}
 8011bb8:	e134      	b.n	8011e24 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8011bba:	4b40      	ldr	r3, [pc, #256]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011bbc:	795b      	ldrb	r3, [r3, #5]
 8011bbe:	2b05      	cmp	r3, #5
 8011bc0:	d003      	beq.n	8011bca <IMU_parseInputReport+0x172>
 8011bc2:	4b3e      	ldr	r3, [pc, #248]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011bc4:	795b      	ldrb	r3, [r3, #5]
 8011bc6:	2b08      	cmp	r3, #8
 8011bc8:	d166      	bne.n	8011c98 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8011bca:	f004 fb07 	bl	80161dc <HAL_GetTick>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	4b4c      	ldr	r3, [pc, #304]	; (8011d04 <IMU_parseInputReport+0x2ac>)
 8011bd2:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8011bd4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011bd8:	4b4b      	ldr	r3, [pc, #300]	; (8011d08 <IMU_parseInputReport+0x2b0>)
 8011bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	4619      	mov	r1, r3
 8011be2:	4610      	mov	r0, r2
 8011be4:	f000 f964 	bl	8011eb0 <IMU_qToFloat>
 8011be8:	eef0 7a40 	vmov.f32	s15, s0
 8011bec:	4b45      	ldr	r3, [pc, #276]	; (8011d04 <IMU_parseInputReport+0x2ac>)
 8011bee:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8011bf2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011bf6:	4b44      	ldr	r3, [pc, #272]	; (8011d08 <IMU_parseInputReport+0x2b0>)
 8011bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	4619      	mov	r1, r3
 8011c00:	4610      	mov	r0, r2
 8011c02:	f000 f955 	bl	8011eb0 <IMU_qToFloat>
 8011c06:	eef0 7a40 	vmov.f32	s15, s0
 8011c0a:	4b3e      	ldr	r3, [pc, #248]	; (8011d04 <IMU_parseInputReport+0x2ac>)
 8011c0c:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8011c10:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011c14:	4b3c      	ldr	r3, [pc, #240]	; (8011d08 <IMU_parseInputReport+0x2b0>)
 8011c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	4619      	mov	r1, r3
 8011c1e:	4610      	mov	r0, r2
 8011c20:	f000 f946 	bl	8011eb0 <IMU_qToFloat>
 8011c24:	eef0 7a40 	vmov.f32	s15, s0
 8011c28:	4b36      	ldr	r3, [pc, #216]	; (8011d04 <IMU_parseInputReport+0x2ac>)
 8011c2a:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8011c2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c32:	4b35      	ldr	r3, [pc, #212]	; (8011d08 <IMU_parseInputReport+0x2b0>)
 8011c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c38:	b2db      	uxtb	r3, r3
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	4610      	mov	r0, r2
 8011c3e:	f000 f937 	bl	8011eb0 <IMU_qToFloat>
 8011c42:	eef0 7a40 	vmov.f32	s15, s0
 8011c46:	4b2f      	ldr	r3, [pc, #188]	; (8011d04 <IMU_parseInputReport+0x2ac>)
 8011c48:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8011c4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011c50:	210c      	movs	r1, #12
 8011c52:	4618      	mov	r0, r3
 8011c54:	f000 f92c 	bl	8011eb0 <IMU_qToFloat>
 8011c58:	eef0 7a40 	vmov.f32	s15, s0
 8011c5c:	4b29      	ldr	r3, [pc, #164]	; (8011d04 <IMU_parseInputReport+0x2ac>)
 8011c5e:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8011c62:	4b2a      	ldr	r3, [pc, #168]	; (8011d0c <IMU_parseInputReport+0x2b4>)
 8011c64:	6818      	ldr	r0, [r3, #0]
 8011c66:	2300      	movs	r3, #0
 8011c68:	2200      	movs	r2, #0
 8011c6a:	4926      	ldr	r1, [pc, #152]	; (8011d04 <IMU_parseInputReport+0x2ac>)
 8011c6c:	f00d fa0e 	bl	801f08c <osMessageQueuePut>
		quatAccuracy = status;
 8011c70:	7bfb      	ldrb	r3, [r7, #15]
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	4b26      	ldr	r3, [pc, #152]	; (8011d10 <IMU_parseInputReport+0x2b8>)
 8011c76:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8011c78:	4a26      	ldr	r2, [pc, #152]	; (8011d14 <IMU_parseInputReport+0x2bc>)
 8011c7a:	89bb      	ldrh	r3, [r7, #12]
 8011c7c:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8011c7e:	4a26      	ldr	r2, [pc, #152]	; (8011d18 <IMU_parseInputReport+0x2c0>)
 8011c80:	897b      	ldrh	r3, [r7, #10]
 8011c82:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8011c84:	4a25      	ldr	r2, [pc, #148]	; (8011d1c <IMU_parseInputReport+0x2c4>)
 8011c86:	893b      	ldrh	r3, [r7, #8]
 8011c88:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8011c8a:	4a25      	ldr	r2, [pc, #148]	; (8011d20 <IMU_parseInputReport+0x2c8>)
 8011c8c:	8afb      	ldrh	r3, [r7, #22]
 8011c8e:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8011c90:	4a24      	ldr	r2, [pc, #144]	; (8011d24 <IMU_parseInputReport+0x2cc>)
 8011c92:	8abb      	ldrh	r3, [r7, #20]
 8011c94:	8013      	strh	r3, [r2, #0]
}
 8011c96:	e0c5      	b.n	8011e24 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8011c98:	4b08      	ldr	r3, [pc, #32]	; (8011cbc <IMU_parseInputReport+0x264>)
 8011c9a:	795b      	ldrb	r3, [r3, #5]
 8011c9c:	2b11      	cmp	r3, #17
 8011c9e:	d147      	bne.n	8011d30 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8011ca0:	f004 fa9c 	bl	80161dc <HAL_GetTick>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	4b20      	ldr	r3, [pc, #128]	; (8011d28 <IMU_parseInputReport+0x2d0>)
 8011ca8:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8011caa:	4a1f      	ldr	r2, [pc, #124]	; (8011d28 <IMU_parseInputReport+0x2d0>)
 8011cac:	893b      	ldrh	r3, [r7, #8]
 8011cae:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8011cb0:	4a1e      	ldr	r2, [pc, #120]	; (8011d2c <IMU_parseInputReport+0x2d4>)
 8011cb2:	893b      	ldrh	r3, [r7, #8]
 8011cb4:	8013      	strh	r3, [r2, #0]
}
 8011cb6:	e0b5      	b.n	8011e24 <IMU_parseInputReport+0x3cc>
 8011cb8:	20028058 	.word	0x20028058
 8011cbc:	200280e8 	.word	0x200280e8
 8011cc0:	20028074 	.word	0x20028074
 8011cc4:	200281b0 	.word	0x200281b0
 8011cc8:	20028198 	.word	0x20028198
 8011ccc:	200281b4 	.word	0x200281b4
 8011cd0:	200280b0 	.word	0x200280b0
 8011cd4:	200280ac 	.word	0x200280ac
 8011cd8:	2002807e 	.word	0x2002807e
 8011cdc:	2002819c 	.word	0x2002819c
 8011ce0:	200280da 	.word	0x200280da
 8011ce4:	200280dc 	.word	0x200280dc
 8011ce8:	200280de 	.word	0x200280de
 8011cec:	200280a6 	.word	0x200280a6
 8011cf0:	200280a4 	.word	0x200280a4
 8011cf4:	2002805c 	.word	0x2002805c
 8011cf8:	200280a8 	.word	0x200280a8
 8011cfc:	2002819e 	.word	0x2002819e
 8011d00:	200280ae 	.word	0x200280ae
 8011d04:	200280c0 	.word	0x200280c0
 8011d08:	20000004 	.word	0x20000004
 8011d0c:	20027bd8 	.word	0x20027bd8
 8011d10:	2002807a 	.word	0x2002807a
 8011d14:	200281b2 	.word	0x200281b2
 8011d18:	200280d8 	.word	0x200280d8
 8011d1c:	20028054 	.word	0x20028054
 8011d20:	20028070 	.word	0x20028070
 8011d24:	200280b2 	.word	0x200280b2
 8011d28:	20028060 	.word	0x20028060
 8011d2c:	200281b6 	.word	0x200281b6
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8011d30:	4b3e      	ldr	r3, [pc, #248]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011d32:	795b      	ldrb	r3, [r3, #5]
 8011d34:	2b13      	cmp	r3, #19
 8011d36:	d10d      	bne.n	8011d54 <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8011d38:	f004 fa50 	bl	80161dc <HAL_GetTick>
 8011d3c:	4602      	mov	r2, r0
 8011d3e:	4b3c      	ldr	r3, [pc, #240]	; (8011e30 <IMU_parseInputReport+0x3d8>)
 8011d40:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8011d42:	4b3a      	ldr	r3, [pc, #232]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011d44:	7a5a      	ldrb	r2, [r3, #9]
 8011d46:	4b3a      	ldr	r3, [pc, #232]	; (8011e30 <IMU_parseInputReport+0x3d8>)
 8011d48:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8011d4a:	4b38      	ldr	r3, [pc, #224]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011d4c:	7a5a      	ldrb	r2, [r3, #9]
 8011d4e:	4b39      	ldr	r3, [pc, #228]	; (8011e34 <IMU_parseInputReport+0x3dc>)
 8011d50:	701a      	strb	r2, [r3, #0]
}
 8011d52:	e067      	b.n	8011e24 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8011d54:	4b35      	ldr	r3, [pc, #212]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011d56:	795b      	ldrb	r3, [r3, #5]
 8011d58:	2b1e      	cmp	r3, #30
 8011d5a:	d12b      	bne.n	8011db4 <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8011d5c:	f004 fa3e 	bl	80161dc <HAL_GetTick>
 8011d60:	4602      	mov	r2, r0
 8011d62:	4b35      	ldr	r3, [pc, #212]	; (8011e38 <IMU_parseInputReport+0x3e0>)
 8011d64:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8011d66:	2300      	movs	r3, #0
 8011d68:	74fb      	strb	r3, [r7, #19]
 8011d6a:	e00c      	b.n	8011d86 <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8011d6c:	7cfb      	ldrb	r3, [r7, #19]
 8011d6e:	f103 020b 	add.w	r2, r3, #11
 8011d72:	4b32      	ldr	r3, [pc, #200]	; (8011e3c <IMU_parseInputReport+0x3e4>)
 8011d74:	6819      	ldr	r1, [r3, #0]
 8011d76:	7cfb      	ldrb	r3, [r7, #19]
 8011d78:	440b      	add	r3, r1
 8011d7a:	492c      	ldr	r1, [pc, #176]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011d7c:	5c8a      	ldrb	r2, [r1, r2]
 8011d7e:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8011d80:	7cfb      	ldrb	r3, [r7, #19]
 8011d82:	3301      	adds	r3, #1
 8011d84:	74fb      	strb	r3, [r7, #19]
 8011d86:	7cfb      	ldrb	r3, [r7, #19]
 8011d88:	2b08      	cmp	r3, #8
 8011d8a:	d9ef      	bls.n	8011d6c <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8011d8c:	4b27      	ldr	r3, [pc, #156]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011d8e:	7a9a      	ldrb	r2, [r3, #10]
 8011d90:	4b2b      	ldr	r3, [pc, #172]	; (8011e40 <IMU_parseInputReport+0x3e8>)
 8011d92:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8011d94:	4b29      	ldr	r3, [pc, #164]	; (8011e3c <IMU_parseInputReport+0x3e4>)
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	4b27      	ldr	r3, [pc, #156]	; (8011e38 <IMU_parseInputReport+0x3e0>)
 8011d9a:	6810      	ldr	r0, [r2, #0]
 8011d9c:	6851      	ldr	r1, [r2, #4]
 8011d9e:	c303      	stmia	r3!, {r0, r1}
 8011da0:	7a12      	ldrb	r2, [r2, #8]
 8011da2:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8011da4:	4b27      	ldr	r3, [pc, #156]	; (8011e44 <IMU_parseInputReport+0x3ec>)
 8011da6:	6818      	ldr	r0, [r3, #0]
 8011da8:	2300      	movs	r3, #0
 8011daa:	2200      	movs	r2, #0
 8011dac:	4922      	ldr	r1, [pc, #136]	; (8011e38 <IMU_parseInputReport+0x3e0>)
 8011dae:	f00d f96d 	bl	801f08c <osMessageQueuePut>
}
 8011db2:	e037      	b.n	8011e24 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8011db4:	4b1d      	ldr	r3, [pc, #116]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011db6:	795b      	ldrb	r3, [r3, #5]
 8011db8:	2b14      	cmp	r3, #20
 8011dba:	d109      	bne.n	8011dd0 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8011dbc:	4a22      	ldr	r2, [pc, #136]	; (8011e48 <IMU_parseInputReport+0x3f0>)
 8011dbe:	89bb      	ldrh	r3, [r7, #12]
 8011dc0:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8011dc2:	4a22      	ldr	r2, [pc, #136]	; (8011e4c <IMU_parseInputReport+0x3f4>)
 8011dc4:	897b      	ldrh	r3, [r7, #10]
 8011dc6:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8011dc8:	4a21      	ldr	r2, [pc, #132]	; (8011e50 <IMU_parseInputReport+0x3f8>)
 8011dca:	893b      	ldrh	r3, [r7, #8]
 8011dcc:	8013      	strh	r3, [r2, #0]
}
 8011dce:	e029      	b.n	8011e24 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8011dd0:	4b16      	ldr	r3, [pc, #88]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011dd2:	795b      	ldrb	r3, [r3, #5]
 8011dd4:	2b15      	cmp	r3, #21
 8011dd6:	d109      	bne.n	8011dec <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8011dd8:	4a1e      	ldr	r2, [pc, #120]	; (8011e54 <IMU_parseInputReport+0x3fc>)
 8011dda:	89bb      	ldrh	r3, [r7, #12]
 8011ddc:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8011dde:	4a1e      	ldr	r2, [pc, #120]	; (8011e58 <IMU_parseInputReport+0x400>)
 8011de0:	897b      	ldrh	r3, [r7, #10]
 8011de2:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8011de4:	4a1d      	ldr	r2, [pc, #116]	; (8011e5c <IMU_parseInputReport+0x404>)
 8011de6:	893b      	ldrh	r3, [r7, #8]
 8011de8:	8013      	strh	r3, [r2, #0]
}
 8011dea:	e01b      	b.n	8011e24 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8011dec:	4b0f      	ldr	r3, [pc, #60]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011dee:	795b      	ldrb	r3, [r3, #5]
 8011df0:	2b16      	cmp	r3, #22
 8011df2:	d109      	bne.n	8011e08 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8011df4:	4a1a      	ldr	r2, [pc, #104]	; (8011e60 <IMU_parseInputReport+0x408>)
 8011df6:	89bb      	ldrh	r3, [r7, #12]
 8011df8:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8011dfa:	4a1a      	ldr	r2, [pc, #104]	; (8011e64 <IMU_parseInputReport+0x40c>)
 8011dfc:	897b      	ldrh	r3, [r7, #10]
 8011dfe:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8011e00:	4a19      	ldr	r2, [pc, #100]	; (8011e68 <IMU_parseInputReport+0x410>)
 8011e02:	893b      	ldrh	r3, [r7, #8]
 8011e04:	8013      	strh	r3, [r2, #0]
}
 8011e06:	e00d      	b.n	8011e24 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8011e08:	4b08      	ldr	r3, [pc, #32]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011e0a:	795b      	ldrb	r3, [r3, #5]
 8011e0c:	2bf1      	cmp	r3, #241	; 0xf1
 8011e0e:	d109      	bne.n	8011e24 <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8011e10:	4b06      	ldr	r3, [pc, #24]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011e12:	79db      	ldrb	r3, [r3, #7]
 8011e14:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8011e16:	79fb      	ldrb	r3, [r7, #7]
 8011e18:	2b07      	cmp	r3, #7
 8011e1a:	d103      	bne.n	8011e24 <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8011e1c:	4b03      	ldr	r3, [pc, #12]	; (8011e2c <IMU_parseInputReport+0x3d4>)
 8011e1e:	7a9a      	ldrb	r2, [r3, #10]
 8011e20:	4b12      	ldr	r3, [pc, #72]	; (8011e6c <IMU_parseInputReport+0x414>)
 8011e22:	701a      	strb	r2, [r3, #0]
}
 8011e24:	bf00      	nop
 8011e26:	3718      	adds	r7, #24
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	200280e8 	.word	0x200280e8
 8011e30:	20028068 	.word	0x20028068
 8011e34:	200280e2 	.word	0x200280e2
 8011e38:	200281a0 	.word	0x200281a0
 8011e3c:	200280bc 	.word	0x200280bc
 8011e40:	2002819a 	.word	0x2002819a
 8011e44:	20027bbc 	.word	0x20027bbc
 8011e48:	200280e0 	.word	0x200280e0
 8011e4c:	200280ba 	.word	0x200280ba
 8011e50:	2002816a 	.word	0x2002816a
 8011e54:	2002805e 	.word	0x2002805e
 8011e58:	200280e4 	.word	0x200280e4
 8011e5c:	200280b4 	.word	0x200280b4
 8011e60:	200280b8 	.word	0x200280b8
 8011e64:	200280b6 	.word	0x200280b6
 8011e68:	2002807c 	.word	0x2002807c
 8011e6c:	2002819b 	.word	0x2002819b

08011e70 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8011e74:	4b0d      	ldr	r3, [pc, #52]	; (8011eac <IMU_softReset+0x3c>)
 8011e76:	2201      	movs	r2, #1
 8011e78:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	2101      	movs	r1, #1
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f000 f98e 	bl	80121a0 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8011e84:	20c8      	movs	r0, #200	; 0xc8
 8011e86:	f004 f9c1 	bl	801620c <HAL_Delay>
	while (IMU_receivePacket() == true)
 8011e8a:	bf00      	nop
 8011e8c:	f000 f8e0 	bl	8012050 <IMU_receivePacket>
 8011e90:	4603      	mov	r3, r0
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d1fa      	bne.n	8011e8c <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8011e96:	20c8      	movs	r0, #200	; 0xc8
 8011e98:	f004 f9b8 	bl	801620c <HAL_Delay>
	while (IMU_receivePacket() == true)
 8011e9c:	bf00      	nop
 8011e9e:	f000 f8d7 	bl	8012050 <IMU_receivePacket>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d1fa      	bne.n	8011e9e <IMU_softReset+0x2e>
		;
}
 8011ea8:	bf00      	nop
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	200280e8 	.word	0x200280e8

08011eb0 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8011eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	460a      	mov	r2, r1
 8011eba:	80fb      	strh	r3, [r7, #6]
 8011ebc:	4613      	mov	r3, r2
 8011ebe:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8011ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ec4:	ee07 3a90 	vmov	s15, r3
 8011ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ecc:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8011ed0:	797b      	ldrb	r3, [r7, #5]
 8011ed2:	425b      	negs	r3, r3
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7fe faaf 	bl	8010438 <__aeabi_i2d>
 8011eda:	4603      	mov	r3, r0
 8011edc:	460c      	mov	r4, r1
 8011ede:	ec44 3b11 	vmov	d1, r3, r4
 8011ee2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8011f28 <IMU_qToFloat+0x78>
 8011ee6:	f014 feb1 	bl	8026c4c <pow>
 8011eea:	ec56 5b10 	vmov	r5, r6, d0
 8011eee:	68f8      	ldr	r0, [r7, #12]
 8011ef0:	f7fe fab4 	bl	801045c <__aeabi_f2d>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	461a      	mov	r2, r3
 8011efa:	4623      	mov	r3, r4
 8011efc:	4628      	mov	r0, r5
 8011efe:	4631      	mov	r1, r6
 8011f00:	f7fe fb04 	bl	801050c <__aeabi_dmul>
 8011f04:	4603      	mov	r3, r0
 8011f06:	460c      	mov	r4, r1
 8011f08:	4618      	mov	r0, r3
 8011f0a:	4621      	mov	r1, r4
 8011f0c:	f7fe fdae 	bl	8010a6c <__aeabi_d2f>
 8011f10:	4603      	mov	r3, r0
 8011f12:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	ee07 3a90 	vmov	s15, r3
}
 8011f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8011f1e:	3714      	adds	r7, #20
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f24:	f3af 8000 	nop.w
 8011f28:	00000000 	.word	0x00000000
 8011f2c:	40000000 	.word	0x40000000

08011f30 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	4603      	mov	r3, r0
 8011f38:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8011f3a:	88fb      	ldrh	r3, [r7, #6]
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	2005      	movs	r0, #5
 8011f40:	f000 f81a 	bl	8011f78 <IMU_setFeatureCommand_2>
}
 8011f44:	bf00      	nop
 8011f46:	3708      	adds	r7, #8
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}

08011f4c <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b084      	sub	sp, #16
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	4603      	mov	r3, r0
 8011f54:	60b9      	str	r1, [r7, #8]
 8011f56:	607a      	str	r2, [r7, #4]
 8011f58:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8011f5a:	4a06      	ldr	r2, [pc, #24]	; (8011f74 <IMU_enableActivityClassifier+0x28>)
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8011f60:	89fb      	ldrh	r3, [r7, #14]
 8011f62:	68ba      	ldr	r2, [r7, #8]
 8011f64:	4619      	mov	r1, r3
 8011f66:	201e      	movs	r0, #30
 8011f68:	f000 f818 	bl	8011f9c <IMU_setFeatureCommand_3>
}
 8011f6c:	bf00      	nop
 8011f6e:	3710      	adds	r7, #16
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	200280bc 	.word	0x200280bc

08011f78 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	4603      	mov	r3, r0
 8011f80:	460a      	mov	r2, r1
 8011f82:	71fb      	strb	r3, [r7, #7]
 8011f84:	4613      	mov	r3, r2
 8011f86:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8011f88:	88b9      	ldrh	r1, [r7, #4]
 8011f8a:	79fb      	ldrb	r3, [r7, #7]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f000 f804 	bl	8011f9c <IMU_setFeatureCommand_3>
}
 8011f94:	bf00      	nop
 8011f96:	3708      	adds	r7, #8
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}

08011f9c <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b084      	sub	sp, #16
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	603a      	str	r2, [r7, #0]
 8011fa6:	71fb      	strb	r3, [r7, #7]
 8011fa8:	460b      	mov	r3, r1
 8011faa:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 8011fac:	88bb      	ldrh	r3, [r7, #4]
 8011fae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011fb2:	fb02 f303 	mul.w	r3, r2, r3
 8011fb6:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8011fb8:	4b24      	ldr	r3, [pc, #144]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8011fba:	22fd      	movs	r2, #253	; 0xfd
 8011fbc:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8011fbe:	4a23      	ldr	r2, [pc, #140]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8011fc0:	79fb      	ldrb	r3, [r7, #7]
 8011fc2:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 8011fc4:	4b21      	ldr	r3, [pc, #132]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8011fca:	4b20      	ldr	r3, [pc, #128]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8011fcc:	2200      	movs	r2, #0
 8011fce:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8011fd0:	4b1e      	ldr	r3, [pc, #120]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	b2da      	uxtb	r2, r3
 8011fda:	4b1c      	ldr	r3, [pc, #112]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8011fdc:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	121b      	asrs	r3, r3, #8
 8011fe2:	b2da      	uxtb	r2, r3
 8011fe4:	4b19      	ldr	r3, [pc, #100]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8011fe6:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	141b      	asrs	r3, r3, #16
 8011fec:	b2da      	uxtb	r2, r3
 8011fee:	4b17      	ldr	r3, [pc, #92]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8011ff0:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	0e1b      	lsrs	r3, r3, #24
 8011ff6:	b2da      	uxtb	r2, r3
 8011ff8:	4b14      	ldr	r3, [pc, #80]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8011ffa:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 8011ffc:	4b13      	ldr	r3, [pc, #76]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8011ffe:	2200      	movs	r2, #0
 8012000:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 8012002:	4b12      	ldr	r3, [pc, #72]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8012004:	2200      	movs	r2, #0
 8012006:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 8012008:	4b10      	ldr	r3, [pc, #64]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 801200a:	2200      	movs	r2, #0
 801200c:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 801200e:	4b0f      	ldr	r3, [pc, #60]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8012010:	2200      	movs	r2, #0
 8012012:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	b2da      	uxtb	r2, r3
 8012018:	4b0c      	ldr	r3, [pc, #48]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 801201a:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	0a1b      	lsrs	r3, r3, #8
 8012020:	b2da      	uxtb	r2, r3
 8012022:	4b0a      	ldr	r3, [pc, #40]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8012024:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	0c1b      	lsrs	r3, r3, #16
 801202a:	b2da      	uxtb	r2, r3
 801202c:	4b07      	ldr	r3, [pc, #28]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 801202e:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	0e1b      	lsrs	r3, r3, #24
 8012034:	b2da      	uxtb	r2, r3
 8012036:	4b05      	ldr	r3, [pc, #20]	; (801204c <IMU_setFeatureCommand_3+0xb0>)
 8012038:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 801203a:	2302      	movs	r3, #2
 801203c:	2111      	movs	r1, #17
 801203e:	4618      	mov	r0, r3
 8012040:	f000 f8ae 	bl	80121a0 <IMU_sendPacket>
}
 8012044:	bf00      	nop
 8012046:	3710      	adds	r7, #16
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	200280e8 	.word	0x200280e8

08012050 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b084      	sub	sp, #16
 8012054:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8012056:	4b22      	ldr	r3, [pc, #136]	; (80120e0 <IMU_receivePacket+0x90>)
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	4b22      	ldr	r3, [pc, #136]	; (80120e4 <IMU_receivePacket+0x94>)
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	b29b      	uxth	r3, r3
 8012060:	4619      	mov	r1, r3
 8012062:	4610      	mov	r0, r2
 8012064:	f006 fcc8 	bl	80189f8 <HAL_GPIO_ReadPin>
 8012068:	4603      	mov	r3, r0
 801206a:	2b01      	cmp	r3, #1
 801206c:	d101      	bne.n	8012072 <IMU_receivePacket+0x22>
		return (false);
 801206e:	2300      	movs	r3, #0
 8012070:	e031      	b.n	80120d6 <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8012072:	4b1d      	ldr	r3, [pc, #116]	; (80120e8 <IMU_receivePacket+0x98>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	f04f 31ff 	mov.w	r1, #4294967295
 801207a:	4618      	mov	r0, r3
 801207c:	f00c fec2 	bl	801ee04 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8012080:	4b1a      	ldr	r3, [pc, #104]	; (80120ec <IMU_receivePacket+0x9c>)
 8012082:	781b      	ldrb	r3, [r3, #0]
 8012084:	b299      	uxth	r1, r3
 8012086:	2364      	movs	r3, #100	; 0x64
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	2304      	movs	r3, #4
 801208c:	4a18      	ldr	r2, [pc, #96]	; (80120f0 <IMU_receivePacket+0xa0>)
 801208e:	4819      	ldr	r0, [pc, #100]	; (80120f4 <IMU_receivePacket+0xa4>)
 8012090:	f006 fe98 	bl	8018dc4 <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8012094:	4b14      	ldr	r3, [pc, #80]	; (80120e8 <IMU_receivePacket+0x98>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	4618      	mov	r0, r3
 801209a:	f00c ff19 	bl	801eed0 <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 801209e:	4b14      	ldr	r3, [pc, #80]	; (80120f0 <IMU_receivePacket+0xa0>)
 80120a0:	785b      	ldrb	r3, [r3, #1]
 80120a2:	021b      	lsls	r3, r3, #8
 80120a4:	b21a      	sxth	r2, r3
 80120a6:	4b12      	ldr	r3, [pc, #72]	; (80120f0 <IMU_receivePacket+0xa0>)
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	b21b      	sxth	r3, r3
 80120ac:	4313      	orrs	r3, r2
 80120ae:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 80120b0:	88fb      	ldrh	r3, [r7, #6]
 80120b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80120b6:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 80120b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d101      	bne.n	80120c4 <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 80120c0:	2300      	movs	r3, #0
 80120c2:	e008      	b.n	80120d6 <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 80120c4:	88fb      	ldrh	r3, [r7, #6]
 80120c6:	3b04      	subs	r3, #4
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 80120cc:	88fb      	ldrh	r3, [r7, #6]
 80120ce:	4618      	mov	r0, r3
 80120d0:	f000 f812 	bl	80120f8 <IMU_getData>


	return (true); //We're done!
 80120d4:	2301      	movs	r3, #1
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3708      	adds	r7, #8
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	bf00      	nop
 80120e0:	20028170 	.word	0x20028170
 80120e4:	200280aa 	.word	0x200280aa
 80120e8:	20027bc4 	.word	0x20027bc4
 80120ec:	20000006 	.word	0x20000006
 80120f0:	20028058 	.word	0x20028058
 80120f4:	200281b8 	.word	0x200281b8

080120f8 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b086      	sub	sp, #24
 80120fc:	af02      	add	r7, sp, #8
 80120fe:	4603      	mov	r3, r0
 8012100:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 8012102:	2300      	movs	r3, #0
 8012104:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 8012106:	e036      	b.n	8012176 <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 8012108:	88fb      	ldrh	r3, [r7, #6]
 801210a:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 801210c:	89bb      	ldrh	r3, [r7, #12]
 801210e:	2b1c      	cmp	r3, #28
 8012110:	d901      	bls.n	8012116 <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 8012112:	231c      	movs	r3, #28
 8012114:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8012116:	4b1c      	ldr	r3, [pc, #112]	; (8012188 <IMU_getData+0x90>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	f04f 31ff 	mov.w	r1, #4294967295
 801211e:	4618      	mov	r0, r3
 8012120:	f00c fe70 	bl	801ee04 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 8012124:	4b19      	ldr	r3, [pc, #100]	; (801218c <IMU_getData+0x94>)
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	b299      	uxth	r1, r3
 801212a:	89bb      	ldrh	r3, [r7, #12]
 801212c:	b2db      	uxtb	r3, r3
 801212e:	3304      	adds	r3, #4
 8012130:	b2db      	uxtb	r3, r3
 8012132:	b29a      	uxth	r2, r3
 8012134:	2364      	movs	r3, #100	; 0x64
 8012136:	9300      	str	r3, [sp, #0]
 8012138:	4613      	mov	r3, r2
 801213a:	4a15      	ldr	r2, [pc, #84]	; (8012190 <IMU_getData+0x98>)
 801213c:	4815      	ldr	r0, [pc, #84]	; (8012194 <IMU_getData+0x9c>)
 801213e:	f006 fe41 	bl	8018dc4 <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 8012142:	4b11      	ldr	r3, [pc, #68]	; (8012188 <IMU_getData+0x90>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	4618      	mov	r0, r3
 8012148:	f00c fec2 	bl	801eed0 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 801214c:	89fa      	ldrh	r2, [r7, #14]
 801214e:	89bb      	ldrh	r3, [r7, #12]
 8012150:	4413      	add	r3, r2
 8012152:	2b7f      	cmp	r3, #127	; 0x7f
 8012154:	dc07      	bgt.n	8012166 <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 8012156:	89fb      	ldrh	r3, [r7, #14]
 8012158:	4a0f      	ldr	r2, [pc, #60]	; (8012198 <IMU_getData+0xa0>)
 801215a:	4413      	add	r3, r2
 801215c:	89ba      	ldrh	r2, [r7, #12]
 801215e:	490f      	ldr	r1, [pc, #60]	; (801219c <IMU_getData+0xa4>)
 8012160:	4618      	mov	r0, r3
 8012162:	f014 fd5f 	bl	8026c24 <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 8012166:	89fa      	ldrh	r2, [r7, #14]
 8012168:	89bb      	ldrh	r3, [r7, #12]
 801216a:	4413      	add	r3, r2
 801216c:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 801216e:	88fa      	ldrh	r2, [r7, #6]
 8012170:	89bb      	ldrh	r3, [r7, #12]
 8012172:	1ad3      	subs	r3, r2, r3
 8012174:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 8012176:	88fb      	ldrh	r3, [r7, #6]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d1c5      	bne.n	8012108 <IMU_getData+0x10>
	}
	return (true); //Done!
 801217c:	2301      	movs	r3, #1
}
 801217e:	4618      	mov	r0, r3
 8012180:	3710      	adds	r7, #16
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	20027bc4 	.word	0x20027bc4
 801218c:	20000006 	.word	0x20000006
 8012190:	20000ad4 	.word	0x20000ad4
 8012194:	200281b8 	.word	0x200281b8
 8012198:	200280e8 	.word	0x200280e8
 801219c:	20000ad8 	.word	0x20000ad8

080121a0 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b086      	sub	sp, #24
 80121a4:	af02      	add	r7, sp, #8
 80121a6:	4603      	mov	r3, r0
 80121a8:	460a      	mov	r2, r1
 80121aa:	71fb      	strb	r3, [r7, #7]
 80121ac:	4613      	mov	r3, r2
 80121ae:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80121b0:	79bb      	ldrb	r3, [r7, #6]
 80121b2:	3304      	adds	r3, #4
 80121b4:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 80121b6:	4a1b      	ldr	r2, [pc, #108]	; (8012224 <IMU_sendPacket+0x84>)
 80121b8:	7bfb      	ldrb	r3, [r7, #15]
 80121ba:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 80121bc:	7bfb      	ldrb	r3, [r7, #15]
 80121be:	121b      	asrs	r3, r3, #8
 80121c0:	b2da      	uxtb	r2, r3
 80121c2:	4b18      	ldr	r3, [pc, #96]	; (8012224 <IMU_sendPacket+0x84>)
 80121c4:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 80121c6:	4a17      	ldr	r2, [pc, #92]	; (8012224 <IMU_sendPacket+0x84>)
 80121c8:	79fb      	ldrb	r3, [r7, #7]
 80121ca:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 80121cc:	79fb      	ldrb	r3, [r7, #7]
 80121ce:	4a16      	ldr	r2, [pc, #88]	; (8012228 <IMU_sendPacket+0x88>)
 80121d0:	5cd2      	ldrb	r2, [r2, r3]
 80121d2:	1c51      	adds	r1, r2, #1
 80121d4:	b2c8      	uxtb	r0, r1
 80121d6:	4914      	ldr	r1, [pc, #80]	; (8012228 <IMU_sendPacket+0x88>)
 80121d8:	54c8      	strb	r0, [r1, r3]
 80121da:	4b12      	ldr	r3, [pc, #72]	; (8012224 <IMU_sendPacket+0x84>)
 80121dc:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 80121de:	79bb      	ldrb	r3, [r7, #6]
 80121e0:	461a      	mov	r2, r3
 80121e2:	4912      	ldr	r1, [pc, #72]	; (801222c <IMU_sendPacket+0x8c>)
 80121e4:	4812      	ldr	r0, [pc, #72]	; (8012230 <IMU_sendPacket+0x90>)
 80121e6:	f014 fd1d 	bl	8026c24 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80121ea:	4b12      	ldr	r3, [pc, #72]	; (8012234 <IMU_sendPacket+0x94>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	f04f 31ff 	mov.w	r1, #4294967295
 80121f2:	4618      	mov	r0, r3
 80121f4:	f00c fe06 	bl	801ee04 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 80121f8:	4b0f      	ldr	r3, [pc, #60]	; (8012238 <IMU_sendPacket+0x98>)
 80121fa:	781b      	ldrb	r3, [r3, #0]
 80121fc:	b299      	uxth	r1, r3
 80121fe:	7bfb      	ldrb	r3, [r7, #15]
 8012200:	b29a      	uxth	r2, r3
 8012202:	2364      	movs	r3, #100	; 0x64
 8012204:	9300      	str	r3, [sp, #0]
 8012206:	4613      	mov	r3, r2
 8012208:	4a06      	ldr	r2, [pc, #24]	; (8012224 <IMU_sendPacket+0x84>)
 801220a:	480c      	ldr	r0, [pc, #48]	; (801223c <IMU_sendPacket+0x9c>)
 801220c:	f006 fce6 	bl	8018bdc <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8012210:	4b08      	ldr	r3, [pc, #32]	; (8012234 <IMU_sendPacket+0x94>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	4618      	mov	r0, r3
 8012216:	f00c fe5b 	bl	801eed0 <osSemaphoreRelease>

	return (true);
 801221a:	2301      	movs	r3, #1
}
 801221c:	4618      	mov	r0, r3
 801221e:	3710      	adds	r7, #16
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	20028174 	.word	0x20028174
 8012228:	20000acc 	.word	0x20000acc
 801222c:	200280e8 	.word	0x200280e8
 8012230:	20028178 	.word	0x20028178
 8012234:	20027bc4 	.word	0x20027bc4
 8012238:	20000006 	.word	0x20000006
 801223c:	200281b8 	.word	0x200281b8

08012240 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8012248:	4b1e      	ldr	r3, [pc, #120]	; (80122c4 <vPortSuppressTicksAndSleep+0x84>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	4a1d      	ldr	r2, [pc, #116]	; (80122c4 <vPortSuppressTicksAndSleep+0x84>)
 801224e:	f023 0301 	bic.w	r3, r3, #1
 8012252:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8012254:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8012256:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801225a:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 801225e:	f00f fbbf 	bl	80219e0 <eTaskConfirmSleepModeStatus>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d107      	bne.n	8012278 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8012268:	4b16      	ldr	r3, [pc, #88]	; (80122c4 <vPortSuppressTicksAndSleep+0x84>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	4a15      	ldr	r2, [pc, #84]	; (80122c4 <vPortSuppressTicksAndSleep+0x84>)
 801226e:	f043 0301 	orr.w	r3, r3, #1
 8012272:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8012274:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 8012276:	e021      	b.n	80122bc <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801227e:	d002      	beq.n	8012286 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f000 f869 	bl	8012358 <LpTimerStart>
    LpEnter( );
 8012286:	f000 f8cb 	bl	8012420 <LpEnter>
    if (xExpectedIdleTime != (~0))
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012290:	d005      	beq.n	801229e <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8012292:	f000 f8cd 	bl	8012430 <LpGetElapsedTime>
 8012296:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8012298:	68f8      	ldr	r0, [r7, #12]
 801229a:	f00f f8bb 	bl	8021414 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801229e:	4b0a      	ldr	r3, [pc, #40]	; (80122c8 <vPortSuppressTicksAndSleep+0x88>)
 80122a0:	2200      	movs	r2, #0
 80122a2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80122a4:	4b07      	ldr	r3, [pc, #28]	; (80122c4 <vPortSuppressTicksAndSleep+0x84>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4a06      	ldr	r2, [pc, #24]	; (80122c4 <vPortSuppressTicksAndSleep+0x84>)
 80122aa:	f043 0301 	orr.w	r3, r3, #1
 80122ae:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80122b0:	4b06      	ldr	r3, [pc, #24]	; (80122cc <vPortSuppressTicksAndSleep+0x8c>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4a06      	ldr	r2, [pc, #24]	; (80122d0 <vPortSuppressTicksAndSleep+0x90>)
 80122b6:	3b01      	subs	r3, #1
 80122b8:	6013      	str	r3, [r2, #0]
 80122ba:	b662      	cpsie	i
}
 80122bc:	bf00      	nop
 80122be:	3710      	adds	r7, #16
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}
 80122c4:	e000e010 	.word	0xe000e010
 80122c8:	e000e018 	.word	0xe000e018
 80122cc:	20000af4 	.word	0x20000af4
 80122d0:	e000e014 	.word	0xe000e014

080122d4 <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	af00      	add	r7, sp, #0
  LpTimerInit( );
 80122d8:	f000 f828 	bl	801232c <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80122dc:	4b0d      	ldr	r3, [pc, #52]	; (8012314 <vPortSetupTimerInterrupt+0x40>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	4a0d      	ldr	r2, [pc, #52]	; (8012318 <vPortSetupTimerInterrupt+0x44>)
 80122e2:	fba2 2303 	umull	r2, r3, r2, r3
 80122e6:	099b      	lsrs	r3, r3, #6
 80122e8:	4a0c      	ldr	r2, [pc, #48]	; (801231c <vPortSetupTimerInterrupt+0x48>)
 80122ea:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 80122ec:	4b0c      	ldr	r3, [pc, #48]	; (8012320 <vPortSetupTimerInterrupt+0x4c>)
 80122ee:	2200      	movs	r2, #0
 80122f0:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80122f2:	4b0c      	ldr	r3, [pc, #48]	; (8012324 <vPortSetupTimerInterrupt+0x50>)
 80122f4:	2200      	movs	r2, #0
 80122f6:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80122f8:	4b06      	ldr	r3, [pc, #24]	; (8012314 <vPortSetupTimerInterrupt+0x40>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	4a06      	ldr	r2, [pc, #24]	; (8012318 <vPortSetupTimerInterrupt+0x44>)
 80122fe:	fba2 2303 	umull	r2, r3, r2, r3
 8012302:	099b      	lsrs	r3, r3, #6
 8012304:	4a08      	ldr	r2, [pc, #32]	; (8012328 <vPortSetupTimerInterrupt+0x54>)
 8012306:	3b01      	subs	r3, #1
 8012308:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801230a:	4b05      	ldr	r3, [pc, #20]	; (8012320 <vPortSetupTimerInterrupt+0x4c>)
 801230c:	2207      	movs	r2, #7
 801230e:	601a      	str	r2, [r3, #0]
}
 8012310:	bf00      	nop
 8012312:	bd80      	pop	{r7, pc}
 8012314:	20000078 	.word	0x20000078
 8012318:	10624dd3 	.word	0x10624dd3
 801231c:	20000af4 	.word	0x20000af4
 8012320:	e000e010 	.word	0xe000e010
 8012324:	e000e018 	.word	0xe000e018
 8012328:	e000e014 	.word	0xe000e014

0801232c <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 801232c:	b580      	push	{r7, lr}
 801232e:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8012330:	4b03      	ldr	r3, [pc, #12]	; (8012340 <LpTimerInit+0x14>)
 8012332:	2200      	movs	r2, #0
 8012334:	4903      	ldr	r1, [pc, #12]	; (8012344 <LpTimerInit+0x18>)
 8012336:	2000      	movs	r0, #0
 8012338:	f001 f83a 	bl	80133b0 <HW_TS_Create>

  return;
 801233c:	bf00      	nop
}
 801233e:	bd80      	pop	{r7, pc}
 8012340:	08012349 	.word	0x08012349
 8012344:	20000afc 	.word	0x20000afc

08012348 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 8012348:	b480      	push	{r7}
 801234a:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 801234c:	bf00      	nop
}
 801234e:	46bd      	mov	sp, r7
 8012350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012354:	4770      	bx	lr
	...

08012358 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8012366:	4293      	cmp	r3, r2
 8012368:	d80c      	bhi.n	8012384 <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	4a28      	ldr	r2, [pc, #160]	; (8012410 <LpTimerStart+0xb8>)
 801236e:	fb02 f303 	mul.w	r3, r2, r3
 8012372:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	099b      	lsrs	r3, r3, #6
 8012378:	4a26      	ldr	r2, [pc, #152]	; (8012414 <LpTimerStart+0xbc>)
 801237a:	fba2 2303 	umull	r2, r3, r2, r3
 801237e:	095b      	lsrs	r3, r3, #5
 8012380:	607b      	str	r3, [r7, #4]
 8012382:	e034      	b.n	80123ee <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	4a24      	ldr	r2, [pc, #144]	; (8012418 <LpTimerStart+0xc0>)
 8012388:	4293      	cmp	r3, r2
 801238a:	d81b      	bhi.n	80123c4 <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012392:	fb02 f303 	mul.w	r3, r2, r3
 8012396:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	099b      	lsrs	r3, r3, #6
 801239c:	4a1d      	ldr	r2, [pc, #116]	; (8012414 <LpTimerStart+0xbc>)
 801239e:	fba2 2303 	umull	r2, r3, r2, r3
 80123a2:	095b      	lsrs	r3, r3, #5
 80123a4:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4a1b      	ldr	r2, [pc, #108]	; (8012418 <LpTimerStart+0xc0>)
 80123aa:	4293      	cmp	r3, r2
 80123ac:	d806      	bhi.n	80123bc <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80123b4:	fb02 f303 	mul.w	r3, r2, r3
 80123b8:	607b      	str	r3, [r7, #4]
 80123ba:	e018      	b.n	80123ee <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 80123bc:	f04f 33ff 	mov.w	r3, #4294967295
 80123c0:	607b      	str	r3, [r7, #4]
 80123c2:	e014      	b.n	80123ee <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	099b      	lsrs	r3, r3, #6
 80123c8:	4a12      	ldr	r2, [pc, #72]	; (8012414 <LpTimerStart+0xbc>)
 80123ca:	fba2 2303 	umull	r2, r3, r2, r3
 80123ce:	095b      	lsrs	r3, r3, #5
 80123d0:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80123d8:	4293      	cmp	r3, r2
 80123da:	d805      	bhi.n	80123e8 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	4a0c      	ldr	r2, [pc, #48]	; (8012410 <LpTimerStart+0xb8>)
 80123e0:	fb02 f303 	mul.w	r3, r2, r3
 80123e4:	607b      	str	r3, [r7, #4]
 80123e6:	e002      	b.n	80123ee <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 80123e8:	f04f 33ff 	mov.w	r3, #4294967295
 80123ec:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 80123ee:	4b0b      	ldr	r3, [pc, #44]	; (801241c <LpTimerStart+0xc4>)
 80123f0:	791b      	ldrb	r3, [r3, #4]
 80123f2:	6879      	ldr	r1, [r7, #4]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f001 f8db 	bl	80135b0 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 80123fa:	f001 f95f 	bl	80136bc <HW_TS_RTC_ReadLeftTicksToCount>
 80123fe:	4603      	mov	r3, r0
 8012400:	461a      	mov	r2, r3
 8012402:	4b06      	ldr	r3, [pc, #24]	; (801241c <LpTimerStart+0xc4>)
 8012404:	601a      	str	r2, [r3, #0]

  return;
 8012406:	bf00      	nop
}
 8012408:	3708      	adds	r7, #8
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	000f4240 	.word	0x000f4240
 8012414:	0113094d 	.word	0x0113094d
 8012418:	00418937 	.word	0x00418937
 801241c:	20000af8 	.word	0x20000af8

08012420 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 8012420:	b480      	push	{r7}
 8012422:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 8012424:	bf00      	nop
}
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr
	...

08012430 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 8012430:	b590      	push	{r4, r7, lr}
 8012432:	b083      	sub	sp, #12
 8012434:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 8012436:	4b16      	ldr	r3, [pc, #88]	; (8012490 <LpGetElapsedTime+0x60>)
 8012438:	681c      	ldr	r4, [r3, #0]
 801243a:	f001 f93f 	bl	80136bc <HW_TS_RTC_ReadLeftTicksToCount>
 801243e:	4603      	mov	r3, r0
 8012440:	1ae3      	subs	r3, r4, r3
 8012442:	f04f 0400 	mov.w	r4, #0
 8012446:	4a13      	ldr	r2, [pc, #76]	; (8012494 <LpGetElapsedTime+0x64>)
 8012448:	fb02 f104 	mul.w	r1, r2, r4
 801244c:	2200      	movs	r2, #0
 801244e:	fb02 f203 	mul.w	r2, r2, r3
 8012452:	440a      	add	r2, r1
 8012454:	490f      	ldr	r1, [pc, #60]	; (8012494 <LpGetElapsedTime+0x64>)
 8012456:	fba3 3401 	umull	r3, r4, r3, r1
 801245a:	4422      	add	r2, r4
 801245c:	4614      	mov	r4, r2
 801245e:	e9c7 3400 	strd	r3, r4, [r7]
 8012462:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 8012466:	e9d7 0100 	ldrd	r0, r1, [r7]
 801246a:	4a0b      	ldr	r2, [pc, #44]	; (8012498 <LpGetElapsedTime+0x68>)
 801246c:	f04f 0300 	mov.w	r3, #0
 8012470:	f7fe fb4c 	bl	8010b0c <__aeabi_uldivmod>
 8012474:	4603      	mov	r3, r0
 8012476:	460c      	mov	r4, r1
 8012478:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 801247c:	4b04      	ldr	r3, [pc, #16]	; (8012490 <LpGetElapsedTime+0x60>)
 801247e:	791b      	ldrb	r3, [r3, #4]
 8012480:	4618      	mov	r0, r3
 8012482:	f001 f80b 	bl	801349c <HW_TS_Stop>

  return (uint32_t)return_value;
 8012486:	683b      	ldr	r3, [r7, #0]
}
 8012488:	4618      	mov	r0, r3
 801248a:	370c      	adds	r7, #12
 801248c:	46bd      	mov	sp, r7
 801248e:	bd90      	pop	{r4, r7, pc}
 8012490:	20000af8 	.word	0x20000af8
 8012494:	00077240 	.word	0x00077240
 8012498:	000f4240 	.word	0x000f4240

0801249c <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 801249c:	b4b0      	push	{r4, r5, r7}
 801249e:	b083      	sub	sp, #12
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	4a12      	ldr	r2, [pc, #72]	; (80124f0 <_GeometryBuilder+0x54>)
 80124a8:	461c      	mov	r4, r3
 80124aa:	4615      	mov	r5, r2
 80124ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80124b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	4a0d      	ldr	r2, [pc, #52]	; (80124f4 <_GeometryBuilder+0x58>)
 80124c0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80124c4:	4615      	mov	r5, r2
 80124c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80124d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	4a07      	ldr	r2, [pc, #28]	; (80124f8 <_GeometryBuilder+0x5c>)
 80124da:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80124de:	4613      	mov	r3, r2
 80124e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80124e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80124e6:	bf00      	nop
 80124e8:	370c      	adds	r7, #12
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bcb0      	pop	{r4, r5, r7}
 80124ee:	4770      	bx	lr
 80124f0:	20000008 	.word	0x20000008
 80124f4:	20000038 	.word	0x20000038
 80124f8:	20000b00 	.word	0x20000b00

080124fc <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 80124fc:	b5b0      	push	{r4, r5, r7, lr}
 80124fe:	b096      	sub	sp, #88	; 0x58
 8012500:	af02      	add	r7, sp, #8
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	685b      	ldr	r3, [r3, #4]
 801250a:	2bc7      	cmp	r3, #199	; 0xc7
 801250c:	f340 8093 	ble.w	8012636 <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	3360      	adds	r3, #96	; 0x60
 8012514:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 8012516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	015b      	lsls	r3, r3, #5
 801251c:	3310      	adds	r3, #16
 801251e:	683a      	ldr	r2, [r7, #0]
 8012520:	4413      	add	r3, r2
 8012522:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 8012524:	2300      	movs	r3, #0
 8012526:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8012528:	2300      	movs	r3, #0
 801252a:	64bb      	str	r3, [r7, #72]	; 0x48
 801252c:	e011      	b.n	8012552 <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	689a      	ldr	r2, [r3, #8]
 8012532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012534:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012536:	3104      	adds	r1, #4
 8012538:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801253c:	1ad3      	subs	r3, r2, r3
 801253e:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 8012540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012542:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012544:	4293      	cmp	r3, r2
 8012546:	bf38      	it	cc
 8012548:	4613      	movcc	r3, r2
 801254a:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 801254c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801254e:	3301      	adds	r3, #1
 8012550:	64bb      	str	r3, [r7, #72]	; 0x48
 8012552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012554:	2b03      	cmp	r3, #3
 8012556:	ddea      	ble.n	801252e <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 8012558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801255a:	2b0b      	cmp	r3, #11
 801255c:	d86b      	bhi.n	8012636 <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012562:	edd3 7a00 	vldr	s15, [r3]
 8012566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012568:	ed93 7a01 	vldr	s14, [r3, #4]
 801256c:	f107 0214 	add.w	r2, r7, #20
 8012570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012574:	4619      	mov	r1, r3
 8012576:	eef0 0a47 	vmov.f32	s1, s14
 801257a:	eeb0 0a67 	vmov.f32	s0, s15
 801257e:	f000 f8e5 	bl	801274c <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801258a:	edd3 7a02 	vldr	s15, [r3, #8]
 801258e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012590:	ed93 7a03 	vldr	s14, [r3, #12]
 8012594:	f107 0208 	add.w	r2, r7, #8
 8012598:	f107 0320 	add.w	r3, r7, #32
 801259c:	4619      	mov	r1, r3
 801259e:	eef0 0a47 	vmov.f32	s1, s14
 80125a2:	eeb0 0a67 	vmov.f32	s0, s15
 80125a6:	f000 f8d1 	bl	801274c <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	3370      	adds	r3, #112	; 0x70
 80125ae:	687a      	ldr	r2, [r7, #4]
 80125b0:	327c      	adds	r2, #124	; 0x7c
 80125b2:	f107 0520 	add.w	r5, r7, #32
 80125b6:	f107 0408 	add.w	r4, r7, #8
 80125ba:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80125be:	f107 0014 	add.w	r0, r7, #20
 80125c2:	9201      	str	r2, [sp, #4]
 80125c4:	9300      	str	r3, [sp, #0]
 80125c6:	462b      	mov	r3, r5
 80125c8:	4622      	mov	r2, r4
 80125ca:	f000 f945 	bl	8012858 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 80125ce:	2300      	movs	r3, #0
 80125d0:	647b      	str	r3, [r7, #68]	; 0x44
 80125d2:	e019      	b.n	8012608 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125d8:	331c      	adds	r3, #28
 80125da:	009b      	lsls	r3, r3, #2
 80125dc:	4413      	add	r3, r2
 80125de:	ed93 7a00 	vldr	s14, [r3]
 80125e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125e6:	009b      	lsls	r3, r3, #2
 80125e8:	4413      	add	r3, r2
 80125ea:	3304      	adds	r3, #4
 80125ec:	edd3 7a00 	vldr	s15, [r3]
 80125f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125f8:	331c      	adds	r3, #28
 80125fa:	009b      	lsls	r3, r3, #2
 80125fc:	4413      	add	r3, r2
 80125fe:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 8012602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012604:	3301      	adds	r3, #1
 8012606:	647b      	str	r3, [r7, #68]	; 0x44
 8012608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801260a:	2b02      	cmp	r3, #2
 801260c:	dde2      	ble.n	80125d4 <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 801260e:	f003 fde5 	bl	80161dc <HAL_GetTick>
 8012612:	4602      	mov	r2, r0
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 801261a:	4b09      	ldr	r3, [pc, #36]	; (8012640 <consume_angles+0x144>)
 801261c:	6818      	ldr	r0, [r3, #0]
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8012624:	2300      	movs	r3, #0
 8012626:	2200      	movs	r2, #0
 8012628:	f00c fd30 	bl	801f08c <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 801262c:	4b05      	ldr	r3, [pc, #20]	; (8012644 <consume_angles+0x148>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4618      	mov	r0, r3
 8012632:	f00c fc4d 	bl	801eed0 <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 8012636:	bf00      	nop
 8012638:	3750      	adds	r7, #80	; 0x50
 801263a:	46bd      	mov	sp, r7
 801263c:	bdb0      	pop	{r4, r5, r7, pc}
 801263e:	bf00      	nop
 8012640:	20027ac8 	.word	0x20027ac8
 8012644:	20028000 	.word	0x20028000

08012648 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 8012648:	b480      	push	{r7}
 801264a:	b085      	sub	sp, #20
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	3304      	adds	r3, #4
 8012658:	ed93 7a00 	vldr	s14, [r3]
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	3308      	adds	r3, #8
 8012660:	edd3 7a00 	vldr	s15, [r3]
 8012664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	3308      	adds	r3, #8
 801266c:	edd3 6a00 	vldr	s13, [r3]
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	3304      	adds	r3, #4
 8012674:	edd3 7a00 	vldr	s15, [r3]
 8012678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801267c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	3308      	adds	r3, #8
 801268a:	ed93 7a00 	vldr	s14, [r3]
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	edd3 7a00 	vldr	s15, [r3]
 8012694:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	edd3 6a00 	vldr	s13, [r3]
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	3308      	adds	r3, #8
 80126a2:	edd3 7a00 	vldr	s15, [r3]
 80126a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	3304      	adds	r3, #4
 80126ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126b2:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	ed93 7a00 	vldr	s14, [r3]
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	3304      	adds	r3, #4
 80126c0:	edd3 7a00 	vldr	s15, [r3]
 80126c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	3304      	adds	r3, #4
 80126cc:	edd3 6a00 	vldr	s13, [r3]
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	edd3 7a00 	vldr	s15, [r3]
 80126d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	3308      	adds	r3, #8
 80126de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126e2:	edc3 7a00 	vstr	s15, [r3]
}
 80126e6:	bf00      	nop
 80126e8:	3714      	adds	r7, #20
 80126ea:	46bd      	mov	sp, r7
 80126ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f0:	4770      	bx	lr

080126f2 <vec_length>:

float vec_length(float *vec) {
 80126f2:	b580      	push	{r7, lr}
 80126f4:	b086      	sub	sp, #24
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 80126fa:	f107 030c 	add.w	r3, r7, #12
 80126fe:	461a      	mov	r2, r3
 8012700:	2103      	movs	r1, #3
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f013 ff9e 	bl	8026644 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	617b      	str	r3, [r7, #20]
 801270c:	f107 0308 	add.w	r3, r7, #8
 8012710:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8012712:	edd7 7a05 	vldr	s15, [r7, #20]
 8012716:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801271a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801271e:	db09      	blt.n	8012734 <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8012720:	ed97 0a05 	vldr	s0, [r7, #20]
 8012724:	f014 fc02 	bl	8026f2c <sqrtf>
 8012728:	eef0 7a40 	vmov.f32	s15, s0
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	edc3 7a00 	vstr	s15, [r3]
 8012732:	e003      	b.n	801273c <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	f04f 0200 	mov.w	r2, #0
 801273a:	601a      	str	r2, [r3, #0]

    return res;
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	ee07 3a90 	vmov	s15, r3
}
 8012742:	eeb0 0a67 	vmov.f32	s0, s15
 8012746:	3718      	adds	r7, #24
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}

0801274c <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 801274c:	b580      	push	{r7, lr}
 801274e:	b09a      	sub	sp, #104	; 0x68
 8012750:	af00      	add	r7, sp, #0
 8012752:	6178      	str	r0, [r7, #20]
 8012754:	ed87 0a04 	vstr	s0, [r7, #16]
 8012758:	edc7 0a03 	vstr	s1, [r7, #12]
 801275c:	60b9      	str	r1, [r7, #8]
 801275e:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 8012760:	ed97 0a04 	vldr	s0, [r7, #16]
 8012764:	f014 f89a 	bl	802689c <arm_cos_f32>
 8012768:	eef0 7a40 	vmov.f32	s15, s0
 801276c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8012770:	f04f 0300 	mov.w	r3, #0
 8012774:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012776:	ed97 0a04 	vldr	s0, [r7, #16]
 801277a:	f014 f849 	bl	8026810 <arm_sin_f32>
 801277e:	eef0 7a40 	vmov.f32	s15, s0
 8012782:	eef1 7a67 	vneg.f32	s15, s15
 8012786:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 801278a:	f04f 0300 	mov.w	r3, #0
 801278e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012790:	ed97 0a03 	vldr	s0, [r7, #12]
 8012794:	f014 f882 	bl	802689c <arm_cos_f32>
 8012798:	eef0 7a40 	vmov.f32	s15, s0
 801279c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 80127a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80127a4:	f014 f834 	bl	8026810 <arm_sin_f32>
 80127a8:	eef0 7a40 	vmov.f32	s15, s0
 80127ac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 80127b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80127b4:	2200      	movs	r2, #0
 80127b6:	601a      	str	r2, [r3, #0]
 80127b8:	605a      	str	r2, [r3, #4]
 80127ba:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 80127bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80127c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80127c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80127c8:	4618      	mov	r0, r3
 80127ca:	f7ff ff3d 	bl	8012648 <vec_cross_product>
    float len = vec_length(ray);
 80127ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7ff ff8d 	bl	80126f2 <vec_length>
 80127d8:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 80127dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127e0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80127e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80127e8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80127ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80127f0:	2203      	movs	r2, #3
 80127f2:	eeb0 0a66 	vmov.f32	s0, s13
 80127f6:	4618      	mov	r0, r3
 80127f8:	f014 f8f4 	bl	80269e4 <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 80127fc:	2303      	movs	r3, #3
 80127fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8012800:	2303      	movs	r3, #3
 8012802:	877b      	strh	r3, [r7, #58]	; 0x3a
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	330c      	adds	r3, #12
 8012808:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 801280a:	2303      	movs	r3, #3
 801280c:	863b      	strh	r3, [r7, #48]	; 0x30
 801280e:	2301      	movs	r3, #1
 8012810:	867b      	strh	r3, [r7, #50]	; 0x32
 8012812:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012816:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 8012818:	2303      	movs	r3, #3
 801281a:	853b      	strh	r3, [r7, #40]	; 0x28
 801281c:	2301      	movs	r3, #1
 801281e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 8012824:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012828:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801282c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012830:	4618      	mov	r0, r3
 8012832:	f013 ff4d 	bl	80266d0 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 8012836:	f107 031c 	add.w	r3, r7, #28
 801283a:	2200      	movs	r2, #0
 801283c:	601a      	str	r2, [r3, #0]
 801283e:	605a      	str	r2, [r3, #4]
 8012840:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 8012842:	6978      	ldr	r0, [r7, #20]
 8012844:	f107 011c 	add.w	r1, r7, #28
 8012848:	2303      	movs	r3, #3
 801284a:	687a      	ldr	r2, [r7, #4]
 801284c:	f014 f966 	bl	8026b1c <arm_add_f32>
}
 8012850:	bf00      	nop
 8012852:	3768      	adds	r7, #104	; 0x68
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 8012858:	b580      	push	{r7, lr}
 801285a:	b098      	sub	sp, #96	; 0x60
 801285c:	af00      	add	r7, sp, #0
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	60b9      	str	r1, [r7, #8]
 8012862:	607a      	str	r2, [r7, #4]
 8012864:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 8012866:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801286a:	2200      	movs	r2, #0
 801286c:	601a      	str	r2, [r3, #0]
 801286e:	605a      	str	r2, [r3, #4]
 8012870:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 8012872:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012876:	2303      	movs	r3, #3
 8012878:	6879      	ldr	r1, [r7, #4]
 801287a:	68f8      	ldr	r0, [r7, #12]
 801287c:	f014 f858 	bl	8026930 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8012880:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012884:	2203      	movs	r2, #3
 8012886:	68b9      	ldr	r1, [r7, #8]
 8012888:	68b8      	ldr	r0, [r7, #8]
 801288a:	f014 f8ef 	bl	8026a6c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 801288e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012892:	2203      	movs	r2, #3
 8012894:	6839      	ldr	r1, [r7, #0]
 8012896:	68b8      	ldr	r0, [r7, #8]
 8012898:	f014 f8e8 	bl	8026a6c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 801289c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80128a0:	2203      	movs	r2, #3
 80128a2:	6839      	ldr	r1, [r7, #0]
 80128a4:	6838      	ldr	r0, [r7, #0]
 80128a6:	f014 f8e1 	bl	8026a6c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 80128aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80128ae:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80128b2:	2203      	movs	r2, #3
 80128b4:	68b8      	ldr	r0, [r7, #8]
 80128b6:	f014 f8d9 	bl	8026a6c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 80128ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80128be:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80128c2:	2203      	movs	r2, #3
 80128c4:	6838      	ldr	r0, [r7, #0]
 80128c6:	f014 f8d1 	bl	8026a6c <arm_dot_prod_f32>

    float denom = a * c - b * b;
 80128ca:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80128ce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80128d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80128d6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80128da:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80128de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80128e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128e6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 80128ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80128ee:	eef0 7ae7 	vabs.f32	s15, s15
 80128f2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8012a10 <intersect_lines+0x1b8>
 80128f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80128fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fe:	d501      	bpl.n	8012904 <intersect_lines+0xac>
        return 0;
 8012900:	2300      	movs	r3, #0
 8012902:	e081      	b.n	8012a08 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 8012904:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8012908:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801290c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012910:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8012914:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801291c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8012920:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012928:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 801292c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012930:	2200      	movs	r2, #0
 8012932:	601a      	str	r2, [r3, #0]
 8012934:	605a      	str	r2, [r3, #4]
 8012936:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 8012938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801293c:	2203      	movs	r2, #3
 801293e:	4619      	mov	r1, r3
 8012940:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8012944:	68b8      	ldr	r0, [r7, #8]
 8012946:	f014 f84d 	bl	80269e4 <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 801294a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801294e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8012952:	2303      	movs	r3, #3
 8012954:	68f9      	ldr	r1, [r7, #12]
 8012956:	f014 f8e1 	bl	8026b1c <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 801295a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801295e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012966:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801296a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801296e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012972:	ee77 6a67 	vsub.f32	s13, s14, s15
 8012976:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801297a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801297e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8012982:	f107 031c 	add.w	r3, r7, #28
 8012986:	2200      	movs	r2, #0
 8012988:	601a      	str	r2, [r3, #0]
 801298a:	605a      	str	r2, [r3, #4]
 801298c:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 801298e:	f107 031c 	add.w	r3, r7, #28
 8012992:	2203      	movs	r2, #3
 8012994:	4619      	mov	r1, r3
 8012996:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 801299a:	6838      	ldr	r0, [r7, #0]
 801299c:	f014 f822 	bl	80269e4 <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 80129a0:	f107 021c 	add.w	r2, r7, #28
 80129a4:	f107 001c 	add.w	r0, r7, #28
 80129a8:	2303      	movs	r3, #3
 80129aa:	6879      	ldr	r1, [r7, #4]
 80129ac:	f014 f8b6 	bl	8026b1c <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 80129b0:	f107 0310 	add.w	r3, r7, #16
 80129b4:	2200      	movs	r2, #0
 80129b6:	601a      	str	r2, [r3, #0]
 80129b8:	605a      	str	r2, [r3, #4]
 80129ba:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 80129bc:	f107 0210 	add.w	r2, r7, #16
 80129c0:	f107 011c 	add.w	r1, r7, #28
 80129c4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80129c8:	2303      	movs	r3, #3
 80129ca:	f014 f8a7 	bl	8026b1c <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 80129ce:	f107 0310 	add.w	r3, r7, #16
 80129d2:	2203      	movs	r2, #3
 80129d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80129d6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80129da:	4618      	mov	r0, r3
 80129dc:	f014 f802 	bl	80269e4 <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 80129e0:	f107 0210 	add.w	r2, r7, #16
 80129e4:	f107 011c 	add.w	r1, r7, #28
 80129e8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80129ec:	2303      	movs	r3, #3
 80129ee:	f013 ff9f 	bl	8026930 <arm_sub_f32>
    *dist = vec_length(tmp);
 80129f2:	f107 0310 	add.w	r3, r7, #16
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7ff fe7b 	bl	80126f2 <vec_length>
 80129fc:	eef0 7a40 	vmov.f32	s15, s0
 8012a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a02:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8012a06:	2301      	movs	r3, #1
}
 8012a08:	4618      	mov	r0, r3
 8012a0a:	3760      	adds	r7, #96	; 0x60
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}
 8012a10:	3727c5ac 	.word	0x3727c5ac

08012a14 <LL_AHB2_GRP1_EnableClock>:
{
 8012a14:	b480      	push	{r7}
 8012a16:	b085      	sub	sp, #20
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8012a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4313      	orrs	r3, r2
 8012a2a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8012a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	4013      	ands	r3, r2
 8012a36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012a38:	68fb      	ldr	r3, [r7, #12]
}
 8012a3a:	bf00      	nop
 8012a3c:	3714      	adds	r7, #20
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr
	...

08012a48 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b086      	sub	sp, #24
 8012a4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a4e:	1d3b      	adds	r3, r7, #4
 8012a50:	2200      	movs	r2, #0
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	605a      	str	r2, [r3, #4]
 8012a56:	609a      	str	r2, [r3, #8]
 8012a58:	60da      	str	r2, [r3, #12]
 8012a5a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012a5c:	2004      	movs	r0, #4
 8012a5e:	f7ff ffd9 	bl	8012a14 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012a62:	2080      	movs	r0, #128	; 0x80
 8012a64:	f7ff ffd6 	bl	8012a14 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012a68:	2002      	movs	r0, #2
 8012a6a:	f7ff ffd3 	bl	8012a14 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a6e:	2001      	movs	r0, #1
 8012a70:	f7ff ffd0 	bl	8012a14 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012a74:	2010      	movs	r0, #16
 8012a76:	f7ff ffcd 	bl	8012a14 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8012a7a:	2308      	movs	r3, #8
 8012a7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012a7e:	2303      	movs	r3, #3
 8012a80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a82:	2300      	movs	r3, #0
 8012a84:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8012a86:	1d3b      	adds	r3, r7, #4
 8012a88:	4619      	mov	r1, r3
 8012a8a:	4829      	ldr	r0, [pc, #164]	; (8012b30 <MX_GPIO_Init+0xe8>)
 8012a8c:	f005 fe44 	bl	8018718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8012a90:	f240 33f3 	movw	r3, #1011	; 0x3f3
 8012a94:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012a96:	2303      	movs	r3, #3
 8012a98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012a9e:	1d3b      	adds	r3, r7, #4
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	4824      	ldr	r0, [pc, #144]	; (8012b34 <MX_GPIO_Init+0xec>)
 8012aa4:	f005 fe38 	bl	8018718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8012aa8:	f649 13dc 	movw	r3, #39388	; 0x99dc
 8012aac:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012aae:	2303      	movs	r3, #3
 8012ab0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ab6:	1d3b      	adds	r3, r7, #4
 8012ab8:	4619      	mov	r1, r3
 8012aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012abe:	f005 fe2b 	bl	8018718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8012ac2:	2320      	movs	r3, #32
 8012ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8012ac6:	4b1c      	ldr	r3, [pc, #112]	; (8012b38 <MX_GPIO_Init+0xf0>)
 8012ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012aca:	2301      	movs	r3, #1
 8012acc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8012ace:	1d3b      	adds	r3, r7, #4
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012ad6:	f005 fe1f 	bl	8018718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8012ada:	2304      	movs	r3, #4
 8012adc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012ade:	4b17      	ldr	r3, [pc, #92]	; (8012b3c <MX_GPIO_Init+0xf4>)
 8012ae0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8012ae6:	1d3b      	adds	r3, r7, #4
 8012ae8:	4619      	mov	r1, r3
 8012aea:	4812      	ldr	r0, [pc, #72]	; (8012b34 <MX_GPIO_Init+0xec>)
 8012aec:	f005 fe14 	bl	8018718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8012af0:	2310      	movs	r3, #16
 8012af2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012af4:	2303      	movs	r3, #3
 8012af6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012af8:	2300      	movs	r3, #0
 8012afa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012afc:	1d3b      	adds	r3, r7, #4
 8012afe:	4619      	mov	r1, r3
 8012b00:	480f      	ldr	r0, [pc, #60]	; (8012b40 <MX_GPIO_Init+0xf8>)
 8012b02:	f005 fe09 	bl	8018718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8012b06:	2200      	movs	r2, #0
 8012b08:	2105      	movs	r1, #5
 8012b0a:	2008      	movs	r0, #8
 8012b0c:	f005 f899 	bl	8017c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8012b10:	2008      	movs	r0, #8
 8012b12:	f005 f8b0 	bl	8017c76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8012b16:	2200      	movs	r2, #0
 8012b18:	2105      	movs	r1, #5
 8012b1a:	2017      	movs	r0, #23
 8012b1c:	f005 f891 	bl	8017c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8012b20:	2017      	movs	r0, #23
 8012b22:	f005 f8a8 	bl	8017c76 <HAL_NVIC_EnableIRQ>

}
 8012b26:	bf00      	nop
 8012b28:	3718      	adds	r7, #24
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}
 8012b2e:	bf00      	nop
 8012b30:	48001c00 	.word	0x48001c00
 8012b34:	48000400 	.word	0x48000400
 8012b38:	10210000 	.word	0x10210000
 8012b3c:	10110000 	.word	0x10110000
 8012b40:	48001000 	.word	0x48001000

08012b44 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8012b44:	b480      	push	{r7}
 8012b46:	b083      	sub	sp, #12
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8012b4c:	4b06      	ldr	r3, [pc, #24]	; (8012b68 <LL_EXTI_EnableIT_0_31+0x24>)
 8012b4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8012b52:	4905      	ldr	r1, [pc, #20]	; (8012b68 <LL_EXTI_EnableIT_0_31+0x24>)
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	4313      	orrs	r3, r2
 8012b58:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8012b5c:	bf00      	nop
 8012b5e:	370c      	adds	r7, #12
 8012b60:	46bd      	mov	sp, r7
 8012b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b66:	4770      	bx	lr
 8012b68:	58000800 	.word	0x58000800

08012b6c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8012b74:	4b05      	ldr	r3, [pc, #20]	; (8012b8c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	4904      	ldr	r1, [pc, #16]	; (8012b8c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	600b      	str	r3, [r1, #0]

}
 8012b80:	bf00      	nop
 8012b82:	370c      	adds	r7, #12
 8012b84:	46bd      	mov	sp, r7
 8012b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8a:	4770      	bx	lr
 8012b8c:	58000800 	.word	0x58000800

08012b90 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b083      	sub	sp, #12
 8012b94:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8012b96:	4b0d      	ldr	r3, [pc, #52]	; (8012bcc <ReadRtcSsrValue+0x3c>)
 8012b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8012b9e:	4b0b      	ldr	r3, [pc, #44]	; (8012bcc <ReadRtcSsrValue+0x3c>)
 8012ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8012ba6:	e005      	b.n	8012bb4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8012bac:	4b07      	ldr	r3, [pc, #28]	; (8012bcc <ReadRtcSsrValue+0x3c>)
 8012bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bb0:	b29b      	uxth	r3, r3
 8012bb2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8012bb4:	687a      	ldr	r2, [r7, #4]
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d1f5      	bne.n	8012ba8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8012bbc:	683b      	ldr	r3, [r7, #0]
}
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	370c      	adds	r7, #12
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc8:	4770      	bx	lr
 8012bca:	bf00      	nop
 8012bcc:	40002800 	.word	0x40002800

08012bd0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8012bd0:	b480      	push	{r7}
 8012bd2:	b085      	sub	sp, #20
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	460a      	mov	r2, r1
 8012bda:	71fb      	strb	r3, [r7, #7]
 8012bdc:	4613      	mov	r3, r2
 8012bde:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8012be0:	79ba      	ldrb	r2, [r7, #6]
 8012be2:	491d      	ldr	r1, [pc, #116]	; (8012c58 <LinkTimerAfter+0x88>)
 8012be4:	4613      	mov	r3, r2
 8012be6:	005b      	lsls	r3, r3, #1
 8012be8:	4413      	add	r3, r2
 8012bea:	00db      	lsls	r3, r3, #3
 8012bec:	440b      	add	r3, r1
 8012bee:	3315      	adds	r3, #21
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8012bf4:	7bfb      	ldrb	r3, [r7, #15]
 8012bf6:	2b06      	cmp	r3, #6
 8012bf8:	d009      	beq.n	8012c0e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8012bfa:	7bfa      	ldrb	r2, [r7, #15]
 8012bfc:	4916      	ldr	r1, [pc, #88]	; (8012c58 <LinkTimerAfter+0x88>)
 8012bfe:	4613      	mov	r3, r2
 8012c00:	005b      	lsls	r3, r3, #1
 8012c02:	4413      	add	r3, r2
 8012c04:	00db      	lsls	r3, r3, #3
 8012c06:	440b      	add	r3, r1
 8012c08:	3314      	adds	r3, #20
 8012c0a:	79fa      	ldrb	r2, [r7, #7]
 8012c0c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8012c0e:	79fa      	ldrb	r2, [r7, #7]
 8012c10:	4911      	ldr	r1, [pc, #68]	; (8012c58 <LinkTimerAfter+0x88>)
 8012c12:	4613      	mov	r3, r2
 8012c14:	005b      	lsls	r3, r3, #1
 8012c16:	4413      	add	r3, r2
 8012c18:	00db      	lsls	r3, r3, #3
 8012c1a:	440b      	add	r3, r1
 8012c1c:	3315      	adds	r3, #21
 8012c1e:	7bfa      	ldrb	r2, [r7, #15]
 8012c20:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8012c22:	79fa      	ldrb	r2, [r7, #7]
 8012c24:	490c      	ldr	r1, [pc, #48]	; (8012c58 <LinkTimerAfter+0x88>)
 8012c26:	4613      	mov	r3, r2
 8012c28:	005b      	lsls	r3, r3, #1
 8012c2a:	4413      	add	r3, r2
 8012c2c:	00db      	lsls	r3, r3, #3
 8012c2e:	440b      	add	r3, r1
 8012c30:	3314      	adds	r3, #20
 8012c32:	79ba      	ldrb	r2, [r7, #6]
 8012c34:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8012c36:	79ba      	ldrb	r2, [r7, #6]
 8012c38:	4907      	ldr	r1, [pc, #28]	; (8012c58 <LinkTimerAfter+0x88>)
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	005b      	lsls	r3, r3, #1
 8012c3e:	4413      	add	r3, r2
 8012c40:	00db      	lsls	r3, r3, #3
 8012c42:	440b      	add	r3, r1
 8012c44:	3315      	adds	r3, #21
 8012c46:	79fa      	ldrb	r2, [r7, #7]
 8012c48:	701a      	strb	r2, [r3, #0]

  return;
 8012c4a:	bf00      	nop
}
 8012c4c:	3714      	adds	r7, #20
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c54:	4770      	bx	lr
 8012c56:	bf00      	nop
 8012c58:	200001ac 	.word	0x200001ac

08012c5c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b085      	sub	sp, #20
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	4603      	mov	r3, r0
 8012c64:	460a      	mov	r2, r1
 8012c66:	71fb      	strb	r3, [r7, #7]
 8012c68:	4613      	mov	r3, r2
 8012c6a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8012c6c:	4b29      	ldr	r3, [pc, #164]	; (8012d14 <LinkTimerBefore+0xb8>)
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	79ba      	ldrb	r2, [r7, #6]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d032      	beq.n	8012cde <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8012c78:	79ba      	ldrb	r2, [r7, #6]
 8012c7a:	4927      	ldr	r1, [pc, #156]	; (8012d18 <LinkTimerBefore+0xbc>)
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	005b      	lsls	r3, r3, #1
 8012c80:	4413      	add	r3, r2
 8012c82:	00db      	lsls	r3, r3, #3
 8012c84:	440b      	add	r3, r1
 8012c86:	3314      	adds	r3, #20
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8012c8c:	7bfa      	ldrb	r2, [r7, #15]
 8012c8e:	4922      	ldr	r1, [pc, #136]	; (8012d18 <LinkTimerBefore+0xbc>)
 8012c90:	4613      	mov	r3, r2
 8012c92:	005b      	lsls	r3, r3, #1
 8012c94:	4413      	add	r3, r2
 8012c96:	00db      	lsls	r3, r3, #3
 8012c98:	440b      	add	r3, r1
 8012c9a:	3315      	adds	r3, #21
 8012c9c:	79fa      	ldrb	r2, [r7, #7]
 8012c9e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8012ca0:	79fa      	ldrb	r2, [r7, #7]
 8012ca2:	491d      	ldr	r1, [pc, #116]	; (8012d18 <LinkTimerBefore+0xbc>)
 8012ca4:	4613      	mov	r3, r2
 8012ca6:	005b      	lsls	r3, r3, #1
 8012ca8:	4413      	add	r3, r2
 8012caa:	00db      	lsls	r3, r3, #3
 8012cac:	440b      	add	r3, r1
 8012cae:	3315      	adds	r3, #21
 8012cb0:	79ba      	ldrb	r2, [r7, #6]
 8012cb2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8012cb4:	79fa      	ldrb	r2, [r7, #7]
 8012cb6:	4918      	ldr	r1, [pc, #96]	; (8012d18 <LinkTimerBefore+0xbc>)
 8012cb8:	4613      	mov	r3, r2
 8012cba:	005b      	lsls	r3, r3, #1
 8012cbc:	4413      	add	r3, r2
 8012cbe:	00db      	lsls	r3, r3, #3
 8012cc0:	440b      	add	r3, r1
 8012cc2:	3314      	adds	r3, #20
 8012cc4:	7bfa      	ldrb	r2, [r7, #15]
 8012cc6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8012cc8:	79ba      	ldrb	r2, [r7, #6]
 8012cca:	4913      	ldr	r1, [pc, #76]	; (8012d18 <LinkTimerBefore+0xbc>)
 8012ccc:	4613      	mov	r3, r2
 8012cce:	005b      	lsls	r3, r3, #1
 8012cd0:	4413      	add	r3, r2
 8012cd2:	00db      	lsls	r3, r3, #3
 8012cd4:	440b      	add	r3, r1
 8012cd6:	3314      	adds	r3, #20
 8012cd8:	79fa      	ldrb	r2, [r7, #7]
 8012cda:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8012cdc:	e014      	b.n	8012d08 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8012cde:	79fa      	ldrb	r2, [r7, #7]
 8012ce0:	490d      	ldr	r1, [pc, #52]	; (8012d18 <LinkTimerBefore+0xbc>)
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	005b      	lsls	r3, r3, #1
 8012ce6:	4413      	add	r3, r2
 8012ce8:	00db      	lsls	r3, r3, #3
 8012cea:	440b      	add	r3, r1
 8012cec:	3315      	adds	r3, #21
 8012cee:	79ba      	ldrb	r2, [r7, #6]
 8012cf0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8012cf2:	79ba      	ldrb	r2, [r7, #6]
 8012cf4:	4908      	ldr	r1, [pc, #32]	; (8012d18 <LinkTimerBefore+0xbc>)
 8012cf6:	4613      	mov	r3, r2
 8012cf8:	005b      	lsls	r3, r3, #1
 8012cfa:	4413      	add	r3, r2
 8012cfc:	00db      	lsls	r3, r3, #3
 8012cfe:	440b      	add	r3, r1
 8012d00:	3314      	adds	r3, #20
 8012d02:	79fa      	ldrb	r2, [r7, #7]
 8012d04:	701a      	strb	r2, [r3, #0]
  return;
 8012d06:	bf00      	nop
}
 8012d08:	3714      	adds	r7, #20
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d10:	4770      	bx	lr
 8012d12:	bf00      	nop
 8012d14:	2000023c 	.word	0x2000023c
 8012d18:	200001ac 	.word	0x200001ac

08012d1c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b084      	sub	sp, #16
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	4603      	mov	r3, r0
 8012d24:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8012d26:	4b4e      	ldr	r3, [pc, #312]	; (8012e60 <linkTimer+0x144>)
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	2b06      	cmp	r3, #6
 8012d2e:	d118      	bne.n	8012d62 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8012d30:	4b4b      	ldr	r3, [pc, #300]	; (8012e60 <linkTimer+0x144>)
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	b2da      	uxtb	r2, r3
 8012d36:	4b4b      	ldr	r3, [pc, #300]	; (8012e64 <linkTimer+0x148>)
 8012d38:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8012d3a:	4a49      	ldr	r2, [pc, #292]	; (8012e60 <linkTimer+0x144>)
 8012d3c:	79fb      	ldrb	r3, [r7, #7]
 8012d3e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8012d40:	79fa      	ldrb	r2, [r7, #7]
 8012d42:	4949      	ldr	r1, [pc, #292]	; (8012e68 <linkTimer+0x14c>)
 8012d44:	4613      	mov	r3, r2
 8012d46:	005b      	lsls	r3, r3, #1
 8012d48:	4413      	add	r3, r2
 8012d4a:	00db      	lsls	r3, r3, #3
 8012d4c:	440b      	add	r3, r1
 8012d4e:	3315      	adds	r3, #21
 8012d50:	2206      	movs	r2, #6
 8012d52:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8012d54:	4b45      	ldr	r3, [pc, #276]	; (8012e6c <linkTimer+0x150>)
 8012d56:	f04f 32ff 	mov.w	r2, #4294967295
 8012d5a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	81fb      	strh	r3, [r7, #14]
 8012d60:	e078      	b.n	8012e54 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8012d62:	f000 f909 	bl	8012f78 <ReturnTimeElapsed>
 8012d66:	4603      	mov	r3, r0
 8012d68:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8012d6a:	79fa      	ldrb	r2, [r7, #7]
 8012d6c:	493e      	ldr	r1, [pc, #248]	; (8012e68 <linkTimer+0x14c>)
 8012d6e:	4613      	mov	r3, r2
 8012d70:	005b      	lsls	r3, r3, #1
 8012d72:	4413      	add	r3, r2
 8012d74:	00db      	lsls	r3, r3, #3
 8012d76:	440b      	add	r3, r1
 8012d78:	3308      	adds	r3, #8
 8012d7a:	6819      	ldr	r1, [r3, #0]
 8012d7c:	89fb      	ldrh	r3, [r7, #14]
 8012d7e:	79fa      	ldrb	r2, [r7, #7]
 8012d80:	4419      	add	r1, r3
 8012d82:	4839      	ldr	r0, [pc, #228]	; (8012e68 <linkTimer+0x14c>)
 8012d84:	4613      	mov	r3, r2
 8012d86:	005b      	lsls	r3, r3, #1
 8012d88:	4413      	add	r3, r2
 8012d8a:	00db      	lsls	r3, r3, #3
 8012d8c:	4403      	add	r3, r0
 8012d8e:	3308      	adds	r3, #8
 8012d90:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8012d92:	79fa      	ldrb	r2, [r7, #7]
 8012d94:	4934      	ldr	r1, [pc, #208]	; (8012e68 <linkTimer+0x14c>)
 8012d96:	4613      	mov	r3, r2
 8012d98:	005b      	lsls	r3, r3, #1
 8012d9a:	4413      	add	r3, r2
 8012d9c:	00db      	lsls	r3, r3, #3
 8012d9e:	440b      	add	r3, r1
 8012da0:	3308      	adds	r3, #8
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8012da6:	4b2e      	ldr	r3, [pc, #184]	; (8012e60 <linkTimer+0x144>)
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	4619      	mov	r1, r3
 8012dae:	4a2e      	ldr	r2, [pc, #184]	; (8012e68 <linkTimer+0x14c>)
 8012db0:	460b      	mov	r3, r1
 8012db2:	005b      	lsls	r3, r3, #1
 8012db4:	440b      	add	r3, r1
 8012db6:	00db      	lsls	r3, r3, #3
 8012db8:	4413      	add	r3, r2
 8012dba:	3308      	adds	r3, #8
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	68ba      	ldr	r2, [r7, #8]
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	d337      	bcc.n	8012e34 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8012dc4:	4b26      	ldr	r3, [pc, #152]	; (8012e60 <linkTimer+0x144>)
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8012dca:	7b7a      	ldrb	r2, [r7, #13]
 8012dcc:	4926      	ldr	r1, [pc, #152]	; (8012e68 <linkTimer+0x14c>)
 8012dce:	4613      	mov	r3, r2
 8012dd0:	005b      	lsls	r3, r3, #1
 8012dd2:	4413      	add	r3, r2
 8012dd4:	00db      	lsls	r3, r3, #3
 8012dd6:	440b      	add	r3, r1
 8012dd8:	3315      	adds	r3, #21
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8012dde:	e013      	b.n	8012e08 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8012de0:	7b7a      	ldrb	r2, [r7, #13]
 8012de2:	4921      	ldr	r1, [pc, #132]	; (8012e68 <linkTimer+0x14c>)
 8012de4:	4613      	mov	r3, r2
 8012de6:	005b      	lsls	r3, r3, #1
 8012de8:	4413      	add	r3, r2
 8012dea:	00db      	lsls	r3, r3, #3
 8012dec:	440b      	add	r3, r1
 8012dee:	3315      	adds	r3, #21
 8012df0:	781b      	ldrb	r3, [r3, #0]
 8012df2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8012df4:	7b7a      	ldrb	r2, [r7, #13]
 8012df6:	491c      	ldr	r1, [pc, #112]	; (8012e68 <linkTimer+0x14c>)
 8012df8:	4613      	mov	r3, r2
 8012dfa:	005b      	lsls	r3, r3, #1
 8012dfc:	4413      	add	r3, r2
 8012dfe:	00db      	lsls	r3, r3, #3
 8012e00:	440b      	add	r3, r1
 8012e02:	3315      	adds	r3, #21
 8012e04:	781b      	ldrb	r3, [r3, #0]
 8012e06:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8012e08:	7b3b      	ldrb	r3, [r7, #12]
 8012e0a:	2b06      	cmp	r3, #6
 8012e0c:	d00b      	beq.n	8012e26 <linkTimer+0x10a>
 8012e0e:	7b3a      	ldrb	r2, [r7, #12]
 8012e10:	4915      	ldr	r1, [pc, #84]	; (8012e68 <linkTimer+0x14c>)
 8012e12:	4613      	mov	r3, r2
 8012e14:	005b      	lsls	r3, r3, #1
 8012e16:	4413      	add	r3, r2
 8012e18:	00db      	lsls	r3, r3, #3
 8012e1a:	440b      	add	r3, r1
 8012e1c:	3308      	adds	r3, #8
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	68ba      	ldr	r2, [r7, #8]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d2dc      	bcs.n	8012de0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8012e26:	7b7a      	ldrb	r2, [r7, #13]
 8012e28:	79fb      	ldrb	r3, [r7, #7]
 8012e2a:	4611      	mov	r1, r2
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7ff fecf 	bl	8012bd0 <LinkTimerAfter>
 8012e32:	e00f      	b.n	8012e54 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8012e34:	4b0a      	ldr	r3, [pc, #40]	; (8012e60 <linkTimer+0x144>)
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	b2da      	uxtb	r2, r3
 8012e3a:	79fb      	ldrb	r3, [r7, #7]
 8012e3c:	4611      	mov	r1, r2
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7ff ff0c 	bl	8012c5c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8012e44:	4b06      	ldr	r3, [pc, #24]	; (8012e60 <linkTimer+0x144>)
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	b2da      	uxtb	r2, r3
 8012e4a:	4b06      	ldr	r3, [pc, #24]	; (8012e64 <linkTimer+0x148>)
 8012e4c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8012e4e:	4a04      	ldr	r2, [pc, #16]	; (8012e60 <linkTimer+0x144>)
 8012e50:	79fb      	ldrb	r3, [r7, #7]
 8012e52:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8012e54:	89fb      	ldrh	r3, [r7, #14]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3710      	adds	r7, #16
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	2000023c 	.word	0x2000023c
 8012e64:	2000023d 	.word	0x2000023d
 8012e68:	200001ac 	.word	0x200001ac
 8012e6c:	20000240 	.word	0x20000240

08012e70 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b085      	sub	sp, #20
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	4603      	mov	r3, r0
 8012e78:	460a      	mov	r2, r1
 8012e7a:	71fb      	strb	r3, [r7, #7]
 8012e7c:	4613      	mov	r3, r2
 8012e7e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8012e80:	4b39      	ldr	r3, [pc, #228]	; (8012f68 <UnlinkTimer+0xf8>)
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	b2db      	uxtb	r3, r3
 8012e86:	79fa      	ldrb	r2, [r7, #7]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d111      	bne.n	8012eb0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8012e8c:	4b36      	ldr	r3, [pc, #216]	; (8012f68 <UnlinkTimer+0xf8>)
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	b2da      	uxtb	r2, r3
 8012e92:	4b36      	ldr	r3, [pc, #216]	; (8012f6c <UnlinkTimer+0xfc>)
 8012e94:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8012e96:	79fa      	ldrb	r2, [r7, #7]
 8012e98:	4935      	ldr	r1, [pc, #212]	; (8012f70 <UnlinkTimer+0x100>)
 8012e9a:	4613      	mov	r3, r2
 8012e9c:	005b      	lsls	r3, r3, #1
 8012e9e:	4413      	add	r3, r2
 8012ea0:	00db      	lsls	r3, r3, #3
 8012ea2:	440b      	add	r3, r1
 8012ea4:	3315      	adds	r3, #21
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	b2da      	uxtb	r2, r3
 8012eaa:	4b2f      	ldr	r3, [pc, #188]	; (8012f68 <UnlinkTimer+0xf8>)
 8012eac:	701a      	strb	r2, [r3, #0]
 8012eae:	e03e      	b.n	8012f2e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8012eb0:	79fa      	ldrb	r2, [r7, #7]
 8012eb2:	492f      	ldr	r1, [pc, #188]	; (8012f70 <UnlinkTimer+0x100>)
 8012eb4:	4613      	mov	r3, r2
 8012eb6:	005b      	lsls	r3, r3, #1
 8012eb8:	4413      	add	r3, r2
 8012eba:	00db      	lsls	r3, r3, #3
 8012ebc:	440b      	add	r3, r1
 8012ebe:	3314      	adds	r3, #20
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8012ec4:	79fa      	ldrb	r2, [r7, #7]
 8012ec6:	492a      	ldr	r1, [pc, #168]	; (8012f70 <UnlinkTimer+0x100>)
 8012ec8:	4613      	mov	r3, r2
 8012eca:	005b      	lsls	r3, r3, #1
 8012ecc:	4413      	add	r3, r2
 8012ece:	00db      	lsls	r3, r3, #3
 8012ed0:	440b      	add	r3, r1
 8012ed2:	3315      	adds	r3, #21
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8012ed8:	79f9      	ldrb	r1, [r7, #7]
 8012eda:	7bfa      	ldrb	r2, [r7, #15]
 8012edc:	4824      	ldr	r0, [pc, #144]	; (8012f70 <UnlinkTimer+0x100>)
 8012ede:	460b      	mov	r3, r1
 8012ee0:	005b      	lsls	r3, r3, #1
 8012ee2:	440b      	add	r3, r1
 8012ee4:	00db      	lsls	r3, r3, #3
 8012ee6:	4403      	add	r3, r0
 8012ee8:	3315      	adds	r3, #21
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	b2d8      	uxtb	r0, r3
 8012eee:	4920      	ldr	r1, [pc, #128]	; (8012f70 <UnlinkTimer+0x100>)
 8012ef0:	4613      	mov	r3, r2
 8012ef2:	005b      	lsls	r3, r3, #1
 8012ef4:	4413      	add	r3, r2
 8012ef6:	00db      	lsls	r3, r3, #3
 8012ef8:	440b      	add	r3, r1
 8012efa:	3315      	adds	r3, #21
 8012efc:	4602      	mov	r2, r0
 8012efe:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8012f00:	7bbb      	ldrb	r3, [r7, #14]
 8012f02:	2b06      	cmp	r3, #6
 8012f04:	d013      	beq.n	8012f2e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8012f06:	79f9      	ldrb	r1, [r7, #7]
 8012f08:	7bba      	ldrb	r2, [r7, #14]
 8012f0a:	4819      	ldr	r0, [pc, #100]	; (8012f70 <UnlinkTimer+0x100>)
 8012f0c:	460b      	mov	r3, r1
 8012f0e:	005b      	lsls	r3, r3, #1
 8012f10:	440b      	add	r3, r1
 8012f12:	00db      	lsls	r3, r3, #3
 8012f14:	4403      	add	r3, r0
 8012f16:	3314      	adds	r3, #20
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	b2d8      	uxtb	r0, r3
 8012f1c:	4914      	ldr	r1, [pc, #80]	; (8012f70 <UnlinkTimer+0x100>)
 8012f1e:	4613      	mov	r3, r2
 8012f20:	005b      	lsls	r3, r3, #1
 8012f22:	4413      	add	r3, r2
 8012f24:	00db      	lsls	r3, r3, #3
 8012f26:	440b      	add	r3, r1
 8012f28:	3314      	adds	r3, #20
 8012f2a:	4602      	mov	r2, r0
 8012f2c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8012f2e:	79fa      	ldrb	r2, [r7, #7]
 8012f30:	490f      	ldr	r1, [pc, #60]	; (8012f70 <UnlinkTimer+0x100>)
 8012f32:	4613      	mov	r3, r2
 8012f34:	005b      	lsls	r3, r3, #1
 8012f36:	4413      	add	r3, r2
 8012f38:	00db      	lsls	r3, r3, #3
 8012f3a:	440b      	add	r3, r1
 8012f3c:	330c      	adds	r3, #12
 8012f3e:	2201      	movs	r2, #1
 8012f40:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8012f42:	4b09      	ldr	r3, [pc, #36]	; (8012f68 <UnlinkTimer+0xf8>)
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	b2db      	uxtb	r3, r3
 8012f48:	2b06      	cmp	r3, #6
 8012f4a:	d107      	bne.n	8012f5c <UnlinkTimer+0xec>
 8012f4c:	79bb      	ldrb	r3, [r7, #6]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d104      	bne.n	8012f5c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8012f52:	4b08      	ldr	r3, [pc, #32]	; (8012f74 <UnlinkTimer+0x104>)
 8012f54:	f04f 32ff 	mov.w	r2, #4294967295
 8012f58:	601a      	str	r2, [r3, #0]
  }

  return;
 8012f5a:	bf00      	nop
 8012f5c:	bf00      	nop
}
 8012f5e:	3714      	adds	r7, #20
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr
 8012f68:	2000023c 	.word	0x2000023c
 8012f6c:	2000023d 	.word	0x2000023d
 8012f70:	200001ac 	.word	0x200001ac
 8012f74:	20000240 	.word	0x20000240

08012f78 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8012f7e:	4b1a      	ldr	r3, [pc, #104]	; (8012fe8 <ReturnTimeElapsed+0x70>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f86:	d026      	beq.n	8012fd6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8012f88:	f7ff fe02 	bl	8012b90 <ReadRtcSsrValue>
 8012f8c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8012f8e:	4b16      	ldr	r3, [pc, #88]	; (8012fe8 <ReturnTimeElapsed+0x70>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d805      	bhi.n	8012fa4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8012f98:	4b13      	ldr	r3, [pc, #76]	; (8012fe8 <ReturnTimeElapsed+0x70>)
 8012f9a:	681a      	ldr	r2, [r3, #0]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	607b      	str	r3, [r7, #4]
 8012fa2:	e00a      	b.n	8012fba <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8012fa4:	4b11      	ldr	r3, [pc, #68]	; (8012fec <ReturnTimeElapsed+0x74>)
 8012fa6:	881b      	ldrh	r3, [r3, #0]
 8012fa8:	461a      	mov	r2, r3
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	1ad3      	subs	r3, r2, r3
 8012fae:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8012fb0:	4b0d      	ldr	r3, [pc, #52]	; (8012fe8 <ReturnTimeElapsed+0x70>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	683a      	ldr	r2, [r7, #0]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8012fba:	4b0d      	ldr	r3, [pc, #52]	; (8012ff0 <ReturnTimeElapsed+0x78>)
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	fb02 f303 	mul.w	r3, r2, r3
 8012fc6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8012fc8:	4b0a      	ldr	r3, [pc, #40]	; (8012ff4 <ReturnTimeElapsed+0x7c>)
 8012fca:	781b      	ldrb	r3, [r3, #0]
 8012fcc:	461a      	mov	r2, r3
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	40d3      	lsrs	r3, r2
 8012fd2:	607b      	str	r3, [r7, #4]
 8012fd4:	e001      	b.n	8012fda <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	b29b      	uxth	r3, r3
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3708      	adds	r7, #8
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	20000240 	.word	0x20000240
 8012fec:	20000b16 	.word	0x20000b16
 8012ff0:	20000b15 	.word	0x20000b15
 8012ff4:	20000b14 	.word	0x20000b14

08012ff8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b082      	sub	sp, #8
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	4603      	mov	r3, r0
 8013000:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8013002:	88fb      	ldrh	r3, [r7, #6]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d108      	bne.n	801301a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8013008:	f7ff fdc2 	bl	8012b90 <ReadRtcSsrValue>
 801300c:	4602      	mov	r2, r0
 801300e:	4b24      	ldr	r3, [pc, #144]	; (80130a0 <RestartWakeupCounter+0xa8>)
 8013010:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8013012:	2003      	movs	r0, #3
 8013014:	f004 fe4f 	bl	8017cb6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8013018:	e03e      	b.n	8013098 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 801301a:	88fb      	ldrh	r3, [r7, #6]
 801301c:	2b01      	cmp	r3, #1
 801301e:	d803      	bhi.n	8013028 <RestartWakeupCounter+0x30>
 8013020:	4b20      	ldr	r3, [pc, #128]	; (80130a4 <RestartWakeupCounter+0xac>)
 8013022:	781b      	ldrb	r3, [r3, #0]
 8013024:	2b01      	cmp	r3, #1
 8013026:	d002      	beq.n	801302e <RestartWakeupCounter+0x36>
      Value -= 1;
 8013028:	88fb      	ldrh	r3, [r7, #6]
 801302a:	3b01      	subs	r3, #1
 801302c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 801302e:	bf00      	nop
 8013030:	4b1d      	ldr	r3, [pc, #116]	; (80130a8 <RestartWakeupCounter+0xb0>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	68db      	ldr	r3, [r3, #12]
 8013038:	f003 0304 	and.w	r3, r3, #4
 801303c:	2b00      	cmp	r3, #0
 801303e:	d0f7      	beq.n	8013030 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8013040:	4b19      	ldr	r3, [pc, #100]	; (80130a8 <RestartWakeupCounter+0xb0>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	68db      	ldr	r3, [r3, #12]
 8013048:	b2da      	uxtb	r2, r3
 801304a:	4b17      	ldr	r3, [pc, #92]	; (80130a8 <RestartWakeupCounter+0xb0>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8013054:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8013056:	4b15      	ldr	r3, [pc, #84]	; (80130ac <RestartWakeupCounter+0xb4>)
 8013058:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801305c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 801305e:	2003      	movs	r0, #3
 8013060:	f004 fe37 	bl	8017cd2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8013064:	4b12      	ldr	r3, [pc, #72]	; (80130b0 <RestartWakeupCounter+0xb8>)
 8013066:	695b      	ldr	r3, [r3, #20]
 8013068:	0c1b      	lsrs	r3, r3, #16
 801306a:	041b      	lsls	r3, r3, #16
 801306c:	88fa      	ldrh	r2, [r7, #6]
 801306e:	4910      	ldr	r1, [pc, #64]	; (80130b0 <RestartWakeupCounter+0xb8>)
 8013070:	4313      	orrs	r3, r2
 8013072:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8013074:	f7ff fd8c 	bl	8012b90 <ReadRtcSsrValue>
 8013078:	4602      	mov	r2, r0
 801307a:	4b09      	ldr	r3, [pc, #36]	; (80130a0 <RestartWakeupCounter+0xa8>)
 801307c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 801307e:	4b0a      	ldr	r3, [pc, #40]	; (80130a8 <RestartWakeupCounter+0xb0>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	689a      	ldr	r2, [r3, #8]
 8013086:	4b08      	ldr	r3, [pc, #32]	; (80130a8 <RestartWakeupCounter+0xb0>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013090:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8013092:	f3af 8000 	nop.w
  return ;
 8013096:	bf00      	nop
}
 8013098:	3708      	adds	r7, #8
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
 801309e:	bf00      	nop
 80130a0:	20000240 	.word	0x20000240
 80130a4:	20000b14 	.word	0x20000b14
 80130a8:	20000b10 	.word	0x20000b10
 80130ac:	58000800 	.word	0x58000800
 80130b0:	40002800 	.word	0x40002800

080130b4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80130ba:	4b47      	ldr	r3, [pc, #284]	; (80131d8 <RescheduleTimerList+0x124>)
 80130bc:	689b      	ldr	r3, [r3, #8]
 80130be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80130c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80130c6:	d108      	bne.n	80130da <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80130c8:	bf00      	nop
 80130ca:	4b44      	ldr	r3, [pc, #272]	; (80131dc <RescheduleTimerList+0x128>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	68db      	ldr	r3, [r3, #12]
 80130d2:	f003 0304 	and.w	r3, r3, #4
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d1f7      	bne.n	80130ca <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80130da:	4b40      	ldr	r3, [pc, #256]	; (80131dc <RescheduleTimerList+0x128>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	689a      	ldr	r2, [r3, #8]
 80130e2:	4b3e      	ldr	r3, [pc, #248]	; (80131dc <RescheduleTimerList+0x128>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80130ec:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80130ee:	4b3c      	ldr	r3, [pc, #240]	; (80131e0 <RescheduleTimerList+0x12c>)
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80130f4:	7bfa      	ldrb	r2, [r7, #15]
 80130f6:	493b      	ldr	r1, [pc, #236]	; (80131e4 <RescheduleTimerList+0x130>)
 80130f8:	4613      	mov	r3, r2
 80130fa:	005b      	lsls	r3, r3, #1
 80130fc:	4413      	add	r3, r2
 80130fe:	00db      	lsls	r3, r3, #3
 8013100:	440b      	add	r3, r1
 8013102:	3308      	adds	r3, #8
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8013108:	f7ff ff36 	bl	8012f78 <ReturnTimeElapsed>
 801310c:	4603      	mov	r3, r0
 801310e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8013110:	88fb      	ldrh	r3, [r7, #6]
 8013112:	68ba      	ldr	r2, [r7, #8]
 8013114:	429a      	cmp	r2, r3
 8013116:	d205      	bcs.n	8013124 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8013118:	2300      	movs	r3, #0
 801311a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 801311c:	4b32      	ldr	r3, [pc, #200]	; (80131e8 <RescheduleTimerList+0x134>)
 801311e:	2201      	movs	r2, #1
 8013120:	701a      	strb	r2, [r3, #0]
 8013122:	e04d      	b.n	80131c0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8013124:	88fb      	ldrh	r3, [r7, #6]
 8013126:	4a31      	ldr	r2, [pc, #196]	; (80131ec <RescheduleTimerList+0x138>)
 8013128:	8812      	ldrh	r2, [r2, #0]
 801312a:	b292      	uxth	r2, r2
 801312c:	4413      	add	r3, r2
 801312e:	461a      	mov	r2, r3
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	4293      	cmp	r3, r2
 8013134:	d906      	bls.n	8013144 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8013136:	4b2d      	ldr	r3, [pc, #180]	; (80131ec <RescheduleTimerList+0x138>)
 8013138:	881b      	ldrh	r3, [r3, #0]
 801313a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 801313c:	4b2a      	ldr	r3, [pc, #168]	; (80131e8 <RescheduleTimerList+0x134>)
 801313e:	2200      	movs	r2, #0
 8013140:	701a      	strb	r2, [r3, #0]
 8013142:	e03d      	b.n	80131c0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	b29a      	uxth	r2, r3
 8013148:	88fb      	ldrh	r3, [r7, #6]
 801314a:	1ad3      	subs	r3, r2, r3
 801314c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 801314e:	4b26      	ldr	r3, [pc, #152]	; (80131e8 <RescheduleTimerList+0x134>)
 8013150:	2201      	movs	r2, #1
 8013152:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8013154:	e034      	b.n	80131c0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8013156:	7bfa      	ldrb	r2, [r7, #15]
 8013158:	4922      	ldr	r1, [pc, #136]	; (80131e4 <RescheduleTimerList+0x130>)
 801315a:	4613      	mov	r3, r2
 801315c:	005b      	lsls	r3, r3, #1
 801315e:	4413      	add	r3, r2
 8013160:	00db      	lsls	r3, r3, #3
 8013162:	440b      	add	r3, r1
 8013164:	3308      	adds	r3, #8
 8013166:	681a      	ldr	r2, [r3, #0]
 8013168:	88fb      	ldrh	r3, [r7, #6]
 801316a:	429a      	cmp	r2, r3
 801316c:	d20a      	bcs.n	8013184 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 801316e:	7bfa      	ldrb	r2, [r7, #15]
 8013170:	491c      	ldr	r1, [pc, #112]	; (80131e4 <RescheduleTimerList+0x130>)
 8013172:	4613      	mov	r3, r2
 8013174:	005b      	lsls	r3, r3, #1
 8013176:	4413      	add	r3, r2
 8013178:	00db      	lsls	r3, r3, #3
 801317a:	440b      	add	r3, r1
 801317c:	3308      	adds	r3, #8
 801317e:	2200      	movs	r2, #0
 8013180:	601a      	str	r2, [r3, #0]
 8013182:	e013      	b.n	80131ac <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8013184:	7bfa      	ldrb	r2, [r7, #15]
 8013186:	4917      	ldr	r1, [pc, #92]	; (80131e4 <RescheduleTimerList+0x130>)
 8013188:	4613      	mov	r3, r2
 801318a:	005b      	lsls	r3, r3, #1
 801318c:	4413      	add	r3, r2
 801318e:	00db      	lsls	r3, r3, #3
 8013190:	440b      	add	r3, r1
 8013192:	3308      	adds	r3, #8
 8013194:	6819      	ldr	r1, [r3, #0]
 8013196:	88fb      	ldrh	r3, [r7, #6]
 8013198:	7bfa      	ldrb	r2, [r7, #15]
 801319a:	1ac9      	subs	r1, r1, r3
 801319c:	4811      	ldr	r0, [pc, #68]	; (80131e4 <RescheduleTimerList+0x130>)
 801319e:	4613      	mov	r3, r2
 80131a0:	005b      	lsls	r3, r3, #1
 80131a2:	4413      	add	r3, r2
 80131a4:	00db      	lsls	r3, r3, #3
 80131a6:	4403      	add	r3, r0
 80131a8:	3308      	adds	r3, #8
 80131aa:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80131ac:	7bfa      	ldrb	r2, [r7, #15]
 80131ae:	490d      	ldr	r1, [pc, #52]	; (80131e4 <RescheduleTimerList+0x130>)
 80131b0:	4613      	mov	r3, r2
 80131b2:	005b      	lsls	r3, r3, #1
 80131b4:	4413      	add	r3, r2
 80131b6:	00db      	lsls	r3, r3, #3
 80131b8:	440b      	add	r3, r1
 80131ba:	3315      	adds	r3, #21
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80131c0:	7bfb      	ldrb	r3, [r7, #15]
 80131c2:	2b06      	cmp	r3, #6
 80131c4:	d1c7      	bne.n	8013156 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80131c6:	89bb      	ldrh	r3, [r7, #12]
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7ff ff15 	bl	8012ff8 <RestartWakeupCounter>

  return ;
 80131ce:	bf00      	nop
}
 80131d0:	3710      	adds	r7, #16
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	40002800 	.word	0x40002800
 80131dc:	20000b10 	.word	0x20000b10
 80131e0:	2000023c 	.word	0x2000023c
 80131e4:	200001ac 	.word	0x200001ac
 80131e8:	20000244 	.word	0x20000244
 80131ec:	20000b18 	.word	0x20000b18

080131f0 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b086      	sub	sp, #24
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	4603      	mov	r3, r0
 80131f8:	6039      	str	r1, [r7, #0]
 80131fa:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80131fc:	4a61      	ldr	r2, [pc, #388]	; (8013384 <HW_TS_Init+0x194>)
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8013202:	4b60      	ldr	r3, [pc, #384]	; (8013384 <HW_TS_Init+0x194>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	22ca      	movs	r2, #202	; 0xca
 801320a:	625a      	str	r2, [r3, #36]	; 0x24
 801320c:	4b5d      	ldr	r3, [pc, #372]	; (8013384 <HW_TS_Init+0x194>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	2253      	movs	r2, #83	; 0x53
 8013214:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8013216:	4b5c      	ldr	r3, [pc, #368]	; (8013388 <HW_TS_Init+0x198>)
 8013218:	689b      	ldr	r3, [r3, #8]
 801321a:	4a5b      	ldr	r2, [pc, #364]	; (8013388 <HW_TS_Init+0x198>)
 801321c:	f043 0320 	orr.w	r3, r3, #32
 8013220:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8013222:	4b59      	ldr	r3, [pc, #356]	; (8013388 <HW_TS_Init+0x198>)
 8013224:	689b      	ldr	r3, [r3, #8]
 8013226:	b2db      	uxtb	r3, r3
 8013228:	f003 0307 	and.w	r3, r3, #7
 801322c:	b2db      	uxtb	r3, r3
 801322e:	f1c3 0304 	rsb	r3, r3, #4
 8013232:	b2da      	uxtb	r2, r3
 8013234:	4b55      	ldr	r3, [pc, #340]	; (801338c <HW_TS_Init+0x19c>)
 8013236:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8013238:	4b53      	ldr	r3, [pc, #332]	; (8013388 <HW_TS_Init+0x198>)
 801323a:	691b      	ldr	r3, [r3, #16]
 801323c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8013240:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8013244:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013246:	68fa      	ldr	r2, [r7, #12]
 8013248:	fa92 f2a2 	rbit	r2, r2
 801324c:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801324e:	68ba      	ldr	r2, [r7, #8]
 8013250:	fab2 f282 	clz	r2, r2
 8013254:	b2d2      	uxtb	r2, r2
 8013256:	40d3      	lsrs	r3, r2
 8013258:	b2db      	uxtb	r3, r3
 801325a:	3301      	adds	r3, #1
 801325c:	b2da      	uxtb	r2, r3
 801325e:	4b4c      	ldr	r3, [pc, #304]	; (8013390 <HW_TS_Init+0x1a0>)
 8013260:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8013262:	4b49      	ldr	r3, [pc, #292]	; (8013388 <HW_TS_Init+0x198>)
 8013264:	691b      	ldr	r3, [r3, #16]
 8013266:	b29b      	uxth	r3, r3
 8013268:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801326c:	b29b      	uxth	r3, r3
 801326e:	3301      	adds	r3, #1
 8013270:	b29a      	uxth	r2, r3
 8013272:	4b48      	ldr	r3, [pc, #288]	; (8013394 <HW_TS_Init+0x1a4>)
 8013274:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8013276:	4b47      	ldr	r3, [pc, #284]	; (8013394 <HW_TS_Init+0x1a4>)
 8013278:	881b      	ldrh	r3, [r3, #0]
 801327a:	3b01      	subs	r3, #1
 801327c:	4a44      	ldr	r2, [pc, #272]	; (8013390 <HW_TS_Init+0x1a0>)
 801327e:	7812      	ldrb	r2, [r2, #0]
 8013280:	fb02 f303 	mul.w	r3, r2, r3
 8013284:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013288:	4a40      	ldr	r2, [pc, #256]	; (801338c <HW_TS_Init+0x19c>)
 801328a:	7812      	ldrb	r2, [r2, #0]
 801328c:	40d3      	lsrs	r3, r2
 801328e:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013296:	4293      	cmp	r3, r2
 8013298:	d904      	bls.n	80132a4 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 801329a:	4b3f      	ldr	r3, [pc, #252]	; (8013398 <HW_TS_Init+0x1a8>)
 801329c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132a0:	801a      	strh	r2, [r3, #0]
 80132a2:	e003      	b.n	80132ac <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	b29a      	uxth	r2, r3
 80132a8:	4b3b      	ldr	r3, [pc, #236]	; (8013398 <HW_TS_Init+0x1a8>)
 80132aa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80132ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80132b0:	f7ff fc5c 	bl	8012b6c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80132b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80132b8:	f7ff fc44 	bl	8012b44 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80132bc:	79fb      	ldrb	r3, [r7, #7]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d143      	bne.n	801334a <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80132c2:	4b36      	ldr	r3, [pc, #216]	; (801339c <HW_TS_Init+0x1ac>)
 80132c4:	2201      	movs	r2, #1
 80132c6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80132c8:	4b35      	ldr	r3, [pc, #212]	; (80133a0 <HW_TS_Init+0x1b0>)
 80132ca:	f04f 32ff 	mov.w	r2, #4294967295
 80132ce:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80132d0:	2300      	movs	r3, #0
 80132d2:	75fb      	strb	r3, [r7, #23]
 80132d4:	e00c      	b.n	80132f0 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80132d6:	7dfa      	ldrb	r2, [r7, #23]
 80132d8:	4932      	ldr	r1, [pc, #200]	; (80133a4 <HW_TS_Init+0x1b4>)
 80132da:	4613      	mov	r3, r2
 80132dc:	005b      	lsls	r3, r3, #1
 80132de:	4413      	add	r3, r2
 80132e0:	00db      	lsls	r3, r3, #3
 80132e2:	440b      	add	r3, r1
 80132e4:	330c      	adds	r3, #12
 80132e6:	2200      	movs	r2, #0
 80132e8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80132ea:	7dfb      	ldrb	r3, [r7, #23]
 80132ec:	3301      	adds	r3, #1
 80132ee:	75fb      	strb	r3, [r7, #23]
 80132f0:	7dfb      	ldrb	r3, [r7, #23]
 80132f2:	2b05      	cmp	r3, #5
 80132f4:	d9ef      	bls.n	80132d6 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80132f6:	4b2c      	ldr	r3, [pc, #176]	; (80133a8 <HW_TS_Init+0x1b8>)
 80132f8:	2206      	movs	r2, #6
 80132fa:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80132fc:	4b21      	ldr	r3, [pc, #132]	; (8013384 <HW_TS_Init+0x194>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	689a      	ldr	r2, [r3, #8]
 8013304:	4b1f      	ldr	r3, [pc, #124]	; (8013384 <HW_TS_Init+0x194>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801330e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8013310:	4b1c      	ldr	r3, [pc, #112]	; (8013384 <HW_TS_Init+0x194>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	b2da      	uxtb	r2, r3
 801331a:	4b1a      	ldr	r3, [pc, #104]	; (8013384 <HW_TS_Init+0x194>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8013324:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8013326:	4b21      	ldr	r3, [pc, #132]	; (80133ac <HW_TS_Init+0x1bc>)
 8013328:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801332c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 801332e:	2003      	movs	r0, #3
 8013330:	f004 fccf 	bl	8017cd2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8013334:	4b13      	ldr	r3, [pc, #76]	; (8013384 <HW_TS_Init+0x194>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	689a      	ldr	r2, [r3, #8]
 801333c:	4b11      	ldr	r3, [pc, #68]	; (8013384 <HW_TS_Init+0x194>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013346:	609a      	str	r2, [r3, #8]
 8013348:	e00a      	b.n	8013360 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 801334a:	4b0e      	ldr	r3, [pc, #56]	; (8013384 <HW_TS_Init+0x194>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	68db      	ldr	r3, [r3, #12]
 8013352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013356:	2b00      	cmp	r3, #0
 8013358:	d002      	beq.n	8013360 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 801335a:	2003      	movs	r0, #3
 801335c:	f004 fcab 	bl	8017cb6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8013360:	4b08      	ldr	r3, [pc, #32]	; (8013384 <HW_TS_Init+0x194>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	22ff      	movs	r2, #255	; 0xff
 8013368:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 801336a:	2200      	movs	r2, #0
 801336c:	2106      	movs	r1, #6
 801336e:	2003      	movs	r0, #3
 8013370:	f004 fc67 	bl	8017c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8013374:	2003      	movs	r0, #3
 8013376:	f004 fc7e 	bl	8017c76 <HAL_NVIC_EnableIRQ>

  return;
 801337a:	bf00      	nop
}
 801337c:	3718      	adds	r7, #24
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
 8013382:	bf00      	nop
 8013384:	20000b10 	.word	0x20000b10
 8013388:	40002800 	.word	0x40002800
 801338c:	20000b14 	.word	0x20000b14
 8013390:	20000b15 	.word	0x20000b15
 8013394:	20000b16 	.word	0x20000b16
 8013398:	20000b18 	.word	0x20000b18
 801339c:	20000244 	.word	0x20000244
 80133a0:	20000240 	.word	0x20000240
 80133a4:	200001ac 	.word	0x200001ac
 80133a8:	2000023c 	.word	0x2000023c
 80133ac:	58000800 	.word	0x58000800

080133b0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80133b0:	b480      	push	{r7}
 80133b2:	b08b      	sub	sp, #44	; 0x2c
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	60b9      	str	r1, [r7, #8]
 80133ba:	603b      	str	r3, [r7, #0]
 80133bc:	4613      	mov	r3, r2
 80133be:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80133c0:	2300      	movs	r3, #0
 80133c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133c6:	f3ef 8310 	mrs	r3, PRIMASK
 80133ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80133cc:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80133ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80133d0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80133d2:	e004      	b.n	80133de <HW_TS_Create+0x2e>
  {
    loop++;
 80133d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80133d8:	3301      	adds	r3, #1
 80133da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80133de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80133e2:	2b05      	cmp	r3, #5
 80133e4:	d80c      	bhi.n	8013400 <HW_TS_Create+0x50>
 80133e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80133ea:	492b      	ldr	r1, [pc, #172]	; (8013498 <HW_TS_Create+0xe8>)
 80133ec:	4613      	mov	r3, r2
 80133ee:	005b      	lsls	r3, r3, #1
 80133f0:	4413      	add	r3, r2
 80133f2:	00db      	lsls	r3, r3, #3
 80133f4:	440b      	add	r3, r1
 80133f6:	330c      	adds	r3, #12
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d1e9      	bne.n	80133d4 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8013400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013404:	2b06      	cmp	r3, #6
 8013406:	d037      	beq.n	8013478 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8013408:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801340c:	4922      	ldr	r1, [pc, #136]	; (8013498 <HW_TS_Create+0xe8>)
 801340e:	4613      	mov	r3, r2
 8013410:	005b      	lsls	r3, r3, #1
 8013412:	4413      	add	r3, r2
 8013414:	00db      	lsls	r3, r3, #3
 8013416:	440b      	add	r3, r1
 8013418:	330c      	adds	r3, #12
 801341a:	2201      	movs	r2, #1
 801341c:	701a      	strb	r2, [r3, #0]
 801341e:	6a3b      	ldr	r3, [r7, #32]
 8013420:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8013428:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801342c:	491a      	ldr	r1, [pc, #104]	; (8013498 <HW_TS_Create+0xe8>)
 801342e:	4613      	mov	r3, r2
 8013430:	005b      	lsls	r3, r3, #1
 8013432:	4413      	add	r3, r2
 8013434:	00db      	lsls	r3, r3, #3
 8013436:	440b      	add	r3, r1
 8013438:	3310      	adds	r3, #16
 801343a:	68fa      	ldr	r2, [r7, #12]
 801343c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 801343e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013442:	4915      	ldr	r1, [pc, #84]	; (8013498 <HW_TS_Create+0xe8>)
 8013444:	4613      	mov	r3, r2
 8013446:	005b      	lsls	r3, r3, #1
 8013448:	4413      	add	r3, r2
 801344a:	00db      	lsls	r3, r3, #3
 801344c:	440b      	add	r3, r1
 801344e:	330d      	adds	r3, #13
 8013450:	79fa      	ldrb	r2, [r7, #7]
 8013452:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8013454:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013458:	490f      	ldr	r1, [pc, #60]	; (8013498 <HW_TS_Create+0xe8>)
 801345a:	4613      	mov	r3, r2
 801345c:	005b      	lsls	r3, r3, #1
 801345e:	4413      	add	r3, r2
 8013460:	00db      	lsls	r3, r3, #3
 8013462:	440b      	add	r3, r1
 8013464:	683a      	ldr	r2, [r7, #0]
 8013466:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801346e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8013470:	2300      	movs	r3, #0
 8013472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013476:	e007      	b.n	8013488 <HW_TS_Create+0xd8>
 8013478:	6a3b      	ldr	r3, [r7, #32]
 801347a:	617b      	str	r3, [r7, #20]
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8013482:	2301      	movs	r3, #1
 8013484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8013488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801348c:	4618      	mov	r0, r3
 801348e:	372c      	adds	r7, #44	; 0x2c
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr
 8013498:	200001ac 	.word	0x200001ac

0801349c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b086      	sub	sp, #24
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	4603      	mov	r3, r0
 80134a4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80134a6:	f3ef 8310 	mrs	r3, PRIMASK
 80134aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80134ac:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80134ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80134b0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80134b2:	2003      	movs	r0, #3
 80134b4:	f004 fbed 	bl	8017c92 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80134b8:	4b37      	ldr	r3, [pc, #220]	; (8013598 <HW_TS_Stop+0xfc>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	22ca      	movs	r2, #202	; 0xca
 80134c0:	625a      	str	r2, [r3, #36]	; 0x24
 80134c2:	4b35      	ldr	r3, [pc, #212]	; (8013598 <HW_TS_Stop+0xfc>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	2253      	movs	r2, #83	; 0x53
 80134ca:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80134cc:	79fa      	ldrb	r2, [r7, #7]
 80134ce:	4933      	ldr	r1, [pc, #204]	; (801359c <HW_TS_Stop+0x100>)
 80134d0:	4613      	mov	r3, r2
 80134d2:	005b      	lsls	r3, r3, #1
 80134d4:	4413      	add	r3, r2
 80134d6:	00db      	lsls	r3, r3, #3
 80134d8:	440b      	add	r3, r1
 80134da:	330c      	adds	r3, #12
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	b2db      	uxtb	r3, r3
 80134e0:	2b02      	cmp	r3, #2
 80134e2:	d148      	bne.n	8013576 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80134e4:	79fb      	ldrb	r3, [r7, #7]
 80134e6:	2100      	movs	r1, #0
 80134e8:	4618      	mov	r0, r3
 80134ea:	f7ff fcc1 	bl	8012e70 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80134ee:	4b2c      	ldr	r3, [pc, #176]	; (80135a0 <HW_TS_Stop+0x104>)
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80134f4:	7cfb      	ldrb	r3, [r7, #19]
 80134f6:	2b06      	cmp	r3, #6
 80134f8:	d135      	bne.n	8013566 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80134fa:	4b2a      	ldr	r3, [pc, #168]	; (80135a4 <HW_TS_Stop+0x108>)
 80134fc:	689b      	ldr	r3, [r3, #8]
 80134fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013506:	d108      	bne.n	801351a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8013508:	bf00      	nop
 801350a:	4b23      	ldr	r3, [pc, #140]	; (8013598 <HW_TS_Stop+0xfc>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	68db      	ldr	r3, [r3, #12]
 8013512:	f003 0304 	and.w	r3, r3, #4
 8013516:	2b00      	cmp	r3, #0
 8013518:	d1f7      	bne.n	801350a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 801351a:	4b1f      	ldr	r3, [pc, #124]	; (8013598 <HW_TS_Stop+0xfc>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	689a      	ldr	r2, [r3, #8]
 8013522:	4b1d      	ldr	r3, [pc, #116]	; (8013598 <HW_TS_Stop+0xfc>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801352c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 801352e:	bf00      	nop
 8013530:	4b19      	ldr	r3, [pc, #100]	; (8013598 <HW_TS_Stop+0xfc>)
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	68db      	ldr	r3, [r3, #12]
 8013538:	f003 0304 	and.w	r3, r3, #4
 801353c:	2b00      	cmp	r3, #0
 801353e:	d0f7      	beq.n	8013530 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8013540:	4b15      	ldr	r3, [pc, #84]	; (8013598 <HW_TS_Stop+0xfc>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	b2da      	uxtb	r2, r3
 801354a:	4b13      	ldr	r3, [pc, #76]	; (8013598 <HW_TS_Stop+0xfc>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8013554:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8013556:	4b14      	ldr	r3, [pc, #80]	; (80135a8 <HW_TS_Stop+0x10c>)
 8013558:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801355c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 801355e:	2003      	movs	r0, #3
 8013560:	f004 fbb7 	bl	8017cd2 <HAL_NVIC_ClearPendingIRQ>
 8013564:	e007      	b.n	8013576 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8013566:	4b11      	ldr	r3, [pc, #68]	; (80135ac <HW_TS_Stop+0x110>)
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	b2db      	uxtb	r3, r3
 801356c:	7cfa      	ldrb	r2, [r7, #19]
 801356e:	429a      	cmp	r2, r3
 8013570:	d001      	beq.n	8013576 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8013572:	f7ff fd9f 	bl	80130b4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8013576:	4b08      	ldr	r3, [pc, #32]	; (8013598 <HW_TS_Stop+0xfc>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	22ff      	movs	r2, #255	; 0xff
 801357e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8013580:	2003      	movs	r0, #3
 8013582:	f004 fb78 	bl	8017c76 <HAL_NVIC_EnableIRQ>
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8013590:	bf00      	nop
}
 8013592:	3718      	adds	r7, #24
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	20000b10 	.word	0x20000b10
 801359c:	200001ac 	.word	0x200001ac
 80135a0:	2000023c 	.word	0x2000023c
 80135a4:	40002800 	.word	0x40002800
 80135a8:	58000800 	.word	0x58000800
 80135ac:	2000023d 	.word	0x2000023d

080135b0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b086      	sub	sp, #24
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	4603      	mov	r3, r0
 80135b8:	6039      	str	r1, [r7, #0]
 80135ba:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80135bc:	79fa      	ldrb	r2, [r7, #7]
 80135be:	493b      	ldr	r1, [pc, #236]	; (80136ac <HW_TS_Start+0xfc>)
 80135c0:	4613      	mov	r3, r2
 80135c2:	005b      	lsls	r3, r3, #1
 80135c4:	4413      	add	r3, r2
 80135c6:	00db      	lsls	r3, r3, #3
 80135c8:	440b      	add	r3, r1
 80135ca:	330c      	adds	r3, #12
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	b2db      	uxtb	r3, r3
 80135d0:	2b02      	cmp	r3, #2
 80135d2:	d103      	bne.n	80135dc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80135d4:	79fb      	ldrb	r3, [r7, #7]
 80135d6:	4618      	mov	r0, r3
 80135d8:	f7ff ff60 	bl	801349c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80135dc:	f3ef 8310 	mrs	r3, PRIMASK
 80135e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80135e2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80135e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80135e6:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80135e8:	2003      	movs	r0, #3
 80135ea:	f004 fb52 	bl	8017c92 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80135ee:	4b30      	ldr	r3, [pc, #192]	; (80136b0 <HW_TS_Start+0x100>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	22ca      	movs	r2, #202	; 0xca
 80135f6:	625a      	str	r2, [r3, #36]	; 0x24
 80135f8:	4b2d      	ldr	r3, [pc, #180]	; (80136b0 <HW_TS_Start+0x100>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	2253      	movs	r2, #83	; 0x53
 8013600:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8013602:	79fa      	ldrb	r2, [r7, #7]
 8013604:	4929      	ldr	r1, [pc, #164]	; (80136ac <HW_TS_Start+0xfc>)
 8013606:	4613      	mov	r3, r2
 8013608:	005b      	lsls	r3, r3, #1
 801360a:	4413      	add	r3, r2
 801360c:	00db      	lsls	r3, r3, #3
 801360e:	440b      	add	r3, r1
 8013610:	330c      	adds	r3, #12
 8013612:	2202      	movs	r2, #2
 8013614:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8013616:	79fa      	ldrb	r2, [r7, #7]
 8013618:	4924      	ldr	r1, [pc, #144]	; (80136ac <HW_TS_Start+0xfc>)
 801361a:	4613      	mov	r3, r2
 801361c:	005b      	lsls	r3, r3, #1
 801361e:	4413      	add	r3, r2
 8013620:	00db      	lsls	r3, r3, #3
 8013622:	440b      	add	r3, r1
 8013624:	3308      	adds	r3, #8
 8013626:	683a      	ldr	r2, [r7, #0]
 8013628:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 801362a:	79fa      	ldrb	r2, [r7, #7]
 801362c:	491f      	ldr	r1, [pc, #124]	; (80136ac <HW_TS_Start+0xfc>)
 801362e:	4613      	mov	r3, r2
 8013630:	005b      	lsls	r3, r3, #1
 8013632:	4413      	add	r3, r2
 8013634:	00db      	lsls	r3, r3, #3
 8013636:	440b      	add	r3, r1
 8013638:	3304      	adds	r3, #4
 801363a:	683a      	ldr	r2, [r7, #0]
 801363c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 801363e:	79fb      	ldrb	r3, [r7, #7]
 8013640:	4618      	mov	r0, r3
 8013642:	f7ff fb6b 	bl	8012d1c <linkTimer>
 8013646:	4603      	mov	r3, r0
 8013648:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 801364a:	4b1a      	ldr	r3, [pc, #104]	; (80136b4 <HW_TS_Start+0x104>)
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8013650:	4b19      	ldr	r3, [pc, #100]	; (80136b8 <HW_TS_Start+0x108>)
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	b2db      	uxtb	r3, r3
 8013656:	7c7a      	ldrb	r2, [r7, #17]
 8013658:	429a      	cmp	r2, r3
 801365a:	d002      	beq.n	8013662 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 801365c:	f7ff fd2a 	bl	80130b4 <RescheduleTimerList>
 8013660:	e013      	b.n	801368a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8013662:	79fa      	ldrb	r2, [r7, #7]
 8013664:	4911      	ldr	r1, [pc, #68]	; (80136ac <HW_TS_Start+0xfc>)
 8013666:	4613      	mov	r3, r2
 8013668:	005b      	lsls	r3, r3, #1
 801366a:	4413      	add	r3, r2
 801366c:	00db      	lsls	r3, r3, #3
 801366e:	440b      	add	r3, r1
 8013670:	3308      	adds	r3, #8
 8013672:	6819      	ldr	r1, [r3, #0]
 8013674:	8a7b      	ldrh	r3, [r7, #18]
 8013676:	79fa      	ldrb	r2, [r7, #7]
 8013678:	1ac9      	subs	r1, r1, r3
 801367a:	480c      	ldr	r0, [pc, #48]	; (80136ac <HW_TS_Start+0xfc>)
 801367c:	4613      	mov	r3, r2
 801367e:	005b      	lsls	r3, r3, #1
 8013680:	4413      	add	r3, r2
 8013682:	00db      	lsls	r3, r3, #3
 8013684:	4403      	add	r3, r0
 8013686:	3308      	adds	r3, #8
 8013688:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 801368a:	4b09      	ldr	r3, [pc, #36]	; (80136b0 <HW_TS_Start+0x100>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	22ff      	movs	r2, #255	; 0xff
 8013692:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8013694:	2003      	movs	r0, #3
 8013696:	f004 faee 	bl	8017c76 <HAL_NVIC_EnableIRQ>
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80136a4:	bf00      	nop
}
 80136a6:	3718      	adds	r7, #24
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}
 80136ac:	200001ac 	.word	0x200001ac
 80136b0:	20000b10 	.word	0x20000b10
 80136b4:	2000023c 	.word	0x2000023c
 80136b8:	2000023d 	.word	0x2000023d

080136bc <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b086      	sub	sp, #24
 80136c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80136c2:	f3ef 8310 	mrs	r3, PRIMASK
 80136c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80136c8:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80136ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80136cc:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80136ce:	4b13      	ldr	r3, [pc, #76]	; (801371c <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 80136d0:	689b      	ldr	r3, [r3, #8]
 80136d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80136d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80136da:	d112      	bne.n	8013702 <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 80136dc:	4b0f      	ldr	r3, [pc, #60]	; (801371c <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 80136de:	695b      	ldr	r3, [r3, #20]
 80136e0:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 80136e2:	f7ff fc49 	bl	8012f78 <ReturnTimeElapsed>
 80136e6:	4603      	mov	r3, r0
 80136e8:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 80136ea:	89fa      	ldrh	r2, [r7, #14]
 80136ec:	89bb      	ldrh	r3, [r7, #12]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d904      	bls.n	80136fc <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 80136f2:	89fa      	ldrh	r2, [r7, #14]
 80136f4:	89bb      	ldrh	r3, [r7, #12]
 80136f6:	1ad3      	subs	r3, r2, r3
 80136f8:	82fb      	strh	r3, [r7, #22]
 80136fa:	e005      	b.n	8013708 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 80136fc:	2300      	movs	r3, #0
 80136fe:	82fb      	strh	r3, [r7, #22]
 8013700:	e002      	b.n	8013708 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 8013702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013706:	82fb      	strh	r3, [r7, #22]
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 8013712:	8afb      	ldrh	r3, [r7, #22]
}
 8013714:	4618      	mov	r0, r3
 8013716:	3718      	adds	r7, #24
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}
 801371c:	40002800 	.word	0x40002800

08013720 <LL_AHB2_GRP1_EnableClock>:
{
 8013720:	b480      	push	{r7}
 8013722:	b085      	sub	sp, #20
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8013728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801372c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801372e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	4313      	orrs	r3, r2
 8013736:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8013738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801373c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	4013      	ands	r3, r2
 8013742:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8013744:	68fb      	ldr	r3, [r7, #12]
}
 8013746:	bf00      	nop
 8013748:	3714      	adds	r7, #20
 801374a:	46bd      	mov	sp, r7
 801374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013750:	4770      	bx	lr

08013752 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8013752:	b480      	push	{r7}
 8013754:	b085      	sub	sp, #20
 8013756:	af00      	add	r7, sp, #0
 8013758:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 801375a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801375e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	4313      	orrs	r3, r2
 8013768:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801376e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	4013      	ands	r3, r2
 8013774:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8013776:	68fb      	ldr	r3, [r7, #12]
}
 8013778:	bf00      	nop
 801377a:	3714      	adds	r7, #20
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr

08013784 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8013788:	4b1b      	ldr	r3, [pc, #108]	; (80137f8 <MX_I2C1_Init+0x74>)
 801378a:	4a1c      	ldr	r2, [pc, #112]	; (80137fc <MX_I2C1_Init+0x78>)
 801378c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 801378e:	4b1a      	ldr	r3, [pc, #104]	; (80137f8 <MX_I2C1_Init+0x74>)
 8013790:	4a1b      	ldr	r2, [pc, #108]	; (8013800 <MX_I2C1_Init+0x7c>)
 8013792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8013794:	4b18      	ldr	r3, [pc, #96]	; (80137f8 <MX_I2C1_Init+0x74>)
 8013796:	2200      	movs	r2, #0
 8013798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801379a:	4b17      	ldr	r3, [pc, #92]	; (80137f8 <MX_I2C1_Init+0x74>)
 801379c:	2201      	movs	r2, #1
 801379e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80137a0:	4b15      	ldr	r3, [pc, #84]	; (80137f8 <MX_I2C1_Init+0x74>)
 80137a2:	2200      	movs	r2, #0
 80137a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80137a6:	4b14      	ldr	r3, [pc, #80]	; (80137f8 <MX_I2C1_Init+0x74>)
 80137a8:	2200      	movs	r2, #0
 80137aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80137ac:	4b12      	ldr	r3, [pc, #72]	; (80137f8 <MX_I2C1_Init+0x74>)
 80137ae:	2200      	movs	r2, #0
 80137b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80137b2:	4b11      	ldr	r3, [pc, #68]	; (80137f8 <MX_I2C1_Init+0x74>)
 80137b4:	2200      	movs	r2, #0
 80137b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80137b8:	4b0f      	ldr	r3, [pc, #60]	; (80137f8 <MX_I2C1_Init+0x74>)
 80137ba:	2200      	movs	r2, #0
 80137bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80137be:	480e      	ldr	r0, [pc, #56]	; (80137f8 <MX_I2C1_Init+0x74>)
 80137c0:	f005 f97c 	bl	8018abc <HAL_I2C_Init>
 80137c4:	4603      	mov	r3, r0
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d001      	beq.n	80137ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80137ca:	f000 fd73 	bl	80142b4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80137ce:	2100      	movs	r1, #0
 80137d0:	4809      	ldr	r0, [pc, #36]	; (80137f8 <MX_I2C1_Init+0x74>)
 80137d2:	f007 f874 	bl	801a8be <HAL_I2CEx_ConfigAnalogFilter>
 80137d6:	4603      	mov	r3, r0
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d001      	beq.n	80137e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80137dc:	f000 fd6a 	bl	80142b4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80137e0:	2100      	movs	r1, #0
 80137e2:	4805      	ldr	r0, [pc, #20]	; (80137f8 <MX_I2C1_Init+0x74>)
 80137e4:	f007 f8b6 	bl	801a954 <HAL_I2CEx_ConfigDigitalFilter>
 80137e8:	4603      	mov	r3, r0
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d001      	beq.n	80137f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80137ee:	f000 fd61 	bl	80142b4 <Error_Handler>
  }

}
 80137f2:	bf00      	nop
 80137f4:	bd80      	pop	{r7, pc}
 80137f6:	bf00      	nop
 80137f8:	200281b8 	.word	0x200281b8
 80137fc:	40005400 	.word	0x40005400
 8013800:	00e27cae 	.word	0x00e27cae

08013804 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b088      	sub	sp, #32
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801380c:	f107 030c 	add.w	r3, r7, #12
 8013810:	2200      	movs	r2, #0
 8013812:	601a      	str	r2, [r3, #0]
 8013814:	605a      	str	r2, [r3, #4]
 8013816:	609a      	str	r2, [r3, #8]
 8013818:	60da      	str	r2, [r3, #12]
 801381a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	4a13      	ldr	r2, [pc, #76]	; (8013870 <HAL_I2C_MspInit+0x6c>)
 8013822:	4293      	cmp	r3, r2
 8013824:	d120      	bne.n	8013868 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013826:	2001      	movs	r0, #1
 8013828:	f7ff ff7a 	bl	8013720 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801382c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8013830:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013832:	2312      	movs	r3, #18
 8013834:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013836:	2300      	movs	r3, #0
 8013838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801383a:	2300      	movs	r3, #0
 801383c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801383e:	2304      	movs	r3, #4
 8013840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013842:	f107 030c 	add.w	r3, r7, #12
 8013846:	4619      	mov	r1, r3
 8013848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801384c:	f004 ff64 	bl	8018718 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8013850:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8013854:	f7ff ff7d 	bl	8013752 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8013858:	2200      	movs	r2, #0
 801385a:	2105      	movs	r1, #5
 801385c:	201e      	movs	r0, #30
 801385e:	f004 f9f0 	bl	8017c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8013862:	201e      	movs	r0, #30
 8013864:	f004 fa07 	bl	8017c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8013868:	bf00      	nop
 801386a:	3720      	adds	r7, #32
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}
 8013870:	40005400 	.word	0x40005400

08013874 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8013874:	b580      	push	{r7, lr}
 8013876:	b084      	sub	sp, #16
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 801387c:	4b35      	ldr	r3, [pc, #212]	; (8013954 <InertialSensingTask+0xe0>)
 801387e:	2201      	movs	r2, #1
 8013880:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
#endif

	uint32_t evt = 0;
 8013882:	2300      	movs	r3, #0
 8013884:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8013886:	f04f 32ff 	mov.w	r2, #4294967295
 801388a:	2100      	movs	r1, #0
 801388c:	2001      	movs	r0, #1
 801388e:	f00a feed 	bl	801e66c <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 8013892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013896:	f00a ff7d 	bl	801e794 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 801389a:	2064      	movs	r0, #100	; 0x64
 801389c:	f7fe fb48 	bl	8011f30 <IMU_enableRotationVector>
		osDelay(100);
 80138a0:	2064      	movs	r0, #100	; 0x64
 80138a2:	f00a ff77 	bl	801e794 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 80138a6:	4b2c      	ldr	r3, [pc, #176]	; (8013958 <InertialSensingTask+0xe4>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	4a2c      	ldr	r2, [pc, #176]	; (801395c <InertialSensingTask+0xe8>)
 80138ac:	4619      	mov	r1, r3
 80138ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80138b2:	f7fe fb4b 	bl	8011f4c <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 80138b6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80138ba:	f00a ff6b 	bl	801e794 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 80138be:	2064      	movs	r0, #100	; 0x64
 80138c0:	f00a ff68 	bl	801e794 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 80138c4:	4b26      	ldr	r3, [pc, #152]	; (8013960 <InertialSensingTask+0xec>)
 80138c6:	6818      	ldr	r0, [r3, #0]
 80138c8:	2364      	movs	r3, #100	; 0x64
 80138ca:	2200      	movs	r2, #0
 80138cc:	4925      	ldr	r1, [pc, #148]	; (8013964 <InertialSensingTask+0xf0>)
 80138ce:	f00b fc51 	bl	801f174 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 80138d2:	4b25      	ldr	r3, [pc, #148]	; (8013968 <InertialSensingTask+0xf4>)
 80138d4:	6818      	ldr	r0, [r3, #0]
 80138d6:	2300      	movs	r3, #0
 80138d8:	2200      	movs	r2, #0
 80138da:	4924      	ldr	r1, [pc, #144]	; (801396c <InertialSensingTask+0xf8>)
 80138dc:	f00b fc4a 	bl	801f174 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 80138e0:	4b23      	ldr	r3, [pc, #140]	; (8013970 <InertialSensingTask+0xfc>)
 80138e2:	6818      	ldr	r0, [r3, #0]
 80138e4:	2300      	movs	r3, #0
 80138e6:	2200      	movs	r2, #0
 80138e8:	491e      	ldr	r1, [pc, #120]	; (8013964 <InertialSensingTask+0xf0>)
 80138ea:	f00b fbcf 	bl	801f08c <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 80138ee:	2120      	movs	r1, #32
 80138f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80138f4:	f005 f880 	bl	80189f8 <HAL_GPIO_ReadPin>
 80138f8:	4603      	mov	r3, r0
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d101      	bne.n	8013902 <InertialSensingTask+0x8e>
 80138fe:	f7fe f855 	bl	80119ac <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 8013902:	2200      	movs	r2, #0
 8013904:	2100      	movs	r1, #0
 8013906:	2002      	movs	r0, #2
 8013908:	f00a feb0 	bl	801e66c <osThreadFlagsWait>
 801390c:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	f003 0302 	and.w	r3, r3, #2
 8013914:	2b00      	cmp	r3, #0
 8013916:	d0d2      	beq.n	80138be <InertialSensingTask+0x4a>

				// reset IMU
				IMU_softReset();
 8013918:	f7fe faaa 	bl	8011e70 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 801391c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013920:	f00a ff38 	bl	801e794 <osDelay>

				inertialEnabled = 0;
 8013924:	4b0b      	ldr	r3, [pc, #44]	; (8013954 <InertialSensingTask+0xe0>)
 8013926:	2200      	movs	r2, #0
 8013928:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 801392a:	4b11      	ldr	r3, [pc, #68]	; (8013970 <InertialSensingTask+0xfc>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	4618      	mov	r0, r3
 8013930:	f00b fc92 	bl	801f258 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 8013934:	4b0c      	ldr	r3, [pc, #48]	; (8013968 <InertialSensingTask+0xf4>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	4618      	mov	r0, r3
 801393a:	f00b fc8d 	bl	801f258 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 801393e:	4b08      	ldr	r3, [pc, #32]	; (8013960 <InertialSensingTask+0xec>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	4618      	mov	r0, r3
 8013944:	f00b fc88 	bl	801f258 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8013948:	200e      	movs	r0, #14
 801394a:	f00a fe3f 	bl	801e5cc <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 801394e:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8013950:	e799      	b.n	8013886 <InertialSensingTask+0x12>
 8013952:	bf00      	nop
 8013954:	20000b1a 	.word	0x20000b1a
 8013958:	20000068 	.word	0x20000068
 801395c:	20028248 	.word	0x20028248
 8013960:	20027bd8 	.word	0x20027bd8
 8013964:	2002820c 	.word	0x2002820c
 8013968:	20027bbc 	.word	0x20027bbc
 801396c:	20028224 	.word	0x20028224
 8013970:	20027bc8 	.word	0x20027bc8

08013974 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	4603      	mov	r3, r0
 801397c:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 801397e:	88fb      	ldrh	r3, [r7, #6]
 8013980:	2b20      	cmp	r3, #32
 8013982:	d105      	bne.n	8013990 <HAL_GPIO_EXTI_Callback+0x1c>
 8013984:	4b04      	ldr	r3, [pc, #16]	; (8013998 <HAL_GPIO_EXTI_Callback+0x24>)
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	2b01      	cmp	r3, #1
 801398a:	d101      	bne.n	8013990 <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 801398c:	f7fe f80e 	bl	80119ac <IMU_dataAvailable>
	}
}
 8013990:	bf00      	nop
 8013992:	3708      	adds	r7, #8
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}
 8013998:	20000b1a 	.word	0x20000b1a

0801399c <_Input>:
#include "captivate_config.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	460b      	mov	r3, r1
 80139a6:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 80139a8:	480b      	ldr	r0, [pc, #44]	; (80139d8 <_Input+0x3c>)
 80139aa:	f7fe fd77 	bl	801249c <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 80139ae:	2101      	movs	r1, #1
 80139b0:	480a      	ldr	r0, [pc, #40]	; (80139dc <_Input+0x40>)
 80139b2:	f000 fed5 	bl	8014760 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 80139b6:	4b09      	ldr	r3, [pc, #36]	; (80139dc <_Input+0x40>)
 80139b8:	4a07      	ldr	r2, [pc, #28]	; (80139d8 <_Input+0x3c>)
 80139ba:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	4a06      	ldr	r2, [pc, #24]	; (80139dc <_Input+0x40>)
 80139c2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	78fa      	ldrb	r2, [r7, #3]
 80139ca:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 80139ce:	bf00      	nop
 80139d0:	3708      	adds	r7, #8
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}
 80139d6:	bf00      	nop
 80139d8:	20028274 	.word	0x20028274
 80139dc:	200282fc 	.word	0x200282fc

080139e0 <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b084      	sub	sp, #16
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 80139e8:	2300      	movs	r3, #0
 80139ea:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80139ec:	f04f 32ff 	mov.w	r2, #4294967295
 80139f0:	2100      	movs	r1, #0
 80139f2:	2001      	movs	r0, #1
 80139f4:	f00a fe3a 	bl	801e66c <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 80139f8:	4818      	ldr	r0, [pc, #96]	; (8013a5c <PulseHandlerTask+0x7c>)
 80139fa:	f009 f9f5 	bl	801cde8 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 80139fe:	4818      	ldr	r0, [pc, #96]	; (8013a60 <PulseHandlerTask+0x80>)
 8013a00:	f003 ff38 	bl	8017874 <HAL_COMP_Start>
		_Input(&input0, 0);
 8013a04:	2100      	movs	r1, #0
 8013a06:	4817      	ldr	r0, [pc, #92]	; (8013a64 <PulseHandlerTask+0x84>)
 8013a08:	f7ff ffc8 	bl	801399c <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8013a0c:	4b16      	ldr	r3, [pc, #88]	; (8013a68 <PulseHandlerTask+0x88>)
 8013a0e:	6818      	ldr	r0, [r3, #0]
 8013a10:	f04f 33ff 	mov.w	r3, #4294967295
 8013a14:	2200      	movs	r2, #0
 8013a16:	4915      	ldr	r1, [pc, #84]	; (8013a6c <PulseHandlerTask+0x8c>)
 8013a18:	f00b fbac 	bl	801f174 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8013a1c:	4b11      	ldr	r3, [pc, #68]	; (8013a64 <PulseHandlerTask+0x84>)
 8013a1e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013a22:	4912      	ldr	r1, [pc, #72]	; (8013a6c <PulseHandlerTask+0x8c>)
 8013a24:	4618      	mov	r0, r3
 8013a26:	f000 fecf 	bl	80147c8 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	2100      	movs	r1, #0
 8013a2e:	2002      	movs	r0, #2
 8013a30:	f00a fe1c 	bl	801e66c <osThreadFlagsWait>
 8013a34:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	f003 0302 	and.w	r3, r3, #2
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d0e5      	beq.n	8013a0c <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8013a40:	4807      	ldr	r0, [pc, #28]	; (8013a60 <PulseHandlerTask+0x80>)
 8013a42:	f003 ff61 	bl	8017908 <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8013a46:	4805      	ldr	r0, [pc, #20]	; (8013a5c <PulseHandlerTask+0x7c>)
 8013a48:	f009 f9f8 	bl	801ce3c <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8013a4c:	4b06      	ldr	r3, [pc, #24]	; (8013a68 <PulseHandlerTask+0x88>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	4618      	mov	r0, r3
 8013a52:	f00b fc01 	bl	801f258 <osMessageQueueReset>
				break;
 8013a56:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8013a58:	e7c8      	b.n	80139ec <PulseHandlerTask+0xc>
 8013a5a:	bf00      	nop
 8013a5c:	200287c4 	.word	0x200287c4
 8013a60:	20028028 	.word	0x20028028
 8013a64:	20027bdc 	.word	0x20027bdc
 8013a68:	20027ac4 	.word	0x20027ac4
 8013a6c:	20028254 	.word	0x20028254

08013a70 <get3D_location>:
}

VIVEVars vive_vars;
struct LogMessage statusMessage;

void get3D_location(void *arguments){
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b084      	sub	sp, #16
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	73fb      	strb	r3, [r7, #15]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8013a7c:	4b30      	ldr	r3, [pc, #192]	; (8013b40 <get3D_location+0xd0>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2100      	movs	r1, #0
 8013a82:	4618      	mov	r0, r3
 8013a84:	f00b f9be 	bl	801ee04 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8013a88:	4b2e      	ldr	r3, [pc, #184]	; (8013b44 <get3D_location+0xd4>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	2100      	movs	r1, #0
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f00b f9b8 	bl	801ee04 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8013a94:	4b2c      	ldr	r3, [pc, #176]	; (8013b48 <get3D_location+0xd8>)
 8013a96:	6818      	ldr	r0, [r3, #0]
 8013a98:	f04f 33ff 	mov.w	r3, #4294967295
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	492b      	ldr	r1, [pc, #172]	; (8013b4c <get3D_location+0xdc>)
 8013aa0:	f00b fb68 	bl	801f174 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8013aa4:	4b29      	ldr	r3, [pc, #164]	; (8013b4c <get3D_location+0xdc>)
 8013aa6:	789b      	ldrb	r3, [r3, #2]
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d116      	bne.n	8013ada <get3D_location+0x6a>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8013aac:	4b26      	ldr	r3, [pc, #152]	; (8013b48 <get3D_location+0xd8>)
 8013aae:	6818      	ldr	r0, [r3, #0]
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	4925      	ldr	r1, [pc, #148]	; (8013b4c <get3D_location+0xdc>)
 8013ab6:	f00b fae9 	bl	801f08c <osMessageQueuePut>

		blinkActive = 1;
 8013aba:	2301      	movs	r3, #1
 8013abc:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8013abe:	4b24      	ldr	r3, [pc, #144]	; (8013b50 <get3D_location+0xe0>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	2102      	movs	r1, #2
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f00a fd1f 	bl	801e508 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8013aca:	4b1e      	ldr	r3, [pc, #120]	; (8013b44 <get3D_location+0xd4>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	f04f 31ff 	mov.w	r1, #4294967295
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f00b f996 	bl	801ee04 <osSemaphoreAcquire>
 8013ad8:	e006      	b.n	8013ae8 <get3D_location+0x78>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8013ada:	4b1b      	ldr	r3, [pc, #108]	; (8013b48 <get3D_location+0xd8>)
 8013adc:	6818      	ldr	r0, [r3, #0]
 8013ade:	2300      	movs	r3, #0
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	491a      	ldr	r1, [pc, #104]	; (8013b4c <get3D_location+0xdc>)
 8013ae4:	f00b fad2 	bl	801f08c <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013ae8:	4b1a      	ldr	r3, [pc, #104]	; (8013b54 <get3D_location+0xe4>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	f04f 31ff 	mov.w	r1, #4294967295
 8013af0:	4618      	mov	r0, r3
 8013af2:	f00b f987 	bl	801ee04 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8013af6:	4b18      	ldr	r3, [pc, #96]	; (8013b58 <get3D_location+0xe8>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	2101      	movs	r1, #1
 8013afc:	4618      	mov	r0, r3
 8013afe:	f00a fd03 	bl	801e508 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8013b02:	4b0f      	ldr	r3, [pc, #60]	; (8013b40 <get3D_location+0xd0>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f00b f97a 	bl	801ee04 <osSemaphoreAcquire>
#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8013b10:	4b10      	ldr	r3, [pc, #64]	; (8013b54 <get3D_location+0xe4>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f00b f9db 	bl	801eed0 <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8013b1a:	4b0f      	ldr	r3, [pc, #60]	; (8013b58 <get3D_location+0xe8>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2102      	movs	r1, #2
 8013b20:	4618      	mov	r0, r3
 8013b22:	f00a fcf1 	bl	801e508 <osThreadFlagsSet>

	if(blinkActive){
 8013b26:	7bfb      	ldrb	r3, [r7, #15]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d005      	beq.n	8013b38 <get3D_location+0xc8>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8013b2c:	4b08      	ldr	r3, [pc, #32]	; (8013b50 <get3D_location+0xe0>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2101      	movs	r1, #1
 8013b32:	4618      	mov	r0, r3
 8013b34:	f00a fce8 	bl	801e508 <osThreadFlagsSet>
	}

}
 8013b38:	bf00      	nop
 8013b3a:	3710      	adds	r7, #16
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}
 8013b40:	20028000 	.word	0x20028000
 8013b44:	20028008 	.word	0x20028008
 8013b48:	20027bd4 	.word	0x20027bd4
 8013b4c:	20028020 	.word	0x20028020
 8013b50:	20027bb0 	.word	0x20027bb0
 8013b54:	20027bc4 	.word	0x20027bc4
 8013b58:	2002800c 	.word	0x2002800c

08013b5c <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b084      	sub	sp, #16
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	460b      	mov	r3, r1
 8013b66:	807b      	strh	r3, [r7, #2]
 8013b68:	4613      	mov	r3, r2
 8013b6a:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8013b72:	723b      	strb	r3, [r7, #8]
 8013b74:	887b      	ldrh	r3, [r7, #2]
 8013b76:	817b      	strh	r3, [r7, #10]
 8013b78:	883b      	ldrh	r3, [r7, #0]
 8013b7a:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8013b7c:	4b05      	ldr	r3, [pc, #20]	; (8013b94 <enqueue_pulse+0x38>)
 8013b7e:	6818      	ldr	r0, [r3, #0]
 8013b80:	f107 0108 	add.w	r1, r7, #8
 8013b84:	2300      	movs	r3, #0
 8013b86:	2200      	movs	r2, #0
 8013b88:	f00b fa80 	bl	801f08c <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 8013b8c:	bf00      	nop
 8013b8e:	3710      	adds	r7, #16
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	20027ac4 	.word	0x20027ac4

08013b98 <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b086      	sub	sp, #24
 8013b9c:	af02      	add	r7, sp, #8
 8013b9e:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	60fb      	str	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
	osSemaphoreRelease(messageI2C_LockHandle);
#endif
	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8013ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ba8:	2100      	movs	r1, #0
 8013baa:	2001      	movs	r0, #1
 8013bac:	f00a fd5e 	bl	801e66c <osThreadFlagsWait>
 8013bb0:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	f003 0301 	and.w	r3, r3, #1
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d0f3      	beq.n	8013ba4 <InterProcessorTask+0xc>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8013bbc:	4b66      	ldr	r3, [pc, #408]	; (8013d58 <InterProcessorTask+0x1c0>)
 8013bbe:	4a67      	ldr	r2, [pc, #412]	; (8013d5c <InterProcessorTask+0x1c4>)
 8013bc0:	6811      	ldr	r1, [r2, #0]
 8013bc2:	6019      	str	r1, [r3, #0]
 8013bc4:	8892      	ldrh	r2, [r2, #4]
 8013bc6:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013bc8:	4b65      	ldr	r3, [pc, #404]	; (8013d60 <InterProcessorTask+0x1c8>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f00b f917 	bl	801ee04 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8013bd6:	bf00      	nop
 8013bd8:	2364      	movs	r3, #100	; 0x64
 8013bda:	9300      	str	r3, [sp, #0]
 8013bdc:	2306      	movs	r3, #6
 8013bde:	4a5e      	ldr	r2, [pc, #376]	; (8013d58 <InterProcessorTask+0x1c0>)
 8013be0:	21e6      	movs	r1, #230	; 0xe6
 8013be2:	4860      	ldr	r0, [pc, #384]	; (8013d64 <InterProcessorTask+0x1cc>)
 8013be4:	f004 fffa 	bl	8018bdc <HAL_I2C_Master_Transmit>
 8013be8:	4603      	mov	r3, r0
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d1f4      	bne.n	8013bd8 <InterProcessorTask+0x40>
			osDelay(100);
 8013bee:	2064      	movs	r0, #100	; 0x64
 8013bf0:	f00a fdd0 	bl	801e794 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8013bf4:	4b5a      	ldr	r3, [pc, #360]	; (8013d60 <InterProcessorTask+0x1c8>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f00b f969 	bl	801eed0 <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8013bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8013c02:	2100      	movs	r1, #0
 8013c04:	2006      	movs	r0, #6
 8013c06:	f00a fd31 	bl	801e66c <osThreadFlagsWait>
 8013c0a:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	f003 0304 	and.w	r3, r3, #4
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d079      	beq.n	8013d0a <InterProcessorTask+0x172>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013c16:	4b52      	ldr	r3, [pc, #328]	; (8013d60 <InterProcessorTask+0x1c8>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f00b f8f0 	bl	801ee04 <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8013c24:	e00e      	b.n	8013c44 <InterProcessorTask+0xac>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8013c26:	4b4e      	ldr	r3, [pc, #312]	; (8013d60 <InterProcessorTask+0x1c8>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f00b f950 	bl	801eed0 <osSemaphoreRelease>
 						osDelay(100);
 8013c30:	2064      	movs	r0, #100	; 0x64
 8013c32:	f00a fdaf 	bl	801e794 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013c36:	4b4a      	ldr	r3, [pc, #296]	; (8013d60 <InterProcessorTask+0x1c8>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f00b f8e0 	bl	801ee04 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8013c44:	2364      	movs	r3, #100	; 0x64
 8013c46:	9300      	str	r3, [sp, #0]
 8013c48:	2306      	movs	r3, #6
 8013c4a:	4a43      	ldr	r2, [pc, #268]	; (8013d58 <InterProcessorTask+0x1c0>)
 8013c4c:	21e6      	movs	r1, #230	; 0xe6
 8013c4e:	4845      	ldr	r0, [pc, #276]	; (8013d64 <InterProcessorTask+0x1cc>)
 8013c50:	f004 ffc4 	bl	8018bdc <HAL_I2C_Master_Transmit>
 8013c54:	4603      	mov	r3, r0
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d1e5      	bne.n	8013c26 <InterProcessorTask+0x8e>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8013c5a:	2008      	movs	r0, #8
 8013c5c:	f00a fcb6 	bl	801e5cc <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8013c60:	e00e      	b.n	8013c80 <InterProcessorTask+0xe8>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8013c62:	4b3f      	ldr	r3, [pc, #252]	; (8013d60 <InterProcessorTask+0x1c8>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	4618      	mov	r0, r3
 8013c68:	f00b f932 	bl	801eed0 <osSemaphoreRelease>
 						osDelay(100);
 8013c6c:	2064      	movs	r0, #100	; 0x64
 8013c6e:	f00a fd91 	bl	801e794 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013c72:	4b3b      	ldr	r3, [pc, #236]	; (8013d60 <InterProcessorTask+0x1c8>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	f04f 31ff 	mov.w	r1, #4294967295
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f00b f8c2 	bl	801ee04 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8013c80:	2358      	movs	r3, #88	; 0x58
 8013c82:	4a39      	ldr	r2, [pc, #228]	; (8013d68 <InterProcessorTask+0x1d0>)
 8013c84:	21e6      	movs	r1, #230	; 0xe6
 8013c86:	4837      	ldr	r0, [pc, #220]	; (8013d64 <InterProcessorTask+0x1cc>)
 8013c88:	f005 f992 	bl	8018fb0 <HAL_I2C_Master_Receive_IT>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d1e7      	bne.n	8013c62 <InterProcessorTask+0xca>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8013c92:	f04f 32ff 	mov.w	r2, #4294967295
 8013c96:	2100      	movs	r1, #0
 8013c98:	200a      	movs	r0, #10
 8013c9a:	f00a fce7 	bl	801e66c <osThreadFlagsWait>
 8013c9e:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8013ca0:	4b2f      	ldr	r3, [pc, #188]	; (8013d60 <InterProcessorTask+0x1c8>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f00b f913 	bl	801eed0 <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f003 0302 	and.w	r3, r3, #2
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d14e      	bne.n	8013d52 <InterProcessorTask+0x1ba>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8013cb4:	4b2c      	ldr	r3, [pc, #176]	; (8013d68 <InterProcessorTask+0x1d0>)
 8013cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013cb8:	4a2c      	ldr	r2, [pc, #176]	; (8013d6c <InterProcessorTask+0x1d4>)
 8013cba:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8013cbc:	4b2a      	ldr	r3, [pc, #168]	; (8013d68 <InterProcessorTask+0x1d0>)
 8013cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cc0:	4a2a      	ldr	r2, [pc, #168]	; (8013d6c <InterProcessorTask+0x1d4>)
 8013cc2:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	60bb      	str	r3, [r7, #8]
 8013cc8:	e01c      	b.n	8013d04 <InterProcessorTask+0x16c>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	00db      	lsls	r3, r3, #3
 8013cce:	4a26      	ldr	r2, [pc, #152]	; (8013d68 <InterProcessorTask+0x1d0>)
 8013cd0:	4413      	add	r3, r2
 8013cd2:	2208      	movs	r2, #8
 8013cd4:	4619      	mov	r1, r3
 8013cd6:	4825      	ldr	r0, [pc, #148]	; (8013d6c <InterProcessorTask+0x1d4>)
 8013cd8:	f012 ffa4 	bl	8026c24 <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	3305      	adds	r3, #5
 8013ce0:	00db      	lsls	r3, r3, #3
 8013ce2:	4a21      	ldr	r2, [pc, #132]	; (8013d68 <InterProcessorTask+0x1d0>)
 8013ce4:	4413      	add	r3, r2
 8013ce6:	2208      	movs	r2, #8
 8013ce8:	4619      	mov	r1, r3
 8013cea:	4821      	ldr	r0, [pc, #132]	; (8013d70 <InterProcessorTask+0x1d8>)
 8013cec:	f012 ff9a 	bl	8026c24 <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8013cf0:	4b20      	ldr	r3, [pc, #128]	; (8013d74 <InterProcessorTask+0x1dc>)
 8013cf2:	6818      	ldr	r0, [r3, #0]
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	491c      	ldr	r1, [pc, #112]	; (8013d6c <InterProcessorTask+0x1d4>)
 8013cfa:	f00b f9c7 	bl	801f08c <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	3301      	adds	r3, #1
 8013d02:	60bb      	str	r3, [r7, #8]
 8013d04:	68bb      	ldr	r3, [r7, #8]
 8013d06:	2b04      	cmp	r3, #4
 8013d08:	dddf      	ble.n	8013cca <InterProcessorTask+0x132>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	f003 0302 	and.w	r3, r3, #2
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	f43f af74 	beq.w	8013bfe <InterProcessorTask+0x66>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013d16:	4b12      	ldr	r3, [pc, #72]	; (8013d60 <InterProcessorTask+0x1c8>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	f04f 31ff 	mov.w	r1, #4294967295
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f00b f870 	bl	801ee04 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8013d24:	bf00      	nop
 8013d26:	2364      	movs	r3, #100	; 0x64
 8013d28:	9300      	str	r3, [sp, #0]
 8013d2a:	2306      	movs	r3, #6
 8013d2c:	4a12      	ldr	r2, [pc, #72]	; (8013d78 <InterProcessorTask+0x1e0>)
 8013d2e:	21e6      	movs	r1, #230	; 0xe6
 8013d30:	480c      	ldr	r0, [pc, #48]	; (8013d64 <InterProcessorTask+0x1cc>)
 8013d32:	f004 ff53 	bl	8018bdc <HAL_I2C_Master_Transmit>
 8013d36:	4603      	mov	r3, r0
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d1f4      	bne.n	8013d26 <InterProcessorTask+0x18e>
					osSemaphoreRelease(messageI2C_LockHandle);
 8013d3c:	4b08      	ldr	r3, [pc, #32]	; (8013d60 <InterProcessorTask+0x1c8>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f00b f8c5 	bl	801eed0 <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8013d46:	4b0b      	ldr	r3, [pc, #44]	; (8013d74 <InterProcessorTask+0x1dc>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f00b fa84 	bl	801f258 <osMessageQueueReset>

					break;
 8013d50:	e000      	b.n	8013d54 <InterProcessorTask+0x1bc>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8013d52:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8013d54:	e726      	b.n	8013ba4 <InterProcessorTask+0xc>
 8013d56:	bf00      	nop
 8013d58:	20028624 	.word	0x20028624
 8013d5c:	20027acc 	.word	0x20027acc
 8013d60:	20027bc4 	.word	0x20027bc4
 8013d64:	200281b8 	.word	0x200281b8
 8013d68:	200285cc 	.word	0x200285cc
 8013d6c:	2002862c 	.word	0x2002862c
 8013d70:	20028634 	.word	0x20028634
 8013d74:	20027bd0 	.word	0x20027bd0
 8013d78:	08028afc 	.word	0x08028afc

08013d7c <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b082      	sub	sp, #8
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8013d84:	4b06      	ldr	r3, [pc, #24]	; (8013da0 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	2110      	movs	r1, #16
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f00a fbbc 	bl	801e508 <osThreadFlagsSet>
	test_1 = 1;
 8013d90:	4b04      	ldr	r3, [pc, #16]	; (8013da4 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8013d92:	2201      	movs	r2, #1
 8013d94:	701a      	strb	r2, [r3, #0]
}
 8013d96:	bf00      	nop
 8013d98:	3708      	adds	r7, #8
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
 8013d9e:	bf00      	nop
 8013da0:	20028004 	.word	0x20028004
 8013da4:	20000b1b 	.word	0x20000b1b

08013da8 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8013db0:	4b04      	ldr	r3, [pc, #16]	; (8013dc4 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	2108      	movs	r1, #8
 8013db6:	4618      	mov	r0, r3
 8013db8:	f00a fba6 	bl	801e508 <osThreadFlagsSet>
}
 8013dbc:	bf00      	nop
 8013dbe:	3708      	adds	r7, #8
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}
 8013dc4:	20028004 	.word	0x20028004

08013dc8 <LL_AHB2_GRP1_EnableClock>:
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b085      	sub	sp, #20
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8013dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013dd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	4313      	orrs	r3, r2
 8013dde:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8013de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013de4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	4013      	ands	r3, r2
 8013dea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8013dec:	68fb      	ldr	r3, [r7, #12]
}
 8013dee:	bf00      	nop
 8013df0:	3714      	adds	r7, #20
 8013df2:	46bd      	mov	sp, r7
 8013df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df8:	4770      	bx	lr

08013dfa <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b082      	sub	sp, #8
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	4603      	mov	r3, r0
 8013e02:	71fb      	strb	r3, [r7, #7]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);

	osSemaphoreRelease(messageI2C_LockHandle);
#else
	BSP_LED_Init(LED_BLUE);
 8013e04:	2000      	movs	r0, #0
 8013e06:	f000 f8d1 	bl	8013fac <BSP_LED_Init>
	BSP_LED_Init(LED_GREEN);
 8013e0a:	2001      	movs	r0, #1
 8013e0c:	f000 f8ce 	bl	8013fac <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
 8013e10:	2002      	movs	r0, #2
 8013e12:	f000 f8cb 	bl	8013fac <BSP_LED_Init>
#endif
}
 8013e16:	bf00      	nop
 8013e18:	3708      	adds	r7, #8
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
	...

08013e20 <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b082      	sub	sp, #8
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 8013e28:	4b21      	ldr	r3, [pc, #132]	; (8013eb0 <FrontLightsSet+0x90>)
 8013e2a:	687a      	ldr	r2, [r7, #4]
 8013e2c:	6810      	ldr	r0, [r2, #0]
 8013e2e:	6851      	ldr	r1, [r2, #4]
 8013e30:	c303      	stmia	r3!, {r0, r1}
 8013e32:	7a12      	ldrb	r2, [r2, #8]
 8013e34:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f103 0209 	add.w	r2, r3, #9
 8013e3c:	4b1d      	ldr	r3, [pc, #116]	; (8013eb4 <FrontLightsSet+0x94>)
 8013e3e:	6810      	ldr	r0, [r2, #0]
 8013e40:	6851      	ldr	r1, [r2, #4]
 8013e42:	c303      	stmia	r3!, {r0, r1}
 8013e44:	7a12      	ldrb	r2, [r2, #8]
 8013e46:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
	osSemaphoreRelease(messageI2C_LockHandle);
#endif

#ifdef DONGLE_CODE
	    	if(led_left_PWM[LED_LEFT_TOP_R] > 0)
 8013e48:	4b19      	ldr	r3, [pc, #100]	; (8013eb0 <FrontLightsSet+0x90>)
 8013e4a:	79db      	ldrb	r3, [r3, #7]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d005      	beq.n	8013e5c <FrontLightsSet+0x3c>
	    	{
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8013e50:	2201      	movs	r2, #1
 8013e52:	2102      	movs	r1, #2
 8013e54:	4818      	ldr	r0, [pc, #96]	; (8013eb8 <FrontLightsSet+0x98>)
 8013e56:	f004 fde7 	bl	8018a28 <HAL_GPIO_WritePin>
 8013e5a:	e004      	b.n	8013e66 <FrontLightsSet+0x46>

	    	}
	    	else
			{
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	2102      	movs	r1, #2
 8013e60:	4815      	ldr	r0, [pc, #84]	; (8013eb8 <FrontLightsSet+0x98>)
 8013e62:	f004 fde1 	bl	8018a28 <HAL_GPIO_WritePin>
			}

	    	// if 1
	    	if (led_left_PWM[LED_LEFT_TOP_B] > 0)
 8013e66:	4b12      	ldr	r3, [pc, #72]	; (8013eb0 <FrontLightsSet+0x90>)
 8013e68:	789b      	ldrb	r3, [r3, #2]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d006      	beq.n	8013e7c <FrontLightsSet+0x5c>
	    	{
	    		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8013e6e:	2201      	movs	r2, #1
 8013e70:	2110      	movs	r1, #16
 8013e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013e76:	f004 fdd7 	bl	8018a28 <HAL_GPIO_WritePin>
 8013e7a:	e005      	b.n	8013e88 <FrontLightsSet+0x68>
			}
	    	else
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	2110      	movs	r1, #16
 8013e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013e84:	f004 fdd0 	bl	8018a28 <HAL_GPIO_WritePin>
			}

	    	//if 2
	    	if (led_left_PWM[LED_LEFT_TOP_G] > 0)
 8013e88:	4b09      	ldr	r3, [pc, #36]	; (8013eb0 <FrontLightsSet+0x90>)
 8013e8a:	78db      	ldrb	r3, [r3, #3]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d005      	beq.n	8013e9c <FrontLightsSet+0x7c>
	    	{
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8013e90:	2201      	movs	r2, #1
 8013e92:	2101      	movs	r1, #1
 8013e94:	4808      	ldr	r0, [pc, #32]	; (8013eb8 <FrontLightsSet+0x98>)
 8013e96:	f004 fdc7 	bl	8018a28 <HAL_GPIO_WritePin>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8013e9a:	e004      	b.n	8013ea6 <FrontLightsSet+0x86>
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	2102      	movs	r1, #2
 8013ea0:	4805      	ldr	r0, [pc, #20]	; (8013eb8 <FrontLightsSet+0x98>)
 8013ea2:	f004 fdc1 	bl	8018a28 <HAL_GPIO_WritePin>
}
 8013ea6:	bf00      	nop
 8013ea8:	3708      	adds	r7, #8
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	20000b1c 	.word	0x20000b1c
 8013eb4:	20000b28 	.word	0x20000b28
 8013eb8:	48000400 	.word	0x48000400

08013ebc <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b08a      	sub	sp, #40	; 0x28
 8013ec0:	af04      	add	r7, sp, #16
 8013ec2:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8013ec4:	2034      	movs	r0, #52	; 0x34
 8013ec6:	f7ff ff98 	bl	8013dfa <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8013eca:	2035      	movs	r0, #53	; 0x35
 8013ecc:	f7ff ff95 	bl	8013dfa <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 8013ed4:	2001      	movs	r0, #1
 8013ed6:	f00a fc5d 	bl	801e794 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 8013eda:	4b2f      	ldr	r3, [pc, #188]	; (8013f98 <ThreadFrontLightsTask+0xdc>)
 8013edc:	6818      	ldr	r0, [r3, #0]
 8013ede:	f107 010c 	add.w	r1, r7, #12
 8013ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	f00b f944 	bl	801f174 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 8013eec:	2300      	movs	r3, #0
 8013eee:	617b      	str	r3, [r7, #20]
 8013ef0:	e011      	b.n	8013f16 <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	b2db      	uxtb	r3, r3
 8013ef6:	f003 0301 	and.w	r3, r3, #1
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	425b      	negs	r3, r3
 8013efe:	b2d9      	uxtb	r1, r3
 8013f00:	4a26      	ldr	r2, [pc, #152]	; (8013f9c <ThreadFrontLightsTask+0xe0>)
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	4413      	add	r3, r2
 8013f06:	460a      	mov	r2, r1
 8013f08:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	085b      	lsrs	r3, r3, #1
 8013f0e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	3301      	adds	r3, #1
 8013f14:	617b      	str	r3, [r7, #20]
 8013f16:	697b      	ldr	r3, [r7, #20]
 8013f18:	2b08      	cmp	r3, #8
 8013f1a:	ddea      	ble.n	8013ef2 <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	613b      	str	r3, [r7, #16]
 8013f20:	e011      	b.n	8013f46 <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	b2db      	uxtb	r3, r3
 8013f26:	f003 0301 	and.w	r3, r3, #1
 8013f2a:	b2db      	uxtb	r3, r3
 8013f2c:	425b      	negs	r3, r3
 8013f2e:	b2d9      	uxtb	r1, r3
 8013f30:	4a1b      	ldr	r2, [pc, #108]	; (8013fa0 <ThreadFrontLightsTask+0xe4>)
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	4413      	add	r3, r2
 8013f36:	460a      	mov	r2, r1
 8013f38:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	085b      	lsrs	r3, r3, #1
 8013f3e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	3301      	adds	r3, #1
 8013f44:	613b      	str	r3, [r7, #16]
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	2b08      	cmp	r3, #8
 8013f4a:	ddea      	ble.n	8013f22 <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8013f4c:	4b15      	ldr	r3, [pc, #84]	; (8013fa4 <ThreadFrontLightsTask+0xe8>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	f04f 31ff 	mov.w	r1, #4294967295
 8013f54:	4618      	mov	r0, r3
 8013f56:	f00a ff55 	bl	801ee04 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8013f5a:	2364      	movs	r3, #100	; 0x64
 8013f5c:	9302      	str	r3, [sp, #8]
 8013f5e:	2309      	movs	r3, #9
 8013f60:	9301      	str	r3, [sp, #4]
 8013f62:	4b0e      	ldr	r3, [pc, #56]	; (8013f9c <ThreadFrontLightsTask+0xe0>)
 8013f64:	9300      	str	r3, [sp, #0]
 8013f66:	2301      	movs	r3, #1
 8013f68:	2216      	movs	r2, #22
 8013f6a:	2168      	movs	r1, #104	; 0x68
 8013f6c:	480e      	ldr	r0, [pc, #56]	; (8013fa8 <ThreadFrontLightsTask+0xec>)
 8013f6e:	f005 f88f 	bl	8019090 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8013f72:	2364      	movs	r3, #100	; 0x64
 8013f74:	9302      	str	r3, [sp, #8]
 8013f76:	2309      	movs	r3, #9
 8013f78:	9301      	str	r3, [sp, #4]
 8013f7a:	4b09      	ldr	r3, [pc, #36]	; (8013fa0 <ThreadFrontLightsTask+0xe4>)
 8013f7c:	9300      	str	r3, [sp, #0]
 8013f7e:	2301      	movs	r3, #1
 8013f80:	2216      	movs	r2, #22
 8013f82:	216a      	movs	r1, #106	; 0x6a
 8013f84:	4808      	ldr	r0, [pc, #32]	; (8013fa8 <ThreadFrontLightsTask+0xec>)
 8013f86:	f005 f883 	bl	8019090 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 8013f8a:	4b06      	ldr	r3, [pc, #24]	; (8013fa4 <ThreadFrontLightsTask+0xe8>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f00a ff9e 	bl	801eed0 <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 8013f94:	e79c      	b.n	8013ed0 <ThreadFrontLightsTask+0x14>
 8013f96:	bf00      	nop
 8013f98:	20027bcc 	.word	0x20027bcc
 8013f9c:	20000b1c 	.word	0x20000b1c
 8013fa0:	20000b28 	.word	0x20000b28
 8013fa4:	20027bc4 	.word	0x20027bc4
 8013fa8:	200281b8 	.word	0x200281b8

08013fac <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b088      	sub	sp, #32
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8013fb6:	f107 030c 	add.w	r3, r7, #12
 8013fba:	2200      	movs	r2, #0
 8013fbc:	601a      	str	r2, [r3, #0]
 8013fbe:	605a      	str	r2, [r3, #4]
 8013fc0:	609a      	str	r2, [r3, #8]
 8013fc2:	60da      	str	r2, [r3, #12]
 8013fc4:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8013fc6:	79fb      	ldrb	r3, [r7, #7]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d103      	bne.n	8013fd4 <BSP_LED_Init+0x28>
 8013fcc:	2001      	movs	r0, #1
 8013fce:	f7ff fefb 	bl	8013dc8 <LL_AHB2_GRP1_EnableClock>
 8013fd2:	e00c      	b.n	8013fee <BSP_LED_Init+0x42>
 8013fd4:	79fb      	ldrb	r3, [r7, #7]
 8013fd6:	2b01      	cmp	r3, #1
 8013fd8:	d103      	bne.n	8013fe2 <BSP_LED_Init+0x36>
 8013fda:	2002      	movs	r0, #2
 8013fdc:	f7ff fef4 	bl	8013dc8 <LL_AHB2_GRP1_EnableClock>
 8013fe0:	e005      	b.n	8013fee <BSP_LED_Init+0x42>
 8013fe2:	79fb      	ldrb	r3, [r7, #7]
 8013fe4:	2b02      	cmp	r3, #2
 8013fe6:	d102      	bne.n	8013fee <BSP_LED_Init+0x42>
 8013fe8:	2002      	movs	r0, #2
 8013fea:	f7ff feed 	bl	8013dc8 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN_DONGLE[Led];
 8013fee:	79fb      	ldrb	r3, [r7, #7]
 8013ff0:	4a11      	ldr	r2, [pc, #68]	; (8014038 <BSP_LED_Init+0x8c>)
 8013ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ff6:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8014000:	2302      	movs	r3, #2
 8014002:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT_DONGLE[Led], &gpioinitstruct);
 8014004:	79fb      	ldrb	r3, [r7, #7]
 8014006:	4a0d      	ldr	r2, [pc, #52]	; (801403c <BSP_LED_Init+0x90>)
 8014008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801400c:	f107 020c 	add.w	r2, r7, #12
 8014010:	4611      	mov	r1, r2
 8014012:	4618      	mov	r0, r3
 8014014:	f004 fb80 	bl	8018718 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led], GPIO_PIN_RESET);
 8014018:	79fb      	ldrb	r3, [r7, #7]
 801401a:	4a08      	ldr	r2, [pc, #32]	; (801403c <BSP_LED_Init+0x90>)
 801401c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014020:	79fb      	ldrb	r3, [r7, #7]
 8014022:	4a05      	ldr	r2, [pc, #20]	; (8014038 <BSP_LED_Init+0x8c>)
 8014024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014028:	2200      	movs	r2, #0
 801402a:	4619      	mov	r1, r3
 801402c:	f004 fcfc 	bl	8018a28 <HAL_GPIO_WritePin>
}
 8014030:	bf00      	nop
 8014032:	3720      	adds	r7, #32
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}
 8014038:	08028b04 	.word	0x08028b04
 801403c:	2000006c 	.word	0x2000006c

08014040 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	4603      	mov	r3, r0
 8014048:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led], GPIO_PIN_SET);
 801404a:	79fb      	ldrb	r3, [r7, #7]
 801404c:	4a07      	ldr	r2, [pc, #28]	; (801406c <BSP_LED_On+0x2c>)
 801404e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014052:	79fb      	ldrb	r3, [r7, #7]
 8014054:	4a06      	ldr	r2, [pc, #24]	; (8014070 <BSP_LED_On+0x30>)
 8014056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801405a:	2201      	movs	r2, #1
 801405c:	4619      	mov	r1, r3
 801405e:	f004 fce3 	bl	8018a28 <HAL_GPIO_WritePin>
}
 8014062:	bf00      	nop
 8014064:	3708      	adds	r7, #8
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop
 801406c:	2000006c 	.word	0x2000006c
 8014070:	08028b04 	.word	0x08028b04

08014074 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b082      	sub	sp, #8
 8014078:	af00      	add	r7, sp, #0
 801407a:	4603      	mov	r3, r0
 801407c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led], GPIO_PIN_RESET);
 801407e:	79fb      	ldrb	r3, [r7, #7]
 8014080:	4a07      	ldr	r2, [pc, #28]	; (80140a0 <BSP_LED_Off+0x2c>)
 8014082:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014086:	79fb      	ldrb	r3, [r7, #7]
 8014088:	4a06      	ldr	r2, [pc, #24]	; (80140a4 <BSP_LED_Off+0x30>)
 801408a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801408e:	2200      	movs	r2, #0
 8014090:	4619      	mov	r1, r3
 8014092:	f004 fcc9 	bl	8018a28 <HAL_GPIO_WritePin>
}
 8014096:	bf00      	nop
 8014098:	3708      	adds	r7, #8
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}
 801409e:	bf00      	nop
 80140a0:	2000006c 	.word	0x2000006c
 80140a4:	08028b04 	.word	0x08028b04

080140a8 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b082      	sub	sp, #8
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	4603      	mov	r3, r0
 80140b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led]);
 80140b2:	79fb      	ldrb	r3, [r7, #7]
 80140b4:	4a06      	ldr	r2, [pc, #24]	; (80140d0 <BSP_LED_Toggle+0x28>)
 80140b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80140ba:	79fb      	ldrb	r3, [r7, #7]
 80140bc:	4a05      	ldr	r2, [pc, #20]	; (80140d4 <BSP_LED_Toggle+0x2c>)
 80140be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140c2:	4619      	mov	r1, r3
 80140c4:	f004 fcc8 	bl	8018a58 <HAL_GPIO_TogglePin>
}
 80140c8:	bf00      	nop
 80140ca:	3708      	adds	r7, #8
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	2000006c 	.word	0x2000006c
 80140d4:	08028b04 	.word	0x08028b04

080140d8 <LL_RCC_LSE_SetDriveCapability>:
{
 80140d8:	b480      	push	{r7}
 80140da:	b083      	sub	sp, #12
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80140e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80140e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140e8:	f023 0218 	bic.w	r2, r3, #24
 80140ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	4313      	orrs	r3, r2
 80140f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80140f8:	bf00      	nop
 80140fa:	370c      	adds	r7, #12
 80140fc:	46bd      	mov	sp, r7
 80140fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014102:	4770      	bx	lr

08014104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8014108:	f002 f836 	bl	8016178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801410c:	f000 f81c 	bl	8014148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8014110:	f7fe fc9a 	bl	8012a48 <MX_GPIO_Init>
  MX_DMA_Init();
 8014114:	f7fd fc37 	bl	8011986 <MX_DMA_Init>
  MX_ADC1_Init();
 8014118:	f7fc fe92 	bl	8010e40 <MX_ADC1_Init>
  MX_RTC_Init();
 801411c:	f000 fe76 	bl	8014e0c <MX_RTC_Init>
  MX_TIM2_Init();
 8014120:	f001 fad4 	bl	80156cc <MX_TIM2_Init>
  MX_RF_Init();
 8014124:	f000 fe5a 	bl	8014ddc <MX_RF_Init>
  MX_I2C1_Init();
 8014128:	f7ff fb2c 	bl	8013784 <MX_I2C1_Init>
  MX_COMP1_Init();
 801412c:	f7fd fb18 	bl	8011760 <MX_COMP1_Init>
  MX_TIM16_Init();
 8014130:	f001 fb42 	bl	80157b8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 8014134:	f001 ff5e 	bl	8015ff4 <MX_TSC_Init>

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8014138:	f00a f8d2 	bl	801e2e0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 801413c:	f7fd f8b0 	bl	80112a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8014140:	f00a f902 	bl	801e348 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8014144:	e7fe      	b.n	8014144 <main+0x40>
	...

08014148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b0ae      	sub	sp, #184	; 0xb8
 801414c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801414e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014152:	2248      	movs	r2, #72	; 0x48
 8014154:	2100      	movs	r1, #0
 8014156:	4618      	mov	r0, r3
 8014158:	f012 fd6f 	bl	8026c3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801415c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014160:	2200      	movs	r2, #0
 8014162:	601a      	str	r2, [r3, #0]
 8014164:	605a      	str	r2, [r3, #4]
 8014166:	609a      	str	r2, [r3, #8]
 8014168:	60da      	str	r2, [r3, #12]
 801416a:	611a      	str	r2, [r3, #16]
 801416c:	615a      	str	r2, [r3, #20]
 801416e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014170:	1d3b      	adds	r3, r7, #4
 8014172:	2250      	movs	r2, #80	; 0x50
 8014174:	2100      	movs	r1, #0
 8014176:	4618      	mov	r0, r3
 8014178:	f012 fd5f 	bl	8026c3a <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 801417c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014180:	68db      	ldr	r3, [r3, #12]
 8014182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801418a:	f043 0310 	orr.w	r3, r3, #16
 801418e:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8014190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014194:	68db      	ldr	r3, [r3, #12]
 8014196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801419a:	f043 0303 	orr.w	r3, r3, #3
 801419e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80141a0:	2000      	movs	r0, #0
 80141a2:	f7ff ff99 	bl	80140d8 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80141a6:	4b39      	ldr	r3, [pc, #228]	; (801428c <SystemClock_Config+0x144>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80141ae:	4a37      	ldr	r2, [pc, #220]	; (801428c <SystemClock_Config+0x144>)
 80141b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80141b4:	6013      	str	r3, [r2, #0]
 80141b6:	4b35      	ldr	r3, [pc, #212]	; (801428c <SystemClock_Config+0x144>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80141be:	603b      	str	r3, [r7, #0]
 80141c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80141c2:	230f      	movs	r3, #15
 80141c4:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80141c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80141ca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80141cc:	2301      	movs	r3, #1
 80141ce:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80141d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80141d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80141d6:	2340      	movs	r3, #64	; 0x40
 80141d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80141dc:	2305      	movs	r3, #5
 80141de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80141e2:	2300      	movs	r3, #0
 80141e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80141e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80141ec:	4618      	mov	r0, r3
 80141ee:	f007 f837 	bl	801b260 <HAL_RCC_OscConfig>
 80141f2:	4603      	mov	r3, r0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d001      	beq.n	80141fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80141f8:	f000 f85c 	bl	80142b4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80141fc:	236f      	movs	r3, #111	; 0x6f
 80141fe:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8014200:	2302      	movs	r3, #2
 8014202:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8014204:	2300      	movs	r3, #0
 8014206:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8014208:	2300      	movs	r3, #0
 801420a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801420c:	2300      	movs	r3, #0
 801420e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8014210:	2300      	movs	r3, #0
 8014212:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8014214:	2300      	movs	r3, #0
 8014216:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8014218:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801421c:	2101      	movs	r1, #1
 801421e:	4618      	mov	r0, r3
 8014220:	f007 fb7c 	bl	801b91c <HAL_RCC_ClockConfig>
 8014224:	4603      	mov	r3, r0
 8014226:	2b00      	cmp	r3, #0
 8014228:	d001      	beq.n	801422e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 801422a:	f000 f843 	bl	80142b4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 801422e:	f643 4304 	movw	r3, #15364	; 0x3c04
 8014232:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8014234:	2306      	movs	r3, #6
 8014236:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8014238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801423c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 801423e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014242:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8014244:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8014248:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 801424a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801424e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8014250:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8014254:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8014256:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801425a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 801425c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014260:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8014262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014266:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8014268:	2302      	movs	r3, #2
 801426a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 801426c:	2300      	movs	r3, #0
 801426e:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014270:	1d3b      	adds	r3, r7, #4
 8014272:	4618      	mov	r0, r3
 8014274:	f007 ffa9 	bl	801c1ca <HAL_RCCEx_PeriphCLKConfig>
 8014278:	4603      	mov	r3, r0
 801427a:	2b00      	cmp	r3, #0
 801427c:	d001      	beq.n	8014282 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 801427e:	f000 f819 	bl	80142b4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8014282:	bf00      	nop
 8014284:	37b8      	adds	r7, #184	; 0xb8
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	58000400 	.word	0x58000400

08014290 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	4a04      	ldr	r2, [pc, #16]	; (80142b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801429e:	4293      	cmp	r3, r2
 80142a0:	d101      	bne.n	80142a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80142a2:	f001 ff89 	bl	80161b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80142a6:	bf00      	nop
 80142a8:	3708      	adds	r7, #8
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}
 80142ae:	bf00      	nop
 80142b0:	40012c00 	.word	0x40012c00

080142b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80142b4:	b480      	push	{r7}
 80142b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80142b8:	bf00      	nop
 80142ba:	46bd      	mov	sp, r7
 80142bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c0:	4770      	bx	lr
	...

080142c4 <MasterThreadTask>:

uint8_t logEnabled = 0;
//struct SystemStatus systemStatus = { 0 };
uint32_t startTime = 0;

void MasterThreadTask(void *argument) {
 80142c4:	b590      	push	{r4, r7, lr}
 80142c6:	b085      	sub	sp, #20
 80142c8:	af02      	add	r7, sp, #8
 80142ca:	6078      	str	r0, [r7, #4]
#endif

	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 80142cc:	4b31      	ldr	r3, [pc, #196]	; (8014394 <MasterThreadTask+0xd0>)
 80142ce:	6818      	ldr	r0, [r3, #0]
 80142d0:	f04f 33ff 	mov.w	r3, #4294967295
 80142d4:	2200      	movs	r2, #0
 80142d6:	4930      	ldr	r1, [pc, #192]	; (8014398 <MasterThreadTask+0xd4>)
 80142d8:	f00a ff4c 	bl	801f174 <osMessageQueueGet>
#endif



		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 80142dc:	4b2f      	ldr	r3, [pc, #188]	; (801439c <MasterThreadTask+0xd8>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	4618      	mov	r0, r3
 80142e2:	f00a ffb9 	bl	801f258 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 80142e6:	4b2d      	ldr	r3, [pc, #180]	; (801439c <MasterThreadTask+0xd8>)
 80142e8:	6818      	ldr	r0, [r3, #0]
 80142ea:	2300      	movs	r3, #0
 80142ec:	2200      	movs	r2, #0
 80142ee:	492c      	ldr	r1, [pc, #176]	; (80143a0 <MasterThreadTask+0xdc>)
 80142f0:	f00a fecc 	bl	801f08c <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (togLogMessageReceived.logStatus == ENABLE_LOG) {
 80142f4:	4b28      	ldr	r3, [pc, #160]	; (8014398 <MasterThreadTask+0xd4>)
 80142f6:	785b      	ldrb	r3, [r3, #1]
 80142f8:	2b01      	cmp	r3, #1
 80142fa:	d13c      	bne.n	8014376 <MasterThreadTask+0xb2>
			logEnabled = 1;
 80142fc:	4b29      	ldr	r3, [pc, #164]	; (80143a4 <MasterThreadTask+0xe0>)
 80142fe:	2201      	movs	r2, #1
 8014300:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8014302:	4b29      	ldr	r3, [pc, #164]	; (80143a8 <MasterThreadTask+0xe4>)
 8014304:	4a24      	ldr	r2, [pc, #144]	; (8014398 <MasterThreadTask+0xd4>)
 8014306:	6811      	ldr	r1, [r2, #0]
 8014308:	6019      	str	r1, [r3, #0]
 801430a:	8892      	ldrh	r2, [r2, #4]
 801430c:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 801430e:	f000 f8d7 	bl	80144c0 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 8014312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014316:	f00a fa3d 	bl	801e794 <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 801431a:	f001 ff5f 	bl	80161dc <HAL_GetTick>
 801431e:	4602      	mov	r2, r0
 8014320:	4b22      	ldr	r3, [pc, #136]	; (80143ac <MasterThreadTask+0xe8>)
 8014322:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 8014324:	f000 f84e 	bl	80143c4 <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 8014328:	4b21      	ldr	r3, [pc, #132]	; (80143b0 <MasterThreadTask+0xec>)
 801432a:	9300      	str	r3, [sp, #0]
 801432c:	4b21      	ldr	r3, [pc, #132]	; (80143b4 <MasterThreadTask+0xf0>)
 801432e:	4a22      	ldr	r2, [pc, #136]	; (80143b8 <MasterThreadTask+0xf4>)
 8014330:	4922      	ldr	r1, [pc, #136]	; (80143bc <MasterThreadTask+0xf8>)
 8014332:	4823      	ldr	r0, [pc, #140]	; (80143c0 <MasterThreadTask+0xfc>)
 8014334:	f000 f94a 	bl	80145cc <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 8014338:	4821      	ldr	r0, [pc, #132]	; (80143c0 <MasterThreadTask+0xfc>)
 801433a:	f011 f99b 	bl	8025674 <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 801433e:	4b15      	ldr	r3, [pc, #84]	; (8014394 <MasterThreadTask+0xd0>)
 8014340:	6818      	ldr	r0, [r3, #0]
 8014342:	2300      	movs	r3, #0
 8014344:	2200      	movs	r2, #0
 8014346:	4914      	ldr	r1, [pc, #80]	; (8014398 <MasterThreadTask+0xd4>)
 8014348:	f00a ff14 	bl	801f174 <osMessageQueueGet>
 801434c:	4603      	mov	r3, r0
 801434e:	2b00      	cmp	r3, #0
 8014350:	d106      	bne.n	8014360 <MasterThreadTask+0x9c>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8014352:	4b11      	ldr	r3, [pc, #68]	; (8014398 <MasterThreadTask+0xd4>)
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d102      	bne.n	8014360 <MasterThreadTask+0x9c>

						masterExitRoutine();
 801435a:	f000 f901 	bl	8014560 <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 801435e:	e017      	b.n	8014390 <MasterThreadTask+0xcc>
					}
				}

				// add delay to wait for next transmission period
				osDelay(PACKET_SEND_PERIOD - (HAL_GetTick() - startTime));
 8014360:	4b12      	ldr	r3, [pc, #72]	; (80143ac <MasterThreadTask+0xe8>)
 8014362:	681c      	ldr	r4, [r3, #0]
 8014364:	f001 ff3a 	bl	80161dc <HAL_GetTick>
 8014368:	4603      	mov	r3, r0
 801436a:	1ae3      	subs	r3, r4, r3
 801436c:	3364      	adds	r3, #100	; 0x64
 801436e:	4618      	mov	r0, r3
 8014370:	f00a fa10 	bl	801e794 <osDelay>
				startTime = HAL_GetTick();
 8014374:	e7d1      	b.n	801431a <MasterThreadTask+0x56>

			}
		} else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 8014376:	4b0b      	ldr	r3, [pc, #44]	; (80143a4 <MasterThreadTask+0xe0>)
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	2b01      	cmp	r3, #1
 801437c:	d1a6      	bne.n	80142cc <MasterThreadTask+0x8>
 801437e:	4b06      	ldr	r3, [pc, #24]	; (8014398 <MasterThreadTask+0xd4>)
 8014380:	785b      	ldrb	r3, [r3, #1]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d1a2      	bne.n	80142cc <MasterThreadTask+0x8>
			logEnabled = 0;
 8014386:	4b07      	ldr	r3, [pc, #28]	; (80143a4 <MasterThreadTask+0xe0>)
 8014388:	2200      	movs	r2, #0
 801438a:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 801438c:	f000 f8e8 	bl	8014560 <masterExitRoutine>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8014390:	e79c      	b.n	80142cc <MasterThreadTask+0x8>
 8014392:	bf00      	nop
 8014394:	20027ff8 	.word	0x20027ff8
 8014398:	20027acc 	.word	0x20027acc
 801439c:	20027bd4 	.word	0x20027bd4
 80143a0:	08028b0c 	.word	0x08028b0c
 80143a4:	20000b31 	.word	0x20000b31
 80143a8:	20027ba4 	.word	0x20027ba4
 80143ac:	20000b34 	.word	0x20000b34
 80143b0:	200286b0 	.word	0x200286b0
 80143b4:	200286c8 	.word	0x200286c8
 80143b8:	20028704 	.word	0x20028704
 80143bc:	20028644 	.word	0x20028644
 80143c0:	20027ad8 	.word	0x20027ad8

080143c4 <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 80143c4:	b5b0      	push	{r4, r5, r7, lr}
 80143c6:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80143c8:	4b30      	ldr	r3, [pc, #192]	; (801448c <grabSensorData+0xc8>)
 80143ca:	789b      	ldrb	r3, [r3, #2]
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d111      	bne.n	80143f4 <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 80143d0:	4b2f      	ldr	r3, [pc, #188]	; (8014490 <grabSensorData+0xcc>)
 80143d2:	6818      	ldr	r0, [r3, #0]
 80143d4:	2300      	movs	r3, #0
 80143d6:	2200      	movs	r2, #0
 80143d8:	492e      	ldr	r1, [pc, #184]	; (8014494 <grabSensorData+0xd0>)
 80143da:	f00a fecb 	bl	801f174 <osMessageQueueGet>
 80143de:	4603      	mov	r3, r0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d007      	beq.n	80143f4 <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 80143e4:	4a2b      	ldr	r2, [pc, #172]	; (8014494 <grabSensorData+0xd0>)
 80143e6:	4b2c      	ldr	r3, [pc, #176]	; (8014498 <grabSensorData+0xd4>)
 80143e8:	4610      	mov	r0, r2
 80143ea:	4619      	mov	r1, r3
 80143ec:	236c      	movs	r3, #108	; 0x6c
 80143ee:	461a      	mov	r2, r3
 80143f0:	f012 fc18 	bl	8026c24 <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 80143f4:	4b25      	ldr	r3, [pc, #148]	; (801448c <grabSensorData+0xc8>)
 80143f6:	78db      	ldrb	r3, [r3, #3]
 80143f8:	2b01      	cmp	r3, #1
 80143fa:	d113      	bne.n	8014424 <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 80143fc:	4b27      	ldr	r3, [pc, #156]	; (801449c <grabSensorData+0xd8>)
 80143fe:	6818      	ldr	r0, [r3, #0]
 8014400:	2300      	movs	r3, #0
 8014402:	2200      	movs	r2, #0
 8014404:	4926      	ldr	r1, [pc, #152]	; (80144a0 <grabSensorData+0xdc>)
 8014406:	f00a feb5 	bl	801f174 <osMessageQueueGet>
 801440a:	4603      	mov	r3, r0
 801440c:	2b00      	cmp	r3, #0
 801440e:	d009      	beq.n	8014424 <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 8014410:	4a23      	ldr	r2, [pc, #140]	; (80144a0 <grabSensorData+0xdc>)
 8014412:	4b24      	ldr	r3, [pc, #144]	; (80144a4 <grabSensorData+0xe0>)
 8014414:	4614      	mov	r4, r2
 8014416:	461d      	mov	r5, r3
 8014418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801441a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801441c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014420:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 8014424:	4b19      	ldr	r3, [pc, #100]	; (801448c <grabSensorData+0xc8>)
 8014426:	795b      	ldrb	r3, [r3, #5]
 8014428:	2b01      	cmp	r3, #1
 801442a:	d113      	bne.n	8014454 <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 801442c:	4b1e      	ldr	r3, [pc, #120]	; (80144a8 <grabSensorData+0xe4>)
 801442e:	6818      	ldr	r0, [r3, #0]
 8014430:	2300      	movs	r3, #0
 8014432:	2200      	movs	r2, #0
 8014434:	491d      	ldr	r1, [pc, #116]	; (80144ac <grabSensorData+0xe8>)
 8014436:	f00a fe9d 	bl	801f174 <osMessageQueueGet>
 801443a:	4603      	mov	r3, r0
 801443c:	2b00      	cmp	r3, #0
 801443e:	d009      	beq.n	8014454 <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 8014440:	4a1a      	ldr	r2, [pc, #104]	; (80144ac <grabSensorData+0xe8>)
 8014442:	4b1b      	ldr	r3, [pc, #108]	; (80144b0 <grabSensorData+0xec>)
 8014444:	4614      	mov	r4, r2
 8014446:	461d      	mov	r5, r3
 8014448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801444a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801444c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014450:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8014454:	4b0d      	ldr	r3, [pc, #52]	; (801448c <grabSensorData+0xc8>)
 8014456:	791b      	ldrb	r3, [r3, #4]
 8014458:	2b01      	cmp	r3, #1
 801445a:	d115      	bne.n	8014488 <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 801445c:	4b15      	ldr	r3, [pc, #84]	; (80144b4 <grabSensorData+0xf0>)
 801445e:	6818      	ldr	r0, [r3, #0]
 8014460:	2300      	movs	r3, #0
 8014462:	2200      	movs	r2, #0
 8014464:	4914      	ldr	r1, [pc, #80]	; (80144b8 <grabSensorData+0xf4>)
 8014466:	f00a fe85 	bl	801f174 <osMessageQueueGet>
 801446a:	4603      	mov	r3, r0
 801446c:	2b00      	cmp	r3, #0
 801446e:	d00b      	beq.n	8014488 <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 8014470:	4a11      	ldr	r2, [pc, #68]	; (80144b8 <grabSensorData+0xf4>)
 8014472:	4b12      	ldr	r3, [pc, #72]	; (80144bc <grabSensorData+0xf8>)
 8014474:	4614      	mov	r4, r2
 8014476:	461d      	mov	r5, r3
 8014478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801447a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801447c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801447e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014480:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014484:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 8014488:	bf00      	nop
 801448a:	bdb0      	pop	{r4, r5, r7, pc}
 801448c:	20027ba4 	.word	0x20027ba4
 8014490:	20028014 	.word	0x20028014
 8014494:	20028644 	.word	0x20028644
 8014498:	08028b14 	.word	0x08028b14
 801449c:	20027bd0 	.word	0x20027bd0
 80144a0:	20028704 	.word	0x20028704
 80144a4:	08028b80 	.word	0x08028b80
 80144a8:	20027ac8 	.word	0x20027ac8
 80144ac:	200286b0 	.word	0x200286b0
 80144b0:	08028bc0 	.word	0x08028bc0
 80144b4:	20027bc8 	.word	0x20027bc8
 80144b8:	200286c8 	.word	0x200286c8
 80144bc:	08028b98 	.word	0x08028b98

080144c0 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 80144c0:	b580      	push	{r7, lr}
 80144c2:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80144c4:	4b1e      	ldr	r3, [pc, #120]	; (8014540 <masterEnterRoutine+0x80>)
 80144c6:	789b      	ldrb	r3, [r3, #2]
 80144c8:	2b01      	cmp	r3, #1
 80144ca:	d105      	bne.n	80144d8 <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 80144cc:	4b1d      	ldr	r3, [pc, #116]	; (8014544 <masterEnterRoutine+0x84>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	2101      	movs	r1, #1
 80144d2:	4618      	mov	r0, r3
 80144d4:	f00a f818 	bl	801e508 <osThreadFlagsSet>
	}

	if (togLogMessageReceived.positionEnabled == SENSOR_ENABLE) {
 80144d8:	4b1b      	ldr	r3, [pc, #108]	; (8014548 <masterEnterRoutine+0x88>)
 80144da:	795b      	ldrb	r3, [r3, #5]
 80144dc:	2b01      	cmp	r3, #1
 80144de:	d118      	bne.n	8014512 <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 80144e0:	4b1a      	ldr	r3, [pc, #104]	; (801454c <masterEnterRoutine+0x8c>)
 80144e2:	6818      	ldr	r0, [r3, #0]
 80144e4:	f04f 33ff 	mov.w	r3, #4294967295
 80144e8:	2200      	movs	r2, #0
 80144ea:	4919      	ldr	r1, [pc, #100]	; (8014550 <masterEnterRoutine+0x90>)
 80144ec:	f00a fe42 	bl	801f174 <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 80144f0:	4b17      	ldr	r3, [pc, #92]	; (8014550 <masterEnterRoutine+0x90>)
 80144f2:	2201      	movs	r2, #1
 80144f4:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 80144f6:	4b15      	ldr	r3, [pc, #84]	; (801454c <masterEnterRoutine+0x8c>)
 80144f8:	6818      	ldr	r0, [r3, #0]
 80144fa:	2300      	movs	r3, #0
 80144fc:	2200      	movs	r2, #0
 80144fe:	4914      	ldr	r1, [pc, #80]	; (8014550 <masterEnterRoutine+0x90>)
 8014500:	f00a fdc4 	bl	801f08c <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 8014504:	4b13      	ldr	r3, [pc, #76]	; (8014554 <masterEnterRoutine+0x94>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 801450c:	4618      	mov	r0, r3
 801450e:	f00a fa09 	bl	801e924 <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8014512:	4b0b      	ldr	r3, [pc, #44]	; (8014540 <masterEnterRoutine+0x80>)
 8014514:	78db      	ldrb	r3, [r3, #3]
 8014516:	2b01      	cmp	r3, #1
 8014518:	d105      	bne.n	8014526 <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 801451a:	4b0f      	ldr	r3, [pc, #60]	; (8014558 <masterEnterRoutine+0x98>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	2101      	movs	r1, #1
 8014520:	4618      	mov	r0, r3
 8014522:	f009 fff1 	bl	801e508 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8014526:	4b06      	ldr	r3, [pc, #24]	; (8014540 <masterEnterRoutine+0x80>)
 8014528:	791b      	ldrb	r3, [r3, #4]
 801452a:	2b01      	cmp	r3, #1
 801452c:	d105      	bne.n	801453a <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 801452e:	4b0b      	ldr	r3, [pc, #44]	; (801455c <masterEnterRoutine+0x9c>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	2101      	movs	r1, #1
 8014534:	4618      	mov	r0, r3
 8014536:	f009 ffe7 	bl	801e508 <osThreadFlagsSet>
	}
}
 801453a:	bf00      	nop
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	20027ba4 	.word	0x20027ba4
 8014544:	20027bb0 	.word	0x20027bb0
 8014548:	20027acc 	.word	0x20027acc
 801454c:	20027bd4 	.word	0x20027bd4
 8014550:	20028020 	.word	0x20028020
 8014554:	20027bb4 	.word	0x20027bb4
 8014558:	20028004 	.word	0x20028004
 801455c:	20028018 	.word	0x20028018

08014560 <masterExitRoutine>:

void masterExitRoutine(void) {
 8014560:	b580      	push	{r7, lr}
 8014562:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8014564:	4b14      	ldr	r3, [pc, #80]	; (80145b8 <masterExitRoutine+0x58>)
 8014566:	789b      	ldrb	r3, [r3, #2]
 8014568:	2b01      	cmp	r3, #1
 801456a:	d105      	bne.n	8014578 <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 801456c:	4b13      	ldr	r3, [pc, #76]	; (80145bc <masterExitRoutine+0x5c>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	2102      	movs	r1, #2
 8014572:	4618      	mov	r0, r3
 8014574:	f009 ffc8 	bl	801e508 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8014578:	4b0f      	ldr	r3, [pc, #60]	; (80145b8 <masterExitRoutine+0x58>)
 801457a:	795b      	ldrb	r3, [r3, #5]
 801457c:	2b01      	cmp	r3, #1
 801457e:	d104      	bne.n	801458a <masterExitRoutine+0x2a>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 8014580:	4b0f      	ldr	r3, [pc, #60]	; (80145c0 <masterExitRoutine+0x60>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	4618      	mov	r0, r3
 8014586:	f00a fa0d 	bl	801e9a4 <osTimerStop>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 801458a:	4b0b      	ldr	r3, [pc, #44]	; (80145b8 <masterExitRoutine+0x58>)
 801458c:	78db      	ldrb	r3, [r3, #3]
 801458e:	2b01      	cmp	r3, #1
 8014590:	d105      	bne.n	801459e <masterExitRoutine+0x3e>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 8014592:	4b0c      	ldr	r3, [pc, #48]	; (80145c4 <masterExitRoutine+0x64>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	2102      	movs	r1, #2
 8014598:	4618      	mov	r0, r3
 801459a:	f009 ffb5 	bl	801e508 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 801459e:	4b06      	ldr	r3, [pc, #24]	; (80145b8 <masterExitRoutine+0x58>)
 80145a0:	791b      	ldrb	r3, [r3, #4]
 80145a2:	2b01      	cmp	r3, #1
 80145a4:	d105      	bne.n	80145b2 <masterExitRoutine+0x52>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 80145a6:	4b08      	ldr	r3, [pc, #32]	; (80145c8 <masterExitRoutine+0x68>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	2102      	movs	r1, #2
 80145ac:	4618      	mov	r0, r3
 80145ae:	f009 ffab 	bl	801e508 <osThreadFlagsSet>
	}

}
 80145b2:	bf00      	nop
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	20027ba4 	.word	0x20027ba4
 80145bc:	20027bb0 	.word	0x20027bb0
 80145c0:	20027bb4 	.word	0x20027bb4
 80145c4:	20028004 	.word	0x20028004
 80145c8:	20028018 	.word	0x20028018

080145cc <packetizeData>:



void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	607a      	str	r2, [r7, #4]
 80145d8:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 80145da:	f001 fdff 	bl	80161dc <HAL_GetTick>
 80145de:	4602      	mov	r2, r0
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// get epoch time from RTC
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 80145e6:	2200      	movs	r2, #0
 80145e8:	4917      	ldr	r1, [pc, #92]	; (8014648 <packetizeData+0x7c>)
 80145ea:	4818      	ldr	r0, [pc, #96]	; (801464c <packetizeData+0x80>)
 80145ec:	f008 f9d5 	bl	801c99a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 80145f0:	2200      	movs	r2, #0
 80145f2:	4917      	ldr	r1, [pc, #92]	; (8014650 <packetizeData+0x84>)
 80145f4:	4815      	ldr	r0, [pc, #84]	; (801464c <packetizeData+0x80>)
 80145f6:	f008 fada 	bl	801cbae <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 80145fa:	4915      	ldr	r1, [pc, #84]	; (8014650 <packetizeData+0x84>)
 80145fc:	4812      	ldr	r0, [pc, #72]	; (8014648 <packetizeData+0x7c>)
 80145fe:	f000 fc35 	bl	8014e6c <RTC_ToEpoch>
 8014602:	4602      	mov	r2, r0
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	226c      	movs	r2, #108	; 0x6c
 801460e:	68b9      	ldr	r1, [r7, #8]
 8014610:	4618      	mov	r0, r3
 8014612:	f012 fb07 	bl	8026c24 <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	336c      	adds	r3, #108	; 0x6c
 801461a:	2218      	movs	r2, #24
 801461c:	6879      	ldr	r1, [r7, #4]
 801461e:	4618      	mov	r0, r3
 8014620:	f012 fb00 	bl	8026c24 <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	3384      	adds	r3, #132	; 0x84
 8014628:	2228      	movs	r2, #40	; 0x28
 801462a:	6839      	ldr	r1, [r7, #0]
 801462c:	4618      	mov	r0, r3
 801462e:	f012 faf9 	bl	8026c24 <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	33ac      	adds	r3, #172	; 0xac
 8014636:	2218      	movs	r2, #24
 8014638:	69b9      	ldr	r1, [r7, #24]
 801463a:	4618      	mov	r0, r3
 801463c:	f012 faf2 	bl	8026c24 <memcpy>
}
 8014640:	bf00      	nop
 8014642:	3710      	adds	r7, #16
 8014644:	46bd      	mov	sp, r7
 8014646:	bd80      	pop	{r7, pc}
 8014648:	200286f0 	.word	0x200286f0
 801464c:	20028720 	.word	0x20028720
 8014650:	2002871c 	.word	0x2002871c

08014654 <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 8014654:	b480      	push	{r7}
 8014656:	b083      	sub	sp, #12
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014662:	2b0f      	cmp	r3, #15
 8014664:	d80f      	bhi.n	8014686 <vector_push+0x32>
    	self->items[self->count++] = *item;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801466a:	1c51      	adds	r1, r2, #1
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6619      	str	r1, [r3, #96]	; 0x60
 8014670:	6879      	ldr	r1, [r7, #4]
 8014672:	4613      	mov	r3, r2
 8014674:	005b      	lsls	r3, r3, #1
 8014676:	4413      	add	r3, r2
 8014678:	005b      	lsls	r3, r3, #1
 801467a:	440b      	add	r3, r1
 801467c:	683a      	ldr	r2, [r7, #0]
 801467e:	6811      	ldr	r1, [r2, #0]
 8014680:	6019      	str	r1, [r3, #0]
 8014682:	8892      	ldrh	r2, [r2, #4]
 8014684:	809a      	strh	r2, [r3, #4]
    }
}
 8014686:	bf00      	nop
 8014688:	370c      	adds	r7, #12
 801468a:	46bd      	mov	sp, r7
 801468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014690:	4770      	bx	lr

08014692 <vector_pop>:

Pulse vector_pop(vector *self){
 8014692:	b480      	push	{r7}
 8014694:	b085      	sub	sp, #20
 8014696:	af00      	add	r7, sp, #0
 8014698:	6078      	str	r0, [r7, #4]
 801469a:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d01c      	beq.n	80146de <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80146a8:	1e5a      	subs	r2, r3, #1
 80146aa:	6839      	ldr	r1, [r7, #0]
 80146ac:	4613      	mov	r3, r2
 80146ae:	005b      	lsls	r3, r3, #1
 80146b0:	4413      	add	r3, r2
 80146b2:	005b      	lsls	r3, r3, #1
 80146b4:	18ca      	adds	r2, r1, r3
 80146b6:	f107 0308 	add.w	r3, r7, #8
 80146ba:	6810      	ldr	r0, [r2, #0]
 80146bc:	6018      	str	r0, [r3, #0]
 80146be:	8892      	ldrh	r2, [r2, #4]
 80146c0:	809a      	strh	r2, [r3, #4]
		self->count--;
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80146c6:	1e5a      	subs	r2, r3, #1
 80146c8:	683b      	ldr	r3, [r7, #0]
 80146ca:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	461a      	mov	r2, r3
 80146d0:	f107 0308 	add.w	r3, r7, #8
 80146d4:	6818      	ldr	r0, [r3, #0]
 80146d6:	6010      	str	r0, [r2, #0]
 80146d8:	889b      	ldrh	r3, [r3, #4]
 80146da:	8093      	strh	r3, [r2, #4]
 80146dc:	e005      	b.n	80146ea <vector_pop+0x58>
	}
	return self->items[0];
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	683a      	ldr	r2, [r7, #0]
 80146e2:	6810      	ldr	r0, [r2, #0]
 80146e4:	6018      	str	r0, [r3, #0]
 80146e6:	8892      	ldrh	r2, [r2, #4]
 80146e8:	809a      	strh	r2, [r3, #4]
}
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	3714      	adds	r7, #20
 80146ee:	46bd      	mov	sp, r7
 80146f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f4:	4770      	bx	lr

080146f6 <vector_get>:

Pulse vector_get(vector *self, int index)
{
 80146f6:	b480      	push	{r7}
 80146f8:	b085      	sub	sp, #20
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	60f8      	str	r0, [r7, #12]
 80146fe:	60b9      	str	r1, [r7, #8]
 8014700:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2b00      	cmp	r3, #0
 8014706:	db12      	blt.n	801472e <vector_get+0x38>
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	429a      	cmp	r2, r3
 8014710:	d90d      	bls.n	801472e <vector_get+0x38>
    	return self->items[index];
 8014712:	68f8      	ldr	r0, [r7, #12]
 8014714:	68b9      	ldr	r1, [r7, #8]
 8014716:	687a      	ldr	r2, [r7, #4]
 8014718:	4613      	mov	r3, r2
 801471a:	005b      	lsls	r3, r3, #1
 801471c:	4413      	add	r3, r2
 801471e:	005b      	lsls	r3, r3, #1
 8014720:	18ca      	adds	r2, r1, r3
 8014722:	4603      	mov	r3, r0
 8014724:	6811      	ldr	r1, [r2, #0]
 8014726:	6019      	str	r1, [r3, #0]
 8014728:	8892      	ldrh	r2, [r2, #4]
 801472a:	809a      	strh	r2, [r3, #4]
 801472c:	e005      	b.n	801473a <vector_get+0x44>
    }
    return self->items[0];
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	68ba      	ldr	r2, [r7, #8]
 8014732:	6810      	ldr	r0, [r2, #0]
 8014734:	6018      	str	r0, [r3, #0]
 8014736:	8892      	ldrh	r2, [r2, #4]
 8014738:	809a      	strh	r2, [r3, #4]
}
 801473a:	68f8      	ldr	r0, [r7, #12]
 801473c:	3714      	adds	r7, #20
 801473e:	46bd      	mov	sp, r7
 8014740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014744:	4770      	bx	lr

08014746 <vector_clear>:

void vector_clear(vector *self){
 8014746:	b480      	push	{r7}
 8014748:	b083      	sub	sp, #12
 801474a:	af00      	add	r7, sp, #0
 801474c:	6078      	str	r0, [r7, #4]
	self->count = 0;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2200      	movs	r2, #0
 8014752:	661a      	str	r2, [r3, #96]	; 0x60
}
 8014754:	bf00      	nop
 8014756:	370c      	adds	r7, #12
 8014758:	46bd      	mov	sp, r7
 801475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475e:	4770      	bx	lr

08014760 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 8014760:	b580      	push	{r7, lr}
 8014762:	b084      	sub	sp, #16
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	683a      	ldr	r2, [r7, #0]
 801476e:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	2200      	movs	r2, #0
 8014774:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2200      	movs	r2, #0
 801477a:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 801477c:	2300      	movs	r3, #0
 801477e:	60fb      	str	r3, [r7, #12]
 8014780:	e00c      	b.n	801479c <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	2264      	movs	r2, #100	; 0x64
 8014786:	fb02 f303 	mul.w	r3, r2, r3
 801478a:	3310      	adds	r3, #16
 801478c:	687a      	ldr	r2, [r7, #4]
 801478e:	4413      	add	r3, r2
 8014790:	4618      	mov	r0, r3
 8014792:	f7ff ffd8 	bl	8014746 <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	3301      	adds	r3, #1
 801479a:	60fb      	str	r3, [r7, #12]
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	2b01      	cmp	r3, #1
 80147a0:	ddef      	ble.n	8014782 <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	33d8      	adds	r3, #216	; 0xd8
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7ff ffcd 	bl	8014746 <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7ff ffc7 	bl	8014746 <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2200      	movs	r2, #0
 80147bc:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 80147c0:	bf00      	nop
 80147c2:	3710      	adds	r7, #16
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	889b      	ldrh	r3, [r3, #4]
 80147d6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80147da:	d303      	bcc.n	80147e4 <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 80147dc:	4b0f      	ldr	r3, [pc, #60]	; (801481c <consume_pulse+0x54>)
 80147de:	2200      	movs	r2, #0
 80147e0:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 80147e2:	e016      	b.n	8014812 <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	889b      	ldrh	r3, [r3, #4]
 80147e8:	2b27      	cmp	r3, #39	; 0x27
 80147ea:	d907      	bls.n	80147fc <consume_pulse+0x34>
		prev_pulse_short = 0;
 80147ec:	4b0b      	ldr	r3, [pc, #44]	; (801481c <consume_pulse+0x54>)
 80147ee:	2200      	movs	r2, #0
 80147f0:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 80147f2:	6839      	ldr	r1, [r7, #0]
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f000 f813 	bl	8014820 <process_long_pulse>
}
 80147fa:	e00a      	b.n	8014812 <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 80147fc:	4b07      	ldr	r3, [pc, #28]	; (801481c <consume_pulse+0x54>)
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	2b01      	cmp	r3, #1
 8014802:	d006      	beq.n	8014812 <consume_pulse+0x4a>
			process_short_pulse(self, p);
 8014804:	6839      	ldr	r1, [r7, #0]
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f000 f89c 	bl	8014944 <process_short_pulse>
			prev_pulse_short = 1;
 801480c:	4b03      	ldr	r3, [pc, #12]	; (801481c <consume_pulse+0x54>)
 801480e:	2201      	movs	r2, #1
 8014810:	701a      	strb	r2, [r3, #0]
}
 8014812:	bf00      	nop
 8014814:	3708      	adds	r7, #8
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
 801481a:	bf00      	nop
 801481c:	20000b38 	.word	0x20000b38

08014820 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 8014820:	b580      	push	{r7, lr}
 8014822:	b088      	sub	sp, #32
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d144      	bne.n	80148bc <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8014838:	2b00      	cmp	r3, #0
 801483a:	d03f      	beq.n	80148bc <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8014842:	f107 0308 	add.w	r3, r7, #8
 8014846:	4611      	mov	r1, r2
 8014848:	4618      	mov	r0, r3
 801484a:	f7ff ff22 	bl	8014692 <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	885a      	ldrh	r2, [r3, #2]
 8014852:	897b      	ldrh	r3, [r7, #10]
 8014854:	1ad3      	subs	r3, r2, r3
 8014856:	b29a      	uxth	r2, r3
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 8014864:	461a      	mov	r2, r3
 8014866:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 801486a:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 801486e:	330d      	adds	r3, #13
 8014870:	1ad3      	subs	r3, r2, r3
 8014872:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	f113 0f1e 	cmn.w	r3, #30
 801487a:	db1c      	blt.n	80148b6 <process_long_pulse+0x96>
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	2b1d      	cmp	r3, #29
 8014880:	dc19      	bgt.n	80148b6 <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2201      	movs	r2, #1
 8014886:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	885a      	ldrh	r2, [r3, #2]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2200      	movs	r2, #0
 8014894:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801489c:	4618      	mov	r0, r3
 801489e:	f7fd f83f 	bl	8011920 <reset>

                reset_cycle_long_pulses(self);
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f000 fa64 	bl	8014d70 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f000 fa7c 	bl	8014da6 <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f000 fa87 	bl	8014dc2 <reset_cycle_short_pulses>
 80148b4:	e002      	b.n	80148bc <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f000 fa75 	bl	8014da6 <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 80148bc:	2300      	movs	r3, #0
 80148be:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d02d      	beq.n	8014924 <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	885a      	ldrh	r2, [r3, #2]
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	891b      	ldrh	r3, [r3, #8]
 80148d0:	1ad3      	subs	r3, r2, r3
 80148d2:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 80148d4:	2300      	movs	r3, #0
 80148d6:	61bb      	str	r3, [r7, #24]
 80148d8:	e021      	b.n	801491e <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 80148da:	4a19      	ldr	r2, [pc, #100]	; (8014940 <process_long_pulse+0x120>)
 80148dc:	69bb      	ldr	r3, [r7, #24]
 80148de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148e2:	8a7a      	ldrh	r2, [r7, #18]
 80148e4:	1ad3      	subs	r3, r2, r3
 80148e6:	b29b      	uxth	r3, r3
 80148e8:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 80148ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80148ee:	f113 0f1e 	cmn.w	r3, #30
 80148f2:	db11      	blt.n	8014918 <process_long_pulse+0xf8>
 80148f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80148f8:	2b1d      	cmp	r3, #29
 80148fa:	dc0d      	bgt.n	8014918 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 80148fc:	69bb      	ldr	r3, [r7, #24]
 80148fe:	2264      	movs	r2, #100	; 0x64
 8014900:	fb02 f303 	mul.w	r3, r2, r3
 8014904:	3310      	adds	r3, #16
 8014906:	687a      	ldr	r2, [r7, #4]
 8014908:	4413      	add	r3, r2
 801490a:	6839      	ldr	r1, [r7, #0]
 801490c:	4618      	mov	r0, r3
 801490e:	f7ff fea1 	bl	8014654 <vector_push>
                pulse_classified = 1;
 8014912:	2301      	movs	r3, #1
 8014914:	77fb      	strb	r3, [r7, #31]
                break;
 8014916:	e005      	b.n	8014924 <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8014918:	69bb      	ldr	r3, [r7, #24]
 801491a:	3301      	adds	r3, #1
 801491c:	61bb      	str	r3, [r7, #24]
 801491e:	69bb      	ldr	r3, [r7, #24]
 8014920:	2b01      	cmp	r3, #1
 8014922:	ddda      	ble.n	80148da <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 8014924:	7ffb      	ldrb	r3, [r7, #31]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d106      	bne.n	8014938 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8014930:	6839      	ldr	r1, [r7, #0]
 8014932:	4618      	mov	r0, r3
 8014934:	f7ff fe8e 	bl	8014654 <vector_push>
    }
}
 8014938:	bf00      	nop
 801493a:	3720      	adds	r7, #32
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}
 8014940:	08028bd8 	.word	0x08028bd8

08014944 <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 8014944:	b580      	push	{r7, lr}
 8014946:	b082      	sub	sp, #8
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
 801494c:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	685b      	ldr	r3, [r3, #4]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d00f      	beq.n	8014976 <process_short_pulse+0x32>
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	461a      	mov	r2, r3
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	429a      	cmp	r2, r3
 8014962:	d208      	bcs.n	8014976 <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	33d8      	adds	r3, #216	; 0xd8
 8014968:	6839      	ldr	r1, [r7, #0]
 801496a:	4618      	mov	r0, r3
 801496c:	f7ff fe72 	bl	8014654 <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f000 f805 	bl	8014980 <process_cycle_fix>
	}
}
 8014976:	bf00      	nop
 8014978:	3708      	adds	r7, #8
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
	...

08014980 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8014980:	b580      	push	{r7, lr}
 8014982:	b0a2      	sub	sp, #136	; 0x88
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8014988:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801498c:	2200      	movs	r2, #0
 801498e:	601a      	str	r2, [r3, #0]
 8014990:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8014992:	2300      	movs	r3, #0
 8014994:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801499a:	2b00      	cmp	r3, #0
 801499c:	d105      	bne.n	80149aa <process_cycle_fix+0x2a>
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	f000 80b7 	beq.w	8014b18 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	685b      	ldr	r3, [r3, #4]
 80149ae:	2b09      	cmp	r3, #9
 80149b0:	d80d      	bhi.n	80149ce <process_cycle_fix+0x4e>
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d009      	beq.n	80149ce <process_cycle_fix+0x4e>
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d004      	beq.n	80149ce <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	1c5a      	adds	r2, r3, #1
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 80149ce:	2300      	movs	r3, #0
 80149d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80149d4:	e090      	b.n	8014af8 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 80149d6:	687a      	ldr	r2, [r7, #4]
 80149d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80149dc:	2164      	movs	r1, #100	; 0x64
 80149de:	fb01 f303 	mul.w	r3, r1, r3
 80149e2:	4413      	add	r3, r2
 80149e4:	3370      	adds	r3, #112	; 0x70
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 80149ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d07e      	beq.n	8014aee <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	891a      	ldrh	r2, [r3, #8]
 80149f4:	49c0      	ldr	r1, [pc, #768]	; (8014cf8 <process_cycle_fix+0x378>)
 80149f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80149fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80149fe:	4413      	add	r3, r2
 8014a00:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8014a04:	2300      	movs	r3, #0
 8014a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014a0a:	e03e      	b.n	8014a8a <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8014a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a10:	2264      	movs	r2, #100	; 0x64
 8014a12:	fb02 f303 	mul.w	r3, r2, r3
 8014a16:	3310      	adds	r3, #16
 8014a18:	687a      	ldr	r2, [r7, #4]
 8014a1a:	18d1      	adds	r1, r2, r3
 8014a1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014a20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014a24:	4618      	mov	r0, r3
 8014a26:	f7ff fe66 	bl	80146f6 <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8014a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a2e:	009b      	lsls	r3, r3, #2
 8014a30:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014a34:	4413      	add	r3, r2
 8014a36:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8014a3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a3e:	4619      	mov	r1, r3
 8014a40:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8014a44:	1acb      	subs	r3, r1, r3
 8014a46:	441a      	add	r2, r3
 8014a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8014a52:	440b      	add	r3, r1
 8014a54:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8014a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a5c:	005b      	lsls	r3, r3, #1
 8014a5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014a62:	4413      	add	r3, r2
 8014a64:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8014a68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8014a6c:	4413      	add	r3, r2
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a74:	005b      	lsls	r3, r3, #1
 8014a76:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8014a7a:	440b      	add	r3, r1
 8014a7c:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8014a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014a84:	3301      	adds	r3, #1
 8014a86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d3bb      	bcc.n	8014a0c <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8014a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a96:	2b01      	cmp	r3, #1
 8014a98:	d929      	bls.n	8014aee <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8014a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a9e:	009b      	lsls	r3, r3, #2
 8014aa0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014aa4:	4413      	add	r3, r2
 8014aa6:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8014aaa:	461a      	mov	r2, r3
 8014aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014ab8:	009b      	lsls	r3, r3, #2
 8014aba:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8014abe:	440b      	add	r3, r1
 8014ac0:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8014ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014ac8:	005b      	lsls	r3, r3, #1
 8014aca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014ace:	4413      	add	r3, r2
 8014ad0:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8014adc:	b29a      	uxth	r2, r3
 8014ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014ae2:	005b      	lsls	r3, r3, #1
 8014ae4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8014ae8:	440b      	add	r3, r1
 8014aea:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8014aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014af2:	3301      	adds	r3, #1
 8014af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014afc:	2b01      	cmp	r3, #1
 8014afe:	f77f af6a 	ble.w	80149d6 <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	68db      	ldr	r3, [r3, #12]
 8014b0c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8014b10:	4619      	mov	r1, r3
 8014b12:	f7fc fe83 	bl	801181c <process_pulse_lengths>
 8014b16:	e008      	b.n	8014b2a <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	685b      	ldr	r3, [r3, #4]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d004      	beq.n	8014b2a <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	1e5a      	subs	r2, r3, #1
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	4619      	mov	r1, r3
 8014b36:	4610      	mov	r0, r2
 8014b38:	f7fc feda 	bl	80118f0 <get_phase>
 8014b3c:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8014b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	f2c0 80b5 	blt.w	8014cb0 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8014b46:	f107 030c 	add.w	r3, r7, #12
 8014b4a:	2220      	movs	r2, #32
 8014b4c:	2100      	movs	r1, #0
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f012 f873 	bl	8026c3a <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8014b54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014b58:	2200      	movs	r2, #0
 8014b5a:	601a      	str	r2, [r3, #0]
 8014b5c:	605a      	str	r2, [r3, #4]
 8014b5e:	609a      	str	r2, [r3, #8]
 8014b60:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8014b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b64:	105b      	asrs	r3, r3, #1
 8014b66:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	891a      	ldrh	r2, [r3, #8]
 8014b6c:	4962      	ldr	r1, [pc, #392]	; (8014cf8 <process_cycle_fix+0x378>)
 8014b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014b70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014b74:	4413      	add	r3, r2
 8014b76:	b29a      	uxth	r2, r3
 8014b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014b7a:	009b      	lsls	r3, r3, #2
 8014b7c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8014b80:	440b      	add	r3, r1
 8014b82:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8014b86:	b29b      	uxth	r3, r3
 8014b88:	4413      	add	r3, r2
 8014b8a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8014b8e:	2300      	movs	r3, #0
 8014b90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014b92:	e04a      	b.n	8014c2a <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8014b9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7ff fda8 	bl	80146f6 <vector_get>
            uint32_t input_idx = p.input_idx;
 8014ba6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014baa:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8014bac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014bae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014bb0:	085b      	lsrs	r3, r3, #1
 8014bb2:	b29b      	uxth	r3, r3
 8014bb4:	4413      	add	r3, r2
 8014bb6:	b29a      	uxth	r2, r3
 8014bb8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8014bbc:	1ad3      	subs	r3, r2, r3
 8014bbe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8014bc2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8014bc6:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8014bca:	d32b      	bcc.n	8014c24 <process_cycle_fix+0x2a4>
 8014bcc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8014bd0:	f641 2278 	movw	r2, #6776	; 0x1a78
 8014bd4:	4293      	cmp	r3, r2
 8014bd6:	d825      	bhi.n	8014c24 <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8014bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014bda:	009b      	lsls	r3, r3, #2
 8014bdc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014be0:	4413      	add	r3, r2
 8014be2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d00a      	beq.n	8014c00 <process_cycle_fix+0x280>
 8014bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014bec:	009b      	lsls	r3, r3, #2
 8014bee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014bf2:	4413      	add	r3, r2
 8014bf4:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8014bf8:	889a      	ldrh	r2, [r3, #4]
 8014bfa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	d211      	bcs.n	8014c24 <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8014c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c02:	009b      	lsls	r3, r3, #2
 8014c04:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014c08:	4413      	add	r3, r2
 8014c0a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014c0e:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8014c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014c1a:	4413      	add	r3, r2
 8014c1c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8014c20:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8014c24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014c26:	3301      	adds	r3, #1
 8014c28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8014c30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014c32:	429a      	cmp	r2, r3
 8014c34:	d3ae      	bcc.n	8014b94 <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8014c36:	2300      	movs	r3, #0
 8014c38:	67bb      	str	r3, [r7, #120]	; 0x78
 8014c3a:	e034      	b.n	8014ca6 <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8014c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c3e:	009b      	lsls	r3, r3, #2
 8014c40:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014c44:	4413      	add	r3, r2
 8014c46:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d028      	beq.n	8014ca0 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8014c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c50:	015b      	lsls	r3, r3, #5
 8014c52:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014c56:	687a      	ldr	r2, [r7, #4]
 8014c58:	4413      	add	r3, r2
 8014c5a:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8014c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c5e:	005b      	lsls	r3, r3, #1
 8014c60:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014c64:	4413      	add	r3, r2
 8014c66:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8014c6a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8014c6e:	ee07 3a90 	vmov	s15, r3
 8014c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c76:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014cfc <process_cycle_fix+0x37c>
 8014c7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014c7e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8014d00 <process_cycle_fix+0x380>
 8014c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014c86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c8a:	009b      	lsls	r3, r3, #2
 8014c8c:	4413      	add	r3, r2
 8014c8e:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	68d9      	ldr	r1, [r3, #12]
 8014c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014c98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014c9a:	3204      	adds	r2, #4
 8014c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8014ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014ca2:	3301      	adds	r3, #1
 8014ca4:	67bb      	str	r3, [r7, #120]	; 0x78
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d3c5      	bcc.n	8014c3c <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8014cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	db06      	blt.n	8014cc4 <process_cycle_fix+0x344>
 8014cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014cb8:	2b03      	cmp	r3, #3
 8014cba:	bf0c      	ite	eq
 8014cbc:	2301      	moveq	r3, #1
 8014cbe:	2300      	movne	r3, #0
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	e008      	b.n	8014cd6 <process_cycle_fix+0x356>
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	68db      	ldr	r3, [r3, #12]
 8014cc8:	f003 0303 	and.w	r3, r3, #3
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	bf0c      	ite	eq
 8014cd0:	2301      	moveq	r3, #1
 8014cd2:	2300      	movne	r3, #0
 8014cd4:	b2db      	uxtb	r3, r3
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d02b      	beq.n	8014d32 <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	891a      	ldrh	r2, [r3, #8]
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8014ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	db0c      	blt.n	8014d04 <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	2b04      	cmp	r3, #4
 8014cf0:	d908      	bls.n	8014d04 <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8014cf2:	22c8      	movs	r2, #200	; 0xc8
 8014cf4:	e007      	b.n	8014d06 <process_cycle_fix+0x386>
 8014cf6:	bf00      	nop
 8014cf8:	08028bd8 	.word	0x08028bd8
 8014cfc:	40490fdb 	.word	0x40490fdb
 8014d00:	46023400 	.word	0x46023400
 8014d04:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	68da      	ldr	r2, [r3, #12]
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014d1a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014d2a:	4619      	mov	r1, r3
 8014d2c:	4610      	mov	r0, r2
 8014d2e:	f7fd fbe5 	bl	80124fc <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f000 f81c 	bl	8014d70 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f000 f834 	bl	8014da6 <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 8014d3e:	6878      	ldr	r0, [r7, #4]
 8014d40:	f000 f83f 	bl	8014dc2 <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	891a      	ldrh	r2, [r3, #8]
 8014d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	4413      	add	r3, r2
 8014d4e:	b29b      	uxth	r3, r3
 8014d50:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8014d54:	330d      	adds	r3, #13
 8014d56:	b29a      	uxth	r2, r3
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	68db      	ldr	r3, [r3, #12]
 8014d60:	1c5a      	adds	r2, r3, #1
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	60da      	str	r2, [r3, #12]
}
 8014d66:	bf00      	nop
 8014d68:	3788      	adds	r7, #136	; 0x88
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop

08014d70 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b084      	sub	sp, #16
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8014d78:	2300      	movs	r3, #0
 8014d7a:	60fb      	str	r3, [r7, #12]
 8014d7c:	e00c      	b.n	8014d98 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	2264      	movs	r2, #100	; 0x64
 8014d82:	fb02 f303 	mul.w	r3, r2, r3
 8014d86:	3310      	adds	r3, #16
 8014d88:	687a      	ldr	r2, [r7, #4]
 8014d8a:	4413      	add	r3, r2
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7ff fcda 	bl	8014746 <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	3301      	adds	r3, #1
 8014d96:	60fb      	str	r3, [r7, #12]
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2b01      	cmp	r3, #1
 8014d9c:	ddef      	ble.n	8014d7e <reset_cycle_long_pulses+0xe>
	}
}
 8014d9e:	bf00      	nop
 8014da0:	3710      	adds	r7, #16
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}

08014da6 <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8014da6:	b580      	push	{r7, lr}
 8014da8:	b082      	sub	sp, #8
 8014daa:	af00      	add	r7, sp, #0
 8014dac:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8014db4:	4618      	mov	r0, r3
 8014db6:	f7ff fcc6 	bl	8014746 <vector_clear>
}
 8014dba:	bf00      	nop
 8014dbc:	3708      	adds	r7, #8
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8014dc2:	b580      	push	{r7, lr}
 8014dc4:	b082      	sub	sp, #8
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	33d8      	adds	r3, #216	; 0xd8
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7ff fcb9 	bl	8014746 <vector_clear>
}
 8014dd4:	bf00      	nop
 8014dd6:	3708      	adds	r7, #8
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8014ddc:	b480      	push	{r7}
 8014dde:	af00      	add	r7, sp, #0

}
 8014de0:	bf00      	nop
 8014de2:	46bd      	mov	sp, r7
 8014de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de8:	4770      	bx	lr

08014dea <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8014dea:	b480      	push	{r7}
 8014dec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8014dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8014dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8014e02:	bf00      	nop
 8014e04:	46bd      	mov	sp, r7
 8014e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0a:	4770      	bx	lr

08014e0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8014e10:	4b0b      	ldr	r3, [pc, #44]	; (8014e40 <MX_RTC_Init+0x34>)
 8014e12:	4a0c      	ldr	r2, [pc, #48]	; (8014e44 <MX_RTC_Init+0x38>)
 8014e14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8014e16:	4b0a      	ldr	r3, [pc, #40]	; (8014e40 <MX_RTC_Init+0x34>)
 8014e18:	2200      	movs	r2, #0
 8014e1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8014e1c:	4b08      	ldr	r3, [pc, #32]	; (8014e40 <MX_RTC_Init+0x34>)
 8014e1e:	220f      	movs	r2, #15
 8014e20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8014e22:	4b07      	ldr	r3, [pc, #28]	; (8014e40 <MX_RTC_Init+0x34>)
 8014e24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014e28:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8014e2a:	4805      	ldr	r0, [pc, #20]	; (8014e40 <MX_RTC_Init+0x34>)
 8014e2c:	f007 fc53 	bl	801c6d6 <HAL_RTC_Init>
 8014e30:	4603      	mov	r3, r0
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d001      	beq.n	8014e3a <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8014e36:	f7ff fa3d 	bl	80142b4 <Error_Handler>
  }

}
 8014e3a:	bf00      	nop
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	20028720 	.word	0x20028720
 8014e44:	40002800 	.word	0x40002800

08014e48 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	4a04      	ldr	r2, [pc, #16]	; (8014e68 <HAL_RTC_MspInit+0x20>)
 8014e56:	4293      	cmp	r3, r2
 8014e58:	d101      	bne.n	8014e5e <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8014e5a:	f7ff ffc6 	bl	8014dea <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8014e5e:	bf00      	nop
 8014e60:	3708      	adds	r7, #8
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}
 8014e66:	bf00      	nop
 8014e68:	40002800 	.word	0x40002800

08014e6c <RTC_ToEpoch>:
  }
} 

/* USER CODE BEGIN 1 */
// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8014e6c:	b480      	push	{r7}
 8014e6e:	b087      	sub	sp, #28
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
 8014e74:	6039      	str	r1, [r7, #0]
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	785b      	ldrb	r3, [r3, #1]
 8014e7a:	f1c3 030e 	rsb	r3, r3, #14
 8014e7e:	4a44      	ldr	r2, [pc, #272]	; (8014f90 <RTC_ToEpoch+0x124>)
 8014e80:	fb82 1203 	smull	r1, r2, r2, r3
 8014e84:	1052      	asrs	r2, r2, #1
 8014e86:	17db      	asrs	r3, r3, #31
 8014e88:	1ad3      	subs	r3, r2, r3
 8014e8a:	75fb      	strb	r3, [r7, #23]
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	78db      	ldrb	r3, [r3, #3]
 8014e90:	b29a      	uxth	r2, r3
 8014e92:	7dfb      	ldrb	r3, [r7, #23]
 8014e94:	b29b      	uxth	r3, r3
 8014e96:	1ad3      	subs	r3, r2, r3
 8014e98:	b29b      	uxth	r3, r3
 8014e9a:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8014e9e:	3310      	adds	r3, #16
 8014ea0:	82bb      	strh	r3, [r7, #20]
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	785a      	ldrb	r2, [r3, #1]
 8014ea6:	7dfb      	ldrb	r3, [r7, #23]
 8014ea8:	4619      	mov	r1, r3
 8014eaa:	0049      	lsls	r1, r1, #1
 8014eac:	440b      	add	r3, r1
 8014eae:	009b      	lsls	r3, r3, #2
 8014eb0:	b2db      	uxtb	r3, r3
 8014eb2:	4413      	add	r3, r2
 8014eb4:	b2db      	uxtb	r3, r3
 8014eb6:	3b03      	subs	r3, #3
 8014eb8:	74fb      	strb	r3, [r7, #19]

	// Gregorian calendar date compute
	JDN = date->Date;
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	789b      	ldrb	r3, [r3, #2]
 8014ebe:	60fb      	str	r3, [r7, #12]
	JDN += (153 * m + 2) / 5;
 8014ec0:	7cfa      	ldrb	r2, [r7, #19]
 8014ec2:	4613      	mov	r3, r2
 8014ec4:	00db      	lsls	r3, r3, #3
 8014ec6:	4413      	add	r3, r2
 8014ec8:	011a      	lsls	r2, r3, #4
 8014eca:	4413      	add	r3, r2
 8014ecc:	3302      	adds	r3, #2
 8014ece:	4a31      	ldr	r2, [pc, #196]	; (8014f94 <RTC_ToEpoch+0x128>)
 8014ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8014ed4:	1052      	asrs	r2, r2, #1
 8014ed6:	17db      	asrs	r3, r3, #31
 8014ed8:	1ad3      	subs	r3, r2, r3
 8014eda:	461a      	mov	r2, r3
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	4413      	add	r3, r2
 8014ee0:	60fb      	str	r3, [r7, #12]
	JDN += 365 * y;
 8014ee2:	8abb      	ldrh	r3, [r7, #20]
 8014ee4:	f240 126d 	movw	r2, #365	; 0x16d
 8014ee8:	fb02 f303 	mul.w	r3, r2, r3
 8014eec:	461a      	mov	r2, r3
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	60fb      	str	r3, [r7, #12]
	JDN += y / 4;
 8014ef4:	8abb      	ldrh	r3, [r7, #20]
 8014ef6:	089b      	lsrs	r3, r3, #2
 8014ef8:	b29b      	uxth	r3, r3
 8014efa:	461a      	mov	r2, r3
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	4413      	add	r3, r2
 8014f00:	60fb      	str	r3, [r7, #12]
	JDN += -y / 100;
 8014f02:	8abb      	ldrh	r3, [r7, #20]
 8014f04:	425b      	negs	r3, r3
 8014f06:	4a24      	ldr	r2, [pc, #144]	; (8014f98 <RTC_ToEpoch+0x12c>)
 8014f08:	fb82 1203 	smull	r1, r2, r2, r3
 8014f0c:	1152      	asrs	r2, r2, #5
 8014f0e:	17db      	asrs	r3, r3, #31
 8014f10:	1ad3      	subs	r3, r2, r3
 8014f12:	461a      	mov	r2, r3
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	4413      	add	r3, r2
 8014f18:	60fb      	str	r3, [r7, #12]
	JDN += y / 400;
 8014f1a:	8abb      	ldrh	r3, [r7, #20]
 8014f1c:	4a1e      	ldr	r2, [pc, #120]	; (8014f98 <RTC_ToEpoch+0x12c>)
 8014f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8014f22:	09db      	lsrs	r3, r3, #7
 8014f24:	b29b      	uxth	r3, r3
 8014f26:	461a      	mov	r2, r3
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	4413      	add	r3, r2
 8014f2c:	60fb      	str	r3, [r7, #12]
	JDN = JDN - 32045;
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 8014f34:	3b2d      	subs	r3, #45	; 0x2d
 8014f36:	60fb      	str	r3, [r7, #12]
	JDN = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8014f38:	68fa      	ldr	r2, [r7, #12]
 8014f3a:	4b18      	ldr	r3, [pc, #96]	; (8014f9c <RTC_ToEpoch+0x130>)
 8014f3c:	4413      	add	r3, r2
 8014f3e:	60fb      	str	r3, [r7, #12]
	JDN *= 86400;                     // Days to seconds
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	4a17      	ldr	r2, [pc, #92]	; (8014fa0 <RTC_ToEpoch+0x134>)
 8014f44:	fb02 f303 	mul.w	r3, r2, r3
 8014f48:	60fb      	str	r3, [r7, #12]
	JDN += time->Hours * 3600;    // ... and today seconds
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	781b      	ldrb	r3, [r3, #0]
 8014f4e:	461a      	mov	r2, r3
 8014f50:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014f54:	fb03 f302 	mul.w	r3, r3, r2
 8014f58:	461a      	mov	r2, r3
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	4413      	add	r3, r2
 8014f5e:	60fb      	str	r3, [r7, #12]
	JDN += time->Minutes * 60;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	785b      	ldrb	r3, [r3, #1]
 8014f64:	461a      	mov	r2, r3
 8014f66:	4613      	mov	r3, r2
 8014f68:	011b      	lsls	r3, r3, #4
 8014f6a:	1a9b      	subs	r3, r3, r2
 8014f6c:	009b      	lsls	r3, r3, #2
 8014f6e:	461a      	mov	r2, r3
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	4413      	add	r3, r2
 8014f74:	60fb      	str	r3, [r7, #12]
	JDN += time->Seconds;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	789b      	ldrb	r3, [r3, #2]
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	4413      	add	r3, r2
 8014f80:	60fb      	str	r3, [r7, #12]

	return JDN;
 8014f82:	68fb      	ldr	r3, [r7, #12]
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	371c      	adds	r7, #28
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8e:	4770      	bx	lr
 8014f90:	2aaaaaab 	.word	0x2aaaaaab
 8014f94:	66666667 	.word	0x66666667
 8014f98:	51eb851f 	.word	0x51eb851f
 8014f9c:	ffdac274 	.word	0xffdac274
 8014fa0:	00015180 	.word	0x00015180

08014fa4 <RTC_FromEpoch>:

//
//// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8014fa4:	b590      	push	{r4, r7, lr}
 8014fa6:	b095      	sub	sp, #84	; 0x54
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	60f8      	str	r0, [r7, #12]
 8014fac:	60b9      	str	r1, [r7, #8]
 8014fae:	607a      	str	r2, [r7, #4]
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	uint32_t m;
	int16_t  year  = 0;
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t  month = 0;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t  dow   = 0;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t  mday  = 0;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t  hour  = 0;
 8014fc8:	2300      	movs	r3, #0
 8014fca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  min   = 0;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t  sec   = 0;
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint64_t JD    = 0;
 8014fda:	f04f 0300 	mov.w	r3, #0
 8014fde:	f04f 0400 	mov.w	r4, #0
 8014fe2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint64_t JDN   = 0;
 8014fe6:	f04f 0300 	mov.w	r3, #0
 8014fea:	f04f 0400 	mov.w	r4, #0
 8014fee:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8014ff8:	33c0      	adds	r3, #192	; 0xc0
 8014ffa:	4a7c      	ldr	r2, [pc, #496]	; (80151ec <RTC_FromEpoch+0x248>)
 8014ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8015000:	0bda      	lsrs	r2, r3, #15
 8015002:	4b7b      	ldr	r3, [pc, #492]	; (80151f0 <RTC_FromEpoch+0x24c>)
 8015004:	4413      	add	r3, r2
 8015006:	f04f 0400 	mov.w	r4, #0
 801500a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	JDN = JD >> 1;
 801500e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8015012:	0864      	lsrs	r4, r4, #1
 8015014:	ea4f 0333 	mov.w	r3, r3, rrx
 8015018:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015022:	4a74      	ldr	r2, [pc, #464]	; (80151f4 <RTC_FromEpoch+0x250>)
 8015024:	fba2 2303 	umull	r2, r3, r2, r3
 8015028:	095b      	lsrs	r3, r3, #5
 801502a:	62bb      	str	r3, [r7, #40]	; 0x28
 801502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502e:	b29a      	uxth	r2, r3
 8015030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015032:	b29b      	uxth	r3, r3
 8015034:	4619      	mov	r1, r3
 8015036:	0109      	lsls	r1, r1, #4
 8015038:	1acb      	subs	r3, r1, r3
 801503a:	009b      	lsls	r3, r3, #2
 801503c:	b29b      	uxth	r3, r3
 801503e:	1ad3      	subs	r3, r2, r3
 8015040:	b29b      	uxth	r3, r3
 8015042:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 8015046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015048:	62fb      	str	r3, [r7, #44]	; 0x2c
 801504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801504c:	4a69      	ldr	r2, [pc, #420]	; (80151f4 <RTC_FromEpoch+0x250>)
 801504e:	fba2 2303 	umull	r2, r3, r2, r3
 8015052:	095b      	lsrs	r3, r3, #5
 8015054:	62bb      	str	r3, [r7, #40]	; 0x28
 8015056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015058:	b29a      	uxth	r2, r3
 801505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801505c:	b29b      	uxth	r3, r3
 801505e:	4619      	mov	r1, r3
 8015060:	0109      	lsls	r1, r1, #4
 8015062:	1acb      	subs	r3, r1, r3
 8015064:	009b      	lsls	r3, r3, #2
 8015066:	b29b      	uxth	r3, r3
 8015068:	1ad3      	subs	r3, r2, r3
 801506a:	b29b      	uxth	r3, r3
 801506c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 8015070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015076:	4a60      	ldr	r2, [pc, #384]	; (80151f8 <RTC_FromEpoch+0x254>)
 8015078:	fba2 2303 	umull	r2, r3, r2, r3
 801507c:	091b      	lsrs	r3, r3, #4
 801507e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015082:	b29a      	uxth	r2, r3
 8015084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015086:	b29b      	uxth	r3, r3
 8015088:	4619      	mov	r1, r3
 801508a:	0049      	lsls	r1, r1, #1
 801508c:	440b      	add	r3, r1
 801508e:	00db      	lsls	r3, r3, #3
 8015090:	b29b      	uxth	r3, r3
 8015092:	1ad3      	subs	r3, r2, r3
 8015094:	b29b      	uxth	r3, r3
 8015096:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    dow   = JDN % 7;
 801509a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801509e:	f04f 0207 	mov.w	r2, #7
 80150a2:	f04f 0300 	mov.w	r3, #0
 80150a6:	f7fb fd31 	bl	8010b0c <__aeabi_uldivmod>
 80150aa:	461c      	mov	r4, r3
 80150ac:	4613      	mov	r3, r2
 80150ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    a     = JDN + 32044;
 80150b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b4:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 80150b8:	332c      	adds	r3, #44	; 0x2c
 80150ba:	627b      	str	r3, [r7, #36]	; 0x24
    b     = ((4 * a) + 3) / 146097;
 80150bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150be:	009b      	lsls	r3, r3, #2
 80150c0:	3303      	adds	r3, #3
 80150c2:	4a4e      	ldr	r2, [pc, #312]	; (80151fc <RTC_FromEpoch+0x258>)
 80150c4:	fba2 2303 	umull	r2, r3, r2, r3
 80150c8:	0bdb      	lsrs	r3, r3, #15
 80150ca:	623b      	str	r3, [r7, #32]
    c     = a - ((146097 * b) / 4);
 80150cc:	6a3b      	ldr	r3, [r7, #32]
 80150ce:	4a4c      	ldr	r2, [pc, #304]	; (8015200 <RTC_FromEpoch+0x25c>)
 80150d0:	fb02 f303 	mul.w	r3, r2, r3
 80150d4:	089b      	lsrs	r3, r3, #2
 80150d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150d8:	1ad3      	subs	r3, r2, r3
 80150da:	61fb      	str	r3, [r7, #28]
    d     = ((4 * c) + 3) / 1461;
 80150dc:	69fb      	ldr	r3, [r7, #28]
 80150de:	009b      	lsls	r3, r3, #2
 80150e0:	3303      	adds	r3, #3
 80150e2:	4a48      	ldr	r2, [pc, #288]	; (8015204 <RTC_FromEpoch+0x260>)
 80150e4:	fba2 2303 	umull	r2, r3, r2, r3
 80150e8:	09db      	lsrs	r3, r3, #7
 80150ea:	61bb      	str	r3, [r7, #24]
    e     = c - ((1461 * d) / 4);
 80150ec:	69bb      	ldr	r3, [r7, #24]
 80150ee:	f240 52b5 	movw	r2, #1461	; 0x5b5
 80150f2:	fb02 f303 	mul.w	r3, r2, r3
 80150f6:	089b      	lsrs	r3, r3, #2
 80150f8:	69fa      	ldr	r2, [r7, #28]
 80150fa:	1ad3      	subs	r3, r2, r3
 80150fc:	617b      	str	r3, [r7, #20]
    m     = ((5 * e) + 2) / 153;
 80150fe:	697a      	ldr	r2, [r7, #20]
 8015100:	4613      	mov	r3, r2
 8015102:	009b      	lsls	r3, r3, #2
 8015104:	4413      	add	r3, r2
 8015106:	3302      	adds	r3, #2
 8015108:	4a3f      	ldr	r2, [pc, #252]	; (8015208 <RTC_FromEpoch+0x264>)
 801510a:	fba2 2303 	umull	r2, r3, r2, r3
 801510e:	09db      	lsrs	r3, r3, #7
 8015110:	613b      	str	r3, [r7, #16]
    mday  = e - (((153 * m) + 2) / 5) + 1;
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	b299      	uxth	r1, r3
 8015116:	693a      	ldr	r2, [r7, #16]
 8015118:	4613      	mov	r3, r2
 801511a:	00db      	lsls	r3, r3, #3
 801511c:	4413      	add	r3, r2
 801511e:	011a      	lsls	r2, r3, #4
 8015120:	4413      	add	r3, r2
 8015122:	3302      	adds	r3, #2
 8015124:	4a39      	ldr	r2, [pc, #228]	; (801520c <RTC_FromEpoch+0x268>)
 8015126:	fba2 2303 	umull	r2, r3, r2, r3
 801512a:	089b      	lsrs	r3, r3, #2
 801512c:	b29b      	uxth	r3, r3
 801512e:	1acb      	subs	r3, r1, r3
 8015130:	b29b      	uxth	r3, r3
 8015132:	3301      	adds	r3, #1
 8015134:	b29b      	uxth	r3, r3
 8015136:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    month = m + 3 - (12 * (m / 10));
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	b29a      	uxth	r2, r3
 801513e:	693b      	ldr	r3, [r7, #16]
 8015140:	4932      	ldr	r1, [pc, #200]	; (801520c <RTC_FromEpoch+0x268>)
 8015142:	fba1 1303 	umull	r1, r3, r1, r3
 8015146:	08db      	lsrs	r3, r3, #3
 8015148:	b29b      	uxth	r3, r3
 801514a:	4619      	mov	r1, r3
 801514c:	0049      	lsls	r1, r1, #1
 801514e:	440b      	add	r3, r1
 8015150:	009b      	lsls	r3, r3, #2
 8015152:	b29b      	uxth	r3, r3
 8015154:	1ad3      	subs	r3, r2, r3
 8015156:	b29b      	uxth	r3, r3
 8015158:	3303      	adds	r3, #3
 801515a:	b29b      	uxth	r3, r3
 801515c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    year  = (100 * b) + d - 4800 + (m / 10);
 8015160:	6a3b      	ldr	r3, [r7, #32]
 8015162:	b29b      	uxth	r3, r3
 8015164:	461a      	mov	r2, r3
 8015166:	0092      	lsls	r2, r2, #2
 8015168:	4413      	add	r3, r2
 801516a:	461a      	mov	r2, r3
 801516c:	0091      	lsls	r1, r2, #2
 801516e:	461a      	mov	r2, r3
 8015170:	460b      	mov	r3, r1
 8015172:	4413      	add	r3, r2
 8015174:	009b      	lsls	r3, r3, #2
 8015176:	b29a      	uxth	r2, r3
 8015178:	69bb      	ldr	r3, [r7, #24]
 801517a:	b29b      	uxth	r3, r3
 801517c:	4413      	add	r3, r2
 801517e:	b29a      	uxth	r2, r3
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	4922      	ldr	r1, [pc, #136]	; (801520c <RTC_FromEpoch+0x268>)
 8015184:	fba1 1303 	umull	r1, r3, r1, r3
 8015188:	08db      	lsrs	r3, r3, #3
 801518a:	b29b      	uxth	r3, r3
 801518c:	4413      	add	r3, r2
 801518e:	b29b      	uxth	r3, r3
 8015190:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8015194:	b29b      	uxth	r3, r3
 8015196:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    date->Year    = year - 2000;
 801519a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801519e:	b2db      	uxtb	r3, r3
 80151a0:	3330      	adds	r3, #48	; 0x30
 80151a2:	b2da      	uxtb	r2, r3
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	70da      	strb	r2, [r3, #3]
    date->Month   = month;
 80151a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80151ac:	b2da      	uxtb	r2, r3
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	705a      	strb	r2, [r3, #1]
    date->Date    = mday;
 80151b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80151b6:	b2da      	uxtb	r2, r3
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	709a      	strb	r2, [r3, #2]
    date->WeekDay = dow;
 80151bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80151c0:	b2da      	uxtb	r2, r3
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	701a      	strb	r2, [r3, #0]
    time->Hours   = hour;
 80151c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80151ca:	b2da      	uxtb	r2, r3
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	701a      	strb	r2, [r3, #0]
    time->Minutes = min;
 80151d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80151d4:	b2da      	uxtb	r2, r3
 80151d6:	68bb      	ldr	r3, [r7, #8]
 80151d8:	705a      	strb	r2, [r3, #1]
    time->Seconds = sec;
 80151da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151de:	b2da      	uxtb	r2, r3
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	709a      	strb	r2, [r3, #2]
}
 80151e4:	bf00      	nop
 80151e6:	3754      	adds	r7, #84	; 0x54
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd90      	pop	{r4, r7, pc}
 80151ec:	c22e4507 	.word	0xc22e4507
 80151f0:	004a7b17 	.word	0x004a7b17
 80151f4:	88888889 	.word	0x88888889
 80151f8:	aaaaaaab 	.word	0xaaaaaaab
 80151fc:	396b06bd 	.word	0x396b06bd
 8015200:	00023ab1 	.word	0x00023ab1
 8015204:	166db073 	.word	0x166db073
 8015208:	d62b80d7 	.word	0xd62b80d7
 801520c:	cccccccd 	.word	0xcccccccd

08015210 <LL_AHB3_GRP1_EnableClock>:
{
 8015210:	b480      	push	{r7}
 8015212:	b085      	sub	sp, #20
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8015218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801521c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801521e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	4313      	orrs	r3, r2
 8015226:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8015228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801522c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	4013      	ands	r3, r2
 8015232:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015234:	68fb      	ldr	r3, [r7, #12]
}
 8015236:	bf00      	nop
 8015238:	3714      	adds	r7, #20
 801523a:	46bd      	mov	sp, r7
 801523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015240:	4770      	bx	lr

08015242 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015242:	b580      	push	{r7, lr}
 8015244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8015246:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801524a:	f7ff ffe1 	bl	8015210 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801524e:	2200      	movs	r2, #0
 8015250:	210f      	movs	r1, #15
 8015252:	f06f 0001 	mvn.w	r0, #1
 8015256:	f002 fcf4 	bl	8017c42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 801525a:	2200      	movs	r2, #0
 801525c:	210f      	movs	r1, #15
 801525e:	202c      	movs	r0, #44	; 0x2c
 8015260:	f002 fcef 	bl	8017c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8015264:	2200      	movs	r2, #0
 8015266:	210f      	movs	r1, #15
 8015268:	202d      	movs	r0, #45	; 0x2d
 801526a:	f002 fcea 	bl	8017c42 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 801526e:	bf00      	nop
 8015270:	bd80      	pop	{r7, pc}

08015272 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8015272:	b480      	push	{r7}
 8015274:	b085      	sub	sp, #20
 8015276:	af00      	add	r7, sp, #0
 8015278:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 801527a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801527e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	4313      	orrs	r3, r2
 8015288:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801528a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801528e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	4013      	ands	r3, r2
 8015294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015296:	68fb      	ldr	r3, [r7, #12]
}
 8015298:	bf00      	nop
 801529a:	3714      	adds	r7, #20
 801529c:	46bd      	mov	sp, r7
 801529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a2:	4770      	bx	lr

080152a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b08c      	sub	sp, #48	; 0x30
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80152ac:	2300      	movs	r3, #0
 80152ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80152b0:	2300      	movs	r3, #0
 80152b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80152b4:	2200      	movs	r2, #0
 80152b6:	6879      	ldr	r1, [r7, #4]
 80152b8:	2019      	movs	r0, #25
 80152ba:	f002 fcc2 	bl	8017c42 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80152be:	2019      	movs	r0, #25
 80152c0:	f002 fcd9 	bl	8017c76 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80152c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80152c8:	f7ff ffd3 	bl	8015272 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80152cc:	f107 0208 	add.w	r2, r7, #8
 80152d0:	f107 030c 	add.w	r3, r7, #12
 80152d4:	4611      	mov	r1, r2
 80152d6:	4618      	mov	r0, r3
 80152d8:	f006 fcf0 	bl	801bcbc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80152dc:	f006 fcd8 	bl	801bc90 <HAL_RCC_GetPCLK2Freq>
 80152e0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80152e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e4:	4a12      	ldr	r2, [pc, #72]	; (8015330 <HAL_InitTick+0x8c>)
 80152e6:	fba2 2303 	umull	r2, r3, r2, r3
 80152ea:	0c9b      	lsrs	r3, r3, #18
 80152ec:	3b01      	subs	r3, #1
 80152ee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80152f0:	4b10      	ldr	r3, [pc, #64]	; (8015334 <HAL_InitTick+0x90>)
 80152f2:	4a11      	ldr	r2, [pc, #68]	; (8015338 <HAL_InitTick+0x94>)
 80152f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80152f6:	4b0f      	ldr	r3, [pc, #60]	; (8015334 <HAL_InitTick+0x90>)
 80152f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80152fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80152fe:	4a0d      	ldr	r2, [pc, #52]	; (8015334 <HAL_InitTick+0x90>)
 8015300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015302:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8015304:	4b0b      	ldr	r3, [pc, #44]	; (8015334 <HAL_InitTick+0x90>)
 8015306:	2200      	movs	r2, #0
 8015308:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801530a:	4b0a      	ldr	r3, [pc, #40]	; (8015334 <HAL_InitTick+0x90>)
 801530c:	2200      	movs	r2, #0
 801530e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8015310:	4808      	ldr	r0, [pc, #32]	; (8015334 <HAL_InitTick+0x90>)
 8015312:	f007 fd3d 	bl	801cd90 <HAL_TIM_Base_Init>
 8015316:	4603      	mov	r3, r0
 8015318:	2b00      	cmp	r3, #0
 801531a:	d104      	bne.n	8015326 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 801531c:	4805      	ldr	r0, [pc, #20]	; (8015334 <HAL_InitTick+0x90>)
 801531e:	f007 fdb9 	bl	801ce94 <HAL_TIM_Base_Start_IT>
 8015322:	4603      	mov	r3, r0
 8015324:	e000      	b.n	8015328 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8015326:	2301      	movs	r3, #1
}
 8015328:	4618      	mov	r0, r3
 801532a:	3730      	adds	r7, #48	; 0x30
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}
 8015330:	431bde83 	.word	0x431bde83
 8015334:	20028744 	.word	0x20028744
 8015338:	40012c00 	.word	0x40012c00

0801533c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801533c:	b480      	push	{r7}
 801533e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8015340:	bf00      	nop
 8015342:	46bd      	mov	sp, r7
 8015344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015348:	4770      	bx	lr

0801534a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801534a:	b480      	push	{r7}
 801534c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801534e:	e7fe      	b.n	801534e <HardFault_Handler+0x4>

08015350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015350:	b480      	push	{r7}
 8015352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015354:	e7fe      	b.n	8015354 <MemManage_Handler+0x4>

08015356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8015356:	b480      	push	{r7}
 8015358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801535a:	e7fe      	b.n	801535a <BusFault_Handler+0x4>

0801535c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801535c:	b480      	push	{r7}
 801535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015360:	e7fe      	b.n	8015360 <UsageFault_Handler+0x4>

08015362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015362:	b480      	push	{r7}
 8015364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015366:	bf00      	nop
 8015368:	46bd      	mov	sp, r7
 801536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536e:	4770      	bx	lr

08015370 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8015374:	2004      	movs	r0, #4
 8015376:	f003 fb89 	bl	8018a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 801537a:	4b04      	ldr	r3, [pc, #16]	; (801538c <EXTI2_IRQHandler+0x1c>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	2104      	movs	r1, #4
 8015380:	4618      	mov	r0, r3
 8015382:	f009 f8c1 	bl	801e508 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8015386:	bf00      	nop
 8015388:	bd80      	pop	{r7, pc}
 801538a:	bf00      	nop
 801538c:	20028004 	.word	0x20028004

08015390 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8015394:	4802      	ldr	r0, [pc, #8]	; (80153a0 <DMA1_Channel1_IRQHandler+0x10>)
 8015396:	f002 fe8c 	bl	80180b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 801539a:	bf00      	nop
 801539c:	bd80      	pop	{r7, pc}
 801539e:	bf00      	nop
 80153a0:	20027a5c 	.word	0x20027a5c

080153a4 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80153a8:	4802      	ldr	r0, [pc, #8]	; (80153b4 <COMP_IRQHandler+0x10>)
 80153aa:	f002 fae1 	bl	8017970 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80153ae:	bf00      	nop
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	20028028 	.word	0x20028028

080153b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80153bc:	2020      	movs	r0, #32
 80153be:	f003 fb65 	bl	8018a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80153c2:	bf00      	nop
 80153c4:	bd80      	pop	{r7, pc}
	...

080153c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80153cc:	4803      	ldr	r0, [pc, #12]	; (80153dc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80153ce:	f007 fe6b 	bl	801d0a8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80153d2:	4803      	ldr	r0, [pc, #12]	; (80153e0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80153d4:	f007 fe68 	bl	801d0a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80153d8:	bf00      	nop
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	20028744 	.word	0x20028744
 80153e0:	200287c4 	.word	0x200287c4

080153e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80153e8:	4802      	ldr	r0, [pc, #8]	; (80153f4 <I2C1_EV_IRQHandler+0x10>)
 80153ea:	f003 ff65 	bl	80192b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80153ee:	bf00      	nop
 80153f0:	bd80      	pop	{r7, pc}
 80153f2:	bf00      	nop
 80153f4:	200281b8 	.word	0x200281b8

080153f8 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 80153fc:	f010 ff66 	bl	80262cc <HW_IPCC_Tx_Handler>

  return;
 8015400:	bf00      	nop
}
 8015402:	bd80      	pop	{r7, pc}

08015404 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8015408:	f010 ff06 	bl	8026218 <HW_IPCC_Rx_Handler>
  return;
 801540c:	bf00      	nop
}
 801540e:	bd80      	pop	{r7, pc}

08015410 <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 8015414:	4802      	ldr	r0, [pc, #8]	; (8015420 <TSC_IRQHandler+0x10>)
 8015416:	f008 ff07 	bl	801e228 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 801541a:	bf00      	nop
 801541c:	bd80      	pop	{r7, pc}
 801541e:	bf00      	nop
 8015420:	20028838 	.word	0x20028838

08015424 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8015424:	b40c      	push	{r2, r3}
 8015426:	b480      	push	{r7}
 8015428:	b083      	sub	sp, #12
 801542a:	af00      	add	r7, sp, #0
 801542c:	4603      	mov	r3, r0
 801542e:	460a      	mov	r2, r1
 8015430:	71fb      	strb	r3, [r7, #7]
 8015432:	4613      	mov	r3, r2
 8015434:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8015436:	bf00      	nop
 8015438:	370c      	adds	r7, #12
 801543a:	46bd      	mov	sp, r7
 801543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015440:	b002      	add	sp, #8
 8015442:	4770      	bx	lr

08015444 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015444:	b480      	push	{r7}
 8015446:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8015448:	4b26      	ldr	r3, [pc, #152]	; (80154e4 <SystemInit+0xa0>)
 801544a:	2200      	movs	r2, #0
 801544c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 801544e:	4b25      	ldr	r3, [pc, #148]	; (80154e4 <SystemInit+0xa0>)
 8015450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015454:	4a23      	ldr	r2, [pc, #140]	; (80154e4 <SystemInit+0xa0>)
 8015456:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801545a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801545e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8015468:	f043 0301 	orr.w	r3, r3, #1
 801546c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 801546e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015472:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8015476:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8015478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801547c:	681a      	ldr	r2, [r3, #0]
 801547e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015482:	4b19      	ldr	r3, [pc, #100]	; (80154e8 <SystemInit+0xa4>)
 8015484:	4013      	ands	r3, r2
 8015486:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8015488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801548c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8015494:	f023 0305 	bic.w	r3, r3, #5
 8015498:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 801549c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80154a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80154a8:	f023 0301 	bic.w	r3, r3, #1
 80154ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80154b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154b4:	4a0d      	ldr	r2, [pc, #52]	; (80154ec <SystemInit+0xa8>)
 80154b6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80154b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154bc:	4a0b      	ldr	r2, [pc, #44]	; (80154ec <SystemInit+0xa8>)
 80154be:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80154c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80154ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80154ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80154d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154d4:	2200      	movs	r2, #0
 80154d6:	619a      	str	r2, [r3, #24]
}
 80154d8:	bf00      	nop
 80154da:	46bd      	mov	sp, r7
 80154dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e0:	4770      	bx	lr
 80154e2:	bf00      	nop
 80154e4:	e000ed00 	.word	0xe000ed00
 80154e8:	faf6fefb 	.word	0xfaf6fefb
 80154ec:	22041000 	.word	0x22041000

080154f0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b087      	sub	sp, #28
 80154f4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80154f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	091b      	lsrs	r3, r3, #4
 80154fe:	f003 030f 	and.w	r3, r3, #15
 8015502:	4a47      	ldr	r2, [pc, #284]	; (8015620 <SystemCoreClockUpdate+0x130>)
 8015504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015508:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801550a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801550e:	689b      	ldr	r3, [r3, #8]
 8015510:	f003 030c 	and.w	r3, r3, #12
 8015514:	2b0c      	cmp	r3, #12
 8015516:	d867      	bhi.n	80155e8 <SystemCoreClockUpdate+0xf8>
 8015518:	a201      	add	r2, pc, #4	; (adr r2, 8015520 <SystemCoreClockUpdate+0x30>)
 801551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801551e:	bf00      	nop
 8015520:	08015555 	.word	0x08015555
 8015524:	080155e9 	.word	0x080155e9
 8015528:	080155e9 	.word	0x080155e9
 801552c:	080155e9 	.word	0x080155e9
 8015530:	0801555d 	.word	0x0801555d
 8015534:	080155e9 	.word	0x080155e9
 8015538:	080155e9 	.word	0x080155e9
 801553c:	080155e9 	.word	0x080155e9
 8015540:	08015565 	.word	0x08015565
 8015544:	080155e9 	.word	0x080155e9
 8015548:	080155e9 	.word	0x080155e9
 801554c:	080155e9 	.word	0x080155e9
 8015550:	0801556d 	.word	0x0801556d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8015554:	4a33      	ldr	r2, [pc, #204]	; (8015624 <SystemCoreClockUpdate+0x134>)
 8015556:	693b      	ldr	r3, [r7, #16]
 8015558:	6013      	str	r3, [r2, #0]
      break;
 801555a:	e049      	b.n	80155f0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 801555c:	4b31      	ldr	r3, [pc, #196]	; (8015624 <SystemCoreClockUpdate+0x134>)
 801555e:	4a32      	ldr	r2, [pc, #200]	; (8015628 <SystemCoreClockUpdate+0x138>)
 8015560:	601a      	str	r2, [r3, #0]
      break;
 8015562:	e045      	b.n	80155f0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8015564:	4b2f      	ldr	r3, [pc, #188]	; (8015624 <SystemCoreClockUpdate+0x134>)
 8015566:	4a31      	ldr	r2, [pc, #196]	; (801562c <SystemCoreClockUpdate+0x13c>)
 8015568:	601a      	str	r2, [r3, #0]
      break;
 801556a:	e041      	b.n	80155f0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801556c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015570:	68db      	ldr	r3, [r3, #12]
 8015572:	f003 0303 	and.w	r3, r3, #3
 8015576:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8015578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801557c:	68db      	ldr	r3, [r3, #12]
 801557e:	091b      	lsrs	r3, r3, #4
 8015580:	f003 0307 	and.w	r3, r3, #7
 8015584:	3301      	adds	r3, #1
 8015586:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	2b02      	cmp	r3, #2
 801558c:	d105      	bne.n	801559a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 801558e:	4a26      	ldr	r2, [pc, #152]	; (8015628 <SystemCoreClockUpdate+0x138>)
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	fbb2 f3f3 	udiv	r3, r2, r3
 8015596:	617b      	str	r3, [r7, #20]
 8015598:	e00d      	b.n	80155b6 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	2b03      	cmp	r3, #3
 801559e:	d105      	bne.n	80155ac <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80155a0:	4a22      	ldr	r2, [pc, #136]	; (801562c <SystemCoreClockUpdate+0x13c>)
 80155a2:	68bb      	ldr	r3, [r7, #8]
 80155a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80155a8:	617b      	str	r3, [r7, #20]
 80155aa:	e004      	b.n	80155b6 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80155ac:	693a      	ldr	r2, [r7, #16]
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80155b4:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80155b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80155ba:	68db      	ldr	r3, [r3, #12]
 80155bc:	0a1b      	lsrs	r3, r3, #8
 80155be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	fb02 f303 	mul.w	r3, r2, r3
 80155c8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80155ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80155ce:	68db      	ldr	r3, [r3, #12]
 80155d0:	0f5b      	lsrs	r3, r3, #29
 80155d2:	f003 0307 	and.w	r3, r3, #7
 80155d6:	3301      	adds	r3, #1
 80155d8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80155da:	697a      	ldr	r2, [r7, #20]
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	fbb2 f3f3 	udiv	r3, r2, r3
 80155e2:	4a10      	ldr	r2, [pc, #64]	; (8015624 <SystemCoreClockUpdate+0x134>)
 80155e4:	6013      	str	r3, [r2, #0]
      break;
 80155e6:	e003      	b.n	80155f0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80155e8:	4a0e      	ldr	r2, [pc, #56]	; (8015624 <SystemCoreClockUpdate+0x134>)
 80155ea:	693b      	ldr	r3, [r7, #16]
 80155ec:	6013      	str	r3, [r2, #0]
      break;
 80155ee:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80155f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80155f4:	689b      	ldr	r3, [r3, #8]
 80155f6:	091b      	lsrs	r3, r3, #4
 80155f8:	f003 030f 	and.w	r3, r3, #15
 80155fc:	4a0c      	ldr	r2, [pc, #48]	; (8015630 <SystemCoreClockUpdate+0x140>)
 80155fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015602:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8015604:	4b07      	ldr	r3, [pc, #28]	; (8015624 <SystemCoreClockUpdate+0x134>)
 8015606:	681a      	ldr	r2, [r3, #0]
 8015608:	683b      	ldr	r3, [r7, #0]
 801560a:	fbb2 f3f3 	udiv	r3, r2, r3
 801560e:	4a05      	ldr	r2, [pc, #20]	; (8015624 <SystemCoreClockUpdate+0x134>)
 8015610:	6013      	str	r3, [r2, #0]

}
 8015612:	bf00      	nop
 8015614:	371c      	adds	r7, #28
 8015616:	46bd      	mov	sp, r7
 8015618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561c:	4770      	bx	lr
 801561e:	bf00      	nop
 8015620:	08028c3c 	.word	0x08028c3c
 8015624:	20000078 	.word	0x20000078
 8015628:	00f42400 	.word	0x00f42400
 801562c:	01e84800 	.word	0x01e84800
 8015630:	08028bdc 	.word	0x08028bdc

08015634 <LL_AHB2_GRP1_EnableClock>:
{
 8015634:	b480      	push	{r7}
 8015636:	b085      	sub	sp, #20
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801563c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	4313      	orrs	r3, r2
 801564a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801564c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	4013      	ands	r3, r2
 8015656:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015658:	68fb      	ldr	r3, [r7, #12]
}
 801565a:	bf00      	nop
 801565c:	3714      	adds	r7, #20
 801565e:	46bd      	mov	sp, r7
 8015660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015664:	4770      	bx	lr

08015666 <LL_APB1_GRP1_EnableClock>:
{
 8015666:	b480      	push	{r7}
 8015668:	b085      	sub	sp, #20
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801566e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015672:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	4313      	orrs	r3, r2
 801567c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801567e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015682:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	4013      	ands	r3, r2
 8015688:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801568a:	68fb      	ldr	r3, [r7, #12]
}
 801568c:	bf00      	nop
 801568e:	3714      	adds	r7, #20
 8015690:	46bd      	mov	sp, r7
 8015692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015696:	4770      	bx	lr

08015698 <LL_APB2_GRP1_EnableClock>:
{
 8015698:	b480      	push	{r7}
 801569a:	b085      	sub	sp, #20
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80156a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80156a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80156a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	4313      	orrs	r3, r2
 80156ae:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80156b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80156b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	4013      	ands	r3, r2
 80156ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80156bc:	68fb      	ldr	r3, [r7, #12]
}
 80156be:	bf00      	nop
 80156c0:	3714      	adds	r7, #20
 80156c2:	46bd      	mov	sp, r7
 80156c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c8:	4770      	bx	lr
	...

080156cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b08e      	sub	sp, #56	; 0x38
 80156d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80156d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80156d6:	2200      	movs	r2, #0
 80156d8:	601a      	str	r2, [r3, #0]
 80156da:	605a      	str	r2, [r3, #4]
 80156dc:	609a      	str	r2, [r3, #8]
 80156de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80156e0:	f107 031c 	add.w	r3, r7, #28
 80156e4:	2200      	movs	r2, #0
 80156e6:	601a      	str	r2, [r3, #0]
 80156e8:	605a      	str	r2, [r3, #4]
 80156ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80156ec:	463b      	mov	r3, r7
 80156ee:	2200      	movs	r2, #0
 80156f0:	601a      	str	r2, [r3, #0]
 80156f2:	605a      	str	r2, [r3, #4]
 80156f4:	609a      	str	r2, [r3, #8]
 80156f6:	60da      	str	r2, [r3, #12]
 80156f8:	611a      	str	r2, [r3, #16]
 80156fa:	615a      	str	r2, [r3, #20]
 80156fc:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80156fe:	4b2d      	ldr	r3, [pc, #180]	; (80157b4 <MX_TIM2_Init+0xe8>)
 8015700:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015704:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8015706:	4b2b      	ldr	r3, [pc, #172]	; (80157b4 <MX_TIM2_Init+0xe8>)
 8015708:	f240 227f 	movw	r2, #639	; 0x27f
 801570c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801570e:	4b29      	ldr	r3, [pc, #164]	; (80157b4 <MX_TIM2_Init+0xe8>)
 8015710:	2200      	movs	r2, #0
 8015712:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8015714:	4b27      	ldr	r3, [pc, #156]	; (80157b4 <MX_TIM2_Init+0xe8>)
 8015716:	2209      	movs	r2, #9
 8015718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801571a:	4b26      	ldr	r3, [pc, #152]	; (80157b4 <MX_TIM2_Init+0xe8>)
 801571c:	2200      	movs	r2, #0
 801571e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015720:	4b24      	ldr	r3, [pc, #144]	; (80157b4 <MX_TIM2_Init+0xe8>)
 8015722:	2200      	movs	r2, #0
 8015724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8015726:	4823      	ldr	r0, [pc, #140]	; (80157b4 <MX_TIM2_Init+0xe8>)
 8015728:	f007 fb32 	bl	801cd90 <HAL_TIM_Base_Init>
 801572c:	4603      	mov	r3, r0
 801572e:	2b00      	cmp	r3, #0
 8015730:	d001      	beq.n	8015736 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8015732:	f7fe fdbf 	bl	80142b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8015736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801573a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801573c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015740:	4619      	mov	r1, r3
 8015742:	481c      	ldr	r0, [pc, #112]	; (80157b4 <MX_TIM2_Init+0xe8>)
 8015744:	f007 fee8 	bl	801d518 <HAL_TIM_ConfigClockSource>
 8015748:	4603      	mov	r3, r0
 801574a:	2b00      	cmp	r3, #0
 801574c:	d001      	beq.n	8015752 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 801574e:	f7fe fdb1 	bl	80142b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8015752:	4818      	ldr	r0, [pc, #96]	; (80157b4 <MX_TIM2_Init+0xe8>)
 8015754:	f007 fbc8 	bl	801cee8 <HAL_TIM_PWM_Init>
 8015758:	4603      	mov	r3, r0
 801575a:	2b00      	cmp	r3, #0
 801575c:	d001      	beq.n	8015762 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 801575e:	f7fe fda9 	bl	80142b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8015762:	2320      	movs	r3, #32
 8015764:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015766:	2300      	movs	r3, #0
 8015768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801576a:	f107 031c 	add.w	r3, r7, #28
 801576e:	4619      	mov	r1, r3
 8015770:	4810      	ldr	r0, [pc, #64]	; (80157b4 <MX_TIM2_Init+0xe8>)
 8015772:	f008 fb57 	bl	801de24 <HAL_TIMEx_MasterConfigSynchronization>
 8015776:	4603      	mov	r3, r0
 8015778:	2b00      	cmp	r3, #0
 801577a:	d001      	beq.n	8015780 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 801577c:	f7fe fd9a 	bl	80142b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8015780:	2360      	movs	r3, #96	; 0x60
 8015782:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 8015784:	2309      	movs	r3, #9
 8015786:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8015788:	2300      	movs	r3, #0
 801578a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801578c:	2300      	movs	r3, #0
 801578e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8015790:	463b      	mov	r3, r7
 8015792:	2204      	movs	r2, #4
 8015794:	4619      	mov	r1, r3
 8015796:	4807      	ldr	r0, [pc, #28]	; (80157b4 <MX_TIM2_Init+0xe8>)
 8015798:	f007 fda6 	bl	801d2e8 <HAL_TIM_PWM_ConfigChannel>
 801579c:	4603      	mov	r3, r0
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d001      	beq.n	80157a6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80157a2:	f7fe fd87 	bl	80142b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80157a6:	4803      	ldr	r0, [pc, #12]	; (80157b4 <MX_TIM2_Init+0xe8>)
 80157a8:	f000 f850 	bl	801584c <HAL_TIM_MspPostInit>

}
 80157ac:	bf00      	nop
 80157ae:	3738      	adds	r7, #56	; 0x38
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	20028784 	.word	0x20028784

080157b8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80157bc:	4b0f      	ldr	r3, [pc, #60]	; (80157fc <MX_TIM16_Init+0x44>)
 80157be:	4a10      	ldr	r2, [pc, #64]	; (8015800 <MX_TIM16_Init+0x48>)
 80157c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 80157c2:	4b0e      	ldr	r3, [pc, #56]	; (80157fc <MX_TIM16_Init+0x44>)
 80157c4:	221f      	movs	r2, #31
 80157c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80157c8:	4b0c      	ldr	r3, [pc, #48]	; (80157fc <MX_TIM16_Init+0x44>)
 80157ca:	2200      	movs	r2, #0
 80157cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80157ce:	4b0b      	ldr	r3, [pc, #44]	; (80157fc <MX_TIM16_Init+0x44>)
 80157d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157d4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80157d6:	4b09      	ldr	r3, [pc, #36]	; (80157fc <MX_TIM16_Init+0x44>)
 80157d8:	2200      	movs	r2, #0
 80157da:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80157dc:	4b07      	ldr	r3, [pc, #28]	; (80157fc <MX_TIM16_Init+0x44>)
 80157de:	2200      	movs	r2, #0
 80157e0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80157e2:	4b06      	ldr	r3, [pc, #24]	; (80157fc <MX_TIM16_Init+0x44>)
 80157e4:	2200      	movs	r2, #0
 80157e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80157e8:	4804      	ldr	r0, [pc, #16]	; (80157fc <MX_TIM16_Init+0x44>)
 80157ea:	f007 fad1 	bl	801cd90 <HAL_TIM_Base_Init>
 80157ee:	4603      	mov	r3, r0
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d001      	beq.n	80157f8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80157f4:	f7fe fd5e 	bl	80142b4 <Error_Handler>
  }

}
 80157f8:	bf00      	nop
 80157fa:	bd80      	pop	{r7, pc}
 80157fc:	200287c4 	.word	0x200287c4
 8015800:	40014400 	.word	0x40014400

08015804 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b082      	sub	sp, #8
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015814:	d103      	bne.n	801581e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8015816:	2001      	movs	r0, #1
 8015818:	f7ff ff25 	bl	8015666 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 801581c:	e010      	b.n	8015840 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	4a09      	ldr	r2, [pc, #36]	; (8015848 <HAL_TIM_Base_MspInit+0x44>)
 8015824:	4293      	cmp	r3, r2
 8015826:	d10b      	bne.n	8015840 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8015828:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801582c:	f7ff ff34 	bl	8015698 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8015830:	2200      	movs	r2, #0
 8015832:	2100      	movs	r1, #0
 8015834:	2019      	movs	r0, #25
 8015836:	f002 fa04 	bl	8017c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 801583a:	2019      	movs	r0, #25
 801583c:	f002 fa1b 	bl	8017c76 <HAL_NVIC_EnableIRQ>
}
 8015840:	bf00      	nop
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	40014400 	.word	0x40014400

0801584c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b088      	sub	sp, #32
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015854:	f107 030c 	add.w	r3, r7, #12
 8015858:	2200      	movs	r2, #0
 801585a:	601a      	str	r2, [r3, #0]
 801585c:	605a      	str	r2, [r3, #4]
 801585e:	609a      	str	r2, [r3, #8]
 8015860:	60da      	str	r2, [r3, #12]
 8015862:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801586c:	d112      	bne.n	8015894 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801586e:	2002      	movs	r0, #2
 8015870:	f7ff fee0 	bl	8015634 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8015874:	2308      	movs	r3, #8
 8015876:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015878:	2302      	movs	r3, #2
 801587a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801587c:	2300      	movs	r3, #0
 801587e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015880:	2300      	movs	r3, #0
 8015882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8015884:	2301      	movs	r3, #1
 8015886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015888:	f107 030c 	add.w	r3, r7, #12
 801588c:	4619      	mov	r1, r3
 801588e:	4803      	ldr	r0, [pc, #12]	; (801589c <HAL_TIM_MspPostInit+0x50>)
 8015890:	f002 ff42 	bl	8018718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8015894:	bf00      	nop
 8015896:	3720      	adds	r7, #32
 8015898:	46bd      	mov	sp, r7
 801589a:	bd80      	pop	{r7, pc}
 801589c:	48000400 	.word	0x48000400

080158a0 <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b084      	sub	sp, #16
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 80158a8:	4b1a      	ldr	r3, [pc, #104]	; (8015914 <HAL_COMP_TriggerCallback+0x74>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158ae:	b29a      	uxth	r2, r3
 80158b0:	4b19      	ldr	r3, [pc, #100]	; (8015918 <HAL_COMP_TriggerCallback+0x78>)
 80158b2:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f002 f889 	bl	80179cc <HAL_COMP_GetOutputLevel>
 80158ba:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	2b01      	cmp	r3, #1
 80158c0:	d109      	bne.n	80158d6 <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 80158c2:	4b15      	ldr	r3, [pc, #84]	; (8015918 <HAL_COMP_TriggerCallback+0x78>)
 80158c4:	881a      	ldrh	r2, [r3, #0]
 80158c6:	4b15      	ldr	r3, [pc, #84]	; (801591c <HAL_COMP_TriggerCallback+0x7c>)
 80158c8:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 80158cc:	4b13      	ldr	r3, [pc, #76]	; (801591c <HAL_COMP_TriggerCallback+0x7c>)
 80158ce:	2201      	movs	r2, #1
 80158d0:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 80158d4:	e019      	b.n	801590a <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 80158d6:	4b11      	ldr	r3, [pc, #68]	; (801591c <HAL_COMP_TriggerCallback+0x7c>)
 80158d8:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d014      	beq.n	801590a <HAL_COMP_TriggerCallback+0x6a>
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d111      	bne.n	801590a <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 80158e6:	4b0d      	ldr	r3, [pc, #52]	; (801591c <HAL_COMP_TriggerCallback+0x7c>)
 80158e8:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 80158ec:	4b0a      	ldr	r3, [pc, #40]	; (8015918 <HAL_COMP_TriggerCallback+0x78>)
 80158ee:	881a      	ldrh	r2, [r3, #0]
 80158f0:	4b0a      	ldr	r3, [pc, #40]	; (801591c <HAL_COMP_TriggerCallback+0x7c>)
 80158f2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80158f6:	1ad3      	subs	r3, r2, r3
 80158f8:	b29b      	uxth	r3, r3
 80158fa:	461a      	mov	r2, r3
 80158fc:	4807      	ldr	r0, [pc, #28]	; (801591c <HAL_COMP_TriggerCallback+0x7c>)
 80158fe:	f7fe f92d 	bl	8013b5c <enqueue_pulse>
		input0.rise_valid_ = 0;
 8015902:	4b06      	ldr	r3, [pc, #24]	; (801591c <HAL_COMP_TriggerCallback+0x7c>)
 8015904:	2200      	movs	r2, #0
 8015906:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 801590a:	bf00      	nop
 801590c:	3710      	adds	r7, #16
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}
 8015912:	bf00      	nop
 8015914:	200287c4 	.word	0x200287c4
 8015918:	20000b3a 	.word	0x20000b3a
 801591c:	20027bdc 	.word	0x20027bdc

08015920 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 8015920:	b5b0      	push	{r4, r5, r7, lr}
 8015922:	b086      	sub	sp, #24
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 8015928:	2101      	movs	r1, #1
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f008 fc4c 	bl	801e1c8 <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 8015930:	2101      	movs	r1, #1
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f008 fbd1 	bl	801e0da <HAL_TSC_GroupGetStatus>
 8015938:	4603      	mov	r3, r0
 801593a:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 801593c:	7dbb      	ldrb	r3, [r7, #22]
 801593e:	2b01      	cmp	r3, #1
 8015940:	f040 8115 	bne.w	8015b6e <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 8015944:	2101      	movs	r1, #1
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f008 fbe9 	bl	801e11e <HAL_TSC_GroupGetValue>
 801594c:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 801594e:	4ba0      	ldr	r3, [pc, #640]	; (8015bd0 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8015950:	781b      	ldrb	r3, [r3, #0]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d17d      	bne.n	8015a52 <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 8015956:	4b9f      	ldr	r3, [pc, #636]	; (8015bd4 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8015958:	881b      	ldrh	r3, [r3, #0]
 801595a:	2b64      	cmp	r3, #100	; 0x64
 801595c:	d83a      	bhi.n	80159d4 <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 801595e:	2300      	movs	r3, #0
 8015960:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 8015962:	4b9c      	ldr	r3, [pc, #624]	; (8015bd4 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8015964:	881b      	ldrh	r3, [r3, #0]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d108      	bne.n	801597c <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 801596a:	693b      	ldr	r3, [r7, #16]
 801596c:	ee07 3a90 	vmov	s15, r3
 8015970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015974:	4b98      	ldr	r3, [pc, #608]	; (8015bd8 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8015976:	edc3 7a00 	vstr	s15, [r3]
 801597a:	e024      	b.n	80159c6 <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 801597c:	6938      	ldr	r0, [r7, #16]
 801597e:	f7fa fd4b 	bl	8010418 <__aeabi_ui2d>
 8015982:	a38f      	add	r3, pc, #572	; (adr r3, 8015bc0 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8015984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015988:	f7fa fdc0 	bl	801050c <__aeabi_dmul>
 801598c:	4603      	mov	r3, r0
 801598e:	460c      	mov	r4, r1
 8015990:	4625      	mov	r5, r4
 8015992:	461c      	mov	r4, r3
 8015994:	4b90      	ldr	r3, [pc, #576]	; (8015bd8 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	4618      	mov	r0, r3
 801599a:	f7fa fd5f 	bl	801045c <__aeabi_f2d>
 801599e:	a38a      	add	r3, pc, #552	; (adr r3, 8015bc8 <HAL_TSC_ConvCpltCallback+0x2a8>)
 80159a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a4:	f7fa fdb2 	bl	801050c <__aeabi_dmul>
 80159a8:	4602      	mov	r2, r0
 80159aa:	460b      	mov	r3, r1
 80159ac:	4620      	mov	r0, r4
 80159ae:	4629      	mov	r1, r5
 80159b0:	f7fa fbf6 	bl	80101a0 <__adddf3>
 80159b4:	4603      	mov	r3, r0
 80159b6:	460c      	mov	r4, r1
 80159b8:	4618      	mov	r0, r3
 80159ba:	4621      	mov	r1, r4
 80159bc:	f7fb f856 	bl	8010a6c <__aeabi_d2f>
 80159c0:	4602      	mov	r2, r0
 80159c2:	4b85      	ldr	r3, [pc, #532]	; (8015bd8 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80159c4:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 80159c6:	4b83      	ldr	r3, [pc, #524]	; (8015bd4 <HAL_TSC_ConvCpltCallback+0x2b4>)
 80159c8:	881b      	ldrh	r3, [r3, #0]
 80159ca:	3301      	adds	r3, #1
 80159cc:	b29a      	uxth	r2, r3
 80159ce:	4b81      	ldr	r3, [pc, #516]	; (8015bd4 <HAL_TSC_ConvCpltCallback+0x2b4>)
 80159d0:	801a      	strh	r2, [r3, #0]
 80159d2:	e0ba      	b.n	8015b4a <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	ee07 3a90 	vmov	s15, r3
 80159da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80159de:	4b7e      	ldr	r3, [pc, #504]	; (8015bd8 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80159e0:	edd3 7a00 	vldr	s15, [r3]
 80159e4:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8015bdc <HAL_TSC_ConvCpltCallback+0x2bc>
 80159e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80159ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80159f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159f4:	bf94      	ite	ls
 80159f6:	2301      	movls	r3, #1
 80159f8:	2300      	movhi	r3, #0
 80159fa:	b2db      	uxtb	r3, r3
 80159fc:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 80159fe:	7dfb      	ldrb	r3, [r7, #23]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	f040 80a2 	bne.w	8015b4a <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8015a06:	6938      	ldr	r0, [r7, #16]
 8015a08:	f7fa fd06 	bl	8010418 <__aeabi_ui2d>
 8015a0c:	a36c      	add	r3, pc, #432	; (adr r3, 8015bc0 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8015a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a12:	f7fa fd7b 	bl	801050c <__aeabi_dmul>
 8015a16:	4603      	mov	r3, r0
 8015a18:	460c      	mov	r4, r1
 8015a1a:	4625      	mov	r5, r4
 8015a1c:	461c      	mov	r4, r3
 8015a1e:	4b6e      	ldr	r3, [pc, #440]	; (8015bd8 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7fa fd1a 	bl	801045c <__aeabi_f2d>
 8015a28:	a367      	add	r3, pc, #412	; (adr r3, 8015bc8 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8015a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a2e:	f7fa fd6d 	bl	801050c <__aeabi_dmul>
 8015a32:	4602      	mov	r2, r0
 8015a34:	460b      	mov	r3, r1
 8015a36:	4620      	mov	r0, r4
 8015a38:	4629      	mov	r1, r5
 8015a3a:	f7fa fbb1 	bl	80101a0 <__adddf3>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	460c      	mov	r4, r1
 8015a42:	4618      	mov	r0, r3
 8015a44:	4621      	mov	r1, r4
 8015a46:	f7fb f811 	bl	8010a6c <__aeabi_d2f>
 8015a4a:	4602      	mov	r2, r0
 8015a4c:	4b62      	ldr	r3, [pc, #392]	; (8015bd8 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8015a4e:	601a      	str	r2, [r3, #0]
 8015a50:	e07b      	b.n	8015b4a <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 8015a52:	4b63      	ldr	r3, [pc, #396]	; (8015be0 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8015a54:	881b      	ldrh	r3, [r3, #0]
 8015a56:	2b64      	cmp	r3, #100	; 0x64
 8015a58:	d83a      	bhi.n	8015ad0 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 8015a5e:	4b60      	ldr	r3, [pc, #384]	; (8015be0 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8015a60:	881b      	ldrh	r3, [r3, #0]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d108      	bne.n	8015a78 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 8015a66:	693b      	ldr	r3, [r7, #16]
 8015a68:	ee07 3a90 	vmov	s15, r3
 8015a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a70:	4b5c      	ldr	r3, [pc, #368]	; (8015be4 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015a72:	edc3 7a00 	vstr	s15, [r3]
 8015a76:	e024      	b.n	8015ac2 <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8015a78:	6938      	ldr	r0, [r7, #16]
 8015a7a:	f7fa fccd 	bl	8010418 <__aeabi_ui2d>
 8015a7e:	a350      	add	r3, pc, #320	; (adr r3, 8015bc0 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8015a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a84:	f7fa fd42 	bl	801050c <__aeabi_dmul>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	460c      	mov	r4, r1
 8015a8c:	4625      	mov	r5, r4
 8015a8e:	461c      	mov	r4, r3
 8015a90:	4b54      	ldr	r3, [pc, #336]	; (8015be4 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7fa fce1 	bl	801045c <__aeabi_f2d>
 8015a9a:	a34b      	add	r3, pc, #300	; (adr r3, 8015bc8 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8015a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa0:	f7fa fd34 	bl	801050c <__aeabi_dmul>
 8015aa4:	4602      	mov	r2, r0
 8015aa6:	460b      	mov	r3, r1
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	4629      	mov	r1, r5
 8015aac:	f7fa fb78 	bl	80101a0 <__adddf3>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	460c      	mov	r4, r1
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	4621      	mov	r1, r4
 8015ab8:	f7fa ffd8 	bl	8010a6c <__aeabi_d2f>
 8015abc:	4602      	mov	r2, r0
 8015abe:	4b49      	ldr	r3, [pc, #292]	; (8015be4 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015ac0:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 8015ac2:	4b47      	ldr	r3, [pc, #284]	; (8015be0 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8015ac4:	881b      	ldrh	r3, [r3, #0]
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	b29a      	uxth	r2, r3
 8015aca:	4b45      	ldr	r3, [pc, #276]	; (8015be0 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8015acc:	801a      	strh	r2, [r3, #0]
 8015ace:	e03c      	b.n	8015b4a <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	ee07 3a90 	vmov	s15, r3
 8015ad6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015ada:	4b42      	ldr	r3, [pc, #264]	; (8015be4 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015adc:	edd3 7a00 	vldr	s15, [r3]
 8015ae0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8015bdc <HAL_TSC_ConvCpltCallback+0x2bc>
 8015ae4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015ae8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015af0:	bf94      	ite	ls
 8015af2:	2301      	movls	r3, #1
 8015af4:	2300      	movhi	r3, #0
 8015af6:	b2db      	uxtb	r3, r3
 8015af8:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8015afa:	7dfb      	ldrb	r3, [r7, #23]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d124      	bne.n	8015b4a <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8015b00:	6938      	ldr	r0, [r7, #16]
 8015b02:	f7fa fc89 	bl	8010418 <__aeabi_ui2d>
 8015b06:	a32e      	add	r3, pc, #184	; (adr r3, 8015bc0 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8015b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b0c:	f7fa fcfe 	bl	801050c <__aeabi_dmul>
 8015b10:	4603      	mov	r3, r0
 8015b12:	460c      	mov	r4, r1
 8015b14:	4625      	mov	r5, r4
 8015b16:	461c      	mov	r4, r3
 8015b18:	4b32      	ldr	r3, [pc, #200]	; (8015be4 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f7fa fc9d 	bl	801045c <__aeabi_f2d>
 8015b22:	a329      	add	r3, pc, #164	; (adr r3, 8015bc8 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8015b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b28:	f7fa fcf0 	bl	801050c <__aeabi_dmul>
 8015b2c:	4602      	mov	r2, r0
 8015b2e:	460b      	mov	r3, r1
 8015b30:	4620      	mov	r0, r4
 8015b32:	4629      	mov	r1, r5
 8015b34:	f7fa fb34 	bl	80101a0 <__adddf3>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	460c      	mov	r4, r1
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	4621      	mov	r1, r4
 8015b40:	f7fa ff94 	bl	8010a6c <__aeabi_d2f>
 8015b44:	4602      	mov	r2, r0
 8015b46:	4b27      	ldr	r3, [pc, #156]	; (8015be4 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8015b48:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 8015b4a:	f000 fb47 	bl	80161dc <HAL_GetTick>
 8015b4e:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 8015b50:	4b1f      	ldr	r3, [pc, #124]	; (8015bd0 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	00db      	lsls	r3, r3, #3
 8015b56:	4a24      	ldr	r2, [pc, #144]	; (8015be8 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8015b58:	4413      	add	r3, r2
 8015b5a:	7df9      	ldrb	r1, [r7, #23]
 8015b5c:	68fa      	ldr	r2, [r7, #12]
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f000 f9f2 	bl	8015f48 <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 8015b64:	68fa      	ldr	r2, [r7, #12]
 8015b66:	4920      	ldr	r1, [pc, #128]	; (8015be8 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8015b68:	4820      	ldr	r0, [pc, #128]	; (8015bec <HAL_TSC_ConvCpltCallback+0x2cc>)
 8015b6a:	f000 f843 	bl	8015bf4 <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 8015b6e:	4b18      	ldr	r3, [pc, #96]	; (8015bd0 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d106      	bne.n	8015b84 <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 8015b76:	4b1e      	ldr	r3, [pc, #120]	; (8015bf0 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8015b78:	2280      	movs	r2, #128	; 0x80
 8015b7a:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 8015b7c:	4b14      	ldr	r3, [pc, #80]	; (8015bd0 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8015b7e:	2201      	movs	r2, #1
 8015b80:	701a      	strb	r2, [r3, #0]
 8015b82:	e005      	b.n	8015b90 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 8015b84:	4b1a      	ldr	r3, [pc, #104]	; (8015bf0 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8015b86:	2240      	movs	r2, #64	; 0x40
 8015b88:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 8015b8a:	4b11      	ldr	r3, [pc, #68]	; (8015bd0 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 8015b90:	4917      	ldr	r1, [pc, #92]	; (8015bf0 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f008 fad5 	bl	801e142 <HAL_TSC_IOConfig>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d001      	beq.n	8015ba2 <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 8015b9e:	f7fe fb89 	bl	80142b4 <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	f008 fa3c 	bl	801e020 <HAL_TSC_Start_IT>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d001      	beq.n	8015bb2 <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 8015bae:	f7fe fb81 	bl	80142b4 <Error_Handler>
	}

}
 8015bb2:	bf00      	nop
 8015bb4:	3718      	adds	r7, #24
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8015bba:	bf00      	nop
 8015bbc:	f3af 8000 	nop.w
 8015bc0:	47ae147b 	.word	0x47ae147b
 8015bc4:	3f847ae1 	.word	0x3f847ae1
 8015bc8:	7ae147ae 	.word	0x7ae147ae
 8015bcc:	3fefae14 	.word	0x3fefae14
 8015bd0:	20000b3c 	.word	0x20000b3c
 8015bd4:	20000b50 	.word	0x20000b50
 8015bd8:	20028810 	.word	0x20028810
 8015bdc:	42700000 	.word	0x42700000
 8015be0:	20000b52 	.word	0x20000b52
 8015be4:	20028834 	.word	0x20028834
 8015be8:	20000b40 	.word	0x20000b40
 8015bec:	20028818 	.word	0x20028818
 8015bf0:	20028804 	.word	0x20028804

08015bf4 <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b08c      	sub	sp, #48	; 0x30
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	60f8      	str	r0, [r7, #12]
 8015bfc:	60b9      	str	r1, [r7, #8]
 8015bfe:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	7e1b      	ldrb	r3, [r3, #24]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d123      	bne.n	8015c50 <process_touches+0x5c>
		if (dbs[0].clean_out) {
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	795b      	ldrb	r3, [r3, #5]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d00c      	beq.n	8015c2a <process_touches+0x36>
			// front button is held

			self->touch_state = OnePressed;
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	2201      	movs	r2, #1
 8015c14:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	2200      	movs	r2, #0
 8015c1a:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	687a      	ldr	r2, [r7, #4]
 8015c20:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 8015c22:	4b99      	ldr	r3, [pc, #612]	; (8015e88 <process_touches+0x294>)
 8015c24:	2205      	movs	r2, #5
 8015c26:	701a      	strb	r2, [r3, #0]
 8015c28:	e126      	b.n	8015e78 <process_touches+0x284>

		} else if (dbs[1].clean_out) {
 8015c2a:	68bb      	ldr	r3, [r7, #8]
 8015c2c:	3308      	adds	r3, #8
 8015c2e:	795b      	ldrb	r3, [r3, #5]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	f000 8121 	beq.w	8015e78 <process_touches+0x284>
			// back button is held

			self->touch_state = OnePressed;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	2201      	movs	r2, #1
 8015c3a:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	2201      	movs	r2, #1
 8015c40:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	687a      	ldr	r2, [r7, #4]
 8015c46:	605a      	str	r2, [r3, #4]
			action = BackHold;
 8015c48:	4b8f      	ldr	r3, [pc, #572]	; (8015e88 <process_touches+0x294>)
 8015c4a:	2206      	movs	r2, #6
 8015c4c:	701a      	strb	r2, [r3, #0]
 8015c4e:	e113      	b.n	8015e78 <process_touches+0x284>
		}
	} else if (self->touch_state == OnePressed) {
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	7e1b      	ldrb	r3, [r3, #24]
 8015c54:	2b01      	cmp	r3, #1
 8015c56:	d12d      	bne.n	8015cb4 <process_touches+0xc0>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	f1c3 0301 	rsb	r3, r3, #1
 8015c60:	00db      	lsls	r3, r3, #3
 8015c62:	68ba      	ldr	r2, [r7, #8]
 8015c64:	4413      	add	r3, r2
 8015c66:	795b      	ldrb	r3, [r3, #5]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d010      	beq.n	8015c8e <process_touches+0x9a>
			self->touch_state = TwoPressed;
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	2202      	movs	r2, #2
 8015c70:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	f1c3 0301 	rsb	r3, r3, #1
 8015c7a:	b2da      	uxtb	r2, r3
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	687a      	ldr	r2, [r7, #4]
 8015c84:	611a      	str	r2, [r3, #16]
			action = BothHold;
 8015c86:	4b80      	ldr	r3, [pc, #512]	; (8015e88 <process_touches+0x294>)
 8015c88:	2207      	movs	r2, #7
 8015c8a:	701a      	strb	r2, [r3, #0]
 8015c8c:	e0f4      	b.n	8015e78 <process_touches+0x284>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	781b      	ldrb	r3, [r3, #0]
 8015c92:	00db      	lsls	r3, r3, #3
 8015c94:	68ba      	ldr	r2, [r7, #8]
 8015c96:	4413      	add	r3, r2
 8015c98:	795b      	ldrb	r3, [r3, #5]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	f040 80ec 	bne.w	8015e78 <process_touches+0x284>
			self->touch_state = OneReleasedNoPressed;
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	2203      	movs	r2, #3
 8015ca4:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	687a      	ldr	r2, [r7, #4]
 8015caa:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 8015cac:	4b76      	ldr	r3, [pc, #472]	; (8015e88 <process_touches+0x294>)
 8015cae:	2208      	movs	r2, #8
 8015cb0:	701a      	strb	r2, [r3, #0]
 8015cb2:	e0e1      	b.n	8015e78 <process_touches+0x284>

		}
	} else if (self->touch_state == TwoPressed) {
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	7e1b      	ldrb	r3, [r3, #24]
 8015cb8:	2b02      	cmp	r3, #2
 8015cba:	d11e      	bne.n	8015cfa <process_touches+0x106>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	781b      	ldrb	r3, [r3, #0]
 8015cc0:	00db      	lsls	r3, r3, #3
 8015cc2:	68ba      	ldr	r2, [r7, #8]
 8015cc4:	4413      	add	r3, r2
 8015cc6:	795b      	ldrb	r3, [r3, #5]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d106      	bne.n	8015cda <process_touches+0xe6>
			self->touch_state = FirstReleasedSecondPressed;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	2204      	movs	r2, #4
 8015cd0:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	687a      	ldr	r2, [r7, #4]
 8015cd6:	609a      	str	r2, [r3, #8]
 8015cd8:	e0ce      	b.n	8015e78 <process_touches+0x284>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	7b1b      	ldrb	r3, [r3, #12]
 8015cde:	00db      	lsls	r3, r3, #3
 8015ce0:	68ba      	ldr	r2, [r7, #8]
 8015ce2:	4413      	add	r3, r2
 8015ce4:	795b      	ldrb	r3, [r3, #5]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	f040 80c6 	bne.w	8015e78 <process_touches+0x284>
			self->touch_state = SecondReleasedFirstPressed;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	2205      	movs	r2, #5
 8015cf0:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	687a      	ldr	r2, [r7, #4]
 8015cf6:	615a      	str	r2, [r3, #20]
 8015cf8:	e0be      	b.n	8015e78 <process_touches+0x284>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	7e1b      	ldrb	r3, [r3, #24]
 8015cfe:	2b03      	cmp	r3, #3
 8015d00:	d134      	bne.n	8015d6c <process_touches+0x178>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	f1c3 0301 	rsb	r3, r3, #1
 8015d0a:	00db      	lsls	r3, r3, #3
 8015d0c:	68ba      	ldr	r2, [r7, #8]
 8015d0e:	4413      	add	r3, r2
 8015d10:	795b      	ldrb	r3, [r3, #5]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d00d      	beq.n	8015d32 <process_touches+0x13e>
			self->touch_state = FirstReleasedSecondPressed;
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	2204      	movs	r2, #4
 8015d1a:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	781b      	ldrb	r3, [r3, #0]
 8015d20:	f1c3 0301 	rsb	r3, r3, #1
 8015d24:	b2da      	uxtb	r2, r3
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	687a      	ldr	r2, [r7, #4]
 8015d2e:	611a      	str	r2, [r3, #16]
 8015d30:	e0a2      	b.n	8015e78 <process_touches+0x284>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	689b      	ldr	r3, [r3, #8]
 8015d36:	687a      	ldr	r2, [r7, #4]
 8015d38:	1ad3      	subs	r3, r2, r3
 8015d3a:	2b0a      	cmp	r3, #10
 8015d3c:	f240 809c 	bls.w	8015e78 <process_touches+0x284>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	689a      	ldr	r2, [r3, #8]
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	1ad3      	subs	r3, r2, r3
 8015d4a:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 8015d4c:	697b      	ldr	r3, [r7, #20]
 8015d4e:	2b28      	cmp	r3, #40	; 0x28
 8015d50:	d905      	bls.n	8015d5e <process_touches+0x16a>
 8015d52:	697b      	ldr	r3, [r7, #20]
 8015d54:	2bc7      	cmp	r3, #199	; 0xc7
 8015d56:	d802      	bhi.n	8015d5e <process_touches+0x16a>
				//Register a tap
				action = BothRelease;
 8015d58:	4b4b      	ldr	r3, [pc, #300]	; (8015e88 <process_touches+0x294>)
 8015d5a:	2208      	movs	r2, #8
 8015d5c:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8015d5e:	4b4b      	ldr	r3, [pc, #300]	; (8015e8c <process_touches+0x298>)
 8015d60:	2200      	movs	r2, #0
 8015d62:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	2200      	movs	r2, #0
 8015d68:	761a      	strb	r2, [r3, #24]
 8015d6a:	e085      	b.n	8015e78 <process_touches+0x284>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	7e1b      	ldrb	r3, [r3, #24]
 8015d70:	2b04      	cmp	r3, #4
 8015d72:	d148      	bne.n	8015e06 <process_touches+0x212>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	7b1b      	ldrb	r3, [r3, #12]
 8015d78:	00db      	lsls	r3, r3, #3
 8015d7a:	68ba      	ldr	r2, [r7, #8]
 8015d7c:	4413      	add	r3, r2
 8015d7e:	795b      	ldrb	r3, [r3, #5]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d179      	bne.n	8015e78 <process_touches+0x284>
			self->touch_state = Idle;
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	2200      	movs	r2, #0
 8015d88:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	687a      	ldr	r2, [r7, #4]
 8015d8e:	615a      	str	r2, [r3, #20]
			action = None;
 8015d90:	4b3d      	ldr	r3, [pc, #244]	; (8015e88 <process_touches+0x294>)
 8015d92:	2200      	movs	r2, #0
 8015d94:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	691a      	ldr	r2, [r3, #16]
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	685b      	ldr	r3, [r3, #4]
 8015d9e:	1ad3      	subs	r3, r2, r3
 8015da0:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	695a      	ldr	r2, [r3, #20]
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	689b      	ldr	r3, [r3, #8]
 8015daa:	1ad3      	subs	r3, r2, r3
 8015dac:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	695a      	ldr	r2, [r3, #20]
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	685b      	ldr	r3, [r3, #4]
 8015db6:	1ad3      	subs	r3, r2, r3
 8015db8:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8015dba:	6a3b      	ldr	r3, [r7, #32]
 8015dbc:	2b28      	cmp	r3, #40	; 0x28
 8015dbe:	d80c      	bhi.n	8015dda <process_touches+0x1e6>
 8015dc0:	69fb      	ldr	r3, [r7, #28]
 8015dc2:	2b28      	cmp	r3, #40	; 0x28
 8015dc4:	d809      	bhi.n	8015dda <process_touches+0x1e6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8015dc6:	69bb      	ldr	r3, [r7, #24]
 8015dc8:	2b28      	cmp	r3, #40	; 0x28
 8015dca:	d906      	bls.n	8015dda <process_touches+0x1e6>
 8015dcc:	69bb      	ldr	r3, [r7, #24]
 8015dce:	2bc7      	cmp	r3, #199	; 0xc7
 8015dd0:	d803      	bhi.n	8015dda <process_touches+0x1e6>
				//Register a tap
				action = BothRelease;
 8015dd2:	4b2d      	ldr	r3, [pc, #180]	; (8015e88 <process_touches+0x294>)
 8015dd4:	2208      	movs	r2, #8
 8015dd6:	701a      	strb	r2, [r3, #0]
 8015dd8:	e011      	b.n	8015dfe <process_touches+0x20a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 8015dda:	6a3b      	ldr	r3, [r7, #32]
 8015ddc:	2b28      	cmp	r3, #40	; 0x28
 8015dde:	d90e      	bls.n	8015dfe <process_touches+0x20a>
 8015de0:	69fb      	ldr	r3, [r7, #28]
 8015de2:	2b28      	cmp	r3, #40	; 0x28
 8015de4:	d90b      	bls.n	8015dfe <process_touches+0x20a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	781b      	ldrb	r3, [r3, #0]
 8015dea:	005b      	lsls	r3, r3, #1
 8015dec:	b25a      	sxtb	r2, r3
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	7b1b      	ldrb	r3, [r3, #12]
 8015df2:	b25b      	sxtb	r3, r3
 8015df4:	4313      	orrs	r3, r2
 8015df6:	b25b      	sxtb	r3, r3
 8015df8:	b2da      	uxtb	r2, r3
 8015dfa:	4b23      	ldr	r3, [pc, #140]	; (8015e88 <process_touches+0x294>)
 8015dfc:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2200      	movs	r2, #0
 8015e02:	761a      	strb	r2, [r3, #24]
 8015e04:	e038      	b.n	8015e78 <process_touches+0x284>
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	7e1b      	ldrb	r3, [r3, #24]
 8015e0a:	2b05      	cmp	r3, #5
 8015e0c:	d134      	bne.n	8015e78 <process_touches+0x284>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	00db      	lsls	r3, r3, #3
 8015e14:	68ba      	ldr	r2, [r7, #8]
 8015e16:	4413      	add	r3, r2
 8015e18:	795b      	ldrb	r3, [r3, #5]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d12c      	bne.n	8015e78 <process_touches+0x284>
			self->touch_state = Idle;
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	2200      	movs	r2, #0
 8015e22:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	687a      	ldr	r2, [r7, #4]
 8015e28:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	691a      	ldr	r2, [r3, #16]
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	685b      	ldr	r3, [r3, #4]
 8015e32:	1ad3      	subs	r3, r2, r3
 8015e34:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	689a      	ldr	r2, [r3, #8]
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	695b      	ldr	r3, [r3, #20]
 8015e3e:	1ad3      	subs	r3, r2, r3
 8015e40:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	689a      	ldr	r2, [r3, #8]
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	685b      	ldr	r3, [r3, #4]
 8015e4a:	1ad3      	subs	r3, r2, r3
 8015e4c:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8015e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e50:	2b28      	cmp	r3, #40	; 0x28
 8015e52:	d80b      	bhi.n	8015e6c <process_touches+0x278>
 8015e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e56:	2b28      	cmp	r3, #40	; 0x28
 8015e58:	d808      	bhi.n	8015e6c <process_touches+0x278>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8015e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e5c:	2b28      	cmp	r3, #40	; 0x28
 8015e5e:	d905      	bls.n	8015e6c <process_touches+0x278>
 8015e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e62:	2bc7      	cmp	r3, #199	; 0xc7
 8015e64:	d802      	bhi.n	8015e6c <process_touches+0x278>
				//Register a tap
				action = BothRelease;
 8015e66:	4b08      	ldr	r3, [pc, #32]	; (8015e88 <process_touches+0x294>)
 8015e68:	2208      	movs	r2, #8
 8015e6a:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8015e6c:	4b07      	ldr	r3, [pc, #28]	; (8015e8c <process_touches+0x298>)
 8015e6e:	2200      	movs	r2, #0
 8015e70:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	2200      	movs	r2, #0
 8015e76:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 8015e78:	4b03      	ldr	r3, [pc, #12]	; (8015e88 <process_touches+0x294>)
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d107      	bne.n	8015e90 <process_touches+0x29c>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8015e80:	4b02      	ldr	r3, [pc, #8]	; (8015e8c <process_touches+0x298>)
 8015e82:	2200      	movs	r2, #0
 8015e84:	601a      	str	r2, [r3, #0]
 8015e86:	e042      	b.n	8015f0e <process_touches+0x31a>
 8015e88:	20000b58 	.word	0x20000b58
 8015e8c:	20028814 	.word	0x20028814

	}else if(action == SwipeForward){
 8015e90:	4b29      	ldr	r3, [pc, #164]	; (8015f38 <process_touches+0x344>)
 8015e92:	781b      	ldrb	r3, [r3, #0]
 8015e94:	2b01      	cmp	r3, #1
 8015e96:	d103      	bne.n	8015ea0 <process_touches+0x2ac>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 8015e98:	4b28      	ldr	r3, [pc, #160]	; (8015f3c <process_touches+0x348>)
 8015e9a:	2203      	movs	r2, #3
 8015e9c:	601a      	str	r2, [r3, #0]
 8015e9e:	e036      	b.n	8015f0e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x03 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x03 << 4;
	}else if(action == SwipeBackward){
 8015ea0:	4b25      	ldr	r3, [pc, #148]	; (8015f38 <process_touches+0x344>)
 8015ea2:	781b      	ldrb	r3, [r3, #0]
 8015ea4:	2b02      	cmp	r3, #2
 8015ea6:	d103      	bne.n	8015eb0 <process_touches+0x2bc>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 8015ea8:	4b24      	ldr	r3, [pc, #144]	; (8015f3c <process_touches+0x348>)
 8015eaa:	2241      	movs	r2, #65	; 0x41
 8015eac:	601a      	str	r2, [r3, #0]
 8015eae:	e02e      	b.n	8015f0e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == FrontRelease){
 8015eb0:	4b21      	ldr	r3, [pc, #132]	; (8015f38 <process_touches+0x344>)
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	2b03      	cmp	r3, #3
 8015eb6:	d103      	bne.n	8015ec0 <process_touches+0x2cc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8015eb8:	4b20      	ldr	r3, [pc, #128]	; (8015f3c <process_touches+0x348>)
 8015eba:	2200      	movs	r2, #0
 8015ebc:	601a      	str	r2, [r3, #0]
 8015ebe:	e026      	b.n	8015f0e <process_touches+0x31a>
	}else if(action == BackRelease){
 8015ec0:	4b1d      	ldr	r3, [pc, #116]	; (8015f38 <process_touches+0x344>)
 8015ec2:	781b      	ldrb	r3, [r3, #0]
 8015ec4:	2b04      	cmp	r3, #4
 8015ec6:	d103      	bne.n	8015ed0 <process_touches+0x2dc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8015ec8:	4b1c      	ldr	r3, [pc, #112]	; (8015f3c <process_touches+0x348>)
 8015eca:	2200      	movs	r2, #0
 8015ecc:	601a      	str	r2, [r3, #0]
 8015ece:	e01e      	b.n	8015f0e <process_touches+0x31a>
	}else if(action == FrontHold){
 8015ed0:	4b19      	ldr	r3, [pc, #100]	; (8015f38 <process_touches+0x344>)
 8015ed2:	781b      	ldrb	r3, [r3, #0]
 8015ed4:	2b05      	cmp	r3, #5
 8015ed6:	d103      	bne.n	8015ee0 <process_touches+0x2ec>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 8015ed8:	4b18      	ldr	r3, [pc, #96]	; (8015f3c <process_touches+0x348>)
 8015eda:	2201      	movs	r2, #1
 8015edc:	601a      	str	r2, [r3, #0]
 8015ede:	e016      	b.n	8015f0e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x01 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x01 << 4;
	}else if(action == BackHold){
 8015ee0:	4b15      	ldr	r3, [pc, #84]	; (8015f38 <process_touches+0x344>)
 8015ee2:	781b      	ldrb	r3, [r3, #0]
 8015ee4:	2b06      	cmp	r3, #6
 8015ee6:	d103      	bne.n	8015ef0 <process_touches+0x2fc>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 8015ee8:	4b14      	ldr	r3, [pc, #80]	; (8015f3c <process_touches+0x348>)
 8015eea:	2202      	movs	r2, #2
 8015eec:	601a      	str	r2, [r3, #0]
 8015eee:	e00e      	b.n	8015f0e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x02 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x02 << 4;
	}else if(action == BothHold){
 8015ef0:	4b11      	ldr	r3, [pc, #68]	; (8015f38 <process_touches+0x344>)
 8015ef2:	781b      	ldrb	r3, [r3, #0]
 8015ef4:	2b07      	cmp	r3, #7
 8015ef6:	d103      	bne.n	8015f00 <process_touches+0x30c>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 8015ef8:	4b10      	ldr	r3, [pc, #64]	; (8015f3c <process_touches+0x348>)
 8015efa:	2240      	movs	r2, #64	; 0x40
 8015efc:	601a      	str	r2, [r3, #0]
 8015efe:	e006      	b.n	8015f0e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == BothRelease){
 8015f00:	4b0d      	ldr	r3, [pc, #52]	; (8015f38 <process_touches+0x344>)
 8015f02:	781b      	ldrb	r3, [r3, #0]
 8015f04:	2b08      	cmp	r3, #8
 8015f06:	d102      	bne.n	8015f0e <process_touches+0x31a>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8015f08:	4b0c      	ldr	r3, [pc, #48]	; (8015f3c <process_touches+0x348>)
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 8015f0e:	4b0c      	ldr	r3, [pc, #48]	; (8015f40 <process_touches+0x34c>)
 8015f10:	681a      	ldr	r2, [r3, #0]
 8015f12:	4b0a      	ldr	r3, [pc, #40]	; (8015f3c <process_touches+0x348>)
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	429a      	cmp	r2, r3
 8015f18:	d00a      	beq.n	8015f30 <process_touches+0x33c>
		prev_msg = lightsSimpleMessageReceivedTouch;
 8015f1a:	4b08      	ldr	r3, [pc, #32]	; (8015f3c <process_touches+0x348>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	4a08      	ldr	r2, [pc, #32]	; (8015f40 <process_touches+0x34c>)
 8015f20:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 8015f22:	4b08      	ldr	r3, [pc, #32]	; (8015f44 <process_touches+0x350>)
 8015f24:	6818      	ldr	r0, [r3, #0]
 8015f26:	2300      	movs	r3, #0
 8015f28:	2200      	movs	r2, #0
 8015f2a:	4904      	ldr	r1, [pc, #16]	; (8015f3c <process_touches+0x348>)
 8015f2c:	f009 f8ae 	bl	801f08c <osMessageQueuePut>

	}

}
 8015f30:	bf00      	nop
 8015f32:	3730      	adds	r7, #48	; 0x30
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	20000b58 	.word	0x20000b58
 8015f3c:	20028814 	.word	0x20028814
 8015f40:	20000b54 	.word	0x20000b54
 8015f44:	20027bcc 	.word	0x20027bcc

08015f48 <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 8015f48:	b480      	push	{r7}
 8015f4a:	b085      	sub	sp, #20
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	60f8      	str	r0, [r7, #12]
 8015f50:	460b      	mov	r3, r1
 8015f52:	607a      	str	r2, [r7, #4]
 8015f54:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	791b      	ldrb	r3, [r3, #4]
 8015f5a:	7afa      	ldrb	r2, [r7, #11]
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	d006      	beq.n	8015f6e <debounce+0x26>
		self->input = noisy_in;
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	7afa      	ldrb	r2, [r7, #11]
 8015f64:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	687a      	ldr	r2, [r7, #4]
 8015f6a:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 8015f6c:	e009      	b.n	8015f82 <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	687a      	ldr	r2, [r7, #4]
 8015f74:	1ad3      	subs	r3, r2, r3
 8015f76:	2b1e      	cmp	r3, #30
 8015f78:	d903      	bls.n	8015f82 <debounce+0x3a>
		self->clean_out = self->input;
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	791a      	ldrb	r2, [r3, #4]
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	715a      	strb	r2, [r3, #5]
}
 8015f82:	bf00      	nop
 8015f84:	3714      	adds	r7, #20
 8015f86:	46bd      	mov	sp, r7
 8015f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8c:	4770      	bx	lr

08015f8e <LL_AHB1_GRP1_EnableClock>:
{
 8015f8e:	b480      	push	{r7}
 8015f90:	b085      	sub	sp, #20
 8015f92:	af00      	add	r7, sp, #0
 8015f94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8015f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015f9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	4313      	orrs	r3, r2
 8015fa4:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8015fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	4013      	ands	r3, r2
 8015fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015fb2:	68fb      	ldr	r3, [r7, #12]
}
 8015fb4:	bf00      	nop
 8015fb6:	3714      	adds	r7, #20
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbe:	4770      	bx	lr

08015fc0 <LL_AHB2_GRP1_EnableClock>:
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b085      	sub	sp, #20
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8015fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015fcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	4313      	orrs	r3, r2
 8015fd6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8015fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	4013      	ands	r3, r2
 8015fe2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015fe4:	68fb      	ldr	r3, [r7, #12]
}
 8015fe6:	bf00      	nop
 8015fe8:	3714      	adds	r7, #20
 8015fea:	46bd      	mov	sp, r7
 8015fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff0:	4770      	bx	lr
	...

08015ff4 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 8015ff8:	4b1d      	ldr	r3, [pc, #116]	; (8016070 <MX_TSC_Init+0x7c>)
 8015ffa:	4a1e      	ldr	r2, [pc, #120]	; (8016074 <MX_TSC_Init+0x80>)
 8015ffc:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 8015ffe:	4b1c      	ldr	r3, [pc, #112]	; (8016070 <MX_TSC_Init+0x7c>)
 8016000:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8016004:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 8016006:	4b1a      	ldr	r3, [pc, #104]	; (8016070 <MX_TSC_Init+0x7c>)
 8016008:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 801600c:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 801600e:	4b18      	ldr	r3, [pc, #96]	; (8016070 <MX_TSC_Init+0x7c>)
 8016010:	2200      	movs	r2, #0
 8016012:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 8016014:	4b16      	ldr	r3, [pc, #88]	; (8016070 <MX_TSC_Init+0x7c>)
 8016016:	2201      	movs	r2, #1
 8016018:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 801601a:	4b15      	ldr	r3, [pc, #84]	; (8016070 <MX_TSC_Init+0x7c>)
 801601c:	2200      	movs	r2, #0
 801601e:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8016020:	4b13      	ldr	r3, [pc, #76]	; (8016070 <MX_TSC_Init+0x7c>)
 8016022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016026:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 8016028:	4b11      	ldr	r3, [pc, #68]	; (8016070 <MX_TSC_Init+0x7c>)
 801602a:	22c0      	movs	r2, #192	; 0xc0
 801602c:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 801602e:	4b10      	ldr	r3, [pc, #64]	; (8016070 <MX_TSC_Init+0x7c>)
 8016030:	2200      	movs	r2, #0
 8016032:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8016034:	4b0e      	ldr	r3, [pc, #56]	; (8016070 <MX_TSC_Init+0x7c>)
 8016036:	2200      	movs	r2, #0
 8016038:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 801603a:	4b0d      	ldr	r3, [pc, #52]	; (8016070 <MX_TSC_Init+0x7c>)
 801603c:	2200      	movs	r2, #0
 801603e:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 8016040:	4b0b      	ldr	r3, [pc, #44]	; (8016070 <MX_TSC_Init+0x7c>)
 8016042:	2200      	movs	r2, #0
 8016044:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 8016048:	4b09      	ldr	r3, [pc, #36]	; (8016070 <MX_TSC_Init+0x7c>)
 801604a:	22c0      	movs	r2, #192	; 0xc0
 801604c:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 801604e:	4b08      	ldr	r3, [pc, #32]	; (8016070 <MX_TSC_Init+0x7c>)
 8016050:	2200      	movs	r2, #0
 8016052:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 8016054:	4b06      	ldr	r3, [pc, #24]	; (8016070 <MX_TSC_Init+0x7c>)
 8016056:	2210      	movs	r2, #16
 8016058:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 801605a:	4805      	ldr	r0, [pc, #20]	; (8016070 <MX_TSC_Init+0x7c>)
 801605c:	f007 ff60 	bl	801df20 <HAL_TSC_Init>
 8016060:	4603      	mov	r3, r0
 8016062:	2b00      	cmp	r3, #0
 8016064:	d001      	beq.n	801606a <MX_TSC_Init+0x76>
  {
    Error_Handler();
 8016066:	f7fe f925 	bl	80142b4 <Error_Handler>
  }

}
 801606a:	bf00      	nop
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	20028838 	.word	0x20028838
 8016074:	40024000 	.word	0x40024000

08016078 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b088      	sub	sp, #32
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016080:	f107 030c 	add.w	r3, r7, #12
 8016084:	2200      	movs	r2, #0
 8016086:	601a      	str	r2, [r3, #0]
 8016088:	605a      	str	r2, [r3, #4]
 801608a:	609a      	str	r2, [r3, #8]
 801608c:	60da      	str	r2, [r3, #12]
 801608e:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	4a1a      	ldr	r2, [pc, #104]	; (8016100 <HAL_TSC_MspInit+0x88>)
 8016096:	4293      	cmp	r3, r2
 8016098:	d12e      	bne.n	80160f8 <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 801609a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801609e:	f7ff ff76 	bl	8015f8e <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80160a2:	2002      	movs	r0, #2
 80160a4:	f7ff ff8c 	bl	8015fc0 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80160a8:	2310      	movs	r3, #16
 80160aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80160ac:	2312      	movs	r3, #18
 80160ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80160b0:	2300      	movs	r3, #0
 80160b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80160b4:	2300      	movs	r3, #0
 80160b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80160b8:	2309      	movs	r3, #9
 80160ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80160bc:	f107 030c 	add.w	r3, r7, #12
 80160c0:	4619      	mov	r1, r3
 80160c2:	4810      	ldr	r0, [pc, #64]	; (8016104 <HAL_TSC_MspInit+0x8c>)
 80160c4:	f002 fb28 	bl	8018718 <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80160c8:	23c0      	movs	r3, #192	; 0xc0
 80160ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80160cc:	2302      	movs	r3, #2
 80160ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80160d0:	2300      	movs	r3, #0
 80160d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80160d4:	2300      	movs	r3, #0
 80160d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80160d8:	2309      	movs	r3, #9
 80160da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80160dc:	f107 030c 	add.w	r3, r7, #12
 80160e0:	4619      	mov	r1, r3
 80160e2:	4808      	ldr	r0, [pc, #32]	; (8016104 <HAL_TSC_MspInit+0x8c>)
 80160e4:	f002 fb18 	bl	8018718 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 80160e8:	2200      	movs	r2, #0
 80160ea:	2105      	movs	r1, #5
 80160ec:	2027      	movs	r0, #39	; 0x27
 80160ee:	f001 fda8 	bl	8017c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 80160f2:	2027      	movs	r0, #39	; 0x27
 80160f4:	f001 fdbf 	bl	8017c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 80160f8:	bf00      	nop
 80160fa:	3720      	adds	r7, #32
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd80      	pop	{r7, pc}
 8016100:	40024000 	.word	0x40024000
 8016104:	48000400 	.word	0x48000400

08016108 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8016108:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801610a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801610c:	3304      	adds	r3, #4

0801610e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801610e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8016110:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8016112:	d3f9      	bcc.n	8016108 <CopyDataInit>
  bx lr
 8016114:	4770      	bx	lr

08016116 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8016116:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8016118:	3004      	adds	r0, #4

0801611a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 801611a:	4288      	cmp	r0, r1
  bcc FillZerobss
 801611c:	d3fb      	bcc.n	8016116 <FillZerobss>
  bx lr
 801611e:	4770      	bx	lr

08016120 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8016120:	480c      	ldr	r0, [pc, #48]	; (8016154 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8016122:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8016124:	480c      	ldr	r0, [pc, #48]	; (8016158 <LoopForever+0x8>)
 8016126:	490d      	ldr	r1, [pc, #52]	; (801615c <LoopForever+0xc>)
 8016128:	4a0d      	ldr	r2, [pc, #52]	; (8016160 <LoopForever+0x10>)
 801612a:	2300      	movs	r3, #0
 801612c:	f7ff ffef 	bl	801610e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8016130:	480c      	ldr	r0, [pc, #48]	; (8016164 <LoopForever+0x14>)
 8016132:	490d      	ldr	r1, [pc, #52]	; (8016168 <LoopForever+0x18>)
 8016134:	2300      	movs	r3, #0
 8016136:	f7ff fff0 	bl	801611a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 801613a:	480c      	ldr	r0, [pc, #48]	; (801616c <LoopForever+0x1c>)
 801613c:	490c      	ldr	r1, [pc, #48]	; (8016170 <LoopForever+0x20>)
 801613e:	2300      	movs	r3, #0
 8016140:	f7ff ffeb 	bl	801611a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8016144:	f7ff f97e 	bl	8015444 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8016148:	f010 fd48 	bl	8026bdc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 801614c:	f7fd ffda 	bl	8014104 <main>

08016150 <LoopForever>:

LoopForever:
  b LoopForever
 8016150:	e7fe      	b.n	8016150 <LoopForever>
 8016152:	0000      	.short	0x0000
Reset_Handler:  ldr   r0, =_estack
 8016154:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8016158:	20000004 	.word	0x20000004
 801615c:	200001ac 	.word	0x200001ac
 8016160:	080295e0 	.word	0x080295e0
  INIT_BSS _sbss, _ebss
 8016164:	20000260 	.word	0x20000260
 8016168:	200289bc 	.word	0x200289bc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 801616c:	200300c4 	.word	0x200300c4
 8016170:	20030b5b 	.word	0x20030b5b

08016174 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8016174:	e7fe      	b.n	8016174 <ADC1_IRQHandler>
	...

08016178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b082      	sub	sp, #8
 801617c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801617e:	2300      	movs	r3, #0
 8016180:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016182:	4b0c      	ldr	r3, [pc, #48]	; (80161b4 <HAL_Init+0x3c>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	4a0b      	ldr	r2, [pc, #44]	; (80161b4 <HAL_Init+0x3c>)
 8016188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801618c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801618e:	2003      	movs	r0, #3
 8016190:	f001 fd4c 	bl	8017c2c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8016194:	2000      	movs	r0, #0
 8016196:	f7ff f885 	bl	80152a4 <HAL_InitTick>
 801619a:	4603      	mov	r3, r0
 801619c:	2b00      	cmp	r3, #0
 801619e:	d002      	beq.n	80161a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80161a0:	2301      	movs	r3, #1
 80161a2:	71fb      	strb	r3, [r7, #7]
 80161a4:	e001      	b.n	80161aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80161a6:	f7ff f84c 	bl	8015242 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80161aa:	79fb      	ldrb	r3, [r7, #7]
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	3708      	adds	r7, #8
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bd80      	pop	{r7, pc}
 80161b4:	58004000 	.word	0x58004000

080161b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80161b8:	b480      	push	{r7}
 80161ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80161bc:	4b05      	ldr	r3, [pc, #20]	; (80161d4 <HAL_IncTick+0x1c>)
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	4b05      	ldr	r3, [pc, #20]	; (80161d8 <HAL_IncTick+0x20>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	4413      	add	r3, r2
 80161c6:	4a03      	ldr	r2, [pc, #12]	; (80161d4 <HAL_IncTick+0x1c>)
 80161c8:	6013      	str	r3, [r2, #0]
}
 80161ca:	bf00      	nop
 80161cc:	46bd      	mov	sp, r7
 80161ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d2:	4770      	bx	lr
 80161d4:	2002887c 	.word	0x2002887c
 80161d8:	20000080 	.word	0x20000080

080161dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80161dc:	b480      	push	{r7}
 80161de:	af00      	add	r7, sp, #0
  return uwTick;
 80161e0:	4b03      	ldr	r3, [pc, #12]	; (80161f0 <HAL_GetTick+0x14>)
 80161e2:	681b      	ldr	r3, [r3, #0]
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	46bd      	mov	sp, r7
 80161e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ec:	4770      	bx	lr
 80161ee:	bf00      	nop
 80161f0:	2002887c 	.word	0x2002887c

080161f4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80161f4:	b480      	push	{r7}
 80161f6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80161f8:	4b03      	ldr	r3, [pc, #12]	; (8016208 <HAL_GetTickPrio+0x14>)
 80161fa:	681b      	ldr	r3, [r3, #0]
}
 80161fc:	4618      	mov	r0, r3
 80161fe:	46bd      	mov	sp, r7
 8016200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016204:	4770      	bx	lr
 8016206:	bf00      	nop
 8016208:	2000007c 	.word	0x2000007c

0801620c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 801620c:	b580      	push	{r7, lr}
 801620e:	b084      	sub	sp, #16
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8016214:	f7ff ffe2 	bl	80161dc <HAL_GetTick>
 8016218:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016224:	d004      	beq.n	8016230 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8016226:	4b09      	ldr	r3, [pc, #36]	; (801624c <HAL_Delay+0x40>)
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	68fa      	ldr	r2, [r7, #12]
 801622c:	4413      	add	r3, r2
 801622e:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8016230:	bf00      	nop
 8016232:	f7ff ffd3 	bl	80161dc <HAL_GetTick>
 8016236:	4602      	mov	r2, r0
 8016238:	68bb      	ldr	r3, [r7, #8]
 801623a:	1ad3      	subs	r3, r2, r3
 801623c:	68fa      	ldr	r2, [r7, #12]
 801623e:	429a      	cmp	r2, r3
 8016240:	d8f7      	bhi.n	8016232 <HAL_Delay+0x26>
    {
    }
  }
 8016242:	bf00      	nop
 8016244:	3710      	adds	r7, #16
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}
 801624a:	bf00      	nop
 801624c:	20000080 	.word	0x20000080

08016250 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8016250:	b480      	push	{r7}
 8016252:	b083      	sub	sp, #12
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
 8016258:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 801625a:	bf00      	nop
 801625c:	370c      	adds	r7, #12
 801625e:	46bd      	mov	sp, r7
 8016260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016264:	4770      	bx	lr

08016266 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8016266:	b480      	push	{r7}
 8016268:	b083      	sub	sp, #12
 801626a:	af00      	add	r7, sp, #0
 801626c:	6078      	str	r0, [r7, #4]
 801626e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	689b      	ldr	r3, [r3, #8]
 8016274:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8016278:	683b      	ldr	r3, [r7, #0]
 801627a:	431a      	orrs	r2, r3
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	609a      	str	r2, [r3, #8]
}
 8016280:	bf00      	nop
 8016282:	370c      	adds	r7, #12
 8016284:	46bd      	mov	sp, r7
 8016286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628a:	4770      	bx	lr

0801628c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801628c:	b480      	push	{r7}
 801628e:	b083      	sub	sp, #12
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	689b      	ldr	r3, [r3, #8]
 8016298:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 801629c:	4618      	mov	r0, r3
 801629e:	370c      	adds	r7, #12
 80162a0:	46bd      	mov	sp, r7
 80162a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a6:	4770      	bx	lr

080162a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80162a8:	b490      	push	{r4, r7}
 80162aa:	b084      	sub	sp, #16
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	60f8      	str	r0, [r7, #12]
 80162b0:	60b9      	str	r1, [r7, #8]
 80162b2:	607a      	str	r2, [r7, #4]
 80162b4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	3360      	adds	r3, #96	; 0x60
 80162ba:	461a      	mov	r2, r3
 80162bc:	68bb      	ldr	r3, [r7, #8]
 80162be:	009b      	lsls	r3, r3, #2
 80162c0:	4413      	add	r3, r2
 80162c2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80162c4:	6822      	ldr	r2, [r4, #0]
 80162c6:	4b08      	ldr	r3, [pc, #32]	; (80162e8 <LL_ADC_SetOffset+0x40>)
 80162c8:	4013      	ands	r3, r2
 80162ca:	687a      	ldr	r2, [r7, #4]
 80162cc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80162d0:	683a      	ldr	r2, [r7, #0]
 80162d2:	430a      	orrs	r2, r1
 80162d4:	4313      	orrs	r3, r2
 80162d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80162da:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80162dc:	bf00      	nop
 80162de:	3710      	adds	r7, #16
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bc90      	pop	{r4, r7}
 80162e4:	4770      	bx	lr
 80162e6:	bf00      	nop
 80162e8:	03fff000 	.word	0x03fff000

080162ec <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80162ec:	b490      	push	{r4, r7}
 80162ee:	b082      	sub	sp, #8
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
 80162f4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	3360      	adds	r3, #96	; 0x60
 80162fa:	461a      	mov	r2, r3
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	009b      	lsls	r3, r3, #2
 8016300:	4413      	add	r3, r2
 8016302:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8016304:	6823      	ldr	r3, [r4, #0]
 8016306:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 801630a:	4618      	mov	r0, r3
 801630c:	3708      	adds	r7, #8
 801630e:	46bd      	mov	sp, r7
 8016310:	bc90      	pop	{r4, r7}
 8016312:	4770      	bx	lr

08016314 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8016314:	b490      	push	{r4, r7}
 8016316:	b084      	sub	sp, #16
 8016318:	af00      	add	r7, sp, #0
 801631a:	60f8      	str	r0, [r7, #12]
 801631c:	60b9      	str	r1, [r7, #8]
 801631e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	3360      	adds	r3, #96	; 0x60
 8016324:	461a      	mov	r2, r3
 8016326:	68bb      	ldr	r3, [r7, #8]
 8016328:	009b      	lsls	r3, r3, #2
 801632a:	4413      	add	r3, r2
 801632c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 801632e:	6823      	ldr	r3, [r4, #0]
 8016330:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	4313      	orrs	r3, r2
 8016338:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 801633a:	bf00      	nop
 801633c:	3710      	adds	r7, #16
 801633e:	46bd      	mov	sp, r7
 8016340:	bc90      	pop	{r4, r7}
 8016342:	4770      	bx	lr

08016344 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8016344:	b480      	push	{r7}
 8016346:	b083      	sub	sp, #12
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	68db      	ldr	r3, [r3, #12]
 8016350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8016354:	2b00      	cmp	r3, #0
 8016356:	d101      	bne.n	801635c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8016358:	2301      	movs	r3, #1
 801635a:	e000      	b.n	801635e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 801635c:	2300      	movs	r3, #0
}
 801635e:	4618      	mov	r0, r3
 8016360:	370c      	adds	r7, #12
 8016362:	46bd      	mov	sp, r7
 8016364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016368:	4770      	bx	lr

0801636a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801636a:	b490      	push	{r4, r7}
 801636c:	b084      	sub	sp, #16
 801636e:	af00      	add	r7, sp, #0
 8016370:	60f8      	str	r0, [r7, #12]
 8016372:	60b9      	str	r1, [r7, #8]
 8016374:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	3330      	adds	r3, #48	; 0x30
 801637a:	461a      	mov	r2, r3
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	0a1b      	lsrs	r3, r3, #8
 8016380:	009b      	lsls	r3, r3, #2
 8016382:	f003 030c 	and.w	r3, r3, #12
 8016386:	4413      	add	r3, r2
 8016388:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 801638a:	6822      	ldr	r2, [r4, #0]
 801638c:	68bb      	ldr	r3, [r7, #8]
 801638e:	f003 031f 	and.w	r3, r3, #31
 8016392:	211f      	movs	r1, #31
 8016394:	fa01 f303 	lsl.w	r3, r1, r3
 8016398:	43db      	mvns	r3, r3
 801639a:	401a      	ands	r2, r3
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	0e9b      	lsrs	r3, r3, #26
 80163a0:	f003 011f 	and.w	r1, r3, #31
 80163a4:	68bb      	ldr	r3, [r7, #8]
 80163a6:	f003 031f 	and.w	r3, r3, #31
 80163aa:	fa01 f303 	lsl.w	r3, r1, r3
 80163ae:	4313      	orrs	r3, r2
 80163b0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80163b2:	bf00      	nop
 80163b4:	3710      	adds	r7, #16
 80163b6:	46bd      	mov	sp, r7
 80163b8:	bc90      	pop	{r4, r7}
 80163ba:	4770      	bx	lr

080163bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80163bc:	b490      	push	{r4, r7}
 80163be:	b084      	sub	sp, #16
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	60f8      	str	r0, [r7, #12]
 80163c4:	60b9      	str	r1, [r7, #8]
 80163c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	3314      	adds	r3, #20
 80163cc:	461a      	mov	r2, r3
 80163ce:	68bb      	ldr	r3, [r7, #8]
 80163d0:	0e5b      	lsrs	r3, r3, #25
 80163d2:	009b      	lsls	r3, r3, #2
 80163d4:	f003 0304 	and.w	r3, r3, #4
 80163d8:	4413      	add	r3, r2
 80163da:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80163dc:	6822      	ldr	r2, [r4, #0]
 80163de:	68bb      	ldr	r3, [r7, #8]
 80163e0:	0d1b      	lsrs	r3, r3, #20
 80163e2:	f003 031f 	and.w	r3, r3, #31
 80163e6:	2107      	movs	r1, #7
 80163e8:	fa01 f303 	lsl.w	r3, r1, r3
 80163ec:	43db      	mvns	r3, r3
 80163ee:	401a      	ands	r2, r3
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	0d1b      	lsrs	r3, r3, #20
 80163f4:	f003 031f 	and.w	r3, r3, #31
 80163f8:	6879      	ldr	r1, [r7, #4]
 80163fa:	fa01 f303 	lsl.w	r3, r1, r3
 80163fe:	4313      	orrs	r3, r2
 8016400:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8016402:	bf00      	nop
 8016404:	3710      	adds	r7, #16
 8016406:	46bd      	mov	sp, r7
 8016408:	bc90      	pop	{r4, r7}
 801640a:	4770      	bx	lr

0801640c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 801640c:	b480      	push	{r7}
 801640e:	b085      	sub	sp, #20
 8016410:	af00      	add	r7, sp, #0
 8016412:	60f8      	str	r0, [r7, #12]
 8016414:	60b9      	str	r1, [r7, #8]
 8016416:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016424:	43db      	mvns	r3, r3
 8016426:	401a      	ands	r2, r3
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f003 0318 	and.w	r3, r3, #24
 801642e:	4908      	ldr	r1, [pc, #32]	; (8016450 <LL_ADC_SetChannelSingleDiff+0x44>)
 8016430:	40d9      	lsrs	r1, r3
 8016432:	68bb      	ldr	r3, [r7, #8]
 8016434:	400b      	ands	r3, r1
 8016436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801643a:	431a      	orrs	r2, r3
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8016442:	bf00      	nop
 8016444:	3714      	adds	r7, #20
 8016446:	46bd      	mov	sp, r7
 8016448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644c:	4770      	bx	lr
 801644e:	bf00      	nop
 8016450:	0007ffff 	.word	0x0007ffff

08016454 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8016454:	b480      	push	{r7}
 8016456:	b083      	sub	sp, #12
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	689b      	ldr	r3, [r3, #8]
 8016460:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8016464:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8016468:	687a      	ldr	r2, [r7, #4]
 801646a:	6093      	str	r3, [r2, #8]
}
 801646c:	bf00      	nop
 801646e:	370c      	adds	r7, #12
 8016470:	46bd      	mov	sp, r7
 8016472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016476:	4770      	bx	lr

08016478 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8016478:	b480      	push	{r7}
 801647a:	b083      	sub	sp, #12
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	689b      	ldr	r3, [r3, #8]
 8016484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801648c:	d101      	bne.n	8016492 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801648e:	2301      	movs	r3, #1
 8016490:	e000      	b.n	8016494 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8016492:	2300      	movs	r3, #0
}
 8016494:	4618      	mov	r0, r3
 8016496:	370c      	adds	r7, #12
 8016498:	46bd      	mov	sp, r7
 801649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649e:	4770      	bx	lr

080164a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80164a0:	b480      	push	{r7}
 80164a2:	b083      	sub	sp, #12
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	689b      	ldr	r3, [r3, #8]
 80164ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80164b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80164b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80164bc:	bf00      	nop
 80164be:	370c      	adds	r7, #12
 80164c0:	46bd      	mov	sp, r7
 80164c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c6:	4770      	bx	lr

080164c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80164c8:	b480      	push	{r7}
 80164ca:	b083      	sub	sp, #12
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	689b      	ldr	r3, [r3, #8]
 80164d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80164d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80164dc:	d101      	bne.n	80164e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80164de:	2301      	movs	r3, #1
 80164e0:	e000      	b.n	80164e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80164e2:	2300      	movs	r3, #0
}
 80164e4:	4618      	mov	r0, r3
 80164e6:	370c      	adds	r7, #12
 80164e8:	46bd      	mov	sp, r7
 80164ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ee:	4770      	bx	lr

080164f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80164f0:	b480      	push	{r7}
 80164f2:	b083      	sub	sp, #12
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	689b      	ldr	r3, [r3, #8]
 80164fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016500:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8016504:	f043 0201 	orr.w	r2, r3, #1
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 801650c:	bf00      	nop
 801650e:	370c      	adds	r7, #12
 8016510:	46bd      	mov	sp, r7
 8016512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016516:	4770      	bx	lr

08016518 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8016518:	b480      	push	{r7}
 801651a:	b083      	sub	sp, #12
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	689b      	ldr	r3, [r3, #8]
 8016524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016528:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801652c:	f043 0202 	orr.w	r2, r3, #2
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8016534:	bf00      	nop
 8016536:	370c      	adds	r7, #12
 8016538:	46bd      	mov	sp, r7
 801653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653e:	4770      	bx	lr

08016540 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8016540:	b480      	push	{r7}
 8016542:	b083      	sub	sp, #12
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	689b      	ldr	r3, [r3, #8]
 801654c:	f003 0301 	and.w	r3, r3, #1
 8016550:	2b01      	cmp	r3, #1
 8016552:	d101      	bne.n	8016558 <LL_ADC_IsEnabled+0x18>
 8016554:	2301      	movs	r3, #1
 8016556:	e000      	b.n	801655a <LL_ADC_IsEnabled+0x1a>
 8016558:	2300      	movs	r3, #0
}
 801655a:	4618      	mov	r0, r3
 801655c:	370c      	adds	r7, #12
 801655e:	46bd      	mov	sp, r7
 8016560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016564:	4770      	bx	lr

08016566 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8016566:	b480      	push	{r7}
 8016568:	b083      	sub	sp, #12
 801656a:	af00      	add	r7, sp, #0
 801656c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	689b      	ldr	r3, [r3, #8]
 8016572:	f003 0302 	and.w	r3, r3, #2
 8016576:	2b02      	cmp	r3, #2
 8016578:	d101      	bne.n	801657e <LL_ADC_IsDisableOngoing+0x18>
 801657a:	2301      	movs	r3, #1
 801657c:	e000      	b.n	8016580 <LL_ADC_IsDisableOngoing+0x1a>
 801657e:	2300      	movs	r3, #0
}
 8016580:	4618      	mov	r0, r3
 8016582:	370c      	adds	r7, #12
 8016584:	46bd      	mov	sp, r7
 8016586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658a:	4770      	bx	lr

0801658c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 801658c:	b480      	push	{r7}
 801658e:	b083      	sub	sp, #12
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	689b      	ldr	r3, [r3, #8]
 8016598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801659c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80165a0:	f043 0204 	orr.w	r2, r3, #4
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80165a8:	bf00      	nop
 80165aa:	370c      	adds	r7, #12
 80165ac:	46bd      	mov	sp, r7
 80165ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b2:	4770      	bx	lr

080165b4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80165b4:	b480      	push	{r7}
 80165b6:	b083      	sub	sp, #12
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	689b      	ldr	r3, [r3, #8]
 80165c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80165c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80165c8:	f043 0210 	orr.w	r2, r3, #16
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80165d0:	bf00      	nop
 80165d2:	370c      	adds	r7, #12
 80165d4:	46bd      	mov	sp, r7
 80165d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165da:	4770      	bx	lr

080165dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80165dc:	b480      	push	{r7}
 80165de:	b083      	sub	sp, #12
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	689b      	ldr	r3, [r3, #8]
 80165e8:	f003 0304 	and.w	r3, r3, #4
 80165ec:	2b04      	cmp	r3, #4
 80165ee:	d101      	bne.n	80165f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80165f0:	2301      	movs	r3, #1
 80165f2:	e000      	b.n	80165f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80165f4:	2300      	movs	r3, #0
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	370c      	adds	r7, #12
 80165fa:	46bd      	mov	sp, r7
 80165fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016600:	4770      	bx	lr

08016602 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8016602:	b480      	push	{r7}
 8016604:	b083      	sub	sp, #12
 8016606:	af00      	add	r7, sp, #0
 8016608:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	689b      	ldr	r3, [r3, #8]
 801660e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016612:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8016616:	f043 0220 	orr.w	r2, r3, #32
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 801661e:	bf00      	nop
 8016620:	370c      	adds	r7, #12
 8016622:	46bd      	mov	sp, r7
 8016624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016628:	4770      	bx	lr

0801662a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801662a:	b480      	push	{r7}
 801662c:	b083      	sub	sp, #12
 801662e:	af00      	add	r7, sp, #0
 8016630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	689b      	ldr	r3, [r3, #8]
 8016636:	f003 0308 	and.w	r3, r3, #8
 801663a:	2b08      	cmp	r3, #8
 801663c:	d101      	bne.n	8016642 <LL_ADC_INJ_IsConversionOngoing+0x18>
 801663e:	2301      	movs	r3, #1
 8016640:	e000      	b.n	8016644 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8016642:	2300      	movs	r3, #0
}
 8016644:	4618      	mov	r0, r3
 8016646:	370c      	adds	r7, #12
 8016648:	46bd      	mov	sp, r7
 801664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664e:	4770      	bx	lr

08016650 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b088      	sub	sp, #32
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8016658:	2300      	movs	r3, #0
 801665a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 801665c:	2300      	movs	r3, #0
 801665e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d101      	bne.n	801666a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8016666:	2301      	movs	r3, #1
 8016668:	e12a      	b.n	80168c0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	691b      	ldr	r3, [r3, #16]
 801666e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016674:	2b00      	cmp	r3, #0
 8016676:	d109      	bne.n	801668c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8016678:	6878      	ldr	r0, [r7, #4]
 801667a:	f7fa fc49 	bl	8010f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2200      	movs	r2, #0
 8016682:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2200      	movs	r2, #0
 8016688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	4618      	mov	r0, r3
 8016692:	f7ff fef1 	bl	8016478 <LL_ADC_IsDeepPowerDownEnabled>
 8016696:	4603      	mov	r3, r0
 8016698:	2b00      	cmp	r3, #0
 801669a:	d004      	beq.n	80166a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7ff fed7 	bl	8016454 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	4618      	mov	r0, r3
 80166ac:	f7ff ff0c 	bl	80164c8 <LL_ADC_IsInternalRegulatorEnabled>
 80166b0:	4603      	mov	r3, r0
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d113      	bne.n	80166de <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7ff fef0 	bl	80164a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80166c0:	4b81      	ldr	r3, [pc, #516]	; (80168c8 <HAL_ADC_Init+0x278>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	099b      	lsrs	r3, r3, #6
 80166c6:	4a81      	ldr	r2, [pc, #516]	; (80168cc <HAL_ADC_Init+0x27c>)
 80166c8:	fba2 2303 	umull	r2, r3, r2, r3
 80166cc:	099b      	lsrs	r3, r3, #6
 80166ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80166d0:	e002      	b.n	80166d8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80166d2:	68bb      	ldr	r3, [r7, #8]
 80166d4:	3b01      	subs	r3, #1
 80166d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80166d8:	68bb      	ldr	r3, [r7, #8]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d1f9      	bne.n	80166d2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	4618      	mov	r0, r3
 80166e4:	f7ff fef0 	bl	80164c8 <LL_ADC_IsInternalRegulatorEnabled>
 80166e8:	4603      	mov	r3, r0
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d10d      	bne.n	801670a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80166f2:	f043 0210 	orr.w	r2, r3, #16
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166fe:	f043 0201 	orr.w	r2, r3, #1
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8016706:	2301      	movs	r3, #1
 8016708:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	4618      	mov	r0, r3
 8016710:	f7ff ff64 	bl	80165dc <LL_ADC_REG_IsConversionOngoing>
 8016714:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801671a:	f003 0310 	and.w	r3, r3, #16
 801671e:	2b00      	cmp	r3, #0
 8016720:	f040 80c5 	bne.w	80168ae <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8016724:	697b      	ldr	r3, [r7, #20]
 8016726:	2b00      	cmp	r3, #0
 8016728:	f040 80c1 	bne.w	80168ae <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016730:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8016734:	f043 0202 	orr.w	r2, r3, #2
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	4618      	mov	r0, r3
 8016742:	f7ff fefd 	bl	8016540 <LL_ADC_IsEnabled>
 8016746:	4603      	mov	r3, r0
 8016748:	2b00      	cmp	r3, #0
 801674a:	d10b      	bne.n	8016764 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801674c:	4860      	ldr	r0, [pc, #384]	; (80168d0 <HAL_ADC_Init+0x280>)
 801674e:	f7ff fef7 	bl	8016540 <LL_ADC_IsEnabled>
 8016752:	4603      	mov	r3, r0
 8016754:	2b00      	cmp	r3, #0
 8016756:	d105      	bne.n	8016764 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	685b      	ldr	r3, [r3, #4]
 801675c:	4619      	mov	r1, r3
 801675e:	485d      	ldr	r0, [pc, #372]	; (80168d4 <HAL_ADC_Init+0x284>)
 8016760:	f7ff fd76 	bl	8016250 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	7e5b      	ldrb	r3, [r3, #25]
 8016768:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801676e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8016774:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 801677a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016782:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8016784:	4313      	orrs	r3, r2
 8016786:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801678e:	2b01      	cmp	r3, #1
 8016790:	d106      	bne.n	80167a0 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016796:	3b01      	subs	r3, #1
 8016798:	045b      	lsls	r3, r3, #17
 801679a:	69ba      	ldr	r2, [r7, #24]
 801679c:	4313      	orrs	r3, r2
 801679e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d009      	beq.n	80167bc <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167ac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80167b6:	69ba      	ldr	r2, [r7, #24]
 80167b8:	4313      	orrs	r3, r2
 80167ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	68da      	ldr	r2, [r3, #12]
 80167c2:	4b45      	ldr	r3, [pc, #276]	; (80168d8 <HAL_ADC_Init+0x288>)
 80167c4:	4013      	ands	r3, r2
 80167c6:	687a      	ldr	r2, [r7, #4]
 80167c8:	6812      	ldr	r2, [r2, #0]
 80167ca:	69b9      	ldr	r1, [r7, #24]
 80167cc:	430b      	orrs	r3, r1
 80167ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7ff ff01 	bl	80165dc <LL_ADC_REG_IsConversionOngoing>
 80167da:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	4618      	mov	r0, r3
 80167e2:	f7ff ff22 	bl	801662a <LL_ADC_INJ_IsConversionOngoing>
 80167e6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80167e8:	693b      	ldr	r3, [r7, #16]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d13d      	bne.n	801686a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d13a      	bne.n	801686a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80167f8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016800:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8016802:	4313      	orrs	r3, r2
 8016804:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	68db      	ldr	r3, [r3, #12]
 801680c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016810:	f023 0302 	bic.w	r3, r3, #2
 8016814:	687a      	ldr	r2, [r7, #4]
 8016816:	6812      	ldr	r2, [r2, #0]
 8016818:	69b9      	ldr	r1, [r7, #24]
 801681a:	430b      	orrs	r3, r1
 801681c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016824:	2b01      	cmp	r3, #1
 8016826:	d118      	bne.n	801685a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	691b      	ldr	r3, [r3, #16]
 801682e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8016832:	f023 0304 	bic.w	r3, r3, #4
 8016836:	687a      	ldr	r2, [r7, #4]
 8016838:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801683a:	687a      	ldr	r2, [r7, #4]
 801683c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801683e:	4311      	orrs	r1, r2
 8016840:	687a      	ldr	r2, [r7, #4]
 8016842:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8016844:	4311      	orrs	r1, r2
 8016846:	687a      	ldr	r2, [r7, #4]
 8016848:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801684a:	430a      	orrs	r2, r1
 801684c:	431a      	orrs	r2, r3
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	f042 0201 	orr.w	r2, r2, #1
 8016856:	611a      	str	r2, [r3, #16]
 8016858:	e007      	b.n	801686a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	691a      	ldr	r2, [r3, #16]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	f022 0201 	bic.w	r2, r2, #1
 8016868:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	691b      	ldr	r3, [r3, #16]
 801686e:	2b01      	cmp	r3, #1
 8016870:	d10c      	bne.n	801688c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016878:	f023 010f 	bic.w	r1, r3, #15
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	69db      	ldr	r3, [r3, #28]
 8016880:	1e5a      	subs	r2, r3, #1
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	430a      	orrs	r2, r1
 8016888:	631a      	str	r2, [r3, #48]	; 0x30
 801688a:	e007      	b.n	801689c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	f022 020f 	bic.w	r2, r2, #15
 801689a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80168a0:	f023 0303 	bic.w	r3, r3, #3
 80168a4:	f043 0201 	orr.w	r2, r3, #1
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	655a      	str	r2, [r3, #84]	; 0x54
 80168ac:	e007      	b.n	80168be <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80168b2:	f043 0210 	orr.w	r2, r3, #16
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80168ba:	2301      	movs	r3, #1
 80168bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80168be:	7ffb      	ldrb	r3, [r7, #31]
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3720      	adds	r7, #32
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}
 80168c8:	20000078 	.word	0x20000078
 80168cc:	053e2d63 	.word	0x053e2d63
 80168d0:	50040000 	.word	0x50040000
 80168d4:	50040300 	.word	0x50040300
 80168d8:	fff0c007 	.word	0xfff0c007

080168dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b086      	sub	sp, #24
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	60f8      	str	r0, [r7, #12]
 80168e4:	60b9      	str	r1, [r7, #8]
 80168e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	4618      	mov	r0, r3
 80168ee:	f7ff fe75 	bl	80165dc <LL_ADC_REG_IsConversionOngoing>
 80168f2:	4603      	mov	r3, r0
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d167      	bne.n	80169c8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80168fe:	2b01      	cmp	r3, #1
 8016900:	d101      	bne.n	8016906 <HAL_ADC_Start_DMA+0x2a>
 8016902:	2302      	movs	r3, #2
 8016904:	e063      	b.n	80169ce <HAL_ADC_Start_DMA+0xf2>
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	2201      	movs	r2, #1
 801690a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801690e:	68f8      	ldr	r0, [r7, #12]
 8016910:	f000 fcc2 	bl	8017298 <ADC_Enable>
 8016914:	4603      	mov	r3, r0
 8016916:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8016918:	7dfb      	ldrb	r3, [r7, #23]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d14f      	bne.n	80169be <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016922:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8016926:	f023 0301 	bic.w	r3, r3, #1
 801692a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801693a:	2b00      	cmp	r3, #0
 801693c:	d006      	beq.n	801694c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016942:	f023 0206 	bic.w	r2, r3, #6
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	659a      	str	r2, [r3, #88]	; 0x58
 801694a:	e002      	b.n	8016952 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	2200      	movs	r2, #0
 8016950:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016956:	4a20      	ldr	r2, [pc, #128]	; (80169d8 <HAL_ADC_Start_DMA+0xfc>)
 8016958:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801695e:	4a1f      	ldr	r2, [pc, #124]	; (80169dc <HAL_ADC_Start_DMA+0x100>)
 8016960:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016966:	4a1e      	ldr	r2, [pc, #120]	; (80169e0 <HAL_ADC_Start_DMA+0x104>)
 8016968:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	221c      	movs	r2, #28
 8016970:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	2200      	movs	r2, #0
 8016976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	685a      	ldr	r2, [r3, #4]
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	f042 0210 	orr.w	r2, r2, #16
 8016988:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	68da      	ldr	r2, [r3, #12]
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	f042 0201 	orr.w	r2, r2, #1
 8016998:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	3340      	adds	r3, #64	; 0x40
 80169a4:	4619      	mov	r1, r3
 80169a6:	68ba      	ldr	r2, [r7, #8]
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	f001 fa49 	bl	8017e40 <HAL_DMA_Start_IT>
 80169ae:	4603      	mov	r3, r0
 80169b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	4618      	mov	r0, r3
 80169b8:	f7ff fde8 	bl	801658c <LL_ADC_REG_StartConversion>
 80169bc:	e006      	b.n	80169cc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2200      	movs	r2, #0
 80169c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80169c6:	e001      	b.n	80169cc <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80169c8:	2302      	movs	r3, #2
 80169ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80169cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80169ce:	4618      	mov	r0, r3
 80169d0:	3718      	adds	r7, #24
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
 80169d6:	bf00      	nop
 80169d8:	080173fd 	.word	0x080173fd
 80169dc:	080174d5 	.word	0x080174d5
 80169e0:	080174f1 	.word	0x080174f1

080169e4 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b084      	sub	sp, #16
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80169f2:	2b01      	cmp	r3, #1
 80169f4:	d101      	bne.n	80169fa <HAL_ADC_Stop_DMA+0x16>
 80169f6:	2302      	movs	r3, #2
 80169f8:	e051      	b.n	8016a9e <HAL_ADC_Stop_DMA+0xba>
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	2201      	movs	r2, #1
 80169fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8016a02:	2103      	movs	r1, #3
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f000 fb93 	bl	8017130 <ADC_ConversionStop>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8016a0e:	7bfb      	ldrb	r3, [r7, #15]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d13f      	bne.n	8016a94 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	68da      	ldr	r2, [r3, #12]
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	f022 0201 	bic.w	r2, r2, #1
 8016a22:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016a28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8016a2c:	b2db      	uxtb	r3, r3
 8016a2e:	2b02      	cmp	r3, #2
 8016a30:	d10f      	bne.n	8016a52 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016a36:	4618      	mov	r0, r3
 8016a38:	f001 fa7d 	bl	8017f36 <HAL_DMA_Abort>
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8016a40:	7bfb      	ldrb	r3, [r7, #15]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d005      	beq.n	8016a52 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	685a      	ldr	r2, [r3, #4]
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	f022 0210 	bic.w	r2, r2, #16
 8016a60:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8016a62:	7bfb      	ldrb	r3, [r7, #15]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d105      	bne.n	8016a74 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8016a68:	6878      	ldr	r0, [r7, #4]
 8016a6a:	f000 fc6f 	bl	801734c <ADC_Disable>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	73fb      	strb	r3, [r7, #15]
 8016a72:	e002      	b.n	8016a7a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	f000 fc69 	bl	801734c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8016a7a:	7bfb      	ldrb	r3, [r7, #15]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d109      	bne.n	8016a94 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016a84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8016a88:	f023 0301 	bic.w	r3, r3, #1
 8016a8c:	f043 0201 	orr.w	r2, r3, #1
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	2200      	movs	r2, #0
 8016a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8016a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	3710      	adds	r7, #16
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}

08016aa6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8016aa6:	b480      	push	{r7}
 8016aa8:	b083      	sub	sp, #12
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8016aae:	bf00      	nop
 8016ab0:	370c      	adds	r7, #12
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab8:	4770      	bx	lr
	...

08016abc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b0a6      	sub	sp, #152	; 0x98
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
 8016ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8016acc:	2300      	movs	r3, #0
 8016ace:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016ad6:	2b01      	cmp	r3, #1
 8016ad8:	d101      	bne.n	8016ade <HAL_ADC_ConfigChannel+0x22>
 8016ada:	2302      	movs	r3, #2
 8016adc:	e31e      	b.n	801711c <HAL_ADC_ConfigChannel+0x660>
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2201      	movs	r2, #1
 8016ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	4618      	mov	r0, r3
 8016aec:	f7ff fd76 	bl	80165dc <LL_ADC_REG_IsConversionOngoing>
 8016af0:	4603      	mov	r3, r0
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	f040 8303 	bne.w	80170fe <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	6818      	ldr	r0, [r3, #0]
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	6859      	ldr	r1, [r3, #4]
 8016b00:	683b      	ldr	r3, [r7, #0]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	461a      	mov	r2, r3
 8016b06:	f7ff fc30 	bl	801636a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f7ff fd64 	bl	80165dc <LL_ADC_REG_IsConversionOngoing>
 8016b14:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f7ff fd84 	bl	801662a <LL_ADC_INJ_IsConversionOngoing>
 8016b22:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8016b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	f040 8148 	bne.w	8016dc0 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8016b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	f040 8143 	bne.w	8016dc0 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	6818      	ldr	r0, [r3, #0]
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	6819      	ldr	r1, [r3, #0]
 8016b42:	683b      	ldr	r3, [r7, #0]
 8016b44:	689b      	ldr	r3, [r3, #8]
 8016b46:	461a      	mov	r2, r3
 8016b48:	f7ff fc38 	bl	80163bc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	695a      	ldr	r2, [r3, #20]
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	68db      	ldr	r3, [r3, #12]
 8016b56:	08db      	lsrs	r3, r3, #3
 8016b58:	f003 0303 	and.w	r3, r3, #3
 8016b5c:	005b      	lsls	r3, r3, #1
 8016b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8016b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8016b66:	683b      	ldr	r3, [r7, #0]
 8016b68:	691b      	ldr	r3, [r3, #16]
 8016b6a:	2b04      	cmp	r3, #4
 8016b6c:	d00a      	beq.n	8016b84 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	6818      	ldr	r0, [r3, #0]
 8016b72:	683b      	ldr	r3, [r7, #0]
 8016b74:	6919      	ldr	r1, [r3, #16]
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	681a      	ldr	r2, [r3, #0]
 8016b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b7e:	f7ff fb93 	bl	80162a8 <LL_ADC_SetOffset>
 8016b82:	e11d      	b.n	8016dc0 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	2100      	movs	r1, #0
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f7ff fbae 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016b90:	4603      	mov	r3, r0
 8016b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d10a      	bne.n	8016bb0 <HAL_ADC_ConfigChannel+0xf4>
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	2100      	movs	r1, #0
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f7ff fba3 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	0e9b      	lsrs	r3, r3, #26
 8016baa:	f003 021f 	and.w	r2, r3, #31
 8016bae:	e012      	b.n	8016bd6 <HAL_ADC_ConfigChannel+0x11a>
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	2100      	movs	r1, #0
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f7ff fb98 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016bc6:	fa93 f3a3 	rbit	r3, r3
 8016bca:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8016bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016bce:	fab3 f383 	clz	r3, r3
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	461a      	mov	r2, r3
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d105      	bne.n	8016bee <HAL_ADC_ConfigChannel+0x132>
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	0e9b      	lsrs	r3, r3, #26
 8016be8:	f003 031f 	and.w	r3, r3, #31
 8016bec:	e00a      	b.n	8016c04 <HAL_ADC_ConfigChannel+0x148>
 8016bee:	683b      	ldr	r3, [r7, #0]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016bf6:	fa93 f3a3 	rbit	r3, r3
 8016bfa:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8016bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016bfe:	fab3 f383 	clz	r3, r3
 8016c02:	b2db      	uxtb	r3, r3
 8016c04:	429a      	cmp	r2, r3
 8016c06:	d106      	bne.n	8016c16 <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	2100      	movs	r1, #0
 8016c10:	4618      	mov	r0, r3
 8016c12:	f7ff fb7f 	bl	8016314 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	2101      	movs	r1, #1
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7ff fb65 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016c22:	4603      	mov	r3, r0
 8016c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d10a      	bne.n	8016c42 <HAL_ADC_ConfigChannel+0x186>
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	2101      	movs	r1, #1
 8016c32:	4618      	mov	r0, r3
 8016c34:	f7ff fb5a 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016c38:	4603      	mov	r3, r0
 8016c3a:	0e9b      	lsrs	r3, r3, #26
 8016c3c:	f003 021f 	and.w	r2, r3, #31
 8016c40:	e010      	b.n	8016c64 <HAL_ADC_ConfigChannel+0x1a8>
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	2101      	movs	r1, #1
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7ff fb4f 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016c54:	fa93 f3a3 	rbit	r3, r3
 8016c58:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8016c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016c5c:	fab3 f383 	clz	r3, r3
 8016c60:	b2db      	uxtb	r3, r3
 8016c62:	461a      	mov	r2, r3
 8016c64:	683b      	ldr	r3, [r7, #0]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d105      	bne.n	8016c7c <HAL_ADC_ConfigChannel+0x1c0>
 8016c70:	683b      	ldr	r3, [r7, #0]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	0e9b      	lsrs	r3, r3, #26
 8016c76:	f003 031f 	and.w	r3, r3, #31
 8016c7a:	e00a      	b.n	8016c92 <HAL_ADC_ConfigChannel+0x1d6>
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016c84:	fa93 f3a3 	rbit	r3, r3
 8016c88:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8016c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016c8c:	fab3 f383 	clz	r3, r3
 8016c90:	b2db      	uxtb	r3, r3
 8016c92:	429a      	cmp	r2, r3
 8016c94:	d106      	bne.n	8016ca4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	2101      	movs	r1, #1
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f7ff fb38 	bl	8016314 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	2102      	movs	r1, #2
 8016caa:	4618      	mov	r0, r3
 8016cac:	f7ff fb1e 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d10a      	bne.n	8016cd0 <HAL_ADC_ConfigChannel+0x214>
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	2102      	movs	r1, #2
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7ff fb13 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	0e9b      	lsrs	r3, r3, #26
 8016cca:	f003 021f 	and.w	r2, r3, #31
 8016cce:	e010      	b.n	8016cf2 <HAL_ADC_ConfigChannel+0x236>
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	2102      	movs	r1, #2
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f7ff fb08 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016ce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016ce2:	fa93 f3a3 	rbit	r3, r3
 8016ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8016ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016cea:	fab3 f383 	clz	r3, r3
 8016cee:	b2db      	uxtb	r3, r3
 8016cf0:	461a      	mov	r2, r3
 8016cf2:	683b      	ldr	r3, [r7, #0]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d105      	bne.n	8016d0a <HAL_ADC_ConfigChannel+0x24e>
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	0e9b      	lsrs	r3, r3, #26
 8016d04:	f003 031f 	and.w	r3, r3, #31
 8016d08:	e00a      	b.n	8016d20 <HAL_ADC_ConfigChannel+0x264>
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016d12:	fa93 f3a3 	rbit	r3, r3
 8016d16:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8016d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d1a:	fab3 f383 	clz	r3, r3
 8016d1e:	b2db      	uxtb	r3, r3
 8016d20:	429a      	cmp	r2, r3
 8016d22:	d106      	bne.n	8016d32 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	2200      	movs	r2, #0
 8016d2a:	2102      	movs	r1, #2
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7ff faf1 	bl	8016314 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	2103      	movs	r1, #3
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f7ff fad7 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d10a      	bne.n	8016d5e <HAL_ADC_ConfigChannel+0x2a2>
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	2103      	movs	r1, #3
 8016d4e:	4618      	mov	r0, r3
 8016d50:	f7ff facc 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016d54:	4603      	mov	r3, r0
 8016d56:	0e9b      	lsrs	r3, r3, #26
 8016d58:	f003 021f 	and.w	r2, r3, #31
 8016d5c:	e010      	b.n	8016d80 <HAL_ADC_ConfigChannel+0x2c4>
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	2103      	movs	r1, #3
 8016d64:	4618      	mov	r0, r3
 8016d66:	f7ff fac1 	bl	80162ec <LL_ADC_GetOffsetChannel>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d70:	fa93 f3a3 	rbit	r3, r3
 8016d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8016d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d78:	fab3 f383 	clz	r3, r3
 8016d7c:	b2db      	uxtb	r3, r3
 8016d7e:	461a      	mov	r2, r3
 8016d80:	683b      	ldr	r3, [r7, #0]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d105      	bne.n	8016d98 <HAL_ADC_ConfigChannel+0x2dc>
 8016d8c:	683b      	ldr	r3, [r7, #0]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	0e9b      	lsrs	r3, r3, #26
 8016d92:	f003 031f 	and.w	r3, r3, #31
 8016d96:	e00a      	b.n	8016dae <HAL_ADC_ConfigChannel+0x2f2>
 8016d98:	683b      	ldr	r3, [r7, #0]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016da0:	fa93 f3a3 	rbit	r3, r3
 8016da4:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8016da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016da8:	fab3 f383 	clz	r3, r3
 8016dac:	b2db      	uxtb	r3, r3
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d106      	bne.n	8016dc0 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	2200      	movs	r2, #0
 8016db8:	2103      	movs	r1, #3
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7ff faaa 	bl	8016314 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f7ff fbbb 	bl	8016540 <LL_ADC_IsEnabled>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	f040 819f 	bne.w	8017110 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	6818      	ldr	r0, [r3, #0]
 8016dd6:	683b      	ldr	r3, [r7, #0]
 8016dd8:	6819      	ldr	r1, [r3, #0]
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	68db      	ldr	r3, [r3, #12]
 8016dde:	461a      	mov	r2, r3
 8016de0:	f7ff fb14 	bl	801640c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	68db      	ldr	r3, [r3, #12]
 8016de8:	4aab      	ldr	r2, [pc, #684]	; (8017098 <HAL_ADC_ConfigChannel+0x5dc>)
 8016dea:	4293      	cmp	r3, r2
 8016dec:	f040 80fd 	bne.w	8016fea <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016df4:	683b      	ldr	r3, [r7, #0]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d10b      	bne.n	8016e18 <HAL_ADC_ConfigChannel+0x35c>
 8016e00:	683b      	ldr	r3, [r7, #0]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	0e9b      	lsrs	r3, r3, #26
 8016e06:	3301      	adds	r3, #1
 8016e08:	f003 031f 	and.w	r3, r3, #31
 8016e0c:	2b09      	cmp	r3, #9
 8016e0e:	bf94      	ite	ls
 8016e10:	2301      	movls	r3, #1
 8016e12:	2300      	movhi	r3, #0
 8016e14:	b2db      	uxtb	r3, r3
 8016e16:	e012      	b.n	8016e3e <HAL_ADC_ConfigChannel+0x382>
 8016e18:	683b      	ldr	r3, [r7, #0]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e20:	fa93 f3a3 	rbit	r3, r3
 8016e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8016e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e28:	fab3 f383 	clz	r3, r3
 8016e2c:	b2db      	uxtb	r3, r3
 8016e2e:	3301      	adds	r3, #1
 8016e30:	f003 031f 	and.w	r3, r3, #31
 8016e34:	2b09      	cmp	r3, #9
 8016e36:	bf94      	ite	ls
 8016e38:	2301      	movls	r3, #1
 8016e3a:	2300      	movhi	r3, #0
 8016e3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d064      	beq.n	8016f0c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016e42:	683b      	ldr	r3, [r7, #0]
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d107      	bne.n	8016e5e <HAL_ADC_ConfigChannel+0x3a2>
 8016e4e:	683b      	ldr	r3, [r7, #0]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	0e9b      	lsrs	r3, r3, #26
 8016e54:	3301      	adds	r3, #1
 8016e56:	069b      	lsls	r3, r3, #26
 8016e58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016e5c:	e00e      	b.n	8016e7c <HAL_ADC_ConfigChannel+0x3c0>
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e66:	fa93 f3a3 	rbit	r3, r3
 8016e6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8016e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e6e:	fab3 f383 	clz	r3, r3
 8016e72:	b2db      	uxtb	r3, r3
 8016e74:	3301      	adds	r3, #1
 8016e76:	069b      	lsls	r3, r3, #26
 8016e78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d109      	bne.n	8016e9c <HAL_ADC_ConfigChannel+0x3e0>
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	0e9b      	lsrs	r3, r3, #26
 8016e8e:	3301      	adds	r3, #1
 8016e90:	f003 031f 	and.w	r3, r3, #31
 8016e94:	2101      	movs	r1, #1
 8016e96:	fa01 f303 	lsl.w	r3, r1, r3
 8016e9a:	e010      	b.n	8016ebe <HAL_ADC_ConfigChannel+0x402>
 8016e9c:	683b      	ldr	r3, [r7, #0]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ea4:	fa93 f3a3 	rbit	r3, r3
 8016ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8016eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eac:	fab3 f383 	clz	r3, r3
 8016eb0:	b2db      	uxtb	r3, r3
 8016eb2:	3301      	adds	r3, #1
 8016eb4:	f003 031f 	and.w	r3, r3, #31
 8016eb8:	2101      	movs	r1, #1
 8016eba:	fa01 f303 	lsl.w	r3, r1, r3
 8016ebe:	ea42 0103 	orr.w	r1, r2, r3
 8016ec2:	683b      	ldr	r3, [r7, #0]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d10a      	bne.n	8016ee4 <HAL_ADC_ConfigChannel+0x428>
 8016ece:	683b      	ldr	r3, [r7, #0]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	0e9b      	lsrs	r3, r3, #26
 8016ed4:	3301      	adds	r3, #1
 8016ed6:	f003 021f 	and.w	r2, r3, #31
 8016eda:	4613      	mov	r3, r2
 8016edc:	005b      	lsls	r3, r3, #1
 8016ede:	4413      	add	r3, r2
 8016ee0:	051b      	lsls	r3, r3, #20
 8016ee2:	e011      	b.n	8016f08 <HAL_ADC_ConfigChannel+0x44c>
 8016ee4:	683b      	ldr	r3, [r7, #0]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eec:	fa93 f3a3 	rbit	r3, r3
 8016ef0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8016ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef4:	fab3 f383 	clz	r3, r3
 8016ef8:	b2db      	uxtb	r3, r3
 8016efa:	3301      	adds	r3, #1
 8016efc:	f003 021f 	and.w	r2, r3, #31
 8016f00:	4613      	mov	r3, r2
 8016f02:	005b      	lsls	r3, r3, #1
 8016f04:	4413      	add	r3, r2
 8016f06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016f08:	430b      	orrs	r3, r1
 8016f0a:	e069      	b.n	8016fe0 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016f0c:	683b      	ldr	r3, [r7, #0]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d107      	bne.n	8016f28 <HAL_ADC_ConfigChannel+0x46c>
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	0e9b      	lsrs	r3, r3, #26
 8016f1e:	3301      	adds	r3, #1
 8016f20:	069b      	lsls	r3, r3, #26
 8016f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016f26:	e00e      	b.n	8016f46 <HAL_ADC_ConfigChannel+0x48a>
 8016f28:	683b      	ldr	r3, [r7, #0]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016f2e:	6a3b      	ldr	r3, [r7, #32]
 8016f30:	fa93 f3a3 	rbit	r3, r3
 8016f34:	61fb      	str	r3, [r7, #28]
  return result;
 8016f36:	69fb      	ldr	r3, [r7, #28]
 8016f38:	fab3 f383 	clz	r3, r3
 8016f3c:	b2db      	uxtb	r3, r3
 8016f3e:	3301      	adds	r3, #1
 8016f40:	069b      	lsls	r3, r3, #26
 8016f42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d109      	bne.n	8016f66 <HAL_ADC_ConfigChannel+0x4aa>
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	0e9b      	lsrs	r3, r3, #26
 8016f58:	3301      	adds	r3, #1
 8016f5a:	f003 031f 	and.w	r3, r3, #31
 8016f5e:	2101      	movs	r1, #1
 8016f60:	fa01 f303 	lsl.w	r3, r1, r3
 8016f64:	e010      	b.n	8016f88 <HAL_ADC_ConfigChannel+0x4cc>
 8016f66:	683b      	ldr	r3, [r7, #0]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016f6c:	69bb      	ldr	r3, [r7, #24]
 8016f6e:	fa93 f3a3 	rbit	r3, r3
 8016f72:	617b      	str	r3, [r7, #20]
  return result;
 8016f74:	697b      	ldr	r3, [r7, #20]
 8016f76:	fab3 f383 	clz	r3, r3
 8016f7a:	b2db      	uxtb	r3, r3
 8016f7c:	3301      	adds	r3, #1
 8016f7e:	f003 031f 	and.w	r3, r3, #31
 8016f82:	2101      	movs	r1, #1
 8016f84:	fa01 f303 	lsl.w	r3, r1, r3
 8016f88:	ea42 0103 	orr.w	r1, r2, r3
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d10d      	bne.n	8016fb4 <HAL_ADC_ConfigChannel+0x4f8>
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	0e9b      	lsrs	r3, r3, #26
 8016f9e:	3301      	adds	r3, #1
 8016fa0:	f003 021f 	and.w	r2, r3, #31
 8016fa4:	4613      	mov	r3, r2
 8016fa6:	005b      	lsls	r3, r3, #1
 8016fa8:	4413      	add	r3, r2
 8016faa:	3b1e      	subs	r3, #30
 8016fac:	051b      	lsls	r3, r3, #20
 8016fae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016fb2:	e014      	b.n	8016fde <HAL_ADC_ConfigChannel+0x522>
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016fba:	693b      	ldr	r3, [r7, #16]
 8016fbc:	fa93 f3a3 	rbit	r3, r3
 8016fc0:	60fb      	str	r3, [r7, #12]
  return result;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	fab3 f383 	clz	r3, r3
 8016fc8:	b2db      	uxtb	r3, r3
 8016fca:	3301      	adds	r3, #1
 8016fcc:	f003 021f 	and.w	r2, r3, #31
 8016fd0:	4613      	mov	r3, r2
 8016fd2:	005b      	lsls	r3, r3, #1
 8016fd4:	4413      	add	r3, r2
 8016fd6:	3b1e      	subs	r3, #30
 8016fd8:	051b      	lsls	r3, r3, #20
 8016fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016fde:	430b      	orrs	r3, r1
 8016fe0:	683a      	ldr	r2, [r7, #0]
 8016fe2:	6892      	ldr	r2, [r2, #8]
 8016fe4:	4619      	mov	r1, r3
 8016fe6:	f7ff f9e9 	bl	80163bc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	681a      	ldr	r2, [r3, #0]
 8016fee:	4b2b      	ldr	r3, [pc, #172]	; (801709c <HAL_ADC_ConfigChannel+0x5e0>)
 8016ff0:	4013      	ands	r3, r2
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	f000 808c 	beq.w	8017110 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016ff8:	4829      	ldr	r0, [pc, #164]	; (80170a0 <HAL_ADC_ConfigChannel+0x5e4>)
 8016ffa:	f7ff f947 	bl	801628c <LL_ADC_GetCommonPathInternalCh>
 8016ffe:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017002:	4828      	ldr	r0, [pc, #160]	; (80170a4 <HAL_ADC_ConfigChannel+0x5e8>)
 8017004:	f7ff fa9c 	bl	8016540 <LL_ADC_IsEnabled>
 8017008:	4603      	mov	r3, r0
 801700a:	2b00      	cmp	r3, #0
 801700c:	d16d      	bne.n	80170ea <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	4a25      	ldr	r2, [pc, #148]	; (80170a8 <HAL_ADC_ConfigChannel+0x5ec>)
 8017014:	4293      	cmp	r3, r2
 8017016:	d126      	bne.n	8017066 <HAL_ADC_ConfigChannel+0x5aa>
 8017018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801701c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017020:	2b00      	cmp	r3, #0
 8017022:	d120      	bne.n	8017066 <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	4a1e      	ldr	r2, [pc, #120]	; (80170a4 <HAL_ADC_ConfigChannel+0x5e8>)
 801702a:	4293      	cmp	r3, r2
 801702c:	d170      	bne.n	8017110 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 801702e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017032:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017036:	4619      	mov	r1, r3
 8017038:	4819      	ldr	r0, [pc, #100]	; (80170a0 <HAL_ADC_ConfigChannel+0x5e4>)
 801703a:	f7ff f914 	bl	8016266 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 801703e:	4b1b      	ldr	r3, [pc, #108]	; (80170ac <HAL_ADC_ConfigChannel+0x5f0>)
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	099b      	lsrs	r3, r3, #6
 8017044:	4a1a      	ldr	r2, [pc, #104]	; (80170b0 <HAL_ADC_ConfigChannel+0x5f4>)
 8017046:	fba2 2303 	umull	r2, r3, r2, r3
 801704a:	099a      	lsrs	r2, r3, #6
 801704c:	4613      	mov	r3, r2
 801704e:	005b      	lsls	r3, r3, #1
 8017050:	4413      	add	r3, r2
 8017052:	009b      	lsls	r3, r3, #2
 8017054:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8017056:	e002      	b.n	801705e <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	3b01      	subs	r3, #1
 801705c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 801705e:	68bb      	ldr	r3, [r7, #8]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d1f9      	bne.n	8017058 <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8017064:	e054      	b.n	8017110 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8017066:	683b      	ldr	r3, [r7, #0]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	4a12      	ldr	r2, [pc, #72]	; (80170b4 <HAL_ADC_ConfigChannel+0x5f8>)
 801706c:	4293      	cmp	r3, r2
 801706e:	d123      	bne.n	80170b8 <HAL_ADC_ConfigChannel+0x5fc>
 8017070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017078:	2b00      	cmp	r3, #0
 801707a:	d11d      	bne.n	80170b8 <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	4a08      	ldr	r2, [pc, #32]	; (80170a4 <HAL_ADC_ConfigChannel+0x5e8>)
 8017082:	4293      	cmp	r3, r2
 8017084:	d144      	bne.n	8017110 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8017086:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801708a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801708e:	4619      	mov	r1, r3
 8017090:	4803      	ldr	r0, [pc, #12]	; (80170a0 <HAL_ADC_ConfigChannel+0x5e4>)
 8017092:	f7ff f8e8 	bl	8016266 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8017096:	e03b      	b.n	8017110 <HAL_ADC_ConfigChannel+0x654>
 8017098:	407f0000 	.word	0x407f0000
 801709c:	80080000 	.word	0x80080000
 80170a0:	50040300 	.word	0x50040300
 80170a4:	50040000 	.word	0x50040000
 80170a8:	c7520000 	.word	0xc7520000
 80170ac:	20000078 	.word	0x20000078
 80170b0:	053e2d63 	.word	0x053e2d63
 80170b4:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	4a19      	ldr	r2, [pc, #100]	; (8017124 <HAL_ADC_ConfigChannel+0x668>)
 80170be:	4293      	cmp	r3, r2
 80170c0:	d126      	bne.n	8017110 <HAL_ADC_ConfigChannel+0x654>
 80170c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80170c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d120      	bne.n	8017110 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	4a15      	ldr	r2, [pc, #84]	; (8017128 <HAL_ADC_ConfigChannel+0x66c>)
 80170d4:	4293      	cmp	r3, r2
 80170d6:	d11b      	bne.n	8017110 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80170d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80170dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80170e0:	4619      	mov	r1, r3
 80170e2:	4812      	ldr	r0, [pc, #72]	; (801712c <HAL_ADC_ConfigChannel+0x670>)
 80170e4:	f7ff f8bf 	bl	8016266 <LL_ADC_SetCommonPathInternalCh>
 80170e8:	e012      	b.n	8017110 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170ee:	f043 0220 	orr.w	r2, r3, #32
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80170f6:	2301      	movs	r3, #1
 80170f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80170fc:	e008      	b.n	8017110 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017102:	f043 0220 	orr.w	r2, r3, #32
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 801710a:	2301      	movs	r3, #1
 801710c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2200      	movs	r2, #0
 8017114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8017118:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 801711c:	4618      	mov	r0, r3
 801711e:	3798      	adds	r7, #152	; 0x98
 8017120:	46bd      	mov	sp, r7
 8017122:	bd80      	pop	{r7, pc}
 8017124:	80000001 	.word	0x80000001
 8017128:	50040000 	.word	0x50040000
 801712c:	50040300 	.word	0x50040300

08017130 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b088      	sub	sp, #32
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
 8017138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801713a:	2300      	movs	r3, #0
 801713c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	4618      	mov	r0, r3
 8017148:	f7ff fa48 	bl	80165dc <LL_ADC_REG_IsConversionOngoing>
 801714c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	4618      	mov	r0, r3
 8017154:	f7ff fa69 	bl	801662a <LL_ADC_INJ_IsConversionOngoing>
 8017158:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801715a:	693b      	ldr	r3, [r7, #16]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d103      	bne.n	8017168 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	2b00      	cmp	r3, #0
 8017164:	f000 8090 	beq.w	8017288 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	68db      	ldr	r3, [r3, #12]
 801716e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017172:	2b00      	cmp	r3, #0
 8017174:	d02a      	beq.n	80171cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	7e5b      	ldrb	r3, [r3, #25]
 801717a:	2b01      	cmp	r3, #1
 801717c:	d126      	bne.n	80171cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	7e1b      	ldrb	r3, [r3, #24]
 8017182:	2b01      	cmp	r3, #1
 8017184:	d122      	bne.n	80171cc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8017186:	2301      	movs	r3, #1
 8017188:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801718a:	e014      	b.n	80171b6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801718c:	69fb      	ldr	r3, [r7, #28]
 801718e:	4a41      	ldr	r2, [pc, #260]	; (8017294 <ADC_ConversionStop+0x164>)
 8017190:	4293      	cmp	r3, r2
 8017192:	d90d      	bls.n	80171b0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017198:	f043 0210 	orr.w	r2, r3, #16
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80171a4:	f043 0201 	orr.w	r2, r3, #1
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80171ac:	2301      	movs	r3, #1
 80171ae:	e06c      	b.n	801728a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80171b0:	69fb      	ldr	r3, [r7, #28]
 80171b2:	3301      	adds	r3, #1
 80171b4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80171c0:	2b40      	cmp	r3, #64	; 0x40
 80171c2:	d1e3      	bne.n	801718c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	2240      	movs	r2, #64	; 0x40
 80171ca:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80171cc:	69bb      	ldr	r3, [r7, #24]
 80171ce:	2b02      	cmp	r3, #2
 80171d0:	d014      	beq.n	80171fc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7ff fa00 	bl	80165dc <LL_ADC_REG_IsConversionOngoing>
 80171dc:	4603      	mov	r3, r0
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d00c      	beq.n	80171fc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	4618      	mov	r0, r3
 80171e8:	f7ff f9bd 	bl	8016566 <LL_ADC_IsDisableOngoing>
 80171ec:	4603      	mov	r3, r0
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d104      	bne.n	80171fc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	4618      	mov	r0, r3
 80171f8:	f7ff f9dc 	bl	80165b4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80171fc:	69bb      	ldr	r3, [r7, #24]
 80171fe:	2b01      	cmp	r3, #1
 8017200:	d014      	beq.n	801722c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	4618      	mov	r0, r3
 8017208:	f7ff fa0f 	bl	801662a <LL_ADC_INJ_IsConversionOngoing>
 801720c:	4603      	mov	r3, r0
 801720e:	2b00      	cmp	r3, #0
 8017210:	d00c      	beq.n	801722c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	4618      	mov	r0, r3
 8017218:	f7ff f9a5 	bl	8016566 <LL_ADC_IsDisableOngoing>
 801721c:	4603      	mov	r3, r0
 801721e:	2b00      	cmp	r3, #0
 8017220:	d104      	bne.n	801722c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	4618      	mov	r0, r3
 8017228:	f7ff f9eb 	bl	8016602 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801722c:	69bb      	ldr	r3, [r7, #24]
 801722e:	2b02      	cmp	r3, #2
 8017230:	d004      	beq.n	801723c <ADC_ConversionStop+0x10c>
 8017232:	2b03      	cmp	r3, #3
 8017234:	d105      	bne.n	8017242 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8017236:	230c      	movs	r3, #12
 8017238:	617b      	str	r3, [r7, #20]
        break;
 801723a:	e005      	b.n	8017248 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801723c:	2308      	movs	r3, #8
 801723e:	617b      	str	r3, [r7, #20]
        break;
 8017240:	e002      	b.n	8017248 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8017242:	2304      	movs	r3, #4
 8017244:	617b      	str	r3, [r7, #20]
        break;
 8017246:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8017248:	f7fe ffc8 	bl	80161dc <HAL_GetTick>
 801724c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801724e:	e014      	b.n	801727a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8017250:	f7fe ffc4 	bl	80161dc <HAL_GetTick>
 8017254:	4602      	mov	r2, r0
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	1ad3      	subs	r3, r2, r3
 801725a:	2b05      	cmp	r3, #5
 801725c:	d90d      	bls.n	801727a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017262:	f043 0210 	orr.w	r2, r3, #16
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801726e:	f043 0201 	orr.w	r2, r3, #1
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8017276:	2301      	movs	r3, #1
 8017278:	e007      	b.n	801728a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	689a      	ldr	r2, [r3, #8]
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	4013      	ands	r3, r2
 8017284:	2b00      	cmp	r3, #0
 8017286:	d1e3      	bne.n	8017250 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8017288:	2300      	movs	r3, #0
}
 801728a:	4618      	mov	r0, r3
 801728c:	3720      	adds	r7, #32
 801728e:	46bd      	mov	sp, r7
 8017290:	bd80      	pop	{r7, pc}
 8017292:	bf00      	nop
 8017294:	a33fffff 	.word	0xa33fffff

08017298 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b084      	sub	sp, #16
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	4618      	mov	r0, r3
 80172a6:	f7ff f94b 	bl	8016540 <LL_ADC_IsEnabled>
 80172aa:	4603      	mov	r3, r0
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d146      	bne.n	801733e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	689a      	ldr	r2, [r3, #8]
 80172b6:	4b24      	ldr	r3, [pc, #144]	; (8017348 <ADC_Enable+0xb0>)
 80172b8:	4013      	ands	r3, r2
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d00d      	beq.n	80172da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172c2:	f043 0210 	orr.w	r2, r3, #16
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80172ce:	f043 0201 	orr.w	r2, r3, #1
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80172d6:	2301      	movs	r3, #1
 80172d8:	e032      	b.n	8017340 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	4618      	mov	r0, r3
 80172e0:	f7ff f906 	bl	80164f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80172e4:	f7fe ff7a 	bl	80161dc <HAL_GetTick>
 80172e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80172ea:	e021      	b.n	8017330 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	4618      	mov	r0, r3
 80172f2:	f7ff f925 	bl	8016540 <LL_ADC_IsEnabled>
 80172f6:	4603      	mov	r3, r0
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d104      	bne.n	8017306 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	4618      	mov	r0, r3
 8017302:	f7ff f8f5 	bl	80164f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8017306:	f7fe ff69 	bl	80161dc <HAL_GetTick>
 801730a:	4602      	mov	r2, r0
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	1ad3      	subs	r3, r2, r3
 8017310:	2b02      	cmp	r3, #2
 8017312:	d90d      	bls.n	8017330 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017318:	f043 0210 	orr.w	r2, r3, #16
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017324:	f043 0201 	orr.w	r2, r3, #1
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801732c:	2301      	movs	r3, #1
 801732e:	e007      	b.n	8017340 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	f003 0301 	and.w	r3, r3, #1
 801733a:	2b01      	cmp	r3, #1
 801733c:	d1d6      	bne.n	80172ec <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801733e:	2300      	movs	r3, #0
}
 8017340:	4618      	mov	r0, r3
 8017342:	3710      	adds	r7, #16
 8017344:	46bd      	mov	sp, r7
 8017346:	bd80      	pop	{r7, pc}
 8017348:	8000003f 	.word	0x8000003f

0801734c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b084      	sub	sp, #16
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	4618      	mov	r0, r3
 801735a:	f7ff f904 	bl	8016566 <LL_ADC_IsDisableOngoing>
 801735e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	4618      	mov	r0, r3
 8017366:	f7ff f8eb 	bl	8016540 <LL_ADC_IsEnabled>
 801736a:	4603      	mov	r3, r0
 801736c:	2b00      	cmp	r3, #0
 801736e:	d040      	beq.n	80173f2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d13d      	bne.n	80173f2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	689b      	ldr	r3, [r3, #8]
 801737c:	f003 030d 	and.w	r3, r3, #13
 8017380:	2b01      	cmp	r3, #1
 8017382:	d10c      	bne.n	801739e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	4618      	mov	r0, r3
 801738a:	f7ff f8c5 	bl	8016518 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	2203      	movs	r2, #3
 8017394:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8017396:	f7fe ff21 	bl	80161dc <HAL_GetTick>
 801739a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801739c:	e022      	b.n	80173e4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173a2:	f043 0210 	orr.w	r2, r3, #16
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80173ae:	f043 0201 	orr.w	r2, r3, #1
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80173b6:	2301      	movs	r3, #1
 80173b8:	e01c      	b.n	80173f4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80173ba:	f7fe ff0f 	bl	80161dc <HAL_GetTick>
 80173be:	4602      	mov	r2, r0
 80173c0:	68bb      	ldr	r3, [r7, #8]
 80173c2:	1ad3      	subs	r3, r2, r3
 80173c4:	2b02      	cmp	r3, #2
 80173c6:	d90d      	bls.n	80173e4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173cc:	f043 0210 	orr.w	r2, r3, #16
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80173d8:	f043 0201 	orr.w	r2, r3, #1
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80173e0:	2301      	movs	r3, #1
 80173e2:	e007      	b.n	80173f4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	689b      	ldr	r3, [r3, #8]
 80173ea:	f003 0301 	and.w	r3, r3, #1
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d1e3      	bne.n	80173ba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80173f2:	2300      	movs	r3, #0
}
 80173f4:	4618      	mov	r0, r3
 80173f6:	3710      	adds	r7, #16
 80173f8:	46bd      	mov	sp, r7
 80173fa:	bd80      	pop	{r7, pc}

080173fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b084      	sub	sp, #16
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017408:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801740e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017412:	2b00      	cmp	r3, #0
 8017414:	d14b      	bne.n	80174ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801741a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	f003 0308 	and.w	r3, r3, #8
 801742c:	2b00      	cmp	r3, #0
 801742e:	d021      	beq.n	8017474 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	4618      	mov	r0, r3
 8017436:	f7fe ff85 	bl	8016344 <LL_ADC_REG_IsTriggerSourceSWStart>
 801743a:	4603      	mov	r3, r0
 801743c:	2b00      	cmp	r3, #0
 801743e:	d032      	beq.n	80174a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	68db      	ldr	r3, [r3, #12]
 8017446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801744a:	2b00      	cmp	r3, #0
 801744c:	d12b      	bne.n	80174a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801745e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017462:	2b00      	cmp	r3, #0
 8017464:	d11f      	bne.n	80174a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801746a:	f043 0201 	orr.w	r2, r3, #1
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	655a      	str	r2, [r3, #84]	; 0x54
 8017472:	e018      	b.n	80174a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	68db      	ldr	r3, [r3, #12]
 801747a:	f003 0302 	and.w	r3, r3, #2
 801747e:	2b00      	cmp	r3, #0
 8017480:	d111      	bne.n	80174a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017496:	2b00      	cmp	r3, #0
 8017498:	d105      	bne.n	80174a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801749e:	f043 0201 	orr.w	r2, r3, #1
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80174a6:	68f8      	ldr	r0, [r7, #12]
 80174a8:	f7fa f910 	bl	80116cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80174ac:	e00e      	b.n	80174cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80174b2:	f003 0310 	and.w	r3, r3, #16
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d003      	beq.n	80174c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80174ba:	68f8      	ldr	r0, [r7, #12]
 80174bc:	f7ff faf3 	bl	8016aa6 <HAL_ADC_ErrorCallback>
}
 80174c0:	e004      	b.n	80174cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80174c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80174c8:	6878      	ldr	r0, [r7, #4]
 80174ca:	4798      	blx	r3
}
 80174cc:	bf00      	nop
 80174ce:	3710      	adds	r7, #16
 80174d0:	46bd      	mov	sp, r7
 80174d2:	bd80      	pop	{r7, pc}

080174d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b084      	sub	sp, #16
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80174e2:	68f8      	ldr	r0, [r7, #12]
 80174e4:	f7fa f90a 	bl	80116fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80174e8:	bf00      	nop
 80174ea:	3710      	adds	r7, #16
 80174ec:	46bd      	mov	sp, r7
 80174ee:	bd80      	pop	{r7, pc}

080174f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b084      	sub	sp, #16
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801750e:	f043 0204 	orr.w	r2, r3, #4
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8017516:	68f8      	ldr	r0, [r7, #12]
 8017518:	f7ff fac5 	bl	8016aa6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801751c:	bf00      	nop
 801751e:	3710      	adds	r7, #16
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}

08017524 <LL_EXTI_EnableIT_0_31>:
{
 8017524:	b480      	push	{r7}
 8017526:	b083      	sub	sp, #12
 8017528:	af00      	add	r7, sp, #0
 801752a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 801752c:	4b06      	ldr	r3, [pc, #24]	; (8017548 <LL_EXTI_EnableIT_0_31+0x24>)
 801752e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8017532:	4905      	ldr	r1, [pc, #20]	; (8017548 <LL_EXTI_EnableIT_0_31+0x24>)
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	4313      	orrs	r3, r2
 8017538:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 801753c:	bf00      	nop
 801753e:	370c      	adds	r7, #12
 8017540:	46bd      	mov	sp, r7
 8017542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017546:	4770      	bx	lr
 8017548:	58000800 	.word	0x58000800

0801754c <LL_EXTI_DisableIT_0_31>:
{
 801754c:	b480      	push	{r7}
 801754e:	b083      	sub	sp, #12
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8017554:	4b07      	ldr	r3, [pc, #28]	; (8017574 <LL_EXTI_DisableIT_0_31+0x28>)
 8017556:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	43db      	mvns	r3, r3
 801755e:	4905      	ldr	r1, [pc, #20]	; (8017574 <LL_EXTI_DisableIT_0_31+0x28>)
 8017560:	4013      	ands	r3, r2
 8017562:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8017566:	bf00      	nop
 8017568:	370c      	adds	r7, #12
 801756a:	46bd      	mov	sp, r7
 801756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017570:	4770      	bx	lr
 8017572:	bf00      	nop
 8017574:	58000800 	.word	0x58000800

08017578 <LL_EXTI_EnableEvent_0_31>:
{
 8017578:	b480      	push	{r7}
 801757a:	b083      	sub	sp, #12
 801757c:	af00      	add	r7, sp, #0
 801757e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8017580:	4b06      	ldr	r3, [pc, #24]	; (801759c <LL_EXTI_EnableEvent_0_31+0x24>)
 8017582:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8017586:	4905      	ldr	r1, [pc, #20]	; (801759c <LL_EXTI_EnableEvent_0_31+0x24>)
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	4313      	orrs	r3, r2
 801758c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8017590:	bf00      	nop
 8017592:	370c      	adds	r7, #12
 8017594:	46bd      	mov	sp, r7
 8017596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759a:	4770      	bx	lr
 801759c:	58000800 	.word	0x58000800

080175a0 <LL_EXTI_DisableEvent_0_31>:
{
 80175a0:	b480      	push	{r7}
 80175a2:	b083      	sub	sp, #12
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80175a8:	4b07      	ldr	r3, [pc, #28]	; (80175c8 <LL_EXTI_DisableEvent_0_31+0x28>)
 80175aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	43db      	mvns	r3, r3
 80175b2:	4905      	ldr	r1, [pc, #20]	; (80175c8 <LL_EXTI_DisableEvent_0_31+0x28>)
 80175b4:	4013      	ands	r3, r2
 80175b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80175ba:	bf00      	nop
 80175bc:	370c      	adds	r7, #12
 80175be:	46bd      	mov	sp, r7
 80175c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c4:	4770      	bx	lr
 80175c6:	bf00      	nop
 80175c8:	58000800 	.word	0x58000800

080175cc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80175cc:	b480      	push	{r7}
 80175ce:	b083      	sub	sp, #12
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80175d4:	4b05      	ldr	r3, [pc, #20]	; (80175ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80175d6:	681a      	ldr	r2, [r3, #0]
 80175d8:	4904      	ldr	r1, [pc, #16]	; (80175ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	4313      	orrs	r3, r2
 80175de:	600b      	str	r3, [r1, #0]
}
 80175e0:	bf00      	nop
 80175e2:	370c      	adds	r7, #12
 80175e4:	46bd      	mov	sp, r7
 80175e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ea:	4770      	bx	lr
 80175ec:	58000800 	.word	0x58000800

080175f0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80175f0:	b480      	push	{r7}
 80175f2:	b083      	sub	sp, #12
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80175f8:	4b06      	ldr	r3, [pc, #24]	; (8017614 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80175fa:	681a      	ldr	r2, [r3, #0]
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	43db      	mvns	r3, r3
 8017600:	4904      	ldr	r1, [pc, #16]	; (8017614 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8017602:	4013      	ands	r3, r2
 8017604:	600b      	str	r3, [r1, #0]

}
 8017606:	bf00      	nop
 8017608:	370c      	adds	r7, #12
 801760a:	46bd      	mov	sp, r7
 801760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017610:	4770      	bx	lr
 8017612:	bf00      	nop
 8017614:	58000800 	.word	0x58000800

08017618 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8017618:	b480      	push	{r7}
 801761a:	b083      	sub	sp, #12
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8017620:	4b05      	ldr	r3, [pc, #20]	; (8017638 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8017622:	685a      	ldr	r2, [r3, #4]
 8017624:	4904      	ldr	r1, [pc, #16]	; (8017638 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	4313      	orrs	r3, r2
 801762a:	604b      	str	r3, [r1, #4]
}
 801762c:	bf00      	nop
 801762e:	370c      	adds	r7, #12
 8017630:	46bd      	mov	sp, r7
 8017632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017636:	4770      	bx	lr
 8017638:	58000800 	.word	0x58000800

0801763c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 801763c:	b480      	push	{r7}
 801763e:	b083      	sub	sp, #12
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8017644:	4b06      	ldr	r3, [pc, #24]	; (8017660 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8017646:	685a      	ldr	r2, [r3, #4]
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	43db      	mvns	r3, r3
 801764c:	4904      	ldr	r1, [pc, #16]	; (8017660 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 801764e:	4013      	ands	r3, r2
 8017650:	604b      	str	r3, [r1, #4]
}
 8017652:	bf00      	nop
 8017654:	370c      	adds	r7, #12
 8017656:	46bd      	mov	sp, r7
 8017658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765c:	4770      	bx	lr
 801765e:	bf00      	nop
 8017660:	58000800 	.word	0x58000800

08017664 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8017664:	b480      	push	{r7}
 8017666:	b083      	sub	sp, #12
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 801766c:	4b07      	ldr	r3, [pc, #28]	; (801768c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 801766e:	68da      	ldr	r2, [r3, #12]
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	4013      	ands	r3, r2
 8017674:	687a      	ldr	r2, [r7, #4]
 8017676:	429a      	cmp	r2, r3
 8017678:	d101      	bne.n	801767e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 801767a:	2301      	movs	r3, #1
 801767c:	e000      	b.n	8017680 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 801767e:	2300      	movs	r3, #0
}
 8017680:	4618      	mov	r0, r3
 8017682:	370c      	adds	r7, #12
 8017684:	46bd      	mov	sp, r7
 8017686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768a:	4770      	bx	lr
 801768c:	58000800 	.word	0x58000800

08017690 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8017690:	b480      	push	{r7}
 8017692:	b083      	sub	sp, #12
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8017698:	4a04      	ldr	r2, [pc, #16]	; (80176ac <LL_EXTI_ClearFlag_0_31+0x1c>)
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	60d3      	str	r3, [r2, #12]
}
 801769e:	bf00      	nop
 80176a0:	370c      	adds	r7, #12
 80176a2:	46bd      	mov	sp, r7
 80176a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a8:	4770      	bx	lr
 80176aa:	bf00      	nop
 80176ac:	58000800 	.word	0x58000800

080176b0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b088      	sub	sp, #32
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80176b8:	2300      	movs	r3, #0
 80176ba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80176bc:	2300      	movs	r3, #0
 80176be:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d102      	bne.n	80176cc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80176c6:	2301      	movs	r3, #1
 80176c8:	77fb      	strb	r3, [r7, #31]
 80176ca:	e0c4      	b.n	8017856 <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80176d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80176da:	d102      	bne.n	80176e2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80176dc:	2301      	movs	r3, #1
 80176de:	77fb      	strb	r3, [r7, #31]
 80176e0:	e0b9      	b.n	8017856 <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80176e8:	b2db      	uxtb	r3, r3
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d109      	bne.n	8017702 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	2200      	movs	r2, #0
 80176f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	2200      	movs	r2, #0
 80176fa:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80176fc:	6878      	ldr	r0, [r7, #4]
 80176fe:	f7fa f85d 	bl	80117bc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801770c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	68db      	ldr	r3, [r3, #12]
 8017716:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	69db      	ldr	r3, [r3, #28]
 801771c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	695b      	ldr	r3, [r3, #20]
 8017722:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	699b      	ldr	r3, [r3, #24]
 8017728:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 801772e:	4313      	orrs	r3, r2
 8017730:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	681a      	ldr	r2, [r3, #0]
 8017738:	4b49      	ldr	r3, [pc, #292]	; (8017860 <HAL_COMP_Init+0x1b0>)
 801773a:	4013      	ands	r3, r2
 801773c:	687a      	ldr	r2, [r7, #4]
 801773e:	6812      	ldr	r2, [r2, #0]
 8017740:	6979      	ldr	r1, [r7, #20]
 8017742:	430b      	orrs	r3, r1
 8017744:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	685b      	ldr	r3, [r3, #4]
 801774a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801774e:	d106      	bne.n	801775e <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8017750:	4b44      	ldr	r3, [pc, #272]	; (8017864 <HAL_COMP_Init+0x1b4>)
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	4a43      	ldr	r2, [pc, #268]	; (8017864 <HAL_COMP_Init+0x1b4>)
 8017756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801775a:	6013      	str	r3, [r2, #0]
 801775c:	e005      	b.n	801776a <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 801775e:	4b41      	ldr	r3, [pc, #260]	; (8017864 <HAL_COMP_Init+0x1b4>)
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	4a40      	ldr	r2, [pc, #256]	; (8017864 <HAL_COMP_Init+0x1b4>)
 8017764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017768:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017774:	2b00      	cmp	r3, #0
 8017776:	d015      	beq.n	80177a4 <HAL_COMP_Init+0xf4>
 8017778:	69bb      	ldr	r3, [r7, #24]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d112      	bne.n	80177a4 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 801777e:	4b3a      	ldr	r3, [pc, #232]	; (8017868 <HAL_COMP_Init+0x1b8>)
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	099b      	lsrs	r3, r3, #6
 8017784:	4a39      	ldr	r2, [pc, #228]	; (801786c <HAL_COMP_Init+0x1bc>)
 8017786:	fba2 2303 	umull	r2, r3, r2, r3
 801778a:	099a      	lsrs	r2, r3, #6
 801778c:	4613      	mov	r3, r2
 801778e:	009b      	lsls	r3, r3, #2
 8017790:	4413      	add	r3, r2
 8017792:	009b      	lsls	r3, r3, #2
 8017794:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8017796:	e002      	b.n	801779e <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	3b01      	subs	r3, #1
 801779c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d1f9      	bne.n	8017798 <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	4a31      	ldr	r2, [pc, #196]	; (8017870 <HAL_COMP_Init+0x1c0>)
 80177aa:	4293      	cmp	r3, r2
 80177ac:	d102      	bne.n	80177b4 <HAL_COMP_Init+0x104>
 80177ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80177b2:	e001      	b.n	80177b8 <HAL_COMP_Init+0x108>
 80177b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80177b8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	6a1b      	ldr	r3, [r3, #32]
 80177be:	f003 0303 	and.w	r3, r3, #3
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d037      	beq.n	8017836 <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	6a1b      	ldr	r3, [r3, #32]
 80177ca:	f003 0310 	and.w	r3, r3, #16
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d003      	beq.n	80177da <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80177d2:	6938      	ldr	r0, [r7, #16]
 80177d4:	f7ff fefa 	bl	80175cc <LL_EXTI_EnableRisingTrig_0_31>
 80177d8:	e002      	b.n	80177e0 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80177da:	6938      	ldr	r0, [r7, #16]
 80177dc:	f7ff ff08 	bl	80175f0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	6a1b      	ldr	r3, [r3, #32]
 80177e4:	f003 0320 	and.w	r3, r3, #32
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d003      	beq.n	80177f4 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80177ec:	6938      	ldr	r0, [r7, #16]
 80177ee:	f7ff ff13 	bl	8017618 <LL_EXTI_EnableFallingTrig_0_31>
 80177f2:	e002      	b.n	80177fa <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80177f4:	6938      	ldr	r0, [r7, #16]
 80177f6:	f7ff ff21 	bl	801763c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80177fa:	6938      	ldr	r0, [r7, #16]
 80177fc:	f7ff ff48 	bl	8017690 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	6a1b      	ldr	r3, [r3, #32]
 8017804:	f003 0302 	and.w	r3, r3, #2
 8017808:	2b00      	cmp	r3, #0
 801780a:	d003      	beq.n	8017814 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 801780c:	6938      	ldr	r0, [r7, #16]
 801780e:	f7ff feb3 	bl	8017578 <LL_EXTI_EnableEvent_0_31>
 8017812:	e002      	b.n	801781a <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8017814:	6938      	ldr	r0, [r7, #16]
 8017816:	f7ff fec3 	bl	80175a0 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	6a1b      	ldr	r3, [r3, #32]
 801781e:	f003 0301 	and.w	r3, r3, #1
 8017822:	2b00      	cmp	r3, #0
 8017824:	d003      	beq.n	801782e <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8017826:	6938      	ldr	r0, [r7, #16]
 8017828:	f7ff fe7c 	bl	8017524 <LL_EXTI_EnableIT_0_31>
 801782c:	e009      	b.n	8017842 <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 801782e:	6938      	ldr	r0, [r7, #16]
 8017830:	f7ff fe8c 	bl	801754c <LL_EXTI_DisableIT_0_31>
 8017834:	e005      	b.n	8017842 <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8017836:	6938      	ldr	r0, [r7, #16]
 8017838:	f7ff feb2 	bl	80175a0 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 801783c:	6938      	ldr	r0, [r7, #16]
 801783e:	f7ff fe85 	bl	801754c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8017848:	b2db      	uxtb	r3, r3
 801784a:	2b00      	cmp	r3, #0
 801784c:	d103      	bne.n	8017856 <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	2201      	movs	r2, #1
 8017852:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8017856:	7ffb      	ldrb	r3, [r7, #31]
}
 8017858:	4618      	mov	r0, r3
 801785a:	3720      	adds	r7, #32
 801785c:	46bd      	mov	sp, r7
 801785e:	bd80      	pop	{r7, pc}
 8017860:	f9207c03 	.word	0xf9207c03
 8017864:	40010204 	.word	0x40010204
 8017868:	20000078 	.word	0x20000078
 801786c:	053e2d63 	.word	0x053e2d63
 8017870:	40010200 	.word	0x40010200

08017874 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8017874:	b480      	push	{r7}
 8017876:	b085      	sub	sp, #20
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 801787c:	2300      	movs	r3, #0
 801787e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8017880:	2300      	movs	r3, #0
 8017882:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d102      	bne.n	8017890 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 801788a:	2301      	movs	r3, #1
 801788c:	73fb      	strb	r3, [r7, #15]
 801788e:	e02f      	b.n	80178f0 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801789a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801789e:	d102      	bne.n	80178a6 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 80178a0:	2301      	movs	r3, #1
 80178a2:	73fb      	strb	r3, [r7, #15]
 80178a4:	e024      	b.n	80178f0 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80178ac:	b2db      	uxtb	r3, r3
 80178ae:	2b01      	cmp	r3, #1
 80178b0:	d11c      	bne.n	80178ec <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	681a      	ldr	r2, [r3, #0]
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	f042 0201 	orr.w	r2, r2, #1
 80178c0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	2202      	movs	r2, #2
 80178c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80178ca:	4b0d      	ldr	r3, [pc, #52]	; (8017900 <HAL_COMP_Start+0x8c>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	099b      	lsrs	r3, r3, #6
 80178d0:	4a0c      	ldr	r2, [pc, #48]	; (8017904 <HAL_COMP_Start+0x90>)
 80178d2:	fba2 2303 	umull	r2, r3, r2, r3
 80178d6:	099b      	lsrs	r3, r3, #6
 80178d8:	00db      	lsls	r3, r3, #3
 80178da:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80178dc:	e002      	b.n	80178e4 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	3b01      	subs	r3, #1
 80178e2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80178e4:	68bb      	ldr	r3, [r7, #8]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d1f9      	bne.n	80178de <HAL_COMP_Start+0x6a>
 80178ea:	e001      	b.n	80178f0 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 80178ec:	2301      	movs	r3, #1
 80178ee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80178f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80178f2:	4618      	mov	r0, r3
 80178f4:	3714      	adds	r7, #20
 80178f6:	46bd      	mov	sp, r7
 80178f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fc:	4770      	bx	lr
 80178fe:	bf00      	nop
 8017900:	20000078 	.word	0x20000078
 8017904:	053e2d63 	.word	0x053e2d63

08017908 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8017908:	b480      	push	{r7}
 801790a:	b085      	sub	sp, #20
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017910:	2300      	movs	r3, #0
 8017912:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d102      	bne.n	8017920 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 801791a:	2301      	movs	r3, #1
 801791c:	73fb      	strb	r3, [r7, #15]
 801791e:	e01f      	b.n	8017960 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801792a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801792e:	d102      	bne.n	8017936 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8017930:	2301      	movs	r3, #1
 8017932:	73fb      	strb	r3, [r7, #15]
 8017934:	e014      	b.n	8017960 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801793c:	b2db      	uxtb	r3, r3
 801793e:	2b00      	cmp	r3, #0
 8017940:	d00c      	beq.n	801795c <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	681a      	ldr	r2, [r3, #0]
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	f022 0201 	bic.w	r2, r2, #1
 8017950:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	2201      	movs	r2, #1
 8017956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 801795a:	e001      	b.n	8017960 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 801795c:	2301      	movs	r3, #1
 801795e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8017960:	7bfb      	ldrb	r3, [r7, #15]
}
 8017962:	4618      	mov	r0, r3
 8017964:	3714      	adds	r7, #20
 8017966:	46bd      	mov	sp, r7
 8017968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796c:	4770      	bx	lr
	...

08017970 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b084      	sub	sp, #16
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	4a11      	ldr	r2, [pc, #68]	; (80179c4 <HAL_COMP_IRQHandler+0x54>)
 801797e:	4293      	cmp	r3, r2
 8017980:	d102      	bne.n	8017988 <HAL_COMP_IRQHandler+0x18>
 8017982:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8017986:	e001      	b.n	801798c <HAL_COMP_IRQHandler+0x1c>
 8017988:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801798c:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 801798e:	68f8      	ldr	r0, [r7, #12]
 8017990:	f7ff fe68 	bl	8017664 <LL_EXTI_IsActiveFlag_0_31>
 8017994:	4603      	mov	r3, r0
 8017996:	2b00      	cmp	r3, #0
 8017998:	d010      	beq.n	80179bc <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 801799a:	4b0b      	ldr	r3, [pc, #44]	; (80179c8 <HAL_COMP_IRQHandler+0x58>)
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d004      	beq.n	80179b0 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 80179a6:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80179aa:	f7ff fe71 	bl	8017690 <LL_EXTI_ClearFlag_0_31>
 80179ae:	e002      	b.n	80179b6 <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80179b0:	68f8      	ldr	r0, [r7, #12]
 80179b2:	f7ff fe6d 	bl	8017690 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f7fd ff72 	bl	80158a0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80179bc:	bf00      	nop
 80179be:	3710      	adds	r7, #16
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	40010200 	.word	0x40010200
 80179c8:	40010204 	.word	0x40010204

080179cc <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 80179cc:	b480      	push	{r7}
 80179ce:	b083      	sub	sp, #12
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	0f9b      	lsrs	r3, r3, #30
 80179dc:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 80179e0:	4618      	mov	r0, r3
 80179e2:	370c      	adds	r7, #12
 80179e4:	46bd      	mov	sp, r7
 80179e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ea:	4770      	bx	lr

080179ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80179ec:	b480      	push	{r7}
 80179ee:	b085      	sub	sp, #20
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	f003 0307 	and.w	r3, r3, #7
 80179fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80179fc:	4b0c      	ldr	r3, [pc, #48]	; (8017a30 <__NVIC_SetPriorityGrouping+0x44>)
 80179fe:	68db      	ldr	r3, [r3, #12]
 8017a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017a02:	68ba      	ldr	r2, [r7, #8]
 8017a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8017a08:	4013      	ands	r3, r2
 8017a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8017a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8017a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8017a1e:	4a04      	ldr	r2, [pc, #16]	; (8017a30 <__NVIC_SetPriorityGrouping+0x44>)
 8017a20:	68bb      	ldr	r3, [r7, #8]
 8017a22:	60d3      	str	r3, [r2, #12]
}
 8017a24:	bf00      	nop
 8017a26:	3714      	adds	r7, #20
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a2e:	4770      	bx	lr
 8017a30:	e000ed00 	.word	0xe000ed00

08017a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8017a34:	b480      	push	{r7}
 8017a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017a38:	4b04      	ldr	r3, [pc, #16]	; (8017a4c <__NVIC_GetPriorityGrouping+0x18>)
 8017a3a:	68db      	ldr	r3, [r3, #12]
 8017a3c:	0a1b      	lsrs	r3, r3, #8
 8017a3e:	f003 0307 	and.w	r3, r3, #7
}
 8017a42:	4618      	mov	r0, r3
 8017a44:	46bd      	mov	sp, r7
 8017a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4a:	4770      	bx	lr
 8017a4c:	e000ed00 	.word	0xe000ed00

08017a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017a50:	b480      	push	{r7}
 8017a52:	b083      	sub	sp, #12
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	4603      	mov	r3, r0
 8017a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	db0b      	blt.n	8017a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017a62:	79fb      	ldrb	r3, [r7, #7]
 8017a64:	f003 021f 	and.w	r2, r3, #31
 8017a68:	4907      	ldr	r1, [pc, #28]	; (8017a88 <__NVIC_EnableIRQ+0x38>)
 8017a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a6e:	095b      	lsrs	r3, r3, #5
 8017a70:	2001      	movs	r0, #1
 8017a72:	fa00 f202 	lsl.w	r2, r0, r2
 8017a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8017a7a:	bf00      	nop
 8017a7c:	370c      	adds	r7, #12
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a84:	4770      	bx	lr
 8017a86:	bf00      	nop
 8017a88:	e000e100 	.word	0xe000e100

08017a8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8017a8c:	b480      	push	{r7}
 8017a8e:	b083      	sub	sp, #12
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	4603      	mov	r3, r0
 8017a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	db10      	blt.n	8017ac0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017a9e:	79fb      	ldrb	r3, [r7, #7]
 8017aa0:	f003 021f 	and.w	r2, r3, #31
 8017aa4:	4909      	ldr	r1, [pc, #36]	; (8017acc <__NVIC_DisableIRQ+0x40>)
 8017aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017aaa:	095b      	lsrs	r3, r3, #5
 8017aac:	2001      	movs	r0, #1
 8017aae:	fa00 f202 	lsl.w	r2, r0, r2
 8017ab2:	3320      	adds	r3, #32
 8017ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017ab8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017abc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8017ac0:	bf00      	nop
 8017ac2:	370c      	adds	r7, #12
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aca:	4770      	bx	lr
 8017acc:	e000e100 	.word	0xe000e100

08017ad0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8017ad0:	b480      	push	{r7}
 8017ad2:	b083      	sub	sp, #12
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	db0c      	blt.n	8017afc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017ae2:	79fb      	ldrb	r3, [r7, #7]
 8017ae4:	f003 021f 	and.w	r2, r3, #31
 8017ae8:	4907      	ldr	r1, [pc, #28]	; (8017b08 <__NVIC_SetPendingIRQ+0x38>)
 8017aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017aee:	095b      	lsrs	r3, r3, #5
 8017af0:	2001      	movs	r0, #1
 8017af2:	fa00 f202 	lsl.w	r2, r0, r2
 8017af6:	3340      	adds	r3, #64	; 0x40
 8017af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8017afc:	bf00      	nop
 8017afe:	370c      	adds	r7, #12
 8017b00:	46bd      	mov	sp, r7
 8017b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b06:	4770      	bx	lr
 8017b08:	e000e100 	.word	0xe000e100

08017b0c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8017b0c:	b480      	push	{r7}
 8017b0e:	b083      	sub	sp, #12
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	4603      	mov	r3, r0
 8017b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	db0c      	blt.n	8017b38 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017b1e:	79fb      	ldrb	r3, [r7, #7]
 8017b20:	f003 021f 	and.w	r2, r3, #31
 8017b24:	4907      	ldr	r1, [pc, #28]	; (8017b44 <__NVIC_ClearPendingIRQ+0x38>)
 8017b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b2a:	095b      	lsrs	r3, r3, #5
 8017b2c:	2001      	movs	r0, #1
 8017b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8017b32:	3360      	adds	r3, #96	; 0x60
 8017b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8017b38:	bf00      	nop
 8017b3a:	370c      	adds	r7, #12
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b42:	4770      	bx	lr
 8017b44:	e000e100 	.word	0xe000e100

08017b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8017b48:	b480      	push	{r7}
 8017b4a:	b083      	sub	sp, #12
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	4603      	mov	r3, r0
 8017b50:	6039      	str	r1, [r7, #0]
 8017b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	db0a      	blt.n	8017b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017b5c:	683b      	ldr	r3, [r7, #0]
 8017b5e:	b2da      	uxtb	r2, r3
 8017b60:	490c      	ldr	r1, [pc, #48]	; (8017b94 <__NVIC_SetPriority+0x4c>)
 8017b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b66:	0112      	lsls	r2, r2, #4
 8017b68:	b2d2      	uxtb	r2, r2
 8017b6a:	440b      	add	r3, r1
 8017b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8017b70:	e00a      	b.n	8017b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017b72:	683b      	ldr	r3, [r7, #0]
 8017b74:	b2da      	uxtb	r2, r3
 8017b76:	4908      	ldr	r1, [pc, #32]	; (8017b98 <__NVIC_SetPriority+0x50>)
 8017b78:	79fb      	ldrb	r3, [r7, #7]
 8017b7a:	f003 030f 	and.w	r3, r3, #15
 8017b7e:	3b04      	subs	r3, #4
 8017b80:	0112      	lsls	r2, r2, #4
 8017b82:	b2d2      	uxtb	r2, r2
 8017b84:	440b      	add	r3, r1
 8017b86:	761a      	strb	r2, [r3, #24]
}
 8017b88:	bf00      	nop
 8017b8a:	370c      	adds	r7, #12
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b92:	4770      	bx	lr
 8017b94:	e000e100 	.word	0xe000e100
 8017b98:	e000ed00 	.word	0xe000ed00

08017b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017b9c:	b480      	push	{r7}
 8017b9e:	b089      	sub	sp, #36	; 0x24
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	60f8      	str	r0, [r7, #12]
 8017ba4:	60b9      	str	r1, [r7, #8]
 8017ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	f003 0307 	and.w	r3, r3, #7
 8017bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017bb0:	69fb      	ldr	r3, [r7, #28]
 8017bb2:	f1c3 0307 	rsb	r3, r3, #7
 8017bb6:	2b04      	cmp	r3, #4
 8017bb8:	bf28      	it	cs
 8017bba:	2304      	movcs	r3, #4
 8017bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017bbe:	69fb      	ldr	r3, [r7, #28]
 8017bc0:	3304      	adds	r3, #4
 8017bc2:	2b06      	cmp	r3, #6
 8017bc4:	d902      	bls.n	8017bcc <NVIC_EncodePriority+0x30>
 8017bc6:	69fb      	ldr	r3, [r7, #28]
 8017bc8:	3b03      	subs	r3, #3
 8017bca:	e000      	b.n	8017bce <NVIC_EncodePriority+0x32>
 8017bcc:	2300      	movs	r3, #0
 8017bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8017bd4:	69bb      	ldr	r3, [r7, #24]
 8017bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8017bda:	43da      	mvns	r2, r3
 8017bdc:	68bb      	ldr	r3, [r7, #8]
 8017bde:	401a      	ands	r2, r3
 8017be0:	697b      	ldr	r3, [r7, #20]
 8017be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8017be4:	f04f 31ff 	mov.w	r1, #4294967295
 8017be8:	697b      	ldr	r3, [r7, #20]
 8017bea:	fa01 f303 	lsl.w	r3, r1, r3
 8017bee:	43d9      	mvns	r1, r3
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017bf4:	4313      	orrs	r3, r2
         );
}
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	3724      	adds	r7, #36	; 0x24
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c00:	4770      	bx	lr
	...

08017c04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8017c04:	b480      	push	{r7}
 8017c06:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8017c08:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8017c0c:	4b05      	ldr	r3, [pc, #20]	; (8017c24 <__NVIC_SystemReset+0x20>)
 8017c0e:	68db      	ldr	r3, [r3, #12]
 8017c10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8017c14:	4903      	ldr	r1, [pc, #12]	; (8017c24 <__NVIC_SystemReset+0x20>)
 8017c16:	4b04      	ldr	r3, [pc, #16]	; (8017c28 <__NVIC_SystemReset+0x24>)
 8017c18:	4313      	orrs	r3, r2
 8017c1a:	60cb      	str	r3, [r1, #12]
 8017c1c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8017c20:	bf00      	nop
 8017c22:	e7fd      	b.n	8017c20 <__NVIC_SystemReset+0x1c>
 8017c24:	e000ed00 	.word	0xe000ed00
 8017c28:	05fa0004 	.word	0x05fa0004

08017c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b082      	sub	sp, #8
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8017c34:	6878      	ldr	r0, [r7, #4]
 8017c36:	f7ff fed9 	bl	80179ec <__NVIC_SetPriorityGrouping>
}
 8017c3a:	bf00      	nop
 8017c3c:	3708      	adds	r7, #8
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}

08017c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017c42:	b580      	push	{r7, lr}
 8017c44:	b086      	sub	sp, #24
 8017c46:	af00      	add	r7, sp, #0
 8017c48:	4603      	mov	r3, r0
 8017c4a:	60b9      	str	r1, [r7, #8]
 8017c4c:	607a      	str	r2, [r7, #4]
 8017c4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8017c50:	f7ff fef0 	bl	8017a34 <__NVIC_GetPriorityGrouping>
 8017c54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8017c56:	687a      	ldr	r2, [r7, #4]
 8017c58:	68b9      	ldr	r1, [r7, #8]
 8017c5a:	6978      	ldr	r0, [r7, #20]
 8017c5c:	f7ff ff9e 	bl	8017b9c <NVIC_EncodePriority>
 8017c60:	4602      	mov	r2, r0
 8017c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c66:	4611      	mov	r1, r2
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7ff ff6d 	bl	8017b48 <__NVIC_SetPriority>
}
 8017c6e:	bf00      	nop
 8017c70:	3718      	adds	r7, #24
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd80      	pop	{r7, pc}

08017c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017c76:	b580      	push	{r7, lr}
 8017c78:	b082      	sub	sp, #8
 8017c7a:	af00      	add	r7, sp, #0
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8017c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7ff fee3 	bl	8017a50 <__NVIC_EnableIRQ>
}
 8017c8a:	bf00      	nop
 8017c8c:	3708      	adds	r7, #8
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}

08017c92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8017c92:	b580      	push	{r7, lr}
 8017c94:	b082      	sub	sp, #8
 8017c96:	af00      	add	r7, sp, #0
 8017c98:	4603      	mov	r3, r0
 8017c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8017c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	f7ff fef3 	bl	8017a8c <__NVIC_DisableIRQ>
}
 8017ca6:	bf00      	nop
 8017ca8:	3708      	adds	r7, #8
 8017caa:	46bd      	mov	sp, r7
 8017cac:	bd80      	pop	{r7, pc}

08017cae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8017cae:	b580      	push	{r7, lr}
 8017cb0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8017cb2:	f7ff ffa7 	bl	8017c04 <__NVIC_SystemReset>

08017cb6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8017cb6:	b580      	push	{r7, lr}
 8017cb8:	b082      	sub	sp, #8
 8017cba:	af00      	add	r7, sp, #0
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8017cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7ff ff03 	bl	8017ad0 <__NVIC_SetPendingIRQ>
}
 8017cca:	bf00      	nop
 8017ccc:	3708      	adds	r7, #8
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	bd80      	pop	{r7, pc}

08017cd2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8017cd2:	b580      	push	{r7, lr}
 8017cd4:	b082      	sub	sp, #8
 8017cd6:	af00      	add	r7, sp, #0
 8017cd8:	4603      	mov	r3, r0
 8017cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8017cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7ff ff13 	bl	8017b0c <__NVIC_ClearPendingIRQ>
}
 8017ce6:	bf00      	nop
 8017ce8:	3708      	adds	r7, #8
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}
	...

08017cf0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b084      	sub	sp, #16
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d101      	bne.n	8017d02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8017cfe:	2301      	movs	r3, #1
 8017d00:	e08d      	b.n	8017e1e <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	461a      	mov	r2, r3
 8017d08:	4b47      	ldr	r3, [pc, #284]	; (8017e28 <HAL_DMA_Init+0x138>)
 8017d0a:	429a      	cmp	r2, r3
 8017d0c:	d80f      	bhi.n	8017d2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	461a      	mov	r2, r3
 8017d14:	4b45      	ldr	r3, [pc, #276]	; (8017e2c <HAL_DMA_Init+0x13c>)
 8017d16:	4413      	add	r3, r2
 8017d18:	4a45      	ldr	r2, [pc, #276]	; (8017e30 <HAL_DMA_Init+0x140>)
 8017d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8017d1e:	091b      	lsrs	r3, r3, #4
 8017d20:	009a      	lsls	r2, r3, #2
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	4a42      	ldr	r2, [pc, #264]	; (8017e34 <HAL_DMA_Init+0x144>)
 8017d2a:	641a      	str	r2, [r3, #64]	; 0x40
 8017d2c:	e00e      	b.n	8017d4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	461a      	mov	r2, r3
 8017d34:	4b40      	ldr	r3, [pc, #256]	; (8017e38 <HAL_DMA_Init+0x148>)
 8017d36:	4413      	add	r3, r2
 8017d38:	4a3d      	ldr	r2, [pc, #244]	; (8017e30 <HAL_DMA_Init+0x140>)
 8017d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8017d3e:	091b      	lsrs	r3, r3, #4
 8017d40:	009a      	lsls	r2, r3, #2
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	4a3c      	ldr	r2, [pc, #240]	; (8017e3c <HAL_DMA_Init+0x14c>)
 8017d4a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	2202      	movs	r2, #2
 8017d50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8017d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017d66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8017d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	691b      	ldr	r3, [r3, #16]
 8017d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	699b      	ldr	r3, [r3, #24]
 8017d82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	6a1b      	ldr	r3, [r3, #32]
 8017d8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8017d90:	68fa      	ldr	r2, [r7, #12]
 8017d92:	4313      	orrs	r3, r2
 8017d94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	68fa      	ldr	r2, [r7, #12]
 8017d9c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8017d9e:	6878      	ldr	r0, [r7, #4]
 8017da0:	f000 fa74 	bl	801828c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	689b      	ldr	r3, [r3, #8]
 8017da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017dac:	d102      	bne.n	8017db4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	2200      	movs	r2, #0
 8017db2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	685a      	ldr	r2, [r3, #4]
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017dbc:	b2d2      	uxtb	r2, r2
 8017dbe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017dc4:	687a      	ldr	r2, [r7, #4]
 8017dc6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8017dc8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	685b      	ldr	r3, [r3, #4]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d010      	beq.n	8017df4 <HAL_DMA_Init+0x104>
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	685b      	ldr	r3, [r3, #4]
 8017dd6:	2b04      	cmp	r3, #4
 8017dd8:	d80c      	bhi.n	8017df4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8017dda:	6878      	ldr	r0, [r7, #4]
 8017ddc:	f000 fa94 	bl	8018308 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017de4:	2200      	movs	r2, #0
 8017de6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017dec:	687a      	ldr	r2, [r7, #4]
 8017dee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8017df0:	605a      	str	r2, [r3, #4]
 8017df2:	e008      	b.n	8017e06 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	2200      	movs	r2, #0
 8017df8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	2200      	movs	r2, #0
 8017e04:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	2200      	movs	r2, #0
 8017e0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	2201      	movs	r2, #1
 8017e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	2200      	movs	r2, #0
 8017e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8017e1c:	2300      	movs	r3, #0
}
 8017e1e:	4618      	mov	r0, r3
 8017e20:	3710      	adds	r7, #16
 8017e22:	46bd      	mov	sp, r7
 8017e24:	bd80      	pop	{r7, pc}
 8017e26:	bf00      	nop
 8017e28:	40020407 	.word	0x40020407
 8017e2c:	bffdfff8 	.word	0xbffdfff8
 8017e30:	cccccccd 	.word	0xcccccccd
 8017e34:	40020000 	.word	0x40020000
 8017e38:	bffdfbf8 	.word	0xbffdfbf8
 8017e3c:	40020400 	.word	0x40020400

08017e40 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b086      	sub	sp, #24
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	60f8      	str	r0, [r7, #12]
 8017e48:	60b9      	str	r1, [r7, #8]
 8017e4a:	607a      	str	r2, [r7, #4]
 8017e4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017e4e:	2300      	movs	r3, #0
 8017e50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e58:	2b01      	cmp	r3, #1
 8017e5a:	d101      	bne.n	8017e60 <HAL_DMA_Start_IT+0x20>
 8017e5c:	2302      	movs	r3, #2
 8017e5e:	e066      	b.n	8017f2e <HAL_DMA_Start_IT+0xee>
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	2201      	movs	r2, #1
 8017e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8017e6e:	b2db      	uxtb	r3, r3
 8017e70:	2b01      	cmp	r3, #1
 8017e72:	d155      	bne.n	8017f20 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	2202      	movs	r2, #2
 8017e78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	2200      	movs	r2, #0
 8017e80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	681a      	ldr	r2, [r3, #0]
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	f022 0201 	bic.w	r2, r2, #1
 8017e90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8017e92:	683b      	ldr	r3, [r7, #0]
 8017e94:	687a      	ldr	r2, [r7, #4]
 8017e96:	68b9      	ldr	r1, [r7, #8]
 8017e98:	68f8      	ldr	r0, [r7, #12]
 8017e9a:	f000 f9b9 	bl	8018210 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d008      	beq.n	8017eb8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	681a      	ldr	r2, [r3, #0]
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	f042 020e 	orr.w	r2, r2, #14
 8017eb4:	601a      	str	r2, [r3, #0]
 8017eb6:	e00f      	b.n	8017ed8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	681a      	ldr	r2, [r3, #0]
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	f022 0204 	bic.w	r2, r2, #4
 8017ec6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	681a      	ldr	r2, [r3, #0]
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	f042 020a 	orr.w	r2, r2, #10
 8017ed6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d007      	beq.n	8017ef6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017eea:	681a      	ldr	r2, [r3, #0]
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017ef4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d007      	beq.n	8017f0e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f02:	681a      	ldr	r2, [r3, #0]
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f0c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	681a      	ldr	r2, [r3, #0]
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	f042 0201 	orr.w	r2, r2, #1
 8017f1c:	601a      	str	r2, [r3, #0]
 8017f1e:	e005      	b.n	8017f2c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	2200      	movs	r2, #0
 8017f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8017f28:	2302      	movs	r3, #2
 8017f2a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8017f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f2e:	4618      	mov	r0, r3
 8017f30:	3718      	adds	r7, #24
 8017f32:	46bd      	mov	sp, r7
 8017f34:	bd80      	pop	{r7, pc}

08017f36 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8017f36:	b480      	push	{r7}
 8017f38:	b083      	sub	sp, #12
 8017f3a:	af00      	add	r7, sp, #0
 8017f3c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d101      	bne.n	8017f48 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8017f44:	2301      	movs	r3, #1
 8017f46:	e04f      	b.n	8017fe8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	2b02      	cmp	r3, #2
 8017f52:	d008      	beq.n	8017f66 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	2204      	movs	r2, #4
 8017f58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8017f62:	2301      	movs	r3, #1
 8017f64:	e040      	b.n	8017fe8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	681a      	ldr	r2, [r3, #0]
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	f022 020e 	bic.w	r2, r2, #14
 8017f74:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f7a:	681a      	ldr	r2, [r3, #0]
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017f84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	681a      	ldr	r2, [r3, #0]
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	f022 0201 	bic.w	r2, r2, #1
 8017f94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f9a:	f003 021c 	and.w	r2, r3, #28
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fa2:	2101      	movs	r1, #1
 8017fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8017fa8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017fae:	687a      	ldr	r2, [r7, #4]
 8017fb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8017fb2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d00c      	beq.n	8017fd6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017fc0:	681a      	ldr	r2, [r3, #0]
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017fca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017fd0:	687a      	ldr	r2, [r7, #4]
 8017fd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8017fd4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	2201      	movs	r2, #1
 8017fda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8017fe6:	2300      	movs	r3, #0
}
 8017fe8:	4618      	mov	r0, r3
 8017fea:	370c      	adds	r7, #12
 8017fec:	46bd      	mov	sp, r7
 8017fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff2:	4770      	bx	lr

08017ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b084      	sub	sp, #16
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8018006:	b2db      	uxtb	r3, r3
 8018008:	2b02      	cmp	r3, #2
 801800a:	d005      	beq.n	8018018 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	2204      	movs	r2, #4
 8018010:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8018012:	2301      	movs	r3, #1
 8018014:	73fb      	strb	r3, [r7, #15]
 8018016:	e047      	b.n	80180a8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	681a      	ldr	r2, [r3, #0]
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	f022 020e 	bic.w	r2, r2, #14
 8018026:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	681a      	ldr	r2, [r3, #0]
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	f022 0201 	bic.w	r2, r2, #1
 8018036:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801803c:	681a      	ldr	r2, [r3, #0]
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801804c:	f003 021c 	and.w	r2, r3, #28
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018054:	2101      	movs	r1, #1
 8018056:	fa01 f202 	lsl.w	r2, r1, r2
 801805a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018060:	687a      	ldr	r2, [r7, #4]
 8018062:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8018064:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801806a:	2b00      	cmp	r3, #0
 801806c:	d00c      	beq.n	8018088 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018072:	681a      	ldr	r2, [r3, #0]
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801807c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018082:	687a      	ldr	r2, [r7, #4]
 8018084:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8018086:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	2201      	movs	r2, #1
 801808c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2200      	movs	r2, #0
 8018094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801809c:	2b00      	cmp	r3, #0
 801809e:	d003      	beq.n	80180a8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180a4:	6878      	ldr	r0, [r7, #4]
 80180a6:	4798      	blx	r3
    }
  }
  return status;
 80180a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80180aa:	4618      	mov	r0, r3
 80180ac:	3710      	adds	r7, #16
 80180ae:	46bd      	mov	sp, r7
 80180b0:	bd80      	pop	{r7, pc}

080180b2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80180b2:	b580      	push	{r7, lr}
 80180b4:	b084      	sub	sp, #16
 80180b6:	af00      	add	r7, sp, #0
 80180b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180ce:	f003 031c 	and.w	r3, r3, #28
 80180d2:	2204      	movs	r2, #4
 80180d4:	409a      	lsls	r2, r3
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	4013      	ands	r3, r2
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d026      	beq.n	801812c <HAL_DMA_IRQHandler+0x7a>
 80180de:	68bb      	ldr	r3, [r7, #8]
 80180e0:	f003 0304 	and.w	r3, r3, #4
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d021      	beq.n	801812c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	f003 0320 	and.w	r3, r3, #32
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d107      	bne.n	8018106 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	681a      	ldr	r2, [r3, #0]
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	f022 0204 	bic.w	r2, r2, #4
 8018104:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801810a:	f003 021c 	and.w	r2, r3, #28
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018112:	2104      	movs	r1, #4
 8018114:	fa01 f202 	lsl.w	r2, r1, r2
 8018118:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801811e:	2b00      	cmp	r3, #0
 8018120:	d071      	beq.n	8018206 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018126:	6878      	ldr	r0, [r7, #4]
 8018128:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801812a:	e06c      	b.n	8018206 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018130:	f003 031c 	and.w	r3, r3, #28
 8018134:	2202      	movs	r2, #2
 8018136:	409a      	lsls	r2, r3
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	4013      	ands	r3, r2
 801813c:	2b00      	cmp	r3, #0
 801813e:	d02e      	beq.n	801819e <HAL_DMA_IRQHandler+0xec>
 8018140:	68bb      	ldr	r3, [r7, #8]
 8018142:	f003 0302 	and.w	r3, r3, #2
 8018146:	2b00      	cmp	r3, #0
 8018148:	d029      	beq.n	801819e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	f003 0320 	and.w	r3, r3, #32
 8018154:	2b00      	cmp	r3, #0
 8018156:	d10b      	bne.n	8018170 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	681a      	ldr	r2, [r3, #0]
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	f022 020a 	bic.w	r2, r2, #10
 8018166:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	2201      	movs	r2, #1
 801816c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018174:	f003 021c 	and.w	r2, r3, #28
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801817c:	2102      	movs	r1, #2
 801817e:	fa01 f202 	lsl.w	r2, r1, r2
 8018182:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2200      	movs	r2, #0
 8018188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018190:	2b00      	cmp	r3, #0
 8018192:	d038      	beq.n	8018206 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801819c:	e033      	b.n	8018206 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181a2:	f003 031c 	and.w	r3, r3, #28
 80181a6:	2208      	movs	r2, #8
 80181a8:	409a      	lsls	r2, r3
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	4013      	ands	r3, r2
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d02a      	beq.n	8018208 <HAL_DMA_IRQHandler+0x156>
 80181b2:	68bb      	ldr	r3, [r7, #8]
 80181b4:	f003 0308 	and.w	r3, r3, #8
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d025      	beq.n	8018208 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	681a      	ldr	r2, [r3, #0]
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	f022 020e 	bic.w	r2, r2, #14
 80181ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181d0:	f003 021c 	and.w	r2, r3, #28
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181d8:	2101      	movs	r1, #1
 80181da:	fa01 f202 	lsl.w	r2, r1, r2
 80181de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	2201      	movs	r2, #1
 80181e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	2201      	movs	r2, #1
 80181ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	2200      	movs	r2, #0
 80181f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d004      	beq.n	8018208 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018202:	6878      	ldr	r0, [r7, #4]
 8018204:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8018206:	bf00      	nop
 8018208:	bf00      	nop
}
 801820a:	3710      	adds	r7, #16
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}

08018210 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8018210:	b480      	push	{r7}
 8018212:	b085      	sub	sp, #20
 8018214:	af00      	add	r7, sp, #0
 8018216:	60f8      	str	r0, [r7, #12]
 8018218:	60b9      	str	r1, [r7, #8]
 801821a:	607a      	str	r2, [r7, #4]
 801821c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018222:	68fa      	ldr	r2, [r7, #12]
 8018224:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8018226:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801822c:	2b00      	cmp	r3, #0
 801822e:	d004      	beq.n	801823a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018234:	68fa      	ldr	r2, [r7, #12]
 8018236:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8018238:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801823e:	f003 021c 	and.w	r2, r3, #28
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018246:	2101      	movs	r1, #1
 8018248:	fa01 f202 	lsl.w	r2, r1, r2
 801824c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	683a      	ldr	r2, [r7, #0]
 8018254:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	689b      	ldr	r3, [r3, #8]
 801825a:	2b10      	cmp	r3, #16
 801825c:	d108      	bne.n	8018270 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	687a      	ldr	r2, [r7, #4]
 8018264:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	68ba      	ldr	r2, [r7, #8]
 801826c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801826e:	e007      	b.n	8018280 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	68ba      	ldr	r2, [r7, #8]
 8018276:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	687a      	ldr	r2, [r7, #4]
 801827e:	60da      	str	r2, [r3, #12]
}
 8018280:	bf00      	nop
 8018282:	3714      	adds	r7, #20
 8018284:	46bd      	mov	sp, r7
 8018286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828a:	4770      	bx	lr

0801828c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801828c:	b480      	push	{r7}
 801828e:	b085      	sub	sp, #20
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	461a      	mov	r2, r3
 801829a:	4b17      	ldr	r3, [pc, #92]	; (80182f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801829c:	429a      	cmp	r2, r3
 801829e:	d80a      	bhi.n	80182b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182a4:	089b      	lsrs	r3, r3, #2
 80182a6:	009b      	lsls	r3, r3, #2
 80182a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80182ac:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80182b0:	687a      	ldr	r2, [r7, #4]
 80182b2:	6493      	str	r3, [r2, #72]	; 0x48
 80182b4:	e007      	b.n	80182c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182ba:	089b      	lsrs	r3, r3, #2
 80182bc:	009a      	lsls	r2, r3, #2
 80182be:	4b0f      	ldr	r3, [pc, #60]	; (80182fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80182c0:	4413      	add	r3, r2
 80182c2:	687a      	ldr	r2, [r7, #4]
 80182c4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	b2db      	uxtb	r3, r3
 80182cc:	3b08      	subs	r3, #8
 80182ce:	4a0c      	ldr	r2, [pc, #48]	; (8018300 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80182d0:	fba2 2303 	umull	r2, r3, r2, r3
 80182d4:	091b      	lsrs	r3, r3, #4
 80182d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	4a0a      	ldr	r2, [pc, #40]	; (8018304 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80182dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	f003 031c 	and.w	r3, r3, #28
 80182e4:	2201      	movs	r2, #1
 80182e6:	409a      	lsls	r2, r3
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80182ec:	bf00      	nop
 80182ee:	3714      	adds	r7, #20
 80182f0:	46bd      	mov	sp, r7
 80182f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f6:	4770      	bx	lr
 80182f8:	40020407 	.word	0x40020407
 80182fc:	4002081c 	.word	0x4002081c
 8018300:	cccccccd 	.word	0xcccccccd
 8018304:	40020880 	.word	0x40020880

08018308 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8018308:	b480      	push	{r7}
 801830a:	b085      	sub	sp, #20
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	685b      	ldr	r3, [r3, #4]
 8018314:	b2db      	uxtb	r3, r3
 8018316:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8018318:	68fa      	ldr	r2, [r7, #12]
 801831a:	4b0b      	ldr	r3, [pc, #44]	; (8018348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801831c:	4413      	add	r3, r2
 801831e:	009b      	lsls	r3, r3, #2
 8018320:	461a      	mov	r2, r3
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	4a08      	ldr	r2, [pc, #32]	; (801834c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801832a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	3b01      	subs	r3, #1
 8018330:	f003 0303 	and.w	r3, r3, #3
 8018334:	2201      	movs	r2, #1
 8018336:	409a      	lsls	r2, r3
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801833c:	bf00      	nop
 801833e:	3714      	adds	r7, #20
 8018340:	46bd      	mov	sp, r7
 8018342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018346:	4770      	bx	lr
 8018348:	1000823f 	.word	0x1000823f
 801834c:	40020940 	.word	0x40020940

08018350 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b086      	sub	sp, #24
 8018354:	af00      	add	r7, sp, #0
 8018356:	60f8      	str	r0, [r7, #12]
 8018358:	60b9      	str	r1, [r7, #8]
 801835a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801835e:	4b1c      	ldr	r3, [pc, #112]	; (80183d0 <HAL_FLASH_Program+0x80>)
 8018360:	781b      	ldrb	r3, [r3, #0]
 8018362:	2b01      	cmp	r3, #1
 8018364:	d101      	bne.n	801836a <HAL_FLASH_Program+0x1a>
 8018366:	2302      	movs	r3, #2
 8018368:	e02d      	b.n	80183c6 <HAL_FLASH_Program+0x76>
 801836a:	4b19      	ldr	r3, [pc, #100]	; (80183d0 <HAL_FLASH_Program+0x80>)
 801836c:	2201      	movs	r2, #1
 801836e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8018370:	4b17      	ldr	r3, [pc, #92]	; (80183d0 <HAL_FLASH_Program+0x80>)
 8018372:	2200      	movs	r2, #0
 8018374:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8018376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801837a:	f000 f869 	bl	8018450 <FLASH_WaitForLastOperation>
 801837e:	4603      	mov	r3, r0
 8018380:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8018382:	7dfb      	ldrb	r3, [r7, #23]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d11a      	bne.n	80183be <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	2b01      	cmp	r3, #1
 801838c:	d105      	bne.n	801839a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801838e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018392:	68b8      	ldr	r0, [r7, #8]
 8018394:	f000 f8be 	bl	8018514 <FLASH_Program_DoubleWord>
 8018398:	e004      	b.n	80183a4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801839a:	683b      	ldr	r3, [r7, #0]
 801839c:	4619      	mov	r1, r3
 801839e:	68b8      	ldr	r0, [r7, #8]
 80183a0:	f00f fd08 	bl	8027db4 <_etext>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80183a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80183a8:	f000 f852 	bl	8018450 <FLASH_WaitForLastOperation>
 80183ac:	4603      	mov	r3, r0
 80183ae:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80183b0:	4b08      	ldr	r3, [pc, #32]	; (80183d4 <HAL_FLASH_Program+0x84>)
 80183b2:	695a      	ldr	r2, [r3, #20]
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	43db      	mvns	r3, r3
 80183b8:	4906      	ldr	r1, [pc, #24]	; (80183d4 <HAL_FLASH_Program+0x84>)
 80183ba:	4013      	ands	r3, r2
 80183bc:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80183be:	4b04      	ldr	r3, [pc, #16]	; (80183d0 <HAL_FLASH_Program+0x80>)
 80183c0:	2200      	movs	r2, #0
 80183c2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80183c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80183c6:	4618      	mov	r0, r3
 80183c8:	3718      	adds	r7, #24
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}
 80183ce:	bf00      	nop
 80183d0:	20000b5c 	.word	0x20000b5c
 80183d4:	58004000 	.word	0x58004000

080183d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80183d8:	b480      	push	{r7}
 80183da:	b083      	sub	sp, #12
 80183dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80183de:	2300      	movs	r3, #0
 80183e0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80183e2:	4b0b      	ldr	r3, [pc, #44]	; (8018410 <HAL_FLASH_Unlock+0x38>)
 80183e4:	695b      	ldr	r3, [r3, #20]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	da0b      	bge.n	8018402 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80183ea:	4b09      	ldr	r3, [pc, #36]	; (8018410 <HAL_FLASH_Unlock+0x38>)
 80183ec:	4a09      	ldr	r2, [pc, #36]	; (8018414 <HAL_FLASH_Unlock+0x3c>)
 80183ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80183f0:	4b07      	ldr	r3, [pc, #28]	; (8018410 <HAL_FLASH_Unlock+0x38>)
 80183f2:	4a09      	ldr	r2, [pc, #36]	; (8018418 <HAL_FLASH_Unlock+0x40>)
 80183f4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80183f6:	4b06      	ldr	r3, [pc, #24]	; (8018410 <HAL_FLASH_Unlock+0x38>)
 80183f8:	695b      	ldr	r3, [r3, #20]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	da01      	bge.n	8018402 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80183fe:	2301      	movs	r3, #1
 8018400:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8018402:	79fb      	ldrb	r3, [r7, #7]
}
 8018404:	4618      	mov	r0, r3
 8018406:	370c      	adds	r7, #12
 8018408:	46bd      	mov	sp, r7
 801840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840e:	4770      	bx	lr
 8018410:	58004000 	.word	0x58004000
 8018414:	45670123 	.word	0x45670123
 8018418:	cdef89ab 	.word	0xcdef89ab

0801841c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801841c:	b480      	push	{r7}
 801841e:	b083      	sub	sp, #12
 8018420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8018422:	2300      	movs	r3, #0
 8018424:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8018426:	4b09      	ldr	r3, [pc, #36]	; (801844c <HAL_FLASH_Lock+0x30>)
 8018428:	695b      	ldr	r3, [r3, #20]
 801842a:	4a08      	ldr	r2, [pc, #32]	; (801844c <HAL_FLASH_Lock+0x30>)
 801842c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018430:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8018432:	4b06      	ldr	r3, [pc, #24]	; (801844c <HAL_FLASH_Lock+0x30>)
 8018434:	695b      	ldr	r3, [r3, #20]
 8018436:	2b00      	cmp	r3, #0
 8018438:	db01      	blt.n	801843e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 801843a:	2301      	movs	r3, #1
 801843c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801843e:	79fb      	ldrb	r3, [r7, #7]
}
 8018440:	4618      	mov	r0, r3
 8018442:	370c      	adds	r7, #12
 8018444:	46bd      	mov	sp, r7
 8018446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844a:	4770      	bx	lr
 801844c:	58004000 	.word	0x58004000

08018450 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8018450:	b580      	push	{r7, lr}
 8018452:	b084      	sub	sp, #16
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8018458:	f7fd fec0 	bl	80161dc <HAL_GetTick>
 801845c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801845e:	e009      	b.n	8018474 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8018460:	f7fd febc 	bl	80161dc <HAL_GetTick>
 8018464:	4602      	mov	r2, r0
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	1ad3      	subs	r3, r2, r3
 801846a:	687a      	ldr	r2, [r7, #4]
 801846c:	429a      	cmp	r2, r3
 801846e:	d801      	bhi.n	8018474 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8018470:	2303      	movs	r3, #3
 8018472:	e047      	b.n	8018504 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8018474:	4b25      	ldr	r3, [pc, #148]	; (801850c <FLASH_WaitForLastOperation+0xbc>)
 8018476:	691b      	ldr	r3, [r3, #16]
 8018478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801847c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018480:	d0ee      	beq.n	8018460 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8018482:	4b22      	ldr	r3, [pc, #136]	; (801850c <FLASH_WaitForLastOperation+0xbc>)
 8018484:	691b      	ldr	r3, [r3, #16]
 8018486:	60bb      	str	r3, [r7, #8]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8018488:	68bb      	ldr	r3, [r7, #8]
 801848a:	f003 0301 	and.w	r3, r3, #1
 801848e:	2b00      	cmp	r3, #0
 8018490:	d002      	beq.n	8018498 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8018492:	4b1e      	ldr	r3, [pc, #120]	; (801850c <FLASH_WaitForLastOperation+0xbc>)
 8018494:	2201      	movs	r2, #1
 8018496:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8018498:	68ba      	ldr	r2, [r7, #8]
 801849a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801849e:	4013      	ands	r3, r2
 80184a0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80184a2:	68bb      	ldr	r3, [r7, #8]
 80184a4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d007      	beq.n	80184bc <FLASH_WaitForLastOperation+0x6c>
 80184ac:	4b17      	ldr	r3, [pc, #92]	; (801850c <FLASH_WaitForLastOperation+0xbc>)
 80184ae:	699a      	ldr	r2, [r3, #24]
 80184b0:	68bb      	ldr	r3, [r7, #8]
 80184b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80184b6:	4915      	ldr	r1, [pc, #84]	; (801850c <FLASH_WaitForLastOperation+0xbc>)
 80184b8:	4313      	orrs	r3, r2
 80184ba:	618b      	str	r3, [r1, #24]
 80184bc:	68bb      	ldr	r3, [r7, #8]
 80184be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d004      	beq.n	80184d0 <FLASH_WaitForLastOperation+0x80>
 80184c6:	4a11      	ldr	r2, [pc, #68]	; (801850c <FLASH_WaitForLastOperation+0xbc>)
 80184c8:	68bb      	ldr	r3, [r7, #8]
 80184ca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80184ce:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d00e      	beq.n	80184f4 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80184d6:	4a0e      	ldr	r2, [pc, #56]	; (8018510 <FLASH_WaitForLastOperation+0xc0>)
 80184d8:	68bb      	ldr	r3, [r7, #8]
 80184da:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80184dc:	2301      	movs	r3, #1
 80184de:	e011      	b.n	8018504 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80184e0:	f7fd fe7c 	bl	80161dc <HAL_GetTick>
 80184e4:	4602      	mov	r2, r0
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	1ad3      	subs	r3, r2, r3
 80184ea:	687a      	ldr	r2, [r7, #4]
 80184ec:	429a      	cmp	r2, r3
 80184ee:	d801      	bhi.n	80184f4 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80184f0:	2303      	movs	r3, #3
 80184f2:	e007      	b.n	8018504 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80184f4:	4b05      	ldr	r3, [pc, #20]	; (801850c <FLASH_WaitForLastOperation+0xbc>)
 80184f6:	691b      	ldr	r3, [r3, #16]
 80184f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80184fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8018500:	d0ee      	beq.n	80184e0 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8018502:	2300      	movs	r3, #0
}
 8018504:	4618      	mov	r0, r3
 8018506:	3710      	adds	r7, #16
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}
 801850c:	58004000 	.word	0x58004000
 8018510:	20000b5c 	.word	0x20000b5c

08018514 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8018514:	b490      	push	{r4, r7}
 8018516:	b084      	sub	sp, #16
 8018518:	af00      	add	r7, sp, #0
 801851a:	60f8      	str	r0, [r7, #12]
 801851c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8018520:	4b0d      	ldr	r3, [pc, #52]	; (8018558 <FLASH_Program_DoubleWord+0x44>)
 8018522:	695b      	ldr	r3, [r3, #20]
 8018524:	4a0c      	ldr	r2, [pc, #48]	; (8018558 <FLASH_Program_DoubleWord+0x44>)
 8018526:	f043 0301 	orr.w	r3, r3, #1
 801852a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	683a      	ldr	r2, [r7, #0]
 8018530:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8018532:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8018536:	e9d7 1200 	ldrd	r1, r2, [r7]
 801853a:	f04f 0300 	mov.w	r3, #0
 801853e:	f04f 0400 	mov.w	r4, #0
 8018542:	0013      	movs	r3, r2
 8018544:	2400      	movs	r4, #0
 8018546:	68fa      	ldr	r2, [r7, #12]
 8018548:	3204      	adds	r2, #4
 801854a:	6013      	str	r3, [r2, #0]
}
 801854c:	bf00      	nop
 801854e:	3710      	adds	r7, #16
 8018550:	46bd      	mov	sp, r7
 8018552:	bc90      	pop	{r4, r7}
 8018554:	4770      	bx	lr
 8018556:	bf00      	nop
 8018558:	58004000 	.word	0x58004000

0801855c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b084      	sub	sp, #16
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
 8018564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8018566:	4b28      	ldr	r3, [pc, #160]	; (8018608 <HAL_FLASHEx_Erase+0xac>)
 8018568:	781b      	ldrb	r3, [r3, #0]
 801856a:	2b01      	cmp	r3, #1
 801856c:	d101      	bne.n	8018572 <HAL_FLASHEx_Erase+0x16>
 801856e:	2302      	movs	r3, #2
 8018570:	e046      	b.n	8018600 <HAL_FLASHEx_Erase+0xa4>
 8018572:	4b25      	ldr	r3, [pc, #148]	; (8018608 <HAL_FLASHEx_Erase+0xac>)
 8018574:	2201      	movs	r2, #1
 8018576:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8018578:	4b23      	ldr	r3, [pc, #140]	; (8018608 <HAL_FLASHEx_Erase+0xac>)
 801857a:	2200      	movs	r2, #0
 801857c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801857e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018582:	f7ff ff65 	bl	8018450 <FLASH_WaitForLastOperation>
 8018586:	4603      	mov	r3, r0
 8018588:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801858a:	7bfb      	ldrb	r3, [r7, #15]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d133      	bne.n	80185f8 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	2b04      	cmp	r3, #4
 8018596:	d108      	bne.n	80185aa <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8018598:	f000 f838 	bl	801860c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801859c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80185a0:	f7ff ff56 	bl	8018450 <FLASH_WaitForLastOperation>
 80185a4:	4603      	mov	r3, r0
 80185a6:	73fb      	strb	r3, [r7, #15]
 80185a8:	e024      	b.n	80185f4 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	f04f 32ff 	mov.w	r2, #4294967295
 80185b0:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	685b      	ldr	r3, [r3, #4]
 80185b6:	60bb      	str	r3, [r7, #8]
 80185b8:	e012      	b.n	80185e0 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80185ba:	68b8      	ldr	r0, [r7, #8]
 80185bc:	f000 f838 	bl	8018630 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80185c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80185c4:	f7ff ff44 	bl	8018450 <FLASH_WaitForLastOperation>
 80185c8:	4603      	mov	r3, r0
 80185ca:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80185cc:	7bfb      	ldrb	r3, [r7, #15]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d003      	beq.n	80185da <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80185d2:	683b      	ldr	r3, [r7, #0]
 80185d4:	68ba      	ldr	r2, [r7, #8]
 80185d6:	601a      	str	r2, [r3, #0]
          break;
 80185d8:	e00a      	b.n	80185f0 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80185da:	68bb      	ldr	r3, [r7, #8]
 80185dc:	3301      	adds	r3, #1
 80185de:	60bb      	str	r3, [r7, #8]
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	685a      	ldr	r2, [r3, #4]
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	689b      	ldr	r3, [r3, #8]
 80185e8:	4413      	add	r3, r2
 80185ea:	68ba      	ldr	r2, [r7, #8]
 80185ec:	429a      	cmp	r2, r3
 80185ee:	d3e4      	bcc.n	80185ba <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80185f0:	f000 f880 	bl	80186f4 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80185f4:	f000 f836 	bl	8018664 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80185f8:	4b03      	ldr	r3, [pc, #12]	; (8018608 <HAL_FLASHEx_Erase+0xac>)
 80185fa:	2200      	movs	r2, #0
 80185fc:	701a      	strb	r2, [r3, #0]

  return status;
 80185fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8018600:	4618      	mov	r0, r3
 8018602:	3710      	adds	r7, #16
 8018604:	46bd      	mov	sp, r7
 8018606:	bd80      	pop	{r7, pc}
 8018608:	20000b5c 	.word	0x20000b5c

0801860c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 801860c:	b480      	push	{r7}
 801860e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8018610:	4b06      	ldr	r3, [pc, #24]	; (801862c <FLASH_MassErase+0x20>)
 8018612:	695b      	ldr	r3, [r3, #20]
 8018614:	4a05      	ldr	r2, [pc, #20]	; (801862c <FLASH_MassErase+0x20>)
 8018616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801861a:	f043 0304 	orr.w	r3, r3, #4
 801861e:	6153      	str	r3, [r2, #20]
}
 8018620:	bf00      	nop
 8018622:	46bd      	mov	sp, r7
 8018624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018628:	4770      	bx	lr
 801862a:	bf00      	nop
 801862c:	58004000 	.word	0x58004000

08018630 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8018630:	b480      	push	{r7}
 8018632:	b083      	sub	sp, #12
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8018638:	4b09      	ldr	r3, [pc, #36]	; (8018660 <FLASH_PageErase+0x30>)
 801863a:	695b      	ldr	r3, [r3, #20]
 801863c:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	00db      	lsls	r3, r3, #3
 8018644:	4313      	orrs	r3, r2
 8018646:	4a06      	ldr	r2, [pc, #24]	; (8018660 <FLASH_PageErase+0x30>)
 8018648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801864c:	f043 0302 	orr.w	r3, r3, #2
 8018650:	6153      	str	r3, [r2, #20]
}
 8018652:	bf00      	nop
 8018654:	370c      	adds	r7, #12
 8018656:	46bd      	mov	sp, r7
 8018658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865c:	4770      	bx	lr
 801865e:	bf00      	nop
 8018660:	58004000 	.word	0x58004000

08018664 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8018664:	b480      	push	{r7}
 8018666:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8018668:	4b21      	ldr	r3, [pc, #132]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018674:	d117      	bne.n	80186a6 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8018676:	4b1e      	ldr	r3, [pc, #120]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	4a1d      	ldr	r2, [pc, #116]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 801867c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8018680:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8018682:	4b1b      	ldr	r3, [pc, #108]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	4a1a      	ldr	r2, [pc, #104]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 8018688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801868c:	6013      	str	r3, [r2, #0]
 801868e:	4b18      	ldr	r3, [pc, #96]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	4a17      	ldr	r2, [pc, #92]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 8018694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018698:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801869a:	4b15      	ldr	r3, [pc, #84]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	4a14      	ldr	r2, [pc, #80]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 80186a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80186a4:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 80186a6:	4b12      	ldr	r3, [pc, #72]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80186ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80186b2:	d117      	bne.n	80186e4 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80186b4:	4b0e      	ldr	r3, [pc, #56]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	4a0d      	ldr	r2, [pc, #52]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 80186ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80186be:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80186c0:	4b0b      	ldr	r3, [pc, #44]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	4a0a      	ldr	r2, [pc, #40]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 80186c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80186ca:	6013      	str	r3, [r2, #0]
 80186cc:	4b08      	ldr	r3, [pc, #32]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	4a07      	ldr	r2, [pc, #28]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 80186d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80186d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80186d8:	4b05      	ldr	r3, [pc, #20]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	4a04      	ldr	r2, [pc, #16]	; (80186f0 <FLASH_FlushCaches+0x8c>)
 80186de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80186e2:	6013      	str	r3, [r2, #0]
  }
}
 80186e4:	bf00      	nop
 80186e6:	46bd      	mov	sp, r7
 80186e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ec:	4770      	bx	lr
 80186ee:	bf00      	nop
 80186f0:	58004000 	.word	0x58004000

080186f4 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80186f4:	b480      	push	{r7}
 80186f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80186f8:	4b06      	ldr	r3, [pc, #24]	; (8018714 <FLASH_AcknowledgePageErase+0x20>)
 80186fa:	695b      	ldr	r3, [r3, #20]
 80186fc:	4a05      	ldr	r2, [pc, #20]	; (8018714 <FLASH_AcknowledgePageErase+0x20>)
 80186fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8018702:	f023 0302 	bic.w	r3, r3, #2
 8018706:	6153      	str	r3, [r2, #20]
}
 8018708:	bf00      	nop
 801870a:	46bd      	mov	sp, r7
 801870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018710:	4770      	bx	lr
 8018712:	bf00      	nop
 8018714:	58004000 	.word	0x58004000

08018718 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8018718:	b480      	push	{r7}
 801871a:	b087      	sub	sp, #28
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
 8018720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8018722:	2300      	movs	r3, #0
 8018724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8018726:	e14c      	b.n	80189c2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	681a      	ldr	r2, [r3, #0]
 801872c:	2101      	movs	r1, #1
 801872e:	697b      	ldr	r3, [r7, #20]
 8018730:	fa01 f303 	lsl.w	r3, r1, r3
 8018734:	4013      	ands	r3, r2
 8018736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	2b00      	cmp	r3, #0
 801873c:	f000 813e 	beq.w	80189bc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8018740:	683b      	ldr	r3, [r7, #0]
 8018742:	685b      	ldr	r3, [r3, #4]
 8018744:	2b02      	cmp	r3, #2
 8018746:	d003      	beq.n	8018750 <HAL_GPIO_Init+0x38>
 8018748:	683b      	ldr	r3, [r7, #0]
 801874a:	685b      	ldr	r3, [r3, #4]
 801874c:	2b12      	cmp	r3, #18
 801874e:	d123      	bne.n	8018798 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8018750:	697b      	ldr	r3, [r7, #20]
 8018752:	08da      	lsrs	r2, r3, #3
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	3208      	adds	r2, #8
 8018758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801875c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801875e:	697b      	ldr	r3, [r7, #20]
 8018760:	f003 0307 	and.w	r3, r3, #7
 8018764:	009b      	lsls	r3, r3, #2
 8018766:	220f      	movs	r2, #15
 8018768:	fa02 f303 	lsl.w	r3, r2, r3
 801876c:	43db      	mvns	r3, r3
 801876e:	693a      	ldr	r2, [r7, #16]
 8018770:	4013      	ands	r3, r2
 8018772:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8018774:	683b      	ldr	r3, [r7, #0]
 8018776:	691a      	ldr	r2, [r3, #16]
 8018778:	697b      	ldr	r3, [r7, #20]
 801877a:	f003 0307 	and.w	r3, r3, #7
 801877e:	009b      	lsls	r3, r3, #2
 8018780:	fa02 f303 	lsl.w	r3, r2, r3
 8018784:	693a      	ldr	r2, [r7, #16]
 8018786:	4313      	orrs	r3, r2
 8018788:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801878a:	697b      	ldr	r3, [r7, #20]
 801878c:	08da      	lsrs	r2, r3, #3
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	3208      	adds	r2, #8
 8018792:	6939      	ldr	r1, [r7, #16]
 8018794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801879e:	697b      	ldr	r3, [r7, #20]
 80187a0:	005b      	lsls	r3, r3, #1
 80187a2:	2203      	movs	r2, #3
 80187a4:	fa02 f303 	lsl.w	r3, r2, r3
 80187a8:	43db      	mvns	r3, r3
 80187aa:	693a      	ldr	r2, [r7, #16]
 80187ac:	4013      	ands	r3, r2
 80187ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80187b0:	683b      	ldr	r3, [r7, #0]
 80187b2:	685b      	ldr	r3, [r3, #4]
 80187b4:	f003 0203 	and.w	r2, r3, #3
 80187b8:	697b      	ldr	r3, [r7, #20]
 80187ba:	005b      	lsls	r3, r3, #1
 80187bc:	fa02 f303 	lsl.w	r3, r2, r3
 80187c0:	693a      	ldr	r2, [r7, #16]
 80187c2:	4313      	orrs	r3, r2
 80187c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	693a      	ldr	r2, [r7, #16]
 80187ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80187cc:	683b      	ldr	r3, [r7, #0]
 80187ce:	685b      	ldr	r3, [r3, #4]
 80187d0:	2b01      	cmp	r3, #1
 80187d2:	d00b      	beq.n	80187ec <HAL_GPIO_Init+0xd4>
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	685b      	ldr	r3, [r3, #4]
 80187d8:	2b02      	cmp	r3, #2
 80187da:	d007      	beq.n	80187ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80187dc:	683b      	ldr	r3, [r7, #0]
 80187de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80187e0:	2b11      	cmp	r3, #17
 80187e2:	d003      	beq.n	80187ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	685b      	ldr	r3, [r3, #4]
 80187e8:	2b12      	cmp	r3, #18
 80187ea:	d130      	bne.n	801884e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	689b      	ldr	r3, [r3, #8]
 80187f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80187f2:	697b      	ldr	r3, [r7, #20]
 80187f4:	005b      	lsls	r3, r3, #1
 80187f6:	2203      	movs	r2, #3
 80187f8:	fa02 f303 	lsl.w	r3, r2, r3
 80187fc:	43db      	mvns	r3, r3
 80187fe:	693a      	ldr	r2, [r7, #16]
 8018800:	4013      	ands	r3, r2
 8018802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8018804:	683b      	ldr	r3, [r7, #0]
 8018806:	68da      	ldr	r2, [r3, #12]
 8018808:	697b      	ldr	r3, [r7, #20]
 801880a:	005b      	lsls	r3, r3, #1
 801880c:	fa02 f303 	lsl.w	r3, r2, r3
 8018810:	693a      	ldr	r2, [r7, #16]
 8018812:	4313      	orrs	r3, r2
 8018814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	693a      	ldr	r2, [r7, #16]
 801881a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	685b      	ldr	r3, [r3, #4]
 8018820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8018822:	2201      	movs	r2, #1
 8018824:	697b      	ldr	r3, [r7, #20]
 8018826:	fa02 f303 	lsl.w	r3, r2, r3
 801882a:	43db      	mvns	r3, r3
 801882c:	693a      	ldr	r2, [r7, #16]
 801882e:	4013      	ands	r3, r2
 8018830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	685b      	ldr	r3, [r3, #4]
 8018836:	091b      	lsrs	r3, r3, #4
 8018838:	f003 0201 	and.w	r2, r3, #1
 801883c:	697b      	ldr	r3, [r7, #20]
 801883e:	fa02 f303 	lsl.w	r3, r2, r3
 8018842:	693a      	ldr	r2, [r7, #16]
 8018844:	4313      	orrs	r3, r2
 8018846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	693a      	ldr	r2, [r7, #16]
 801884c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	68db      	ldr	r3, [r3, #12]
 8018852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8018854:	697b      	ldr	r3, [r7, #20]
 8018856:	005b      	lsls	r3, r3, #1
 8018858:	2203      	movs	r2, #3
 801885a:	fa02 f303 	lsl.w	r3, r2, r3
 801885e:	43db      	mvns	r3, r3
 8018860:	693a      	ldr	r2, [r7, #16]
 8018862:	4013      	ands	r3, r2
 8018864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	689a      	ldr	r2, [r3, #8]
 801886a:	697b      	ldr	r3, [r7, #20]
 801886c:	005b      	lsls	r3, r3, #1
 801886e:	fa02 f303 	lsl.w	r3, r2, r3
 8018872:	693a      	ldr	r2, [r7, #16]
 8018874:	4313      	orrs	r3, r2
 8018876:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	693a      	ldr	r2, [r7, #16]
 801887c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	685b      	ldr	r3, [r3, #4]
 8018882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018886:	2b00      	cmp	r3, #0
 8018888:	f000 8098 	beq.w	80189bc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 801888c:	4a54      	ldr	r2, [pc, #336]	; (80189e0 <HAL_GPIO_Init+0x2c8>)
 801888e:	697b      	ldr	r3, [r7, #20]
 8018890:	089b      	lsrs	r3, r3, #2
 8018892:	3302      	adds	r3, #2
 8018894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801889a:	697b      	ldr	r3, [r7, #20]
 801889c:	f003 0303 	and.w	r3, r3, #3
 80188a0:	009b      	lsls	r3, r3, #2
 80188a2:	220f      	movs	r2, #15
 80188a4:	fa02 f303 	lsl.w	r3, r2, r3
 80188a8:	43db      	mvns	r3, r3
 80188aa:	693a      	ldr	r2, [r7, #16]
 80188ac:	4013      	ands	r3, r2
 80188ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80188b6:	d019      	beq.n	80188ec <HAL_GPIO_Init+0x1d4>
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	4a4a      	ldr	r2, [pc, #296]	; (80189e4 <HAL_GPIO_Init+0x2cc>)
 80188bc:	4293      	cmp	r3, r2
 80188be:	d013      	beq.n	80188e8 <HAL_GPIO_Init+0x1d0>
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	4a49      	ldr	r2, [pc, #292]	; (80189e8 <HAL_GPIO_Init+0x2d0>)
 80188c4:	4293      	cmp	r3, r2
 80188c6:	d00d      	beq.n	80188e4 <HAL_GPIO_Init+0x1cc>
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	4a48      	ldr	r2, [pc, #288]	; (80189ec <HAL_GPIO_Init+0x2d4>)
 80188cc:	4293      	cmp	r3, r2
 80188ce:	d007      	beq.n	80188e0 <HAL_GPIO_Init+0x1c8>
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	4a47      	ldr	r2, [pc, #284]	; (80189f0 <HAL_GPIO_Init+0x2d8>)
 80188d4:	4293      	cmp	r3, r2
 80188d6:	d101      	bne.n	80188dc <HAL_GPIO_Init+0x1c4>
 80188d8:	2304      	movs	r3, #4
 80188da:	e008      	b.n	80188ee <HAL_GPIO_Init+0x1d6>
 80188dc:	2307      	movs	r3, #7
 80188de:	e006      	b.n	80188ee <HAL_GPIO_Init+0x1d6>
 80188e0:	2303      	movs	r3, #3
 80188e2:	e004      	b.n	80188ee <HAL_GPIO_Init+0x1d6>
 80188e4:	2302      	movs	r3, #2
 80188e6:	e002      	b.n	80188ee <HAL_GPIO_Init+0x1d6>
 80188e8:	2301      	movs	r3, #1
 80188ea:	e000      	b.n	80188ee <HAL_GPIO_Init+0x1d6>
 80188ec:	2300      	movs	r3, #0
 80188ee:	697a      	ldr	r2, [r7, #20]
 80188f0:	f002 0203 	and.w	r2, r2, #3
 80188f4:	0092      	lsls	r2, r2, #2
 80188f6:	4093      	lsls	r3, r2
 80188f8:	693a      	ldr	r2, [r7, #16]
 80188fa:	4313      	orrs	r3, r2
 80188fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80188fe:	4938      	ldr	r1, [pc, #224]	; (80189e0 <HAL_GPIO_Init+0x2c8>)
 8018900:	697b      	ldr	r3, [r7, #20]
 8018902:	089b      	lsrs	r3, r3, #2
 8018904:	3302      	adds	r3, #2
 8018906:	693a      	ldr	r2, [r7, #16]
 8018908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801890c:	4b39      	ldr	r3, [pc, #228]	; (80189f4 <HAL_GPIO_Init+0x2dc>)
 801890e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	43db      	mvns	r3, r3
 8018918:	693a      	ldr	r2, [r7, #16]
 801891a:	4013      	ands	r3, r2
 801891c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	685b      	ldr	r3, [r3, #4]
 8018922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018926:	2b00      	cmp	r3, #0
 8018928:	d003      	beq.n	8018932 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 801892a:	693a      	ldr	r2, [r7, #16]
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	4313      	orrs	r3, r2
 8018930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8018932:	4a30      	ldr	r2, [pc, #192]	; (80189f4 <HAL_GPIO_Init+0x2dc>)
 8018934:	693b      	ldr	r3, [r7, #16]
 8018936:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 801893a:	4b2e      	ldr	r3, [pc, #184]	; (80189f4 <HAL_GPIO_Init+0x2dc>)
 801893c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	43db      	mvns	r3, r3
 8018946:	693a      	ldr	r2, [r7, #16]
 8018948:	4013      	ands	r3, r2
 801894a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	685b      	ldr	r3, [r3, #4]
 8018950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018954:	2b00      	cmp	r3, #0
 8018956:	d003      	beq.n	8018960 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8018958:	693a      	ldr	r2, [r7, #16]
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	4313      	orrs	r3, r2
 801895e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8018960:	4a24      	ldr	r2, [pc, #144]	; (80189f4 <HAL_GPIO_Init+0x2dc>)
 8018962:	693b      	ldr	r3, [r7, #16]
 8018964:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8018968:	4b22      	ldr	r3, [pc, #136]	; (80189f4 <HAL_GPIO_Init+0x2dc>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	43db      	mvns	r3, r3
 8018972:	693a      	ldr	r2, [r7, #16]
 8018974:	4013      	ands	r3, r2
 8018976:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8018978:	683b      	ldr	r3, [r7, #0]
 801897a:	685b      	ldr	r3, [r3, #4]
 801897c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018980:	2b00      	cmp	r3, #0
 8018982:	d003      	beq.n	801898c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8018984:	693a      	ldr	r2, [r7, #16]
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	4313      	orrs	r3, r2
 801898a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801898c:	4a19      	ldr	r2, [pc, #100]	; (80189f4 <HAL_GPIO_Init+0x2dc>)
 801898e:	693b      	ldr	r3, [r7, #16]
 8018990:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8018992:	4b18      	ldr	r3, [pc, #96]	; (80189f4 <HAL_GPIO_Init+0x2dc>)
 8018994:	685b      	ldr	r3, [r3, #4]
 8018996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	43db      	mvns	r3, r3
 801899c:	693a      	ldr	r2, [r7, #16]
 801899e:	4013      	ands	r3, r2
 80189a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80189a2:	683b      	ldr	r3, [r7, #0]
 80189a4:	685b      	ldr	r3, [r3, #4]
 80189a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d003      	beq.n	80189b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80189ae:	693a      	ldr	r2, [r7, #16]
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	4313      	orrs	r3, r2
 80189b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80189b6:	4a0f      	ldr	r2, [pc, #60]	; (80189f4 <HAL_GPIO_Init+0x2dc>)
 80189b8:	693b      	ldr	r3, [r7, #16]
 80189ba:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80189bc:	697b      	ldr	r3, [r7, #20]
 80189be:	3301      	adds	r3, #1
 80189c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80189c2:	683b      	ldr	r3, [r7, #0]
 80189c4:	681a      	ldr	r2, [r3, #0]
 80189c6:	697b      	ldr	r3, [r7, #20]
 80189c8:	fa22 f303 	lsr.w	r3, r2, r3
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	f47f aeab 	bne.w	8018728 <HAL_GPIO_Init+0x10>
  }
}
 80189d2:	bf00      	nop
 80189d4:	371c      	adds	r7, #28
 80189d6:	46bd      	mov	sp, r7
 80189d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189dc:	4770      	bx	lr
 80189de:	bf00      	nop
 80189e0:	40010000 	.word	0x40010000
 80189e4:	48000400 	.word	0x48000400
 80189e8:	48000800 	.word	0x48000800
 80189ec:	48000c00 	.word	0x48000c00
 80189f0:	48001000 	.word	0x48001000
 80189f4:	58000800 	.word	0x58000800

080189f8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80189f8:	b480      	push	{r7}
 80189fa:	b085      	sub	sp, #20
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
 8018a00:	460b      	mov	r3, r1
 8018a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	691a      	ldr	r2, [r3, #16]
 8018a08:	887b      	ldrh	r3, [r7, #2]
 8018a0a:	4013      	ands	r3, r2
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d002      	beq.n	8018a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8018a10:	2301      	movs	r3, #1
 8018a12:	73fb      	strb	r3, [r7, #15]
 8018a14:	e001      	b.n	8018a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8018a16:	2300      	movs	r3, #0
 8018a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8018a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	3714      	adds	r7, #20
 8018a20:	46bd      	mov	sp, r7
 8018a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a26:	4770      	bx	lr

08018a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8018a28:	b480      	push	{r7}
 8018a2a:	b083      	sub	sp, #12
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	6078      	str	r0, [r7, #4]
 8018a30:	460b      	mov	r3, r1
 8018a32:	807b      	strh	r3, [r7, #2]
 8018a34:	4613      	mov	r3, r2
 8018a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8018a38:	787b      	ldrb	r3, [r7, #1]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d003      	beq.n	8018a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8018a3e:	887a      	ldrh	r2, [r7, #2]
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8018a44:	e002      	b.n	8018a4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8018a46:	887a      	ldrh	r2, [r7, #2]
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8018a4c:	bf00      	nop
 8018a4e:	370c      	adds	r7, #12
 8018a50:	46bd      	mov	sp, r7
 8018a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a56:	4770      	bx	lr

08018a58 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8018a58:	b480      	push	{r7}
 8018a5a:	b083      	sub	sp, #12
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	6078      	str	r0, [r7, #4]
 8018a60:	460b      	mov	r3, r1
 8018a62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	695a      	ldr	r2, [r3, #20]
 8018a68:	887b      	ldrh	r3, [r7, #2]
 8018a6a:	4013      	ands	r3, r2
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d003      	beq.n	8018a78 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8018a70:	887a      	ldrh	r2, [r7, #2]
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8018a76:	e002      	b.n	8018a7e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8018a78:	887a      	ldrh	r2, [r7, #2]
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	619a      	str	r2, [r3, #24]
}
 8018a7e:	bf00      	nop
 8018a80:	370c      	adds	r7, #12
 8018a82:	46bd      	mov	sp, r7
 8018a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a88:	4770      	bx	lr
	...

08018a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b082      	sub	sp, #8
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	4603      	mov	r3, r0
 8018a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8018a96:	4b08      	ldr	r3, [pc, #32]	; (8018ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018a98:	68da      	ldr	r2, [r3, #12]
 8018a9a:	88fb      	ldrh	r3, [r7, #6]
 8018a9c:	4013      	ands	r3, r2
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d006      	beq.n	8018ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8018aa2:	4a05      	ldr	r2, [pc, #20]	; (8018ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018aa4:	88fb      	ldrh	r3, [r7, #6]
 8018aa6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8018aa8:	88fb      	ldrh	r3, [r7, #6]
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f7fa ff62 	bl	8013974 <HAL_GPIO_EXTI_Callback>
  }
}
 8018ab0:	bf00      	nop
 8018ab2:	3708      	adds	r7, #8
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	bd80      	pop	{r7, pc}
 8018ab8:	58000800 	.word	0x58000800

08018abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b082      	sub	sp, #8
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d101      	bne.n	8018ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8018aca:	2301      	movs	r3, #1
 8018acc:	e081      	b.n	8018bd2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018ad4:	b2db      	uxtb	r3, r3
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d106      	bne.n	8018ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	2200      	movs	r2, #0
 8018ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8018ae2:	6878      	ldr	r0, [r7, #4]
 8018ae4:	f7fa fe8e 	bl	8013804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	2224      	movs	r2, #36	; 0x24
 8018aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	681a      	ldr	r2, [r3, #0]
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	f022 0201 	bic.w	r2, r2, #1
 8018afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	685a      	ldr	r2, [r3, #4]
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018b0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	689a      	ldr	r2, [r3, #8]
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018b1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	68db      	ldr	r3, [r3, #12]
 8018b22:	2b01      	cmp	r3, #1
 8018b24:	d107      	bne.n	8018b36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	689a      	ldr	r2, [r3, #8]
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018b32:	609a      	str	r2, [r3, #8]
 8018b34:	e006      	b.n	8018b44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	689a      	ldr	r2, [r3, #8]
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8018b42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	68db      	ldr	r3, [r3, #12]
 8018b48:	2b02      	cmp	r3, #2
 8018b4a:	d104      	bne.n	8018b56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018b54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	685b      	ldr	r3, [r3, #4]
 8018b5c:	687a      	ldr	r2, [r7, #4]
 8018b5e:	6812      	ldr	r2, [r2, #0]
 8018b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018b68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	68da      	ldr	r2, [r3, #12]
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018b78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	691a      	ldr	r2, [r3, #16]
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	695b      	ldr	r3, [r3, #20]
 8018b82:	ea42 0103 	orr.w	r1, r2, r3
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	699b      	ldr	r3, [r3, #24]
 8018b8a:	021a      	lsls	r2, r3, #8
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	430a      	orrs	r2, r1
 8018b92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	69d9      	ldr	r1, [r3, #28]
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	6a1a      	ldr	r2, [r3, #32]
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	430a      	orrs	r2, r1
 8018ba2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	681a      	ldr	r2, [r3, #0]
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	f042 0201 	orr.w	r2, r2, #1
 8018bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	2220      	movs	r2, #32
 8018bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	2200      	movs	r2, #0
 8018bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8018bd0:	2300      	movs	r3, #0
}
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	3708      	adds	r7, #8
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	bd80      	pop	{r7, pc}
	...

08018bdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b088      	sub	sp, #32
 8018be0:	af02      	add	r7, sp, #8
 8018be2:	60f8      	str	r0, [r7, #12]
 8018be4:	607a      	str	r2, [r7, #4]
 8018be6:	461a      	mov	r2, r3
 8018be8:	460b      	mov	r3, r1
 8018bea:	817b      	strh	r3, [r7, #10]
 8018bec:	4613      	mov	r3, r2
 8018bee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018bf6:	b2db      	uxtb	r3, r3
 8018bf8:	2b20      	cmp	r3, #32
 8018bfa:	f040 80da 	bne.w	8018db2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018c04:	2b01      	cmp	r3, #1
 8018c06:	d101      	bne.n	8018c0c <HAL_I2C_Master_Transmit+0x30>
 8018c08:	2302      	movs	r3, #2
 8018c0a:	e0d3      	b.n	8018db4 <HAL_I2C_Master_Transmit+0x1d8>
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	2201      	movs	r2, #1
 8018c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018c14:	f7fd fae2 	bl	80161dc <HAL_GetTick>
 8018c18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018c1a:	697b      	ldr	r3, [r7, #20]
 8018c1c:	9300      	str	r3, [sp, #0]
 8018c1e:	2319      	movs	r3, #25
 8018c20:	2201      	movs	r2, #1
 8018c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018c26:	68f8      	ldr	r0, [r7, #12]
 8018c28:	f001 fbba 	bl	801a3a0 <I2C_WaitOnFlagUntilTimeout>
 8018c2c:	4603      	mov	r3, r0
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d001      	beq.n	8018c36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8018c32:	2301      	movs	r3, #1
 8018c34:	e0be      	b.n	8018db4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	2221      	movs	r2, #33	; 0x21
 8018c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	2210      	movs	r2, #16
 8018c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	2200      	movs	r2, #0
 8018c4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	687a      	ldr	r2, [r7, #4]
 8018c50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	893a      	ldrh	r2, [r7, #8]
 8018c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c62:	b29b      	uxth	r3, r3
 8018c64:	2bff      	cmp	r3, #255	; 0xff
 8018c66:	d90e      	bls.n	8018c86 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	22ff      	movs	r2, #255	; 0xff
 8018c6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c72:	b2da      	uxtb	r2, r3
 8018c74:	8979      	ldrh	r1, [r7, #10]
 8018c76:	4b51      	ldr	r3, [pc, #324]	; (8018dbc <HAL_I2C_Master_Transmit+0x1e0>)
 8018c78:	9300      	str	r3, [sp, #0]
 8018c7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018c7e:	68f8      	ldr	r0, [r7, #12]
 8018c80:	f001 fd1c 	bl	801a6bc <I2C_TransferConfig>
 8018c84:	e06c      	b.n	8018d60 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c8a:	b29a      	uxth	r2, r3
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c94:	b2da      	uxtb	r2, r3
 8018c96:	8979      	ldrh	r1, [r7, #10]
 8018c98:	4b48      	ldr	r3, [pc, #288]	; (8018dbc <HAL_I2C_Master_Transmit+0x1e0>)
 8018c9a:	9300      	str	r3, [sp, #0]
 8018c9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018ca0:	68f8      	ldr	r0, [r7, #12]
 8018ca2:	f001 fd0b 	bl	801a6bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8018ca6:	e05b      	b.n	8018d60 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018ca8:	697a      	ldr	r2, [r7, #20]
 8018caa:	6a39      	ldr	r1, [r7, #32]
 8018cac:	68f8      	ldr	r0, [r7, #12]
 8018cae:	f001 fbb7 	bl	801a420 <I2C_WaitOnTXISFlagUntilTimeout>
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d001      	beq.n	8018cbc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8018cb8:	2301      	movs	r3, #1
 8018cba:	e07b      	b.n	8018db4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc0:	781a      	ldrb	r2, [r3, #0]
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ccc:	1c5a      	adds	r2, r3, #1
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cd6:	b29b      	uxth	r3, r3
 8018cd8:	3b01      	subs	r3, #1
 8018cda:	b29a      	uxth	r2, r3
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ce4:	3b01      	subs	r3, #1
 8018ce6:	b29a      	uxth	r2, r3
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cf0:	b29b      	uxth	r3, r3
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d034      	beq.n	8018d60 <HAL_I2C_Master_Transmit+0x184>
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d130      	bne.n	8018d60 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018cfe:	697b      	ldr	r3, [r7, #20]
 8018d00:	9300      	str	r3, [sp, #0]
 8018d02:	6a3b      	ldr	r3, [r7, #32]
 8018d04:	2200      	movs	r2, #0
 8018d06:	2180      	movs	r1, #128	; 0x80
 8018d08:	68f8      	ldr	r0, [r7, #12]
 8018d0a:	f001 fb49 	bl	801a3a0 <I2C_WaitOnFlagUntilTimeout>
 8018d0e:	4603      	mov	r3, r0
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d001      	beq.n	8018d18 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8018d14:	2301      	movs	r3, #1
 8018d16:	e04d      	b.n	8018db4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d1c:	b29b      	uxth	r3, r3
 8018d1e:	2bff      	cmp	r3, #255	; 0xff
 8018d20:	d90e      	bls.n	8018d40 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	22ff      	movs	r2, #255	; 0xff
 8018d26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d2c:	b2da      	uxtb	r2, r3
 8018d2e:	8979      	ldrh	r1, [r7, #10]
 8018d30:	2300      	movs	r3, #0
 8018d32:	9300      	str	r3, [sp, #0]
 8018d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018d38:	68f8      	ldr	r0, [r7, #12]
 8018d3a:	f001 fcbf 	bl	801a6bc <I2C_TransferConfig>
 8018d3e:	e00f      	b.n	8018d60 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d44:	b29a      	uxth	r2, r3
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d4e:	b2da      	uxtb	r2, r3
 8018d50:	8979      	ldrh	r1, [r7, #10]
 8018d52:	2300      	movs	r3, #0
 8018d54:	9300      	str	r3, [sp, #0]
 8018d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018d5a:	68f8      	ldr	r0, [r7, #12]
 8018d5c:	f001 fcae 	bl	801a6bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d64:	b29b      	uxth	r3, r3
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d19e      	bne.n	8018ca8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018d6a:	697a      	ldr	r2, [r7, #20]
 8018d6c:	6a39      	ldr	r1, [r7, #32]
 8018d6e:	68f8      	ldr	r0, [r7, #12]
 8018d70:	f001 fb96 	bl	801a4a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8018d74:	4603      	mov	r3, r0
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d001      	beq.n	8018d7e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	e01a      	b.n	8018db4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	2220      	movs	r2, #32
 8018d84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	6859      	ldr	r1, [r3, #4]
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	681a      	ldr	r2, [r3, #0]
 8018d90:	4b0b      	ldr	r3, [pc, #44]	; (8018dc0 <HAL_I2C_Master_Transmit+0x1e4>)
 8018d92:	400b      	ands	r3, r1
 8018d94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	2220      	movs	r2, #32
 8018d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	2200      	movs	r2, #0
 8018da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	2200      	movs	r2, #0
 8018daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018dae:	2300      	movs	r3, #0
 8018db0:	e000      	b.n	8018db4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8018db2:	2302      	movs	r3, #2
  }
}
 8018db4:	4618      	mov	r0, r3
 8018db6:	3718      	adds	r7, #24
 8018db8:	46bd      	mov	sp, r7
 8018dba:	bd80      	pop	{r7, pc}
 8018dbc:	80002000 	.word	0x80002000
 8018dc0:	fe00e800 	.word	0xfe00e800

08018dc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b088      	sub	sp, #32
 8018dc8:	af02      	add	r7, sp, #8
 8018dca:	60f8      	str	r0, [r7, #12]
 8018dcc:	607a      	str	r2, [r7, #4]
 8018dce:	461a      	mov	r2, r3
 8018dd0:	460b      	mov	r3, r1
 8018dd2:	817b      	strh	r3, [r7, #10]
 8018dd4:	4613      	mov	r3, r2
 8018dd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018dde:	b2db      	uxtb	r3, r3
 8018de0:	2b20      	cmp	r3, #32
 8018de2:	f040 80db 	bne.w	8018f9c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018dec:	2b01      	cmp	r3, #1
 8018dee:	d101      	bne.n	8018df4 <HAL_I2C_Master_Receive+0x30>
 8018df0:	2302      	movs	r3, #2
 8018df2:	e0d4      	b.n	8018f9e <HAL_I2C_Master_Receive+0x1da>
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	2201      	movs	r2, #1
 8018df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018dfc:	f7fd f9ee 	bl	80161dc <HAL_GetTick>
 8018e00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018e02:	697b      	ldr	r3, [r7, #20]
 8018e04:	9300      	str	r3, [sp, #0]
 8018e06:	2319      	movs	r3, #25
 8018e08:	2201      	movs	r2, #1
 8018e0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018e0e:	68f8      	ldr	r0, [r7, #12]
 8018e10:	f001 fac6 	bl	801a3a0 <I2C_WaitOnFlagUntilTimeout>
 8018e14:	4603      	mov	r3, r0
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d001      	beq.n	8018e1e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8018e1a:	2301      	movs	r3, #1
 8018e1c:	e0bf      	b.n	8018f9e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	2222      	movs	r2, #34	; 0x22
 8018e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	2210      	movs	r2, #16
 8018e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	2200      	movs	r2, #0
 8018e32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018e34:	68fb      	ldr	r3, [r7, #12]
 8018e36:	687a      	ldr	r2, [r7, #4]
 8018e38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	893a      	ldrh	r2, [r7, #8]
 8018e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	2200      	movs	r2, #0
 8018e44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e4a:	b29b      	uxth	r3, r3
 8018e4c:	2bff      	cmp	r3, #255	; 0xff
 8018e4e:	d90e      	bls.n	8018e6e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	22ff      	movs	r2, #255	; 0xff
 8018e54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e5a:	b2da      	uxtb	r2, r3
 8018e5c:	8979      	ldrh	r1, [r7, #10]
 8018e5e:	4b52      	ldr	r3, [pc, #328]	; (8018fa8 <HAL_I2C_Master_Receive+0x1e4>)
 8018e60:	9300      	str	r3, [sp, #0]
 8018e62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018e66:	68f8      	ldr	r0, [r7, #12]
 8018e68:	f001 fc28 	bl	801a6bc <I2C_TransferConfig>
 8018e6c:	e06d      	b.n	8018f4a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e72:	b29a      	uxth	r2, r3
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e7c:	b2da      	uxtb	r2, r3
 8018e7e:	8979      	ldrh	r1, [r7, #10]
 8018e80:	4b49      	ldr	r3, [pc, #292]	; (8018fa8 <HAL_I2C_Master_Receive+0x1e4>)
 8018e82:	9300      	str	r3, [sp, #0]
 8018e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018e88:	68f8      	ldr	r0, [r7, #12]
 8018e8a:	f001 fc17 	bl	801a6bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8018e8e:	e05c      	b.n	8018f4a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018e90:	697a      	ldr	r2, [r7, #20]
 8018e92:	6a39      	ldr	r1, [r7, #32]
 8018e94:	68f8      	ldr	r0, [r7, #12]
 8018e96:	f001 fb3f 	bl	801a518 <I2C_WaitOnRXNEFlagUntilTimeout>
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d001      	beq.n	8018ea4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8018ea0:	2301      	movs	r3, #1
 8018ea2:	e07c      	b.n	8018f9e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eae:	b2d2      	uxtb	r2, r2
 8018eb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eb6:	1c5a      	adds	r2, r3, #1
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ec0:	3b01      	subs	r3, #1
 8018ec2:	b29a      	uxth	r2, r3
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ecc:	b29b      	uxth	r3, r3
 8018ece:	3b01      	subs	r3, #1
 8018ed0:	b29a      	uxth	r2, r3
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018eda:	b29b      	uxth	r3, r3
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d034      	beq.n	8018f4a <HAL_I2C_Master_Receive+0x186>
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d130      	bne.n	8018f4a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018ee8:	697b      	ldr	r3, [r7, #20]
 8018eea:	9300      	str	r3, [sp, #0]
 8018eec:	6a3b      	ldr	r3, [r7, #32]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	2180      	movs	r1, #128	; 0x80
 8018ef2:	68f8      	ldr	r0, [r7, #12]
 8018ef4:	f001 fa54 	bl	801a3a0 <I2C_WaitOnFlagUntilTimeout>
 8018ef8:	4603      	mov	r3, r0
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d001      	beq.n	8018f02 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8018efe:	2301      	movs	r3, #1
 8018f00:	e04d      	b.n	8018f9e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f06:	b29b      	uxth	r3, r3
 8018f08:	2bff      	cmp	r3, #255	; 0xff
 8018f0a:	d90e      	bls.n	8018f2a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	22ff      	movs	r2, #255	; 0xff
 8018f10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018f16:	b2da      	uxtb	r2, r3
 8018f18:	8979      	ldrh	r1, [r7, #10]
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	9300      	str	r3, [sp, #0]
 8018f1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018f22:	68f8      	ldr	r0, [r7, #12]
 8018f24:	f001 fbca 	bl	801a6bc <I2C_TransferConfig>
 8018f28:	e00f      	b.n	8018f4a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f2e:	b29a      	uxth	r2, r3
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018f38:	b2da      	uxtb	r2, r3
 8018f3a:	8979      	ldrh	r1, [r7, #10]
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	9300      	str	r3, [sp, #0]
 8018f40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018f44:	68f8      	ldr	r0, [r7, #12]
 8018f46:	f001 fbb9 	bl	801a6bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d19d      	bne.n	8018e90 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018f54:	697a      	ldr	r2, [r7, #20]
 8018f56:	6a39      	ldr	r1, [r7, #32]
 8018f58:	68f8      	ldr	r0, [r7, #12]
 8018f5a:	f001 faa1 	bl	801a4a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8018f5e:	4603      	mov	r3, r0
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d001      	beq.n	8018f68 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8018f64:	2301      	movs	r3, #1
 8018f66:	e01a      	b.n	8018f9e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	2220      	movs	r2, #32
 8018f6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	6859      	ldr	r1, [r3, #4]
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	681a      	ldr	r2, [r3, #0]
 8018f7a:	4b0c      	ldr	r3, [pc, #48]	; (8018fac <HAL_I2C_Master_Receive+0x1e8>)
 8018f7c:	400b      	ands	r3, r1
 8018f7e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	2220      	movs	r2, #32
 8018f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	2200      	movs	r2, #0
 8018f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018f98:	2300      	movs	r3, #0
 8018f9a:	e000      	b.n	8018f9e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8018f9c:	2302      	movs	r3, #2
  }
}
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	3718      	adds	r7, #24
 8018fa2:	46bd      	mov	sp, r7
 8018fa4:	bd80      	pop	{r7, pc}
 8018fa6:	bf00      	nop
 8018fa8:	80002400 	.word	0x80002400
 8018fac:	fe00e800 	.word	0xfe00e800

08018fb0 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b088      	sub	sp, #32
 8018fb4:	af02      	add	r7, sp, #8
 8018fb6:	60f8      	str	r0, [r7, #12]
 8018fb8:	607a      	str	r2, [r7, #4]
 8018fba:	461a      	mov	r2, r3
 8018fbc:	460b      	mov	r3, r1
 8018fbe:	817b      	strh	r3, [r7, #10]
 8018fc0:	4613      	mov	r3, r2
 8018fc2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018fca:	b2db      	uxtb	r3, r3
 8018fcc:	2b20      	cmp	r3, #32
 8018fce:	d153      	bne.n	8019078 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	699b      	ldr	r3, [r3, #24]
 8018fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018fde:	d101      	bne.n	8018fe4 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8018fe0:	2302      	movs	r3, #2
 8018fe2:	e04a      	b.n	801907a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018fea:	2b01      	cmp	r3, #1
 8018fec:	d101      	bne.n	8018ff2 <HAL_I2C_Master_Receive_IT+0x42>
 8018fee:	2302      	movs	r3, #2
 8018ff0:	e043      	b.n	801907a <HAL_I2C_Master_Receive_IT+0xca>
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	2201      	movs	r2, #1
 8018ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	2222      	movs	r2, #34	; 0x22
 8018ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	2210      	movs	r2, #16
 8019006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	2200      	movs	r2, #0
 801900e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	687a      	ldr	r2, [r7, #4]
 8019014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	893a      	ldrh	r2, [r7, #8]
 801901a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	4a19      	ldr	r2, [pc, #100]	; (8019084 <HAL_I2C_Master_Receive_IT+0xd4>)
 8019020:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	4a18      	ldr	r2, [pc, #96]	; (8019088 <HAL_I2C_Master_Receive_IT+0xd8>)
 8019026:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801902c:	b29b      	uxth	r3, r3
 801902e:	2bff      	cmp	r3, #255	; 0xff
 8019030:	d906      	bls.n	8019040 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	22ff      	movs	r2, #255	; 0xff
 8019036:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8019038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801903c:	617b      	str	r3, [r7, #20]
 801903e:	e007      	b.n	8019050 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019044:	b29a      	uxth	r2, r3
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 801904a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801904e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019054:	b2da      	uxtb	r2, r3
 8019056:	8979      	ldrh	r1, [r7, #10]
 8019058:	4b0c      	ldr	r3, [pc, #48]	; (801908c <HAL_I2C_Master_Receive_IT+0xdc>)
 801905a:	9300      	str	r3, [sp, #0]
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	68f8      	ldr	r0, [r7, #12]
 8019060:	f001 fb2c 	bl	801a6bc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	2200      	movs	r2, #0
 8019068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 801906c:	2102      	movs	r1, #2
 801906e:	68f8      	ldr	r0, [r7, #12]
 8019070:	f001 fb52 	bl	801a718 <I2C_Enable_IRQ>

    return HAL_OK;
 8019074:	2300      	movs	r3, #0
 8019076:	e000      	b.n	801907a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8019078:	2302      	movs	r3, #2
  }
}
 801907a:	4618      	mov	r0, r3
 801907c:	3718      	adds	r7, #24
 801907e:	46bd      	mov	sp, r7
 8019080:	bd80      	pop	{r7, pc}
 8019082:	bf00      	nop
 8019084:	ffff0000 	.word	0xffff0000
 8019088:	08019395 	.word	0x08019395
 801908c:	80002400 	.word	0x80002400

08019090 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b088      	sub	sp, #32
 8019094:	af02      	add	r7, sp, #8
 8019096:	60f8      	str	r0, [r7, #12]
 8019098:	4608      	mov	r0, r1
 801909a:	4611      	mov	r1, r2
 801909c:	461a      	mov	r2, r3
 801909e:	4603      	mov	r3, r0
 80190a0:	817b      	strh	r3, [r7, #10]
 80190a2:	460b      	mov	r3, r1
 80190a4:	813b      	strh	r3, [r7, #8]
 80190a6:	4613      	mov	r3, r2
 80190a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80190b0:	b2db      	uxtb	r3, r3
 80190b2:	2b20      	cmp	r3, #32
 80190b4:	f040 80f9 	bne.w	80192aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80190b8:	6a3b      	ldr	r3, [r7, #32]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d002      	beq.n	80190c4 <HAL_I2C_Mem_Write+0x34>
 80190be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d105      	bne.n	80190d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80190ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80190cc:	2301      	movs	r3, #1
 80190ce:	e0ed      	b.n	80192ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80190d6:	2b01      	cmp	r3, #1
 80190d8:	d101      	bne.n	80190de <HAL_I2C_Mem_Write+0x4e>
 80190da:	2302      	movs	r3, #2
 80190dc:	e0e6      	b.n	80192ac <HAL_I2C_Mem_Write+0x21c>
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	2201      	movs	r2, #1
 80190e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80190e6:	f7fd f879 	bl	80161dc <HAL_GetTick>
 80190ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80190ec:	697b      	ldr	r3, [r7, #20]
 80190ee:	9300      	str	r3, [sp, #0]
 80190f0:	2319      	movs	r3, #25
 80190f2:	2201      	movs	r2, #1
 80190f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80190f8:	68f8      	ldr	r0, [r7, #12]
 80190fa:	f001 f951 	bl	801a3a0 <I2C_WaitOnFlagUntilTimeout>
 80190fe:	4603      	mov	r3, r0
 8019100:	2b00      	cmp	r3, #0
 8019102:	d001      	beq.n	8019108 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8019104:	2301      	movs	r3, #1
 8019106:	e0d1      	b.n	80192ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	2221      	movs	r2, #33	; 0x21
 801910c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	2240      	movs	r2, #64	; 0x40
 8019114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	2200      	movs	r2, #0
 801911c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	6a3a      	ldr	r2, [r7, #32]
 8019122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019128:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	2200      	movs	r2, #0
 801912e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8019130:	88f8      	ldrh	r0, [r7, #6]
 8019132:	893a      	ldrh	r2, [r7, #8]
 8019134:	8979      	ldrh	r1, [r7, #10]
 8019136:	697b      	ldr	r3, [r7, #20]
 8019138:	9301      	str	r3, [sp, #4]
 801913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801913c:	9300      	str	r3, [sp, #0]
 801913e:	4603      	mov	r3, r0
 8019140:	68f8      	ldr	r0, [r7, #12]
 8019142:	f000 fd0f 	bl	8019b64 <I2C_RequestMemoryWrite>
 8019146:	4603      	mov	r3, r0
 8019148:	2b00      	cmp	r3, #0
 801914a:	d005      	beq.n	8019158 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	2200      	movs	r2, #0
 8019150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8019154:	2301      	movs	r3, #1
 8019156:	e0a9      	b.n	80192ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801915c:	b29b      	uxth	r3, r3
 801915e:	2bff      	cmp	r3, #255	; 0xff
 8019160:	d90e      	bls.n	8019180 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	22ff      	movs	r2, #255	; 0xff
 8019166:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801916c:	b2da      	uxtb	r2, r3
 801916e:	8979      	ldrh	r1, [r7, #10]
 8019170:	2300      	movs	r3, #0
 8019172:	9300      	str	r3, [sp, #0]
 8019174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019178:	68f8      	ldr	r0, [r7, #12]
 801917a:	f001 fa9f 	bl	801a6bc <I2C_TransferConfig>
 801917e:	e00f      	b.n	80191a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019184:	b29a      	uxth	r2, r3
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801918e:	b2da      	uxtb	r2, r3
 8019190:	8979      	ldrh	r1, [r7, #10]
 8019192:	2300      	movs	r3, #0
 8019194:	9300      	str	r3, [sp, #0]
 8019196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801919a:	68f8      	ldr	r0, [r7, #12]
 801919c:	f001 fa8e 	bl	801a6bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80191a0:	697a      	ldr	r2, [r7, #20]
 80191a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80191a4:	68f8      	ldr	r0, [r7, #12]
 80191a6:	f001 f93b 	bl	801a420 <I2C_WaitOnTXISFlagUntilTimeout>
 80191aa:	4603      	mov	r3, r0
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d001      	beq.n	80191b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80191b0:	2301      	movs	r3, #1
 80191b2:	e07b      	b.n	80192ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191b8:	781a      	ldrb	r2, [r3, #0]
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191c4:	1c5a      	adds	r2, r3, #1
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191ce:	b29b      	uxth	r3, r3
 80191d0:	3b01      	subs	r3, #1
 80191d2:	b29a      	uxth	r2, r3
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191dc:	3b01      	subs	r3, #1
 80191de:	b29a      	uxth	r2, r3
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191e8:	b29b      	uxth	r3, r3
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d034      	beq.n	8019258 <HAL_I2C_Mem_Write+0x1c8>
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d130      	bne.n	8019258 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80191f6:	697b      	ldr	r3, [r7, #20]
 80191f8:	9300      	str	r3, [sp, #0]
 80191fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191fc:	2200      	movs	r2, #0
 80191fe:	2180      	movs	r1, #128	; 0x80
 8019200:	68f8      	ldr	r0, [r7, #12]
 8019202:	f001 f8cd 	bl	801a3a0 <I2C_WaitOnFlagUntilTimeout>
 8019206:	4603      	mov	r3, r0
 8019208:	2b00      	cmp	r3, #0
 801920a:	d001      	beq.n	8019210 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 801920c:	2301      	movs	r3, #1
 801920e:	e04d      	b.n	80192ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019214:	b29b      	uxth	r3, r3
 8019216:	2bff      	cmp	r3, #255	; 0xff
 8019218:	d90e      	bls.n	8019238 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	22ff      	movs	r2, #255	; 0xff
 801921e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019224:	b2da      	uxtb	r2, r3
 8019226:	8979      	ldrh	r1, [r7, #10]
 8019228:	2300      	movs	r3, #0
 801922a:	9300      	str	r3, [sp, #0]
 801922c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019230:	68f8      	ldr	r0, [r7, #12]
 8019232:	f001 fa43 	bl	801a6bc <I2C_TransferConfig>
 8019236:	e00f      	b.n	8019258 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801923c:	b29a      	uxth	r2, r3
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019246:	b2da      	uxtb	r2, r3
 8019248:	8979      	ldrh	r1, [r7, #10]
 801924a:	2300      	movs	r3, #0
 801924c:	9300      	str	r3, [sp, #0]
 801924e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019252:	68f8      	ldr	r0, [r7, #12]
 8019254:	f001 fa32 	bl	801a6bc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801925c:	b29b      	uxth	r3, r3
 801925e:	2b00      	cmp	r3, #0
 8019260:	d19e      	bne.n	80191a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8019262:	697a      	ldr	r2, [r7, #20]
 8019264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019266:	68f8      	ldr	r0, [r7, #12]
 8019268:	f001 f91a 	bl	801a4a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 801926c:	4603      	mov	r3, r0
 801926e:	2b00      	cmp	r3, #0
 8019270:	d001      	beq.n	8019276 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8019272:	2301      	movs	r3, #1
 8019274:	e01a      	b.n	80192ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	2220      	movs	r2, #32
 801927c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	6859      	ldr	r1, [r3, #4]
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	681a      	ldr	r2, [r3, #0]
 8019288:	4b0a      	ldr	r3, [pc, #40]	; (80192b4 <HAL_I2C_Mem_Write+0x224>)
 801928a:	400b      	ands	r3, r1
 801928c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	2220      	movs	r2, #32
 8019292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	2200      	movs	r2, #0
 801929a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	2200      	movs	r2, #0
 80192a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80192a6:	2300      	movs	r3, #0
 80192a8:	e000      	b.n	80192ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80192aa:	2302      	movs	r3, #2
  }
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	3718      	adds	r7, #24
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}
 80192b4:	fe00e800 	.word	0xfe00e800

080192b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b084      	sub	sp, #16
 80192bc:	af00      	add	r7, sp, #0
 80192be:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	699b      	ldr	r3, [r3, #24]
 80192c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d005      	beq.n	80192e4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192dc:	68ba      	ldr	r2, [r7, #8]
 80192de:	68f9      	ldr	r1, [r7, #12]
 80192e0:	6878      	ldr	r0, [r7, #4]
 80192e2:	4798      	blx	r3
  }
}
 80192e4:	bf00      	nop
 80192e6:	3710      	adds	r7, #16
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}

080192ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80192ec:	b480      	push	{r7}
 80192ee:	b083      	sub	sp, #12
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80192f4:	bf00      	nop
 80192f6:	370c      	adds	r7, #12
 80192f8:	46bd      	mov	sp, r7
 80192fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fe:	4770      	bx	lr

08019300 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8019300:	b480      	push	{r7}
 8019302:	b083      	sub	sp, #12
 8019304:	af00      	add	r7, sp, #0
 8019306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8019308:	bf00      	nop
 801930a:	370c      	adds	r7, #12
 801930c:	46bd      	mov	sp, r7
 801930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019312:	4770      	bx	lr

08019314 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8019314:	b480      	push	{r7}
 8019316:	b083      	sub	sp, #12
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
 801931c:	460b      	mov	r3, r1
 801931e:	70fb      	strb	r3, [r7, #3]
 8019320:	4613      	mov	r3, r2
 8019322:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8019324:	bf00      	nop
 8019326:	370c      	adds	r7, #12
 8019328:	46bd      	mov	sp, r7
 801932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932e:	4770      	bx	lr

08019330 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8019330:	b480      	push	{r7}
 8019332:	b083      	sub	sp, #12
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8019338:	bf00      	nop
 801933a:	370c      	adds	r7, #12
 801933c:	46bd      	mov	sp, r7
 801933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019342:	4770      	bx	lr

08019344 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8019344:	b480      	push	{r7}
 8019346:	b083      	sub	sp, #12
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801934c:	bf00      	nop
 801934e:	370c      	adds	r7, #12
 8019350:	46bd      	mov	sp, r7
 8019352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019356:	4770      	bx	lr

08019358 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8019358:	b480      	push	{r7}
 801935a:	b083      	sub	sp, #12
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8019360:	bf00      	nop
 8019362:	370c      	adds	r7, #12
 8019364:	46bd      	mov	sp, r7
 8019366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801936a:	4770      	bx	lr

0801936c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801936c:	b480      	push	{r7}
 801936e:	b083      	sub	sp, #12
 8019370:	af00      	add	r7, sp, #0
 8019372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8019374:	bf00      	nop
 8019376:	370c      	adds	r7, #12
 8019378:	46bd      	mov	sp, r7
 801937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937e:	4770      	bx	lr

08019380 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8019380:	b480      	push	{r7}
 8019382:	b083      	sub	sp, #12
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8019388:	bf00      	nop
 801938a:	370c      	adds	r7, #12
 801938c:	46bd      	mov	sp, r7
 801938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019392:	4770      	bx	lr

08019394 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b088      	sub	sp, #32
 8019398:	af02      	add	r7, sp, #8
 801939a:	60f8      	str	r0, [r7, #12]
 801939c:	60b9      	str	r1, [r7, #8]
 801939e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80193a0:	68bb      	ldr	r3, [r7, #8]
 80193a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80193aa:	2b01      	cmp	r3, #1
 80193ac:	d101      	bne.n	80193b2 <I2C_Master_ISR_IT+0x1e>
 80193ae:	2302      	movs	r3, #2
 80193b0:	e115      	b.n	80195de <I2C_Master_ISR_IT+0x24a>
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	2201      	movs	r2, #1
 80193b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80193ba:	697b      	ldr	r3, [r7, #20]
 80193bc:	091b      	lsrs	r3, r3, #4
 80193be:	f003 0301 	and.w	r3, r3, #1
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d013      	beq.n	80193ee <I2C_Master_ISR_IT+0x5a>
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	091b      	lsrs	r3, r3, #4
 80193ca:	f003 0301 	and.w	r3, r3, #1
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d00d      	beq.n	80193ee <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	2210      	movs	r2, #16
 80193d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193de:	f043 0204 	orr.w	r2, r3, #4
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80193e6:	68f8      	ldr	r0, [r7, #12]
 80193e8:	f000 ff92 	bl	801a310 <I2C_Flush_TXDR>
 80193ec:	e0e2      	b.n	80195b4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80193ee:	697b      	ldr	r3, [r7, #20]
 80193f0:	089b      	lsrs	r3, r3, #2
 80193f2:	f003 0301 	and.w	r3, r3, #1
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d023      	beq.n	8019442 <I2C_Master_ISR_IT+0xae>
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	089b      	lsrs	r3, r3, #2
 80193fe:	f003 0301 	and.w	r3, r3, #1
 8019402:	2b00      	cmp	r3, #0
 8019404:	d01d      	beq.n	8019442 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8019406:	697b      	ldr	r3, [r7, #20]
 8019408:	f023 0304 	bic.w	r3, r3, #4
 801940c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019418:	b2d2      	uxtb	r2, r2
 801941a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019420:	1c5a      	adds	r2, r3, #1
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801942a:	3b01      	subs	r3, #1
 801942c:	b29a      	uxth	r2, r3
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019436:	b29b      	uxth	r3, r3
 8019438:	3b01      	subs	r3, #1
 801943a:	b29a      	uxth	r2, r3
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019440:	e0b8      	b.n	80195b4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8019442:	697b      	ldr	r3, [r7, #20]
 8019444:	085b      	lsrs	r3, r3, #1
 8019446:	f003 0301 	and.w	r3, r3, #1
 801944a:	2b00      	cmp	r3, #0
 801944c:	d01e      	beq.n	801948c <I2C_Master_ISR_IT+0xf8>
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	085b      	lsrs	r3, r3, #1
 8019452:	f003 0301 	and.w	r3, r3, #1
 8019456:	2b00      	cmp	r3, #0
 8019458:	d018      	beq.n	801948c <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801945e:	781a      	ldrb	r2, [r3, #0]
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801946a:	1c5a      	adds	r2, r3, #1
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019474:	3b01      	subs	r3, #1
 8019476:	b29a      	uxth	r2, r3
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019480:	b29b      	uxth	r3, r3
 8019482:	3b01      	subs	r3, #1
 8019484:	b29a      	uxth	r2, r3
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	855a      	strh	r2, [r3, #42]	; 0x2a
 801948a:	e093      	b.n	80195b4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801948c:	697b      	ldr	r3, [r7, #20]
 801948e:	09db      	lsrs	r3, r3, #7
 8019490:	f003 0301 	and.w	r3, r3, #1
 8019494:	2b00      	cmp	r3, #0
 8019496:	d05e      	beq.n	8019556 <I2C_Master_ISR_IT+0x1c2>
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	099b      	lsrs	r3, r3, #6
 801949c:	f003 0301 	and.w	r3, r3, #1
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d058      	beq.n	8019556 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d041      	beq.n	8019532 <I2C_Master_ISR_IT+0x19e>
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d13d      	bne.n	8019532 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	685b      	ldr	r3, [r3, #4]
 80194bc:	b29b      	uxth	r3, r3
 80194be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80194c2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194c8:	b29b      	uxth	r3, r3
 80194ca:	2bff      	cmp	r3, #255	; 0xff
 80194cc:	d90e      	bls.n	80194ec <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	22ff      	movs	r2, #255	; 0xff
 80194d2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80194d8:	b2da      	uxtb	r2, r3
 80194da:	8a79      	ldrh	r1, [r7, #18]
 80194dc:	2300      	movs	r3, #0
 80194de:	9300      	str	r3, [sp, #0]
 80194e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80194e4:	68f8      	ldr	r0, [r7, #12]
 80194e6:	f001 f8e9 	bl	801a6bc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80194ea:	e033      	b.n	8019554 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194f0:	b29a      	uxth	r2, r3
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80194fe:	d00c      	beq.n	801951a <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019504:	b2da      	uxtb	r2, r3
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801950a:	8a79      	ldrh	r1, [r7, #18]
 801950c:	2300      	movs	r3, #0
 801950e:	9300      	str	r3, [sp, #0]
 8019510:	4603      	mov	r3, r0
 8019512:	68f8      	ldr	r0, [r7, #12]
 8019514:	f001 f8d2 	bl	801a6bc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019518:	e01c      	b.n	8019554 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801951e:	b2da      	uxtb	r2, r3
 8019520:	8a79      	ldrh	r1, [r7, #18]
 8019522:	2300      	movs	r3, #0
 8019524:	9300      	str	r3, [sp, #0]
 8019526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801952a:	68f8      	ldr	r0, [r7, #12]
 801952c:	f001 f8c6 	bl	801a6bc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019530:	e010      	b.n	8019554 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	685b      	ldr	r3, [r3, #4]
 8019538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801953c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019540:	d003      	beq.n	801954a <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8019542:	68f8      	ldr	r0, [r7, #12]
 8019544:	f000 fbe4 	bl	8019d10 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8019548:	e034      	b.n	80195b4 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801954a:	2140      	movs	r1, #64	; 0x40
 801954c:	68f8      	ldr	r0, [r7, #12]
 801954e:	f000 fe1f 	bl	801a190 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8019552:	e02f      	b.n	80195b4 <I2C_Master_ISR_IT+0x220>
 8019554:	e02e      	b.n	80195b4 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8019556:	697b      	ldr	r3, [r7, #20]
 8019558:	099b      	lsrs	r3, r3, #6
 801955a:	f003 0301 	and.w	r3, r3, #1
 801955e:	2b00      	cmp	r3, #0
 8019560:	d028      	beq.n	80195b4 <I2C_Master_ISR_IT+0x220>
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	099b      	lsrs	r3, r3, #6
 8019566:	f003 0301 	and.w	r3, r3, #1
 801956a:	2b00      	cmp	r3, #0
 801956c:	d022      	beq.n	80195b4 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019572:	b29b      	uxth	r3, r3
 8019574:	2b00      	cmp	r3, #0
 8019576:	d119      	bne.n	80195ac <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	685b      	ldr	r3, [r3, #4]
 801957e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019586:	d015      	beq.n	80195b4 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801958c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019590:	d108      	bne.n	80195a4 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	685a      	ldr	r2, [r3, #4]
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80195a0:	605a      	str	r2, [r3, #4]
 80195a2:	e007      	b.n	80195b4 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80195a4:	68f8      	ldr	r0, [r7, #12]
 80195a6:	f000 fbb3 	bl	8019d10 <I2C_ITMasterSeqCplt>
 80195aa:	e003      	b.n	80195b4 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80195ac:	2140      	movs	r1, #64	; 0x40
 80195ae:	68f8      	ldr	r0, [r7, #12]
 80195b0:	f000 fdee 	bl	801a190 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80195b4:	697b      	ldr	r3, [r7, #20]
 80195b6:	095b      	lsrs	r3, r3, #5
 80195b8:	f003 0301 	and.w	r3, r3, #1
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d009      	beq.n	80195d4 <I2C_Master_ISR_IT+0x240>
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	095b      	lsrs	r3, r3, #5
 80195c4:	f003 0301 	and.w	r3, r3, #1
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d003      	beq.n	80195d4 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80195cc:	6979      	ldr	r1, [r7, #20]
 80195ce:	68f8      	ldr	r0, [r7, #12]
 80195d0:	f000 fc18 	bl	8019e04 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	2200      	movs	r2, #0
 80195d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80195dc:	2300      	movs	r3, #0
}
 80195de:	4618      	mov	r0, r3
 80195e0:	3718      	adds	r7, #24
 80195e2:	46bd      	mov	sp, r7
 80195e4:	bd80      	pop	{r7, pc}

080195e6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80195e6:	b580      	push	{r7, lr}
 80195e8:	b086      	sub	sp, #24
 80195ea:	af00      	add	r7, sp, #0
 80195ec:	60f8      	str	r0, [r7, #12]
 80195ee:	60b9      	str	r1, [r7, #8]
 80195f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80195f8:	68bb      	ldr	r3, [r7, #8]
 80195fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019602:	2b01      	cmp	r3, #1
 8019604:	d101      	bne.n	801960a <I2C_Slave_ISR_IT+0x24>
 8019606:	2302      	movs	r3, #2
 8019608:	e0ec      	b.n	80197e4 <I2C_Slave_ISR_IT+0x1fe>
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	2201      	movs	r2, #1
 801960e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8019612:	693b      	ldr	r3, [r7, #16]
 8019614:	095b      	lsrs	r3, r3, #5
 8019616:	f003 0301 	and.w	r3, r3, #1
 801961a:	2b00      	cmp	r3, #0
 801961c:	d009      	beq.n	8019632 <I2C_Slave_ISR_IT+0x4c>
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	095b      	lsrs	r3, r3, #5
 8019622:	f003 0301 	and.w	r3, r3, #1
 8019626:	2b00      	cmp	r3, #0
 8019628:	d003      	beq.n	8019632 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 801962a:	6939      	ldr	r1, [r7, #16]
 801962c:	68f8      	ldr	r0, [r7, #12]
 801962e:	f000 fc85 	bl	8019f3c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8019632:	693b      	ldr	r3, [r7, #16]
 8019634:	091b      	lsrs	r3, r3, #4
 8019636:	f003 0301 	and.w	r3, r3, #1
 801963a:	2b00      	cmp	r3, #0
 801963c:	d04d      	beq.n	80196da <I2C_Slave_ISR_IT+0xf4>
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	091b      	lsrs	r3, r3, #4
 8019642:	f003 0301 	and.w	r3, r3, #1
 8019646:	2b00      	cmp	r3, #0
 8019648:	d047      	beq.n	80196da <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801964e:	b29b      	uxth	r3, r3
 8019650:	2b00      	cmp	r3, #0
 8019652:	d128      	bne.n	80196a6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801965a:	b2db      	uxtb	r3, r3
 801965c:	2b28      	cmp	r3, #40	; 0x28
 801965e:	d108      	bne.n	8019672 <I2C_Slave_ISR_IT+0x8c>
 8019660:	697b      	ldr	r3, [r7, #20]
 8019662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019666:	d104      	bne.n	8019672 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8019668:	6939      	ldr	r1, [r7, #16]
 801966a:	68f8      	ldr	r0, [r7, #12]
 801966c:	f000 fd3c 	bl	801a0e8 <I2C_ITListenCplt>
 8019670:	e032      	b.n	80196d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019678:	b2db      	uxtb	r3, r3
 801967a:	2b29      	cmp	r3, #41	; 0x29
 801967c:	d10e      	bne.n	801969c <I2C_Slave_ISR_IT+0xb6>
 801967e:	697b      	ldr	r3, [r7, #20]
 8019680:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019684:	d00a      	beq.n	801969c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	2210      	movs	r2, #16
 801968c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801968e:	68f8      	ldr	r0, [r7, #12]
 8019690:	f000 fe3e 	bl	801a310 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8019694:	68f8      	ldr	r0, [r7, #12]
 8019696:	f000 fb78 	bl	8019d8a <I2C_ITSlaveSeqCplt>
 801969a:	e01d      	b.n	80196d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	2210      	movs	r2, #16
 80196a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80196a4:	e096      	b.n	80197d4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	2210      	movs	r2, #16
 80196ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196b2:	f043 0204 	orr.w	r2, r3, #4
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80196ba:	697b      	ldr	r3, [r7, #20]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d004      	beq.n	80196ca <I2C_Slave_ISR_IT+0xe4>
 80196c0:	697b      	ldr	r3, [r7, #20]
 80196c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80196c6:	f040 8085 	bne.w	80197d4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196ce:	4619      	mov	r1, r3
 80196d0:	68f8      	ldr	r0, [r7, #12]
 80196d2:	f000 fd5d 	bl	801a190 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80196d6:	e07d      	b.n	80197d4 <I2C_Slave_ISR_IT+0x1ee>
 80196d8:	e07c      	b.n	80197d4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80196da:	693b      	ldr	r3, [r7, #16]
 80196dc:	089b      	lsrs	r3, r3, #2
 80196de:	f003 0301 	and.w	r3, r3, #1
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d030      	beq.n	8019748 <I2C_Slave_ISR_IT+0x162>
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	089b      	lsrs	r3, r3, #2
 80196ea:	f003 0301 	and.w	r3, r3, #1
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d02a      	beq.n	8019748 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80196f6:	b29b      	uxth	r3, r3
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d018      	beq.n	801972e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019706:	b2d2      	uxtb	r2, r2
 8019708:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801970e:	1c5a      	adds	r2, r3, #1
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019718:	3b01      	subs	r3, #1
 801971a:	b29a      	uxth	r2, r3
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019724:	b29b      	uxth	r3, r3
 8019726:	3b01      	subs	r3, #1
 8019728:	b29a      	uxth	r2, r3
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019732:	b29b      	uxth	r3, r3
 8019734:	2b00      	cmp	r3, #0
 8019736:	d14f      	bne.n	80197d8 <I2C_Slave_ISR_IT+0x1f2>
 8019738:	697b      	ldr	r3, [r7, #20]
 801973a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801973e:	d04b      	beq.n	80197d8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8019740:	68f8      	ldr	r0, [r7, #12]
 8019742:	f000 fb22 	bl	8019d8a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8019746:	e047      	b.n	80197d8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8019748:	693b      	ldr	r3, [r7, #16]
 801974a:	08db      	lsrs	r3, r3, #3
 801974c:	f003 0301 	and.w	r3, r3, #1
 8019750:	2b00      	cmp	r3, #0
 8019752:	d00a      	beq.n	801976a <I2C_Slave_ISR_IT+0x184>
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	08db      	lsrs	r3, r3, #3
 8019758:	f003 0301 	and.w	r3, r3, #1
 801975c:	2b00      	cmp	r3, #0
 801975e:	d004      	beq.n	801976a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8019760:	6939      	ldr	r1, [r7, #16]
 8019762:	68f8      	ldr	r0, [r7, #12]
 8019764:	f000 fa52 	bl	8019c0c <I2C_ITAddrCplt>
 8019768:	e037      	b.n	80197da <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801976a:	693b      	ldr	r3, [r7, #16]
 801976c:	085b      	lsrs	r3, r3, #1
 801976e:	f003 0301 	and.w	r3, r3, #1
 8019772:	2b00      	cmp	r3, #0
 8019774:	d031      	beq.n	80197da <I2C_Slave_ISR_IT+0x1f4>
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	085b      	lsrs	r3, r3, #1
 801977a:	f003 0301 	and.w	r3, r3, #1
 801977e:	2b00      	cmp	r3, #0
 8019780:	d02b      	beq.n	80197da <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019786:	b29b      	uxth	r3, r3
 8019788:	2b00      	cmp	r3, #0
 801978a:	d018      	beq.n	80197be <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019790:	781a      	ldrb	r2, [r3, #0]
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801979c:	1c5a      	adds	r2, r3, #1
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80197a6:	b29b      	uxth	r3, r3
 80197a8:	3b01      	subs	r3, #1
 80197aa:	b29a      	uxth	r2, r3
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80197b4:	3b01      	subs	r3, #1
 80197b6:	b29a      	uxth	r2, r3
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80197bc:	e00d      	b.n	80197da <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80197be:	697b      	ldr	r3, [r7, #20]
 80197c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80197c4:	d002      	beq.n	80197cc <I2C_Slave_ISR_IT+0x1e6>
 80197c6:	697b      	ldr	r3, [r7, #20]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d106      	bne.n	80197da <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80197cc:	68f8      	ldr	r0, [r7, #12]
 80197ce:	f000 fadc 	bl	8019d8a <I2C_ITSlaveSeqCplt>
 80197d2:	e002      	b.n	80197da <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80197d4:	bf00      	nop
 80197d6:	e000      	b.n	80197da <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80197d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	2200      	movs	r2, #0
 80197de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80197e2:	2300      	movs	r3, #0
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	3718      	adds	r7, #24
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}

080197ec <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b088      	sub	sp, #32
 80197f0:	af02      	add	r7, sp, #8
 80197f2:	60f8      	str	r0, [r7, #12]
 80197f4:	60b9      	str	r1, [r7, #8]
 80197f6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80197fe:	2b01      	cmp	r3, #1
 8019800:	d101      	bne.n	8019806 <I2C_Master_ISR_DMA+0x1a>
 8019802:	2302      	movs	r3, #2
 8019804:	e0e1      	b.n	80199ca <I2C_Master_ISR_DMA+0x1de>
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	2201      	movs	r2, #1
 801980a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801980e:	68bb      	ldr	r3, [r7, #8]
 8019810:	091b      	lsrs	r3, r3, #4
 8019812:	f003 0301 	and.w	r3, r3, #1
 8019816:	2b00      	cmp	r3, #0
 8019818:	d017      	beq.n	801984a <I2C_Master_ISR_DMA+0x5e>
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	091b      	lsrs	r3, r3, #4
 801981e:	f003 0301 	and.w	r3, r3, #1
 8019822:	2b00      	cmp	r3, #0
 8019824:	d011      	beq.n	801984a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	2210      	movs	r2, #16
 801982c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019832:	f043 0204 	orr.w	r2, r3, #4
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801983a:	2112      	movs	r1, #18
 801983c:	68f8      	ldr	r0, [r7, #12]
 801983e:	f000 ff6b 	bl	801a718 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8019842:	68f8      	ldr	r0, [r7, #12]
 8019844:	f000 fd64 	bl	801a310 <I2C_Flush_TXDR>
 8019848:	e0ba      	b.n	80199c0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801984a:	68bb      	ldr	r3, [r7, #8]
 801984c:	09db      	lsrs	r3, r3, #7
 801984e:	f003 0301 	and.w	r3, r3, #1
 8019852:	2b00      	cmp	r3, #0
 8019854:	d072      	beq.n	801993c <I2C_Master_ISR_DMA+0x150>
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	099b      	lsrs	r3, r3, #6
 801985a:	f003 0301 	and.w	r3, r3, #1
 801985e:	2b00      	cmp	r3, #0
 8019860:	d06c      	beq.n	801993c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	681a      	ldr	r2, [r3, #0]
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019870:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019876:	b29b      	uxth	r3, r3
 8019878:	2b00      	cmp	r3, #0
 801987a:	d04e      	beq.n	801991a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	685b      	ldr	r3, [r3, #4]
 8019882:	b29b      	uxth	r3, r3
 8019884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019888:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801988e:	b29b      	uxth	r3, r3
 8019890:	2bff      	cmp	r3, #255	; 0xff
 8019892:	d906      	bls.n	80198a2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	22ff      	movs	r2, #255	; 0xff
 8019898:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 801989a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801989e:	617b      	str	r3, [r7, #20]
 80198a0:	e010      	b.n	80198c4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80198a6:	b29a      	uxth	r2, r3
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80198b4:	d003      	beq.n	80198be <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198ba:	617b      	str	r3, [r7, #20]
 80198bc:	e002      	b.n	80198c4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80198be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80198c2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80198c8:	b2da      	uxtb	r2, r3
 80198ca:	8a79      	ldrh	r1, [r7, #18]
 80198cc:	2300      	movs	r3, #0
 80198ce:	9300      	str	r3, [sp, #0]
 80198d0:	697b      	ldr	r3, [r7, #20]
 80198d2:	68f8      	ldr	r0, [r7, #12]
 80198d4:	f000 fef2 	bl	801a6bc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80198dc:	b29a      	uxth	r2, r3
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80198e2:	1ad3      	subs	r3, r2, r3
 80198e4:	b29a      	uxth	r2, r3
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80198f0:	b2db      	uxtb	r3, r3
 80198f2:	2b22      	cmp	r3, #34	; 0x22
 80198f4:	d108      	bne.n	8019908 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	681a      	ldr	r2, [r3, #0]
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019904:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8019906:	e05b      	b.n	80199c0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	681a      	ldr	r2, [r3, #0]
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019916:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8019918:	e052      	b.n	80199c0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	685b      	ldr	r3, [r3, #4]
 8019920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019928:	d003      	beq.n	8019932 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801992a:	68f8      	ldr	r0, [r7, #12]
 801992c:	f000 f9f0 	bl	8019d10 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8019930:	e046      	b.n	80199c0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8019932:	2140      	movs	r1, #64	; 0x40
 8019934:	68f8      	ldr	r0, [r7, #12]
 8019936:	f000 fc2b 	bl	801a190 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801993a:	e041      	b.n	80199c0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801993c:	68bb      	ldr	r3, [r7, #8]
 801993e:	099b      	lsrs	r3, r3, #6
 8019940:	f003 0301 	and.w	r3, r3, #1
 8019944:	2b00      	cmp	r3, #0
 8019946:	d029      	beq.n	801999c <I2C_Master_ISR_DMA+0x1b0>
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	099b      	lsrs	r3, r3, #6
 801994c:	f003 0301 	and.w	r3, r3, #1
 8019950:	2b00      	cmp	r3, #0
 8019952:	d023      	beq.n	801999c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019958:	b29b      	uxth	r3, r3
 801995a:	2b00      	cmp	r3, #0
 801995c:	d119      	bne.n	8019992 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	685b      	ldr	r3, [r3, #4]
 8019964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801996c:	d027      	beq.n	80199be <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019972:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019976:	d108      	bne.n	801998a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	685a      	ldr	r2, [r3, #4]
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019986:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8019988:	e019      	b.n	80199be <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801998a:	68f8      	ldr	r0, [r7, #12]
 801998c:	f000 f9c0 	bl	8019d10 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8019990:	e015      	b.n	80199be <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8019992:	2140      	movs	r1, #64	; 0x40
 8019994:	68f8      	ldr	r0, [r7, #12]
 8019996:	f000 fbfb 	bl	801a190 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801999a:	e010      	b.n	80199be <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801999c:	68bb      	ldr	r3, [r7, #8]
 801999e:	095b      	lsrs	r3, r3, #5
 80199a0:	f003 0301 	and.w	r3, r3, #1
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d00b      	beq.n	80199c0 <I2C_Master_ISR_DMA+0x1d4>
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	095b      	lsrs	r3, r3, #5
 80199ac:	f003 0301 	and.w	r3, r3, #1
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d005      	beq.n	80199c0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80199b4:	68b9      	ldr	r1, [r7, #8]
 80199b6:	68f8      	ldr	r0, [r7, #12]
 80199b8:	f000 fa24 	bl	8019e04 <I2C_ITMasterCplt>
 80199bc:	e000      	b.n	80199c0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80199be:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	2200      	movs	r2, #0
 80199c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80199c8:	2300      	movs	r3, #0
}
 80199ca:	4618      	mov	r0, r3
 80199cc:	3718      	adds	r7, #24
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}

080199d2 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80199d2:	b580      	push	{r7, lr}
 80199d4:	b086      	sub	sp, #24
 80199d6:	af00      	add	r7, sp, #0
 80199d8:	60f8      	str	r0, [r7, #12]
 80199da:	60b9      	str	r1, [r7, #8]
 80199dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199e2:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 80199e4:	2300      	movs	r3, #0
 80199e6:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80199ee:	2b01      	cmp	r3, #1
 80199f0:	d101      	bne.n	80199f6 <I2C_Slave_ISR_DMA+0x24>
 80199f2:	2302      	movs	r3, #2
 80199f4:	e0b1      	b.n	8019b5a <I2C_Slave_ISR_DMA+0x188>
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	2201      	movs	r2, #1
 80199fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80199fe:	68bb      	ldr	r3, [r7, #8]
 8019a00:	095b      	lsrs	r3, r3, #5
 8019a02:	f003 0301 	and.w	r3, r3, #1
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d009      	beq.n	8019a1e <I2C_Slave_ISR_DMA+0x4c>
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	095b      	lsrs	r3, r3, #5
 8019a0e:	f003 0301 	and.w	r3, r3, #1
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d003      	beq.n	8019a1e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8019a16:	68b9      	ldr	r1, [r7, #8]
 8019a18:	68f8      	ldr	r0, [r7, #12]
 8019a1a:	f000 fa8f 	bl	8019f3c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8019a1e:	68bb      	ldr	r3, [r7, #8]
 8019a20:	091b      	lsrs	r3, r3, #4
 8019a22:	f003 0301 	and.w	r3, r3, #1
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	f000 8082 	beq.w	8019b30 <I2C_Slave_ISR_DMA+0x15e>
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	091b      	lsrs	r3, r3, #4
 8019a30:	f003 0301 	and.w	r3, r3, #1
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d07b      	beq.n	8019b30 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	0b9b      	lsrs	r3, r3, #14
 8019a3c:	f003 0301 	and.w	r3, r3, #1
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d105      	bne.n	8019a50 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	0bdb      	lsrs	r3, r3, #15
 8019a48:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d068      	beq.n	8019b22 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d00d      	beq.n	8019a74 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	0bdb      	lsrs	r3, r3, #15
 8019a5c:	f003 0301 	and.w	r3, r3, #1
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d007      	beq.n	8019a74 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	685b      	ldr	r3, [r3, #4]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d101      	bne.n	8019a74 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8019a70:	2301      	movs	r3, #1
 8019a72:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d00d      	beq.n	8019a98 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	0b9b      	lsrs	r3, r3, #14
 8019a80:	f003 0301 	and.w	r3, r3, #1
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d007      	beq.n	8019a98 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	685b      	ldr	r3, [r3, #4]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d101      	bne.n	8019a98 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8019a94:	2301      	movs	r3, #1
 8019a96:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8019a98:	697b      	ldr	r3, [r7, #20]
 8019a9a:	2b01      	cmp	r3, #1
 8019a9c:	d128      	bne.n	8019af0 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019aa4:	b2db      	uxtb	r3, r3
 8019aa6:	2b28      	cmp	r3, #40	; 0x28
 8019aa8:	d108      	bne.n	8019abc <I2C_Slave_ISR_DMA+0xea>
 8019aaa:	693b      	ldr	r3, [r7, #16]
 8019aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019ab0:	d104      	bne.n	8019abc <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8019ab2:	68b9      	ldr	r1, [r7, #8]
 8019ab4:	68f8      	ldr	r0, [r7, #12]
 8019ab6:	f000 fb17 	bl	801a0e8 <I2C_ITListenCplt>
 8019aba:	e031      	b.n	8019b20 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019ac2:	b2db      	uxtb	r3, r3
 8019ac4:	2b29      	cmp	r3, #41	; 0x29
 8019ac6:	d10e      	bne.n	8019ae6 <I2C_Slave_ISR_DMA+0x114>
 8019ac8:	693b      	ldr	r3, [r7, #16]
 8019aca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019ace:	d00a      	beq.n	8019ae6 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	2210      	movs	r2, #16
 8019ad6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8019ad8:	68f8      	ldr	r0, [r7, #12]
 8019ada:	f000 fc19 	bl	801a310 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8019ade:	68f8      	ldr	r0, [r7, #12]
 8019ae0:	f000 f953 	bl	8019d8a <I2C_ITSlaveSeqCplt>
 8019ae4:	e01c      	b.n	8019b20 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	2210      	movs	r2, #16
 8019aec:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8019aee:	e01d      	b.n	8019b2c <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	2210      	movs	r2, #16
 8019af6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019afc:	f043 0204 	orr.w	r2, r3, #4
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8019b04:	693b      	ldr	r3, [r7, #16]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d003      	beq.n	8019b12 <I2C_Slave_ISR_DMA+0x140>
 8019b0a:	693b      	ldr	r3, [r7, #16]
 8019b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019b10:	d10c      	bne.n	8019b2c <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b16:	4619      	mov	r1, r3
 8019b18:	68f8      	ldr	r0, [r7, #12]
 8019b1a:	f000 fb39 	bl	801a190 <I2C_ITError>
      if (treatdmanack == 1U)
 8019b1e:	e005      	b.n	8019b2c <I2C_Slave_ISR_DMA+0x15a>
 8019b20:	e004      	b.n	8019b2c <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	2210      	movs	r2, #16
 8019b28:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8019b2a:	e011      	b.n	8019b50 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8019b2c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8019b2e:	e00f      	b.n	8019b50 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8019b30:	68bb      	ldr	r3, [r7, #8]
 8019b32:	08db      	lsrs	r3, r3, #3
 8019b34:	f003 0301 	and.w	r3, r3, #1
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d009      	beq.n	8019b50 <I2C_Slave_ISR_DMA+0x17e>
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	08db      	lsrs	r3, r3, #3
 8019b40:	f003 0301 	and.w	r3, r3, #1
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d003      	beq.n	8019b50 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8019b48:	68b9      	ldr	r1, [r7, #8]
 8019b4a:	68f8      	ldr	r0, [r7, #12]
 8019b4c:	f000 f85e 	bl	8019c0c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	2200      	movs	r2, #0
 8019b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019b58:	2300      	movs	r3, #0
}
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	3718      	adds	r7, #24
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	bd80      	pop	{r7, pc}
	...

08019b64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b086      	sub	sp, #24
 8019b68:	af02      	add	r7, sp, #8
 8019b6a:	60f8      	str	r0, [r7, #12]
 8019b6c:	4608      	mov	r0, r1
 8019b6e:	4611      	mov	r1, r2
 8019b70:	461a      	mov	r2, r3
 8019b72:	4603      	mov	r3, r0
 8019b74:	817b      	strh	r3, [r7, #10]
 8019b76:	460b      	mov	r3, r1
 8019b78:	813b      	strh	r3, [r7, #8]
 8019b7a:	4613      	mov	r3, r2
 8019b7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8019b7e:	88fb      	ldrh	r3, [r7, #6]
 8019b80:	b2da      	uxtb	r2, r3
 8019b82:	8979      	ldrh	r1, [r7, #10]
 8019b84:	4b20      	ldr	r3, [pc, #128]	; (8019c08 <I2C_RequestMemoryWrite+0xa4>)
 8019b86:	9300      	str	r3, [sp, #0]
 8019b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019b8c:	68f8      	ldr	r0, [r7, #12]
 8019b8e:	f000 fd95 	bl	801a6bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019b92:	69fa      	ldr	r2, [r7, #28]
 8019b94:	69b9      	ldr	r1, [r7, #24]
 8019b96:	68f8      	ldr	r0, [r7, #12]
 8019b98:	f000 fc42 	bl	801a420 <I2C_WaitOnTXISFlagUntilTimeout>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d001      	beq.n	8019ba6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8019ba2:	2301      	movs	r3, #1
 8019ba4:	e02c      	b.n	8019c00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019ba6:	88fb      	ldrh	r3, [r7, #6]
 8019ba8:	2b01      	cmp	r3, #1
 8019baa:	d105      	bne.n	8019bb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8019bac:	893b      	ldrh	r3, [r7, #8]
 8019bae:	b2da      	uxtb	r2, r3
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	629a      	str	r2, [r3, #40]	; 0x28
 8019bb6:	e015      	b.n	8019be4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8019bb8:	893b      	ldrh	r3, [r7, #8]
 8019bba:	0a1b      	lsrs	r3, r3, #8
 8019bbc:	b29b      	uxth	r3, r3
 8019bbe:	b2da      	uxtb	r2, r3
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019bc6:	69fa      	ldr	r2, [r7, #28]
 8019bc8:	69b9      	ldr	r1, [r7, #24]
 8019bca:	68f8      	ldr	r0, [r7, #12]
 8019bcc:	f000 fc28 	bl	801a420 <I2C_WaitOnTXISFlagUntilTimeout>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d001      	beq.n	8019bda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8019bd6:	2301      	movs	r3, #1
 8019bd8:	e012      	b.n	8019c00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8019bda:	893b      	ldrh	r3, [r7, #8]
 8019bdc:	b2da      	uxtb	r2, r3
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8019be4:	69fb      	ldr	r3, [r7, #28]
 8019be6:	9300      	str	r3, [sp, #0]
 8019be8:	69bb      	ldr	r3, [r7, #24]
 8019bea:	2200      	movs	r2, #0
 8019bec:	2180      	movs	r1, #128	; 0x80
 8019bee:	68f8      	ldr	r0, [r7, #12]
 8019bf0:	f000 fbd6 	bl	801a3a0 <I2C_WaitOnFlagUntilTimeout>
 8019bf4:	4603      	mov	r3, r0
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d001      	beq.n	8019bfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8019bfa:	2301      	movs	r3, #1
 8019bfc:	e000      	b.n	8019c00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8019bfe:	2300      	movs	r3, #0
}
 8019c00:	4618      	mov	r0, r3
 8019c02:	3710      	adds	r7, #16
 8019c04:	46bd      	mov	sp, r7
 8019c06:	bd80      	pop	{r7, pc}
 8019c08:	80002000 	.word	0x80002000

08019c0c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b084      	sub	sp, #16
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
 8019c14:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019c1c:	b2db      	uxtb	r3, r3
 8019c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019c22:	2b28      	cmp	r3, #40	; 0x28
 8019c24:	d168      	bne.n	8019cf8 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	699b      	ldr	r3, [r3, #24]
 8019c2c:	0c1b      	lsrs	r3, r3, #16
 8019c2e:	b2db      	uxtb	r3, r3
 8019c30:	f003 0301 	and.w	r3, r3, #1
 8019c34:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	699b      	ldr	r3, [r3, #24]
 8019c3c:	0c1b      	lsrs	r3, r3, #16
 8019c3e:	b29b      	uxth	r3, r3
 8019c40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019c44:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	689b      	ldr	r3, [r3, #8]
 8019c4c:	b29b      	uxth	r3, r3
 8019c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019c52:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	68db      	ldr	r3, [r3, #12]
 8019c5a:	b29b      	uxth	r3, r3
 8019c5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019c60:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	68db      	ldr	r3, [r3, #12]
 8019c66:	2b02      	cmp	r3, #2
 8019c68:	d137      	bne.n	8019cda <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8019c6a:	897b      	ldrh	r3, [r7, #10]
 8019c6c:	09db      	lsrs	r3, r3, #7
 8019c6e:	b29a      	uxth	r2, r3
 8019c70:	89bb      	ldrh	r3, [r7, #12]
 8019c72:	4053      	eors	r3, r2
 8019c74:	b29b      	uxth	r3, r3
 8019c76:	f003 0306 	and.w	r3, r3, #6
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d11c      	bne.n	8019cb8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8019c7e:	897b      	ldrh	r3, [r7, #10]
 8019c80:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019c86:	1c5a      	adds	r2, r3, #1
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019c90:	2b02      	cmp	r3, #2
 8019c92:	d139      	bne.n	8019d08 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	2200      	movs	r2, #0
 8019c98:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	2208      	movs	r2, #8
 8019ca0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8019caa:	89ba      	ldrh	r2, [r7, #12]
 8019cac:	7bfb      	ldrb	r3, [r7, #15]
 8019cae:	4619      	mov	r1, r3
 8019cb0:	6878      	ldr	r0, [r7, #4]
 8019cb2:	f7ff fb2f 	bl	8019314 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8019cb6:	e027      	b.n	8019d08 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8019cb8:	893b      	ldrh	r3, [r7, #8]
 8019cba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8019cbc:	2104      	movs	r1, #4
 8019cbe:	6878      	ldr	r0, [r7, #4]
 8019cc0:	f000 fd98 	bl	801a7f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8019ccc:	89ba      	ldrh	r2, [r7, #12]
 8019cce:	7bfb      	ldrb	r3, [r7, #15]
 8019cd0:	4619      	mov	r1, r3
 8019cd2:	6878      	ldr	r0, [r7, #4]
 8019cd4:	f7ff fb1e 	bl	8019314 <HAL_I2C_AddrCallback>
}
 8019cd8:	e016      	b.n	8019d08 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8019cda:	2104      	movs	r1, #4
 8019cdc:	6878      	ldr	r0, [r7, #4]
 8019cde:	f000 fd89 	bl	801a7f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	2200      	movs	r2, #0
 8019ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8019cea:	89ba      	ldrh	r2, [r7, #12]
 8019cec:	7bfb      	ldrb	r3, [r7, #15]
 8019cee:	4619      	mov	r1, r3
 8019cf0:	6878      	ldr	r0, [r7, #4]
 8019cf2:	f7ff fb0f 	bl	8019314 <HAL_I2C_AddrCallback>
}
 8019cf6:	e007      	b.n	8019d08 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	2208      	movs	r2, #8
 8019cfe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	2200      	movs	r2, #0
 8019d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8019d08:	bf00      	nop
 8019d0a:	3710      	adds	r7, #16
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd80      	pop	{r7, pc}

08019d10 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b082      	sub	sp, #8
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	2200      	movs	r2, #0
 8019d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019d26:	b2db      	uxtb	r3, r3
 8019d28:	2b21      	cmp	r3, #33	; 0x21
 8019d2a:	d115      	bne.n	8019d58 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	2220      	movs	r2, #32
 8019d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	2211      	movs	r2, #17
 8019d38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	2200      	movs	r2, #0
 8019d3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8019d40:	2101      	movs	r1, #1
 8019d42:	6878      	ldr	r0, [r7, #4]
 8019d44:	f000 fd56 	bl	801a7f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	2200      	movs	r2, #0
 8019d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8019d50:	6878      	ldr	r0, [r7, #4]
 8019d52:	f7fa f813 	bl	8013d7c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019d56:	e014      	b.n	8019d82 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	2220      	movs	r2, #32
 8019d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	2212      	movs	r2, #18
 8019d64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	2200      	movs	r2, #0
 8019d6a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8019d6c:	2102      	movs	r1, #2
 8019d6e:	6878      	ldr	r0, [r7, #4]
 8019d70:	f000 fd40 	bl	801a7f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	2200      	movs	r2, #0
 8019d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8019d7c:	6878      	ldr	r0, [r7, #4]
 8019d7e:	f7fa f813 	bl	8013da8 <HAL_I2C_MasterRxCpltCallback>
}
 8019d82:	bf00      	nop
 8019d84:	3708      	adds	r7, #8
 8019d86:	46bd      	mov	sp, r7
 8019d88:	bd80      	pop	{r7, pc}

08019d8a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8019d8a:	b580      	push	{r7, lr}
 8019d8c:	b082      	sub	sp, #8
 8019d8e:	af00      	add	r7, sp, #0
 8019d90:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	2200      	movs	r2, #0
 8019d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019da0:	b2db      	uxtb	r3, r3
 8019da2:	2b29      	cmp	r3, #41	; 0x29
 8019da4:	d112      	bne.n	8019dcc <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	2228      	movs	r2, #40	; 0x28
 8019daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	2221      	movs	r2, #33	; 0x21
 8019db2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8019db4:	2101      	movs	r1, #1
 8019db6:	6878      	ldr	r0, [r7, #4]
 8019db8:	f000 fd1c 	bl	801a7f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	2200      	movs	r2, #0
 8019dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8019dc4:	6878      	ldr	r0, [r7, #4]
 8019dc6:	f7ff fa91 	bl	80192ec <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8019dca:	e017      	b.n	8019dfc <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019dd2:	b2db      	uxtb	r3, r3
 8019dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8019dd6:	d111      	bne.n	8019dfc <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	2228      	movs	r2, #40	; 0x28
 8019ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	2222      	movs	r2, #34	; 0x22
 8019de4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8019de6:	2102      	movs	r1, #2
 8019de8:	6878      	ldr	r0, [r7, #4]
 8019dea:	f000 fd03 	bl	801a7f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	2200      	movs	r2, #0
 8019df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019df6:	6878      	ldr	r0, [r7, #4]
 8019df8:	f7ff fa82 	bl	8019300 <HAL_I2C_SlaveRxCpltCallback>
}
 8019dfc:	bf00      	nop
 8019dfe:	3708      	adds	r7, #8
 8019e00:	46bd      	mov	sp, r7
 8019e02:	bd80      	pop	{r7, pc}

08019e04 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b084      	sub	sp, #16
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
 8019e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	2220      	movs	r2, #32
 8019e14:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	6859      	ldr	r1, [r3, #4]
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681a      	ldr	r2, [r3, #0]
 8019e20:	4b44      	ldr	r3, [pc, #272]	; (8019f34 <I2C_ITMasterCplt+0x130>)
 8019e22:	400b      	ands	r3, r1
 8019e24:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	2200      	movs	r2, #0
 8019e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	2200      	movs	r2, #0
 8019e30:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	4a40      	ldr	r2, [pc, #256]	; (8019f38 <I2C_ITMasterCplt+0x134>)
 8019e36:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8019e38:	683b      	ldr	r3, [r7, #0]
 8019e3a:	091b      	lsrs	r3, r3, #4
 8019e3c:	f003 0301 	and.w	r3, r3, #1
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d009      	beq.n	8019e58 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	2210      	movs	r2, #16
 8019e4a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e50:	f043 0204 	orr.w	r2, r3, #4
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8019e58:	6878      	ldr	r0, [r7, #4]
 8019e5a:	f000 fa59 	bl	801a310 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8019e5e:	2103      	movs	r1, #3
 8019e60:	6878      	ldr	r0, [r7, #4]
 8019e62:	f000 fcc7 	bl	801a7f4 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e6a:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019e72:	b2db      	uxtb	r3, r3
 8019e74:	2b60      	cmp	r3, #96	; 0x60
 8019e76:	d002      	beq.n	8019e7e <I2C_ITMasterCplt+0x7a>
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d006      	beq.n	8019e8c <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e82:	4619      	mov	r1, r3
 8019e84:	6878      	ldr	r0, [r7, #4]
 8019e86:	f000 f983 	bl	801a190 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8019e8a:	e04e      	b.n	8019f2a <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019e92:	b2db      	uxtb	r3, r3
 8019e94:	2b21      	cmp	r3, #33	; 0x21
 8019e96:	d121      	bne.n	8019edc <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	2220      	movs	r2, #32
 8019e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019ea6:	b2db      	uxtb	r3, r3
 8019ea8:	2b40      	cmp	r3, #64	; 0x40
 8019eaa:	d10b      	bne.n	8019ec4 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	2200      	movs	r2, #0
 8019eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8019ebc:	6878      	ldr	r0, [r7, #4]
 8019ebe:	f7ff fa41 	bl	8019344 <HAL_I2C_MemTxCpltCallback>
}
 8019ec2:	e032      	b.n	8019f2a <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	2200      	movs	r2, #0
 8019ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2200      	movs	r2, #0
 8019ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8019ed4:	6878      	ldr	r0, [r7, #4]
 8019ed6:	f7f9 ff51 	bl	8013d7c <HAL_I2C_MasterTxCpltCallback>
}
 8019eda:	e026      	b.n	8019f2a <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019ee2:	b2db      	uxtb	r3, r3
 8019ee4:	2b22      	cmp	r3, #34	; 0x22
 8019ee6:	d120      	bne.n	8019f2a <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	2220      	movs	r2, #32
 8019eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019ef6:	b2db      	uxtb	r3, r3
 8019ef8:	2b40      	cmp	r3, #64	; 0x40
 8019efa:	d10b      	bne.n	8019f14 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	2200      	movs	r2, #0
 8019f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	2200      	movs	r2, #0
 8019f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8019f0c:	6878      	ldr	r0, [r7, #4]
 8019f0e:	f7ff fa23 	bl	8019358 <HAL_I2C_MemRxCpltCallback>
}
 8019f12:	e00a      	b.n	8019f2a <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	2200      	movs	r2, #0
 8019f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	2200      	movs	r2, #0
 8019f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8019f24:	6878      	ldr	r0, [r7, #4]
 8019f26:	f7f9 ff3f 	bl	8013da8 <HAL_I2C_MasterRxCpltCallback>
}
 8019f2a:	bf00      	nop
 8019f2c:	3710      	adds	r7, #16
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bd80      	pop	{r7, pc}
 8019f32:	bf00      	nop
 8019f34:	fe00e800 	.word	0xfe00e800
 8019f38:	ffff0000 	.word	0xffff0000

08019f3c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b084      	sub	sp, #16
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
 8019f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	2220      	movs	r2, #32
 8019f58:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8019f5a:	2107      	movs	r1, #7
 8019f5c:	6878      	ldr	r0, [r7, #4]
 8019f5e:	f000 fc49 	bl	801a7f4 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	685a      	ldr	r2, [r3, #4]
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019f70:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	6859      	ldr	r1, [r3, #4]
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681a      	ldr	r2, [r3, #0]
 8019f7c:	4b58      	ldr	r3, [pc, #352]	; (801a0e0 <I2C_ITSlaveCplt+0x1a4>)
 8019f7e:	400b      	ands	r3, r1
 8019f80:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8019f82:	6878      	ldr	r0, [r7, #4]
 8019f84:	f000 f9c4 	bl	801a310 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8019f88:	68bb      	ldr	r3, [r7, #8]
 8019f8a:	0b9b      	lsrs	r3, r3, #14
 8019f8c:	f003 0301 	and.w	r3, r3, #1
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d00b      	beq.n	8019fac <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d018      	beq.n	8019fce <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	685b      	ldr	r3, [r3, #4]
 8019fa4:	b29a      	uxth	r2, r3
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019faa:	e010      	b.n	8019fce <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8019fac:	68bb      	ldr	r3, [r7, #8]
 8019fae:	0bdb      	lsrs	r3, r3, #15
 8019fb0:	f003 0301 	and.w	r3, r3, #1
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d00a      	beq.n	8019fce <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d006      	beq.n	8019fce <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	685b      	ldr	r3, [r3, #4]
 8019fc8:	b29a      	uxth	r2, r3
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	089b      	lsrs	r3, r3, #2
 8019fd2:	f003 0301 	and.w	r3, r3, #1
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d020      	beq.n	801a01c <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	f023 0304 	bic.w	r3, r3, #4
 8019fe0:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fec:	b2d2      	uxtb	r2, r2
 8019fee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ff4:	1c5a      	adds	r2, r3, #1
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d00c      	beq.n	801a01c <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a006:	3b01      	subs	r3, #1
 801a008:	b29a      	uxth	r2, r3
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a012:	b29b      	uxth	r3, r3
 801a014:	3b01      	subs	r3, #1
 801a016:	b29a      	uxth	r2, r3
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a020:	b29b      	uxth	r3, r3
 801a022:	2b00      	cmp	r3, #0
 801a024:	d005      	beq.n	801a032 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a02a:	f043 0204 	orr.w	r2, r3, #4
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	2200      	movs	r2, #0
 801a036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	2200      	movs	r2, #0
 801a03c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	2200      	movs	r2, #0
 801a044:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d010      	beq.n	801a070 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a052:	4619      	mov	r1, r3
 801a054:	6878      	ldr	r0, [r7, #4]
 801a056:	f000 f89b 	bl	801a190 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a060:	b2db      	uxtb	r3, r3
 801a062:	2b28      	cmp	r3, #40	; 0x28
 801a064:	d138      	bne.n	801a0d8 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801a066:	68f9      	ldr	r1, [r7, #12]
 801a068:	6878      	ldr	r0, [r7, #4]
 801a06a:	f000 f83d 	bl	801a0e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801a06e:	e033      	b.n	801a0d8 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a074:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801a078:	d011      	beq.n	801a09e <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 801a07a:	6878      	ldr	r0, [r7, #4]
 801a07c:	f7ff fe85 	bl	8019d8a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	4a18      	ldr	r2, [pc, #96]	; (801a0e4 <I2C_ITSlaveCplt+0x1a8>)
 801a084:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	2220      	movs	r2, #32
 801a08a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	2200      	movs	r2, #0
 801a092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801a096:	6878      	ldr	r0, [r7, #4]
 801a098:	f7ff f94a 	bl	8019330 <HAL_I2C_ListenCpltCallback>
}
 801a09c:	e01c      	b.n	801a0d8 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a0a4:	b2db      	uxtb	r3, r3
 801a0a6:	2b22      	cmp	r3, #34	; 0x22
 801a0a8:	d10b      	bne.n	801a0c2 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	2220      	movs	r2, #32
 801a0ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	2200      	movs	r2, #0
 801a0b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801a0ba:	6878      	ldr	r0, [r7, #4]
 801a0bc:	f7ff f920 	bl	8019300 <HAL_I2C_SlaveRxCpltCallback>
}
 801a0c0:	e00a      	b.n	801a0d8 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	2220      	movs	r2, #32
 801a0c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801a0d2:	6878      	ldr	r0, [r7, #4]
 801a0d4:	f7ff f90a 	bl	80192ec <HAL_I2C_SlaveTxCpltCallback>
}
 801a0d8:	bf00      	nop
 801a0da:	3710      	adds	r7, #16
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	bd80      	pop	{r7, pc}
 801a0e0:	fe00e800 	.word	0xfe00e800
 801a0e4:	ffff0000 	.word	0xffff0000

0801a0e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801a0e8:	b580      	push	{r7, lr}
 801a0ea:	b082      	sub	sp, #8
 801a0ec:	af00      	add	r7, sp, #0
 801a0ee:	6078      	str	r0, [r7, #4]
 801a0f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	4a25      	ldr	r2, [pc, #148]	; (801a18c <I2C_ITListenCplt+0xa4>)
 801a0f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	2200      	movs	r2, #0
 801a0fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	2220      	movs	r2, #32
 801a102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	2200      	movs	r2, #0
 801a10a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	2200      	movs	r2, #0
 801a112:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801a114:	683b      	ldr	r3, [r7, #0]
 801a116:	089b      	lsrs	r3, r3, #2
 801a118:	f003 0301 	and.w	r3, r3, #1
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d022      	beq.n	801a166 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a12a:	b2d2      	uxtb	r2, r2
 801a12c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a132:	1c5a      	adds	r2, r3, #1
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d012      	beq.n	801a166 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a144:	3b01      	subs	r3, #1
 801a146:	b29a      	uxth	r2, r3
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a150:	b29b      	uxth	r3, r3
 801a152:	3b01      	subs	r3, #1
 801a154:	b29a      	uxth	r2, r3
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a15e:	f043 0204 	orr.w	r2, r3, #4
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a166:	2107      	movs	r1, #7
 801a168:	6878      	ldr	r0, [r7, #4]
 801a16a:	f000 fb43 	bl	801a7f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	2210      	movs	r2, #16
 801a174:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	2200      	movs	r2, #0
 801a17a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801a17e:	6878      	ldr	r0, [r7, #4]
 801a180:	f7ff f8d6 	bl	8019330 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801a184:	bf00      	nop
 801a186:	3708      	adds	r7, #8
 801a188:	46bd      	mov	sp, r7
 801a18a:	bd80      	pop	{r7, pc}
 801a18c:	ffff0000 	.word	0xffff0000

0801a190 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801a190:	b580      	push	{r7, lr}
 801a192:	b084      	sub	sp, #16
 801a194:	af00      	add	r7, sp, #0
 801a196:	6078      	str	r0, [r7, #4]
 801a198:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a1a0:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	4a55      	ldr	r2, [pc, #340]	; (801a304 <I2C_ITError+0x174>)
 801a1ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a1ba:	683b      	ldr	r3, [r7, #0]
 801a1bc:	431a      	orrs	r2, r3
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801a1c2:	7bfb      	ldrb	r3, [r7, #15]
 801a1c4:	2b28      	cmp	r3, #40	; 0x28
 801a1c6:	d005      	beq.n	801a1d4 <I2C_ITError+0x44>
 801a1c8:	7bfb      	ldrb	r3, [r7, #15]
 801a1ca:	2b29      	cmp	r3, #41	; 0x29
 801a1cc:	d002      	beq.n	801a1d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801a1ce:	7bfb      	ldrb	r3, [r7, #15]
 801a1d0:	2b2a      	cmp	r3, #42	; 0x2a
 801a1d2:	d10e      	bne.n	801a1f2 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a1d4:	2103      	movs	r1, #3
 801a1d6:	6878      	ldr	r0, [r7, #4]
 801a1d8:	f000 fb0c 	bl	801a7f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	2228      	movs	r2, #40	; 0x28
 801a1e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	4a46      	ldr	r2, [pc, #280]	; (801a308 <I2C_ITError+0x178>)
 801a1ee:	635a      	str	r2, [r3, #52]	; 0x34
 801a1f0:	e013      	b.n	801a21a <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a1f2:	2107      	movs	r1, #7
 801a1f4:	6878      	ldr	r0, [r7, #4]
 801a1f6:	f000 fafd 	bl	801a7f4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a200:	b2db      	uxtb	r3, r3
 801a202:	2b60      	cmp	r3, #96	; 0x60
 801a204:	d003      	beq.n	801a20e <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	2220      	movs	r2, #32
 801a20a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	2200      	movs	r2, #0
 801a212:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	2200      	movs	r2, #0
 801a218:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a228:	d123      	bne.n	801a272 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	681a      	ldr	r2, [r3, #0]
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a238:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d05c      	beq.n	801a2fc <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a246:	4a31      	ldr	r2, [pc, #196]	; (801a30c <I2C_ITError+0x17c>)
 801a248:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	2200      	movs	r2, #0
 801a24e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a256:	4618      	mov	r0, r3
 801a258:	f7fd fecc 	bl	8017ff4 <HAL_DMA_Abort_IT>
 801a25c:	4603      	mov	r3, r0
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d04c      	beq.n	801a2fc <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a268:	687a      	ldr	r2, [r7, #4]
 801a26a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801a26c:	4610      	mov	r0, r2
 801a26e:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801a270:	e044      	b.n	801a2fc <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a27c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a280:	d123      	bne.n	801a2ca <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	681a      	ldr	r2, [r3, #0]
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a290:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a296:	2b00      	cmp	r3, #0
 801a298:	d030      	beq.n	801a2fc <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a29e:	4a1b      	ldr	r2, [pc, #108]	; (801a30c <I2C_ITError+0x17c>)
 801a2a0:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	2200      	movs	r2, #0
 801a2a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	f7fd fea0 	bl	8017ff4 <HAL_DMA_Abort_IT>
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d020      	beq.n	801a2fc <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2c0:	687a      	ldr	r2, [r7, #4]
 801a2c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801a2c4:	4610      	mov	r0, r2
 801a2c6:	4798      	blx	r3
}
 801a2c8:	e018      	b.n	801a2fc <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a2d0:	b2db      	uxtb	r3, r3
 801a2d2:	2b60      	cmp	r3, #96	; 0x60
 801a2d4:	d10b      	bne.n	801a2ee <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	2220      	movs	r2, #32
 801a2da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	2200      	movs	r2, #0
 801a2e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 801a2e6:	6878      	ldr	r0, [r7, #4]
 801a2e8:	f7ff f84a 	bl	8019380 <HAL_I2C_AbortCpltCallback>
}
 801a2ec:	e006      	b.n	801a2fc <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	2200      	movs	r2, #0
 801a2f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 801a2f6:	6878      	ldr	r0, [r7, #4]
 801a2f8:	f7ff f838 	bl	801936c <HAL_I2C_ErrorCallback>
}
 801a2fc:	bf00      	nop
 801a2fe:	3710      	adds	r7, #16
 801a300:	46bd      	mov	sp, r7
 801a302:	bd80      	pop	{r7, pc}
 801a304:	ffff0000 	.word	0xffff0000
 801a308:	080195e7 	.word	0x080195e7
 801a30c:	0801a359 	.word	0x0801a359

0801a310 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801a310:	b480      	push	{r7}
 801a312:	b083      	sub	sp, #12
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	699b      	ldr	r3, [r3, #24]
 801a31e:	f003 0302 	and.w	r3, r3, #2
 801a322:	2b02      	cmp	r3, #2
 801a324:	d103      	bne.n	801a32e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	2200      	movs	r2, #0
 801a32c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	699b      	ldr	r3, [r3, #24]
 801a334:	f003 0301 	and.w	r3, r3, #1
 801a338:	2b01      	cmp	r3, #1
 801a33a:	d007      	beq.n	801a34c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	699a      	ldr	r2, [r3, #24]
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	f042 0201 	orr.w	r2, r2, #1
 801a34a:	619a      	str	r2, [r3, #24]
  }
}
 801a34c:	bf00      	nop
 801a34e:	370c      	adds	r7, #12
 801a350:	46bd      	mov	sp, r7
 801a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a356:	4770      	bx	lr

0801a358 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801a358:	b580      	push	{r7, lr}
 801a35a:	b084      	sub	sp, #16
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a364:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a36a:	2200      	movs	r2, #0
 801a36c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a372:	2200      	movs	r2, #0
 801a374:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a37c:	b2db      	uxtb	r3, r3
 801a37e:	2b60      	cmp	r3, #96	; 0x60
 801a380:	d107      	bne.n	801a392 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	2220      	movs	r2, #32
 801a386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801a38a:	68f8      	ldr	r0, [r7, #12]
 801a38c:	f7fe fff8 	bl	8019380 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801a390:	e002      	b.n	801a398 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 801a392:	68f8      	ldr	r0, [r7, #12]
 801a394:	f7fe ffea 	bl	801936c <HAL_I2C_ErrorCallback>
}
 801a398:	bf00      	nop
 801a39a:	3710      	adds	r7, #16
 801a39c:	46bd      	mov	sp, r7
 801a39e:	bd80      	pop	{r7, pc}

0801a3a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801a3a0:	b580      	push	{r7, lr}
 801a3a2:	b084      	sub	sp, #16
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	60f8      	str	r0, [r7, #12]
 801a3a8:	60b9      	str	r1, [r7, #8]
 801a3aa:	603b      	str	r3, [r7, #0]
 801a3ac:	4613      	mov	r3, r2
 801a3ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a3b0:	e022      	b.n	801a3f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a3b2:	683b      	ldr	r3, [r7, #0]
 801a3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a3b8:	d01e      	beq.n	801a3f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a3ba:	f7fb ff0f 	bl	80161dc <HAL_GetTick>
 801a3be:	4602      	mov	r2, r0
 801a3c0:	69bb      	ldr	r3, [r7, #24]
 801a3c2:	1ad3      	subs	r3, r2, r3
 801a3c4:	683a      	ldr	r2, [r7, #0]
 801a3c6:	429a      	cmp	r2, r3
 801a3c8:	d302      	bcc.n	801a3d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d113      	bne.n	801a3f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3d4:	f043 0220 	orr.w	r2, r3, #32
 801a3d8:	68fb      	ldr	r3, [r7, #12]
 801a3da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	2220      	movs	r2, #32
 801a3e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	2200      	movs	r2, #0
 801a3e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	2200      	movs	r2, #0
 801a3f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801a3f4:	2301      	movs	r3, #1
 801a3f6:	e00f      	b.n	801a418 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	699a      	ldr	r2, [r3, #24]
 801a3fe:	68bb      	ldr	r3, [r7, #8]
 801a400:	4013      	ands	r3, r2
 801a402:	68ba      	ldr	r2, [r7, #8]
 801a404:	429a      	cmp	r2, r3
 801a406:	bf0c      	ite	eq
 801a408:	2301      	moveq	r3, #1
 801a40a:	2300      	movne	r3, #0
 801a40c:	b2db      	uxtb	r3, r3
 801a40e:	461a      	mov	r2, r3
 801a410:	79fb      	ldrb	r3, [r7, #7]
 801a412:	429a      	cmp	r2, r3
 801a414:	d0cd      	beq.n	801a3b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801a416:	2300      	movs	r3, #0
}
 801a418:	4618      	mov	r0, r3
 801a41a:	3710      	adds	r7, #16
 801a41c:	46bd      	mov	sp, r7
 801a41e:	bd80      	pop	{r7, pc}

0801a420 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a420:	b580      	push	{r7, lr}
 801a422:	b084      	sub	sp, #16
 801a424:	af00      	add	r7, sp, #0
 801a426:	60f8      	str	r0, [r7, #12]
 801a428:	60b9      	str	r1, [r7, #8]
 801a42a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801a42c:	e02c      	b.n	801a488 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801a42e:	687a      	ldr	r2, [r7, #4]
 801a430:	68b9      	ldr	r1, [r7, #8]
 801a432:	68f8      	ldr	r0, [r7, #12]
 801a434:	f000 f8dc 	bl	801a5f0 <I2C_IsAcknowledgeFailed>
 801a438:	4603      	mov	r3, r0
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d001      	beq.n	801a442 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801a43e:	2301      	movs	r3, #1
 801a440:	e02a      	b.n	801a498 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a442:	68bb      	ldr	r3, [r7, #8]
 801a444:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a448:	d01e      	beq.n	801a488 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a44a:	f7fb fec7 	bl	80161dc <HAL_GetTick>
 801a44e:	4602      	mov	r2, r0
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	1ad3      	subs	r3, r2, r3
 801a454:	68ba      	ldr	r2, [r7, #8]
 801a456:	429a      	cmp	r2, r3
 801a458:	d302      	bcc.n	801a460 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801a45a:	68bb      	ldr	r3, [r7, #8]
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d113      	bne.n	801a488 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a464:	f043 0220 	orr.w	r2, r3, #32
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	2220      	movs	r2, #32
 801a470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	2200      	movs	r2, #0
 801a478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	2200      	movs	r2, #0
 801a480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801a484:	2301      	movs	r3, #1
 801a486:	e007      	b.n	801a498 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	699b      	ldr	r3, [r3, #24]
 801a48e:	f003 0302 	and.w	r3, r3, #2
 801a492:	2b02      	cmp	r3, #2
 801a494:	d1cb      	bne.n	801a42e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a496:	2300      	movs	r3, #0
}
 801a498:	4618      	mov	r0, r3
 801a49a:	3710      	adds	r7, #16
 801a49c:	46bd      	mov	sp, r7
 801a49e:	bd80      	pop	{r7, pc}

0801a4a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b084      	sub	sp, #16
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	60f8      	str	r0, [r7, #12]
 801a4a8:	60b9      	str	r1, [r7, #8]
 801a4aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a4ac:	e028      	b.n	801a500 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801a4ae:	687a      	ldr	r2, [r7, #4]
 801a4b0:	68b9      	ldr	r1, [r7, #8]
 801a4b2:	68f8      	ldr	r0, [r7, #12]
 801a4b4:	f000 f89c 	bl	801a5f0 <I2C_IsAcknowledgeFailed>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d001      	beq.n	801a4c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801a4be:	2301      	movs	r3, #1
 801a4c0:	e026      	b.n	801a510 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a4c2:	f7fb fe8b 	bl	80161dc <HAL_GetTick>
 801a4c6:	4602      	mov	r2, r0
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	1ad3      	subs	r3, r2, r3
 801a4cc:	68ba      	ldr	r2, [r7, #8]
 801a4ce:	429a      	cmp	r2, r3
 801a4d0:	d302      	bcc.n	801a4d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801a4d2:	68bb      	ldr	r3, [r7, #8]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d113      	bne.n	801a500 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4dc:	f043 0220 	orr.w	r2, r3, #32
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	2220      	movs	r2, #32
 801a4e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	2200      	movs	r2, #0
 801a4f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801a4fc:	2301      	movs	r3, #1
 801a4fe:	e007      	b.n	801a510 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	699b      	ldr	r3, [r3, #24]
 801a506:	f003 0320 	and.w	r3, r3, #32
 801a50a:	2b20      	cmp	r3, #32
 801a50c:	d1cf      	bne.n	801a4ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801a50e:	2300      	movs	r3, #0
}
 801a510:	4618      	mov	r0, r3
 801a512:	3710      	adds	r7, #16
 801a514:	46bd      	mov	sp, r7
 801a516:	bd80      	pop	{r7, pc}

0801a518 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a518:	b580      	push	{r7, lr}
 801a51a:	b084      	sub	sp, #16
 801a51c:	af00      	add	r7, sp, #0
 801a51e:	60f8      	str	r0, [r7, #12]
 801a520:	60b9      	str	r1, [r7, #8]
 801a522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a524:	e055      	b.n	801a5d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801a526:	687a      	ldr	r2, [r7, #4]
 801a528:	68b9      	ldr	r1, [r7, #8]
 801a52a:	68f8      	ldr	r0, [r7, #12]
 801a52c:	f000 f860 	bl	801a5f0 <I2C_IsAcknowledgeFailed>
 801a530:	4603      	mov	r3, r0
 801a532:	2b00      	cmp	r3, #0
 801a534:	d001      	beq.n	801a53a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801a536:	2301      	movs	r3, #1
 801a538:	e053      	b.n	801a5e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	699b      	ldr	r3, [r3, #24]
 801a540:	f003 0320 	and.w	r3, r3, #32
 801a544:	2b20      	cmp	r3, #32
 801a546:	d129      	bne.n	801a59c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	699b      	ldr	r3, [r3, #24]
 801a54e:	f003 0304 	and.w	r3, r3, #4
 801a552:	2b04      	cmp	r3, #4
 801a554:	d105      	bne.n	801a562 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d001      	beq.n	801a562 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801a55e:	2300      	movs	r3, #0
 801a560:	e03f      	b.n	801a5e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	2220      	movs	r2, #32
 801a568:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801a56a:	68fb      	ldr	r3, [r7, #12]
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	6859      	ldr	r1, [r3, #4]
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	681a      	ldr	r2, [r3, #0]
 801a574:	4b1d      	ldr	r3, [pc, #116]	; (801a5ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 801a576:	400b      	ands	r3, r1
 801a578:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a57a:	68fb      	ldr	r3, [r7, #12]
 801a57c:	2200      	movs	r2, #0
 801a57e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	2220      	movs	r2, #32
 801a584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	2200      	movs	r2, #0
 801a58c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	2200      	movs	r2, #0
 801a594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801a598:	2301      	movs	r3, #1
 801a59a:	e022      	b.n	801a5e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a59c:	f7fb fe1e 	bl	80161dc <HAL_GetTick>
 801a5a0:	4602      	mov	r2, r0
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	1ad3      	subs	r3, r2, r3
 801a5a6:	68ba      	ldr	r2, [r7, #8]
 801a5a8:	429a      	cmp	r2, r3
 801a5aa:	d302      	bcc.n	801a5b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 801a5ac:	68bb      	ldr	r3, [r7, #8]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d10f      	bne.n	801a5d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a5b6:	f043 0220 	orr.w	r2, r3, #32
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	2220      	movs	r2, #32
 801a5c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	2200      	movs	r2, #0
 801a5ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801a5ce:	2301      	movs	r3, #1
 801a5d0:	e007      	b.n	801a5e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a5d2:	68fb      	ldr	r3, [r7, #12]
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	699b      	ldr	r3, [r3, #24]
 801a5d8:	f003 0304 	and.w	r3, r3, #4
 801a5dc:	2b04      	cmp	r3, #4
 801a5de:	d1a2      	bne.n	801a526 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801a5e0:	2300      	movs	r3, #0
}
 801a5e2:	4618      	mov	r0, r3
 801a5e4:	3710      	adds	r7, #16
 801a5e6:	46bd      	mov	sp, r7
 801a5e8:	bd80      	pop	{r7, pc}
 801a5ea:	bf00      	nop
 801a5ec:	fe00e800 	.word	0xfe00e800

0801a5f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a5f0:	b580      	push	{r7, lr}
 801a5f2:	b084      	sub	sp, #16
 801a5f4:	af00      	add	r7, sp, #0
 801a5f6:	60f8      	str	r0, [r7, #12]
 801a5f8:	60b9      	str	r1, [r7, #8]
 801a5fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	699b      	ldr	r3, [r3, #24]
 801a602:	f003 0310 	and.w	r3, r3, #16
 801a606:	2b10      	cmp	r3, #16
 801a608:	d151      	bne.n	801a6ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a60a:	e022      	b.n	801a652 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801a60c:	68bb      	ldr	r3, [r7, #8]
 801a60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a612:	d01e      	beq.n	801a652 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a614:	f7fb fde2 	bl	80161dc <HAL_GetTick>
 801a618:	4602      	mov	r2, r0
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	1ad3      	subs	r3, r2, r3
 801a61e:	68ba      	ldr	r2, [r7, #8]
 801a620:	429a      	cmp	r2, r3
 801a622:	d302      	bcc.n	801a62a <I2C_IsAcknowledgeFailed+0x3a>
 801a624:	68bb      	ldr	r3, [r7, #8]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d113      	bne.n	801a652 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a62e:	f043 0220 	orr.w	r2, r3, #32
 801a632:	68fb      	ldr	r3, [r7, #12]
 801a634:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	2220      	movs	r2, #32
 801a63a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	2200      	movs	r2, #0
 801a642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	2200      	movs	r2, #0
 801a64a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 801a64e:	2301      	movs	r3, #1
 801a650:	e02e      	b.n	801a6b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	699b      	ldr	r3, [r3, #24]
 801a658:	f003 0320 	and.w	r3, r3, #32
 801a65c:	2b20      	cmp	r3, #32
 801a65e:	d1d5      	bne.n	801a60c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	2210      	movs	r2, #16
 801a666:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	2220      	movs	r2, #32
 801a66e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801a670:	68f8      	ldr	r0, [r7, #12]
 801a672:	f7ff fe4d 	bl	801a310 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	6859      	ldr	r1, [r3, #4]
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	681a      	ldr	r2, [r3, #0]
 801a680:	4b0d      	ldr	r3, [pc, #52]	; (801a6b8 <I2C_IsAcknowledgeFailed+0xc8>)
 801a682:	400b      	ands	r3, r1
 801a684:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a68a:	f043 0204 	orr.w	r2, r3, #4
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	2220      	movs	r2, #32
 801a696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	2200      	movs	r2, #0
 801a69e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801a6aa:	2301      	movs	r3, #1
 801a6ac:	e000      	b.n	801a6b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 801a6ae:	2300      	movs	r3, #0
}
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	3710      	adds	r7, #16
 801a6b4:	46bd      	mov	sp, r7
 801a6b6:	bd80      	pop	{r7, pc}
 801a6b8:	fe00e800 	.word	0xfe00e800

0801a6bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 801a6bc:	b480      	push	{r7}
 801a6be:	b085      	sub	sp, #20
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	60f8      	str	r0, [r7, #12]
 801a6c4:	607b      	str	r3, [r7, #4]
 801a6c6:	460b      	mov	r3, r1
 801a6c8:	817b      	strh	r3, [r7, #10]
 801a6ca:	4613      	mov	r3, r2
 801a6cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	685a      	ldr	r2, [r3, #4]
 801a6d4:	69bb      	ldr	r3, [r7, #24]
 801a6d6:	0d5b      	lsrs	r3, r3, #21
 801a6d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801a6dc:	4b0d      	ldr	r3, [pc, #52]	; (801a714 <I2C_TransferConfig+0x58>)
 801a6de:	430b      	orrs	r3, r1
 801a6e0:	43db      	mvns	r3, r3
 801a6e2:	ea02 0103 	and.w	r1, r2, r3
 801a6e6:	897b      	ldrh	r3, [r7, #10]
 801a6e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801a6ec:	7a7b      	ldrb	r3, [r7, #9]
 801a6ee:	041b      	lsls	r3, r3, #16
 801a6f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801a6f4:	431a      	orrs	r2, r3
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	431a      	orrs	r2, r3
 801a6fa:	69bb      	ldr	r3, [r7, #24]
 801a6fc:	431a      	orrs	r2, r3
 801a6fe:	68fb      	ldr	r3, [r7, #12]
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	430a      	orrs	r2, r1
 801a704:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 801a706:	bf00      	nop
 801a708:	3714      	adds	r7, #20
 801a70a:	46bd      	mov	sp, r7
 801a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a710:	4770      	bx	lr
 801a712:	bf00      	nop
 801a714:	03ff63ff 	.word	0x03ff63ff

0801a718 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801a718:	b480      	push	{r7}
 801a71a:	b085      	sub	sp, #20
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	6078      	str	r0, [r7, #4]
 801a720:	460b      	mov	r3, r1
 801a722:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801a724:	2300      	movs	r3, #0
 801a726:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a72c:	4a2f      	ldr	r2, [pc, #188]	; (801a7ec <I2C_Enable_IRQ+0xd4>)
 801a72e:	4293      	cmp	r3, r2
 801a730:	d004      	beq.n	801a73c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 801a736:	4a2e      	ldr	r2, [pc, #184]	; (801a7f0 <I2C_Enable_IRQ+0xd8>)
 801a738:	4293      	cmp	r3, r2
 801a73a:	d124      	bne.n	801a786 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801a73c:	887b      	ldrh	r3, [r7, #2]
 801a73e:	f003 0304 	and.w	r3, r3, #4
 801a742:	2b00      	cmp	r3, #0
 801a744:	d003      	beq.n	801a74e <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801a74c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 801a74e:	887b      	ldrh	r3, [r7, #2]
 801a750:	f003 0311 	and.w	r3, r3, #17
 801a754:	2b11      	cmp	r3, #17
 801a756:	d103      	bne.n	801a760 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801a75e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 801a760:	887b      	ldrh	r3, [r7, #2]
 801a762:	f003 0312 	and.w	r3, r3, #18
 801a766:	2b12      	cmp	r3, #18
 801a768:	d103      	bne.n	801a772 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801a76a:	68fb      	ldr	r3, [r7, #12]
 801a76c:	f043 0320 	orr.w	r3, r3, #32
 801a770:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 801a772:	887b      	ldrh	r3, [r7, #2]
 801a774:	f003 0312 	and.w	r3, r3, #18
 801a778:	2b12      	cmp	r3, #18
 801a77a:	d128      	bne.n	801a7ce <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a782:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 801a784:	e023      	b.n	801a7ce <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801a786:	887b      	ldrh	r3, [r7, #2]
 801a788:	f003 0304 	and.w	r3, r3, #4
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d003      	beq.n	801a798 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801a796:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801a798:	887b      	ldrh	r3, [r7, #2]
 801a79a:	f003 0301 	and.w	r3, r3, #1
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d003      	beq.n	801a7aa <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 801a7a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801a7aa:	887b      	ldrh	r3, [r7, #2]
 801a7ac:	f003 0302 	and.w	r3, r3, #2
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d003      	beq.n	801a7bc <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 801a7ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 801a7bc:	887b      	ldrh	r3, [r7, #2]
 801a7be:	f003 0312 	and.w	r3, r3, #18
 801a7c2:	2b12      	cmp	r3, #18
 801a7c4:	d103      	bne.n	801a7ce <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	f043 0320 	orr.w	r3, r3, #32
 801a7cc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	6819      	ldr	r1, [r3, #0]
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	68fa      	ldr	r2, [r7, #12]
 801a7da:	430a      	orrs	r2, r1
 801a7dc:	601a      	str	r2, [r3, #0]
}
 801a7de:	bf00      	nop
 801a7e0:	3714      	adds	r7, #20
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e8:	4770      	bx	lr
 801a7ea:	bf00      	nop
 801a7ec:	080197ed 	.word	0x080197ed
 801a7f0:	080199d3 	.word	0x080199d3

0801a7f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801a7f4:	b480      	push	{r7}
 801a7f6:	b085      	sub	sp, #20
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	6078      	str	r0, [r7, #4]
 801a7fc:	460b      	mov	r3, r1
 801a7fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801a800:	2300      	movs	r3, #0
 801a802:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801a804:	887b      	ldrh	r3, [r7, #2]
 801a806:	f003 0301 	and.w	r3, r3, #1
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d00f      	beq.n	801a82e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801a80e:	68fb      	ldr	r3, [r7, #12]
 801a810:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 801a814:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a81c:	b2db      	uxtb	r3, r3
 801a81e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801a822:	2b28      	cmp	r3, #40	; 0x28
 801a824:	d003      	beq.n	801a82e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801a82c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801a82e:	887b      	ldrh	r3, [r7, #2]
 801a830:	f003 0302 	and.w	r3, r3, #2
 801a834:	2b00      	cmp	r3, #0
 801a836:	d00f      	beq.n	801a858 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801a838:	68fb      	ldr	r3, [r7, #12]
 801a83a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 801a83e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a846:	b2db      	uxtb	r3, r3
 801a848:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801a84c:	2b28      	cmp	r3, #40	; 0x28
 801a84e:	d003      	beq.n	801a858 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801a856:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801a858:	887b      	ldrh	r3, [r7, #2]
 801a85a:	f003 0304 	and.w	r3, r3, #4
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d003      	beq.n	801a86a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801a868:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 801a86a:	887b      	ldrh	r3, [r7, #2]
 801a86c:	f003 0311 	and.w	r3, r3, #17
 801a870:	2b11      	cmp	r3, #17
 801a872:	d103      	bne.n	801a87c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801a87a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 801a87c:	887b      	ldrh	r3, [r7, #2]
 801a87e:	f003 0312 	and.w	r3, r3, #18
 801a882:	2b12      	cmp	r3, #18
 801a884:	d103      	bne.n	801a88e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	f043 0320 	orr.w	r3, r3, #32
 801a88c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 801a88e:	887b      	ldrh	r3, [r7, #2]
 801a890:	f003 0312 	and.w	r3, r3, #18
 801a894:	2b12      	cmp	r3, #18
 801a896:	d103      	bne.n	801a8a0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a89e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	6819      	ldr	r1, [r3, #0]
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	43da      	mvns	r2, r3
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	400a      	ands	r2, r1
 801a8b0:	601a      	str	r2, [r3, #0]
}
 801a8b2:	bf00      	nop
 801a8b4:	3714      	adds	r7, #20
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8bc:	4770      	bx	lr

0801a8be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801a8be:	b480      	push	{r7}
 801a8c0:	b083      	sub	sp, #12
 801a8c2:	af00      	add	r7, sp, #0
 801a8c4:	6078      	str	r0, [r7, #4]
 801a8c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a8ce:	b2db      	uxtb	r3, r3
 801a8d0:	2b20      	cmp	r3, #32
 801a8d2:	d138      	bne.n	801a946 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a8da:	2b01      	cmp	r3, #1
 801a8dc:	d101      	bne.n	801a8e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801a8de:	2302      	movs	r3, #2
 801a8e0:	e032      	b.n	801a948 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	2201      	movs	r2, #1
 801a8e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	2224      	movs	r2, #36	; 0x24
 801a8ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	681a      	ldr	r2, [r3, #0]
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	f022 0201 	bic.w	r2, r2, #1
 801a900:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	681a      	ldr	r2, [r3, #0]
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a910:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	6819      	ldr	r1, [r3, #0]
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	683a      	ldr	r2, [r7, #0]
 801a91e:	430a      	orrs	r2, r1
 801a920:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	681a      	ldr	r2, [r3, #0]
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	f042 0201 	orr.w	r2, r2, #1
 801a930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	2220      	movs	r2, #32
 801a936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	2200      	movs	r2, #0
 801a93e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801a942:	2300      	movs	r3, #0
 801a944:	e000      	b.n	801a948 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801a946:	2302      	movs	r3, #2
  }
}
 801a948:	4618      	mov	r0, r3
 801a94a:	370c      	adds	r7, #12
 801a94c:	46bd      	mov	sp, r7
 801a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a952:	4770      	bx	lr

0801a954 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801a954:	b480      	push	{r7}
 801a956:	b085      	sub	sp, #20
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
 801a95c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a964:	b2db      	uxtb	r3, r3
 801a966:	2b20      	cmp	r3, #32
 801a968:	d139      	bne.n	801a9de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a970:	2b01      	cmp	r3, #1
 801a972:	d101      	bne.n	801a978 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801a974:	2302      	movs	r3, #2
 801a976:	e033      	b.n	801a9e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	2201      	movs	r2, #1
 801a97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	2224      	movs	r2, #36	; 0x24
 801a984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	681a      	ldr	r2, [r3, #0]
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	f022 0201 	bic.w	r2, r2, #1
 801a996:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801a9a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801a9a8:	683b      	ldr	r3, [r7, #0]
 801a9aa:	021b      	lsls	r3, r3, #8
 801a9ac:	68fa      	ldr	r2, [r7, #12]
 801a9ae:	4313      	orrs	r3, r2
 801a9b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	68fa      	ldr	r2, [r7, #12]
 801a9b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	681a      	ldr	r2, [r3, #0]
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	f042 0201 	orr.w	r2, r2, #1
 801a9c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2220      	movs	r2, #32
 801a9ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	2200      	movs	r2, #0
 801a9d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801a9da:	2300      	movs	r3, #0
 801a9dc:	e000      	b.n	801a9e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801a9de:	2302      	movs	r3, #2
  }
}
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	3714      	adds	r7, #20
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ea:	4770      	bx	lr

0801a9ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801a9ec:	b480      	push	{r7}
 801a9ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801a9f0:	4b05      	ldr	r3, [pc, #20]	; (801aa08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	4a04      	ldr	r2, [pc, #16]	; (801aa08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801a9f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a9fa:	6013      	str	r3, [r2, #0]
}
 801a9fc:	bf00      	nop
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa04:	4770      	bx	lr
 801aa06:	bf00      	nop
 801aa08:	58000400 	.word	0x58000400

0801aa0c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as 
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b082      	sub	sp, #8
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	6078      	str	r0, [r7, #4]
 801aa14:	460b      	mov	r3, r1
 801aa16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d10c      	bne.n	801aa38 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 801aa1e:	4b13      	ldr	r3, [pc, #76]	; (801aa6c <HAL_PWR_EnterSLEEPMode+0x60>)
 801aa20:	695b      	ldr	r3, [r3, #20]
 801aa22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801aa26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aa2a:	d10e      	bne.n	801aa4a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 801aa2c:	f000 f840 	bl	801aab0 <HAL_PWREx_DisableLowPowerRunMode>
 801aa30:	4603      	mov	r3, r0
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d009      	beq.n	801aa4a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 801aa36:	e016      	b.n	801aa66 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 801aa38:	4b0c      	ldr	r3, [pc, #48]	; (801aa6c <HAL_PWR_EnterSLEEPMode+0x60>)
 801aa3a:	695b      	ldr	r3, [r3, #20]
 801aa3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801aa40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aa44:	d001      	beq.n	801aa4a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();  
 801aa46:	f000 f823 	bl	801aa90 <HAL_PWREx_EnableLowPowerRunMode>
    } 
  } 
    
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801aa4a:	4b09      	ldr	r3, [pc, #36]	; (801aa70 <HAL_PWR_EnterSLEEPMode+0x64>)
 801aa4c:	691b      	ldr	r3, [r3, #16]
 801aa4e:	4a08      	ldr	r2, [pc, #32]	; (801aa70 <HAL_PWR_EnterSLEEPMode+0x64>)
 801aa50:	f023 0304 	bic.w	r3, r3, #4
 801aa54:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 801aa56:	78fb      	ldrb	r3, [r7, #3]
 801aa58:	2b01      	cmp	r3, #1
 801aa5a:	d101      	bne.n	801aa60 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801aa5c:	bf30      	wfi
 801aa5e:	e002      	b.n	801aa66 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801aa60:	bf40      	sev
    __WFE();
 801aa62:	bf20      	wfe
    __WFE();
 801aa64:	bf20      	wfe
  }
}
 801aa66:	3708      	adds	r7, #8
 801aa68:	46bd      	mov	sp, r7
 801aa6a:	bd80      	pop	{r7, pc}
 801aa6c:	58000400 	.word	0x58000400
 801aa70:	e000ed00 	.word	0xe000ed00

0801aa74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801aa74:	b480      	push	{r7}
 801aa76:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 801aa78:	4b04      	ldr	r3, [pc, #16]	; (801aa8c <HAL_PWREx_GetVoltageRange+0x18>)
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 801aa80:	4618      	mov	r0, r3
 801aa82:	46bd      	mov	sp, r7
 801aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa88:	4770      	bx	lr
 801aa8a:	bf00      	nop
 801aa8c:	58000400 	.word	0x58000400

0801aa90 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must 
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.     
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 801aa90:	b480      	push	{r7}
 801aa92:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR); 
 801aa94:	4b05      	ldr	r3, [pc, #20]	; (801aaac <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	4a04      	ldr	r2, [pc, #16]	; (801aaac <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 801aa9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801aa9e:	6013      	str	r3, [r2, #0]
}
 801aaa0:	bf00      	nop
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaa8:	4770      	bx	lr
 801aaaa:	bf00      	nop
 801aaac:	58000400 	.word	0x58000400

0801aab0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.   
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 801aab0:	b480      	push	{r7}
 801aab2:	b083      	sub	sp, #12
 801aab4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;
  
  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR); 
 801aab6:	4b17      	ldr	r3, [pc, #92]	; (801ab14 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	4a16      	ldr	r2, [pc, #88]	; (801ab14 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 801aabc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801aac0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000U));
 801aac2:	4b15      	ldr	r3, [pc, #84]	; (801ab18 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	4a15      	ldr	r2, [pc, #84]	; (801ab1c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 801aac8:	fba2 2303 	umull	r2, r3, r2, r3
 801aacc:	0c9b      	lsrs	r3, r3, #18
 801aace:	2232      	movs	r2, #50	; 0x32
 801aad0:	fb02 f303 	mul.w	r3, r2, r3
 801aad4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 801aad6:	e002      	b.n	801aade <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	3b01      	subs	r3, #1
 801aadc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 801aade:	4b0d      	ldr	r3, [pc, #52]	; (801ab14 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 801aae0:	695b      	ldr	r3, [r3, #20]
 801aae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801aae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aaea:	d102      	bne.n	801aaf2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d1f2      	bne.n	801aad8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 801aaf2:	4b08      	ldr	r3, [pc, #32]	; (801ab14 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 801aaf4:	695b      	ldr	r3, [r3, #20]
 801aaf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801aafa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aafe:	d101      	bne.n	801ab04 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 801ab00:	2303      	movs	r3, #3
 801ab02:	e000      	b.n	801ab06 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }
  
  return HAL_OK;
 801ab04:	2300      	movs	r3, #0
}
 801ab06:	4618      	mov	r0, r3
 801ab08:	370c      	adds	r7, #12
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab10:	4770      	bx	lr
 801ab12:	bf00      	nop
 801ab14:	58000400 	.word	0x58000400
 801ab18:	20000078 	.word	0x20000078
 801ab1c:	431bde83 	.word	0x431bde83

0801ab20 <LL_RCC_HSE_IsEnabledDiv2>:
{
 801ab20:	b480      	push	{r7}
 801ab22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 801ab24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ab2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ab32:	d101      	bne.n	801ab38 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 801ab34:	2301      	movs	r3, #1
 801ab36:	e000      	b.n	801ab3a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 801ab38:	2300      	movs	r3, #0
}
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	46bd      	mov	sp, r7
 801ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab42:	4770      	bx	lr

0801ab44 <LL_RCC_HSE_EnableBypass>:
{
 801ab44:	b480      	push	{r7}
 801ab46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 801ab48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ab52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801ab56:	6013      	str	r3, [r2, #0]
}
 801ab58:	bf00      	nop
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab60:	4770      	bx	lr

0801ab62 <LL_RCC_HSE_DisableBypass>:
{
 801ab62:	b480      	push	{r7}
 801ab64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 801ab66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ab70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801ab74:	6013      	str	r3, [r2, #0]
}
 801ab76:	bf00      	nop
 801ab78:	46bd      	mov	sp, r7
 801ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab7e:	4770      	bx	lr

0801ab80 <LL_RCC_HSE_Enable>:
{
 801ab80:	b480      	push	{r7}
 801ab82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 801ab84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ab8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ab92:	6013      	str	r3, [r2, #0]
}
 801ab94:	bf00      	nop
 801ab96:	46bd      	mov	sp, r7
 801ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab9c:	4770      	bx	lr

0801ab9e <LL_RCC_HSE_Disable>:
{
 801ab9e:	b480      	push	{r7}
 801aba0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801aba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801abac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801abb0:	6013      	str	r3, [r2, #0]
}
 801abb2:	bf00      	nop
 801abb4:	46bd      	mov	sp, r7
 801abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abba:	4770      	bx	lr

0801abbc <LL_RCC_HSE_IsReady>:
{
 801abbc:	b480      	push	{r7}
 801abbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801abc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801abca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801abce:	d101      	bne.n	801abd4 <LL_RCC_HSE_IsReady+0x18>
 801abd0:	2301      	movs	r3, #1
 801abd2:	e000      	b.n	801abd6 <LL_RCC_HSE_IsReady+0x1a>
 801abd4:	2300      	movs	r3, #0
}
 801abd6:	4618      	mov	r0, r3
 801abd8:	46bd      	mov	sp, r7
 801abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abde:	4770      	bx	lr

0801abe0 <LL_RCC_HSI_Enable>:
{
 801abe0:	b480      	push	{r7}
 801abe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801abe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801abee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801abf2:	6013      	str	r3, [r2, #0]
}
 801abf4:	bf00      	nop
 801abf6:	46bd      	mov	sp, r7
 801abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abfc:	4770      	bx	lr

0801abfe <LL_RCC_HSI_Disable>:
{
 801abfe:	b480      	push	{r7}
 801ac00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801ac02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ac0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ac10:	6013      	str	r3, [r2, #0]
}
 801ac12:	bf00      	nop
 801ac14:	46bd      	mov	sp, r7
 801ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac1a:	4770      	bx	lr

0801ac1c <LL_RCC_HSI_IsReady>:
{
 801ac1c:	b480      	push	{r7}
 801ac1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801ac20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ac2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac2e:	d101      	bne.n	801ac34 <LL_RCC_HSI_IsReady+0x18>
 801ac30:	2301      	movs	r3, #1
 801ac32:	e000      	b.n	801ac36 <LL_RCC_HSI_IsReady+0x1a>
 801ac34:	2300      	movs	r3, #0
}
 801ac36:	4618      	mov	r0, r3
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac3e:	4770      	bx	lr

0801ac40 <LL_RCC_HSI_SetCalibTrimming>:
{
 801ac40:	b480      	push	{r7}
 801ac42:	b083      	sub	sp, #12
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 801ac48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac4c:	685b      	ldr	r3, [r3, #4]
 801ac4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	061b      	lsls	r3, r3, #24
 801ac56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ac5a:	4313      	orrs	r3, r2
 801ac5c:	604b      	str	r3, [r1, #4]
}
 801ac5e:	bf00      	nop
 801ac60:	370c      	adds	r7, #12
 801ac62:	46bd      	mov	sp, r7
 801ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac68:	4770      	bx	lr

0801ac6a <LL_RCC_HSI48_Enable>:
{
 801ac6a:	b480      	push	{r7}
 801ac6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801ac6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ac76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ac7a:	f043 0301 	orr.w	r3, r3, #1
 801ac7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801ac82:	bf00      	nop
 801ac84:	46bd      	mov	sp, r7
 801ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac8a:	4770      	bx	lr

0801ac8c <LL_RCC_HSI48_Disable>:
{
 801ac8c:	b480      	push	{r7}
 801ac8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801ac90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ac98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ac9c:	f023 0301 	bic.w	r3, r3, #1
 801aca0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801aca4:	bf00      	nop
 801aca6:	46bd      	mov	sp, r7
 801aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acac:	4770      	bx	lr

0801acae <LL_RCC_HSI48_IsReady>:
{
 801acae:	b480      	push	{r7}
 801acb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801acb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801acb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801acba:	f003 0302 	and.w	r3, r3, #2
 801acbe:	2b02      	cmp	r3, #2
 801acc0:	d101      	bne.n	801acc6 <LL_RCC_HSI48_IsReady+0x18>
 801acc2:	2301      	movs	r3, #1
 801acc4:	e000      	b.n	801acc8 <LL_RCC_HSI48_IsReady+0x1a>
 801acc6:	2300      	movs	r3, #0
}
 801acc8:	4618      	mov	r0, r3
 801acca:	46bd      	mov	sp, r7
 801accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd0:	4770      	bx	lr

0801acd2 <LL_RCC_LSE_Enable>:
{
 801acd2:	b480      	push	{r7}
 801acd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801acd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801acda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801acde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ace2:	f043 0301 	orr.w	r3, r3, #1
 801ace6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801acea:	bf00      	nop
 801acec:	46bd      	mov	sp, r7
 801acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acf2:	4770      	bx	lr

0801acf4 <LL_RCC_LSE_Disable>:
{
 801acf4:	b480      	push	{r7}
 801acf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801acf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801acfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ad00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad04:	f023 0301 	bic.w	r3, r3, #1
 801ad08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801ad0c:	bf00      	nop
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad14:	4770      	bx	lr

0801ad16 <LL_RCC_LSE_EnableBypass>:
{
 801ad16:	b480      	push	{r7}
 801ad18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801ad1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ad22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad26:	f043 0304 	orr.w	r3, r3, #4
 801ad2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801ad2e:	bf00      	nop
 801ad30:	46bd      	mov	sp, r7
 801ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad36:	4770      	bx	lr

0801ad38 <LL_RCC_LSE_DisableBypass>:
{
 801ad38:	b480      	push	{r7}
 801ad3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801ad3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ad44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad48:	f023 0304 	bic.w	r3, r3, #4
 801ad4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801ad50:	bf00      	nop
 801ad52:	46bd      	mov	sp, r7
 801ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad58:	4770      	bx	lr

0801ad5a <LL_RCC_LSE_IsReady>:
{
 801ad5a:	b480      	push	{r7}
 801ad5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801ad5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ad66:	f003 0302 	and.w	r3, r3, #2
 801ad6a:	2b02      	cmp	r3, #2
 801ad6c:	d101      	bne.n	801ad72 <LL_RCC_LSE_IsReady+0x18>
 801ad6e:	2301      	movs	r3, #1
 801ad70:	e000      	b.n	801ad74 <LL_RCC_LSE_IsReady+0x1a>
 801ad72:	2300      	movs	r3, #0
}
 801ad74:	4618      	mov	r0, r3
 801ad76:	46bd      	mov	sp, r7
 801ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad7c:	4770      	bx	lr

0801ad7e <LL_RCC_LSI1_Enable>:
{
 801ad7e:	b480      	push	{r7}
 801ad80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801ad82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ad8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad8e:	f043 0301 	orr.w	r3, r3, #1
 801ad92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801ad96:	bf00      	nop
 801ad98:	46bd      	mov	sp, r7
 801ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad9e:	4770      	bx	lr

0801ada0 <LL_RCC_LSI1_Disable>:
{
 801ada0:	b480      	push	{r7}
 801ada2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801ada4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ada8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801adac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801adb0:	f023 0301 	bic.w	r3, r3, #1
 801adb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801adb8:	bf00      	nop
 801adba:	46bd      	mov	sp, r7
 801adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc0:	4770      	bx	lr

0801adc2 <LL_RCC_LSI1_IsReady>:
{
 801adc2:	b480      	push	{r7}
 801adc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801adc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801adca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801adce:	f003 0302 	and.w	r3, r3, #2
 801add2:	2b02      	cmp	r3, #2
 801add4:	d101      	bne.n	801adda <LL_RCC_LSI1_IsReady+0x18>
 801add6:	2301      	movs	r3, #1
 801add8:	e000      	b.n	801addc <LL_RCC_LSI1_IsReady+0x1a>
 801adda:	2300      	movs	r3, #0
}
 801addc:	4618      	mov	r0, r3
 801adde:	46bd      	mov	sp, r7
 801ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade4:	4770      	bx	lr

0801ade6 <LL_RCC_LSI2_Enable>:
{
 801ade6:	b480      	push	{r7}
 801ade8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801adea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801adee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801adf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801adf6:	f043 0304 	orr.w	r3, r3, #4
 801adfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801adfe:	bf00      	nop
 801ae00:	46bd      	mov	sp, r7
 801ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae06:	4770      	bx	lr

0801ae08 <LL_RCC_LSI2_Disable>:
{
 801ae08:	b480      	push	{r7}
 801ae0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801ae0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ae14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ae18:	f023 0304 	bic.w	r3, r3, #4
 801ae1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801ae20:	bf00      	nop
 801ae22:	46bd      	mov	sp, r7
 801ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae28:	4770      	bx	lr

0801ae2a <LL_RCC_LSI2_IsReady>:
{
 801ae2a:	b480      	push	{r7}
 801ae2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801ae2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ae36:	f003 0308 	and.w	r3, r3, #8
 801ae3a:	2b08      	cmp	r3, #8
 801ae3c:	d101      	bne.n	801ae42 <LL_RCC_LSI2_IsReady+0x18>
 801ae3e:	2301      	movs	r3, #1
 801ae40:	e000      	b.n	801ae44 <LL_RCC_LSI2_IsReady+0x1a>
 801ae42:	2300      	movs	r3, #0
}
 801ae44:	4618      	mov	r0, r3
 801ae46:	46bd      	mov	sp, r7
 801ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae4c:	4770      	bx	lr

0801ae4e <LL_RCC_LSI2_SetTrimming>:
{
 801ae4e:	b480      	push	{r7}
 801ae50:	b083      	sub	sp, #12
 801ae52:	af00      	add	r7, sp, #0
 801ae54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 801ae56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ae5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	021b      	lsls	r3, r3, #8
 801ae66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ae6a:	4313      	orrs	r3, r2
 801ae6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 801ae70:	bf00      	nop
 801ae72:	370c      	adds	r7, #12
 801ae74:	46bd      	mov	sp, r7
 801ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae7a:	4770      	bx	lr

0801ae7c <LL_RCC_MSI_Enable>:
{
 801ae7c:	b480      	push	{r7}
 801ae7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 801ae80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ae8a:	f043 0301 	orr.w	r3, r3, #1
 801ae8e:	6013      	str	r3, [r2, #0]
}
 801ae90:	bf00      	nop
 801ae92:	46bd      	mov	sp, r7
 801ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae98:	4770      	bx	lr

0801ae9a <LL_RCC_MSI_Disable>:
{
 801ae9a:	b480      	push	{r7}
 801ae9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 801ae9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801aea8:	f023 0301 	bic.w	r3, r3, #1
 801aeac:	6013      	str	r3, [r2, #0]
}
 801aeae:	bf00      	nop
 801aeb0:	46bd      	mov	sp, r7
 801aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeb6:	4770      	bx	lr

0801aeb8 <LL_RCC_MSI_IsReady>:
{
 801aeb8:	b480      	push	{r7}
 801aeba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 801aebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	f003 0302 	and.w	r3, r3, #2
 801aec6:	2b02      	cmp	r3, #2
 801aec8:	d101      	bne.n	801aece <LL_RCC_MSI_IsReady+0x16>
 801aeca:	2301      	movs	r3, #1
 801aecc:	e000      	b.n	801aed0 <LL_RCC_MSI_IsReady+0x18>
 801aece:	2300      	movs	r3, #0
}
 801aed0:	4618      	mov	r0, r3
 801aed2:	46bd      	mov	sp, r7
 801aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aed8:	4770      	bx	lr

0801aeda <LL_RCC_MSI_SetRange>:
{
 801aeda:	b480      	push	{r7}
 801aedc:	b083      	sub	sp, #12
 801aede:	af00      	add	r7, sp, #0
 801aee0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801aee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801aeec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	4313      	orrs	r3, r2
 801aef4:	600b      	str	r3, [r1, #0]
}
 801aef6:	bf00      	nop
 801aef8:	370c      	adds	r7, #12
 801aefa:	46bd      	mov	sp, r7
 801aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af00:	4770      	bx	lr

0801af02 <LL_RCC_MSI_GetRange>:
{
 801af02:	b480      	push	{r7}
 801af04:	b083      	sub	sp, #12
 801af06:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 801af08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801af12:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	2bb0      	cmp	r3, #176	; 0xb0
 801af18:	d901      	bls.n	801af1e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 801af1a:	23b0      	movs	r3, #176	; 0xb0
 801af1c:	607b      	str	r3, [r7, #4]
  return msiRange;
 801af1e:	687b      	ldr	r3, [r7, #4]
}
 801af20:	4618      	mov	r0, r3
 801af22:	370c      	adds	r7, #12
 801af24:	46bd      	mov	sp, r7
 801af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2a:	4770      	bx	lr

0801af2c <LL_RCC_MSI_SetCalibTrimming>:
{
 801af2c:	b480      	push	{r7}
 801af2e:	b083      	sub	sp, #12
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 801af34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af38:	685b      	ldr	r3, [r3, #4]
 801af3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	021b      	lsls	r3, r3, #8
 801af42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801af46:	4313      	orrs	r3, r2
 801af48:	604b      	str	r3, [r1, #4]
}
 801af4a:	bf00      	nop
 801af4c:	370c      	adds	r7, #12
 801af4e:	46bd      	mov	sp, r7
 801af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af54:	4770      	bx	lr

0801af56 <LL_RCC_SetSysClkSource>:
{
 801af56:	b480      	push	{r7}
 801af58:	b083      	sub	sp, #12
 801af5a:	af00      	add	r7, sp, #0
 801af5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 801af5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af62:	689b      	ldr	r3, [r3, #8]
 801af64:	f023 0203 	bic.w	r2, r3, #3
 801af68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	4313      	orrs	r3, r2
 801af70:	608b      	str	r3, [r1, #8]
}
 801af72:	bf00      	nop
 801af74:	370c      	adds	r7, #12
 801af76:	46bd      	mov	sp, r7
 801af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af7c:	4770      	bx	lr

0801af7e <LL_RCC_GetSysClkSource>:
{
 801af7e:	b480      	push	{r7}
 801af80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801af82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af86:	689b      	ldr	r3, [r3, #8]
 801af88:	f003 030c 	and.w	r3, r3, #12
}
 801af8c:	4618      	mov	r0, r3
 801af8e:	46bd      	mov	sp, r7
 801af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af94:	4770      	bx	lr

0801af96 <LL_RCC_SetAHBPrescaler>:
{
 801af96:	b480      	push	{r7}
 801af98:	b083      	sub	sp, #12
 801af9a:	af00      	add	r7, sp, #0
 801af9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 801af9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801afa2:	689b      	ldr	r3, [r3, #8]
 801afa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801afa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	4313      	orrs	r3, r2
 801afb0:	608b      	str	r3, [r1, #8]
}
 801afb2:	bf00      	nop
 801afb4:	370c      	adds	r7, #12
 801afb6:	46bd      	mov	sp, r7
 801afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afbc:	4770      	bx	lr

0801afbe <LL_C2_RCC_SetAHBPrescaler>:
{
 801afbe:	b480      	push	{r7}
 801afc0:	b083      	sub	sp, #12
 801afc2:	af00      	add	r7, sp, #0
 801afc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 801afc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801afca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801afce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801afd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	4313      	orrs	r3, r2
 801afda:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801afde:	bf00      	nop
 801afe0:	370c      	adds	r7, #12
 801afe2:	46bd      	mov	sp, r7
 801afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afe8:	4770      	bx	lr

0801afea <LL_RCC_SetAHB4Prescaler>:
{
 801afea:	b480      	push	{r7}
 801afec:	b083      	sub	sp, #12
 801afee:	af00      	add	r7, sp, #0
 801aff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801aff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aff6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801affa:	f023 020f 	bic.w	r2, r3, #15
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	091b      	lsrs	r3, r3, #4
 801b002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b006:	4313      	orrs	r3, r2
 801b008:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801b00c:	bf00      	nop
 801b00e:	370c      	adds	r7, #12
 801b010:	46bd      	mov	sp, r7
 801b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b016:	4770      	bx	lr

0801b018 <LL_RCC_SetAPB1Prescaler>:
{
 801b018:	b480      	push	{r7}
 801b01a:	b083      	sub	sp, #12
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801b020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b024:	689b      	ldr	r3, [r3, #8]
 801b026:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b02a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	4313      	orrs	r3, r2
 801b032:	608b      	str	r3, [r1, #8]
}
 801b034:	bf00      	nop
 801b036:	370c      	adds	r7, #12
 801b038:	46bd      	mov	sp, r7
 801b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b03e:	4770      	bx	lr

0801b040 <LL_RCC_SetAPB2Prescaler>:
{
 801b040:	b480      	push	{r7}
 801b042:	b083      	sub	sp, #12
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 801b048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b04c:	689b      	ldr	r3, [r3, #8]
 801b04e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801b052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	4313      	orrs	r3, r2
 801b05a:	608b      	str	r3, [r1, #8]
}
 801b05c:	bf00      	nop
 801b05e:	370c      	adds	r7, #12
 801b060:	46bd      	mov	sp, r7
 801b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b066:	4770      	bx	lr

0801b068 <LL_RCC_GetAHBPrescaler>:
{
 801b068:	b480      	push	{r7}
 801b06a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 801b06c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b070:	689b      	ldr	r3, [r3, #8]
 801b072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801b076:	4618      	mov	r0, r3
 801b078:	46bd      	mov	sp, r7
 801b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b07e:	4770      	bx	lr

0801b080 <LL_C2_RCC_GetAHBPrescaler>:
{
 801b080:	b480      	push	{r7}
 801b082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 801b084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b088:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b08c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801b090:	4618      	mov	r0, r3
 801b092:	46bd      	mov	sp, r7
 801b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b098:	4770      	bx	lr

0801b09a <LL_RCC_GetAHB4Prescaler>:
{
 801b09a:	b480      	push	{r7}
 801b09c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 801b09e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b0a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b0a6:	011b      	lsls	r3, r3, #4
 801b0a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801b0ac:	4618      	mov	r0, r3
 801b0ae:	46bd      	mov	sp, r7
 801b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0b4:	4770      	bx	lr

0801b0b6 <LL_RCC_GetAPB1Prescaler>:
{
 801b0b6:	b480      	push	{r7}
 801b0b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801b0ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b0be:	689b      	ldr	r3, [r3, #8]
 801b0c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0cc:	4770      	bx	lr

0801b0ce <LL_RCC_GetAPB2Prescaler>:
{
 801b0ce:	b480      	push	{r7}
 801b0d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801b0d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b0d6:	689b      	ldr	r3, [r3, #8]
 801b0d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 801b0dc:	4618      	mov	r0, r3
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0e4:	4770      	bx	lr

0801b0e6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 801b0e6:	b480      	push	{r7}
 801b0e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 801b0ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b0f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b0f8:	6013      	str	r3, [r2, #0]
}
 801b0fa:	bf00      	nop
 801b0fc:	46bd      	mov	sp, r7
 801b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b102:	4770      	bx	lr

0801b104 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 801b104:	b480      	push	{r7}
 801b106:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801b108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b116:	6013      	str	r3, [r2, #0]
}
 801b118:	bf00      	nop
 801b11a:	46bd      	mov	sp, r7
 801b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b120:	4770      	bx	lr

0801b122 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 801b122:	b480      	push	{r7}
 801b124:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 801b126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801b134:	d101      	bne.n	801b13a <LL_RCC_PLL_IsReady+0x18>
 801b136:	2301      	movs	r3, #1
 801b138:	e000      	b.n	801b13c <LL_RCC_PLL_IsReady+0x1a>
 801b13a:	2300      	movs	r3, #0
}
 801b13c:	4618      	mov	r0, r3
 801b13e:	46bd      	mov	sp, r7
 801b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b144:	4770      	bx	lr

0801b146 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 801b146:	b480      	push	{r7}
 801b148:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801b14a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b14e:	68db      	ldr	r3, [r3, #12]
 801b150:	0a1b      	lsrs	r3, r3, #8
 801b152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 801b156:	4618      	mov	r0, r3
 801b158:	46bd      	mov	sp, r7
 801b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b15e:	4770      	bx	lr

0801b160 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 801b160:	b480      	push	{r7}
 801b162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 801b164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b168:	68db      	ldr	r3, [r3, #12]
 801b16a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 801b16e:	4618      	mov	r0, r3
 801b170:	46bd      	mov	sp, r7
 801b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b176:	4770      	bx	lr

0801b178 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 801b178:	b480      	push	{r7}
 801b17a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 801b17c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b180:	68db      	ldr	r3, [r3, #12]
 801b182:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 801b186:	4618      	mov	r0, r3
 801b188:	46bd      	mov	sp, r7
 801b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b18e:	4770      	bx	lr

0801b190 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 801b190:	b480      	push	{r7}
 801b192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801b194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b198:	68db      	ldr	r3, [r3, #12]
 801b19a:	f003 0303 	and.w	r3, r3, #3
}
 801b19e:	4618      	mov	r0, r3
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1a6:	4770      	bx	lr

0801b1a8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 801b1a8:	b480      	push	{r7}
 801b1aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 801b1ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b1b0:	689b      	ldr	r3, [r3, #8]
 801b1b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b1b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b1ba:	d101      	bne.n	801b1c0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 801b1bc:	2301      	movs	r3, #1
 801b1be:	e000      	b.n	801b1c2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 801b1c0:	2300      	movs	r3, #0
}
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ca:	4770      	bx	lr

0801b1cc <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 801b1cc:	b480      	push	{r7}
 801b1ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 801b1d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b1d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b1d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b1dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b1e0:	d101      	bne.n	801b1e6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 801b1e2:	2301      	movs	r3, #1
 801b1e4:	e000      	b.n	801b1e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 801b1e6:	2300      	movs	r3, #0
}
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1f0:	4770      	bx	lr

0801b1f2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 801b1f2:	b480      	push	{r7}
 801b1f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 801b1f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b1fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b1fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b206:	d101      	bne.n	801b20c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 801b208:	2301      	movs	r3, #1
 801b20a:	e000      	b.n	801b20e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 801b20c:	2300      	movs	r3, #0
}
 801b20e:	4618      	mov	r0, r3
 801b210:	46bd      	mov	sp, r7
 801b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b216:	4770      	bx	lr

0801b218 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 801b218:	b480      	push	{r7}
 801b21a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 801b21c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b220:	689b      	ldr	r3, [r3, #8]
 801b222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b226:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b22a:	d101      	bne.n	801b230 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 801b22c:	2301      	movs	r3, #1
 801b22e:	e000      	b.n	801b232 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 801b230:	2300      	movs	r3, #0
}
 801b232:	4618      	mov	r0, r3
 801b234:	46bd      	mov	sp, r7
 801b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b23a:	4770      	bx	lr

0801b23c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 801b23c:	b480      	push	{r7}
 801b23e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 801b240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b244:	689b      	ldr	r3, [r3, #8]
 801b246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801b24a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801b24e:	d101      	bne.n	801b254 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 801b250:	2301      	movs	r3, #1
 801b252:	e000      	b.n	801b256 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 801b254:	2300      	movs	r3, #0
}
 801b256:	4618      	mov	r0, r3
 801b258:	46bd      	mov	sp, r7
 801b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b25e:	4770      	bx	lr

0801b260 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b260:	b590      	push	{r4, r7, lr}
 801b262:	b08b      	sub	sp, #44	; 0x2c
 801b264:	af00      	add	r7, sp, #0
 801b266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d101      	bne.n	801b272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801b26e:	2301      	movs	r3, #1
 801b270:	e34b      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	f003 0320 	and.w	r3, r3, #32
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	f000 808f 	beq.w	801b39e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b280:	f7ff fe7d 	bl	801af7e <LL_RCC_GetSysClkSource>
 801b284:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b286:	f7ff ff83 	bl	801b190 <LL_RCC_PLL_GetMainSource>
 801b28a:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d005      	beq.n	801b29e <HAL_RCC_OscConfig+0x3e>
 801b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b294:	2b0c      	cmp	r3, #12
 801b296:	d149      	bne.n	801b32c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 801b298:	6a3b      	ldr	r3, [r7, #32]
 801b29a:	2b01      	cmp	r3, #1
 801b29c:	d146      	bne.n	801b32c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b29e:	f7ff fe0b 	bl	801aeb8 <LL_RCC_MSI_IsReady>
 801b2a2:	4603      	mov	r3, r0
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d005      	beq.n	801b2b4 <HAL_RCC_OscConfig+0x54>
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	69db      	ldr	r3, [r3, #28]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d101      	bne.n	801b2b4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 801b2b0:	2301      	movs	r3, #1
 801b2b2:	e32a      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801b2b8:	f7ff fe23 	bl	801af02 <LL_RCC_MSI_GetRange>
 801b2bc:	4603      	mov	r3, r0
 801b2be:	429c      	cmp	r4, r3
 801b2c0:	d914      	bls.n	801b2ec <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f000 fd2a 	bl	801bd20 <RCC_SetFlashLatencyFromMSIRange>
 801b2cc:	4603      	mov	r3, r0
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d001      	beq.n	801b2d6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 801b2d2:	2301      	movs	r3, #1
 801b2d4:	e319      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f7ff fdfd 	bl	801aeda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	6a1b      	ldr	r3, [r3, #32]
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	f7ff fe21 	bl	801af2c <LL_RCC_MSI_SetCalibTrimming>
 801b2ea:	e013      	b.n	801b314 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	f7ff fdf2 	bl	801aeda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	6a1b      	ldr	r3, [r3, #32]
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	f7ff fe16 	bl	801af2c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b304:	4618      	mov	r0, r3
 801b306:	f000 fd0b 	bl	801bd20 <RCC_SetFlashLatencyFromMSIRange>
 801b30a:	4603      	mov	r3, r0
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d001      	beq.n	801b314 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 801b310:	2301      	movs	r3, #1
 801b312:	e2fa      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 801b314:	f7fa f8ec 	bl	80154f0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801b318:	4bb4      	ldr	r3, [pc, #720]	; (801b5ec <HAL_RCC_OscConfig+0x38c>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	4618      	mov	r0, r3
 801b31e:	f7f9 ffc1 	bl	80152a4 <HAL_InitTick>
 801b322:	4603      	mov	r3, r0
 801b324:	2b00      	cmp	r3, #0
 801b326:	d039      	beq.n	801b39c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 801b328:	2301      	movs	r3, #1
 801b32a:	e2ee      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	69db      	ldr	r3, [r3, #28]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d01e      	beq.n	801b372 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b334:	f7ff fda2 	bl	801ae7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801b338:	f7fa ff50 	bl	80161dc <HAL_GetTick>
 801b33c:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 801b33e:	e008      	b.n	801b352 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b340:	f7fa ff4c 	bl	80161dc <HAL_GetTick>
 801b344:	4602      	mov	r2, r0
 801b346:	69fb      	ldr	r3, [r7, #28]
 801b348:	1ad3      	subs	r3, r2, r3
 801b34a:	2b02      	cmp	r3, #2
 801b34c:	d901      	bls.n	801b352 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 801b34e:	2303      	movs	r3, #3
 801b350:	e2db      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 801b352:	f7ff fdb1 	bl	801aeb8 <LL_RCC_MSI_IsReady>
 801b356:	4603      	mov	r3, r0
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d0f1      	beq.n	801b340 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b360:	4618      	mov	r0, r3
 801b362:	f7ff fdba 	bl	801aeda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	6a1b      	ldr	r3, [r3, #32]
 801b36a:	4618      	mov	r0, r3
 801b36c:	f7ff fdde 	bl	801af2c <LL_RCC_MSI_SetCalibTrimming>
 801b370:	e015      	b.n	801b39e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b372:	f7ff fd92 	bl	801ae9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801b376:	f7fa ff31 	bl	80161dc <HAL_GetTick>
 801b37a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 801b37c:	e008      	b.n	801b390 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b37e:	f7fa ff2d 	bl	80161dc <HAL_GetTick>
 801b382:	4602      	mov	r2, r0
 801b384:	69fb      	ldr	r3, [r7, #28]
 801b386:	1ad3      	subs	r3, r2, r3
 801b388:	2b02      	cmp	r3, #2
 801b38a:	d901      	bls.n	801b390 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 801b38c:	2303      	movs	r3, #3
 801b38e:	e2bc      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 801b390:	f7ff fd92 	bl	801aeb8 <LL_RCC_MSI_IsReady>
 801b394:	4603      	mov	r3, r0
 801b396:	2b00      	cmp	r3, #0
 801b398:	d1f1      	bne.n	801b37e <HAL_RCC_OscConfig+0x11e>
 801b39a:	e000      	b.n	801b39e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b39c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	f003 0301 	and.w	r3, r3, #1
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d05a      	beq.n	801b460 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b3aa:	f7ff fde8 	bl	801af7e <LL_RCC_GetSysClkSource>
 801b3ae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b3b0:	f7ff feee 	bl	801b190 <LL_RCC_PLL_GetMainSource>
 801b3b4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801b3b6:	69bb      	ldr	r3, [r7, #24]
 801b3b8:	2b08      	cmp	r3, #8
 801b3ba:	d005      	beq.n	801b3c8 <HAL_RCC_OscConfig+0x168>
 801b3bc:	69bb      	ldr	r3, [r7, #24]
 801b3be:	2b0c      	cmp	r3, #12
 801b3c0:	d10d      	bne.n	801b3de <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 801b3c2:	697b      	ldr	r3, [r7, #20]
 801b3c4:	2b03      	cmp	r3, #3
 801b3c6:	d10a      	bne.n	801b3de <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b3c8:	f7ff fbf8 	bl	801abbc <LL_RCC_HSE_IsReady>
 801b3cc:	4603      	mov	r3, r0
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d045      	beq.n	801b45e <HAL_RCC_OscConfig+0x1fe>
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	685b      	ldr	r3, [r3, #4]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d141      	bne.n	801b45e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 801b3da:	2301      	movs	r3, #1
 801b3dc:	e295      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	685b      	ldr	r3, [r3, #4]
 801b3e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b3e6:	d102      	bne.n	801b3ee <HAL_RCC_OscConfig+0x18e>
 801b3e8:	f7ff fbca 	bl	801ab80 <LL_RCC_HSE_Enable>
 801b3ec:	e00d      	b.n	801b40a <HAL_RCC_OscConfig+0x1aa>
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	685b      	ldr	r3, [r3, #4]
 801b3f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801b3f6:	d104      	bne.n	801b402 <HAL_RCC_OscConfig+0x1a2>
 801b3f8:	f7ff fba4 	bl	801ab44 <LL_RCC_HSE_EnableBypass>
 801b3fc:	f7ff fbc0 	bl	801ab80 <LL_RCC_HSE_Enable>
 801b400:	e003      	b.n	801b40a <HAL_RCC_OscConfig+0x1aa>
 801b402:	f7ff fbcc 	bl	801ab9e <LL_RCC_HSE_Disable>
 801b406:	f7ff fbac 	bl	801ab62 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	685b      	ldr	r3, [r3, #4]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d012      	beq.n	801b438 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b412:	f7fa fee3 	bl	80161dc <HAL_GetTick>
 801b416:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 801b418:	e008      	b.n	801b42c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b41a:	f7fa fedf 	bl	80161dc <HAL_GetTick>
 801b41e:	4602      	mov	r2, r0
 801b420:	69fb      	ldr	r3, [r7, #28]
 801b422:	1ad3      	subs	r3, r2, r3
 801b424:	2b64      	cmp	r3, #100	; 0x64
 801b426:	d901      	bls.n	801b42c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 801b428:	2303      	movs	r3, #3
 801b42a:	e26e      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 801b42c:	f7ff fbc6 	bl	801abbc <LL_RCC_HSE_IsReady>
 801b430:	4603      	mov	r3, r0
 801b432:	2b00      	cmp	r3, #0
 801b434:	d0f1      	beq.n	801b41a <HAL_RCC_OscConfig+0x1ba>
 801b436:	e013      	b.n	801b460 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b438:	f7fa fed0 	bl	80161dc <HAL_GetTick>
 801b43c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 801b43e:	e008      	b.n	801b452 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b440:	f7fa fecc 	bl	80161dc <HAL_GetTick>
 801b444:	4602      	mov	r2, r0
 801b446:	69fb      	ldr	r3, [r7, #28]
 801b448:	1ad3      	subs	r3, r2, r3
 801b44a:	2b64      	cmp	r3, #100	; 0x64
 801b44c:	d901      	bls.n	801b452 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801b44e:	2303      	movs	r3, #3
 801b450:	e25b      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 801b452:	f7ff fbb3 	bl	801abbc <LL_RCC_HSE_IsReady>
 801b456:	4603      	mov	r3, r0
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d1f1      	bne.n	801b440 <HAL_RCC_OscConfig+0x1e0>
 801b45c:	e000      	b.n	801b460 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b45e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	f003 0302 	and.w	r3, r3, #2
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d051      	beq.n	801b510 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b46c:	f7ff fd87 	bl	801af7e <LL_RCC_GetSysClkSource>
 801b470:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b472:	f7ff fe8d 	bl	801b190 <LL_RCC_PLL_GetMainSource>
 801b476:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801b478:	693b      	ldr	r3, [r7, #16]
 801b47a:	2b04      	cmp	r3, #4
 801b47c:	d005      	beq.n	801b48a <HAL_RCC_OscConfig+0x22a>
 801b47e:	693b      	ldr	r3, [r7, #16]
 801b480:	2b0c      	cmp	r3, #12
 801b482:	d113      	bne.n	801b4ac <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 801b484:	68fb      	ldr	r3, [r7, #12]
 801b486:	2b02      	cmp	r3, #2
 801b488:	d110      	bne.n	801b4ac <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b48a:	f7ff fbc7 	bl	801ac1c <LL_RCC_HSI_IsReady>
 801b48e:	4603      	mov	r3, r0
 801b490:	2b00      	cmp	r3, #0
 801b492:	d005      	beq.n	801b4a0 <HAL_RCC_OscConfig+0x240>
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	68db      	ldr	r3, [r3, #12]
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d101      	bne.n	801b4a0 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 801b49c:	2301      	movs	r3, #1
 801b49e:	e234      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	691b      	ldr	r3, [r3, #16]
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f7ff fbcb 	bl	801ac40 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b4aa:	e031      	b.n	801b510 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	68db      	ldr	r3, [r3, #12]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d019      	beq.n	801b4e8 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801b4b4:	f7ff fb94 	bl	801abe0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b4b8:	f7fa fe90 	bl	80161dc <HAL_GetTick>
 801b4bc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801b4be:	e008      	b.n	801b4d2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b4c0:	f7fa fe8c 	bl	80161dc <HAL_GetTick>
 801b4c4:	4602      	mov	r2, r0
 801b4c6:	69fb      	ldr	r3, [r7, #28]
 801b4c8:	1ad3      	subs	r3, r2, r3
 801b4ca:	2b02      	cmp	r3, #2
 801b4cc:	d901      	bls.n	801b4d2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 801b4ce:	2303      	movs	r3, #3
 801b4d0:	e21b      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 801b4d2:	f7ff fba3 	bl	801ac1c <LL_RCC_HSI_IsReady>
 801b4d6:	4603      	mov	r3, r0
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d0f1      	beq.n	801b4c0 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	691b      	ldr	r3, [r3, #16]
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	f7ff fbad 	bl	801ac40 <LL_RCC_HSI_SetCalibTrimming>
 801b4e6:	e013      	b.n	801b510 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b4e8:	f7ff fb89 	bl	801abfe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b4ec:	f7fa fe76 	bl	80161dc <HAL_GetTick>
 801b4f0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 801b4f2:	e008      	b.n	801b506 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b4f4:	f7fa fe72 	bl	80161dc <HAL_GetTick>
 801b4f8:	4602      	mov	r2, r0
 801b4fa:	69fb      	ldr	r3, [r7, #28]
 801b4fc:	1ad3      	subs	r3, r2, r3
 801b4fe:	2b02      	cmp	r3, #2
 801b500:	d901      	bls.n	801b506 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 801b502:	2303      	movs	r3, #3
 801b504:	e201      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 801b506:	f7ff fb89 	bl	801ac1c <LL_RCC_HSI_IsReady>
 801b50a:	4603      	mov	r3, r0
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d1f1      	bne.n	801b4f4 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	f003 0308 	and.w	r3, r3, #8
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d106      	bne.n	801b52a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801b524:	2b00      	cmp	r3, #0
 801b526:	f000 80a2 	beq.w	801b66e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	695b      	ldr	r3, [r3, #20]
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d075      	beq.n	801b61e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	f003 0310 	and.w	r3, r3, #16
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d046      	beq.n	801b5cc <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 801b53e:	f7ff fc40 	bl	801adc2 <LL_RCC_LSI1_IsReady>
 801b542:	4603      	mov	r3, r0
 801b544:	2b00      	cmp	r3, #0
 801b546:	d113      	bne.n	801b570 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 801b548:	f7ff fc19 	bl	801ad7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801b54c:	f7fa fe46 	bl	80161dc <HAL_GetTick>
 801b550:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 801b552:	e008      	b.n	801b566 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801b554:	f7fa fe42 	bl	80161dc <HAL_GetTick>
 801b558:	4602      	mov	r2, r0
 801b55a:	69fb      	ldr	r3, [r7, #28]
 801b55c:	1ad3      	subs	r3, r2, r3
 801b55e:	2b02      	cmp	r3, #2
 801b560:	d901      	bls.n	801b566 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 801b562:	2303      	movs	r3, #3
 801b564:	e1d1      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801b566:	f7ff fc2c 	bl	801adc2 <LL_RCC_LSI1_IsReady>
 801b56a:	4603      	mov	r3, r0
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d0f1      	beq.n	801b554 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 801b570:	f7ff fc39 	bl	801ade6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b574:	f7fa fe32 	bl	80161dc <HAL_GetTick>
 801b578:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801b57a:	e008      	b.n	801b58e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801b57c:	f7fa fe2e 	bl	80161dc <HAL_GetTick>
 801b580:	4602      	mov	r2, r0
 801b582:	69fb      	ldr	r3, [r7, #28]
 801b584:	1ad3      	subs	r3, r2, r3
 801b586:	2b03      	cmp	r3, #3
 801b588:	d901      	bls.n	801b58e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 801b58a:	2303      	movs	r3, #3
 801b58c:	e1bd      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 801b58e:	f7ff fc4c 	bl	801ae2a <LL_RCC_LSI2_IsReady>
 801b592:	4603      	mov	r3, r0
 801b594:	2b00      	cmp	r3, #0
 801b596:	d0f1      	beq.n	801b57c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	699b      	ldr	r3, [r3, #24]
 801b59c:	4618      	mov	r0, r3
 801b59e:	f7ff fc56 	bl	801ae4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 801b5a2:	f7ff fbfd 	bl	801ada0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b5a6:	f7fa fe19 	bl	80161dc <HAL_GetTick>
 801b5aa:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 801b5ac:	e008      	b.n	801b5c0 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801b5ae:	f7fa fe15 	bl	80161dc <HAL_GetTick>
 801b5b2:	4602      	mov	r2, r0
 801b5b4:	69fb      	ldr	r3, [r7, #28]
 801b5b6:	1ad3      	subs	r3, r2, r3
 801b5b8:	2b02      	cmp	r3, #2
 801b5ba:	d901      	bls.n	801b5c0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 801b5bc:	2303      	movs	r3, #3
 801b5be:	e1a4      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 801b5c0:	f7ff fbff 	bl	801adc2 <LL_RCC_LSI1_IsReady>
 801b5c4:	4603      	mov	r3, r0
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d1f1      	bne.n	801b5ae <HAL_RCC_OscConfig+0x34e>
 801b5ca:	e050      	b.n	801b66e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 801b5cc:	f7ff fbd7 	bl	801ad7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b5d0:	f7fa fe04 	bl	80161dc <HAL_GetTick>
 801b5d4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801b5d6:	e00b      	b.n	801b5f0 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801b5d8:	f7fa fe00 	bl	80161dc <HAL_GetTick>
 801b5dc:	4602      	mov	r2, r0
 801b5de:	69fb      	ldr	r3, [r7, #28]
 801b5e0:	1ad3      	subs	r3, r2, r3
 801b5e2:	2b02      	cmp	r3, #2
 801b5e4:	d904      	bls.n	801b5f0 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 801b5e6:	2303      	movs	r3, #3
 801b5e8:	e18f      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
 801b5ea:	bf00      	nop
 801b5ec:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 801b5f0:	f7ff fbe7 	bl	801adc2 <LL_RCC_LSI1_IsReady>
 801b5f4:	4603      	mov	r3, r0
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d0ee      	beq.n	801b5d8 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 801b5fa:	f7ff fc05 	bl	801ae08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 801b5fe:	e008      	b.n	801b612 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801b600:	f7fa fdec 	bl	80161dc <HAL_GetTick>
 801b604:	4602      	mov	r2, r0
 801b606:	69fb      	ldr	r3, [r7, #28]
 801b608:	1ad3      	subs	r3, r2, r3
 801b60a:	2b03      	cmp	r3, #3
 801b60c:	d901      	bls.n	801b612 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 801b60e:	2303      	movs	r3, #3
 801b610:	e17b      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 801b612:	f7ff fc0a 	bl	801ae2a <LL_RCC_LSI2_IsReady>
 801b616:	4603      	mov	r3, r0
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d1f1      	bne.n	801b600 <HAL_RCC_OscConfig+0x3a0>
 801b61c:	e027      	b.n	801b66e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 801b61e:	f7ff fbf3 	bl	801ae08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b622:	f7fa fddb 	bl	80161dc <HAL_GetTick>
 801b626:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801b628:	e008      	b.n	801b63c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801b62a:	f7fa fdd7 	bl	80161dc <HAL_GetTick>
 801b62e:	4602      	mov	r2, r0
 801b630:	69fb      	ldr	r3, [r7, #28]
 801b632:	1ad3      	subs	r3, r2, r3
 801b634:	2b03      	cmp	r3, #3
 801b636:	d901      	bls.n	801b63c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 801b638:	2303      	movs	r3, #3
 801b63a:	e166      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801b63c:	f7ff fbf5 	bl	801ae2a <LL_RCC_LSI2_IsReady>
 801b640:	4603      	mov	r3, r0
 801b642:	2b00      	cmp	r3, #0
 801b644:	d1f1      	bne.n	801b62a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801b646:	f7ff fbab 	bl	801ada0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b64a:	f7fa fdc7 	bl	80161dc <HAL_GetTick>
 801b64e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 801b650:	e008      	b.n	801b664 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801b652:	f7fa fdc3 	bl	80161dc <HAL_GetTick>
 801b656:	4602      	mov	r2, r0
 801b658:	69fb      	ldr	r3, [r7, #28]
 801b65a:	1ad3      	subs	r3, r2, r3
 801b65c:	2b02      	cmp	r3, #2
 801b65e:	d901      	bls.n	801b664 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 801b660:	2303      	movs	r3, #3
 801b662:	e152      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801b664:	f7ff fbad 	bl	801adc2 <LL_RCC_LSI1_IsReady>
 801b668:	4603      	mov	r3, r0
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d1f1      	bne.n	801b652 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	f003 0304 	and.w	r3, r3, #4
 801b676:	2b00      	cmp	r3, #0
 801b678:	d05b      	beq.n	801b732 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b67a:	4ba6      	ldr	r3, [pc, #664]	; (801b914 <HAL_RCC_OscConfig+0x6b4>)
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b682:	2b00      	cmp	r3, #0
 801b684:	d114      	bne.n	801b6b0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801b686:	f7ff f9b1 	bl	801a9ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b68a:	f7fa fda7 	bl	80161dc <HAL_GetTick>
 801b68e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b690:	e008      	b.n	801b6a4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b692:	f7fa fda3 	bl	80161dc <HAL_GetTick>
 801b696:	4602      	mov	r2, r0
 801b698:	69fb      	ldr	r3, [r7, #28]
 801b69a:	1ad3      	subs	r3, r2, r3
 801b69c:	2b02      	cmp	r3, #2
 801b69e:	d901      	bls.n	801b6a4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 801b6a0:	2303      	movs	r3, #3
 801b6a2:	e132      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b6a4:	4b9b      	ldr	r3, [pc, #620]	; (801b914 <HAL_RCC_OscConfig+0x6b4>)
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d0f0      	beq.n	801b692 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	689b      	ldr	r3, [r3, #8]
 801b6b4:	2b01      	cmp	r3, #1
 801b6b6:	d102      	bne.n	801b6be <HAL_RCC_OscConfig+0x45e>
 801b6b8:	f7ff fb0b 	bl	801acd2 <LL_RCC_LSE_Enable>
 801b6bc:	e00c      	b.n	801b6d8 <HAL_RCC_OscConfig+0x478>
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	689b      	ldr	r3, [r3, #8]
 801b6c2:	2b05      	cmp	r3, #5
 801b6c4:	d104      	bne.n	801b6d0 <HAL_RCC_OscConfig+0x470>
 801b6c6:	f7ff fb26 	bl	801ad16 <LL_RCC_LSE_EnableBypass>
 801b6ca:	f7ff fb02 	bl	801acd2 <LL_RCC_LSE_Enable>
 801b6ce:	e003      	b.n	801b6d8 <HAL_RCC_OscConfig+0x478>
 801b6d0:	f7ff fb10 	bl	801acf4 <LL_RCC_LSE_Disable>
 801b6d4:	f7ff fb30 	bl	801ad38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	689b      	ldr	r3, [r3, #8]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d014      	beq.n	801b70a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b6e0:	f7fa fd7c 	bl	80161dc <HAL_GetTick>
 801b6e4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 801b6e6:	e00a      	b.n	801b6fe <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b6e8:	f7fa fd78 	bl	80161dc <HAL_GetTick>
 801b6ec:	4602      	mov	r2, r0
 801b6ee:	69fb      	ldr	r3, [r7, #28]
 801b6f0:	1ad3      	subs	r3, r2, r3
 801b6f2:	f241 3288 	movw	r2, #5000	; 0x1388
 801b6f6:	4293      	cmp	r3, r2
 801b6f8:	d901      	bls.n	801b6fe <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 801b6fa:	2303      	movs	r3, #3
 801b6fc:	e105      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 801b6fe:	f7ff fb2c 	bl	801ad5a <LL_RCC_LSE_IsReady>
 801b702:	4603      	mov	r3, r0
 801b704:	2b00      	cmp	r3, #0
 801b706:	d0ef      	beq.n	801b6e8 <HAL_RCC_OscConfig+0x488>
 801b708:	e013      	b.n	801b732 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b70a:	f7fa fd67 	bl	80161dc <HAL_GetTick>
 801b70e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 801b710:	e00a      	b.n	801b728 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b712:	f7fa fd63 	bl	80161dc <HAL_GetTick>
 801b716:	4602      	mov	r2, r0
 801b718:	69fb      	ldr	r3, [r7, #28]
 801b71a:	1ad3      	subs	r3, r2, r3
 801b71c:	f241 3288 	movw	r2, #5000	; 0x1388
 801b720:	4293      	cmp	r3, r2
 801b722:	d901      	bls.n	801b728 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 801b724:	2303      	movs	r3, #3
 801b726:	e0f0      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 801b728:	f7ff fb17 	bl	801ad5a <LL_RCC_LSE_IsReady>
 801b72c:	4603      	mov	r3, r0
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d1ef      	bne.n	801b712 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d02c      	beq.n	801b798 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b742:	2b00      	cmp	r3, #0
 801b744:	d014      	beq.n	801b770 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b746:	f7ff fa90 	bl	801ac6a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b74a:	f7fa fd47 	bl	80161dc <HAL_GetTick>
 801b74e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 801b750:	e008      	b.n	801b764 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b752:	f7fa fd43 	bl	80161dc <HAL_GetTick>
 801b756:	4602      	mov	r2, r0
 801b758:	69fb      	ldr	r3, [r7, #28]
 801b75a:	1ad3      	subs	r3, r2, r3
 801b75c:	2b02      	cmp	r3, #2
 801b75e:	d901      	bls.n	801b764 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 801b760:	2303      	movs	r3, #3
 801b762:	e0d2      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801b764:	f7ff faa3 	bl	801acae <LL_RCC_HSI48_IsReady>
 801b768:	4603      	mov	r3, r0
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d0f1      	beq.n	801b752 <HAL_RCC_OscConfig+0x4f2>
 801b76e:	e013      	b.n	801b798 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b770:	f7ff fa8c 	bl	801ac8c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b774:	f7fa fd32 	bl	80161dc <HAL_GetTick>
 801b778:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 801b77a:	e008      	b.n	801b78e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b77c:	f7fa fd2e 	bl	80161dc <HAL_GetTick>
 801b780:	4602      	mov	r2, r0
 801b782:	69fb      	ldr	r3, [r7, #28]
 801b784:	1ad3      	subs	r3, r2, r3
 801b786:	2b02      	cmp	r3, #2
 801b788:	d901      	bls.n	801b78e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 801b78a:	2303      	movs	r3, #3
 801b78c:	e0bd      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 801b78e:	f7ff fa8e 	bl	801acae <LL_RCC_HSI48_IsReady>
 801b792:	4603      	mov	r3, r0
 801b794:	2b00      	cmp	r3, #0
 801b796:	d1f1      	bne.n	801b77c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	f000 80b3 	beq.w	801b908 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b7a2:	f7ff fbec 	bl	801af7e <LL_RCC_GetSysClkSource>
 801b7a6:	4603      	mov	r3, r0
 801b7a8:	2b0c      	cmp	r3, #12
 801b7aa:	d076      	beq.n	801b89a <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7b0:	2b02      	cmp	r3, #2
 801b7b2:	d14b      	bne.n	801b84c <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b7b4:	f7ff fca6 	bl	801b104 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b7b8:	f7fa fd10 	bl	80161dc <HAL_GetTick>
 801b7bc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 801b7be:	e008      	b.n	801b7d2 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b7c0:	f7fa fd0c 	bl	80161dc <HAL_GetTick>
 801b7c4:	4602      	mov	r2, r0
 801b7c6:	69fb      	ldr	r3, [r7, #28]
 801b7c8:	1ad3      	subs	r3, r2, r3
 801b7ca:	2b02      	cmp	r3, #2
 801b7cc:	d901      	bls.n	801b7d2 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 801b7ce:	2303      	movs	r3, #3
 801b7d0:	e09b      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 801b7d2:	f7ff fca6 	bl	801b122 <LL_RCC_PLL_IsReady>
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d1f1      	bne.n	801b7c0 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b7dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b7e0:	68da      	ldr	r2, [r3, #12]
 801b7e2:	4b4d      	ldr	r3, [pc, #308]	; (801b918 <HAL_RCC_OscConfig+0x6b8>)
 801b7e4:	4013      	ands	r3, r2
 801b7e6:	687a      	ldr	r2, [r7, #4]
 801b7e8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801b7ea:	687a      	ldr	r2, [r7, #4]
 801b7ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801b7ee:	4311      	orrs	r1, r2
 801b7f0:	687a      	ldr	r2, [r7, #4]
 801b7f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801b7f4:	0212      	lsls	r2, r2, #8
 801b7f6:	4311      	orrs	r1, r2
 801b7f8:	687a      	ldr	r2, [r7, #4]
 801b7fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801b7fc:	4311      	orrs	r1, r2
 801b7fe:	687a      	ldr	r2, [r7, #4]
 801b800:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801b802:	4311      	orrs	r1, r2
 801b804:	687a      	ldr	r2, [r7, #4]
 801b806:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801b808:	430a      	orrs	r2, r1
 801b80a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b80e:	4313      	orrs	r3, r2
 801b810:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b812:	f7ff fc68 	bl	801b0e6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801b816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b81a:	68db      	ldr	r3, [r3, #12]
 801b81c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b824:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b826:	f7fa fcd9 	bl	80161dc <HAL_GetTick>
 801b82a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 801b82c:	e008      	b.n	801b840 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b82e:	f7fa fcd5 	bl	80161dc <HAL_GetTick>
 801b832:	4602      	mov	r2, r0
 801b834:	69fb      	ldr	r3, [r7, #28]
 801b836:	1ad3      	subs	r3, r2, r3
 801b838:	2b02      	cmp	r3, #2
 801b83a:	d901      	bls.n	801b840 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 801b83c:	2303      	movs	r3, #3
 801b83e:	e064      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 801b840:	f7ff fc6f 	bl	801b122 <LL_RCC_PLL_IsReady>
 801b844:	4603      	mov	r3, r0
 801b846:	2b00      	cmp	r3, #0
 801b848:	d0f1      	beq.n	801b82e <HAL_RCC_OscConfig+0x5ce>
 801b84a:	e05d      	b.n	801b908 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b84c:	f7ff fc5a 	bl	801b104 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 801b850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b854:	68db      	ldr	r3, [r3, #12]
 801b856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b85a:	f023 0303 	bic.w	r3, r3, #3
 801b85e:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 801b860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b864:	68db      	ldr	r3, [r3, #12]
 801b866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b86a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 801b86e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b872:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b874:	f7fa fcb2 	bl	80161dc <HAL_GetTick>
 801b878:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 801b87a:	e008      	b.n	801b88e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b87c:	f7fa fcae 	bl	80161dc <HAL_GetTick>
 801b880:	4602      	mov	r2, r0
 801b882:	69fb      	ldr	r3, [r7, #28]
 801b884:	1ad3      	subs	r3, r2, r3
 801b886:	2b02      	cmp	r3, #2
 801b888:	d901      	bls.n	801b88e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 801b88a:	2303      	movs	r3, #3
 801b88c:	e03d      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 801b88e:	f7ff fc48 	bl	801b122 <LL_RCC_PLL_IsReady>
 801b892:	4603      	mov	r3, r0
 801b894:	2b00      	cmp	r3, #0
 801b896:	d1f1      	bne.n	801b87c <HAL_RCC_OscConfig+0x61c>
 801b898:	e036      	b.n	801b908 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b89e:	2b01      	cmp	r3, #1
 801b8a0:	d101      	bne.n	801b8a6 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 801b8a2:	2301      	movs	r3, #1
 801b8a4:	e031      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 801b8a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b8aa:	68db      	ldr	r3, [r3, #12]
 801b8ac:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b8ae:	68bb      	ldr	r3, [r7, #8]
 801b8b0:	f003 0203 	and.w	r2, r3, #3
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b8b8:	429a      	cmp	r2, r3
 801b8ba:	d123      	bne.n	801b904 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801b8bc:	68bb      	ldr	r3, [r7, #8]
 801b8be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b8c6:	429a      	cmp	r2, r3
 801b8c8:	d11c      	bne.n	801b904 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801b8ca:	68bb      	ldr	r3, [r7, #8]
 801b8cc:	0a1b      	lsrs	r3, r3, #8
 801b8ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801b8d6:	429a      	cmp	r2, r3
 801b8d8:	d114      	bne.n	801b904 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801b8da:	68bb      	ldr	r3, [r7, #8]
 801b8dc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801b8e4:	429a      	cmp	r2, r3
 801b8e6:	d10d      	bne.n	801b904 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801b8e8:	68bb      	ldr	r3, [r7, #8]
 801b8ea:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801b8f2:	429a      	cmp	r2, r3
 801b8f4:	d106      	bne.n	801b904 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 801b8f6:	68bb      	ldr	r3, [r7, #8]
 801b8f8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801b900:	429a      	cmp	r2, r3
 801b902:	d001      	beq.n	801b908 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 801b904:	2301      	movs	r3, #1
 801b906:	e000      	b.n	801b90a <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 801b908:	2300      	movs	r3, #0
}
 801b90a:	4618      	mov	r0, r3
 801b90c:	372c      	adds	r7, #44	; 0x2c
 801b90e:	46bd      	mov	sp, r7
 801b910:	bd90      	pop	{r4, r7, pc}
 801b912:	bf00      	nop
 801b914:	58000400 	.word	0x58000400
 801b918:	11c1808c 	.word	0x11c1808c

0801b91c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b91c:	b580      	push	{r7, lr}
 801b91e:	b084      	sub	sp, #16
 801b920:	af00      	add	r7, sp, #0
 801b922:	6078      	str	r0, [r7, #4]
 801b924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d101      	bne.n	801b930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b92c:	2301      	movs	r3, #1
 801b92e:	e12a      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b930:	4b97      	ldr	r3, [pc, #604]	; (801bb90 <HAL_RCC_ClockConfig+0x274>)
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	f003 0307 	and.w	r3, r3, #7
 801b938:	683a      	ldr	r2, [r7, #0]
 801b93a:	429a      	cmp	r2, r3
 801b93c:	d91b      	bls.n	801b976 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b93e:	4b94      	ldr	r3, [pc, #592]	; (801bb90 <HAL_RCC_ClockConfig+0x274>)
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	f023 0207 	bic.w	r2, r3, #7
 801b946:	4992      	ldr	r1, [pc, #584]	; (801bb90 <HAL_RCC_ClockConfig+0x274>)
 801b948:	683b      	ldr	r3, [r7, #0]
 801b94a:	4313      	orrs	r3, r2
 801b94c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b94e:	f7fa fc45 	bl	80161dc <HAL_GetTick>
 801b952:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b954:	e008      	b.n	801b968 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801b956:	f7fa fc41 	bl	80161dc <HAL_GetTick>
 801b95a:	4602      	mov	r2, r0
 801b95c:	68fb      	ldr	r3, [r7, #12]
 801b95e:	1ad3      	subs	r3, r2, r3
 801b960:	2b02      	cmp	r3, #2
 801b962:	d901      	bls.n	801b968 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 801b964:	2303      	movs	r3, #3
 801b966:	e10e      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b968:	4b89      	ldr	r3, [pc, #548]	; (801bb90 <HAL_RCC_ClockConfig+0x274>)
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	f003 0307 	and.w	r3, r3, #7
 801b970:	683a      	ldr	r2, [r7, #0]
 801b972:	429a      	cmp	r2, r3
 801b974:	d1ef      	bne.n	801b956 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	f003 0302 	and.w	r3, r3, #2
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d016      	beq.n	801b9b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	689b      	ldr	r3, [r3, #8]
 801b986:	4618      	mov	r0, r3
 801b988:	f7ff fb05 	bl	801af96 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801b98c:	f7fa fc26 	bl	80161dc <HAL_GetTick>
 801b990:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801b992:	e008      	b.n	801b9a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801b994:	f7fa fc22 	bl	80161dc <HAL_GetTick>
 801b998:	4602      	mov	r2, r0
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	1ad3      	subs	r3, r2, r3
 801b99e:	2b02      	cmp	r3, #2
 801b9a0:	d901      	bls.n	801b9a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 801b9a2:	2303      	movs	r3, #3
 801b9a4:	e0ef      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801b9a6:	f7ff fbff 	bl	801b1a8 <LL_RCC_IsActiveFlag_HPRE>
 801b9aa:	4603      	mov	r3, r0
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d0f1      	beq.n	801b994 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	f003 0320 	and.w	r3, r3, #32
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d016      	beq.n	801b9ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	695b      	ldr	r3, [r3, #20]
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	f7ff fafc 	bl	801afbe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801b9c6:	f7fa fc09 	bl	80161dc <HAL_GetTick>
 801b9ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801b9cc:	e008      	b.n	801b9e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801b9ce:	f7fa fc05 	bl	80161dc <HAL_GetTick>
 801b9d2:	4602      	mov	r2, r0
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	1ad3      	subs	r3, r2, r3
 801b9d8:	2b02      	cmp	r3, #2
 801b9da:	d901      	bls.n	801b9e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 801b9dc:	2303      	movs	r3, #3
 801b9de:	e0d2      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801b9e0:	f7ff fbf4 	bl	801b1cc <LL_RCC_IsActiveFlag_C2HPRE>
 801b9e4:	4603      	mov	r3, r0
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d0f1      	beq.n	801b9ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d016      	beq.n	801ba24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	699b      	ldr	r3, [r3, #24]
 801b9fa:	4618      	mov	r0, r3
 801b9fc:	f7ff faf5 	bl	801afea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801ba00:	f7fa fbec 	bl	80161dc <HAL_GetTick>
 801ba04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801ba06:	e008      	b.n	801ba1a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801ba08:	f7fa fbe8 	bl	80161dc <HAL_GetTick>
 801ba0c:	4602      	mov	r2, r0
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	1ad3      	subs	r3, r2, r3
 801ba12:	2b02      	cmp	r3, #2
 801ba14:	d901      	bls.n	801ba1a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801ba16:	2303      	movs	r3, #3
 801ba18:	e0b5      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801ba1a:	f7ff fbea 	bl	801b1f2 <LL_RCC_IsActiveFlag_SHDHPRE>
 801ba1e:	4603      	mov	r3, r0
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d0f1      	beq.n	801ba08 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	f003 0304 	and.w	r3, r3, #4
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d016      	beq.n	801ba5e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	68db      	ldr	r3, [r3, #12]
 801ba34:	4618      	mov	r0, r3
 801ba36:	f7ff faef 	bl	801b018 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801ba3a:	f7fa fbcf 	bl	80161dc <HAL_GetTick>
 801ba3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801ba40:	e008      	b.n	801ba54 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801ba42:	f7fa fbcb 	bl	80161dc <HAL_GetTick>
 801ba46:	4602      	mov	r2, r0
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	1ad3      	subs	r3, r2, r3
 801ba4c:	2b02      	cmp	r3, #2
 801ba4e:	d901      	bls.n	801ba54 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 801ba50:	2303      	movs	r3, #3
 801ba52:	e098      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801ba54:	f7ff fbe0 	bl	801b218 <LL_RCC_IsActiveFlag_PPRE1>
 801ba58:	4603      	mov	r3, r0
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d0f1      	beq.n	801ba42 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	f003 0308 	and.w	r3, r3, #8
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d017      	beq.n	801ba9a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	691b      	ldr	r3, [r3, #16]
 801ba6e:	00db      	lsls	r3, r3, #3
 801ba70:	4618      	mov	r0, r3
 801ba72:	f7ff fae5 	bl	801b040 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801ba76:	f7fa fbb1 	bl	80161dc <HAL_GetTick>
 801ba7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801ba7c:	e008      	b.n	801ba90 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801ba7e:	f7fa fbad 	bl	80161dc <HAL_GetTick>
 801ba82:	4602      	mov	r2, r0
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	1ad3      	subs	r3, r2, r3
 801ba88:	2b02      	cmp	r3, #2
 801ba8a:	d901      	bls.n	801ba90 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 801ba8c:	2303      	movs	r3, #3
 801ba8e:	e07a      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801ba90:	f7ff fbd4 	bl	801b23c <LL_RCC_IsActiveFlag_PPRE2>
 801ba94:	4603      	mov	r3, r0
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d0f1      	beq.n	801ba7e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	f003 0301 	and.w	r3, r3, #1
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d043      	beq.n	801bb2e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	685b      	ldr	r3, [r3, #4]
 801baaa:	2b02      	cmp	r3, #2
 801baac:	d106      	bne.n	801babc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 801baae:	f7ff f885 	bl	801abbc <LL_RCC_HSE_IsReady>
 801bab2:	4603      	mov	r3, r0
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d11e      	bne.n	801baf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801bab8:	2301      	movs	r3, #1
 801baba:	e064      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	685b      	ldr	r3, [r3, #4]
 801bac0:	2b03      	cmp	r3, #3
 801bac2:	d106      	bne.n	801bad2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 801bac4:	f7ff fb2d 	bl	801b122 <LL_RCC_PLL_IsReady>
 801bac8:	4603      	mov	r3, r0
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d113      	bne.n	801baf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801bace:	2301      	movs	r3, #1
 801bad0:	e059      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	685b      	ldr	r3, [r3, #4]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d106      	bne.n	801bae8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801bada:	f7ff f9ed 	bl	801aeb8 <LL_RCC_MSI_IsReady>
 801bade:	4603      	mov	r3, r0
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d108      	bne.n	801baf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801bae4:	2301      	movs	r3, #1
 801bae6:	e04e      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801bae8:	f7ff f898 	bl	801ac1c <LL_RCC_HSI_IsReady>
 801baec:	4603      	mov	r3, r0
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d101      	bne.n	801baf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801baf2:	2301      	movs	r3, #1
 801baf4:	e047      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	685b      	ldr	r3, [r3, #4]
 801bafa:	4618      	mov	r0, r3
 801bafc:	f7ff fa2b 	bl	801af56 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bb00:	f7fa fb6c 	bl	80161dc <HAL_GetTick>
 801bb04:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bb06:	e00a      	b.n	801bb1e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb08:	f7fa fb68 	bl	80161dc <HAL_GetTick>
 801bb0c:	4602      	mov	r2, r0
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	1ad3      	subs	r3, r2, r3
 801bb12:	f241 3288 	movw	r2, #5000	; 0x1388
 801bb16:	4293      	cmp	r3, r2
 801bb18:	d901      	bls.n	801bb1e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801bb1a:	2303      	movs	r3, #3
 801bb1c:	e033      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bb1e:	f7ff fa2e 	bl	801af7e <LL_RCC_GetSysClkSource>
 801bb22:	4602      	mov	r2, r0
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	685b      	ldr	r3, [r3, #4]
 801bb28:	009b      	lsls	r3, r3, #2
 801bb2a:	429a      	cmp	r2, r3
 801bb2c:	d1ec      	bne.n	801bb08 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801bb2e:	4b18      	ldr	r3, [pc, #96]	; (801bb90 <HAL_RCC_ClockConfig+0x274>)
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	f003 0307 	and.w	r3, r3, #7
 801bb36:	683a      	ldr	r2, [r7, #0]
 801bb38:	429a      	cmp	r2, r3
 801bb3a:	d21b      	bcs.n	801bb74 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bb3c:	4b14      	ldr	r3, [pc, #80]	; (801bb90 <HAL_RCC_ClockConfig+0x274>)
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	f023 0207 	bic.w	r2, r3, #7
 801bb44:	4912      	ldr	r1, [pc, #72]	; (801bb90 <HAL_RCC_ClockConfig+0x274>)
 801bb46:	683b      	ldr	r3, [r7, #0]
 801bb48:	4313      	orrs	r3, r2
 801bb4a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bb4c:	f7fa fb46 	bl	80161dc <HAL_GetTick>
 801bb50:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bb52:	e008      	b.n	801bb66 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801bb54:	f7fa fb42 	bl	80161dc <HAL_GetTick>
 801bb58:	4602      	mov	r2, r0
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	1ad3      	subs	r3, r2, r3
 801bb5e:	2b02      	cmp	r3, #2
 801bb60:	d901      	bls.n	801bb66 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 801bb62:	2303      	movs	r3, #3
 801bb64:	e00f      	b.n	801bb86 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bb66:	4b0a      	ldr	r3, [pc, #40]	; (801bb90 <HAL_RCC_ClockConfig+0x274>)
 801bb68:	681b      	ldr	r3, [r3, #0]
 801bb6a:	f003 0307 	and.w	r3, r3, #7
 801bb6e:	683a      	ldr	r2, [r7, #0]
 801bb70:	429a      	cmp	r2, r3
 801bb72:	d1ef      	bne.n	801bb54 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 801bb74:	f7f9 fcbc 	bl	80154f0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 801bb78:	f7fa fb3c 	bl	80161f4 <HAL_GetTickPrio>
 801bb7c:	4603      	mov	r3, r0
 801bb7e:	4618      	mov	r0, r3
 801bb80:	f7f9 fb90 	bl	80152a4 <HAL_InitTick>
 801bb84:	4603      	mov	r3, r0
}
 801bb86:	4618      	mov	r0, r3
 801bb88:	3710      	adds	r7, #16
 801bb8a:	46bd      	mov	sp, r7
 801bb8c:	bd80      	pop	{r7, pc}
 801bb8e:	bf00      	nop
 801bb90:	58004000 	.word	0x58004000

0801bb94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bb94:	b590      	push	{r4, r7, lr}
 801bb96:	b085      	sub	sp, #20
 801bb98:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bb9a:	f7ff f9f0 	bl	801af7e <LL_RCC_GetSysClkSource>
 801bb9e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d10a      	bne.n	801bbbc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801bba6:	f7ff f9ac 	bl	801af02 <LL_RCC_MSI_GetRange>
 801bbaa:	4603      	mov	r3, r0
 801bbac:	091b      	lsrs	r3, r3, #4
 801bbae:	f003 030f 	and.w	r3, r3, #15
 801bbb2:	4a2a      	ldr	r2, [pc, #168]	; (801bc5c <HAL_RCC_GetSysClockFreq+0xc8>)
 801bbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bbb8:	60fb      	str	r3, [r7, #12]
 801bbba:	e04a      	b.n	801bc52 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	2b04      	cmp	r3, #4
 801bbc0:	d102      	bne.n	801bbc8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801bbc2:	4b27      	ldr	r3, [pc, #156]	; (801bc60 <HAL_RCC_GetSysClockFreq+0xcc>)
 801bbc4:	60fb      	str	r3, [r7, #12]
 801bbc6:	e044      	b.n	801bc52 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	2b08      	cmp	r3, #8
 801bbcc:	d10a      	bne.n	801bbe4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801bbce:	f7fe ffa7 	bl	801ab20 <LL_RCC_HSE_IsEnabledDiv2>
 801bbd2:	4603      	mov	r3, r0
 801bbd4:	2b01      	cmp	r3, #1
 801bbd6:	d102      	bne.n	801bbde <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 801bbd8:	4b21      	ldr	r3, [pc, #132]	; (801bc60 <HAL_RCC_GetSysClockFreq+0xcc>)
 801bbda:	60fb      	str	r3, [r7, #12]
 801bbdc:	e039      	b.n	801bc52 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801bbde:	4b21      	ldr	r3, [pc, #132]	; (801bc64 <HAL_RCC_GetSysClockFreq+0xd0>)
 801bbe0:	60fb      	str	r3, [r7, #12]
 801bbe2:	e036      	b.n	801bc52 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 801bbe4:	f7ff fad4 	bl	801b190 <LL_RCC_PLL_GetMainSource>
 801bbe8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 801bbea:	683b      	ldr	r3, [r7, #0]
 801bbec:	2b02      	cmp	r3, #2
 801bbee:	d002      	beq.n	801bbf6 <HAL_RCC_GetSysClockFreq+0x62>
 801bbf0:	2b03      	cmp	r3, #3
 801bbf2:	d003      	beq.n	801bbfc <HAL_RCC_GetSysClockFreq+0x68>
 801bbf4:	e00d      	b.n	801bc12 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 801bbf6:	4b1a      	ldr	r3, [pc, #104]	; (801bc60 <HAL_RCC_GetSysClockFreq+0xcc>)
 801bbf8:	60bb      	str	r3, [r7, #8]
        break;
 801bbfa:	e015      	b.n	801bc28 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801bbfc:	f7fe ff90 	bl	801ab20 <LL_RCC_HSE_IsEnabledDiv2>
 801bc00:	4603      	mov	r3, r0
 801bc02:	2b01      	cmp	r3, #1
 801bc04:	d102      	bne.n	801bc0c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 801bc06:	4b16      	ldr	r3, [pc, #88]	; (801bc60 <HAL_RCC_GetSysClockFreq+0xcc>)
 801bc08:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 801bc0a:	e00d      	b.n	801bc28 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 801bc0c:	4b15      	ldr	r3, [pc, #84]	; (801bc64 <HAL_RCC_GetSysClockFreq+0xd0>)
 801bc0e:	60bb      	str	r3, [r7, #8]
        break;
 801bc10:	e00a      	b.n	801bc28 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801bc12:	f7ff f976 	bl	801af02 <LL_RCC_MSI_GetRange>
 801bc16:	4603      	mov	r3, r0
 801bc18:	091b      	lsrs	r3, r3, #4
 801bc1a:	f003 030f 	and.w	r3, r3, #15
 801bc1e:	4a0f      	ldr	r2, [pc, #60]	; (801bc5c <HAL_RCC_GetSysClockFreq+0xc8>)
 801bc20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bc24:	60bb      	str	r3, [r7, #8]
        break;
 801bc26:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 801bc28:	f7ff fa8d 	bl	801b146 <LL_RCC_PLL_GetN>
 801bc2c:	4602      	mov	r2, r0
 801bc2e:	68bb      	ldr	r3, [r7, #8]
 801bc30:	fb03 f402 	mul.w	r4, r3, r2
 801bc34:	f7ff faa0 	bl	801b178 <LL_RCC_PLL_GetDivider>
 801bc38:	4603      	mov	r3, r0
 801bc3a:	091b      	lsrs	r3, r3, #4
 801bc3c:	3301      	adds	r3, #1
 801bc3e:	fbb4 f4f3 	udiv	r4, r4, r3
 801bc42:	f7ff fa8d 	bl	801b160 <LL_RCC_PLL_GetR>
 801bc46:	4603      	mov	r3, r0
 801bc48:	0f5b      	lsrs	r3, r3, #29
 801bc4a:	3301      	adds	r3, #1
 801bc4c:	fbb4 f3f3 	udiv	r3, r4, r3
 801bc50:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 801bc52:	68fb      	ldr	r3, [r7, #12]
}
 801bc54:	4618      	mov	r0, r3
 801bc56:	3714      	adds	r7, #20
 801bc58:	46bd      	mov	sp, r7
 801bc5a:	bd90      	pop	{r4, r7, pc}
 801bc5c:	08028c3c 	.word	0x08028c3c
 801bc60:	00f42400 	.word	0x00f42400
 801bc64:	01e84800 	.word	0x01e84800

0801bc68 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bc68:	b598      	push	{r3, r4, r7, lr}
 801bc6a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 801bc6c:	f7ff ff92 	bl	801bb94 <HAL_RCC_GetSysClockFreq>
 801bc70:	4604      	mov	r4, r0
 801bc72:	f7ff f9f9 	bl	801b068 <LL_RCC_GetAHBPrescaler>
 801bc76:	4603      	mov	r3, r0
 801bc78:	091b      	lsrs	r3, r3, #4
 801bc7a:	f003 030f 	and.w	r3, r3, #15
 801bc7e:	4a03      	ldr	r2, [pc, #12]	; (801bc8c <HAL_RCC_GetHCLKFreq+0x24>)
 801bc80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bc84:	fbb4 f3f3 	udiv	r3, r4, r3
}
 801bc88:	4618      	mov	r0, r3
 801bc8a:	bd98      	pop	{r3, r4, r7, pc}
 801bc8c:	08028bdc 	.word	0x08028bdc

0801bc90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801bc90:	b598      	push	{r3, r4, r7, lr}
 801bc92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 801bc94:	f7ff ffe8 	bl	801bc68 <HAL_RCC_GetHCLKFreq>
 801bc98:	4604      	mov	r4, r0
 801bc9a:	f7ff fa18 	bl	801b0ce <LL_RCC_GetAPB2Prescaler>
 801bc9e:	4603      	mov	r3, r0
 801bca0:	0adb      	lsrs	r3, r3, #11
 801bca2:	f003 0307 	and.w	r3, r3, #7
 801bca6:	4a04      	ldr	r2, [pc, #16]	; (801bcb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 801bca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bcac:	f003 031f 	and.w	r3, r3, #31
 801bcb0:	fa24 f303 	lsr.w	r3, r4, r3
}
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	bd98      	pop	{r3, r4, r7, pc}
 801bcb8:	08028c1c 	.word	0x08028c1c

0801bcbc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801bcbc:	b580      	push	{r7, lr}
 801bcbe:	b082      	sub	sp, #8
 801bcc0:	af00      	add	r7, sp, #0
 801bcc2:	6078      	str	r0, [r7, #4]
 801bcc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	226f      	movs	r2, #111	; 0x6f
 801bcca:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 801bccc:	f7ff f957 	bl	801af7e <LL_RCC_GetSysClkSource>
 801bcd0:	4602      	mov	r2, r0
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 801bcd6:	f7ff f9c7 	bl	801b068 <LL_RCC_GetAHBPrescaler>
 801bcda:	4602      	mov	r2, r0
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 801bce0:	f7ff f9e9 	bl	801b0b6 <LL_RCC_GetAPB1Prescaler>
 801bce4:	4602      	mov	r2, r0
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 801bcea:	f7ff f9f0 	bl	801b0ce <LL_RCC_GetAPB2Prescaler>
 801bcee:	4602      	mov	r2, r0
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 801bcf4:	f7ff f9c4 	bl	801b080 <LL_C2_RCC_GetAHBPrescaler>
 801bcf8:	4602      	mov	r2, r0
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 801bcfe:	f7ff f9cc 	bl	801b09a <LL_RCC_GetAHB4Prescaler>
 801bd02:	4602      	mov	r2, r0
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 801bd08:	4b04      	ldr	r3, [pc, #16]	; (801bd1c <HAL_RCC_GetClockConfig+0x60>)
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	f003 0207 	and.w	r2, r3, #7
 801bd10:	683b      	ldr	r3, [r7, #0]
 801bd12:	601a      	str	r2, [r3, #0]
}
 801bd14:	bf00      	nop
 801bd16:	3708      	adds	r7, #8
 801bd18:	46bd      	mov	sp, r7
 801bd1a:	bd80      	pop	{r7, pc}
 801bd1c:	58004000 	.word	0x58004000

0801bd20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 801bd20:	b590      	push	{r4, r7, lr}
 801bd22:	b085      	sub	sp, #20
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	2bb0      	cmp	r3, #176	; 0xb0
 801bd2c:	d903      	bls.n	801bd36 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 801bd2e:	4b15      	ldr	r3, [pc, #84]	; (801bd84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801bd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd32:	60fb      	str	r3, [r7, #12]
 801bd34:	e007      	b.n	801bd46 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	091b      	lsrs	r3, r3, #4
 801bd3a:	f003 030f 	and.w	r3, r3, #15
 801bd3e:	4a11      	ldr	r2, [pc, #68]	; (801bd84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801bd40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bd44:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801bd46:	f7ff f9a8 	bl	801b09a <LL_RCC_GetAHB4Prescaler>
 801bd4a:	4603      	mov	r3, r0
 801bd4c:	091b      	lsrs	r3, r3, #4
 801bd4e:	f003 030f 	and.w	r3, r3, #15
 801bd52:	4a0d      	ldr	r2, [pc, #52]	; (801bd88 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 801bd54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bd58:	68fa      	ldr	r2, [r7, #12]
 801bd5a:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd5e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 801bd60:	68bb      	ldr	r3, [r7, #8]
 801bd62:	4a0a      	ldr	r2, [pc, #40]	; (801bd8c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 801bd64:	fba2 2303 	umull	r2, r3, r2, r3
 801bd68:	0c9c      	lsrs	r4, r3, #18
 801bd6a:	f7fe fe83 	bl	801aa74 <HAL_PWREx_GetVoltageRange>
 801bd6e:	4603      	mov	r3, r0
 801bd70:	4619      	mov	r1, r3
 801bd72:	4620      	mov	r0, r4
 801bd74:	f000 f80c 	bl	801bd90 <RCC_SetFlashLatency>
 801bd78:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 801bd7a:	4618      	mov	r0, r3
 801bd7c:	3714      	adds	r7, #20
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	bd90      	pop	{r4, r7, pc}
 801bd82:	bf00      	nop
 801bd84:	08028c3c 	.word	0x08028c3c
 801bd88:	08028bdc 	.word	0x08028bdc
 801bd8c:	431bde83 	.word	0x431bde83

0801bd90 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 801bd90:	b590      	push	{r4, r7, lr}
 801bd92:	b093      	sub	sp, #76	; 0x4c
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	6078      	str	r0, [r7, #4]
 801bd98:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801bd9a:	4b39      	ldr	r3, [pc, #228]	; (801be80 <RCC_SetFlashLatency+0xf0>)
 801bd9c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 801bda0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bda2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 801bda6:	4a37      	ldr	r2, [pc, #220]	; (801be84 <RCC_SetFlashLatency+0xf4>)
 801bda8:	f107 031c 	add.w	r3, r7, #28
 801bdac:	ca07      	ldmia	r2, {r0, r1, r2}
 801bdae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801bdb2:	4b35      	ldr	r3, [pc, #212]	; (801be88 <RCC_SetFlashLatency+0xf8>)
 801bdb4:	f107 040c 	add.w	r4, r7, #12
 801bdb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bdba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801bdc2:	683b      	ldr	r3, [r7, #0]
 801bdc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bdc8:	d11c      	bne.n	801be04 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801bdca:	2300      	movs	r3, #0
 801bdcc:	643b      	str	r3, [r7, #64]	; 0x40
 801bdce:	e015      	b.n	801bdfc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 801bdd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bdd2:	009b      	lsls	r3, r3, #2
 801bdd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801bdd8:	4413      	add	r3, r2
 801bdda:	f853 3c20 	ldr.w	r3, [r3, #-32]
 801bdde:	687a      	ldr	r2, [r7, #4]
 801bde0:	429a      	cmp	r2, r3
 801bde2:	d808      	bhi.n	801bdf6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801bde4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bde6:	009b      	lsls	r3, r3, #2
 801bde8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801bdec:	4413      	add	r3, r2
 801bdee:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801bdf2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801bdf4:	e022      	b.n	801be3c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801bdf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bdf8:	3301      	adds	r3, #1
 801bdfa:	643b      	str	r3, [r7, #64]	; 0x40
 801bdfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bdfe:	2b03      	cmp	r3, #3
 801be00:	d9e6      	bls.n	801bdd0 <RCC_SetFlashLatency+0x40>
 801be02:	e01b      	b.n	801be3c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801be04:	2300      	movs	r3, #0
 801be06:	63fb      	str	r3, [r7, #60]	; 0x3c
 801be08:	e015      	b.n	801be36 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801be0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be0c:	009b      	lsls	r3, r3, #2
 801be0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801be12:	4413      	add	r3, r2
 801be14:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801be18:	687a      	ldr	r2, [r7, #4]
 801be1a:	429a      	cmp	r2, r3
 801be1c:	d808      	bhi.n	801be30 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801be1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be20:	009b      	lsls	r3, r3, #2
 801be22:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801be26:	4413      	add	r3, r2
 801be28:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801be2c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801be2e:	e005      	b.n	801be3c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801be30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be32:	3301      	adds	r3, #1
 801be34:	63fb      	str	r3, [r7, #60]	; 0x3c
 801be36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be38:	2b02      	cmp	r3, #2
 801be3a:	d9e6      	bls.n	801be0a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 801be3c:	4b13      	ldr	r3, [pc, #76]	; (801be8c <RCC_SetFlashLatency+0xfc>)
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	f023 0207 	bic.w	r2, r3, #7
 801be44:	4911      	ldr	r1, [pc, #68]	; (801be8c <RCC_SetFlashLatency+0xfc>)
 801be46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801be48:	4313      	orrs	r3, r2
 801be4a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801be4c:	f7fa f9c6 	bl	80161dc <HAL_GetTick>
 801be50:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801be52:	e008      	b.n	801be66 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801be54:	f7fa f9c2 	bl	80161dc <HAL_GetTick>
 801be58:	4602      	mov	r2, r0
 801be5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be5c:	1ad3      	subs	r3, r2, r3
 801be5e:	2b02      	cmp	r3, #2
 801be60:	d901      	bls.n	801be66 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 801be62:	2303      	movs	r3, #3
 801be64:	e007      	b.n	801be76 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801be66:	4b09      	ldr	r3, [pc, #36]	; (801be8c <RCC_SetFlashLatency+0xfc>)
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	f003 0307 	and.w	r3, r3, #7
 801be6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801be70:	429a      	cmp	r2, r3
 801be72:	d1ef      	bne.n	801be54 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 801be74:	2300      	movs	r3, #0
}
 801be76:	4618      	mov	r0, r3
 801be78:	374c      	adds	r7, #76	; 0x4c
 801be7a:	46bd      	mov	sp, r7
 801be7c:	bd90      	pop	{r4, r7, pc}
 801be7e:	bf00      	nop
 801be80:	08027ff0 	.word	0x08027ff0
 801be84:	08028000 	.word	0x08028000
 801be88:	0802800c 	.word	0x0802800c
 801be8c:	58004000 	.word	0x58004000

0801be90 <LL_RCC_LSE_IsEnabled>:
{
 801be90:	b480      	push	{r7}
 801be92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 801be94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801be98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801be9c:	f003 0301 	and.w	r3, r3, #1
 801bea0:	2b01      	cmp	r3, #1
 801bea2:	d101      	bne.n	801bea8 <LL_RCC_LSE_IsEnabled+0x18>
 801bea4:	2301      	movs	r3, #1
 801bea6:	e000      	b.n	801beaa <LL_RCC_LSE_IsEnabled+0x1a>
 801bea8:	2300      	movs	r3, #0
}
 801beaa:	4618      	mov	r0, r3
 801beac:	46bd      	mov	sp, r7
 801beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beb2:	4770      	bx	lr

0801beb4 <LL_RCC_LSE_IsReady>:
{
 801beb4:	b480      	push	{r7}
 801beb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801beb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bec0:	f003 0302 	and.w	r3, r3, #2
 801bec4:	2b02      	cmp	r3, #2
 801bec6:	d101      	bne.n	801becc <LL_RCC_LSE_IsReady+0x18>
 801bec8:	2301      	movs	r3, #1
 801beca:	e000      	b.n	801bece <LL_RCC_LSE_IsReady+0x1a>
 801becc:	2300      	movs	r3, #0
}
 801bece:	4618      	mov	r0, r3
 801bed0:	46bd      	mov	sp, r7
 801bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bed6:	4770      	bx	lr

0801bed8 <LL_RCC_SetRFWKPClockSource>:
{
 801bed8:	b480      	push	{r7}
 801beda:	b083      	sub	sp, #12
 801bedc:	af00      	add	r7, sp, #0
 801bede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 801bee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bee8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801beec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	4313      	orrs	r3, r2
 801bef4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 801bef8:	bf00      	nop
 801befa:	370c      	adds	r7, #12
 801befc:	46bd      	mov	sp, r7
 801befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf02:	4770      	bx	lr

0801bf04 <LL_RCC_SetSMPSClockSource>:
{
 801bf04:	b480      	push	{r7}
 801bf06:	b083      	sub	sp, #12
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801bf0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf12:	f023 0203 	bic.w	r2, r3, #3
 801bf16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	4313      	orrs	r3, r2
 801bf1e:	624b      	str	r3, [r1, #36]	; 0x24
}
 801bf20:	bf00      	nop
 801bf22:	370c      	adds	r7, #12
 801bf24:	46bd      	mov	sp, r7
 801bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf2a:	4770      	bx	lr

0801bf2c <LL_RCC_SetSMPSPrescaler>:
{
 801bf2c:	b480      	push	{r7}
 801bf2e:	b083      	sub	sp, #12
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 801bf34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bf38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801bf3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	4313      	orrs	r3, r2
 801bf46:	624b      	str	r3, [r1, #36]	; 0x24
}
 801bf48:	bf00      	nop
 801bf4a:	370c      	adds	r7, #12
 801bf4c:	46bd      	mov	sp, r7
 801bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf52:	4770      	bx	lr

0801bf54 <LL_RCC_SetUSARTClockSource>:
{
 801bf54:	b480      	push	{r7}
 801bf56:	b083      	sub	sp, #12
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801bf5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bf60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bf64:	f023 0203 	bic.w	r2, r3, #3
 801bf68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	4313      	orrs	r3, r2
 801bf70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801bf74:	bf00      	nop
 801bf76:	370c      	adds	r7, #12
 801bf78:	46bd      	mov	sp, r7
 801bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf7e:	4770      	bx	lr

0801bf80 <LL_RCC_SetLPUARTClockSource>:
{
 801bf80:	b480      	push	{r7}
 801bf82:	b083      	sub	sp, #12
 801bf84:	af00      	add	r7, sp, #0
 801bf86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801bf88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bf8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bf90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801bf94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	4313      	orrs	r3, r2
 801bf9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801bfa0:	bf00      	nop
 801bfa2:	370c      	adds	r7, #12
 801bfa4:	46bd      	mov	sp, r7
 801bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfaa:	4770      	bx	lr

0801bfac <LL_RCC_SetI2CClockSource>:
{
 801bfac:	b480      	push	{r7}
 801bfae:	b083      	sub	sp, #12
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801bfb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bfb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	091b      	lsrs	r3, r3, #4
 801bfc0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801bfc4:	43db      	mvns	r3, r3
 801bfc6:	401a      	ands	r2, r3
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	011b      	lsls	r3, r3, #4
 801bfcc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801bfd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bfd4:	4313      	orrs	r3, r2
 801bfd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801bfda:	bf00      	nop
 801bfdc:	370c      	adds	r7, #12
 801bfde:	46bd      	mov	sp, r7
 801bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe4:	4770      	bx	lr

0801bfe6 <LL_RCC_SetLPTIMClockSource>:
{
 801bfe6:	b480      	push	{r7}
 801bfe8:	b083      	sub	sp, #12
 801bfea:	af00      	add	r7, sp, #0
 801bfec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801bfee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bff2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	0c1b      	lsrs	r3, r3, #16
 801bffa:	041b      	lsls	r3, r3, #16
 801bffc:	43db      	mvns	r3, r3
 801bffe:	401a      	ands	r2, r3
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	041b      	lsls	r3, r3, #16
 801c004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c008:	4313      	orrs	r3, r2
 801c00a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c00e:	bf00      	nop
 801c010:	370c      	adds	r7, #12
 801c012:	46bd      	mov	sp, r7
 801c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c018:	4770      	bx	lr

0801c01a <LL_RCC_SetSAIClockSource>:
{
 801c01a:	b480      	push	{r7}
 801c01c:	b083      	sub	sp, #12
 801c01e:	af00      	add	r7, sp, #0
 801c020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 801c022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c02a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801c02e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	4313      	orrs	r3, r2
 801c036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c03a:	bf00      	nop
 801c03c:	370c      	adds	r7, #12
 801c03e:	46bd      	mov	sp, r7
 801c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c044:	4770      	bx	lr

0801c046 <LL_RCC_SetRNGClockSource>:
{
 801c046:	b480      	push	{r7}
 801c048:	b083      	sub	sp, #12
 801c04a:	af00      	add	r7, sp, #0
 801c04c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801c04e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c056:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801c05a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	4313      	orrs	r3, r2
 801c062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c066:	bf00      	nop
 801c068:	370c      	adds	r7, #12
 801c06a:	46bd      	mov	sp, r7
 801c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c070:	4770      	bx	lr

0801c072 <LL_RCC_SetCLK48ClockSource>:
{
 801c072:	b480      	push	{r7}
 801c074:	b083      	sub	sp, #12
 801c076:	af00      	add	r7, sp, #0
 801c078:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801c07a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c082:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801c086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	4313      	orrs	r3, r2
 801c08e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c092:	bf00      	nop
 801c094:	370c      	adds	r7, #12
 801c096:	46bd      	mov	sp, r7
 801c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c09c:	4770      	bx	lr

0801c09e <LL_RCC_SetUSBClockSource>:
{
 801c09e:	b580      	push	{r7, lr}
 801c0a0:	b082      	sub	sp, #8
 801c0a2:	af00      	add	r7, sp, #0
 801c0a4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 801c0a6:	6878      	ldr	r0, [r7, #4]
 801c0a8:	f7ff ffe3 	bl	801c072 <LL_RCC_SetCLK48ClockSource>
}
 801c0ac:	bf00      	nop
 801c0ae:	3708      	adds	r7, #8
 801c0b0:	46bd      	mov	sp, r7
 801c0b2:	bd80      	pop	{r7, pc}

0801c0b4 <LL_RCC_SetADCClockSource>:
{
 801c0b4:	b480      	push	{r7}
 801c0b6:	b083      	sub	sp, #12
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801c0bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c0c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c0c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801c0c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	4313      	orrs	r3, r2
 801c0d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801c0d4:	bf00      	nop
 801c0d6:	370c      	adds	r7, #12
 801c0d8:	46bd      	mov	sp, r7
 801c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0de:	4770      	bx	lr

0801c0e0 <LL_RCC_SetRTCClockSource>:
{
 801c0e0:	b480      	push	{r7}
 801c0e2:	b083      	sub	sp, #12
 801c0e4:	af00      	add	r7, sp, #0
 801c0e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 801c0e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c0f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801c0f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	4313      	orrs	r3, r2
 801c0fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 801c100:	bf00      	nop
 801c102:	370c      	adds	r7, #12
 801c104:	46bd      	mov	sp, r7
 801c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c10a:	4770      	bx	lr

0801c10c <LL_RCC_GetRTCClockSource>:
{
 801c10c:	b480      	push	{r7}
 801c10e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801c110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c118:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 801c11c:	4618      	mov	r0, r3
 801c11e:	46bd      	mov	sp, r7
 801c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c124:	4770      	bx	lr

0801c126 <LL_RCC_ForceBackupDomainReset>:
{
 801c126:	b480      	push	{r7}
 801c128:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801c12a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c12e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c13a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801c13e:	bf00      	nop
 801c140:	46bd      	mov	sp, r7
 801c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c146:	4770      	bx	lr

0801c148 <LL_RCC_ReleaseBackupDomainReset>:
{
 801c148:	b480      	push	{r7}
 801c14a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801c14c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c15c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801c160:	bf00      	nop
 801c162:	46bd      	mov	sp, r7
 801c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c168:	4770      	bx	lr

0801c16a <LL_RCC_PLLSAI1_Enable>:
{
 801c16a:	b480      	push	{r7}
 801c16c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801c16e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c178:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801c17c:	6013      	str	r3, [r2, #0]
}
 801c17e:	bf00      	nop
 801c180:	46bd      	mov	sp, r7
 801c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c186:	4770      	bx	lr

0801c188 <LL_RCC_PLLSAI1_Disable>:
{
 801c188:	b480      	push	{r7}
 801c18a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801c18c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c196:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801c19a:	6013      	str	r3, [r2, #0]
}
 801c19c:	bf00      	nop
 801c19e:	46bd      	mov	sp, r7
 801c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1a4:	4770      	bx	lr

0801c1a6 <LL_RCC_PLLSAI1_IsReady>:
{
 801c1a6:	b480      	push	{r7}
 801c1a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 801c1aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c1b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801c1b8:	d101      	bne.n	801c1be <LL_RCC_PLLSAI1_IsReady+0x18>
 801c1ba:	2301      	movs	r3, #1
 801c1bc:	e000      	b.n	801c1c0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 801c1be:	2300      	movs	r3, #0
}
 801c1c0:	4618      	mov	r0, r3
 801c1c2:	46bd      	mov	sp, r7
 801c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1c8:	4770      	bx	lr

0801c1ca <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c1ca:	b580      	push	{r7, lr}
 801c1cc:	b088      	sub	sp, #32
 801c1ce:	af00      	add	r7, sp, #0
 801c1d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 801c1d6:	2300      	movs	r3, #0
 801c1d8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d033      	beq.n	801c24e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c1ee:	d00c      	beq.n	801c20a <HAL_RCCEx_PeriphCLKConfig+0x40>
 801c1f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c1f4:	d802      	bhi.n	801c1fc <HAL_RCCEx_PeriphCLKConfig+0x32>
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d010      	beq.n	801c21c <HAL_RCCEx_PeriphCLKConfig+0x52>
 801c1fa:	e017      	b.n	801c22c <HAL_RCCEx_PeriphCLKConfig+0x62>
 801c1fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c200:	d017      	beq.n	801c232 <HAL_RCCEx_PeriphCLKConfig+0x68>
 801c202:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801c206:	d016      	beq.n	801c236 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 801c208:	e010      	b.n	801c22c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801c20a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c20e:	68db      	ldr	r3, [r3, #12]
 801c210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c218:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801c21a:	e00d      	b.n	801c238 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	3304      	adds	r3, #4
 801c220:	4618      	mov	r0, r3
 801c222:	f000 f947 	bl	801c4b4 <RCCEx_PLLSAI1_ConfigNP>
 801c226:	4603      	mov	r3, r0
 801c228:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801c22a:	e005      	b.n	801c238 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801c22c:	2301      	movs	r3, #1
 801c22e:	77fb      	strb	r3, [r7, #31]
        break;
 801c230:	e002      	b.n	801c238 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 801c232:	bf00      	nop
 801c234:	e000      	b.n	801c238 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 801c236:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c238:	7ffb      	ldrb	r3, [r7, #31]
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d105      	bne.n	801c24a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c242:	4618      	mov	r0, r3
 801c244:	f7ff fee9 	bl	801c01a <LL_RCC_SetSAIClockSource>
 801c248:	e001      	b.n	801c24e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c24a:	7ffb      	ldrb	r3, [r7, #31]
 801c24c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c256:	2b00      	cmp	r3, #0
 801c258:	d046      	beq.n	801c2e8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801c25a:	f7ff ff57 	bl	801c10c <LL_RCC_GetRTCClockSource>
 801c25e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c264:	69ba      	ldr	r2, [r7, #24]
 801c266:	429a      	cmp	r2, r3
 801c268:	d03c      	beq.n	801c2e4 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801c26a:	f7fe fbbf 	bl	801a9ec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 801c26e:	69bb      	ldr	r3, [r7, #24]
 801c270:	2b00      	cmp	r3, #0
 801c272:	d105      	bne.n	801c280 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c278:	4618      	mov	r0, r3
 801c27a:	f7ff ff31 	bl	801c0e0 <LL_RCC_SetRTCClockSource>
 801c27e:	e02e      	b.n	801c2de <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 801c280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c288:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801c28a:	f7ff ff4c 	bl	801c126 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 801c28e:	f7ff ff5b 	bl	801c148 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801c292:	697b      	ldr	r3, [r7, #20]
 801c294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c29c:	4313      	orrs	r3, r2
 801c29e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 801c2a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c2a4:	697b      	ldr	r3, [r7, #20]
 801c2a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801c2aa:	f7ff fdf1 	bl	801be90 <LL_RCC_LSE_IsEnabled>
 801c2ae:	4603      	mov	r3, r0
 801c2b0:	2b01      	cmp	r3, #1
 801c2b2:	d114      	bne.n	801c2de <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c2b4:	f7f9 ff92 	bl	80161dc <HAL_GetTick>
 801c2b8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801c2ba:	e00b      	b.n	801c2d4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c2bc:	f7f9 ff8e 	bl	80161dc <HAL_GetTick>
 801c2c0:	4602      	mov	r2, r0
 801c2c2:	693b      	ldr	r3, [r7, #16]
 801c2c4:	1ad3      	subs	r3, r2, r3
 801c2c6:	f241 3288 	movw	r2, #5000	; 0x1388
 801c2ca:	4293      	cmp	r3, r2
 801c2cc:	d902      	bls.n	801c2d4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 801c2ce:	2303      	movs	r3, #3
 801c2d0:	77fb      	strb	r3, [r7, #31]
              break;
 801c2d2:	e004      	b.n	801c2de <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 801c2d4:	f7ff fdee 	bl	801beb4 <LL_RCC_LSE_IsReady>
 801c2d8:	4603      	mov	r3, r0
 801c2da:	2b01      	cmp	r3, #1
 801c2dc:	d1ee      	bne.n	801c2bc <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 801c2de:	7ffb      	ldrb	r3, [r7, #31]
 801c2e0:	77bb      	strb	r3, [r7, #30]
 801c2e2:	e001      	b.n	801c2e8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c2e4:	7ffb      	ldrb	r3, [r7, #31]
 801c2e6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	f003 0301 	and.w	r3, r3, #1
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d004      	beq.n	801c2fe <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	699b      	ldr	r3, [r3, #24]
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	f7ff fe2b 	bl	801bf54 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	f003 0302 	and.w	r3, r3, #2
 801c306:	2b00      	cmp	r3, #0
 801c308:	d004      	beq.n	801c314 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	69db      	ldr	r3, [r3, #28]
 801c30e:	4618      	mov	r0, r3
 801c310:	f7ff fe36 	bl	801bf80 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	f003 0310 	and.w	r3, r3, #16
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d004      	beq.n	801c32a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c324:	4618      	mov	r0, r3
 801c326:	f7ff fe5e 	bl	801bfe6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	f003 0320 	and.w	r3, r3, #32
 801c332:	2b00      	cmp	r3, #0
 801c334:	d004      	beq.n	801c340 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c33a:	4618      	mov	r0, r3
 801c33c:	f7ff fe53 	bl	801bfe6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	f003 0304 	and.w	r3, r3, #4
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d004      	beq.n	801c356 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	6a1b      	ldr	r3, [r3, #32]
 801c350:	4618      	mov	r0, r3
 801c352:	f7ff fe2b 	bl	801bfac <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	f003 0308 	and.w	r3, r3, #8
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d004      	beq.n	801c36c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c366:	4618      	mov	r0, r3
 801c368:	f7ff fe20 	bl	801bfac <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c374:	2b00      	cmp	r3, #0
 801c376:	d022      	beq.n	801c3be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c37c:	4618      	mov	r0, r3
 801c37e:	f7ff fe8e 	bl	801c09e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801c38a:	d107      	bne.n	801c39c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 801c38c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c390:	68db      	ldr	r3, [r3, #12]
 801c392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c39a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c3a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c3a4:	d10b      	bne.n	801c3be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	3304      	adds	r3, #4
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	f000 f8dd 	bl	801c56a <RCCEx_PLLSAI1_ConfigNQ>
 801c3b0:	4603      	mov	r3, r0
 801c3b2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801c3b4:	7ffb      	ldrb	r3, [r7, #31]
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d001      	beq.n	801c3be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 801c3ba:	7ffb      	ldrb	r3, [r7, #31]
 801c3bc:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d02b      	beq.n	801c422 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c3d2:	d008      	beq.n	801c3e6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c3dc:	d003      	beq.n	801c3e6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d105      	bne.n	801c3f2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	f7ff fe2b 	bl	801c046 <LL_RCC_SetRNGClockSource>
 801c3f0:	e00a      	b.n	801c408 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c3fa:	60fb      	str	r3, [r7, #12]
 801c3fc:	2000      	movs	r0, #0
 801c3fe:	f7ff fe22 	bl	801c046 <LL_RCC_SetRNGClockSource>
 801c402:	68f8      	ldr	r0, [r7, #12]
 801c404:	f7ff fe35 	bl	801c072 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c40c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 801c410:	d107      	bne.n	801c422 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 801c412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c416:	68db      	ldr	r3, [r3, #12]
 801c418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c41c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c420:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d022      	beq.n	801c474 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c432:	4618      	mov	r0, r3
 801c434:	f7ff fe3e 	bl	801c0b4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c43c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c440:	d107      	bne.n	801c452 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801c442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c446:	68db      	ldr	r3, [r3, #12]
 801c448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801c44c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c450:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c45a:	d10b      	bne.n	801c474 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	3304      	adds	r3, #4
 801c460:	4618      	mov	r0, r3
 801c462:	f000 f8dd 	bl	801c620 <RCCEx_PLLSAI1_ConfigNR>
 801c466:	4603      	mov	r3, r0
 801c468:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801c46a:	7ffb      	ldrb	r3, [r7, #31]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d001      	beq.n	801c474 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 801c470:	7ffb      	ldrb	r3, [r7, #31]
 801c472:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d004      	beq.n	801c48a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c484:	4618      	mov	r0, r3
 801c486:	f7ff fd27 	bl	801bed8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c492:	2b00      	cmp	r3, #0
 801c494:	d009      	beq.n	801c4aa <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c49a:	4618      	mov	r0, r3
 801c49c:	f7ff fd46 	bl	801bf2c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c4a4:	4618      	mov	r0, r3
 801c4a6:	f7ff fd2d 	bl	801bf04 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 801c4aa:	7fbb      	ldrb	r3, [r7, #30]
}
 801c4ac:	4618      	mov	r0, r3
 801c4ae:	3720      	adds	r7, #32
 801c4b0:	46bd      	mov	sp, r7
 801c4b2:	bd80      	pop	{r7, pc}

0801c4b4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b084      	sub	sp, #16
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801c4bc:	2300      	movs	r3, #0
 801c4be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801c4c0:	f7ff fe62 	bl	801c188 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801c4c4:	f7f9 fe8a 	bl	80161dc <HAL_GetTick>
 801c4c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c4ca:	e009      	b.n	801c4e0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c4cc:	f7f9 fe86 	bl	80161dc <HAL_GetTick>
 801c4d0:	4602      	mov	r2, r0
 801c4d2:	68bb      	ldr	r3, [r7, #8]
 801c4d4:	1ad3      	subs	r3, r2, r3
 801c4d6:	2b02      	cmp	r3, #2
 801c4d8:	d902      	bls.n	801c4e0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 801c4da:	2303      	movs	r3, #3
 801c4dc:	73fb      	strb	r3, [r7, #15]
      break;
 801c4de:	e004      	b.n	801c4ea <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c4e0:	f7ff fe61 	bl	801c1a6 <LL_RCC_PLLSAI1_IsReady>
 801c4e4:	4603      	mov	r3, r0
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d1f0      	bne.n	801c4cc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801c4ea:	7bfb      	ldrb	r3, [r7, #15]
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d137      	bne.n	801c560 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801c4f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c4f4:	691b      	ldr	r3, [r3, #16]
 801c4f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	021b      	lsls	r3, r3, #8
 801c500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c504:	4313      	orrs	r3, r2
 801c506:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801c508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c50c:	691b      	ldr	r3, [r3, #16]
 801c50e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	685b      	ldr	r3, [r3, #4]
 801c516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c51a:	4313      	orrs	r3, r2
 801c51c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801c51e:	f7ff fe24 	bl	801c16a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c522:	f7f9 fe5b 	bl	80161dc <HAL_GetTick>
 801c526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c528:	e009      	b.n	801c53e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c52a:	f7f9 fe57 	bl	80161dc <HAL_GetTick>
 801c52e:	4602      	mov	r2, r0
 801c530:	68bb      	ldr	r3, [r7, #8]
 801c532:	1ad3      	subs	r3, r2, r3
 801c534:	2b02      	cmp	r3, #2
 801c536:	d902      	bls.n	801c53e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801c538:	2303      	movs	r3, #3
 801c53a:	73fb      	strb	r3, [r7, #15]
        break;
 801c53c:	e004      	b.n	801c548 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c53e:	f7ff fe32 	bl	801c1a6 <LL_RCC_PLLSAI1_IsReady>
 801c542:	4603      	mov	r3, r0
 801c544:	2b01      	cmp	r3, #1
 801c546:	d1f0      	bne.n	801c52a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801c548:	7bfb      	ldrb	r3, [r7, #15]
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d108      	bne.n	801c560 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801c54e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c552:	691a      	ldr	r2, [r3, #16]
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	691b      	ldr	r3, [r3, #16]
 801c558:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c55c:	4313      	orrs	r3, r2
 801c55e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801c560:	7bfb      	ldrb	r3, [r7, #15]
}
 801c562:	4618      	mov	r0, r3
 801c564:	3710      	adds	r7, #16
 801c566:	46bd      	mov	sp, r7
 801c568:	bd80      	pop	{r7, pc}

0801c56a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801c56a:	b580      	push	{r7, lr}
 801c56c:	b084      	sub	sp, #16
 801c56e:	af00      	add	r7, sp, #0
 801c570:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801c572:	2300      	movs	r3, #0
 801c574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801c576:	f7ff fe07 	bl	801c188 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801c57a:	f7f9 fe2f 	bl	80161dc <HAL_GetTick>
 801c57e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c580:	e009      	b.n	801c596 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c582:	f7f9 fe2b 	bl	80161dc <HAL_GetTick>
 801c586:	4602      	mov	r2, r0
 801c588:	68bb      	ldr	r3, [r7, #8]
 801c58a:	1ad3      	subs	r3, r2, r3
 801c58c:	2b02      	cmp	r3, #2
 801c58e:	d902      	bls.n	801c596 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 801c590:	2303      	movs	r3, #3
 801c592:	73fb      	strb	r3, [r7, #15]
      break;
 801c594:	e004      	b.n	801c5a0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c596:	f7ff fe06 	bl	801c1a6 <LL_RCC_PLLSAI1_IsReady>
 801c59a:	4603      	mov	r3, r0
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d1f0      	bne.n	801c582 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 801c5a0:	7bfb      	ldrb	r3, [r7, #15]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d137      	bne.n	801c616 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801c5a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c5aa:	691b      	ldr	r3, [r3, #16]
 801c5ac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	021b      	lsls	r3, r3, #8
 801c5b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c5ba:	4313      	orrs	r3, r2
 801c5bc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801c5be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c5c2:	691b      	ldr	r3, [r3, #16]
 801c5c4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	689b      	ldr	r3, [r3, #8]
 801c5cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c5d0:	4313      	orrs	r3, r2
 801c5d2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801c5d4:	f7ff fdc9 	bl	801c16a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c5d8:	f7f9 fe00 	bl	80161dc <HAL_GetTick>
 801c5dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c5de:	e009      	b.n	801c5f4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c5e0:	f7f9 fdfc 	bl	80161dc <HAL_GetTick>
 801c5e4:	4602      	mov	r2, r0
 801c5e6:	68bb      	ldr	r3, [r7, #8]
 801c5e8:	1ad3      	subs	r3, r2, r3
 801c5ea:	2b02      	cmp	r3, #2
 801c5ec:	d902      	bls.n	801c5f4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 801c5ee:	2303      	movs	r3, #3
 801c5f0:	73fb      	strb	r3, [r7, #15]
        break;
 801c5f2:	e004      	b.n	801c5fe <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c5f4:	f7ff fdd7 	bl	801c1a6 <LL_RCC_PLLSAI1_IsReady>
 801c5f8:	4603      	mov	r3, r0
 801c5fa:	2b01      	cmp	r3, #1
 801c5fc:	d1f0      	bne.n	801c5e0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 801c5fe:	7bfb      	ldrb	r3, [r7, #15]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d108      	bne.n	801c616 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801c604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c608:	691a      	ldr	r2, [r3, #16]
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	691b      	ldr	r3, [r3, #16]
 801c60e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c612:	4313      	orrs	r3, r2
 801c614:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801c616:	7bfb      	ldrb	r3, [r7, #15]
}
 801c618:	4618      	mov	r0, r3
 801c61a:	3710      	adds	r7, #16
 801c61c:	46bd      	mov	sp, r7
 801c61e:	bd80      	pop	{r7, pc}

0801c620 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801c620:	b580      	push	{r7, lr}
 801c622:	b084      	sub	sp, #16
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801c628:	2300      	movs	r3, #0
 801c62a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801c62c:	f7ff fdac 	bl	801c188 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801c630:	f7f9 fdd4 	bl	80161dc <HAL_GetTick>
 801c634:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c636:	e009      	b.n	801c64c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c638:	f7f9 fdd0 	bl	80161dc <HAL_GetTick>
 801c63c:	4602      	mov	r2, r0
 801c63e:	68bb      	ldr	r3, [r7, #8]
 801c640:	1ad3      	subs	r3, r2, r3
 801c642:	2b02      	cmp	r3, #2
 801c644:	d902      	bls.n	801c64c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 801c646:	2303      	movs	r3, #3
 801c648:	73fb      	strb	r3, [r7, #15]
      break;
 801c64a:	e004      	b.n	801c656 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801c64c:	f7ff fdab 	bl	801c1a6 <LL_RCC_PLLSAI1_IsReady>
 801c650:	4603      	mov	r3, r0
 801c652:	2b00      	cmp	r3, #0
 801c654:	d1f0      	bne.n	801c638 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 801c656:	7bfb      	ldrb	r3, [r7, #15]
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d137      	bne.n	801c6cc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801c65c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c660:	691b      	ldr	r3, [r3, #16]
 801c662:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	021b      	lsls	r3, r3, #8
 801c66c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c670:	4313      	orrs	r3, r2
 801c672:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 801c674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c678:	691b      	ldr	r3, [r3, #16]
 801c67a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	68db      	ldr	r3, [r3, #12]
 801c682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c686:	4313      	orrs	r3, r2
 801c688:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801c68a:	f7ff fd6e 	bl	801c16a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c68e:	f7f9 fda5 	bl	80161dc <HAL_GetTick>
 801c692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c694:	e009      	b.n	801c6aa <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c696:	f7f9 fda1 	bl	80161dc <HAL_GetTick>
 801c69a:	4602      	mov	r2, r0
 801c69c:	68bb      	ldr	r3, [r7, #8]
 801c69e:	1ad3      	subs	r3, r2, r3
 801c6a0:	2b02      	cmp	r3, #2
 801c6a2:	d902      	bls.n	801c6aa <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 801c6a4:	2303      	movs	r3, #3
 801c6a6:	73fb      	strb	r3, [r7, #15]
        break;
 801c6a8:	e004      	b.n	801c6b4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801c6aa:	f7ff fd7c 	bl	801c1a6 <LL_RCC_PLLSAI1_IsReady>
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	2b01      	cmp	r3, #1
 801c6b2:	d1f0      	bne.n	801c696 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 801c6b4:	7bfb      	ldrb	r3, [r7, #15]
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d108      	bne.n	801c6cc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801c6ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801c6be:	691a      	ldr	r2, [r3, #16]
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	691b      	ldr	r3, [r3, #16]
 801c6c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801c6c8:	4313      	orrs	r3, r2
 801c6ca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801c6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c6ce:	4618      	mov	r0, r3
 801c6d0:	3710      	adds	r7, #16
 801c6d2:	46bd      	mov	sp, r7
 801c6d4:	bd80      	pop	{r7, pc}

0801c6d6 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801c6d6:	b580      	push	{r7, lr}
 801c6d8:	b082      	sub	sp, #8
 801c6da:	af00      	add	r7, sp, #0
 801c6dc:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d101      	bne.n	801c6e8 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 801c6e4:	2301      	movs	r3, #1
 801c6e6:	e090      	b.n	801c80a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801c6ee:	b2db      	uxtb	r3, r3
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d106      	bne.n	801c702 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	2200      	movs	r2, #0
 801c6f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801c6fc:	6878      	ldr	r0, [r7, #4]
 801c6fe:	f7f8 fba3 	bl	8014e48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	2202      	movs	r2, #2
 801c706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c70a:	687b      	ldr	r3, [r7, #4]
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	22ca      	movs	r2, #202	; 0xca
 801c710:	625a      	str	r2, [r3, #36]	; 0x24
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	2253      	movs	r2, #83	; 0x53
 801c718:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801c71a:	6878      	ldr	r0, [r7, #4]
 801c71c:	f000 faba 	bl	801cc94 <RTC_EnterInitMode>
 801c720:	4603      	mov	r3, r0
 801c722:	2b00      	cmp	r3, #0
 801c724:	d009      	beq.n	801c73a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	22ff      	movs	r2, #255	; 0xff
 801c72c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	2204      	movs	r2, #4
 801c732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 801c736:	2301      	movs	r3, #1
 801c738:	e067      	b.n	801c80a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	689b      	ldr	r3, [r3, #8]
 801c740:	687a      	ldr	r2, [r7, #4]
 801c742:	6812      	ldr	r2, [r2, #0]
 801c744:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c74c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	6899      	ldr	r1, [r3, #8]
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	685a      	ldr	r2, [r3, #4]
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	691b      	ldr	r3, [r3, #16]
 801c75c:	431a      	orrs	r2, r3
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	699b      	ldr	r3, [r3, #24]
 801c762:	431a      	orrs	r2, r3
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	681b      	ldr	r3, [r3, #0]
 801c768:	430a      	orrs	r2, r1
 801c76a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	687a      	ldr	r2, [r7, #4]
 801c772:	68d2      	ldr	r2, [r2, #12]
 801c774:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	6919      	ldr	r1, [r3, #16]
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	689b      	ldr	r3, [r3, #8]
 801c780:	041a      	lsls	r2, r3, #16
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	430a      	orrs	r2, r1
 801c788:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	68da      	ldr	r2, [r3, #12]
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c798:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	f022 0203 	bic.w	r2, r2, #3
 801c7a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	69da      	ldr	r2, [r3, #28]
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	695b      	ldr	r3, [r3, #20]
 801c7b8:	431a      	orrs	r2, r3
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	430a      	orrs	r2, r1
 801c7c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	689b      	ldr	r3, [r3, #8]
 801c7c8:	f003 0320 	and.w	r3, r3, #32
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d113      	bne.n	801c7f8 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c7d0:	6878      	ldr	r0, [r7, #4]
 801c7d2:	f000 fa39 	bl	801cc48 <HAL_RTC_WaitForSynchro>
 801c7d6:	4603      	mov	r3, r0
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d00d      	beq.n	801c7f8 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	22ff      	movs	r2, #255	; 0xff
 801c7e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	2204      	movs	r2, #4
 801c7e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	2200      	movs	r2, #0
 801c7f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801c7f4:	2301      	movs	r3, #1
 801c7f6:	e008      	b.n	801c80a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	22ff      	movs	r2, #255	; 0xff
 801c7fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	2201      	movs	r2, #1
 801c804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 801c808:	2300      	movs	r3, #0
  }
}
 801c80a:	4618      	mov	r0, r3
 801c80c:	3708      	adds	r7, #8
 801c80e:	46bd      	mov	sp, r7
 801c810:	bd80      	pop	{r7, pc}

0801c812 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c812:	b590      	push	{r4, r7, lr}
 801c814:	b087      	sub	sp, #28
 801c816:	af00      	add	r7, sp, #0
 801c818:	60f8      	str	r0, [r7, #12]
 801c81a:	60b9      	str	r1, [r7, #8]
 801c81c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	f893 3020 	ldrb.w	r3, [r3, #32]
 801c824:	2b01      	cmp	r3, #1
 801c826:	d101      	bne.n	801c82c <HAL_RTC_SetTime+0x1a>
 801c828:	2302      	movs	r3, #2
 801c82a:	e0b2      	b.n	801c992 <HAL_RTC_SetTime+0x180>
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	2201      	movs	r2, #1
 801c830:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	2202      	movs	r2, #2
 801c838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d126      	bne.n	801c890 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	689b      	ldr	r3, [r3, #8]
 801c848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d102      	bne.n	801c856 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c850:	68bb      	ldr	r3, [r7, #8]
 801c852:	2200      	movs	r2, #0
 801c854:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801c856:	68bb      	ldr	r3, [r7, #8]
 801c858:	781b      	ldrb	r3, [r3, #0]
 801c85a:	4618      	mov	r0, r3
 801c85c:	f000 fa44 	bl	801cce8 <RTC_ByteToBcd2>
 801c860:	4603      	mov	r3, r0
 801c862:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 801c864:	68bb      	ldr	r3, [r7, #8]
 801c866:	785b      	ldrb	r3, [r3, #1]
 801c868:	4618      	mov	r0, r3
 801c86a:	f000 fa3d 	bl	801cce8 <RTC_ByteToBcd2>
 801c86e:	4603      	mov	r3, r0
 801c870:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801c872:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801c874:	68bb      	ldr	r3, [r7, #8]
 801c876:	789b      	ldrb	r3, [r3, #2]
 801c878:	4618      	mov	r0, r3
 801c87a:	f000 fa35 	bl	801cce8 <RTC_ByteToBcd2>
 801c87e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 801c880:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 801c884:	68bb      	ldr	r3, [r7, #8]
 801c886:	78db      	ldrb	r3, [r3, #3]
 801c888:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801c88a:	4313      	orrs	r3, r2
 801c88c:	617b      	str	r3, [r7, #20]
 801c88e:	e018      	b.n	801c8c2 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	689b      	ldr	r3, [r3, #8]
 801c896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d102      	bne.n	801c8a4 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c89e:	68bb      	ldr	r3, [r7, #8]
 801c8a0:	2200      	movs	r2, #0
 801c8a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801c8a4:	68bb      	ldr	r3, [r7, #8]
 801c8a6:	781b      	ldrb	r3, [r3, #0]
 801c8a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 801c8aa:	68bb      	ldr	r3, [r7, #8]
 801c8ac:	785b      	ldrb	r3, [r3, #1]
 801c8ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801c8b0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 801c8b2:	68ba      	ldr	r2, [r7, #8]
 801c8b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 801c8b6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 801c8b8:	68bb      	ldr	r3, [r7, #8]
 801c8ba:	78db      	ldrb	r3, [r3, #3]
 801c8bc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801c8be:	4313      	orrs	r3, r2
 801c8c0:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	22ca      	movs	r2, #202	; 0xca
 801c8c8:	625a      	str	r2, [r3, #36]	; 0x24
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	2253      	movs	r2, #83	; 0x53
 801c8d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801c8d2:	68f8      	ldr	r0, [r7, #12]
 801c8d4:	f000 f9de 	bl	801cc94 <RTC_EnterInitMode>
 801c8d8:	4603      	mov	r3, r0
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	d00d      	beq.n	801c8fa <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	22ff      	movs	r2, #255	; 0xff
 801c8e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	2204      	movs	r2, #4
 801c8ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	2200      	movs	r2, #0
 801c8f2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 801c8f6:	2301      	movs	r3, #1
 801c8f8:	e04b      	b.n	801c992 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	681a      	ldr	r2, [r3, #0]
 801c8fe:	697b      	ldr	r3, [r7, #20]
 801c900:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801c904:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801c908:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	689a      	ldr	r2, [r3, #8]
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801c918:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	6899      	ldr	r1, [r3, #8]
 801c920:	68bb      	ldr	r3, [r7, #8]
 801c922:	68da      	ldr	r2, [r3, #12]
 801c924:	68bb      	ldr	r3, [r7, #8]
 801c926:	691b      	ldr	r3, [r3, #16]
 801c928:	431a      	orrs	r2, r3
 801c92a:	68fb      	ldr	r3, [r7, #12]
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	430a      	orrs	r2, r1
 801c930:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	68da      	ldr	r2, [r3, #12]
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c940:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	689b      	ldr	r3, [r3, #8]
 801c948:	f003 0320 	and.w	r3, r3, #32
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	d113      	bne.n	801c978 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c950:	68f8      	ldr	r0, [r7, #12]
 801c952:	f000 f979 	bl	801cc48 <HAL_RTC_WaitForSynchro>
 801c956:	4603      	mov	r3, r0
 801c958:	2b00      	cmp	r3, #0
 801c95a:	d00d      	beq.n	801c978 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	681b      	ldr	r3, [r3, #0]
 801c960:	22ff      	movs	r2, #255	; 0xff
 801c962:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	2204      	movs	r2, #4
 801c968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	2200      	movs	r2, #0
 801c970:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801c974:	2301      	movs	r3, #1
 801c976:	e00c      	b.n	801c992 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	22ff      	movs	r2, #255	; 0xff
 801c97e:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 801c980:	68fb      	ldr	r3, [r7, #12]
 801c982:	2201      	movs	r2, #1
 801c984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	2200      	movs	r2, #0
 801c98c:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 801c990:	2300      	movs	r3, #0
  }
}
 801c992:	4618      	mov	r0, r3
 801c994:	371c      	adds	r7, #28
 801c996:	46bd      	mov	sp, r7
 801c998:	bd90      	pop	{r4, r7, pc}

0801c99a <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c99a:	b580      	push	{r7, lr}
 801c99c:	b086      	sub	sp, #24
 801c99e:	af00      	add	r7, sp, #0
 801c9a0:	60f8      	str	r0, [r7, #12]
 801c9a2:	60b9      	str	r1, [r7, #8]
 801c9a4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c9ac:	68bb      	ldr	r3, [r7, #8]
 801c9ae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	691b      	ldr	r3, [r3, #16]
 801c9b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801c9ba:	68bb      	ldr	r3, [r7, #8]
 801c9bc:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801c9c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801c9cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 801c9ce:	697b      	ldr	r3, [r7, #20]
 801c9d0:	0c1b      	lsrs	r3, r3, #16
 801c9d2:	b2db      	uxtb	r3, r3
 801c9d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c9d8:	b2da      	uxtb	r2, r3
 801c9da:	68bb      	ldr	r3, [r7, #8]
 801c9dc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 801c9de:	697b      	ldr	r3, [r7, #20]
 801c9e0:	0a1b      	lsrs	r3, r3, #8
 801c9e2:	b2db      	uxtb	r3, r3
 801c9e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c9e8:	b2da      	uxtb	r2, r3
 801c9ea:	68bb      	ldr	r3, [r7, #8]
 801c9ec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801c9ee:	697b      	ldr	r3, [r7, #20]
 801c9f0:	b2db      	uxtb	r3, r3
 801c9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c9f6:	b2da      	uxtb	r2, r3
 801c9f8:	68bb      	ldr	r3, [r7, #8]
 801c9fa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 801c9fc:	697b      	ldr	r3, [r7, #20]
 801c9fe:	0c1b      	lsrs	r3, r3, #16
 801ca00:	b2db      	uxtb	r3, r3
 801ca02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ca06:	b2da      	uxtb	r2, r3
 801ca08:	68bb      	ldr	r3, [r7, #8]
 801ca0a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d11a      	bne.n	801ca48 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801ca12:	68bb      	ldr	r3, [r7, #8]
 801ca14:	781b      	ldrb	r3, [r3, #0]
 801ca16:	4618      	mov	r0, r3
 801ca18:	f000 f986 	bl	801cd28 <RTC_Bcd2ToByte>
 801ca1c:	4603      	mov	r3, r0
 801ca1e:	461a      	mov	r2, r3
 801ca20:	68bb      	ldr	r3, [r7, #8]
 801ca22:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801ca24:	68bb      	ldr	r3, [r7, #8]
 801ca26:	785b      	ldrb	r3, [r3, #1]
 801ca28:	4618      	mov	r0, r3
 801ca2a:	f000 f97d 	bl	801cd28 <RTC_Bcd2ToByte>
 801ca2e:	4603      	mov	r3, r0
 801ca30:	461a      	mov	r2, r3
 801ca32:	68bb      	ldr	r3, [r7, #8]
 801ca34:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801ca36:	68bb      	ldr	r3, [r7, #8]
 801ca38:	789b      	ldrb	r3, [r3, #2]
 801ca3a:	4618      	mov	r0, r3
 801ca3c:	f000 f974 	bl	801cd28 <RTC_Bcd2ToByte>
 801ca40:	4603      	mov	r3, r0
 801ca42:	461a      	mov	r2, r3
 801ca44:	68bb      	ldr	r3, [r7, #8]
 801ca46:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801ca48:	2300      	movs	r3, #0
}
 801ca4a:	4618      	mov	r0, r3
 801ca4c:	3718      	adds	r7, #24
 801ca4e:	46bd      	mov	sp, r7
 801ca50:	bd80      	pop	{r7, pc}

0801ca52 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801ca52:	b590      	push	{r4, r7, lr}
 801ca54:	b087      	sub	sp, #28
 801ca56:	af00      	add	r7, sp, #0
 801ca58:	60f8      	str	r0, [r7, #12]
 801ca5a:	60b9      	str	r1, [r7, #8]
 801ca5c:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	f893 3020 	ldrb.w	r3, [r3, #32]
 801ca64:	2b01      	cmp	r3, #1
 801ca66:	d101      	bne.n	801ca6c <HAL_RTC_SetDate+0x1a>
 801ca68:	2302      	movs	r3, #2
 801ca6a:	e09c      	b.n	801cba6 <HAL_RTC_SetDate+0x154>
 801ca6c:	68fb      	ldr	r3, [r7, #12]
 801ca6e:	2201      	movs	r2, #1
 801ca70:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	2202      	movs	r2, #2
 801ca78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d10e      	bne.n	801caa0 <HAL_RTC_SetDate+0x4e>
 801ca82:	68bb      	ldr	r3, [r7, #8]
 801ca84:	785b      	ldrb	r3, [r3, #1]
 801ca86:	f003 0310 	and.w	r3, r3, #16
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d008      	beq.n	801caa0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801ca8e:	68bb      	ldr	r3, [r7, #8]
 801ca90:	785b      	ldrb	r3, [r3, #1]
 801ca92:	f023 0310 	bic.w	r3, r3, #16
 801ca96:	b2db      	uxtb	r3, r3
 801ca98:	330a      	adds	r3, #10
 801ca9a:	b2da      	uxtb	r2, r3
 801ca9c:	68bb      	ldr	r3, [r7, #8]
 801ca9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d11c      	bne.n	801cae0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801caa6:	68bb      	ldr	r3, [r7, #8]
 801caa8:	78db      	ldrb	r3, [r3, #3]
 801caaa:	4618      	mov	r0, r3
 801caac:	f000 f91c 	bl	801cce8 <RTC_ByteToBcd2>
 801cab0:	4603      	mov	r3, r0
 801cab2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 801cab4:	68bb      	ldr	r3, [r7, #8]
 801cab6:	785b      	ldrb	r3, [r3, #1]
 801cab8:	4618      	mov	r0, r3
 801caba:	f000 f915 	bl	801cce8 <RTC_ByteToBcd2>
 801cabe:	4603      	mov	r3, r0
 801cac0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801cac2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801cac4:	68bb      	ldr	r3, [r7, #8]
 801cac6:	789b      	ldrb	r3, [r3, #2]
 801cac8:	4618      	mov	r0, r3
 801caca:	f000 f90d 	bl	801cce8 <RTC_ByteToBcd2>
 801cace:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 801cad0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 801cad4:	68bb      	ldr	r3, [r7, #8]
 801cad6:	781b      	ldrb	r3, [r3, #0]
 801cad8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801cada:	4313      	orrs	r3, r2
 801cadc:	617b      	str	r3, [r7, #20]
 801cade:	e00e      	b.n	801cafe <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801cae0:	68bb      	ldr	r3, [r7, #8]
 801cae2:	78db      	ldrb	r3, [r3, #3]
 801cae4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 801cae6:	68bb      	ldr	r3, [r7, #8]
 801cae8:	785b      	ldrb	r3, [r3, #1]
 801caea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801caec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 801caee:	68ba      	ldr	r2, [r7, #8]
 801caf0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 801caf2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 801caf4:	68bb      	ldr	r3, [r7, #8]
 801caf6:	781b      	ldrb	r3, [r3, #0]
 801caf8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 801cafa:	4313      	orrs	r3, r2
 801cafc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	22ca      	movs	r2, #202	; 0xca
 801cb04:	625a      	str	r2, [r3, #36]	; 0x24
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	2253      	movs	r2, #83	; 0x53
 801cb0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801cb0e:	68f8      	ldr	r0, [r7, #12]
 801cb10:	f000 f8c0 	bl	801cc94 <RTC_EnterInitMode>
 801cb14:	4603      	mov	r3, r0
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d00d      	beq.n	801cb36 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	22ff      	movs	r2, #255	; 0xff
 801cb20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	2204      	movs	r2, #4
 801cb26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	2200      	movs	r2, #0
 801cb2e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 801cb32:	2301      	movs	r3, #1
 801cb34:	e037      	b.n	801cba6 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	681a      	ldr	r2, [r3, #0]
 801cb3a:	697b      	ldr	r3, [r7, #20]
 801cb3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801cb40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801cb44:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	68da      	ldr	r2, [r3, #12]
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801cb54:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801cb56:	68fb      	ldr	r3, [r7, #12]
 801cb58:	681b      	ldr	r3, [r3, #0]
 801cb5a:	689b      	ldr	r3, [r3, #8]
 801cb5c:	f003 0320 	and.w	r3, r3, #32
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d113      	bne.n	801cb8c <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801cb64:	68f8      	ldr	r0, [r7, #12]
 801cb66:	f000 f86f 	bl	801cc48 <HAL_RTC_WaitForSynchro>
 801cb6a:	4603      	mov	r3, r0
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d00d      	beq.n	801cb8c <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	22ff      	movs	r2, #255	; 0xff
 801cb76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	2204      	movs	r2, #4
 801cb7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	2200      	movs	r2, #0
 801cb84:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801cb88:	2301      	movs	r3, #1
 801cb8a:	e00c      	b.n	801cba6 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	22ff      	movs	r2, #255	; 0xff
 801cb92:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	2201      	movs	r2, #1
 801cb98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 801cb9c:	68fb      	ldr	r3, [r7, #12]
 801cb9e:	2200      	movs	r2, #0
 801cba0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 801cba4:	2300      	movs	r3, #0
  }
}
 801cba6:	4618      	mov	r0, r3
 801cba8:	371c      	adds	r7, #28
 801cbaa:	46bd      	mov	sp, r7
 801cbac:	bd90      	pop	{r4, r7, pc}

0801cbae <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801cbae:	b580      	push	{r7, lr}
 801cbb0:	b086      	sub	sp, #24
 801cbb2:	af00      	add	r7, sp, #0
 801cbb4:	60f8      	str	r0, [r7, #12]
 801cbb6:	60b9      	str	r1, [r7, #8]
 801cbb8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801cbba:	68fb      	ldr	r3, [r7, #12]
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	685b      	ldr	r3, [r3, #4]
 801cbc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801cbc4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801cbc8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 801cbca:	697b      	ldr	r3, [r7, #20]
 801cbcc:	0c1b      	lsrs	r3, r3, #16
 801cbce:	b2da      	uxtb	r2, r3
 801cbd0:	68bb      	ldr	r3, [r7, #8]
 801cbd2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 801cbd4:	697b      	ldr	r3, [r7, #20]
 801cbd6:	0a1b      	lsrs	r3, r3, #8
 801cbd8:	b2db      	uxtb	r3, r3
 801cbda:	f003 031f 	and.w	r3, r3, #31
 801cbde:	b2da      	uxtb	r2, r3
 801cbe0:	68bb      	ldr	r3, [r7, #8]
 801cbe2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801cbe4:	697b      	ldr	r3, [r7, #20]
 801cbe6:	b2db      	uxtb	r3, r3
 801cbe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801cbec:	b2da      	uxtb	r2, r3
 801cbee:	68bb      	ldr	r3, [r7, #8]
 801cbf0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 801cbf2:	697b      	ldr	r3, [r7, #20]
 801cbf4:	0b5b      	lsrs	r3, r3, #13
 801cbf6:	b2db      	uxtb	r3, r3
 801cbf8:	f003 0307 	and.w	r3, r3, #7
 801cbfc:	b2da      	uxtb	r2, r3
 801cbfe:	68bb      	ldr	r3, [r7, #8]
 801cc00:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d11a      	bne.n	801cc3e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801cc08:	68bb      	ldr	r3, [r7, #8]
 801cc0a:	78db      	ldrb	r3, [r3, #3]
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	f000 f88b 	bl	801cd28 <RTC_Bcd2ToByte>
 801cc12:	4603      	mov	r3, r0
 801cc14:	461a      	mov	r2, r3
 801cc16:	68bb      	ldr	r3, [r7, #8]
 801cc18:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801cc1a:	68bb      	ldr	r3, [r7, #8]
 801cc1c:	785b      	ldrb	r3, [r3, #1]
 801cc1e:	4618      	mov	r0, r3
 801cc20:	f000 f882 	bl	801cd28 <RTC_Bcd2ToByte>
 801cc24:	4603      	mov	r3, r0
 801cc26:	461a      	mov	r2, r3
 801cc28:	68bb      	ldr	r3, [r7, #8]
 801cc2a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801cc2c:	68bb      	ldr	r3, [r7, #8]
 801cc2e:	789b      	ldrb	r3, [r3, #2]
 801cc30:	4618      	mov	r0, r3
 801cc32:	f000 f879 	bl	801cd28 <RTC_Bcd2ToByte>
 801cc36:	4603      	mov	r3, r0
 801cc38:	461a      	mov	r2, r3
 801cc3a:	68bb      	ldr	r3, [r7, #8]
 801cc3c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801cc3e:	2300      	movs	r3, #0
}
 801cc40:	4618      	mov	r0, r3
 801cc42:	3718      	adds	r7, #24
 801cc44:	46bd      	mov	sp, r7
 801cc46:	bd80      	pop	{r7, pc}

0801cc48 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 801cc48:	b580      	push	{r7, lr}
 801cc4a:	b084      	sub	sp, #16
 801cc4c:	af00      	add	r7, sp, #0
 801cc4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	68da      	ldr	r2, [r3, #12]
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801cc5e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801cc60:	f7f9 fabc 	bl	80161dc <HAL_GetTick>
 801cc64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801cc66:	e009      	b.n	801cc7c <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 801cc68:	f7f9 fab8 	bl	80161dc <HAL_GetTick>
 801cc6c:	4602      	mov	r2, r0
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	1ad3      	subs	r3, r2, r3
 801cc72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801cc76:	d901      	bls.n	801cc7c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801cc78:	2303      	movs	r3, #3
 801cc7a:	e007      	b.n	801cc8c <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	68db      	ldr	r3, [r3, #12]
 801cc82:	f003 0320 	and.w	r3, r3, #32
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d0ee      	beq.n	801cc68 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 801cc8a:	2300      	movs	r3, #0
}
 801cc8c:	4618      	mov	r0, r3
 801cc8e:	3710      	adds	r7, #16
 801cc90:	46bd      	mov	sp, r7
 801cc92:	bd80      	pop	{r7, pc}

0801cc94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 801cc94:	b580      	push	{r7, lr}
 801cc96:	b084      	sub	sp, #16
 801cc98:	af00      	add	r7, sp, #0
 801cc9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	68db      	ldr	r3, [r3, #12]
 801cca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d119      	bne.n	801ccde <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	f04f 32ff 	mov.w	r2, #4294967295
 801ccb2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801ccb4:	f7f9 fa92 	bl	80161dc <HAL_GetTick>
 801ccb8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801ccba:	e009      	b.n	801ccd0 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 801ccbc:	f7f9 fa8e 	bl	80161dc <HAL_GetTick>
 801ccc0:	4602      	mov	r2, r0
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	1ad3      	subs	r3, r2, r3
 801ccc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ccca:	d901      	bls.n	801ccd0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 801cccc:	2303      	movs	r3, #3
 801ccce:	e007      	b.n	801cce0 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	68db      	ldr	r3, [r3, #12]
 801ccd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d0ee      	beq.n	801ccbc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 801ccde:	2300      	movs	r3, #0
}
 801cce0:	4618      	mov	r0, r3
 801cce2:	3710      	adds	r7, #16
 801cce4:	46bd      	mov	sp, r7
 801cce6:	bd80      	pop	{r7, pc}

0801cce8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 801cce8:	b480      	push	{r7}
 801ccea:	b085      	sub	sp, #20
 801ccec:	af00      	add	r7, sp, #0
 801ccee:	4603      	mov	r3, r0
 801ccf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 801ccf6:	79fb      	ldrb	r3, [r7, #7]
 801ccf8:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 801ccfa:	e005      	b.n	801cd08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 801ccfc:	68fb      	ldr	r3, [r7, #12]
 801ccfe:	3301      	adds	r3, #1
 801cd00:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 801cd02:	7afb      	ldrb	r3, [r7, #11]
 801cd04:	3b0a      	subs	r3, #10
 801cd06:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 801cd08:	7afb      	ldrb	r3, [r7, #11]
 801cd0a:	2b09      	cmp	r3, #9
 801cd0c:	d8f6      	bhi.n	801ccfc <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	b2db      	uxtb	r3, r3
 801cd12:	011b      	lsls	r3, r3, #4
 801cd14:	b2da      	uxtb	r2, r3
 801cd16:	7afb      	ldrb	r3, [r7, #11]
 801cd18:	4313      	orrs	r3, r2
 801cd1a:	b2db      	uxtb	r3, r3
}
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	3714      	adds	r7, #20
 801cd20:	46bd      	mov	sp, r7
 801cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd26:	4770      	bx	lr

0801cd28 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 801cd28:	b480      	push	{r7}
 801cd2a:	b085      	sub	sp, #20
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	4603      	mov	r3, r0
 801cd30:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 801cd32:	79fb      	ldrb	r3, [r7, #7]
 801cd34:	091b      	lsrs	r3, r3, #4
 801cd36:	b2db      	uxtb	r3, r3
 801cd38:	461a      	mov	r2, r3
 801cd3a:	4613      	mov	r3, r2
 801cd3c:	009b      	lsls	r3, r3, #2
 801cd3e:	4413      	add	r3, r2
 801cd40:	005b      	lsls	r3, r3, #1
 801cd42:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	b2da      	uxtb	r2, r3
 801cd48:	79fb      	ldrb	r3, [r7, #7]
 801cd4a:	f003 030f 	and.w	r3, r3, #15
 801cd4e:	b2db      	uxtb	r3, r3
 801cd50:	4413      	add	r3, r2
 801cd52:	b2db      	uxtb	r3, r3
}
 801cd54:	4618      	mov	r0, r3
 801cd56:	3714      	adds	r7, #20
 801cd58:	46bd      	mov	sp, r7
 801cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd5e:	4770      	bx	lr

0801cd60 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801cd60:	b480      	push	{r7}
 801cd62:	b087      	sub	sp, #28
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	60f8      	str	r0, [r7, #12]
 801cd68:	60b9      	str	r1, [r7, #8]
 801cd6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	681b      	ldr	r3, [r3, #0]
 801cd70:	3350      	adds	r3, #80	; 0x50
 801cd72:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801cd74:	68bb      	ldr	r3, [r7, #8]
 801cd76:	009b      	lsls	r3, r3, #2
 801cd78:	697a      	ldr	r2, [r7, #20]
 801cd7a:	4413      	add	r3, r2
 801cd7c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801cd7e:	697b      	ldr	r3, [r7, #20]
 801cd80:	687a      	ldr	r2, [r7, #4]
 801cd82:	601a      	str	r2, [r3, #0]
}
 801cd84:	bf00      	nop
 801cd86:	371c      	adds	r7, #28
 801cd88:	46bd      	mov	sp, r7
 801cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd8e:	4770      	bx	lr

0801cd90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cd90:	b580      	push	{r7, lr}
 801cd92:	b082      	sub	sp, #8
 801cd94:	af00      	add	r7, sp, #0
 801cd96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d101      	bne.n	801cda2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cd9e:	2301      	movs	r3, #1
 801cda0:	e01d      	b.n	801cdde <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cda8:	b2db      	uxtb	r3, r3
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d106      	bne.n	801cdbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	2200      	movs	r2, #0
 801cdb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cdb6:	6878      	ldr	r0, [r7, #4]
 801cdb8:	f7f8 fd24 	bl	8015804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	2202      	movs	r2, #2
 801cdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	681a      	ldr	r2, [r3, #0]
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	3304      	adds	r3, #4
 801cdcc:	4619      	mov	r1, r3
 801cdce:	4610      	mov	r0, r2
 801cdd0:	f000 fc84 	bl	801d6dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	2201      	movs	r2, #1
 801cdd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cddc:	2300      	movs	r3, #0
}
 801cdde:	4618      	mov	r0, r3
 801cde0:	3708      	adds	r7, #8
 801cde2:	46bd      	mov	sp, r7
 801cde4:	bd80      	pop	{r7, pc}
	...

0801cde8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801cde8:	b480      	push	{r7}
 801cdea:	b085      	sub	sp, #20
 801cdec:	af00      	add	r7, sp, #0
 801cdee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	2202      	movs	r2, #2
 801cdf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	681b      	ldr	r3, [r3, #0]
 801cdfc:	689a      	ldr	r2, [r3, #8]
 801cdfe:	4b0e      	ldr	r3, [pc, #56]	; (801ce38 <HAL_TIM_Base_Start+0x50>)
 801ce00:	4013      	ands	r3, r2
 801ce02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	2b06      	cmp	r3, #6
 801ce08:	d00b      	beq.n	801ce22 <HAL_TIM_Base_Start+0x3a>
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ce10:	d007      	beq.n	801ce22 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	681b      	ldr	r3, [r3, #0]
 801ce16:	681a      	ldr	r2, [r3, #0]
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	f042 0201 	orr.w	r2, r2, #1
 801ce20:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	2201      	movs	r2, #1
 801ce26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801ce2a:	2300      	movs	r3, #0
}
 801ce2c:	4618      	mov	r0, r3
 801ce2e:	3714      	adds	r7, #20
 801ce30:	46bd      	mov	sp, r7
 801ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce36:	4770      	bx	lr
 801ce38:	00010007 	.word	0x00010007

0801ce3c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801ce3c:	b480      	push	{r7}
 801ce3e:	b083      	sub	sp, #12
 801ce40:	af00      	add	r7, sp, #0
 801ce42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	2202      	movs	r2, #2
 801ce48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	6a1a      	ldr	r2, [r3, #32]
 801ce52:	f241 1311 	movw	r3, #4369	; 0x1111
 801ce56:	4013      	ands	r3, r2
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d10f      	bne.n	801ce7c <HAL_TIM_Base_Stop+0x40>
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	681b      	ldr	r3, [r3, #0]
 801ce60:	6a1a      	ldr	r2, [r3, #32]
 801ce62:	f240 4344 	movw	r3, #1092	; 0x444
 801ce66:	4013      	ands	r3, r2
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d107      	bne.n	801ce7c <HAL_TIM_Base_Stop+0x40>
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	681b      	ldr	r3, [r3, #0]
 801ce70:	681a      	ldr	r2, [r3, #0]
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	f022 0201 	bic.w	r2, r2, #1
 801ce7a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	2201      	movs	r2, #1
 801ce80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801ce84:	2300      	movs	r3, #0
}
 801ce86:	4618      	mov	r0, r3
 801ce88:	370c      	adds	r7, #12
 801ce8a:	46bd      	mov	sp, r7
 801ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce90:	4770      	bx	lr
	...

0801ce94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801ce94:	b480      	push	{r7}
 801ce96:	b085      	sub	sp, #20
 801ce98:	af00      	add	r7, sp, #0
 801ce9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	68da      	ldr	r2, [r3, #12]
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	f042 0201 	orr.w	r2, r2, #1
 801ceaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	681b      	ldr	r3, [r3, #0]
 801ceb0:	689a      	ldr	r2, [r3, #8]
 801ceb2:	4b0c      	ldr	r3, [pc, #48]	; (801cee4 <HAL_TIM_Base_Start_IT+0x50>)
 801ceb4:	4013      	ands	r3, r2
 801ceb6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ceb8:	68fb      	ldr	r3, [r7, #12]
 801ceba:	2b06      	cmp	r3, #6
 801cebc:	d00b      	beq.n	801ced6 <HAL_TIM_Base_Start_IT+0x42>
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cec4:	d007      	beq.n	801ced6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	681b      	ldr	r3, [r3, #0]
 801ceca:	681a      	ldr	r2, [r3, #0]
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	f042 0201 	orr.w	r2, r2, #1
 801ced4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ced6:	2300      	movs	r3, #0
}
 801ced8:	4618      	mov	r0, r3
 801ceda:	3714      	adds	r7, #20
 801cedc:	46bd      	mov	sp, r7
 801cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cee2:	4770      	bx	lr
 801cee4:	00010007 	.word	0x00010007

0801cee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cee8:	b580      	push	{r7, lr}
 801ceea:	b082      	sub	sp, #8
 801ceec:	af00      	add	r7, sp, #0
 801ceee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d101      	bne.n	801cefa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cef6:	2301      	movs	r3, #1
 801cef8:	e01d      	b.n	801cf36 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cf00:	b2db      	uxtb	r3, r3
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d106      	bne.n	801cf14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	2200      	movs	r2, #0
 801cf0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cf0e:	6878      	ldr	r0, [r7, #4]
 801cf10:	f000 f815 	bl	801cf3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	2202      	movs	r2, #2
 801cf18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	681a      	ldr	r2, [r3, #0]
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	3304      	adds	r3, #4
 801cf24:	4619      	mov	r1, r3
 801cf26:	4610      	mov	r0, r2
 801cf28:	f000 fbd8 	bl	801d6dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	2201      	movs	r2, #1
 801cf30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cf34:	2300      	movs	r3, #0
}
 801cf36:	4618      	mov	r0, r3
 801cf38:	3708      	adds	r7, #8
 801cf3a:	46bd      	mov	sp, r7
 801cf3c:	bd80      	pop	{r7, pc}

0801cf3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801cf3e:	b480      	push	{r7}
 801cf40:	b083      	sub	sp, #12
 801cf42:	af00      	add	r7, sp, #0
 801cf44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801cf46:	bf00      	nop
 801cf48:	370c      	adds	r7, #12
 801cf4a:	46bd      	mov	sp, r7
 801cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf50:	4770      	bx	lr
	...

0801cf54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801cf54:	b580      	push	{r7, lr}
 801cf56:	b084      	sub	sp, #16
 801cf58:	af00      	add	r7, sp, #0
 801cf5a:	6078      	str	r0, [r7, #4]
 801cf5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	2201      	movs	r2, #1
 801cf64:	6839      	ldr	r1, [r7, #0]
 801cf66:	4618      	mov	r0, r3
 801cf68:	f000 ff36 	bl	801ddd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	4a19      	ldr	r2, [pc, #100]	; (801cfd8 <HAL_TIM_PWM_Start+0x84>)
 801cf72:	4293      	cmp	r3, r2
 801cf74:	d009      	beq.n	801cf8a <HAL_TIM_PWM_Start+0x36>
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	4a18      	ldr	r2, [pc, #96]	; (801cfdc <HAL_TIM_PWM_Start+0x88>)
 801cf7c:	4293      	cmp	r3, r2
 801cf7e:	d004      	beq.n	801cf8a <HAL_TIM_PWM_Start+0x36>
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	4a16      	ldr	r2, [pc, #88]	; (801cfe0 <HAL_TIM_PWM_Start+0x8c>)
 801cf86:	4293      	cmp	r3, r2
 801cf88:	d101      	bne.n	801cf8e <HAL_TIM_PWM_Start+0x3a>
 801cf8a:	2301      	movs	r3, #1
 801cf8c:	e000      	b.n	801cf90 <HAL_TIM_PWM_Start+0x3c>
 801cf8e:	2300      	movs	r3, #0
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d007      	beq.n	801cfa4 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801cfa2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	681b      	ldr	r3, [r3, #0]
 801cfa8:	689a      	ldr	r2, [r3, #8]
 801cfaa:	4b0e      	ldr	r3, [pc, #56]	; (801cfe4 <HAL_TIM_PWM_Start+0x90>)
 801cfac:	4013      	ands	r3, r2
 801cfae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	2b06      	cmp	r3, #6
 801cfb4:	d00b      	beq.n	801cfce <HAL_TIM_PWM_Start+0x7a>
 801cfb6:	68fb      	ldr	r3, [r7, #12]
 801cfb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cfbc:	d007      	beq.n	801cfce <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	681b      	ldr	r3, [r3, #0]
 801cfc2:	681a      	ldr	r2, [r3, #0]
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	f042 0201 	orr.w	r2, r2, #1
 801cfcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cfce:	2300      	movs	r3, #0
}
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	3710      	adds	r7, #16
 801cfd4:	46bd      	mov	sp, r7
 801cfd6:	bd80      	pop	{r7, pc}
 801cfd8:	40012c00 	.word	0x40012c00
 801cfdc:	40014400 	.word	0x40014400
 801cfe0:	40014800 	.word	0x40014800
 801cfe4:	00010007 	.word	0x00010007

0801cfe8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	b082      	sub	sp, #8
 801cfec:	af00      	add	r7, sp, #0
 801cfee:	6078      	str	r0, [r7, #4]
 801cff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	681b      	ldr	r3, [r3, #0]
 801cff6:	2200      	movs	r2, #0
 801cff8:	6839      	ldr	r1, [r7, #0]
 801cffa:	4618      	mov	r0, r3
 801cffc:	f000 feec 	bl	801ddd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	681b      	ldr	r3, [r3, #0]
 801d004:	4a25      	ldr	r2, [pc, #148]	; (801d09c <HAL_TIM_PWM_Stop+0xb4>)
 801d006:	4293      	cmp	r3, r2
 801d008:	d009      	beq.n	801d01e <HAL_TIM_PWM_Stop+0x36>
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	4a24      	ldr	r2, [pc, #144]	; (801d0a0 <HAL_TIM_PWM_Stop+0xb8>)
 801d010:	4293      	cmp	r3, r2
 801d012:	d004      	beq.n	801d01e <HAL_TIM_PWM_Stop+0x36>
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	4a22      	ldr	r2, [pc, #136]	; (801d0a4 <HAL_TIM_PWM_Stop+0xbc>)
 801d01a:	4293      	cmp	r3, r2
 801d01c:	d101      	bne.n	801d022 <HAL_TIM_PWM_Stop+0x3a>
 801d01e:	2301      	movs	r3, #1
 801d020:	e000      	b.n	801d024 <HAL_TIM_PWM_Stop+0x3c>
 801d022:	2300      	movs	r3, #0
 801d024:	2b00      	cmp	r3, #0
 801d026:	d017      	beq.n	801d058 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	6a1a      	ldr	r2, [r3, #32]
 801d02e:	f241 1311 	movw	r3, #4369	; 0x1111
 801d032:	4013      	ands	r3, r2
 801d034:	2b00      	cmp	r3, #0
 801d036:	d10f      	bne.n	801d058 <HAL_TIM_PWM_Stop+0x70>
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	681b      	ldr	r3, [r3, #0]
 801d03c:	6a1a      	ldr	r2, [r3, #32]
 801d03e:	f240 4344 	movw	r3, #1092	; 0x444
 801d042:	4013      	ands	r3, r2
 801d044:	2b00      	cmp	r3, #0
 801d046:	d107      	bne.n	801d058 <HAL_TIM_PWM_Stop+0x70>
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d056:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	6a1a      	ldr	r2, [r3, #32]
 801d05e:	f241 1311 	movw	r3, #4369	; 0x1111
 801d062:	4013      	ands	r3, r2
 801d064:	2b00      	cmp	r3, #0
 801d066:	d10f      	bne.n	801d088 <HAL_TIM_PWM_Stop+0xa0>
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	6a1a      	ldr	r2, [r3, #32]
 801d06e:	f240 4344 	movw	r3, #1092	; 0x444
 801d072:	4013      	ands	r3, r2
 801d074:	2b00      	cmp	r3, #0
 801d076:	d107      	bne.n	801d088 <HAL_TIM_PWM_Stop+0xa0>
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	681a      	ldr	r2, [r3, #0]
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	f022 0201 	bic.w	r2, r2, #1
 801d086:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	2201      	movs	r2, #1
 801d08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801d090:	2300      	movs	r3, #0
}
 801d092:	4618      	mov	r0, r3
 801d094:	3708      	adds	r7, #8
 801d096:	46bd      	mov	sp, r7
 801d098:	bd80      	pop	{r7, pc}
 801d09a:	bf00      	nop
 801d09c:	40012c00 	.word	0x40012c00
 801d0a0:	40014400 	.word	0x40014400
 801d0a4:	40014800 	.word	0x40014800

0801d0a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d0a8:	b580      	push	{r7, lr}
 801d0aa:	b082      	sub	sp, #8
 801d0ac:	af00      	add	r7, sp, #0
 801d0ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	691b      	ldr	r3, [r3, #16]
 801d0b6:	f003 0302 	and.w	r3, r3, #2
 801d0ba:	2b02      	cmp	r3, #2
 801d0bc:	d122      	bne.n	801d104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	68db      	ldr	r3, [r3, #12]
 801d0c4:	f003 0302 	and.w	r3, r3, #2
 801d0c8:	2b02      	cmp	r3, #2
 801d0ca:	d11b      	bne.n	801d104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	f06f 0202 	mvn.w	r2, #2
 801d0d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	2201      	movs	r2, #1
 801d0da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	699b      	ldr	r3, [r3, #24]
 801d0e2:	f003 0303 	and.w	r3, r3, #3
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d003      	beq.n	801d0f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d0ea:	6878      	ldr	r0, [r7, #4]
 801d0ec:	f000 fad7 	bl	801d69e <HAL_TIM_IC_CaptureCallback>
 801d0f0:	e005      	b.n	801d0fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d0f2:	6878      	ldr	r0, [r7, #4]
 801d0f4:	f000 fac9 	bl	801d68a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d0f8:	6878      	ldr	r0, [r7, #4]
 801d0fa:	f000 fada 	bl	801d6b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	2200      	movs	r2, #0
 801d102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	691b      	ldr	r3, [r3, #16]
 801d10a:	f003 0304 	and.w	r3, r3, #4
 801d10e:	2b04      	cmp	r3, #4
 801d110:	d122      	bne.n	801d158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	681b      	ldr	r3, [r3, #0]
 801d116:	68db      	ldr	r3, [r3, #12]
 801d118:	f003 0304 	and.w	r3, r3, #4
 801d11c:	2b04      	cmp	r3, #4
 801d11e:	d11b      	bne.n	801d158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	681b      	ldr	r3, [r3, #0]
 801d124:	f06f 0204 	mvn.w	r2, #4
 801d128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	2202      	movs	r2, #2
 801d12e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	681b      	ldr	r3, [r3, #0]
 801d134:	699b      	ldr	r3, [r3, #24]
 801d136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d003      	beq.n	801d146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d13e:	6878      	ldr	r0, [r7, #4]
 801d140:	f000 faad 	bl	801d69e <HAL_TIM_IC_CaptureCallback>
 801d144:	e005      	b.n	801d152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d146:	6878      	ldr	r0, [r7, #4]
 801d148:	f000 fa9f 	bl	801d68a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d14c:	6878      	ldr	r0, [r7, #4]
 801d14e:	f000 fab0 	bl	801d6b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	2200      	movs	r2, #0
 801d156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	681b      	ldr	r3, [r3, #0]
 801d15c:	691b      	ldr	r3, [r3, #16]
 801d15e:	f003 0308 	and.w	r3, r3, #8
 801d162:	2b08      	cmp	r3, #8
 801d164:	d122      	bne.n	801d1ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d166:	687b      	ldr	r3, [r7, #4]
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	68db      	ldr	r3, [r3, #12]
 801d16c:	f003 0308 	and.w	r3, r3, #8
 801d170:	2b08      	cmp	r3, #8
 801d172:	d11b      	bne.n	801d1ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	681b      	ldr	r3, [r3, #0]
 801d178:	f06f 0208 	mvn.w	r2, #8
 801d17c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	2204      	movs	r2, #4
 801d182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	681b      	ldr	r3, [r3, #0]
 801d188:	69db      	ldr	r3, [r3, #28]
 801d18a:	f003 0303 	and.w	r3, r3, #3
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d003      	beq.n	801d19a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d192:	6878      	ldr	r0, [r7, #4]
 801d194:	f000 fa83 	bl	801d69e <HAL_TIM_IC_CaptureCallback>
 801d198:	e005      	b.n	801d1a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d19a:	6878      	ldr	r0, [r7, #4]
 801d19c:	f000 fa75 	bl	801d68a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d1a0:	6878      	ldr	r0, [r7, #4]
 801d1a2:	f000 fa86 	bl	801d6b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	2200      	movs	r2, #0
 801d1aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	691b      	ldr	r3, [r3, #16]
 801d1b2:	f003 0310 	and.w	r3, r3, #16
 801d1b6:	2b10      	cmp	r3, #16
 801d1b8:	d122      	bne.n	801d200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	68db      	ldr	r3, [r3, #12]
 801d1c0:	f003 0310 	and.w	r3, r3, #16
 801d1c4:	2b10      	cmp	r3, #16
 801d1c6:	d11b      	bne.n	801d200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	f06f 0210 	mvn.w	r2, #16
 801d1d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	2208      	movs	r2, #8
 801d1d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	69db      	ldr	r3, [r3, #28]
 801d1de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d003      	beq.n	801d1ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d1e6:	6878      	ldr	r0, [r7, #4]
 801d1e8:	f000 fa59 	bl	801d69e <HAL_TIM_IC_CaptureCallback>
 801d1ec:	e005      	b.n	801d1fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d1ee:	6878      	ldr	r0, [r7, #4]
 801d1f0:	f000 fa4b 	bl	801d68a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d1f4:	6878      	ldr	r0, [r7, #4]
 801d1f6:	f000 fa5c 	bl	801d6b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	2200      	movs	r2, #0
 801d1fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	691b      	ldr	r3, [r3, #16]
 801d206:	f003 0301 	and.w	r3, r3, #1
 801d20a:	2b01      	cmp	r3, #1
 801d20c:	d10e      	bne.n	801d22c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	68db      	ldr	r3, [r3, #12]
 801d214:	f003 0301 	and.w	r3, r3, #1
 801d218:	2b01      	cmp	r3, #1
 801d21a:	d107      	bne.n	801d22c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	f06f 0201 	mvn.w	r2, #1
 801d224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d226:	6878      	ldr	r0, [r7, #4]
 801d228:	f7f7 f832 	bl	8014290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	691b      	ldr	r3, [r3, #16]
 801d232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d236:	2b80      	cmp	r3, #128	; 0x80
 801d238:	d10e      	bne.n	801d258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	68db      	ldr	r3, [r3, #12]
 801d240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d244:	2b80      	cmp	r3, #128	; 0x80
 801d246:	d107      	bne.n	801d258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d252:	6878      	ldr	r0, [r7, #4]
 801d254:	f000 fe50 	bl	801def8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	681b      	ldr	r3, [r3, #0]
 801d25c:	691b      	ldr	r3, [r3, #16]
 801d25e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d266:	d10e      	bne.n	801d286 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	68db      	ldr	r3, [r3, #12]
 801d26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d272:	2b80      	cmp	r3, #128	; 0x80
 801d274:	d107      	bne.n	801d286 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801d27e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801d280:	6878      	ldr	r0, [r7, #4]
 801d282:	f000 fe43 	bl	801df0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	681b      	ldr	r3, [r3, #0]
 801d28a:	691b      	ldr	r3, [r3, #16]
 801d28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d290:	2b40      	cmp	r3, #64	; 0x40
 801d292:	d10e      	bne.n	801d2b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	68db      	ldr	r3, [r3, #12]
 801d29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d29e:	2b40      	cmp	r3, #64	; 0x40
 801d2a0:	d107      	bne.n	801d2b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d2aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d2ac:	6878      	ldr	r0, [r7, #4]
 801d2ae:	f000 fa0a 	bl	801d6c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	681b      	ldr	r3, [r3, #0]
 801d2b6:	691b      	ldr	r3, [r3, #16]
 801d2b8:	f003 0320 	and.w	r3, r3, #32
 801d2bc:	2b20      	cmp	r3, #32
 801d2be:	d10e      	bne.n	801d2de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	68db      	ldr	r3, [r3, #12]
 801d2c6:	f003 0320 	and.w	r3, r3, #32
 801d2ca:	2b20      	cmp	r3, #32
 801d2cc:	d107      	bne.n	801d2de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d2ce:	687b      	ldr	r3, [r7, #4]
 801d2d0:	681b      	ldr	r3, [r3, #0]
 801d2d2:	f06f 0220 	mvn.w	r2, #32
 801d2d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d2d8:	6878      	ldr	r0, [r7, #4]
 801d2da:	f000 fe03 	bl	801dee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d2de:	bf00      	nop
 801d2e0:	3708      	adds	r7, #8
 801d2e2:	46bd      	mov	sp, r7
 801d2e4:	bd80      	pop	{r7, pc}
	...

0801d2e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801d2e8:	b580      	push	{r7, lr}
 801d2ea:	b084      	sub	sp, #16
 801d2ec:	af00      	add	r7, sp, #0
 801d2ee:	60f8      	str	r0, [r7, #12]
 801d2f0:	60b9      	str	r1, [r7, #8]
 801d2f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d2fa:	2b01      	cmp	r3, #1
 801d2fc:	d101      	bne.n	801d302 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801d2fe:	2302      	movs	r3, #2
 801d300:	e105      	b.n	801d50e <HAL_TIM_PWM_ConfigChannel+0x226>
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	2201      	movs	r2, #1
 801d306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d30a:	68fb      	ldr	r3, [r7, #12]
 801d30c:	2202      	movs	r2, #2
 801d30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	2b14      	cmp	r3, #20
 801d316:	f200 80f0 	bhi.w	801d4fa <HAL_TIM_PWM_ConfigChannel+0x212>
 801d31a:	a201      	add	r2, pc, #4	; (adr r2, 801d320 <HAL_TIM_PWM_ConfigChannel+0x38>)
 801d31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d320:	0801d375 	.word	0x0801d375
 801d324:	0801d4fb 	.word	0x0801d4fb
 801d328:	0801d4fb 	.word	0x0801d4fb
 801d32c:	0801d4fb 	.word	0x0801d4fb
 801d330:	0801d3b5 	.word	0x0801d3b5
 801d334:	0801d4fb 	.word	0x0801d4fb
 801d338:	0801d4fb 	.word	0x0801d4fb
 801d33c:	0801d4fb 	.word	0x0801d4fb
 801d340:	0801d3f7 	.word	0x0801d3f7
 801d344:	0801d4fb 	.word	0x0801d4fb
 801d348:	0801d4fb 	.word	0x0801d4fb
 801d34c:	0801d4fb 	.word	0x0801d4fb
 801d350:	0801d437 	.word	0x0801d437
 801d354:	0801d4fb 	.word	0x0801d4fb
 801d358:	0801d4fb 	.word	0x0801d4fb
 801d35c:	0801d4fb 	.word	0x0801d4fb
 801d360:	0801d479 	.word	0x0801d479
 801d364:	0801d4fb 	.word	0x0801d4fb
 801d368:	0801d4fb 	.word	0x0801d4fb
 801d36c:	0801d4fb 	.word	0x0801d4fb
 801d370:	0801d4b9 	.word	0x0801d4b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	68b9      	ldr	r1, [r7, #8]
 801d37a:	4618      	mov	r0, r3
 801d37c:	f000 fa12 	bl	801d7a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d380:	68fb      	ldr	r3, [r7, #12]
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	699a      	ldr	r2, [r3, #24]
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	f042 0208 	orr.w	r2, r2, #8
 801d38e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	699a      	ldr	r2, [r3, #24]
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	681b      	ldr	r3, [r3, #0]
 801d39a:	f022 0204 	bic.w	r2, r2, #4
 801d39e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	6999      	ldr	r1, [r3, #24]
 801d3a6:	68bb      	ldr	r3, [r7, #8]
 801d3a8:	691a      	ldr	r2, [r3, #16]
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	681b      	ldr	r3, [r3, #0]
 801d3ae:	430a      	orrs	r2, r1
 801d3b0:	619a      	str	r2, [r3, #24]
      break;
 801d3b2:	e0a3      	b.n	801d4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	68b9      	ldr	r1, [r7, #8]
 801d3ba:	4618      	mov	r0, r3
 801d3bc:	f000 fa6e 	bl	801d89c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d3c0:	68fb      	ldr	r3, [r7, #12]
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	699a      	ldr	r2, [r3, #24]
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d3ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	699a      	ldr	r2, [r3, #24]
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d3de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	6999      	ldr	r1, [r3, #24]
 801d3e6:	68bb      	ldr	r3, [r7, #8]
 801d3e8:	691b      	ldr	r3, [r3, #16]
 801d3ea:	021a      	lsls	r2, r3, #8
 801d3ec:	68fb      	ldr	r3, [r7, #12]
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	430a      	orrs	r2, r1
 801d3f2:	619a      	str	r2, [r3, #24]
      break;
 801d3f4:	e082      	b.n	801d4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	68b9      	ldr	r1, [r7, #8]
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	f000 fac7 	bl	801d990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	69da      	ldr	r2, [r3, #28]
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	f042 0208 	orr.w	r2, r2, #8
 801d410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d412:	68fb      	ldr	r3, [r7, #12]
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	69da      	ldr	r2, [r3, #28]
 801d418:	68fb      	ldr	r3, [r7, #12]
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	f022 0204 	bic.w	r2, r2, #4
 801d420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	681b      	ldr	r3, [r3, #0]
 801d426:	69d9      	ldr	r1, [r3, #28]
 801d428:	68bb      	ldr	r3, [r7, #8]
 801d42a:	691a      	ldr	r2, [r3, #16]
 801d42c:	68fb      	ldr	r3, [r7, #12]
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	430a      	orrs	r2, r1
 801d432:	61da      	str	r2, [r3, #28]
      break;
 801d434:	e062      	b.n	801d4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d436:	68fb      	ldr	r3, [r7, #12]
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	68b9      	ldr	r1, [r7, #8]
 801d43c:	4618      	mov	r0, r3
 801d43e:	f000 fb1f 	bl	801da80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	681b      	ldr	r3, [r3, #0]
 801d446:	69da      	ldr	r2, [r3, #28]
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d452:	68fb      	ldr	r3, [r7, #12]
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	69da      	ldr	r2, [r3, #28]
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	69d9      	ldr	r1, [r3, #28]
 801d468:	68bb      	ldr	r3, [r7, #8]
 801d46a:	691b      	ldr	r3, [r3, #16]
 801d46c:	021a      	lsls	r2, r3, #8
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	430a      	orrs	r2, r1
 801d474:	61da      	str	r2, [r3, #28]
      break;
 801d476:	e041      	b.n	801d4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	68b9      	ldr	r1, [r7, #8]
 801d47e:	4618      	mov	r0, r3
 801d480:	f000 fb5c 	bl	801db3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801d484:	68fb      	ldr	r3, [r7, #12]
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d48a:	68fb      	ldr	r3, [r7, #12]
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	f042 0208 	orr.w	r2, r2, #8
 801d492:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	681b      	ldr	r3, [r3, #0]
 801d49e:	f022 0204 	bic.w	r2, r2, #4
 801d4a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801d4aa:	68bb      	ldr	r3, [r7, #8]
 801d4ac:	691a      	ldr	r2, [r3, #16]
 801d4ae:	68fb      	ldr	r3, [r7, #12]
 801d4b0:	681b      	ldr	r3, [r3, #0]
 801d4b2:	430a      	orrs	r2, r1
 801d4b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801d4b6:	e021      	b.n	801d4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	68b9      	ldr	r1, [r7, #8]
 801d4be:	4618      	mov	r0, r3
 801d4c0:	f000 fb94 	bl	801dbec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d4ca:	68fb      	ldr	r3, [r7, #12]
 801d4cc:	681b      	ldr	r3, [r3, #0]
 801d4ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d4d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d4da:	68fb      	ldr	r3, [r7, #12]
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d4e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801d4ea:	68bb      	ldr	r3, [r7, #8]
 801d4ec:	691b      	ldr	r3, [r3, #16]
 801d4ee:	021a      	lsls	r2, r3, #8
 801d4f0:	68fb      	ldr	r3, [r7, #12]
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	430a      	orrs	r2, r1
 801d4f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801d4f8:	e000      	b.n	801d4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 801d4fa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801d4fc:	68fb      	ldr	r3, [r7, #12]
 801d4fe:	2201      	movs	r2, #1
 801d500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	2200      	movs	r2, #0
 801d508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801d50c:	2300      	movs	r3, #0
}
 801d50e:	4618      	mov	r0, r3
 801d510:	3710      	adds	r7, #16
 801d512:	46bd      	mov	sp, r7
 801d514:	bd80      	pop	{r7, pc}
 801d516:	bf00      	nop

0801d518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d518:	b580      	push	{r7, lr}
 801d51a:	b084      	sub	sp, #16
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	6078      	str	r0, [r7, #4]
 801d520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d528:	2b01      	cmp	r3, #1
 801d52a:	d101      	bne.n	801d530 <HAL_TIM_ConfigClockSource+0x18>
 801d52c:	2302      	movs	r3, #2
 801d52e:	e0a8      	b.n	801d682 <HAL_TIM_ConfigClockSource+0x16a>
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	2201      	movs	r2, #1
 801d534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	2202      	movs	r2, #2
 801d53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	681b      	ldr	r3, [r3, #0]
 801d544:	689b      	ldr	r3, [r3, #8]
 801d546:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 801d54e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d55a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	68fa      	ldr	r2, [r7, #12]
 801d562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d564:	683b      	ldr	r3, [r7, #0]
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	2b40      	cmp	r3, #64	; 0x40
 801d56a:	d067      	beq.n	801d63c <HAL_TIM_ConfigClockSource+0x124>
 801d56c:	2b40      	cmp	r3, #64	; 0x40
 801d56e:	d80b      	bhi.n	801d588 <HAL_TIM_ConfigClockSource+0x70>
 801d570:	2b10      	cmp	r3, #16
 801d572:	d073      	beq.n	801d65c <HAL_TIM_ConfigClockSource+0x144>
 801d574:	2b10      	cmp	r3, #16
 801d576:	d802      	bhi.n	801d57e <HAL_TIM_ConfigClockSource+0x66>
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d06f      	beq.n	801d65c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801d57c:	e078      	b.n	801d670 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 801d57e:	2b20      	cmp	r3, #32
 801d580:	d06c      	beq.n	801d65c <HAL_TIM_ConfigClockSource+0x144>
 801d582:	2b30      	cmp	r3, #48	; 0x30
 801d584:	d06a      	beq.n	801d65c <HAL_TIM_ConfigClockSource+0x144>
      break;
 801d586:	e073      	b.n	801d670 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 801d588:	2b70      	cmp	r3, #112	; 0x70
 801d58a:	d00d      	beq.n	801d5a8 <HAL_TIM_ConfigClockSource+0x90>
 801d58c:	2b70      	cmp	r3, #112	; 0x70
 801d58e:	d804      	bhi.n	801d59a <HAL_TIM_ConfigClockSource+0x82>
 801d590:	2b50      	cmp	r3, #80	; 0x50
 801d592:	d033      	beq.n	801d5fc <HAL_TIM_ConfigClockSource+0xe4>
 801d594:	2b60      	cmp	r3, #96	; 0x60
 801d596:	d041      	beq.n	801d61c <HAL_TIM_ConfigClockSource+0x104>
      break;
 801d598:	e06a      	b.n	801d670 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 801d59a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d59e:	d066      	beq.n	801d66e <HAL_TIM_ConfigClockSource+0x156>
 801d5a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d5a4:	d017      	beq.n	801d5d6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 801d5a6:	e063      	b.n	801d670 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	6818      	ldr	r0, [r3, #0]
 801d5ac:	683b      	ldr	r3, [r7, #0]
 801d5ae:	6899      	ldr	r1, [r3, #8]
 801d5b0:	683b      	ldr	r3, [r7, #0]
 801d5b2:	685a      	ldr	r2, [r3, #4]
 801d5b4:	683b      	ldr	r3, [r7, #0]
 801d5b6:	68db      	ldr	r3, [r3, #12]
 801d5b8:	f000 fbee 	bl	801dd98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	689b      	ldr	r3, [r3, #8]
 801d5c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d5c4:	68fb      	ldr	r3, [r7, #12]
 801d5c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d5ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	681b      	ldr	r3, [r3, #0]
 801d5d0:	68fa      	ldr	r2, [r7, #12]
 801d5d2:	609a      	str	r2, [r3, #8]
      break;
 801d5d4:	e04c      	b.n	801d670 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	6818      	ldr	r0, [r3, #0]
 801d5da:	683b      	ldr	r3, [r7, #0]
 801d5dc:	6899      	ldr	r1, [r3, #8]
 801d5de:	683b      	ldr	r3, [r7, #0]
 801d5e0:	685a      	ldr	r2, [r3, #4]
 801d5e2:	683b      	ldr	r3, [r7, #0]
 801d5e4:	68db      	ldr	r3, [r3, #12]
 801d5e6:	f000 fbd7 	bl	801dd98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	681b      	ldr	r3, [r3, #0]
 801d5ee:	689a      	ldr	r2, [r3, #8]
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d5f8:	609a      	str	r2, [r3, #8]
      break;
 801d5fa:	e039      	b.n	801d670 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	6818      	ldr	r0, [r3, #0]
 801d600:	683b      	ldr	r3, [r7, #0]
 801d602:	6859      	ldr	r1, [r3, #4]
 801d604:	683b      	ldr	r3, [r7, #0]
 801d606:	68db      	ldr	r3, [r3, #12]
 801d608:	461a      	mov	r2, r3
 801d60a:	f000 fb49 	bl	801dca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	681b      	ldr	r3, [r3, #0]
 801d612:	2150      	movs	r1, #80	; 0x50
 801d614:	4618      	mov	r0, r3
 801d616:	f000 fba2 	bl	801dd5e <TIM_ITRx_SetConfig>
      break;
 801d61a:	e029      	b.n	801d670 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	6818      	ldr	r0, [r3, #0]
 801d620:	683b      	ldr	r3, [r7, #0]
 801d622:	6859      	ldr	r1, [r3, #4]
 801d624:	683b      	ldr	r3, [r7, #0]
 801d626:	68db      	ldr	r3, [r3, #12]
 801d628:	461a      	mov	r2, r3
 801d62a:	f000 fb68 	bl	801dcfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	2160      	movs	r1, #96	; 0x60
 801d634:	4618      	mov	r0, r3
 801d636:	f000 fb92 	bl	801dd5e <TIM_ITRx_SetConfig>
      break;
 801d63a:	e019      	b.n	801d670 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801d63c:	687b      	ldr	r3, [r7, #4]
 801d63e:	6818      	ldr	r0, [r3, #0]
 801d640:	683b      	ldr	r3, [r7, #0]
 801d642:	6859      	ldr	r1, [r3, #4]
 801d644:	683b      	ldr	r3, [r7, #0]
 801d646:	68db      	ldr	r3, [r3, #12]
 801d648:	461a      	mov	r2, r3
 801d64a:	f000 fb29 	bl	801dca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	681b      	ldr	r3, [r3, #0]
 801d652:	2140      	movs	r1, #64	; 0x40
 801d654:	4618      	mov	r0, r3
 801d656:	f000 fb82 	bl	801dd5e <TIM_ITRx_SetConfig>
      break;
 801d65a:	e009      	b.n	801d670 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	681a      	ldr	r2, [r3, #0]
 801d660:	683b      	ldr	r3, [r7, #0]
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	4619      	mov	r1, r3
 801d666:	4610      	mov	r0, r2
 801d668:	f000 fb79 	bl	801dd5e <TIM_ITRx_SetConfig>
      break;
 801d66c:	e000      	b.n	801d670 <HAL_TIM_ConfigClockSource+0x158>
      break;
 801d66e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	2201      	movs	r2, #1
 801d674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	2200      	movs	r2, #0
 801d67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801d680:	2300      	movs	r3, #0
}
 801d682:	4618      	mov	r0, r3
 801d684:	3710      	adds	r7, #16
 801d686:	46bd      	mov	sp, r7
 801d688:	bd80      	pop	{r7, pc}

0801d68a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d68a:	b480      	push	{r7}
 801d68c:	b083      	sub	sp, #12
 801d68e:	af00      	add	r7, sp, #0
 801d690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d692:	bf00      	nop
 801d694:	370c      	adds	r7, #12
 801d696:	46bd      	mov	sp, r7
 801d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d69c:	4770      	bx	lr

0801d69e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d69e:	b480      	push	{r7}
 801d6a0:	b083      	sub	sp, #12
 801d6a2:	af00      	add	r7, sp, #0
 801d6a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d6a6:	bf00      	nop
 801d6a8:	370c      	adds	r7, #12
 801d6aa:	46bd      	mov	sp, r7
 801d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6b0:	4770      	bx	lr

0801d6b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d6b2:	b480      	push	{r7}
 801d6b4:	b083      	sub	sp, #12
 801d6b6:	af00      	add	r7, sp, #0
 801d6b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d6ba:	bf00      	nop
 801d6bc:	370c      	adds	r7, #12
 801d6be:	46bd      	mov	sp, r7
 801d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6c4:	4770      	bx	lr

0801d6c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d6c6:	b480      	push	{r7}
 801d6c8:	b083      	sub	sp, #12
 801d6ca:	af00      	add	r7, sp, #0
 801d6cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d6ce:	bf00      	nop
 801d6d0:	370c      	adds	r7, #12
 801d6d2:	46bd      	mov	sp, r7
 801d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6d8:	4770      	bx	lr
	...

0801d6dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d6dc:	b480      	push	{r7}
 801d6de:	b085      	sub	sp, #20
 801d6e0:	af00      	add	r7, sp, #0
 801d6e2:	6078      	str	r0, [r7, #4]
 801d6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	681b      	ldr	r3, [r3, #0]
 801d6ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	4a2a      	ldr	r2, [pc, #168]	; (801d798 <TIM_Base_SetConfig+0xbc>)
 801d6f0:	4293      	cmp	r3, r2
 801d6f2:	d003      	beq.n	801d6fc <TIM_Base_SetConfig+0x20>
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d6fa:	d108      	bne.n	801d70e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d6fc:	68fb      	ldr	r3, [r7, #12]
 801d6fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d704:	683b      	ldr	r3, [r7, #0]
 801d706:	685b      	ldr	r3, [r3, #4]
 801d708:	68fa      	ldr	r2, [r7, #12]
 801d70a:	4313      	orrs	r3, r2
 801d70c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	4a21      	ldr	r2, [pc, #132]	; (801d798 <TIM_Base_SetConfig+0xbc>)
 801d712:	4293      	cmp	r3, r2
 801d714:	d00b      	beq.n	801d72e <TIM_Base_SetConfig+0x52>
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d71c:	d007      	beq.n	801d72e <TIM_Base_SetConfig+0x52>
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	4a1e      	ldr	r2, [pc, #120]	; (801d79c <TIM_Base_SetConfig+0xc0>)
 801d722:	4293      	cmp	r3, r2
 801d724:	d003      	beq.n	801d72e <TIM_Base_SetConfig+0x52>
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	4a1d      	ldr	r2, [pc, #116]	; (801d7a0 <TIM_Base_SetConfig+0xc4>)
 801d72a:	4293      	cmp	r3, r2
 801d72c:	d108      	bne.n	801d740 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d736:	683b      	ldr	r3, [r7, #0]
 801d738:	68db      	ldr	r3, [r3, #12]
 801d73a:	68fa      	ldr	r2, [r7, #12]
 801d73c:	4313      	orrs	r3, r2
 801d73e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d746:	683b      	ldr	r3, [r7, #0]
 801d748:	695b      	ldr	r3, [r3, #20]
 801d74a:	4313      	orrs	r3, r2
 801d74c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	68fa      	ldr	r2, [r7, #12]
 801d752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d754:	683b      	ldr	r3, [r7, #0]
 801d756:	689a      	ldr	r2, [r3, #8]
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d75c:	683b      	ldr	r3, [r7, #0]
 801d75e:	681a      	ldr	r2, [r3, #0]
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	4a0c      	ldr	r2, [pc, #48]	; (801d798 <TIM_Base_SetConfig+0xbc>)
 801d768:	4293      	cmp	r3, r2
 801d76a:	d007      	beq.n	801d77c <TIM_Base_SetConfig+0xa0>
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	4a0b      	ldr	r2, [pc, #44]	; (801d79c <TIM_Base_SetConfig+0xc0>)
 801d770:	4293      	cmp	r3, r2
 801d772:	d003      	beq.n	801d77c <TIM_Base_SetConfig+0xa0>
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	4a0a      	ldr	r2, [pc, #40]	; (801d7a0 <TIM_Base_SetConfig+0xc4>)
 801d778:	4293      	cmp	r3, r2
 801d77a:	d103      	bne.n	801d784 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d77c:	683b      	ldr	r3, [r7, #0]
 801d77e:	691a      	ldr	r2, [r3, #16]
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	2201      	movs	r2, #1
 801d788:	615a      	str	r2, [r3, #20]
}
 801d78a:	bf00      	nop
 801d78c:	3714      	adds	r7, #20
 801d78e:	46bd      	mov	sp, r7
 801d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d794:	4770      	bx	lr
 801d796:	bf00      	nop
 801d798:	40012c00 	.word	0x40012c00
 801d79c:	40014400 	.word	0x40014400
 801d7a0:	40014800 	.word	0x40014800

0801d7a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d7a4:	b480      	push	{r7}
 801d7a6:	b087      	sub	sp, #28
 801d7a8:	af00      	add	r7, sp, #0
 801d7aa:	6078      	str	r0, [r7, #4]
 801d7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	6a1b      	ldr	r3, [r3, #32]
 801d7b2:	f023 0201 	bic.w	r2, r3, #1
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	6a1b      	ldr	r3, [r3, #32]
 801d7be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	685b      	ldr	r3, [r3, #4]
 801d7c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	699b      	ldr	r3, [r3, #24]
 801d7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d7cc:	68fb      	ldr	r3, [r7, #12]
 801d7ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d7d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d7d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	f023 0303 	bic.w	r3, r3, #3
 801d7de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d7e0:	683b      	ldr	r3, [r7, #0]
 801d7e2:	681b      	ldr	r3, [r3, #0]
 801d7e4:	68fa      	ldr	r2, [r7, #12]
 801d7e6:	4313      	orrs	r3, r2
 801d7e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d7ea:	697b      	ldr	r3, [r7, #20]
 801d7ec:	f023 0302 	bic.w	r3, r3, #2
 801d7f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d7f2:	683b      	ldr	r3, [r7, #0]
 801d7f4:	689b      	ldr	r3, [r3, #8]
 801d7f6:	697a      	ldr	r2, [r7, #20]
 801d7f8:	4313      	orrs	r3, r2
 801d7fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	4a24      	ldr	r2, [pc, #144]	; (801d890 <TIM_OC1_SetConfig+0xec>)
 801d800:	4293      	cmp	r3, r2
 801d802:	d007      	beq.n	801d814 <TIM_OC1_SetConfig+0x70>
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	4a23      	ldr	r2, [pc, #140]	; (801d894 <TIM_OC1_SetConfig+0xf0>)
 801d808:	4293      	cmp	r3, r2
 801d80a:	d003      	beq.n	801d814 <TIM_OC1_SetConfig+0x70>
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	4a22      	ldr	r2, [pc, #136]	; (801d898 <TIM_OC1_SetConfig+0xf4>)
 801d810:	4293      	cmp	r3, r2
 801d812:	d10c      	bne.n	801d82e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d814:	697b      	ldr	r3, [r7, #20]
 801d816:	f023 0308 	bic.w	r3, r3, #8
 801d81a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d81c:	683b      	ldr	r3, [r7, #0]
 801d81e:	68db      	ldr	r3, [r3, #12]
 801d820:	697a      	ldr	r2, [r7, #20]
 801d822:	4313      	orrs	r3, r2
 801d824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d826:	697b      	ldr	r3, [r7, #20]
 801d828:	f023 0304 	bic.w	r3, r3, #4
 801d82c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	4a17      	ldr	r2, [pc, #92]	; (801d890 <TIM_OC1_SetConfig+0xec>)
 801d832:	4293      	cmp	r3, r2
 801d834:	d007      	beq.n	801d846 <TIM_OC1_SetConfig+0xa2>
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	4a17      	ldr	r2, [pc, #92]	; (801d898 <TIM_OC1_SetConfig+0xf4>)
 801d83a:	4293      	cmp	r3, r2
 801d83c:	d003      	beq.n	801d846 <TIM_OC1_SetConfig+0xa2>
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	4a14      	ldr	r2, [pc, #80]	; (801d894 <TIM_OC1_SetConfig+0xf0>)
 801d842:	4293      	cmp	r3, r2
 801d844:	d111      	bne.n	801d86a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d846:	693b      	ldr	r3, [r7, #16]
 801d848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d84c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d84e:	693b      	ldr	r3, [r7, #16]
 801d850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d856:	683b      	ldr	r3, [r7, #0]
 801d858:	695b      	ldr	r3, [r3, #20]
 801d85a:	693a      	ldr	r2, [r7, #16]
 801d85c:	4313      	orrs	r3, r2
 801d85e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d860:	683b      	ldr	r3, [r7, #0]
 801d862:	699b      	ldr	r3, [r3, #24]
 801d864:	693a      	ldr	r2, [r7, #16]
 801d866:	4313      	orrs	r3, r2
 801d868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	693a      	ldr	r2, [r7, #16]
 801d86e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	68fa      	ldr	r2, [r7, #12]
 801d874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d876:	683b      	ldr	r3, [r7, #0]
 801d878:	685a      	ldr	r2, [r3, #4]
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	697a      	ldr	r2, [r7, #20]
 801d882:	621a      	str	r2, [r3, #32]
}
 801d884:	bf00      	nop
 801d886:	371c      	adds	r7, #28
 801d888:	46bd      	mov	sp, r7
 801d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d88e:	4770      	bx	lr
 801d890:	40012c00 	.word	0x40012c00
 801d894:	40014800 	.word	0x40014800
 801d898:	40014400 	.word	0x40014400

0801d89c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d89c:	b480      	push	{r7}
 801d89e:	b087      	sub	sp, #28
 801d8a0:	af00      	add	r7, sp, #0
 801d8a2:	6078      	str	r0, [r7, #4]
 801d8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d8a6:	687b      	ldr	r3, [r7, #4]
 801d8a8:	6a1b      	ldr	r3, [r3, #32]
 801d8aa:	f023 0210 	bic.w	r2, r3, #16
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	6a1b      	ldr	r3, [r3, #32]
 801d8b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	685b      	ldr	r3, [r3, #4]
 801d8bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	699b      	ldr	r3, [r3, #24]
 801d8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d8c4:	68fb      	ldr	r3, [r7, #12]
 801d8c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d8ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d8ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d8d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d8d8:	683b      	ldr	r3, [r7, #0]
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	021b      	lsls	r3, r3, #8
 801d8de:	68fa      	ldr	r2, [r7, #12]
 801d8e0:	4313      	orrs	r3, r2
 801d8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d8e4:	697b      	ldr	r3, [r7, #20]
 801d8e6:	f023 0320 	bic.w	r3, r3, #32
 801d8ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d8ec:	683b      	ldr	r3, [r7, #0]
 801d8ee:	689b      	ldr	r3, [r3, #8]
 801d8f0:	011b      	lsls	r3, r3, #4
 801d8f2:	697a      	ldr	r2, [r7, #20]
 801d8f4:	4313      	orrs	r3, r2
 801d8f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	4a22      	ldr	r2, [pc, #136]	; (801d984 <TIM_OC2_SetConfig+0xe8>)
 801d8fc:	4293      	cmp	r3, r2
 801d8fe:	d10d      	bne.n	801d91c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d900:	697b      	ldr	r3, [r7, #20]
 801d902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d908:	683b      	ldr	r3, [r7, #0]
 801d90a:	68db      	ldr	r3, [r3, #12]
 801d90c:	011b      	lsls	r3, r3, #4
 801d90e:	697a      	ldr	r2, [r7, #20]
 801d910:	4313      	orrs	r3, r2
 801d912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d914:	697b      	ldr	r3, [r7, #20]
 801d916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d91a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	4a19      	ldr	r2, [pc, #100]	; (801d984 <TIM_OC2_SetConfig+0xe8>)
 801d920:	4293      	cmp	r3, r2
 801d922:	d007      	beq.n	801d934 <TIM_OC2_SetConfig+0x98>
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	4a18      	ldr	r2, [pc, #96]	; (801d988 <TIM_OC2_SetConfig+0xec>)
 801d928:	4293      	cmp	r3, r2
 801d92a:	d003      	beq.n	801d934 <TIM_OC2_SetConfig+0x98>
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	4a17      	ldr	r2, [pc, #92]	; (801d98c <TIM_OC2_SetConfig+0xf0>)
 801d930:	4293      	cmp	r3, r2
 801d932:	d113      	bne.n	801d95c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d934:	693b      	ldr	r3, [r7, #16]
 801d936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d93a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d93c:	693b      	ldr	r3, [r7, #16]
 801d93e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d944:	683b      	ldr	r3, [r7, #0]
 801d946:	695b      	ldr	r3, [r3, #20]
 801d948:	009b      	lsls	r3, r3, #2
 801d94a:	693a      	ldr	r2, [r7, #16]
 801d94c:	4313      	orrs	r3, r2
 801d94e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d950:	683b      	ldr	r3, [r7, #0]
 801d952:	699b      	ldr	r3, [r3, #24]
 801d954:	009b      	lsls	r3, r3, #2
 801d956:	693a      	ldr	r2, [r7, #16]
 801d958:	4313      	orrs	r3, r2
 801d95a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	693a      	ldr	r2, [r7, #16]
 801d960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	68fa      	ldr	r2, [r7, #12]
 801d966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d968:	683b      	ldr	r3, [r7, #0]
 801d96a:	685a      	ldr	r2, [r3, #4]
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	697a      	ldr	r2, [r7, #20]
 801d974:	621a      	str	r2, [r3, #32]
}
 801d976:	bf00      	nop
 801d978:	371c      	adds	r7, #28
 801d97a:	46bd      	mov	sp, r7
 801d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d980:	4770      	bx	lr
 801d982:	bf00      	nop
 801d984:	40012c00 	.word	0x40012c00
 801d988:	40014400 	.word	0x40014400
 801d98c:	40014800 	.word	0x40014800

0801d990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d990:	b480      	push	{r7}
 801d992:	b087      	sub	sp, #28
 801d994:	af00      	add	r7, sp, #0
 801d996:	6078      	str	r0, [r7, #4]
 801d998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	6a1b      	ldr	r3, [r3, #32]
 801d99e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	6a1b      	ldr	r3, [r3, #32]
 801d9aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	685b      	ldr	r3, [r3, #4]
 801d9b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	69db      	ldr	r3, [r3, #28]
 801d9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d9be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d9c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d9c4:	68fb      	ldr	r3, [r7, #12]
 801d9c6:	f023 0303 	bic.w	r3, r3, #3
 801d9ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d9cc:	683b      	ldr	r3, [r7, #0]
 801d9ce:	681b      	ldr	r3, [r3, #0]
 801d9d0:	68fa      	ldr	r2, [r7, #12]
 801d9d2:	4313      	orrs	r3, r2
 801d9d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d9d6:	697b      	ldr	r3, [r7, #20]
 801d9d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d9dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d9de:	683b      	ldr	r3, [r7, #0]
 801d9e0:	689b      	ldr	r3, [r3, #8]
 801d9e2:	021b      	lsls	r3, r3, #8
 801d9e4:	697a      	ldr	r2, [r7, #20]
 801d9e6:	4313      	orrs	r3, r2
 801d9e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	4a21      	ldr	r2, [pc, #132]	; (801da74 <TIM_OC3_SetConfig+0xe4>)
 801d9ee:	4293      	cmp	r3, r2
 801d9f0:	d10d      	bne.n	801da0e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d9f2:	697b      	ldr	r3, [r7, #20]
 801d9f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d9f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d9fa:	683b      	ldr	r3, [r7, #0]
 801d9fc:	68db      	ldr	r3, [r3, #12]
 801d9fe:	021b      	lsls	r3, r3, #8
 801da00:	697a      	ldr	r2, [r7, #20]
 801da02:	4313      	orrs	r3, r2
 801da04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801da06:	697b      	ldr	r3, [r7, #20]
 801da08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801da0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801da0e:	687b      	ldr	r3, [r7, #4]
 801da10:	4a18      	ldr	r2, [pc, #96]	; (801da74 <TIM_OC3_SetConfig+0xe4>)
 801da12:	4293      	cmp	r3, r2
 801da14:	d007      	beq.n	801da26 <TIM_OC3_SetConfig+0x96>
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	4a17      	ldr	r2, [pc, #92]	; (801da78 <TIM_OC3_SetConfig+0xe8>)
 801da1a:	4293      	cmp	r3, r2
 801da1c:	d003      	beq.n	801da26 <TIM_OC3_SetConfig+0x96>
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	4a16      	ldr	r2, [pc, #88]	; (801da7c <TIM_OC3_SetConfig+0xec>)
 801da22:	4293      	cmp	r3, r2
 801da24:	d113      	bne.n	801da4e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801da26:	693b      	ldr	r3, [r7, #16]
 801da28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801da2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801da2e:	693b      	ldr	r3, [r7, #16]
 801da30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801da34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801da36:	683b      	ldr	r3, [r7, #0]
 801da38:	695b      	ldr	r3, [r3, #20]
 801da3a:	011b      	lsls	r3, r3, #4
 801da3c:	693a      	ldr	r2, [r7, #16]
 801da3e:	4313      	orrs	r3, r2
 801da40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801da42:	683b      	ldr	r3, [r7, #0]
 801da44:	699b      	ldr	r3, [r3, #24]
 801da46:	011b      	lsls	r3, r3, #4
 801da48:	693a      	ldr	r2, [r7, #16]
 801da4a:	4313      	orrs	r3, r2
 801da4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	693a      	ldr	r2, [r7, #16]
 801da52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	68fa      	ldr	r2, [r7, #12]
 801da58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801da5a:	683b      	ldr	r3, [r7, #0]
 801da5c:	685a      	ldr	r2, [r3, #4]
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	697a      	ldr	r2, [r7, #20]
 801da66:	621a      	str	r2, [r3, #32]
}
 801da68:	bf00      	nop
 801da6a:	371c      	adds	r7, #28
 801da6c:	46bd      	mov	sp, r7
 801da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da72:	4770      	bx	lr
 801da74:	40012c00 	.word	0x40012c00
 801da78:	40014400 	.word	0x40014400
 801da7c:	40014800 	.word	0x40014800

0801da80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801da80:	b480      	push	{r7}
 801da82:	b087      	sub	sp, #28
 801da84:	af00      	add	r7, sp, #0
 801da86:	6078      	str	r0, [r7, #4]
 801da88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	6a1b      	ldr	r3, [r3, #32]
 801da8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	6a1b      	ldr	r3, [r3, #32]
 801da9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	685b      	ldr	r3, [r3, #4]
 801daa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	69db      	ldr	r3, [r3, #28]
 801daa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801daa8:	68fb      	ldr	r3, [r7, #12]
 801daaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801daae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801dab4:	68fb      	ldr	r3, [r7, #12]
 801dab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801daba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dabc:	683b      	ldr	r3, [r7, #0]
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	021b      	lsls	r3, r3, #8
 801dac2:	68fa      	ldr	r2, [r7, #12]
 801dac4:	4313      	orrs	r3, r2
 801dac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801dac8:	693b      	ldr	r3, [r7, #16]
 801daca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801dad0:	683b      	ldr	r3, [r7, #0]
 801dad2:	689b      	ldr	r3, [r3, #8]
 801dad4:	031b      	lsls	r3, r3, #12
 801dad6:	693a      	ldr	r2, [r7, #16]
 801dad8:	4313      	orrs	r3, r2
 801dada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	4a14      	ldr	r2, [pc, #80]	; (801db30 <TIM_OC4_SetConfig+0xb0>)
 801dae0:	4293      	cmp	r3, r2
 801dae2:	d007      	beq.n	801daf4 <TIM_OC4_SetConfig+0x74>
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	4a13      	ldr	r2, [pc, #76]	; (801db34 <TIM_OC4_SetConfig+0xb4>)
 801dae8:	4293      	cmp	r3, r2
 801daea:	d003      	beq.n	801daf4 <TIM_OC4_SetConfig+0x74>
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	4a12      	ldr	r2, [pc, #72]	; (801db38 <TIM_OC4_SetConfig+0xb8>)
 801daf0:	4293      	cmp	r3, r2
 801daf2:	d109      	bne.n	801db08 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801daf4:	697b      	ldr	r3, [r7, #20]
 801daf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801dafa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801dafc:	683b      	ldr	r3, [r7, #0]
 801dafe:	695b      	ldr	r3, [r3, #20]
 801db00:	019b      	lsls	r3, r3, #6
 801db02:	697a      	ldr	r2, [r7, #20]
 801db04:	4313      	orrs	r3, r2
 801db06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	697a      	ldr	r2, [r7, #20]
 801db0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	68fa      	ldr	r2, [r7, #12]
 801db12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801db14:	683b      	ldr	r3, [r7, #0]
 801db16:	685a      	ldr	r2, [r3, #4]
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	693a      	ldr	r2, [r7, #16]
 801db20:	621a      	str	r2, [r3, #32]
}
 801db22:	bf00      	nop
 801db24:	371c      	adds	r7, #28
 801db26:	46bd      	mov	sp, r7
 801db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db2c:	4770      	bx	lr
 801db2e:	bf00      	nop
 801db30:	40012c00 	.word	0x40012c00
 801db34:	40014400 	.word	0x40014400
 801db38:	40014800 	.word	0x40014800

0801db3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801db3c:	b480      	push	{r7}
 801db3e:	b087      	sub	sp, #28
 801db40:	af00      	add	r7, sp, #0
 801db42:	6078      	str	r0, [r7, #4]
 801db44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	6a1b      	ldr	r3, [r3, #32]
 801db4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	6a1b      	ldr	r3, [r3, #32]
 801db56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	685b      	ldr	r3, [r3, #4]
 801db5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801db62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801db6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801db6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801db70:	683b      	ldr	r3, [r7, #0]
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	68fa      	ldr	r2, [r7, #12]
 801db76:	4313      	orrs	r3, r2
 801db78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801db7a:	693b      	ldr	r3, [r7, #16]
 801db7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801db80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801db82:	683b      	ldr	r3, [r7, #0]
 801db84:	689b      	ldr	r3, [r3, #8]
 801db86:	041b      	lsls	r3, r3, #16
 801db88:	693a      	ldr	r2, [r7, #16]
 801db8a:	4313      	orrs	r3, r2
 801db8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	4a13      	ldr	r2, [pc, #76]	; (801dbe0 <TIM_OC5_SetConfig+0xa4>)
 801db92:	4293      	cmp	r3, r2
 801db94:	d007      	beq.n	801dba6 <TIM_OC5_SetConfig+0x6a>
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	4a12      	ldr	r2, [pc, #72]	; (801dbe4 <TIM_OC5_SetConfig+0xa8>)
 801db9a:	4293      	cmp	r3, r2
 801db9c:	d003      	beq.n	801dba6 <TIM_OC5_SetConfig+0x6a>
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	4a11      	ldr	r2, [pc, #68]	; (801dbe8 <TIM_OC5_SetConfig+0xac>)
 801dba2:	4293      	cmp	r3, r2
 801dba4:	d109      	bne.n	801dbba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801dba6:	697b      	ldr	r3, [r7, #20]
 801dba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dbac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801dbae:	683b      	ldr	r3, [r7, #0]
 801dbb0:	695b      	ldr	r3, [r3, #20]
 801dbb2:	021b      	lsls	r3, r3, #8
 801dbb4:	697a      	ldr	r2, [r7, #20]
 801dbb6:	4313      	orrs	r3, r2
 801dbb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	697a      	ldr	r2, [r7, #20]
 801dbbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	68fa      	ldr	r2, [r7, #12]
 801dbc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801dbc6:	683b      	ldr	r3, [r7, #0]
 801dbc8:	685a      	ldr	r2, [r3, #4]
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	693a      	ldr	r2, [r7, #16]
 801dbd2:	621a      	str	r2, [r3, #32]
}
 801dbd4:	bf00      	nop
 801dbd6:	371c      	adds	r7, #28
 801dbd8:	46bd      	mov	sp, r7
 801dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbde:	4770      	bx	lr
 801dbe0:	40012c00 	.word	0x40012c00
 801dbe4:	40014400 	.word	0x40014400
 801dbe8:	40014800 	.word	0x40014800

0801dbec <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801dbec:	b480      	push	{r7}
 801dbee:	b087      	sub	sp, #28
 801dbf0:	af00      	add	r7, sp, #0
 801dbf2:	6078      	str	r0, [r7, #4]
 801dbf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	6a1b      	ldr	r3, [r3, #32]
 801dbfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801dbfe:	687b      	ldr	r3, [r7, #4]
 801dc00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	6a1b      	ldr	r3, [r3, #32]
 801dc06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	685b      	ldr	r3, [r3, #4]
 801dc0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801dc12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801dc14:	68fb      	ldr	r3, [r7, #12]
 801dc16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801dc1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dc1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dc20:	683b      	ldr	r3, [r7, #0]
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	021b      	lsls	r3, r3, #8
 801dc26:	68fa      	ldr	r2, [r7, #12]
 801dc28:	4313      	orrs	r3, r2
 801dc2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801dc2c:	693b      	ldr	r3, [r7, #16]
 801dc2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801dc32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801dc34:	683b      	ldr	r3, [r7, #0]
 801dc36:	689b      	ldr	r3, [r3, #8]
 801dc38:	051b      	lsls	r3, r3, #20
 801dc3a:	693a      	ldr	r2, [r7, #16]
 801dc3c:	4313      	orrs	r3, r2
 801dc3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	4a14      	ldr	r2, [pc, #80]	; (801dc94 <TIM_OC6_SetConfig+0xa8>)
 801dc44:	4293      	cmp	r3, r2
 801dc46:	d007      	beq.n	801dc58 <TIM_OC6_SetConfig+0x6c>
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	4a13      	ldr	r2, [pc, #76]	; (801dc98 <TIM_OC6_SetConfig+0xac>)
 801dc4c:	4293      	cmp	r3, r2
 801dc4e:	d003      	beq.n	801dc58 <TIM_OC6_SetConfig+0x6c>
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	4a12      	ldr	r2, [pc, #72]	; (801dc9c <TIM_OC6_SetConfig+0xb0>)
 801dc54:	4293      	cmp	r3, r2
 801dc56:	d109      	bne.n	801dc6c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801dc58:	697b      	ldr	r3, [r7, #20]
 801dc5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801dc5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801dc60:	683b      	ldr	r3, [r7, #0]
 801dc62:	695b      	ldr	r3, [r3, #20]
 801dc64:	029b      	lsls	r3, r3, #10
 801dc66:	697a      	ldr	r2, [r7, #20]
 801dc68:	4313      	orrs	r3, r2
 801dc6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	697a      	ldr	r2, [r7, #20]
 801dc70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	68fa      	ldr	r2, [r7, #12]
 801dc76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801dc78:	683b      	ldr	r3, [r7, #0]
 801dc7a:	685a      	ldr	r2, [r3, #4]
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	693a      	ldr	r2, [r7, #16]
 801dc84:	621a      	str	r2, [r3, #32]
}
 801dc86:	bf00      	nop
 801dc88:	371c      	adds	r7, #28
 801dc8a:	46bd      	mov	sp, r7
 801dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc90:	4770      	bx	lr
 801dc92:	bf00      	nop
 801dc94:	40012c00 	.word	0x40012c00
 801dc98:	40014400 	.word	0x40014400
 801dc9c:	40014800 	.word	0x40014800

0801dca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dca0:	b480      	push	{r7}
 801dca2:	b087      	sub	sp, #28
 801dca4:	af00      	add	r7, sp, #0
 801dca6:	60f8      	str	r0, [r7, #12]
 801dca8:	60b9      	str	r1, [r7, #8]
 801dcaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801dcac:	68fb      	ldr	r3, [r7, #12]
 801dcae:	6a1b      	ldr	r3, [r3, #32]
 801dcb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dcb2:	68fb      	ldr	r3, [r7, #12]
 801dcb4:	6a1b      	ldr	r3, [r3, #32]
 801dcb6:	f023 0201 	bic.w	r2, r3, #1
 801dcba:	68fb      	ldr	r3, [r7, #12]
 801dcbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dcbe:	68fb      	ldr	r3, [r7, #12]
 801dcc0:	699b      	ldr	r3, [r3, #24]
 801dcc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801dcc4:	693b      	ldr	r3, [r7, #16]
 801dcc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801dcca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	011b      	lsls	r3, r3, #4
 801dcd0:	693a      	ldr	r2, [r7, #16]
 801dcd2:	4313      	orrs	r3, r2
 801dcd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801dcd6:	697b      	ldr	r3, [r7, #20]
 801dcd8:	f023 030a 	bic.w	r3, r3, #10
 801dcdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801dcde:	697a      	ldr	r2, [r7, #20]
 801dce0:	68bb      	ldr	r3, [r7, #8]
 801dce2:	4313      	orrs	r3, r2
 801dce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801dce6:	68fb      	ldr	r3, [r7, #12]
 801dce8:	693a      	ldr	r2, [r7, #16]
 801dcea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801dcec:	68fb      	ldr	r3, [r7, #12]
 801dcee:	697a      	ldr	r2, [r7, #20]
 801dcf0:	621a      	str	r2, [r3, #32]
}
 801dcf2:	bf00      	nop
 801dcf4:	371c      	adds	r7, #28
 801dcf6:	46bd      	mov	sp, r7
 801dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcfc:	4770      	bx	lr

0801dcfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dcfe:	b480      	push	{r7}
 801dd00:	b087      	sub	sp, #28
 801dd02:	af00      	add	r7, sp, #0
 801dd04:	60f8      	str	r0, [r7, #12]
 801dd06:	60b9      	str	r1, [r7, #8]
 801dd08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	6a1b      	ldr	r3, [r3, #32]
 801dd0e:	f023 0210 	bic.w	r2, r3, #16
 801dd12:	68fb      	ldr	r3, [r7, #12]
 801dd14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	699b      	ldr	r3, [r3, #24]
 801dd1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801dd1c:	68fb      	ldr	r3, [r7, #12]
 801dd1e:	6a1b      	ldr	r3, [r3, #32]
 801dd20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801dd22:	697b      	ldr	r3, [r7, #20]
 801dd24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801dd28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	031b      	lsls	r3, r3, #12
 801dd2e:	697a      	ldr	r2, [r7, #20]
 801dd30:	4313      	orrs	r3, r2
 801dd32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801dd34:	693b      	ldr	r3, [r7, #16]
 801dd36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801dd3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801dd3c:	68bb      	ldr	r3, [r7, #8]
 801dd3e:	011b      	lsls	r3, r3, #4
 801dd40:	693a      	ldr	r2, [r7, #16]
 801dd42:	4313      	orrs	r3, r2
 801dd44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801dd46:	68fb      	ldr	r3, [r7, #12]
 801dd48:	697a      	ldr	r2, [r7, #20]
 801dd4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801dd4c:	68fb      	ldr	r3, [r7, #12]
 801dd4e:	693a      	ldr	r2, [r7, #16]
 801dd50:	621a      	str	r2, [r3, #32]
}
 801dd52:	bf00      	nop
 801dd54:	371c      	adds	r7, #28
 801dd56:	46bd      	mov	sp, r7
 801dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd5c:	4770      	bx	lr

0801dd5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801dd5e:	b480      	push	{r7}
 801dd60:	b085      	sub	sp, #20
 801dd62:	af00      	add	r7, sp, #0
 801dd64:	6078      	str	r0, [r7, #4]
 801dd66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	689b      	ldr	r3, [r3, #8]
 801dd6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801dd6e:	68fb      	ldr	r3, [r7, #12]
 801dd70:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801dd74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dd78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801dd7a:	683a      	ldr	r2, [r7, #0]
 801dd7c:	68fb      	ldr	r3, [r7, #12]
 801dd7e:	4313      	orrs	r3, r2
 801dd80:	f043 0307 	orr.w	r3, r3, #7
 801dd84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	68fa      	ldr	r2, [r7, #12]
 801dd8a:	609a      	str	r2, [r3, #8]
}
 801dd8c:	bf00      	nop
 801dd8e:	3714      	adds	r7, #20
 801dd90:	46bd      	mov	sp, r7
 801dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd96:	4770      	bx	lr

0801dd98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801dd98:	b480      	push	{r7}
 801dd9a:	b087      	sub	sp, #28
 801dd9c:	af00      	add	r7, sp, #0
 801dd9e:	60f8      	str	r0, [r7, #12]
 801dda0:	60b9      	str	r1, [r7, #8]
 801dda2:	607a      	str	r2, [r7, #4]
 801dda4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801dda6:	68fb      	ldr	r3, [r7, #12]
 801dda8:	689b      	ldr	r3, [r3, #8]
 801ddaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ddac:	697b      	ldr	r3, [r7, #20]
 801ddae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801ddb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801ddb4:	683b      	ldr	r3, [r7, #0]
 801ddb6:	021a      	lsls	r2, r3, #8
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	431a      	orrs	r2, r3
 801ddbc:	68bb      	ldr	r3, [r7, #8]
 801ddbe:	4313      	orrs	r3, r2
 801ddc0:	697a      	ldr	r2, [r7, #20]
 801ddc2:	4313      	orrs	r3, r2
 801ddc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801ddc6:	68fb      	ldr	r3, [r7, #12]
 801ddc8:	697a      	ldr	r2, [r7, #20]
 801ddca:	609a      	str	r2, [r3, #8]
}
 801ddcc:	bf00      	nop
 801ddce:	371c      	adds	r7, #28
 801ddd0:	46bd      	mov	sp, r7
 801ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddd6:	4770      	bx	lr

0801ddd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801ddd8:	b480      	push	{r7}
 801ddda:	b087      	sub	sp, #28
 801dddc:	af00      	add	r7, sp, #0
 801ddde:	60f8      	str	r0, [r7, #12]
 801dde0:	60b9      	str	r1, [r7, #8]
 801dde2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801dde4:	68bb      	ldr	r3, [r7, #8]
 801dde6:	f003 031f 	and.w	r3, r3, #31
 801ddea:	2201      	movs	r2, #1
 801ddec:	fa02 f303 	lsl.w	r3, r2, r3
 801ddf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801ddf2:	68fb      	ldr	r3, [r7, #12]
 801ddf4:	6a1a      	ldr	r2, [r3, #32]
 801ddf6:	697b      	ldr	r3, [r7, #20]
 801ddf8:	43db      	mvns	r3, r3
 801ddfa:	401a      	ands	r2, r3
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801de00:	68fb      	ldr	r3, [r7, #12]
 801de02:	6a1a      	ldr	r2, [r3, #32]
 801de04:	68bb      	ldr	r3, [r7, #8]
 801de06:	f003 031f 	and.w	r3, r3, #31
 801de0a:	6879      	ldr	r1, [r7, #4]
 801de0c:	fa01 f303 	lsl.w	r3, r1, r3
 801de10:	431a      	orrs	r2, r3
 801de12:	68fb      	ldr	r3, [r7, #12]
 801de14:	621a      	str	r2, [r3, #32]
}
 801de16:	bf00      	nop
 801de18:	371c      	adds	r7, #28
 801de1a:	46bd      	mov	sp, r7
 801de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de20:	4770      	bx	lr
	...

0801de24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801de24:	b480      	push	{r7}
 801de26:	b085      	sub	sp, #20
 801de28:	af00      	add	r7, sp, #0
 801de2a:	6078      	str	r0, [r7, #4]
 801de2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801de34:	2b01      	cmp	r3, #1
 801de36:	d101      	bne.n	801de3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801de38:	2302      	movs	r3, #2
 801de3a:	e04a      	b.n	801ded2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	2201      	movs	r2, #1
 801de40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	2202      	movs	r2, #2
 801de48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	685b      	ldr	r3, [r3, #4]
 801de52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	689b      	ldr	r3, [r3, #8]
 801de5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	4a1f      	ldr	r2, [pc, #124]	; (801dee0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 801de62:	4293      	cmp	r3, r2
 801de64:	d108      	bne.n	801de78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801de6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801de6e:	683b      	ldr	r3, [r7, #0]
 801de70:	685b      	ldr	r3, [r3, #4]
 801de72:	68fa      	ldr	r2, [r7, #12]
 801de74:	4313      	orrs	r3, r2
 801de76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801de7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801de80:	683b      	ldr	r3, [r7, #0]
 801de82:	681b      	ldr	r3, [r3, #0]
 801de84:	68fa      	ldr	r2, [r7, #12]
 801de86:	4313      	orrs	r3, r2
 801de88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	681b      	ldr	r3, [r3, #0]
 801de8e:	68fa      	ldr	r2, [r7, #12]
 801de90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	4a12      	ldr	r2, [pc, #72]	; (801dee0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 801de98:	4293      	cmp	r3, r2
 801de9a:	d004      	beq.n	801dea6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 801de9c:	687b      	ldr	r3, [r7, #4]
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801dea4:	d10c      	bne.n	801dec0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801dea6:	68bb      	ldr	r3, [r7, #8]
 801dea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801deac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801deae:	683b      	ldr	r3, [r7, #0]
 801deb0:	689b      	ldr	r3, [r3, #8]
 801deb2:	68ba      	ldr	r2, [r7, #8]
 801deb4:	4313      	orrs	r3, r2
 801deb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	68ba      	ldr	r2, [r7, #8]
 801debe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	2201      	movs	r2, #1
 801dec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	2200      	movs	r2, #0
 801decc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801ded0:	2300      	movs	r3, #0
}
 801ded2:	4618      	mov	r0, r3
 801ded4:	3714      	adds	r7, #20
 801ded6:	46bd      	mov	sp, r7
 801ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dedc:	4770      	bx	lr
 801dede:	bf00      	nop
 801dee0:	40012c00 	.word	0x40012c00

0801dee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801dee4:	b480      	push	{r7}
 801dee6:	b083      	sub	sp, #12
 801dee8:	af00      	add	r7, sp, #0
 801deea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801deec:	bf00      	nop
 801deee:	370c      	adds	r7, #12
 801def0:	46bd      	mov	sp, r7
 801def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801def6:	4770      	bx	lr

0801def8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801def8:	b480      	push	{r7}
 801defa:	b083      	sub	sp, #12
 801defc:	af00      	add	r7, sp, #0
 801defe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801df00:	bf00      	nop
 801df02:	370c      	adds	r7, #12
 801df04:	46bd      	mov	sp, r7
 801df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df0a:	4770      	bx	lr

0801df0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801df0c:	b480      	push	{r7}
 801df0e:	b083      	sub	sp, #12
 801df10:	af00      	add	r7, sp, #0
 801df12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801df14:	bf00      	nop
 801df16:	370c      	adds	r7, #12
 801df18:	46bd      	mov	sp, r7
 801df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df1e:	4770      	bx	lr

0801df20 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 801df20:	b590      	push	{r4, r7, lr}
 801df22:	b083      	sub	sp, #12
 801df24:	af00      	add	r7, sp, #0
 801df26:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d101      	bne.n	801df32 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 801df2e:	2301      	movs	r3, #1
 801df30:	e072      	b.n	801e018 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 801df32:	687b      	ldr	r3, [r7, #4]
 801df34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801df38:	b2db      	uxtb	r3, r3
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	d106      	bne.n	801df4c <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	2200      	movs	r2, #0
 801df42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 801df46:	6878      	ldr	r0, [r7, #4]
 801df48:	f7f8 f896 	bl	8016078 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	2202      	movs	r2, #2
 801df50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	2201      	movs	r2, #1
 801df5a:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	6819      	ldr	r1, [r3, #0]
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 801df6a:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	691b      	ldr	r3, [r3, #16]
 801df70:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 801df72:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 801df74:	687b      	ldr	r3, [r7, #4]
 801df76:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 801df78:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 801df7e:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 801df84:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 801df8a:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 801df90:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 801df92:	687b      	ldr	r3, [r7, #4]
 801df94:	681b      	ldr	r3, [r3, #0]
 801df96:	430a      	orrs	r2, r1
 801df98:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	7b1b      	ldrb	r3, [r3, #12]
 801df9e:	2b01      	cmp	r3, #1
 801dfa0:	d107      	bne.n	801dfb2 <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	681b      	ldr	r3, [r3, #0]
 801dfa6:	681a      	ldr	r2, [r3, #0]
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801dfb0:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dfba:	431a      	orrs	r2, r3
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfc0:	431a      	orrs	r2, r3
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	681b      	ldr	r3, [r3, #0]
 801dfc6:	43d2      	mvns	r2, r2
 801dfc8:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	430a      	orrs	r2, r1
 801dfd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	681b      	ldr	r3, [r3, #0]
 801dfde:	687a      	ldr	r2, [r7, #4]
 801dfe0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801dfe2:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	681c      	ldr	r4, [r3, #0]
 801dfec:	4610      	mov	r0, r2
 801dfee:	f000 f952 	bl	801e296 <TSC_extract_groups>
 801dff2:	4603      	mov	r3, r0
 801dff4:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	685a      	ldr	r2, [r3, #4]
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	681b      	ldr	r3, [r3, #0]
 801e000:	f022 0203 	bic.w	r2, r2, #3
 801e004:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 801e006:	687b      	ldr	r3, [r7, #4]
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	2203      	movs	r2, #3
 801e00c:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	2201      	movs	r2, #1
 801e012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 801e016:	2300      	movs	r3, #0
}
 801e018:	4618      	mov	r0, r3
 801e01a:	370c      	adds	r7, #12
 801e01c:	46bd      	mov	sp, r7
 801e01e:	bd90      	pop	{r4, r7, pc}

0801e020 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 801e020:	b480      	push	{r7}
 801e022:	b083      	sub	sp, #12
 801e024:	af00      	add	r7, sp, #0
 801e026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e02e:	2b01      	cmp	r3, #1
 801e030:	d101      	bne.n	801e036 <HAL_TSC_Start_IT+0x16>
 801e032:	2302      	movs	r3, #2
 801e034:	e04b      	b.n	801e0ce <HAL_TSC_Start_IT+0xae>
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	2201      	movs	r2, #1
 801e03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	2202      	movs	r2, #2
 801e042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	685a      	ldr	r2, [r3, #4]
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	f042 0201 	orr.w	r2, r2, #1
 801e054:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 801e056:	687b      	ldr	r3, [r7, #4]
 801e058:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801e05c:	2b01      	cmp	r3, #1
 801e05e:	d108      	bne.n	801e072 <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	685a      	ldr	r2, [r3, #4]
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	681b      	ldr	r3, [r3, #0]
 801e06a:	f042 0202 	orr.w	r2, r2, #2
 801e06e:	605a      	str	r2, [r3, #4]
 801e070:	e007      	b.n	801e082 <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	685a      	ldr	r2, [r3, #4]
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	f022 0202 	bic.w	r2, r2, #2
 801e080:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	2203      	movs	r2, #3
 801e088:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	6a1b      	ldr	r3, [r3, #32]
 801e08e:	2b00      	cmp	r3, #0
 801e090:	d108      	bne.n	801e0a4 <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	681b      	ldr	r3, [r3, #0]
 801e096:	681a      	ldr	r2, [r3, #0]
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	f022 0210 	bic.w	r2, r2, #16
 801e0a0:	601a      	str	r2, [r3, #0]
 801e0a2:	e007      	b.n	801e0b4 <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	681a      	ldr	r2, [r3, #0]
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	681b      	ldr	r3, [r3, #0]
 801e0ae:	f042 0210 	orr.w	r2, r2, #16
 801e0b2:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	681b      	ldr	r3, [r3, #0]
 801e0b8:	681a      	ldr	r2, [r3, #0]
 801e0ba:	687b      	ldr	r3, [r7, #4]
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	f042 0202 	orr.w	r2, r2, #2
 801e0c2:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	2200      	movs	r2, #0
 801e0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801e0cc:	2300      	movs	r3, #0
}
 801e0ce:	4618      	mov	r0, r3
 801e0d0:	370c      	adds	r7, #12
 801e0d2:	46bd      	mov	sp, r7
 801e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0d8:	4770      	bx	lr

0801e0da <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 801e0da:	b480      	push	{r7}
 801e0dc:	b083      	sub	sp, #12
 801e0de:	af00      	add	r7, sp, #0
 801e0e0:	6078      	str	r0, [r7, #4]
 801e0e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	681b      	ldr	r3, [r3, #0]
 801e0e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e0ea:	683b      	ldr	r3, [r7, #0]
 801e0ec:	f003 030f 	and.w	r3, r3, #15
 801e0f0:	3310      	adds	r3, #16
 801e0f2:	2101      	movs	r1, #1
 801e0f4:	fa01 f303 	lsl.w	r3, r1, r3
 801e0f8:	401a      	ands	r2, r3
 801e0fa:	683b      	ldr	r3, [r7, #0]
 801e0fc:	f003 030f 	and.w	r3, r3, #15
 801e100:	3310      	adds	r3, #16
 801e102:	2101      	movs	r1, #1
 801e104:	fa01 f303 	lsl.w	r3, r1, r3
 801e108:	429a      	cmp	r2, r3
 801e10a:	bf0c      	ite	eq
 801e10c:	2301      	moveq	r3, #1
 801e10e:	2300      	movne	r3, #0
 801e110:	b2db      	uxtb	r3, r3
}
 801e112:	4618      	mov	r0, r3
 801e114:	370c      	adds	r7, #12
 801e116:	46bd      	mov	sp, r7
 801e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e11c:	4770      	bx	lr

0801e11e <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 801e11e:	b480      	push	{r7}
 801e120:	b083      	sub	sp, #12
 801e122:	af00      	add	r7, sp, #0
 801e124:	6078      	str	r0, [r7, #4]
 801e126:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	681a      	ldr	r2, [r3, #0]
 801e12c:	683b      	ldr	r3, [r7, #0]
 801e12e:	330c      	adds	r3, #12
 801e130:	009b      	lsls	r3, r3, #2
 801e132:	4413      	add	r3, r2
 801e134:	685b      	ldr	r3, [r3, #4]
}
 801e136:	4618      	mov	r0, r3
 801e138:	370c      	adds	r7, #12
 801e13a:	46bd      	mov	sp, r7
 801e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e140:	4770      	bx	lr

0801e142 <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 801e142:	b590      	push	{r4, r7, lr}
 801e144:	b083      	sub	sp, #12
 801e146:	af00      	add	r7, sp, #0
 801e148:	6078      	str	r0, [r7, #4]
 801e14a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e152:	2b01      	cmp	r3, #1
 801e154:	d101      	bne.n	801e15a <HAL_TSC_IOConfig+0x18>
 801e156:	2302      	movs	r3, #2
 801e158:	e032      	b.n	801e1c0 <HAL_TSC_IOConfig+0x7e>
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	2201      	movs	r2, #1
 801e15e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	681b      	ldr	r3, [r3, #0]
 801e166:	681a      	ldr	r2, [r3, #0]
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	f022 0202 	bic.w	r2, r2, #2
 801e170:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 801e172:	683b      	ldr	r3, [r7, #0]
 801e174:	681a      	ldr	r2, [r3, #0]
 801e176:	683b      	ldr	r3, [r7, #0]
 801e178:	685b      	ldr	r3, [r3, #4]
 801e17a:	431a      	orrs	r2, r3
 801e17c:	683b      	ldr	r3, [r7, #0]
 801e17e:	689b      	ldr	r3, [r3, #8]
 801e180:	431a      	orrs	r2, r3
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	43d2      	mvns	r2, r2
 801e188:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 801e18a:	683b      	ldr	r3, [r7, #0]
 801e18c:	6819      	ldr	r1, [r3, #0]
 801e18e:	683b      	ldr	r3, [r7, #0]
 801e190:	685a      	ldr	r2, [r3, #4]
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	681b      	ldr	r3, [r3, #0]
 801e196:	430a      	orrs	r2, r1
 801e198:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	683a      	ldr	r2, [r7, #0]
 801e1a0:	6892      	ldr	r2, [r2, #8]
 801e1a2:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 801e1a4:	683b      	ldr	r3, [r7, #0]
 801e1a6:	681a      	ldr	r2, [r3, #0]
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	681c      	ldr	r4, [r3, #0]
 801e1ac:	4610      	mov	r0, r2
 801e1ae:	f000 f872 	bl	801e296 <TSC_extract_groups>
 801e1b2:	4603      	mov	r3, r0
 801e1b4:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	2200      	movs	r2, #0
 801e1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801e1be:	2300      	movs	r3, #0
}
 801e1c0:	4618      	mov	r0, r3
 801e1c2:	370c      	adds	r7, #12
 801e1c4:	46bd      	mov	sp, r7
 801e1c6:	bd90      	pop	{r4, r7, pc}

0801e1c8 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 801e1c8:	b480      	push	{r7}
 801e1ca:	b083      	sub	sp, #12
 801e1cc:	af00      	add	r7, sp, #0
 801e1ce:	6078      	str	r0, [r7, #4]
 801e1d0:	460b      	mov	r3, r1
 801e1d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e1da:	2b01      	cmp	r3, #1
 801e1dc:	d101      	bne.n	801e1e2 <HAL_TSC_IODischarge+0x1a>
 801e1de:	2302      	movs	r3, #2
 801e1e0:	e01c      	b.n	801e21c <HAL_TSC_IODischarge+0x54>
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	2201      	movs	r2, #1
 801e1e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 801e1ea:	78fb      	ldrb	r3, [r7, #3]
 801e1ec:	2b01      	cmp	r3, #1
 801e1ee:	d108      	bne.n	801e202 <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	681a      	ldr	r2, [r3, #0]
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	f022 0210 	bic.w	r2, r2, #16
 801e1fe:	601a      	str	r2, [r3, #0]
 801e200:	e007      	b.n	801e212 <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	681a      	ldr	r2, [r3, #0]
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	f042 0210 	orr.w	r2, r2, #16
 801e210:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 801e212:	687b      	ldr	r3, [r7, #4]
 801e214:	2200      	movs	r2, #0
 801e216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 801e21a:	2300      	movs	r3, #0
}
 801e21c:	4618      	mov	r0, r3
 801e21e:	370c      	adds	r7, #12
 801e220:	46bd      	mov	sp, r7
 801e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e226:	4770      	bx	lr

0801e228 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 801e228:	b580      	push	{r7, lr}
 801e22a:	b082      	sub	sp, #8
 801e22c:	af00      	add	r7, sp, #0
 801e22e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	68db      	ldr	r3, [r3, #12]
 801e236:	f003 0301 	and.w	r3, r3, #1
 801e23a:	2b01      	cmp	r3, #1
 801e23c:	d103      	bne.n	801e246 <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 801e23e:	687b      	ldr	r3, [r7, #4]
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	2201      	movs	r2, #1
 801e244:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	68db      	ldr	r3, [r3, #12]
 801e24c:	f003 0302 	and.w	r3, r3, #2
 801e250:	2b02      	cmp	r3, #2
 801e252:	d10b      	bne.n	801e26c <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 801e254:	687b      	ldr	r3, [r7, #4]
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	2202      	movs	r2, #2
 801e25a:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	2203      	movs	r2, #3
 801e260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 801e264:	6878      	ldr	r0, [r7, #4]
 801e266:	f000 f80c 	bl	801e282 <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 801e26a:	e006      	b.n	801e27a <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	2201      	movs	r2, #1
 801e270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 801e274:	6878      	ldr	r0, [r7, #4]
 801e276:	f7f7 fb53 	bl	8015920 <HAL_TSC_ConvCpltCallback>
}
 801e27a:	bf00      	nop
 801e27c:	3708      	adds	r7, #8
 801e27e:	46bd      	mov	sp, r7
 801e280:	bd80      	pop	{r7, pc}

0801e282 <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 801e282:	b480      	push	{r7}
 801e284:	b083      	sub	sp, #12
 801e286:	af00      	add	r7, sp, #0
 801e288:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 801e28a:	bf00      	nop
 801e28c:	370c      	adds	r7, #12
 801e28e:	46bd      	mov	sp, r7
 801e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e294:	4770      	bx	lr

0801e296 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 801e296:	b480      	push	{r7}
 801e298:	b085      	sub	sp, #20
 801e29a:	af00      	add	r7, sp, #0
 801e29c:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 801e29e:	2300      	movs	r3, #0
 801e2a0:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 801e2a2:	2300      	movs	r3, #0
 801e2a4:	60bb      	str	r3, [r7, #8]
 801e2a6:	e011      	b.n	801e2cc <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 801e2a8:	68bb      	ldr	r3, [r7, #8]
 801e2aa:	009b      	lsls	r3, r3, #2
 801e2ac:	220f      	movs	r2, #15
 801e2ae:	409a      	lsls	r2, r3
 801e2b0:	687b      	ldr	r3, [r7, #4]
 801e2b2:	4013      	ands	r3, r2
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d006      	beq.n	801e2c6 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 801e2b8:	2201      	movs	r2, #1
 801e2ba:	68bb      	ldr	r3, [r7, #8]
 801e2bc:	fa02 f303 	lsl.w	r3, r2, r3
 801e2c0:	68fa      	ldr	r2, [r7, #12]
 801e2c2:	4313      	orrs	r3, r2
 801e2c4:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 801e2c6:	68bb      	ldr	r3, [r7, #8]
 801e2c8:	3301      	adds	r3, #1
 801e2ca:	60bb      	str	r3, [r7, #8]
 801e2cc:	68bb      	ldr	r3, [r7, #8]
 801e2ce:	2b06      	cmp	r3, #6
 801e2d0:	d9ea      	bls.n	801e2a8 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 801e2d2:	68fb      	ldr	r3, [r7, #12]
}
 801e2d4:	4618      	mov	r0, r3
 801e2d6:	3714      	adds	r7, #20
 801e2d8:	46bd      	mov	sp, r7
 801e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2de:	4770      	bx	lr

0801e2e0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801e2e0:	b480      	push	{r7}
 801e2e2:	b085      	sub	sp, #20
 801e2e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e2e6:	f3ef 8305 	mrs	r3, IPSR
 801e2ea:	60bb      	str	r3, [r7, #8]
  return(result);
 801e2ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	d10f      	bne.n	801e312 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e2f2:	f3ef 8310 	mrs	r3, PRIMASK
 801e2f6:	607b      	str	r3, [r7, #4]
  return(result);
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	d109      	bne.n	801e312 <osKernelInitialize+0x32>
 801e2fe:	4b11      	ldr	r3, [pc, #68]	; (801e344 <osKernelInitialize+0x64>)
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	2b02      	cmp	r3, #2
 801e304:	d109      	bne.n	801e31a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e306:	f3ef 8311 	mrs	r3, BASEPRI
 801e30a:	603b      	str	r3, [r7, #0]
  return(result);
 801e30c:	683b      	ldr	r3, [r7, #0]
 801e30e:	2b00      	cmp	r3, #0
 801e310:	d003      	beq.n	801e31a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801e312:	f06f 0305 	mvn.w	r3, #5
 801e316:	60fb      	str	r3, [r7, #12]
 801e318:	e00c      	b.n	801e334 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801e31a:	4b0a      	ldr	r3, [pc, #40]	; (801e344 <osKernelInitialize+0x64>)
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	2b00      	cmp	r3, #0
 801e320:	d105      	bne.n	801e32e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 801e322:	4b08      	ldr	r3, [pc, #32]	; (801e344 <osKernelInitialize+0x64>)
 801e324:	2201      	movs	r2, #1
 801e326:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801e328:	2300      	movs	r3, #0
 801e32a:	60fb      	str	r3, [r7, #12]
 801e32c:	e002      	b.n	801e334 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801e32e:	f04f 33ff 	mov.w	r3, #4294967295
 801e332:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801e334:	68fb      	ldr	r3, [r7, #12]
}
 801e336:	4618      	mov	r0, r3
 801e338:	3714      	adds	r7, #20
 801e33a:	46bd      	mov	sp, r7
 801e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e340:	4770      	bx	lr
 801e342:	bf00      	nop
 801e344:	20000b74 	.word	0x20000b74

0801e348 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801e348:	b580      	push	{r7, lr}
 801e34a:	b084      	sub	sp, #16
 801e34c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e34e:	f3ef 8305 	mrs	r3, IPSR
 801e352:	60bb      	str	r3, [r7, #8]
  return(result);
 801e354:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e356:	2b00      	cmp	r3, #0
 801e358:	d10f      	bne.n	801e37a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e35a:	f3ef 8310 	mrs	r3, PRIMASK
 801e35e:	607b      	str	r3, [r7, #4]
  return(result);
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	2b00      	cmp	r3, #0
 801e364:	d109      	bne.n	801e37a <osKernelStart+0x32>
 801e366:	4b11      	ldr	r3, [pc, #68]	; (801e3ac <osKernelStart+0x64>)
 801e368:	681b      	ldr	r3, [r3, #0]
 801e36a:	2b02      	cmp	r3, #2
 801e36c:	d109      	bne.n	801e382 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e36e:	f3ef 8311 	mrs	r3, BASEPRI
 801e372:	603b      	str	r3, [r7, #0]
  return(result);
 801e374:	683b      	ldr	r3, [r7, #0]
 801e376:	2b00      	cmp	r3, #0
 801e378:	d003      	beq.n	801e382 <osKernelStart+0x3a>
    stat = osErrorISR;
 801e37a:	f06f 0305 	mvn.w	r3, #5
 801e37e:	60fb      	str	r3, [r7, #12]
 801e380:	e00e      	b.n	801e3a0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 801e382:	4b0a      	ldr	r3, [pc, #40]	; (801e3ac <osKernelStart+0x64>)
 801e384:	681b      	ldr	r3, [r3, #0]
 801e386:	2b01      	cmp	r3, #1
 801e388:	d107      	bne.n	801e39a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 801e38a:	4b08      	ldr	r3, [pc, #32]	; (801e3ac <osKernelStart+0x64>)
 801e38c:	2202      	movs	r2, #2
 801e38e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 801e390:	f002 fee8 	bl	8021164 <vTaskStartScheduler>
      stat = osOK;
 801e394:	2300      	movs	r3, #0
 801e396:	60fb      	str	r3, [r7, #12]
 801e398:	e002      	b.n	801e3a0 <osKernelStart+0x58>
    } else {
      stat = osError;
 801e39a:	f04f 33ff 	mov.w	r3, #4294967295
 801e39e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801e3a0:	68fb      	ldr	r3, [r7, #12]
}
 801e3a2:	4618      	mov	r0, r3
 801e3a4:	3710      	adds	r7, #16
 801e3a6:	46bd      	mov	sp, r7
 801e3a8:	bd80      	pop	{r7, pc}
 801e3aa:	bf00      	nop
 801e3ac:	20000b74 	.word	0x20000b74

0801e3b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801e3b0:	b580      	push	{r7, lr}
 801e3b2:	b092      	sub	sp, #72	; 0x48
 801e3b4:	af04      	add	r7, sp, #16
 801e3b6:	60f8      	str	r0, [r7, #12]
 801e3b8:	60b9      	str	r1, [r7, #8]
 801e3ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801e3bc:	2300      	movs	r3, #0
 801e3be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e3c0:	f3ef 8305 	mrs	r3, IPSR
 801e3c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 801e3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	f040 8095 	bne.w	801e4f8 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e3ce:	f3ef 8310 	mrs	r3, PRIMASK
 801e3d2:	623b      	str	r3, [r7, #32]
  return(result);
 801e3d4:	6a3b      	ldr	r3, [r7, #32]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	f040 808e 	bne.w	801e4f8 <osThreadNew+0x148>
 801e3dc:	4b49      	ldr	r3, [pc, #292]	; (801e504 <osThreadNew+0x154>)
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	2b02      	cmp	r3, #2
 801e3e2:	d106      	bne.n	801e3f2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e3e4:	f3ef 8311 	mrs	r3, BASEPRI
 801e3e8:	61fb      	str	r3, [r7, #28]
  return(result);
 801e3ea:	69fb      	ldr	r3, [r7, #28]
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	f040 8083 	bne.w	801e4f8 <osThreadNew+0x148>
 801e3f2:	68fb      	ldr	r3, [r7, #12]
 801e3f4:	2b00      	cmp	r3, #0
 801e3f6:	d07f      	beq.n	801e4f8 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 801e3f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801e3fc:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 801e3fe:	2318      	movs	r3, #24
 801e400:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 801e402:	2300      	movs	r3, #0
 801e404:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 801e406:	f107 031b 	add.w	r3, r7, #27
 801e40a:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 801e40c:	f04f 33ff 	mov.w	r3, #4294967295
 801e410:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	2b00      	cmp	r3, #0
 801e416:	d045      	beq.n	801e4a4 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	681b      	ldr	r3, [r3, #0]
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	d002      	beq.n	801e426 <osThreadNew+0x76>
        name = attr->name;
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	681b      	ldr	r3, [r3, #0]
 801e424:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	699b      	ldr	r3, [r3, #24]
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d002      	beq.n	801e434 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	699b      	ldr	r3, [r3, #24]
 801e432:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801e434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e436:	2b00      	cmp	r3, #0
 801e438:	d008      	beq.n	801e44c <osThreadNew+0x9c>
 801e43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e43c:	2b38      	cmp	r3, #56	; 0x38
 801e43e:	d805      	bhi.n	801e44c <osThreadNew+0x9c>
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	685b      	ldr	r3, [r3, #4]
 801e444:	f003 0301 	and.w	r3, r3, #1
 801e448:	2b00      	cmp	r3, #0
 801e44a:	d001      	beq.n	801e450 <osThreadNew+0xa0>
        return (NULL);
 801e44c:	2300      	movs	r3, #0
 801e44e:	e054      	b.n	801e4fa <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	695b      	ldr	r3, [r3, #20]
 801e454:	2b00      	cmp	r3, #0
 801e456:	d003      	beq.n	801e460 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	695b      	ldr	r3, [r3, #20]
 801e45c:	089b      	lsrs	r3, r3, #2
 801e45e:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	689b      	ldr	r3, [r3, #8]
 801e464:	2b00      	cmp	r3, #0
 801e466:	d00e      	beq.n	801e486 <osThreadNew+0xd6>
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	68db      	ldr	r3, [r3, #12]
 801e46c:	2b63      	cmp	r3, #99	; 0x63
 801e46e:	d90a      	bls.n	801e486 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e474:	2b00      	cmp	r3, #0
 801e476:	d006      	beq.n	801e486 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	695b      	ldr	r3, [r3, #20]
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d002      	beq.n	801e486 <osThreadNew+0xd6>
        mem = 1;
 801e480:	2301      	movs	r3, #1
 801e482:	62bb      	str	r3, [r7, #40]	; 0x28
 801e484:	e010      	b.n	801e4a8 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	689b      	ldr	r3, [r3, #8]
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d10c      	bne.n	801e4a8 <osThreadNew+0xf8>
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	68db      	ldr	r3, [r3, #12]
 801e492:	2b00      	cmp	r3, #0
 801e494:	d108      	bne.n	801e4a8 <osThreadNew+0xf8>
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	691b      	ldr	r3, [r3, #16]
 801e49a:	2b00      	cmp	r3, #0
 801e49c:	d104      	bne.n	801e4a8 <osThreadNew+0xf8>
          mem = 0;
 801e49e:	2300      	movs	r3, #0
 801e4a0:	62bb      	str	r3, [r7, #40]	; 0x28
 801e4a2:	e001      	b.n	801e4a8 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 801e4a4:	2300      	movs	r3, #0
 801e4a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 801e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4aa:	2b01      	cmp	r3, #1
 801e4ac:	d110      	bne.n	801e4d0 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801e4b2:	687a      	ldr	r2, [r7, #4]
 801e4b4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e4b6:	9202      	str	r2, [sp, #8]
 801e4b8:	9301      	str	r3, [sp, #4]
 801e4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4bc:	9300      	str	r3, [sp, #0]
 801e4be:	68bb      	ldr	r3, [r7, #8]
 801e4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e4c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e4c4:	68f8      	ldr	r0, [r7, #12]
 801e4c6:	f002 fc7f 	bl	8020dc8 <xTaskCreateStatic>
 801e4ca:	4603      	mov	r3, r0
 801e4cc:	617b      	str	r3, [r7, #20]
 801e4ce:	e013      	b.n	801e4f8 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 801e4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4d2:	2b00      	cmp	r3, #0
 801e4d4:	d110      	bne.n	801e4f8 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801e4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e4d8:	b29a      	uxth	r2, r3
 801e4da:	f107 0314 	add.w	r3, r7, #20
 801e4de:	9301      	str	r3, [sp, #4]
 801e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4e2:	9300      	str	r3, [sp, #0]
 801e4e4:	68bb      	ldr	r3, [r7, #8]
 801e4e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e4e8:	68f8      	ldr	r0, [r7, #12]
 801e4ea:	f002 fcc6 	bl	8020e7a <xTaskCreate>
 801e4ee:	4603      	mov	r3, r0
 801e4f0:	2b01      	cmp	r3, #1
 801e4f2:	d001      	beq.n	801e4f8 <osThreadNew+0x148>
          hTask = NULL;
 801e4f4:	2300      	movs	r3, #0
 801e4f6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801e4f8:	697b      	ldr	r3, [r7, #20]
}
 801e4fa:	4618      	mov	r0, r3
 801e4fc:	3738      	adds	r7, #56	; 0x38
 801e4fe:	46bd      	mov	sp, r7
 801e500:	bd80      	pop	{r7, pc}
 801e502:	bf00      	nop
 801e504:	20000b74 	.word	0x20000b74

0801e508 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 801e508:	b580      	push	{r7, lr}
 801e50a:	b08a      	sub	sp, #40	; 0x28
 801e50c:	af02      	add	r7, sp, #8
 801e50e:	6078      	str	r0, [r7, #4]
 801e510:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 801e516:	69fb      	ldr	r3, [r7, #28]
 801e518:	2b00      	cmp	r3, #0
 801e51a:	d002      	beq.n	801e522 <osThreadFlagsSet+0x1a>
 801e51c:	683b      	ldr	r3, [r7, #0]
 801e51e:	2b00      	cmp	r3, #0
 801e520:	da03      	bge.n	801e52a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 801e522:	f06f 0303 	mvn.w	r3, #3
 801e526:	60fb      	str	r3, [r7, #12]
 801e528:	e046      	b.n	801e5b8 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 801e52a:	f04f 33ff 	mov.w	r3, #4294967295
 801e52e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e530:	f3ef 8305 	mrs	r3, IPSR
 801e534:	61bb      	str	r3, [r7, #24]
  return(result);
 801e536:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d10f      	bne.n	801e55c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e53c:	f3ef 8310 	mrs	r3, PRIMASK
 801e540:	617b      	str	r3, [r7, #20]
  return(result);
 801e542:	697b      	ldr	r3, [r7, #20]
 801e544:	2b00      	cmp	r3, #0
 801e546:	d109      	bne.n	801e55c <osThreadFlagsSet+0x54>
 801e548:	4b1e      	ldr	r3, [pc, #120]	; (801e5c4 <osThreadFlagsSet+0xbc>)
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	2b02      	cmp	r3, #2
 801e54e:	d126      	bne.n	801e59e <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e550:	f3ef 8311 	mrs	r3, BASEPRI
 801e554:	613b      	str	r3, [r7, #16]
  return(result);
 801e556:	693b      	ldr	r3, [r7, #16]
 801e558:	2b00      	cmp	r3, #0
 801e55a:	d020      	beq.n	801e59e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 801e55c:	2300      	movs	r3, #0
 801e55e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 801e560:	f107 0308 	add.w	r3, r7, #8
 801e564:	9300      	str	r3, [sp, #0]
 801e566:	2300      	movs	r3, #0
 801e568:	2201      	movs	r2, #1
 801e56a:	6839      	ldr	r1, [r7, #0]
 801e56c:	69f8      	ldr	r0, [r7, #28]
 801e56e:	f003 fdc3 	bl	80220f8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 801e572:	f107 020c 	add.w	r2, r7, #12
 801e576:	2300      	movs	r3, #0
 801e578:	9300      	str	r3, [sp, #0]
 801e57a:	4613      	mov	r3, r2
 801e57c:	2200      	movs	r2, #0
 801e57e:	2100      	movs	r1, #0
 801e580:	69f8      	ldr	r0, [r7, #28]
 801e582:	f003 fdb9 	bl	80220f8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 801e586:	68bb      	ldr	r3, [r7, #8]
 801e588:	2b00      	cmp	r3, #0
 801e58a:	d015      	beq.n	801e5b8 <osThreadFlagsSet+0xb0>
 801e58c:	4b0e      	ldr	r3, [pc, #56]	; (801e5c8 <osThreadFlagsSet+0xc0>)
 801e58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e592:	601a      	str	r2, [r3, #0]
 801e594:	f3bf 8f4f 	dsb	sy
 801e598:	f3bf 8f6f 	isb	sy
 801e59c:	e00c      	b.n	801e5b8 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 801e59e:	2300      	movs	r3, #0
 801e5a0:	2201      	movs	r2, #1
 801e5a2:	6839      	ldr	r1, [r7, #0]
 801e5a4:	69f8      	ldr	r0, [r7, #28]
 801e5a6:	f003 fd03 	bl	8021fb0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 801e5aa:	f107 030c 	add.w	r3, r7, #12
 801e5ae:	2200      	movs	r2, #0
 801e5b0:	2100      	movs	r1, #0
 801e5b2:	69f8      	ldr	r0, [r7, #28]
 801e5b4:	f003 fcfc 	bl	8021fb0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 801e5b8:	68fb      	ldr	r3, [r7, #12]
}
 801e5ba:	4618      	mov	r0, r3
 801e5bc:	3720      	adds	r7, #32
 801e5be:	46bd      	mov	sp, r7
 801e5c0:	bd80      	pop	{r7, pc}
 801e5c2:	bf00      	nop
 801e5c4:	20000b74 	.word	0x20000b74
 801e5c8:	e000ed04 	.word	0xe000ed04

0801e5cc <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 801e5cc:	b580      	push	{r7, lr}
 801e5ce:	b088      	sub	sp, #32
 801e5d0:	af00      	add	r7, sp, #0
 801e5d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e5d4:	f3ef 8305 	mrs	r3, IPSR
 801e5d8:	617b      	str	r3, [r7, #20]
  return(result);
 801e5da:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	d10f      	bne.n	801e600 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e5e0:	f3ef 8310 	mrs	r3, PRIMASK
 801e5e4:	613b      	str	r3, [r7, #16]
  return(result);
 801e5e6:	693b      	ldr	r3, [r7, #16]
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d109      	bne.n	801e600 <osThreadFlagsClear+0x34>
 801e5ec:	4b1e      	ldr	r3, [pc, #120]	; (801e668 <osThreadFlagsClear+0x9c>)
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	2b02      	cmp	r3, #2
 801e5f2:	d109      	bne.n	801e608 <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e5f4:	f3ef 8311 	mrs	r3, BASEPRI
 801e5f8:	60fb      	str	r3, [r7, #12]
  return(result);
 801e5fa:	68fb      	ldr	r3, [r7, #12]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d003      	beq.n	801e608 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 801e600:	f06f 0305 	mvn.w	r3, #5
 801e604:	61fb      	str	r3, [r7, #28]
 801e606:	e02a      	b.n	801e65e <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	da03      	bge.n	801e616 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 801e60e:	f06f 0303 	mvn.w	r3, #3
 801e612:	61fb      	str	r3, [r7, #28]
 801e614:	e023      	b.n	801e65e <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 801e616:	f003 fad1 	bl	8021bbc <xTaskGetCurrentTaskHandle>
 801e61a:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 801e61c:	f107 0308 	add.w	r3, r7, #8
 801e620:	2200      	movs	r2, #0
 801e622:	2100      	movs	r1, #0
 801e624:	69b8      	ldr	r0, [r7, #24]
 801e626:	f003 fcc3 	bl	8021fb0 <xTaskGenericNotify>
 801e62a:	4603      	mov	r3, r0
 801e62c:	2b01      	cmp	r3, #1
 801e62e:	d113      	bne.n	801e658 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 801e630:	68bb      	ldr	r3, [r7, #8]
 801e632:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 801e634:	687b      	ldr	r3, [r7, #4]
 801e636:	43da      	mvns	r2, r3
 801e638:	68bb      	ldr	r3, [r7, #8]
 801e63a:	4013      	ands	r3, r2
 801e63c:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 801e63e:	68b9      	ldr	r1, [r7, #8]
 801e640:	2300      	movs	r3, #0
 801e642:	2203      	movs	r2, #3
 801e644:	69b8      	ldr	r0, [r7, #24]
 801e646:	f003 fcb3 	bl	8021fb0 <xTaskGenericNotify>
 801e64a:	4603      	mov	r3, r0
 801e64c:	2b01      	cmp	r3, #1
 801e64e:	d006      	beq.n	801e65e <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 801e650:	f04f 33ff 	mov.w	r3, #4294967295
 801e654:	61fb      	str	r3, [r7, #28]
 801e656:	e002      	b.n	801e65e <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 801e658:	f04f 33ff 	mov.w	r3, #4294967295
 801e65c:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 801e65e:	69fb      	ldr	r3, [r7, #28]
}
 801e660:	4618      	mov	r0, r3
 801e662:	3720      	adds	r7, #32
 801e664:	46bd      	mov	sp, r7
 801e666:	bd80      	pop	{r7, pc}
 801e668:	20000b74 	.word	0x20000b74

0801e66c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 801e66c:	b580      	push	{r7, lr}
 801e66e:	b08e      	sub	sp, #56	; 0x38
 801e670:	af00      	add	r7, sp, #0
 801e672:	60f8      	str	r0, [r7, #12]
 801e674:	60b9      	str	r1, [r7, #8]
 801e676:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e678:	f3ef 8305 	mrs	r3, IPSR
 801e67c:	61fb      	str	r3, [r7, #28]
  return(result);
 801e67e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 801e680:	2b00      	cmp	r3, #0
 801e682:	d10f      	bne.n	801e6a4 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e684:	f3ef 8310 	mrs	r3, PRIMASK
 801e688:	61bb      	str	r3, [r7, #24]
  return(result);
 801e68a:	69bb      	ldr	r3, [r7, #24]
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	d109      	bne.n	801e6a4 <osThreadFlagsWait+0x38>
 801e690:	4b3f      	ldr	r3, [pc, #252]	; (801e790 <osThreadFlagsWait+0x124>)
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	2b02      	cmp	r3, #2
 801e696:	d109      	bne.n	801e6ac <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e698:	f3ef 8311 	mrs	r3, BASEPRI
 801e69c:	617b      	str	r3, [r7, #20]
  return(result);
 801e69e:	697b      	ldr	r3, [r7, #20]
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	d003      	beq.n	801e6ac <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 801e6a4:	f06f 0305 	mvn.w	r3, #5
 801e6a8:	637b      	str	r3, [r7, #52]	; 0x34
 801e6aa:	e06b      	b.n	801e784 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 801e6ac:	68fb      	ldr	r3, [r7, #12]
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	da03      	bge.n	801e6ba <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 801e6b2:	f06f 0303 	mvn.w	r3, #3
 801e6b6:	637b      	str	r3, [r7, #52]	; 0x34
 801e6b8:	e064      	b.n	801e784 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 801e6ba:	68bb      	ldr	r3, [r7, #8]
 801e6bc:	f003 0302 	and.w	r3, r3, #2
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	d002      	beq.n	801e6ca <osThreadFlagsWait+0x5e>
      clear = 0U;
 801e6c4:	2300      	movs	r3, #0
 801e6c6:	633b      	str	r3, [r7, #48]	; 0x30
 801e6c8:	e001      	b.n	801e6ce <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 801e6ca:	68fb      	ldr	r3, [r7, #12]
 801e6cc:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 801e6ce:	2300      	movs	r3, #0
 801e6d0:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 801e6d6:	f002 fe8d 	bl	80213f4 <xTaskGetTickCount>
 801e6da:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 801e6dc:	f107 0210 	add.w	r2, r7, #16
 801e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e6e4:	2000      	movs	r0, #0
 801e6e6:	f003 fc09 	bl	8021efc <xTaskNotifyWait>
 801e6ea:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 801e6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6ee:	2b01      	cmp	r3, #1
 801e6f0:	d137      	bne.n	801e762 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 801e6f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e6f4:	68fb      	ldr	r3, [r7, #12]
 801e6f6:	4013      	ands	r3, r2
 801e6f8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 801e6fa:	693b      	ldr	r3, [r7, #16]
 801e6fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e6fe:	4313      	orrs	r3, r2
 801e700:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 801e702:	68bb      	ldr	r3, [r7, #8]
 801e704:	f003 0301 	and.w	r3, r3, #1
 801e708:	2b00      	cmp	r3, #0
 801e70a:	d00c      	beq.n	801e726 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 801e70c:	68fa      	ldr	r2, [r7, #12]
 801e70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e710:	4013      	ands	r3, r2
 801e712:	68fa      	ldr	r2, [r7, #12]
 801e714:	429a      	cmp	r2, r3
 801e716:	d032      	beq.n	801e77e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	2b00      	cmp	r3, #0
 801e71c:	d10f      	bne.n	801e73e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 801e71e:	f06f 0302 	mvn.w	r3, #2
 801e722:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 801e724:	e02e      	b.n	801e784 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 801e726:	68fa      	ldr	r2, [r7, #12]
 801e728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e72a:	4013      	ands	r3, r2
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d128      	bne.n	801e782 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	2b00      	cmp	r3, #0
 801e734:	d103      	bne.n	801e73e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 801e736:	f06f 0302 	mvn.w	r3, #2
 801e73a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 801e73c:	e022      	b.n	801e784 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 801e73e:	f002 fe59 	bl	80213f4 <xTaskGetTickCount>
 801e742:	4602      	mov	r2, r0
 801e744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e746:	1ad3      	subs	r3, r2, r3
 801e748:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 801e74a:	6a3a      	ldr	r2, [r7, #32]
 801e74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e74e:	429a      	cmp	r2, r3
 801e750:	d902      	bls.n	801e758 <osThreadFlagsWait+0xec>
          tout  = 0;
 801e752:	2300      	movs	r3, #0
 801e754:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e756:	e00e      	b.n	801e776 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 801e758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e75a:	6a3b      	ldr	r3, [r7, #32]
 801e75c:	1ad3      	subs	r3, r2, r3
 801e75e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e760:	e009      	b.n	801e776 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	2b00      	cmp	r3, #0
 801e766:	d103      	bne.n	801e770 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 801e768:	f06f 0302 	mvn.w	r3, #2
 801e76c:	637b      	str	r3, [r7, #52]	; 0x34
 801e76e:	e002      	b.n	801e776 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 801e770:	f06f 0301 	mvn.w	r3, #1
 801e774:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 801e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e778:	2b00      	cmp	r3, #0
 801e77a:	d1af      	bne.n	801e6dc <osThreadFlagsWait+0x70>
 801e77c:	e002      	b.n	801e784 <osThreadFlagsWait+0x118>
            break;
 801e77e:	bf00      	nop
 801e780:	e000      	b.n	801e784 <osThreadFlagsWait+0x118>
            break;
 801e782:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 801e784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801e786:	4618      	mov	r0, r3
 801e788:	3738      	adds	r7, #56	; 0x38
 801e78a:	46bd      	mov	sp, r7
 801e78c:	bd80      	pop	{r7, pc}
 801e78e:	bf00      	nop
 801e790:	20000b74 	.word	0x20000b74

0801e794 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 801e794:	b580      	push	{r7, lr}
 801e796:	b086      	sub	sp, #24
 801e798:	af00      	add	r7, sp, #0
 801e79a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e79c:	f3ef 8305 	mrs	r3, IPSR
 801e7a0:	613b      	str	r3, [r7, #16]
  return(result);
 801e7a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d10f      	bne.n	801e7c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7a8:	f3ef 8310 	mrs	r3, PRIMASK
 801e7ac:	60fb      	str	r3, [r7, #12]
  return(result);
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d109      	bne.n	801e7c8 <osDelay+0x34>
 801e7b4:	4b0d      	ldr	r3, [pc, #52]	; (801e7ec <osDelay+0x58>)
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	2b02      	cmp	r3, #2
 801e7ba:	d109      	bne.n	801e7d0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e7bc:	f3ef 8311 	mrs	r3, BASEPRI
 801e7c0:	60bb      	str	r3, [r7, #8]
  return(result);
 801e7c2:	68bb      	ldr	r3, [r7, #8]
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	d003      	beq.n	801e7d0 <osDelay+0x3c>
    stat = osErrorISR;
 801e7c8:	f06f 0305 	mvn.w	r3, #5
 801e7cc:	617b      	str	r3, [r7, #20]
 801e7ce:	e007      	b.n	801e7e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801e7d0:	2300      	movs	r3, #0
 801e7d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	2b00      	cmp	r3, #0
 801e7d8:	d002      	beq.n	801e7e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 801e7da:	6878      	ldr	r0, [r7, #4]
 801e7dc:	f002 fc8e 	bl	80210fc <vTaskDelay>
    }
  }

  return (stat);
 801e7e0:	697b      	ldr	r3, [r7, #20]
}
 801e7e2:	4618      	mov	r0, r3
 801e7e4:	3718      	adds	r7, #24
 801e7e6:	46bd      	mov	sp, r7
 801e7e8:	bd80      	pop	{r7, pc}
 801e7ea:	bf00      	nop
 801e7ec:	20000b74 	.word	0x20000b74

0801e7f0 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 801e7f0:	b580      	push	{r7, lr}
 801e7f2:	b084      	sub	sp, #16
 801e7f4:	af00      	add	r7, sp, #0
 801e7f6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 801e7f8:	6878      	ldr	r0, [r7, #4]
 801e7fa:	f004 f955 	bl	8022aa8 <pvTimerGetTimerID>
 801e7fe:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	2b00      	cmp	r3, #0
 801e804:	d005      	beq.n	801e812 <TimerCallback+0x22>
    callb->func (callb->arg);
 801e806:	68fb      	ldr	r3, [r7, #12]
 801e808:	681b      	ldr	r3, [r3, #0]
 801e80a:	68fa      	ldr	r2, [r7, #12]
 801e80c:	6852      	ldr	r2, [r2, #4]
 801e80e:	4610      	mov	r0, r2
 801e810:	4798      	blx	r3
  }
}
 801e812:	bf00      	nop
 801e814:	3710      	adds	r7, #16
 801e816:	46bd      	mov	sp, r7
 801e818:	bd80      	pop	{r7, pc}
	...

0801e81c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 801e81c:	b580      	push	{r7, lr}
 801e81e:	b08e      	sub	sp, #56	; 0x38
 801e820:	af02      	add	r7, sp, #8
 801e822:	60f8      	str	r0, [r7, #12]
 801e824:	607a      	str	r2, [r7, #4]
 801e826:	603b      	str	r3, [r7, #0]
 801e828:	460b      	mov	r3, r1
 801e82a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 801e82c:	2300      	movs	r3, #0
 801e82e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e830:	f3ef 8305 	mrs	r3, IPSR
 801e834:	61bb      	str	r3, [r7, #24]
  return(result);
 801e836:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 801e838:	2b00      	cmp	r3, #0
 801e83a:	d16a      	bne.n	801e912 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e83c:	f3ef 8310 	mrs	r3, PRIMASK
 801e840:	617b      	str	r3, [r7, #20]
  return(result);
 801e842:	697b      	ldr	r3, [r7, #20]
 801e844:	2b00      	cmp	r3, #0
 801e846:	d164      	bne.n	801e912 <osTimerNew+0xf6>
 801e848:	4b34      	ldr	r3, [pc, #208]	; (801e91c <osTimerNew+0x100>)
 801e84a:	681b      	ldr	r3, [r3, #0]
 801e84c:	2b02      	cmp	r3, #2
 801e84e:	d105      	bne.n	801e85c <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e850:	f3ef 8311 	mrs	r3, BASEPRI
 801e854:	613b      	str	r3, [r7, #16]
  return(result);
 801e856:	693b      	ldr	r3, [r7, #16]
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d15a      	bne.n	801e912 <osTimerNew+0xf6>
 801e85c:	68fb      	ldr	r3, [r7, #12]
 801e85e:	2b00      	cmp	r3, #0
 801e860:	d057      	beq.n	801e912 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 801e862:	2008      	movs	r0, #8
 801e864:	f000 fd60 	bl	801f328 <pvPortMalloc>
 801e868:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 801e86a:	69fb      	ldr	r3, [r7, #28]
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	d050      	beq.n	801e912 <osTimerNew+0xf6>
      callb->func = func;
 801e870:	69fb      	ldr	r3, [r7, #28]
 801e872:	68fa      	ldr	r2, [r7, #12]
 801e874:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 801e876:	69fb      	ldr	r3, [r7, #28]
 801e878:	687a      	ldr	r2, [r7, #4]
 801e87a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 801e87c:	7afb      	ldrb	r3, [r7, #11]
 801e87e:	2b00      	cmp	r3, #0
 801e880:	d102      	bne.n	801e888 <osTimerNew+0x6c>
        reload = pdFALSE;
 801e882:	2300      	movs	r3, #0
 801e884:	627b      	str	r3, [r7, #36]	; 0x24
 801e886:	e001      	b.n	801e88c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 801e888:	2301      	movs	r3, #1
 801e88a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 801e88c:	f04f 33ff 	mov.w	r3, #4294967295
 801e890:	623b      	str	r3, [r7, #32]
      name = NULL;
 801e892:	2300      	movs	r3, #0
 801e894:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 801e896:	683b      	ldr	r3, [r7, #0]
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d01c      	beq.n	801e8d6 <osTimerNew+0xba>
        if (attr->name != NULL) {
 801e89c:	683b      	ldr	r3, [r7, #0]
 801e89e:	681b      	ldr	r3, [r3, #0]
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	d002      	beq.n	801e8aa <osTimerNew+0x8e>
          name = attr->name;
 801e8a4:	683b      	ldr	r3, [r7, #0]
 801e8a6:	681b      	ldr	r3, [r3, #0]
 801e8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 801e8aa:	683b      	ldr	r3, [r7, #0]
 801e8ac:	689b      	ldr	r3, [r3, #8]
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	d006      	beq.n	801e8c0 <osTimerNew+0xa4>
 801e8b2:	683b      	ldr	r3, [r7, #0]
 801e8b4:	68db      	ldr	r3, [r3, #12]
 801e8b6:	2b2f      	cmp	r3, #47	; 0x2f
 801e8b8:	d902      	bls.n	801e8c0 <osTimerNew+0xa4>
          mem = 1;
 801e8ba:	2301      	movs	r3, #1
 801e8bc:	623b      	str	r3, [r7, #32]
 801e8be:	e00c      	b.n	801e8da <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801e8c0:	683b      	ldr	r3, [r7, #0]
 801e8c2:	689b      	ldr	r3, [r3, #8]
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	d108      	bne.n	801e8da <osTimerNew+0xbe>
 801e8c8:	683b      	ldr	r3, [r7, #0]
 801e8ca:	68db      	ldr	r3, [r3, #12]
 801e8cc:	2b00      	cmp	r3, #0
 801e8ce:	d104      	bne.n	801e8da <osTimerNew+0xbe>
            mem = 0;
 801e8d0:	2300      	movs	r3, #0
 801e8d2:	623b      	str	r3, [r7, #32]
 801e8d4:	e001      	b.n	801e8da <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 801e8d6:	2300      	movs	r3, #0
 801e8d8:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 801e8da:	6a3b      	ldr	r3, [r7, #32]
 801e8dc:	2b01      	cmp	r3, #1
 801e8de:	d10c      	bne.n	801e8fa <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 801e8e0:	683b      	ldr	r3, [r7, #0]
 801e8e2:	689b      	ldr	r3, [r3, #8]
 801e8e4:	9301      	str	r3, [sp, #4]
 801e8e6:	4b0e      	ldr	r3, [pc, #56]	; (801e920 <osTimerNew+0x104>)
 801e8e8:	9300      	str	r3, [sp, #0]
 801e8ea:	69fb      	ldr	r3, [r7, #28]
 801e8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e8ee:	2101      	movs	r1, #1
 801e8f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e8f2:	f003 fd86 	bl	8022402 <xTimerCreateStatic>
 801e8f6:	62b8      	str	r0, [r7, #40]	; 0x28
 801e8f8:	e00b      	b.n	801e912 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 801e8fa:	6a3b      	ldr	r3, [r7, #32]
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	d108      	bne.n	801e912 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 801e900:	4b07      	ldr	r3, [pc, #28]	; (801e920 <osTimerNew+0x104>)
 801e902:	9300      	str	r3, [sp, #0]
 801e904:	69fb      	ldr	r3, [r7, #28]
 801e906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e908:	2101      	movs	r1, #1
 801e90a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e90c:	f003 fd58 	bl	80223c0 <xTimerCreate>
 801e910:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 801e912:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801e914:	4618      	mov	r0, r3
 801e916:	3730      	adds	r7, #48	; 0x30
 801e918:	46bd      	mov	sp, r7
 801e91a:	bd80      	pop	{r7, pc}
 801e91c:	20000b74 	.word	0x20000b74
 801e920:	0801e7f1 	.word	0x0801e7f1

0801e924 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 801e924:	b580      	push	{r7, lr}
 801e926:	b08a      	sub	sp, #40	; 0x28
 801e928:	af02      	add	r7, sp, #8
 801e92a:	6078      	str	r0, [r7, #4]
 801e92c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 801e92e:	687b      	ldr	r3, [r7, #4]
 801e930:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e932:	f3ef 8305 	mrs	r3, IPSR
 801e936:	617b      	str	r3, [r7, #20]
  return(result);
 801e938:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e93a:	2b00      	cmp	r3, #0
 801e93c:	d10f      	bne.n	801e95e <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e93e:	f3ef 8310 	mrs	r3, PRIMASK
 801e942:	613b      	str	r3, [r7, #16]
  return(result);
 801e944:	693b      	ldr	r3, [r7, #16]
 801e946:	2b00      	cmp	r3, #0
 801e948:	d109      	bne.n	801e95e <osTimerStart+0x3a>
 801e94a:	4b15      	ldr	r3, [pc, #84]	; (801e9a0 <osTimerStart+0x7c>)
 801e94c:	681b      	ldr	r3, [r3, #0]
 801e94e:	2b02      	cmp	r3, #2
 801e950:	d109      	bne.n	801e966 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e952:	f3ef 8311 	mrs	r3, BASEPRI
 801e956:	60fb      	str	r3, [r7, #12]
  return(result);
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	d003      	beq.n	801e966 <osTimerStart+0x42>
    stat = osErrorISR;
 801e95e:	f06f 0305 	mvn.w	r3, #5
 801e962:	61fb      	str	r3, [r7, #28]
 801e964:	e017      	b.n	801e996 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 801e966:	69bb      	ldr	r3, [r7, #24]
 801e968:	2b00      	cmp	r3, #0
 801e96a:	d103      	bne.n	801e974 <osTimerStart+0x50>
    stat = osErrorParameter;
 801e96c:	f06f 0303 	mvn.w	r3, #3
 801e970:	61fb      	str	r3, [r7, #28]
 801e972:	e010      	b.n	801e996 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 801e974:	2300      	movs	r3, #0
 801e976:	9300      	str	r3, [sp, #0]
 801e978:	2300      	movs	r3, #0
 801e97a:	683a      	ldr	r2, [r7, #0]
 801e97c:	2104      	movs	r1, #4
 801e97e:	69b8      	ldr	r0, [r7, #24]
 801e980:	f003 fdac 	bl	80224dc <xTimerGenericCommand>
 801e984:	4603      	mov	r3, r0
 801e986:	2b01      	cmp	r3, #1
 801e988:	d102      	bne.n	801e990 <osTimerStart+0x6c>
      stat = osOK;
 801e98a:	2300      	movs	r3, #0
 801e98c:	61fb      	str	r3, [r7, #28]
 801e98e:	e002      	b.n	801e996 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 801e990:	f06f 0302 	mvn.w	r3, #2
 801e994:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 801e996:	69fb      	ldr	r3, [r7, #28]
}
 801e998:	4618      	mov	r0, r3
 801e99a:	3720      	adds	r7, #32
 801e99c:	46bd      	mov	sp, r7
 801e99e:	bd80      	pop	{r7, pc}
 801e9a0:	20000b74 	.word	0x20000b74

0801e9a4 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 801e9a4:	b580      	push	{r7, lr}
 801e9a6:	b08a      	sub	sp, #40	; 0x28
 801e9a8:	af02      	add	r7, sp, #8
 801e9aa:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 801e9ac:	687b      	ldr	r3, [r7, #4]
 801e9ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e9b0:	f3ef 8305 	mrs	r3, IPSR
 801e9b4:	617b      	str	r3, [r7, #20]
  return(result);
 801e9b6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	d10f      	bne.n	801e9dc <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9bc:	f3ef 8310 	mrs	r3, PRIMASK
 801e9c0:	613b      	str	r3, [r7, #16]
  return(result);
 801e9c2:	693b      	ldr	r3, [r7, #16]
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	d109      	bne.n	801e9dc <osTimerStop+0x38>
 801e9c8:	4b1a      	ldr	r3, [pc, #104]	; (801ea34 <osTimerStop+0x90>)
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	2b02      	cmp	r3, #2
 801e9ce:	d109      	bne.n	801e9e4 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e9d0:	f3ef 8311 	mrs	r3, BASEPRI
 801e9d4:	60fb      	str	r3, [r7, #12]
  return(result);
 801e9d6:	68fb      	ldr	r3, [r7, #12]
 801e9d8:	2b00      	cmp	r3, #0
 801e9da:	d003      	beq.n	801e9e4 <osTimerStop+0x40>
    stat = osErrorISR;
 801e9dc:	f06f 0305 	mvn.w	r3, #5
 801e9e0:	61fb      	str	r3, [r7, #28]
 801e9e2:	e021      	b.n	801ea28 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 801e9e4:	69bb      	ldr	r3, [r7, #24]
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d103      	bne.n	801e9f2 <osTimerStop+0x4e>
    stat = osErrorParameter;
 801e9ea:	f06f 0303 	mvn.w	r3, #3
 801e9ee:	61fb      	str	r3, [r7, #28]
 801e9f0:	e01a      	b.n	801ea28 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 801e9f2:	69b8      	ldr	r0, [r7, #24]
 801e9f4:	f004 f834 	bl	8022a60 <xTimerIsTimerActive>
 801e9f8:	4603      	mov	r3, r0
 801e9fa:	2b00      	cmp	r3, #0
 801e9fc:	d103      	bne.n	801ea06 <osTimerStop+0x62>
      stat = osErrorResource;
 801e9fe:	f06f 0302 	mvn.w	r3, #2
 801ea02:	61fb      	str	r3, [r7, #28]
 801ea04:	e010      	b.n	801ea28 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 801ea06:	2300      	movs	r3, #0
 801ea08:	9300      	str	r3, [sp, #0]
 801ea0a:	2300      	movs	r3, #0
 801ea0c:	2200      	movs	r2, #0
 801ea0e:	2103      	movs	r1, #3
 801ea10:	69b8      	ldr	r0, [r7, #24]
 801ea12:	f003 fd63 	bl	80224dc <xTimerGenericCommand>
 801ea16:	4603      	mov	r3, r0
 801ea18:	2b01      	cmp	r3, #1
 801ea1a:	d102      	bne.n	801ea22 <osTimerStop+0x7e>
        stat = osOK;
 801ea1c:	2300      	movs	r3, #0
 801ea1e:	61fb      	str	r3, [r7, #28]
 801ea20:	e002      	b.n	801ea28 <osTimerStop+0x84>
      } else {
        stat = osError;
 801ea22:	f04f 33ff 	mov.w	r3, #4294967295
 801ea26:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 801ea28:	69fb      	ldr	r3, [r7, #28]
}
 801ea2a:	4618      	mov	r0, r3
 801ea2c:	3720      	adds	r7, #32
 801ea2e:	46bd      	mov	sp, r7
 801ea30:	bd80      	pop	{r7, pc}
 801ea32:	bf00      	nop
 801ea34:	20000b74 	.word	0x20000b74

0801ea38 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801ea38:	b580      	push	{r7, lr}
 801ea3a:	b08a      	sub	sp, #40	; 0x28
 801ea3c:	af00      	add	r7, sp, #0
 801ea3e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801ea40:	2300      	movs	r3, #0
 801ea42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ea44:	f3ef 8305 	mrs	r3, IPSR
 801ea48:	613b      	str	r3, [r7, #16]
  return(result);
 801ea4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	f040 8085 	bne.w	801eb5c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea52:	f3ef 8310 	mrs	r3, PRIMASK
 801ea56:	60fb      	str	r3, [r7, #12]
  return(result);
 801ea58:	68fb      	ldr	r3, [r7, #12]
 801ea5a:	2b00      	cmp	r3, #0
 801ea5c:	d17e      	bne.n	801eb5c <osMutexNew+0x124>
 801ea5e:	4b42      	ldr	r3, [pc, #264]	; (801eb68 <osMutexNew+0x130>)
 801ea60:	681b      	ldr	r3, [r3, #0]
 801ea62:	2b02      	cmp	r3, #2
 801ea64:	d105      	bne.n	801ea72 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ea66:	f3ef 8311 	mrs	r3, BASEPRI
 801ea6a:	60bb      	str	r3, [r7, #8]
  return(result);
 801ea6c:	68bb      	ldr	r3, [r7, #8]
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	d174      	bne.n	801eb5c <osMutexNew+0x124>
    if (attr != NULL) {
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	d003      	beq.n	801ea80 <osMutexNew+0x48>
      type = attr->attr_bits;
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	685b      	ldr	r3, [r3, #4]
 801ea7c:	623b      	str	r3, [r7, #32]
 801ea7e:	e001      	b.n	801ea84 <osMutexNew+0x4c>
    } else {
      type = 0U;
 801ea80:	2300      	movs	r3, #0
 801ea82:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801ea84:	6a3b      	ldr	r3, [r7, #32]
 801ea86:	f003 0301 	and.w	r3, r3, #1
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d002      	beq.n	801ea94 <osMutexNew+0x5c>
      rmtx = 1U;
 801ea8e:	2301      	movs	r3, #1
 801ea90:	61fb      	str	r3, [r7, #28]
 801ea92:	e001      	b.n	801ea98 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 801ea94:	2300      	movs	r3, #0
 801ea96:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801ea98:	6a3b      	ldr	r3, [r7, #32]
 801ea9a:	f003 0308 	and.w	r3, r3, #8
 801ea9e:	2b00      	cmp	r3, #0
 801eaa0:	d15c      	bne.n	801eb5c <osMutexNew+0x124>
      mem = -1;
 801eaa2:	f04f 33ff 	mov.w	r3, #4294967295
 801eaa6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d015      	beq.n	801eada <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801eaae:	687b      	ldr	r3, [r7, #4]
 801eab0:	689b      	ldr	r3, [r3, #8]
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	d006      	beq.n	801eac4 <osMutexNew+0x8c>
 801eab6:	687b      	ldr	r3, [r7, #4]
 801eab8:	68db      	ldr	r3, [r3, #12]
 801eaba:	2b4f      	cmp	r3, #79	; 0x4f
 801eabc:	d902      	bls.n	801eac4 <osMutexNew+0x8c>
          mem = 1;
 801eabe:	2301      	movs	r3, #1
 801eac0:	61bb      	str	r3, [r7, #24]
 801eac2:	e00c      	b.n	801eade <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	689b      	ldr	r3, [r3, #8]
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	d108      	bne.n	801eade <osMutexNew+0xa6>
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	68db      	ldr	r3, [r3, #12]
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	d104      	bne.n	801eade <osMutexNew+0xa6>
            mem = 0;
 801ead4:	2300      	movs	r3, #0
 801ead6:	61bb      	str	r3, [r7, #24]
 801ead8:	e001      	b.n	801eade <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 801eada:	2300      	movs	r3, #0
 801eadc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801eade:	69bb      	ldr	r3, [r7, #24]
 801eae0:	2b01      	cmp	r3, #1
 801eae2:	d112      	bne.n	801eb0a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 801eae4:	69fb      	ldr	r3, [r7, #28]
 801eae6:	2b00      	cmp	r3, #0
 801eae8:	d007      	beq.n	801eafa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	689b      	ldr	r3, [r3, #8]
 801eaee:	4619      	mov	r1, r3
 801eaf0:	2004      	movs	r0, #4
 801eaf2:	f001 fa35 	bl	801ff60 <xQueueCreateMutexStatic>
 801eaf6:	6278      	str	r0, [r7, #36]	; 0x24
 801eaf8:	e016      	b.n	801eb28 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	689b      	ldr	r3, [r3, #8]
 801eafe:	4619      	mov	r1, r3
 801eb00:	2001      	movs	r0, #1
 801eb02:	f001 fa2d 	bl	801ff60 <xQueueCreateMutexStatic>
 801eb06:	6278      	str	r0, [r7, #36]	; 0x24
 801eb08:	e00e      	b.n	801eb28 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 801eb0a:	69bb      	ldr	r3, [r7, #24]
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d10b      	bne.n	801eb28 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 801eb10:	69fb      	ldr	r3, [r7, #28]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d004      	beq.n	801eb20 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 801eb16:	2004      	movs	r0, #4
 801eb18:	f001 fa0a 	bl	801ff30 <xQueueCreateMutex>
 801eb1c:	6278      	str	r0, [r7, #36]	; 0x24
 801eb1e:	e003      	b.n	801eb28 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 801eb20:	2001      	movs	r0, #1
 801eb22:	f001 fa05 	bl	801ff30 <xQueueCreateMutex>
 801eb26:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d00c      	beq.n	801eb48 <osMutexNew+0x110>
        if (attr != NULL) {
 801eb2e:	687b      	ldr	r3, [r7, #4]
 801eb30:	2b00      	cmp	r3, #0
 801eb32:	d003      	beq.n	801eb3c <osMutexNew+0x104>
          name = attr->name;
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	617b      	str	r3, [r7, #20]
 801eb3a:	e001      	b.n	801eb40 <osMutexNew+0x108>
        } else {
          name = NULL;
 801eb3c:	2300      	movs	r3, #0
 801eb3e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 801eb40:	6979      	ldr	r1, [r7, #20]
 801eb42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb44:	f002 f8ba 	bl	8020cbc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801eb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	d006      	beq.n	801eb5c <osMutexNew+0x124>
 801eb4e:	69fb      	ldr	r3, [r7, #28]
 801eb50:	2b00      	cmp	r3, #0
 801eb52:	d003      	beq.n	801eb5c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801eb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb56:	f043 0301 	orr.w	r3, r3, #1
 801eb5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801eb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801eb5e:	4618      	mov	r0, r3
 801eb60:	3728      	adds	r7, #40	; 0x28
 801eb62:	46bd      	mov	sp, r7
 801eb64:	bd80      	pop	{r7, pc}
 801eb66:	bf00      	nop
 801eb68:	20000b74 	.word	0x20000b74

0801eb6c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801eb6c:	b580      	push	{r7, lr}
 801eb6e:	b088      	sub	sp, #32
 801eb70:	af00      	add	r7, sp, #0
 801eb72:	6078      	str	r0, [r7, #4]
 801eb74:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	f023 0301 	bic.w	r3, r3, #1
 801eb7c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	f003 0301 	and.w	r3, r3, #1
 801eb84:	617b      	str	r3, [r7, #20]

  stat = osOK;
 801eb86:	2300      	movs	r3, #0
 801eb88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801eb8a:	f3ef 8305 	mrs	r3, IPSR
 801eb8e:	613b      	str	r3, [r7, #16]
  return(result);
 801eb90:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801eb92:	2b00      	cmp	r3, #0
 801eb94:	d10f      	bne.n	801ebb6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb96:	f3ef 8310 	mrs	r3, PRIMASK
 801eb9a:	60fb      	str	r3, [r7, #12]
  return(result);
 801eb9c:	68fb      	ldr	r3, [r7, #12]
 801eb9e:	2b00      	cmp	r3, #0
 801eba0:	d109      	bne.n	801ebb6 <osMutexAcquire+0x4a>
 801eba2:	4b20      	ldr	r3, [pc, #128]	; (801ec24 <osMutexAcquire+0xb8>)
 801eba4:	681b      	ldr	r3, [r3, #0]
 801eba6:	2b02      	cmp	r3, #2
 801eba8:	d109      	bne.n	801ebbe <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ebaa:	f3ef 8311 	mrs	r3, BASEPRI
 801ebae:	60bb      	str	r3, [r7, #8]
  return(result);
 801ebb0:	68bb      	ldr	r3, [r7, #8]
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d003      	beq.n	801ebbe <osMutexAcquire+0x52>
    stat = osErrorISR;
 801ebb6:	f06f 0305 	mvn.w	r3, #5
 801ebba:	61fb      	str	r3, [r7, #28]
 801ebbc:	e02c      	b.n	801ec18 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801ebbe:	69bb      	ldr	r3, [r7, #24]
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d103      	bne.n	801ebcc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 801ebc4:	f06f 0303 	mvn.w	r3, #3
 801ebc8:	61fb      	str	r3, [r7, #28]
 801ebca:	e025      	b.n	801ec18 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 801ebcc:	697b      	ldr	r3, [r7, #20]
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	d011      	beq.n	801ebf6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801ebd2:	6839      	ldr	r1, [r7, #0]
 801ebd4:	69b8      	ldr	r0, [r7, #24]
 801ebd6:	f001 fa11 	bl	801fffc <xQueueTakeMutexRecursive>
 801ebda:	4603      	mov	r3, r0
 801ebdc:	2b01      	cmp	r3, #1
 801ebde:	d01b      	beq.n	801ec18 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801ebe0:	683b      	ldr	r3, [r7, #0]
 801ebe2:	2b00      	cmp	r3, #0
 801ebe4:	d003      	beq.n	801ebee <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 801ebe6:	f06f 0301 	mvn.w	r3, #1
 801ebea:	61fb      	str	r3, [r7, #28]
 801ebec:	e014      	b.n	801ec18 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801ebee:	f06f 0302 	mvn.w	r3, #2
 801ebf2:	61fb      	str	r3, [r7, #28]
 801ebf4:	e010      	b.n	801ec18 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801ebf6:	6839      	ldr	r1, [r7, #0]
 801ebf8:	69b8      	ldr	r0, [r7, #24]
 801ebfa:	f001 fd8f 	bl	802071c <xQueueSemaphoreTake>
 801ebfe:	4603      	mov	r3, r0
 801ec00:	2b01      	cmp	r3, #1
 801ec02:	d009      	beq.n	801ec18 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801ec04:	683b      	ldr	r3, [r7, #0]
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d003      	beq.n	801ec12 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 801ec0a:	f06f 0301 	mvn.w	r3, #1
 801ec0e:	61fb      	str	r3, [r7, #28]
 801ec10:	e002      	b.n	801ec18 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801ec12:	f06f 0302 	mvn.w	r3, #2
 801ec16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801ec18:	69fb      	ldr	r3, [r7, #28]
}
 801ec1a:	4618      	mov	r0, r3
 801ec1c:	3720      	adds	r7, #32
 801ec1e:	46bd      	mov	sp, r7
 801ec20:	bd80      	pop	{r7, pc}
 801ec22:	bf00      	nop
 801ec24:	20000b74 	.word	0x20000b74

0801ec28 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801ec28:	b580      	push	{r7, lr}
 801ec2a:	b088      	sub	sp, #32
 801ec2c:	af00      	add	r7, sp, #0
 801ec2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	f023 0301 	bic.w	r3, r3, #1
 801ec36:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	f003 0301 	and.w	r3, r3, #1
 801ec3e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 801ec40:	2300      	movs	r3, #0
 801ec42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ec44:	f3ef 8305 	mrs	r3, IPSR
 801ec48:	613b      	str	r3, [r7, #16]
  return(result);
 801ec4a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801ec4c:	2b00      	cmp	r3, #0
 801ec4e:	d10f      	bne.n	801ec70 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec50:	f3ef 8310 	mrs	r3, PRIMASK
 801ec54:	60fb      	str	r3, [r7, #12]
  return(result);
 801ec56:	68fb      	ldr	r3, [r7, #12]
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	d109      	bne.n	801ec70 <osMutexRelease+0x48>
 801ec5c:	4b19      	ldr	r3, [pc, #100]	; (801ecc4 <osMutexRelease+0x9c>)
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	2b02      	cmp	r3, #2
 801ec62:	d109      	bne.n	801ec78 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ec64:	f3ef 8311 	mrs	r3, BASEPRI
 801ec68:	60bb      	str	r3, [r7, #8]
  return(result);
 801ec6a:	68bb      	ldr	r3, [r7, #8]
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d003      	beq.n	801ec78 <osMutexRelease+0x50>
    stat = osErrorISR;
 801ec70:	f06f 0305 	mvn.w	r3, #5
 801ec74:	61fb      	str	r3, [r7, #28]
 801ec76:	e01f      	b.n	801ecb8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 801ec78:	69bb      	ldr	r3, [r7, #24]
 801ec7a:	2b00      	cmp	r3, #0
 801ec7c:	d103      	bne.n	801ec86 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801ec7e:	f06f 0303 	mvn.w	r3, #3
 801ec82:	61fb      	str	r3, [r7, #28]
 801ec84:	e018      	b.n	801ecb8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 801ec86:	697b      	ldr	r3, [r7, #20]
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	d009      	beq.n	801eca0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801ec8c:	69b8      	ldr	r0, [r7, #24]
 801ec8e:	f001 f982 	bl	801ff96 <xQueueGiveMutexRecursive>
 801ec92:	4603      	mov	r3, r0
 801ec94:	2b01      	cmp	r3, #1
 801ec96:	d00f      	beq.n	801ecb8 <osMutexRelease+0x90>
        stat = osErrorResource;
 801ec98:	f06f 0302 	mvn.w	r3, #2
 801ec9c:	61fb      	str	r3, [r7, #28]
 801ec9e:	e00b      	b.n	801ecb8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801eca0:	2300      	movs	r3, #0
 801eca2:	2200      	movs	r2, #0
 801eca4:	2100      	movs	r1, #0
 801eca6:	69b8      	ldr	r0, [r7, #24]
 801eca8:	f001 fa44 	bl	8020134 <xQueueGenericSend>
 801ecac:	4603      	mov	r3, r0
 801ecae:	2b01      	cmp	r3, #1
 801ecb0:	d002      	beq.n	801ecb8 <osMutexRelease+0x90>
        stat = osErrorResource;
 801ecb2:	f06f 0302 	mvn.w	r3, #2
 801ecb6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 801ecb8:	69fb      	ldr	r3, [r7, #28]
}
 801ecba:	4618      	mov	r0, r3
 801ecbc:	3720      	adds	r7, #32
 801ecbe:	46bd      	mov	sp, r7
 801ecc0:	bd80      	pop	{r7, pc}
 801ecc2:	bf00      	nop
 801ecc4:	20000b74 	.word	0x20000b74

0801ecc8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801ecc8:	b580      	push	{r7, lr}
 801ecca:	b08c      	sub	sp, #48	; 0x30
 801eccc:	af02      	add	r7, sp, #8
 801ecce:	60f8      	str	r0, [r7, #12]
 801ecd0:	60b9      	str	r1, [r7, #8]
 801ecd2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801ecd4:	2300      	movs	r3, #0
 801ecd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ecd8:	f3ef 8305 	mrs	r3, IPSR
 801ecdc:	61bb      	str	r3, [r7, #24]
  return(result);
 801ecde:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	f040 8088 	bne.w	801edf6 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ece6:	f3ef 8310 	mrs	r3, PRIMASK
 801ecea:	617b      	str	r3, [r7, #20]
  return(result);
 801ecec:	697b      	ldr	r3, [r7, #20]
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	f040 8081 	bne.w	801edf6 <osSemaphoreNew+0x12e>
 801ecf4:	4b42      	ldr	r3, [pc, #264]	; (801ee00 <osSemaphoreNew+0x138>)
 801ecf6:	681b      	ldr	r3, [r3, #0]
 801ecf8:	2b02      	cmp	r3, #2
 801ecfa:	d105      	bne.n	801ed08 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ecfc:	f3ef 8311 	mrs	r3, BASEPRI
 801ed00:	613b      	str	r3, [r7, #16]
  return(result);
 801ed02:	693b      	ldr	r3, [r7, #16]
 801ed04:	2b00      	cmp	r3, #0
 801ed06:	d176      	bne.n	801edf6 <osSemaphoreNew+0x12e>
 801ed08:	68fb      	ldr	r3, [r7, #12]
 801ed0a:	2b00      	cmp	r3, #0
 801ed0c:	d073      	beq.n	801edf6 <osSemaphoreNew+0x12e>
 801ed0e:	68ba      	ldr	r2, [r7, #8]
 801ed10:	68fb      	ldr	r3, [r7, #12]
 801ed12:	429a      	cmp	r2, r3
 801ed14:	d86f      	bhi.n	801edf6 <osSemaphoreNew+0x12e>
    mem = -1;
 801ed16:	f04f 33ff 	mov.w	r3, #4294967295
 801ed1a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d015      	beq.n	801ed4e <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	689b      	ldr	r3, [r3, #8]
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	d006      	beq.n	801ed38 <osSemaphoreNew+0x70>
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	68db      	ldr	r3, [r3, #12]
 801ed2e:	2b4f      	cmp	r3, #79	; 0x4f
 801ed30:	d902      	bls.n	801ed38 <osSemaphoreNew+0x70>
        mem = 1;
 801ed32:	2301      	movs	r3, #1
 801ed34:	623b      	str	r3, [r7, #32]
 801ed36:	e00c      	b.n	801ed52 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	689b      	ldr	r3, [r3, #8]
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	d108      	bne.n	801ed52 <osSemaphoreNew+0x8a>
 801ed40:	687b      	ldr	r3, [r7, #4]
 801ed42:	68db      	ldr	r3, [r3, #12]
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	d104      	bne.n	801ed52 <osSemaphoreNew+0x8a>
          mem = 0;
 801ed48:	2300      	movs	r3, #0
 801ed4a:	623b      	str	r3, [r7, #32]
 801ed4c:	e001      	b.n	801ed52 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 801ed4e:	2300      	movs	r3, #0
 801ed50:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 801ed52:	6a3b      	ldr	r3, [r7, #32]
 801ed54:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ed58:	d04d      	beq.n	801edf6 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 801ed5a:	68fb      	ldr	r3, [r7, #12]
 801ed5c:	2b01      	cmp	r3, #1
 801ed5e:	d129      	bne.n	801edb4 <osSemaphoreNew+0xec>
        if (mem == 1) {
 801ed60:	6a3b      	ldr	r3, [r7, #32]
 801ed62:	2b01      	cmp	r3, #1
 801ed64:	d10b      	bne.n	801ed7e <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	689a      	ldr	r2, [r3, #8]
 801ed6a:	2303      	movs	r3, #3
 801ed6c:	9300      	str	r3, [sp, #0]
 801ed6e:	4613      	mov	r3, r2
 801ed70:	2200      	movs	r2, #0
 801ed72:	2100      	movs	r1, #0
 801ed74:	2001      	movs	r0, #1
 801ed76:	f000 ffef 	bl	801fd58 <xQueueGenericCreateStatic>
 801ed7a:	6278      	str	r0, [r7, #36]	; 0x24
 801ed7c:	e005      	b.n	801ed8a <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801ed7e:	2203      	movs	r2, #3
 801ed80:	2100      	movs	r1, #0
 801ed82:	2001      	movs	r0, #1
 801ed84:	f001 f85a 	bl	801fe3c <xQueueGenericCreate>
 801ed88:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801ed8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d022      	beq.n	801edd6 <osSemaphoreNew+0x10e>
 801ed90:	68bb      	ldr	r3, [r7, #8]
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	d01f      	beq.n	801edd6 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801ed96:	2300      	movs	r3, #0
 801ed98:	2200      	movs	r2, #0
 801ed9a:	2100      	movs	r1, #0
 801ed9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ed9e:	f001 f9c9 	bl	8020134 <xQueueGenericSend>
 801eda2:	4603      	mov	r3, r0
 801eda4:	2b01      	cmp	r3, #1
 801eda6:	d016      	beq.n	801edd6 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 801eda8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801edaa:	f001 fe3c 	bl	8020a26 <vQueueDelete>
            hSemaphore = NULL;
 801edae:	2300      	movs	r3, #0
 801edb0:	627b      	str	r3, [r7, #36]	; 0x24
 801edb2:	e010      	b.n	801edd6 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 801edb4:	6a3b      	ldr	r3, [r7, #32]
 801edb6:	2b01      	cmp	r3, #1
 801edb8:	d108      	bne.n	801edcc <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	689b      	ldr	r3, [r3, #8]
 801edbe:	461a      	mov	r2, r3
 801edc0:	68b9      	ldr	r1, [r7, #8]
 801edc2:	68f8      	ldr	r0, [r7, #12]
 801edc4:	f001 f94f 	bl	8020066 <xQueueCreateCountingSemaphoreStatic>
 801edc8:	6278      	str	r0, [r7, #36]	; 0x24
 801edca:	e004      	b.n	801edd6 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801edcc:	68b9      	ldr	r1, [r7, #8]
 801edce:	68f8      	ldr	r0, [r7, #12]
 801edd0:	f001 f97e 	bl	80200d0 <xQueueCreateCountingSemaphore>
 801edd4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801edd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d00c      	beq.n	801edf6 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	2b00      	cmp	r3, #0
 801ede0:	d003      	beq.n	801edea <osSemaphoreNew+0x122>
          name = attr->name;
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	681b      	ldr	r3, [r3, #0]
 801ede6:	61fb      	str	r3, [r7, #28]
 801ede8:	e001      	b.n	801edee <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 801edea:	2300      	movs	r3, #0
 801edec:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801edee:	69f9      	ldr	r1, [r7, #28]
 801edf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801edf2:	f001 ff63 	bl	8020cbc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801edf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801edf8:	4618      	mov	r0, r3
 801edfa:	3728      	adds	r7, #40	; 0x28
 801edfc:	46bd      	mov	sp, r7
 801edfe:	bd80      	pop	{r7, pc}
 801ee00:	20000b74 	.word	0x20000b74

0801ee04 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801ee04:	b580      	push	{r7, lr}
 801ee06:	b088      	sub	sp, #32
 801ee08:	af00      	add	r7, sp, #0
 801ee0a:	6078      	str	r0, [r7, #4]
 801ee0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801ee0e:	687b      	ldr	r3, [r7, #4]
 801ee10:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801ee12:	2300      	movs	r3, #0
 801ee14:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801ee16:	69bb      	ldr	r3, [r7, #24]
 801ee18:	2b00      	cmp	r3, #0
 801ee1a:	d103      	bne.n	801ee24 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801ee1c:	f06f 0303 	mvn.w	r3, #3
 801ee20:	61fb      	str	r3, [r7, #28]
 801ee22:	e04b      	b.n	801eebc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ee24:	f3ef 8305 	mrs	r3, IPSR
 801ee28:	617b      	str	r3, [r7, #20]
  return(result);
 801ee2a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801ee2c:	2b00      	cmp	r3, #0
 801ee2e:	d10f      	bne.n	801ee50 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee30:	f3ef 8310 	mrs	r3, PRIMASK
 801ee34:	613b      	str	r3, [r7, #16]
  return(result);
 801ee36:	693b      	ldr	r3, [r7, #16]
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	d109      	bne.n	801ee50 <osSemaphoreAcquire+0x4c>
 801ee3c:	4b22      	ldr	r3, [pc, #136]	; (801eec8 <osSemaphoreAcquire+0xc4>)
 801ee3e:	681b      	ldr	r3, [r3, #0]
 801ee40:	2b02      	cmp	r3, #2
 801ee42:	d128      	bne.n	801ee96 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ee44:	f3ef 8311 	mrs	r3, BASEPRI
 801ee48:	60fb      	str	r3, [r7, #12]
  return(result);
 801ee4a:	68fb      	ldr	r3, [r7, #12]
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	d022      	beq.n	801ee96 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 801ee50:	683b      	ldr	r3, [r7, #0]
 801ee52:	2b00      	cmp	r3, #0
 801ee54:	d003      	beq.n	801ee5e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801ee56:	f06f 0303 	mvn.w	r3, #3
 801ee5a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801ee5c:	e02d      	b.n	801eeba <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801ee5e:	2300      	movs	r3, #0
 801ee60:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801ee62:	f107 0308 	add.w	r3, r7, #8
 801ee66:	461a      	mov	r2, r3
 801ee68:	2100      	movs	r1, #0
 801ee6a:	69b8      	ldr	r0, [r7, #24]
 801ee6c:	f001 fd5e 	bl	802092c <xQueueReceiveFromISR>
 801ee70:	4603      	mov	r3, r0
 801ee72:	2b01      	cmp	r3, #1
 801ee74:	d003      	beq.n	801ee7e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801ee76:	f06f 0302 	mvn.w	r3, #2
 801ee7a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801ee7c:	e01d      	b.n	801eeba <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801ee7e:	68bb      	ldr	r3, [r7, #8]
 801ee80:	2b00      	cmp	r3, #0
 801ee82:	d01a      	beq.n	801eeba <osSemaphoreAcquire+0xb6>
 801ee84:	4b11      	ldr	r3, [pc, #68]	; (801eecc <osSemaphoreAcquire+0xc8>)
 801ee86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ee8a:	601a      	str	r2, [r3, #0]
 801ee8c:	f3bf 8f4f 	dsb	sy
 801ee90:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 801ee94:	e011      	b.n	801eeba <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801ee96:	6839      	ldr	r1, [r7, #0]
 801ee98:	69b8      	ldr	r0, [r7, #24]
 801ee9a:	f001 fc3f 	bl	802071c <xQueueSemaphoreTake>
 801ee9e:	4603      	mov	r3, r0
 801eea0:	2b01      	cmp	r3, #1
 801eea2:	d00b      	beq.n	801eebc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 801eea4:	683b      	ldr	r3, [r7, #0]
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	d003      	beq.n	801eeb2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801eeaa:	f06f 0301 	mvn.w	r3, #1
 801eeae:	61fb      	str	r3, [r7, #28]
 801eeb0:	e004      	b.n	801eebc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801eeb2:	f06f 0302 	mvn.w	r3, #2
 801eeb6:	61fb      	str	r3, [r7, #28]
 801eeb8:	e000      	b.n	801eebc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801eeba:	bf00      	nop
      }
    }
  }

  return (stat);
 801eebc:	69fb      	ldr	r3, [r7, #28]
}
 801eebe:	4618      	mov	r0, r3
 801eec0:	3720      	adds	r7, #32
 801eec2:	46bd      	mov	sp, r7
 801eec4:	bd80      	pop	{r7, pc}
 801eec6:	bf00      	nop
 801eec8:	20000b74 	.word	0x20000b74
 801eecc:	e000ed04 	.word	0xe000ed04

0801eed0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801eed0:	b580      	push	{r7, lr}
 801eed2:	b088      	sub	sp, #32
 801eed4:	af00      	add	r7, sp, #0
 801eed6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801eed8:	687b      	ldr	r3, [r7, #4]
 801eeda:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801eedc:	2300      	movs	r3, #0
 801eede:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801eee0:	69bb      	ldr	r3, [r7, #24]
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	d103      	bne.n	801eeee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801eee6:	f06f 0303 	mvn.w	r3, #3
 801eeea:	61fb      	str	r3, [r7, #28]
 801eeec:	e03e      	b.n	801ef6c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801eeee:	f3ef 8305 	mrs	r3, IPSR
 801eef2:	617b      	str	r3, [r7, #20]
  return(result);
 801eef4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	d10f      	bne.n	801ef1a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eefa:	f3ef 8310 	mrs	r3, PRIMASK
 801eefe:	613b      	str	r3, [r7, #16]
  return(result);
 801ef00:	693b      	ldr	r3, [r7, #16]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d109      	bne.n	801ef1a <osSemaphoreRelease+0x4a>
 801ef06:	4b1c      	ldr	r3, [pc, #112]	; (801ef78 <osSemaphoreRelease+0xa8>)
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	2b02      	cmp	r3, #2
 801ef0c:	d120      	bne.n	801ef50 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ef0e:	f3ef 8311 	mrs	r3, BASEPRI
 801ef12:	60fb      	str	r3, [r7, #12]
  return(result);
 801ef14:	68fb      	ldr	r3, [r7, #12]
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	d01a      	beq.n	801ef50 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801ef1a:	2300      	movs	r3, #0
 801ef1c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801ef1e:	f107 0308 	add.w	r3, r7, #8
 801ef22:	4619      	mov	r1, r3
 801ef24:	69b8      	ldr	r0, [r7, #24]
 801ef26:	f001 fa93 	bl	8020450 <xQueueGiveFromISR>
 801ef2a:	4603      	mov	r3, r0
 801ef2c:	2b01      	cmp	r3, #1
 801ef2e:	d003      	beq.n	801ef38 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 801ef30:	f06f 0302 	mvn.w	r3, #2
 801ef34:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801ef36:	e018      	b.n	801ef6a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 801ef38:	68bb      	ldr	r3, [r7, #8]
 801ef3a:	2b00      	cmp	r3, #0
 801ef3c:	d015      	beq.n	801ef6a <osSemaphoreRelease+0x9a>
 801ef3e:	4b0f      	ldr	r3, [pc, #60]	; (801ef7c <osSemaphoreRelease+0xac>)
 801ef40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ef44:	601a      	str	r2, [r3, #0]
 801ef46:	f3bf 8f4f 	dsb	sy
 801ef4a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801ef4e:	e00c      	b.n	801ef6a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801ef50:	2300      	movs	r3, #0
 801ef52:	2200      	movs	r2, #0
 801ef54:	2100      	movs	r1, #0
 801ef56:	69b8      	ldr	r0, [r7, #24]
 801ef58:	f001 f8ec 	bl	8020134 <xQueueGenericSend>
 801ef5c:	4603      	mov	r3, r0
 801ef5e:	2b01      	cmp	r3, #1
 801ef60:	d004      	beq.n	801ef6c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801ef62:	f06f 0302 	mvn.w	r3, #2
 801ef66:	61fb      	str	r3, [r7, #28]
 801ef68:	e000      	b.n	801ef6c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801ef6a:	bf00      	nop
    }
  }

  return (stat);
 801ef6c:	69fb      	ldr	r3, [r7, #28]
}
 801ef6e:	4618      	mov	r0, r3
 801ef70:	3720      	adds	r7, #32
 801ef72:	46bd      	mov	sp, r7
 801ef74:	bd80      	pop	{r7, pc}
 801ef76:	bf00      	nop
 801ef78:	20000b74 	.word	0x20000b74
 801ef7c:	e000ed04 	.word	0xe000ed04

0801ef80 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801ef80:	b580      	push	{r7, lr}
 801ef82:	b08c      	sub	sp, #48	; 0x30
 801ef84:	af02      	add	r7, sp, #8
 801ef86:	60f8      	str	r0, [r7, #12]
 801ef88:	60b9      	str	r1, [r7, #8]
 801ef8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801ef8c:	2300      	movs	r3, #0
 801ef8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ef90:	f3ef 8305 	mrs	r3, IPSR
 801ef94:	61bb      	str	r3, [r7, #24]
  return(result);
 801ef96:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801ef98:	2b00      	cmp	r3, #0
 801ef9a:	d170      	bne.n	801f07e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef9c:	f3ef 8310 	mrs	r3, PRIMASK
 801efa0:	617b      	str	r3, [r7, #20]
  return(result);
 801efa2:	697b      	ldr	r3, [r7, #20]
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d16a      	bne.n	801f07e <osMessageQueueNew+0xfe>
 801efa8:	4b37      	ldr	r3, [pc, #220]	; (801f088 <osMessageQueueNew+0x108>)
 801efaa:	681b      	ldr	r3, [r3, #0]
 801efac:	2b02      	cmp	r3, #2
 801efae:	d105      	bne.n	801efbc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801efb0:	f3ef 8311 	mrs	r3, BASEPRI
 801efb4:	613b      	str	r3, [r7, #16]
  return(result);
 801efb6:	693b      	ldr	r3, [r7, #16]
 801efb8:	2b00      	cmp	r3, #0
 801efba:	d160      	bne.n	801f07e <osMessageQueueNew+0xfe>
 801efbc:	68fb      	ldr	r3, [r7, #12]
 801efbe:	2b00      	cmp	r3, #0
 801efc0:	d05d      	beq.n	801f07e <osMessageQueueNew+0xfe>
 801efc2:	68bb      	ldr	r3, [r7, #8]
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d05a      	beq.n	801f07e <osMessageQueueNew+0xfe>
    mem = -1;
 801efc8:	f04f 33ff 	mov.w	r3, #4294967295
 801efcc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	d029      	beq.n	801f028 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	689b      	ldr	r3, [r3, #8]
 801efd8:	2b00      	cmp	r3, #0
 801efda:	d012      	beq.n	801f002 <osMessageQueueNew+0x82>
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	68db      	ldr	r3, [r3, #12]
 801efe0:	2b4f      	cmp	r3, #79	; 0x4f
 801efe2:	d90e      	bls.n	801f002 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801efe4:	687b      	ldr	r3, [r7, #4]
 801efe6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801efe8:	2b00      	cmp	r3, #0
 801efea:	d00a      	beq.n	801f002 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	695a      	ldr	r2, [r3, #20]
 801eff0:	68fb      	ldr	r3, [r7, #12]
 801eff2:	68b9      	ldr	r1, [r7, #8]
 801eff4:	fb01 f303 	mul.w	r3, r1, r3
 801eff8:	429a      	cmp	r2, r3
 801effa:	d302      	bcc.n	801f002 <osMessageQueueNew+0x82>
        mem = 1;
 801effc:	2301      	movs	r3, #1
 801effe:	623b      	str	r3, [r7, #32]
 801f000:	e014      	b.n	801f02c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	689b      	ldr	r3, [r3, #8]
 801f006:	2b00      	cmp	r3, #0
 801f008:	d110      	bne.n	801f02c <osMessageQueueNew+0xac>
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	68db      	ldr	r3, [r3, #12]
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d10c      	bne.n	801f02c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801f016:	2b00      	cmp	r3, #0
 801f018:	d108      	bne.n	801f02c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	695b      	ldr	r3, [r3, #20]
 801f01e:	2b00      	cmp	r3, #0
 801f020:	d104      	bne.n	801f02c <osMessageQueueNew+0xac>
          mem = 0;
 801f022:	2300      	movs	r3, #0
 801f024:	623b      	str	r3, [r7, #32]
 801f026:	e001      	b.n	801f02c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 801f028:	2300      	movs	r3, #0
 801f02a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801f02c:	6a3b      	ldr	r3, [r7, #32]
 801f02e:	2b01      	cmp	r3, #1
 801f030:	d10c      	bne.n	801f04c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	691a      	ldr	r2, [r3, #16]
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	6899      	ldr	r1, [r3, #8]
 801f03a:	2300      	movs	r3, #0
 801f03c:	9300      	str	r3, [sp, #0]
 801f03e:	460b      	mov	r3, r1
 801f040:	68b9      	ldr	r1, [r7, #8]
 801f042:	68f8      	ldr	r0, [r7, #12]
 801f044:	f000 fe88 	bl	801fd58 <xQueueGenericCreateStatic>
 801f048:	6278      	str	r0, [r7, #36]	; 0x24
 801f04a:	e008      	b.n	801f05e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 801f04c:	6a3b      	ldr	r3, [r7, #32]
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d105      	bne.n	801f05e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801f052:	2200      	movs	r2, #0
 801f054:	68b9      	ldr	r1, [r7, #8]
 801f056:	68f8      	ldr	r0, [r7, #12]
 801f058:	f000 fef0 	bl	801fe3c <xQueueGenericCreate>
 801f05c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801f05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f060:	2b00      	cmp	r3, #0
 801f062:	d00c      	beq.n	801f07e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	2b00      	cmp	r3, #0
 801f068:	d003      	beq.n	801f072 <osMessageQueueNew+0xf2>
        name = attr->name;
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	681b      	ldr	r3, [r3, #0]
 801f06e:	61fb      	str	r3, [r7, #28]
 801f070:	e001      	b.n	801f076 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801f072:	2300      	movs	r3, #0
 801f074:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801f076:	69f9      	ldr	r1, [r7, #28]
 801f078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f07a:	f001 fe1f 	bl	8020cbc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801f07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801f080:	4618      	mov	r0, r3
 801f082:	3728      	adds	r7, #40	; 0x28
 801f084:	46bd      	mov	sp, r7
 801f086:	bd80      	pop	{r7, pc}
 801f088:	20000b74 	.word	0x20000b74

0801f08c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801f08c:	b580      	push	{r7, lr}
 801f08e:	b08a      	sub	sp, #40	; 0x28
 801f090:	af00      	add	r7, sp, #0
 801f092:	60f8      	str	r0, [r7, #12]
 801f094:	60b9      	str	r1, [r7, #8]
 801f096:	603b      	str	r3, [r7, #0]
 801f098:	4613      	mov	r3, r2
 801f09a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801f09c:	68fb      	ldr	r3, [r7, #12]
 801f09e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801f0a0:	2300      	movs	r3, #0
 801f0a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f0a4:	f3ef 8305 	mrs	r3, IPSR
 801f0a8:	61fb      	str	r3, [r7, #28]
  return(result);
 801f0aa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	d10f      	bne.n	801f0d0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f0b0:	f3ef 8310 	mrs	r3, PRIMASK
 801f0b4:	61bb      	str	r3, [r7, #24]
  return(result);
 801f0b6:	69bb      	ldr	r3, [r7, #24]
 801f0b8:	2b00      	cmp	r3, #0
 801f0ba:	d109      	bne.n	801f0d0 <osMessageQueuePut+0x44>
 801f0bc:	4b2b      	ldr	r3, [pc, #172]	; (801f16c <osMessageQueuePut+0xe0>)
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	2b02      	cmp	r3, #2
 801f0c2:	d12e      	bne.n	801f122 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801f0c4:	f3ef 8311 	mrs	r3, BASEPRI
 801f0c8:	617b      	str	r3, [r7, #20]
  return(result);
 801f0ca:	697b      	ldr	r3, [r7, #20]
 801f0cc:	2b00      	cmp	r3, #0
 801f0ce:	d028      	beq.n	801f122 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f0d0:	6a3b      	ldr	r3, [r7, #32]
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d005      	beq.n	801f0e2 <osMessageQueuePut+0x56>
 801f0d6:	68bb      	ldr	r3, [r7, #8]
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	d002      	beq.n	801f0e2 <osMessageQueuePut+0x56>
 801f0dc:	683b      	ldr	r3, [r7, #0]
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	d003      	beq.n	801f0ea <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801f0e2:	f06f 0303 	mvn.w	r3, #3
 801f0e6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f0e8:	e039      	b.n	801f15e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801f0ea:	2300      	movs	r3, #0
 801f0ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801f0ee:	f107 0210 	add.w	r2, r7, #16
 801f0f2:	2300      	movs	r3, #0
 801f0f4:	68b9      	ldr	r1, [r7, #8]
 801f0f6:	6a38      	ldr	r0, [r7, #32]
 801f0f8:	f001 f916 	bl	8020328 <xQueueGenericSendFromISR>
 801f0fc:	4603      	mov	r3, r0
 801f0fe:	2b01      	cmp	r3, #1
 801f100:	d003      	beq.n	801f10a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801f102:	f06f 0302 	mvn.w	r3, #2
 801f106:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f108:	e029      	b.n	801f15e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801f10a:	693b      	ldr	r3, [r7, #16]
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d026      	beq.n	801f15e <osMessageQueuePut+0xd2>
 801f110:	4b17      	ldr	r3, [pc, #92]	; (801f170 <osMessageQueuePut+0xe4>)
 801f112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f116:	601a      	str	r2, [r3, #0]
 801f118:	f3bf 8f4f 	dsb	sy
 801f11c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f120:	e01d      	b.n	801f15e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801f122:	6a3b      	ldr	r3, [r7, #32]
 801f124:	2b00      	cmp	r3, #0
 801f126:	d002      	beq.n	801f12e <osMessageQueuePut+0xa2>
 801f128:	68bb      	ldr	r3, [r7, #8]
 801f12a:	2b00      	cmp	r3, #0
 801f12c:	d103      	bne.n	801f136 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801f12e:	f06f 0303 	mvn.w	r3, #3
 801f132:	627b      	str	r3, [r7, #36]	; 0x24
 801f134:	e014      	b.n	801f160 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801f136:	2300      	movs	r3, #0
 801f138:	683a      	ldr	r2, [r7, #0]
 801f13a:	68b9      	ldr	r1, [r7, #8]
 801f13c:	6a38      	ldr	r0, [r7, #32]
 801f13e:	f000 fff9 	bl	8020134 <xQueueGenericSend>
 801f142:	4603      	mov	r3, r0
 801f144:	2b01      	cmp	r3, #1
 801f146:	d00b      	beq.n	801f160 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 801f148:	683b      	ldr	r3, [r7, #0]
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d003      	beq.n	801f156 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801f14e:	f06f 0301 	mvn.w	r3, #1
 801f152:	627b      	str	r3, [r7, #36]	; 0x24
 801f154:	e004      	b.n	801f160 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801f156:	f06f 0302 	mvn.w	r3, #2
 801f15a:	627b      	str	r3, [r7, #36]	; 0x24
 801f15c:	e000      	b.n	801f160 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f15e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801f160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801f162:	4618      	mov	r0, r3
 801f164:	3728      	adds	r7, #40	; 0x28
 801f166:	46bd      	mov	sp, r7
 801f168:	bd80      	pop	{r7, pc}
 801f16a:	bf00      	nop
 801f16c:	20000b74 	.word	0x20000b74
 801f170:	e000ed04 	.word	0xe000ed04

0801f174 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801f174:	b580      	push	{r7, lr}
 801f176:	b08a      	sub	sp, #40	; 0x28
 801f178:	af00      	add	r7, sp, #0
 801f17a:	60f8      	str	r0, [r7, #12]
 801f17c:	60b9      	str	r1, [r7, #8]
 801f17e:	607a      	str	r2, [r7, #4]
 801f180:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801f182:	68fb      	ldr	r3, [r7, #12]
 801f184:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801f186:	2300      	movs	r3, #0
 801f188:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f18a:	f3ef 8305 	mrs	r3, IPSR
 801f18e:	61fb      	str	r3, [r7, #28]
  return(result);
 801f190:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801f192:	2b00      	cmp	r3, #0
 801f194:	d10f      	bne.n	801f1b6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f196:	f3ef 8310 	mrs	r3, PRIMASK
 801f19a:	61bb      	str	r3, [r7, #24]
  return(result);
 801f19c:	69bb      	ldr	r3, [r7, #24]
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	d109      	bne.n	801f1b6 <osMessageQueueGet+0x42>
 801f1a2:	4b2b      	ldr	r3, [pc, #172]	; (801f250 <osMessageQueueGet+0xdc>)
 801f1a4:	681b      	ldr	r3, [r3, #0]
 801f1a6:	2b02      	cmp	r3, #2
 801f1a8:	d12e      	bne.n	801f208 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801f1aa:	f3ef 8311 	mrs	r3, BASEPRI
 801f1ae:	617b      	str	r3, [r7, #20]
  return(result);
 801f1b0:	697b      	ldr	r3, [r7, #20]
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d028      	beq.n	801f208 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f1b6:	6a3b      	ldr	r3, [r7, #32]
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	d005      	beq.n	801f1c8 <osMessageQueueGet+0x54>
 801f1bc:	68bb      	ldr	r3, [r7, #8]
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	d002      	beq.n	801f1c8 <osMessageQueueGet+0x54>
 801f1c2:	683b      	ldr	r3, [r7, #0]
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	d003      	beq.n	801f1d0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 801f1c8:	f06f 0303 	mvn.w	r3, #3
 801f1cc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f1ce:	e038      	b.n	801f242 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801f1d0:	2300      	movs	r3, #0
 801f1d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801f1d4:	f107 0310 	add.w	r3, r7, #16
 801f1d8:	461a      	mov	r2, r3
 801f1da:	68b9      	ldr	r1, [r7, #8]
 801f1dc:	6a38      	ldr	r0, [r7, #32]
 801f1de:	f001 fba5 	bl	802092c <xQueueReceiveFromISR>
 801f1e2:	4603      	mov	r3, r0
 801f1e4:	2b01      	cmp	r3, #1
 801f1e6:	d003      	beq.n	801f1f0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 801f1e8:	f06f 0302 	mvn.w	r3, #2
 801f1ec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f1ee:	e028      	b.n	801f242 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801f1f0:	693b      	ldr	r3, [r7, #16]
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	d025      	beq.n	801f242 <osMessageQueueGet+0xce>
 801f1f6:	4b17      	ldr	r3, [pc, #92]	; (801f254 <osMessageQueueGet+0xe0>)
 801f1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f1fc:	601a      	str	r2, [r3, #0]
 801f1fe:	f3bf 8f4f 	dsb	sy
 801f202:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f206:	e01c      	b.n	801f242 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801f208:	6a3b      	ldr	r3, [r7, #32]
 801f20a:	2b00      	cmp	r3, #0
 801f20c:	d002      	beq.n	801f214 <osMessageQueueGet+0xa0>
 801f20e:	68bb      	ldr	r3, [r7, #8]
 801f210:	2b00      	cmp	r3, #0
 801f212:	d103      	bne.n	801f21c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801f214:	f06f 0303 	mvn.w	r3, #3
 801f218:	627b      	str	r3, [r7, #36]	; 0x24
 801f21a:	e013      	b.n	801f244 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801f21c:	683a      	ldr	r2, [r7, #0]
 801f21e:	68b9      	ldr	r1, [r7, #8]
 801f220:	6a38      	ldr	r0, [r7, #32]
 801f222:	f001 f99f 	bl	8020564 <xQueueReceive>
 801f226:	4603      	mov	r3, r0
 801f228:	2b01      	cmp	r3, #1
 801f22a:	d00b      	beq.n	801f244 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 801f22c:	683b      	ldr	r3, [r7, #0]
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d003      	beq.n	801f23a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801f232:	f06f 0301 	mvn.w	r3, #1
 801f236:	627b      	str	r3, [r7, #36]	; 0x24
 801f238:	e004      	b.n	801f244 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801f23a:	f06f 0302 	mvn.w	r3, #2
 801f23e:	627b      	str	r3, [r7, #36]	; 0x24
 801f240:	e000      	b.n	801f244 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801f242:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801f244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801f246:	4618      	mov	r0, r3
 801f248:	3728      	adds	r7, #40	; 0x28
 801f24a:	46bd      	mov	sp, r7
 801f24c:	bd80      	pop	{r7, pc}
 801f24e:	bf00      	nop
 801f250:	20000b74 	.word	0x20000b74
 801f254:	e000ed04 	.word	0xe000ed04

0801f258 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 801f258:	b580      	push	{r7, lr}
 801f25a:	b088      	sub	sp, #32
 801f25c:	af00      	add	r7, sp, #0
 801f25e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801f260:	687b      	ldr	r3, [r7, #4]
 801f262:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f264:	f3ef 8305 	mrs	r3, IPSR
 801f268:	617b      	str	r3, [r7, #20]
  return(result);
 801f26a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	d10f      	bne.n	801f290 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f270:	f3ef 8310 	mrs	r3, PRIMASK
 801f274:	613b      	str	r3, [r7, #16]
  return(result);
 801f276:	693b      	ldr	r3, [r7, #16]
 801f278:	2b00      	cmp	r3, #0
 801f27a:	d109      	bne.n	801f290 <osMessageQueueReset+0x38>
 801f27c:	4b0f      	ldr	r3, [pc, #60]	; (801f2bc <osMessageQueueReset+0x64>)
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	2b02      	cmp	r3, #2
 801f282:	d109      	bne.n	801f298 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801f284:	f3ef 8311 	mrs	r3, BASEPRI
 801f288:	60fb      	str	r3, [r7, #12]
  return(result);
 801f28a:	68fb      	ldr	r3, [r7, #12]
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	d003      	beq.n	801f298 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 801f290:	f06f 0305 	mvn.w	r3, #5
 801f294:	61fb      	str	r3, [r7, #28]
 801f296:	e00c      	b.n	801f2b2 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 801f298:	69bb      	ldr	r3, [r7, #24]
 801f29a:	2b00      	cmp	r3, #0
 801f29c:	d103      	bne.n	801f2a6 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 801f29e:	f06f 0303 	mvn.w	r3, #3
 801f2a2:	61fb      	str	r3, [r7, #28]
 801f2a4:	e005      	b.n	801f2b2 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 801f2a6:	2300      	movs	r3, #0
 801f2a8:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 801f2aa:	2100      	movs	r1, #0
 801f2ac:	69b8      	ldr	r0, [r7, #24]
 801f2ae:	f000 fceb 	bl	801fc88 <xQueueGenericReset>
  }

  return (stat);
 801f2b2:	69fb      	ldr	r3, [r7, #28]
}
 801f2b4:	4618      	mov	r0, r3
 801f2b6:	3720      	adds	r7, #32
 801f2b8:	46bd      	mov	sp, r7
 801f2ba:	bd80      	pop	{r7, pc}
 801f2bc:	20000b74 	.word	0x20000b74

0801f2c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801f2c0:	b480      	push	{r7}
 801f2c2:	b085      	sub	sp, #20
 801f2c4:	af00      	add	r7, sp, #0
 801f2c6:	60f8      	str	r0, [r7, #12]
 801f2c8:	60b9      	str	r1, [r7, #8]
 801f2ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801f2cc:	68fb      	ldr	r3, [r7, #12]
 801f2ce:	4a07      	ldr	r2, [pc, #28]	; (801f2ec <vApplicationGetIdleTaskMemory+0x2c>)
 801f2d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801f2d2:	68bb      	ldr	r3, [r7, #8]
 801f2d4:	4a06      	ldr	r2, [pc, #24]	; (801f2f0 <vApplicationGetIdleTaskMemory+0x30>)
 801f2d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f2de:	601a      	str	r2, [r3, #0]
}
 801f2e0:	bf00      	nop
 801f2e2:	3714      	adds	r7, #20
 801f2e4:	46bd      	mov	sp, r7
 801f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2ea:	4770      	bx	lr
 801f2ec:	20000b78 	.word	0x20000b78
 801f2f0:	20000bdc 	.word	0x20000bdc

0801f2f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801f2f4:	b480      	push	{r7}
 801f2f6:	b085      	sub	sp, #20
 801f2f8:	af00      	add	r7, sp, #0
 801f2fa:	60f8      	str	r0, [r7, #12]
 801f2fc:	60b9      	str	r1, [r7, #8]
 801f2fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801f300:	68fb      	ldr	r3, [r7, #12]
 801f302:	4a07      	ldr	r2, [pc, #28]	; (801f320 <vApplicationGetTimerTaskMemory+0x2c>)
 801f304:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801f306:	68bb      	ldr	r3, [r7, #8]
 801f308:	4a06      	ldr	r2, [pc, #24]	; (801f324 <vApplicationGetTimerTaskMemory+0x30>)
 801f30a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801f30c:	687b      	ldr	r3, [r7, #4]
 801f30e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f312:	601a      	str	r2, [r3, #0]
}
 801f314:	bf00      	nop
 801f316:	3714      	adds	r7, #20
 801f318:	46bd      	mov	sp, r7
 801f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f31e:	4770      	bx	lr
 801f320:	200013dc 	.word	0x200013dc
 801f324:	20001440 	.word	0x20001440

0801f328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801f328:	b580      	push	{r7, lr}
 801f32a:	b08a      	sub	sp, #40	; 0x28
 801f32c:	af00      	add	r7, sp, #0
 801f32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801f330:	2300      	movs	r3, #0
 801f332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801f334:	f001 ff7c 	bl	8021230 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801f338:	4b59      	ldr	r3, [pc, #356]	; (801f4a0 <pvPortMalloc+0x178>)
 801f33a:	681b      	ldr	r3, [r3, #0]
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	d101      	bne.n	801f344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801f340:	f000 f910 	bl	801f564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801f344:	4b57      	ldr	r3, [pc, #348]	; (801f4a4 <pvPortMalloc+0x17c>)
 801f346:	681a      	ldr	r2, [r3, #0]
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	4013      	ands	r3, r2
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	f040 808c 	bne.w	801f46a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	2b00      	cmp	r3, #0
 801f356:	d01c      	beq.n	801f392 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 801f358:	2208      	movs	r2, #8
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	4413      	add	r3, r2
 801f35e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	f003 0307 	and.w	r3, r3, #7
 801f366:	2b00      	cmp	r3, #0
 801f368:	d013      	beq.n	801f392 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	f023 0307 	bic.w	r3, r3, #7
 801f370:	3308      	adds	r3, #8
 801f372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801f374:	687b      	ldr	r3, [r7, #4]
 801f376:	f003 0307 	and.w	r3, r3, #7
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d009      	beq.n	801f392 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801f37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f382:	f383 8811 	msr	BASEPRI, r3
 801f386:	f3bf 8f6f 	isb	sy
 801f38a:	f3bf 8f4f 	dsb	sy
 801f38e:	617b      	str	r3, [r7, #20]
 801f390:	e7fe      	b.n	801f390 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801f392:	687b      	ldr	r3, [r7, #4]
 801f394:	2b00      	cmp	r3, #0
 801f396:	d068      	beq.n	801f46a <pvPortMalloc+0x142>
 801f398:	4b43      	ldr	r3, [pc, #268]	; (801f4a8 <pvPortMalloc+0x180>)
 801f39a:	681b      	ldr	r3, [r3, #0]
 801f39c:	687a      	ldr	r2, [r7, #4]
 801f39e:	429a      	cmp	r2, r3
 801f3a0:	d863      	bhi.n	801f46a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801f3a2:	4b42      	ldr	r3, [pc, #264]	; (801f4ac <pvPortMalloc+0x184>)
 801f3a4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801f3a6:	4b41      	ldr	r3, [pc, #260]	; (801f4ac <pvPortMalloc+0x184>)
 801f3a8:	681b      	ldr	r3, [r3, #0]
 801f3aa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801f3ac:	e004      	b.n	801f3b8 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 801f3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3b0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801f3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3b4:	681b      	ldr	r3, [r3, #0]
 801f3b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3ba:	685b      	ldr	r3, [r3, #4]
 801f3bc:	687a      	ldr	r2, [r7, #4]
 801f3be:	429a      	cmp	r2, r3
 801f3c0:	d903      	bls.n	801f3ca <pvPortMalloc+0xa2>
 801f3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3c4:	681b      	ldr	r3, [r3, #0]
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	d1f1      	bne.n	801f3ae <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801f3ca:	4b35      	ldr	r3, [pc, #212]	; (801f4a0 <pvPortMalloc+0x178>)
 801f3cc:	681b      	ldr	r3, [r3, #0]
 801f3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f3d0:	429a      	cmp	r2, r3
 801f3d2:	d04a      	beq.n	801f46a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801f3d4:	6a3b      	ldr	r3, [r7, #32]
 801f3d6:	681b      	ldr	r3, [r3, #0]
 801f3d8:	2208      	movs	r2, #8
 801f3da:	4413      	add	r3, r2
 801f3dc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801f3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3e0:	681a      	ldr	r2, [r3, #0]
 801f3e2:	6a3b      	ldr	r3, [r7, #32]
 801f3e4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801f3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3e8:	685a      	ldr	r2, [r3, #4]
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	1ad2      	subs	r2, r2, r3
 801f3ee:	2308      	movs	r3, #8
 801f3f0:	005b      	lsls	r3, r3, #1
 801f3f2:	429a      	cmp	r2, r3
 801f3f4:	d91e      	bls.n	801f434 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801f3f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f3f8:	687b      	ldr	r3, [r7, #4]
 801f3fa:	4413      	add	r3, r2
 801f3fc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801f3fe:	69bb      	ldr	r3, [r7, #24]
 801f400:	f003 0307 	and.w	r3, r3, #7
 801f404:	2b00      	cmp	r3, #0
 801f406:	d009      	beq.n	801f41c <pvPortMalloc+0xf4>
 801f408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f40c:	f383 8811 	msr	BASEPRI, r3
 801f410:	f3bf 8f6f 	isb	sy
 801f414:	f3bf 8f4f 	dsb	sy
 801f418:	613b      	str	r3, [r7, #16]
 801f41a:	e7fe      	b.n	801f41a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f41e:	685a      	ldr	r2, [r3, #4]
 801f420:	687b      	ldr	r3, [r7, #4]
 801f422:	1ad2      	subs	r2, r2, r3
 801f424:	69bb      	ldr	r3, [r7, #24]
 801f426:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801f428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f42a:	687a      	ldr	r2, [r7, #4]
 801f42c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801f42e:	69b8      	ldr	r0, [r7, #24]
 801f430:	f000 f8fc 	bl	801f62c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801f434:	4b1c      	ldr	r3, [pc, #112]	; (801f4a8 <pvPortMalloc+0x180>)
 801f436:	681a      	ldr	r2, [r3, #0]
 801f438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f43a:	685b      	ldr	r3, [r3, #4]
 801f43c:	1ad3      	subs	r3, r2, r3
 801f43e:	4a1a      	ldr	r2, [pc, #104]	; (801f4a8 <pvPortMalloc+0x180>)
 801f440:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801f442:	4b19      	ldr	r3, [pc, #100]	; (801f4a8 <pvPortMalloc+0x180>)
 801f444:	681a      	ldr	r2, [r3, #0]
 801f446:	4b1a      	ldr	r3, [pc, #104]	; (801f4b0 <pvPortMalloc+0x188>)
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	429a      	cmp	r2, r3
 801f44c:	d203      	bcs.n	801f456 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801f44e:	4b16      	ldr	r3, [pc, #88]	; (801f4a8 <pvPortMalloc+0x180>)
 801f450:	681b      	ldr	r3, [r3, #0]
 801f452:	4a17      	ldr	r2, [pc, #92]	; (801f4b0 <pvPortMalloc+0x188>)
 801f454:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801f456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f458:	685a      	ldr	r2, [r3, #4]
 801f45a:	4b12      	ldr	r3, [pc, #72]	; (801f4a4 <pvPortMalloc+0x17c>)
 801f45c:	681b      	ldr	r3, [r3, #0]
 801f45e:	431a      	orrs	r2, r3
 801f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f462:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801f464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f466:	2200      	movs	r2, #0
 801f468:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801f46a:	f001 ff27 	bl	80212bc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801f46e:	69fb      	ldr	r3, [r7, #28]
 801f470:	2b00      	cmp	r3, #0
 801f472:	d101      	bne.n	801f478 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801f474:	f7f1 ff04 	bl	8011280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801f478:	69fb      	ldr	r3, [r7, #28]
 801f47a:	f003 0307 	and.w	r3, r3, #7
 801f47e:	2b00      	cmp	r3, #0
 801f480:	d009      	beq.n	801f496 <pvPortMalloc+0x16e>
 801f482:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f486:	f383 8811 	msr	BASEPRI, r3
 801f48a:	f3bf 8f6f 	isb	sy
 801f48e:	f3bf 8f4f 	dsb	sy
 801f492:	60fb      	str	r3, [r7, #12]
 801f494:	e7fe      	b.n	801f494 <pvPortMalloc+0x16c>
	return pvReturn;
 801f496:	69fb      	ldr	r3, [r7, #28]
}
 801f498:	4618      	mov	r0, r3
 801f49a:	3728      	adds	r7, #40	; 0x28
 801f49c:	46bd      	mov	sp, r7
 801f49e:	bd80      	pop	{r7, pc}
 801f4a0:	20026e38 	.word	0x20026e38
 801f4a4:	20026e44 	.word	0x20026e44
 801f4a8:	20026e3c 	.word	0x20026e3c
 801f4ac:	20026e30 	.word	0x20026e30
 801f4b0:	20026e40 	.word	0x20026e40

0801f4b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801f4b4:	b580      	push	{r7, lr}
 801f4b6:	b086      	sub	sp, #24
 801f4b8:	af00      	add	r7, sp, #0
 801f4ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	2b00      	cmp	r3, #0
 801f4c4:	d046      	beq.n	801f554 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801f4c6:	2308      	movs	r3, #8
 801f4c8:	425b      	negs	r3, r3
 801f4ca:	697a      	ldr	r2, [r7, #20]
 801f4cc:	4413      	add	r3, r2
 801f4ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801f4d0:	697b      	ldr	r3, [r7, #20]
 801f4d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801f4d4:	693b      	ldr	r3, [r7, #16]
 801f4d6:	685a      	ldr	r2, [r3, #4]
 801f4d8:	4b20      	ldr	r3, [pc, #128]	; (801f55c <vPortFree+0xa8>)
 801f4da:	681b      	ldr	r3, [r3, #0]
 801f4dc:	4013      	ands	r3, r2
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	d109      	bne.n	801f4f6 <vPortFree+0x42>
 801f4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f4e6:	f383 8811 	msr	BASEPRI, r3
 801f4ea:	f3bf 8f6f 	isb	sy
 801f4ee:	f3bf 8f4f 	dsb	sy
 801f4f2:	60fb      	str	r3, [r7, #12]
 801f4f4:	e7fe      	b.n	801f4f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801f4f6:	693b      	ldr	r3, [r7, #16]
 801f4f8:	681b      	ldr	r3, [r3, #0]
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d009      	beq.n	801f512 <vPortFree+0x5e>
 801f4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f502:	f383 8811 	msr	BASEPRI, r3
 801f506:	f3bf 8f6f 	isb	sy
 801f50a:	f3bf 8f4f 	dsb	sy
 801f50e:	60bb      	str	r3, [r7, #8]
 801f510:	e7fe      	b.n	801f510 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801f512:	693b      	ldr	r3, [r7, #16]
 801f514:	685a      	ldr	r2, [r3, #4]
 801f516:	4b11      	ldr	r3, [pc, #68]	; (801f55c <vPortFree+0xa8>)
 801f518:	681b      	ldr	r3, [r3, #0]
 801f51a:	4013      	ands	r3, r2
 801f51c:	2b00      	cmp	r3, #0
 801f51e:	d019      	beq.n	801f554 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801f520:	693b      	ldr	r3, [r7, #16]
 801f522:	681b      	ldr	r3, [r3, #0]
 801f524:	2b00      	cmp	r3, #0
 801f526:	d115      	bne.n	801f554 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801f528:	693b      	ldr	r3, [r7, #16]
 801f52a:	685a      	ldr	r2, [r3, #4]
 801f52c:	4b0b      	ldr	r3, [pc, #44]	; (801f55c <vPortFree+0xa8>)
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	43db      	mvns	r3, r3
 801f532:	401a      	ands	r2, r3
 801f534:	693b      	ldr	r3, [r7, #16]
 801f536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801f538:	f001 fe7a 	bl	8021230 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801f53c:	693b      	ldr	r3, [r7, #16]
 801f53e:	685a      	ldr	r2, [r3, #4]
 801f540:	4b07      	ldr	r3, [pc, #28]	; (801f560 <vPortFree+0xac>)
 801f542:	681b      	ldr	r3, [r3, #0]
 801f544:	4413      	add	r3, r2
 801f546:	4a06      	ldr	r2, [pc, #24]	; (801f560 <vPortFree+0xac>)
 801f548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801f54a:	6938      	ldr	r0, [r7, #16]
 801f54c:	f000 f86e 	bl	801f62c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801f550:	f001 feb4 	bl	80212bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801f554:	bf00      	nop
 801f556:	3718      	adds	r7, #24
 801f558:	46bd      	mov	sp, r7
 801f55a:	bd80      	pop	{r7, pc}
 801f55c:	20026e44 	.word	0x20026e44
 801f560:	20026e3c 	.word	0x20026e3c

0801f564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801f564:	b480      	push	{r7}
 801f566:	b085      	sub	sp, #20
 801f568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801f56a:	4b29      	ldr	r3, [pc, #164]	; (801f610 <prvHeapInit+0xac>)
 801f56c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801f56e:	4b29      	ldr	r3, [pc, #164]	; (801f614 <prvHeapInit+0xb0>)
 801f570:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801f572:	68fb      	ldr	r3, [r7, #12]
 801f574:	f003 0307 	and.w	r3, r3, #7
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d00c      	beq.n	801f596 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801f57c:	68fb      	ldr	r3, [r7, #12]
 801f57e:	3307      	adds	r3, #7
 801f580:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f582:	68fb      	ldr	r3, [r7, #12]
 801f584:	f023 0307 	bic.w	r3, r3, #7
 801f588:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801f58a:	68ba      	ldr	r2, [r7, #8]
 801f58c:	68fb      	ldr	r3, [r7, #12]
 801f58e:	1ad3      	subs	r3, r2, r3
 801f590:	4a20      	ldr	r2, [pc, #128]	; (801f614 <prvHeapInit+0xb0>)
 801f592:	4413      	add	r3, r2
 801f594:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801f596:	68fb      	ldr	r3, [r7, #12]
 801f598:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801f59a:	4a1f      	ldr	r2, [pc, #124]	; (801f618 <prvHeapInit+0xb4>)
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801f5a0:	4b1d      	ldr	r3, [pc, #116]	; (801f618 <prvHeapInit+0xb4>)
 801f5a2:	2200      	movs	r2, #0
 801f5a4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	68ba      	ldr	r2, [r7, #8]
 801f5aa:	4413      	add	r3, r2
 801f5ac:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801f5ae:	2208      	movs	r2, #8
 801f5b0:	68fb      	ldr	r3, [r7, #12]
 801f5b2:	1a9b      	subs	r3, r3, r2
 801f5b4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f5b6:	68fb      	ldr	r3, [r7, #12]
 801f5b8:	f023 0307 	bic.w	r3, r3, #7
 801f5bc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801f5be:	68fb      	ldr	r3, [r7, #12]
 801f5c0:	4a16      	ldr	r2, [pc, #88]	; (801f61c <prvHeapInit+0xb8>)
 801f5c2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801f5c4:	4b15      	ldr	r3, [pc, #84]	; (801f61c <prvHeapInit+0xb8>)
 801f5c6:	681b      	ldr	r3, [r3, #0]
 801f5c8:	2200      	movs	r2, #0
 801f5ca:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801f5cc:	4b13      	ldr	r3, [pc, #76]	; (801f61c <prvHeapInit+0xb8>)
 801f5ce:	681b      	ldr	r3, [r3, #0]
 801f5d0:	2200      	movs	r2, #0
 801f5d2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801f5d8:	683b      	ldr	r3, [r7, #0]
 801f5da:	68fa      	ldr	r2, [r7, #12]
 801f5dc:	1ad2      	subs	r2, r2, r3
 801f5de:	683b      	ldr	r3, [r7, #0]
 801f5e0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801f5e2:	4b0e      	ldr	r3, [pc, #56]	; (801f61c <prvHeapInit+0xb8>)
 801f5e4:	681a      	ldr	r2, [r3, #0]
 801f5e6:	683b      	ldr	r3, [r7, #0]
 801f5e8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f5ea:	683b      	ldr	r3, [r7, #0]
 801f5ec:	685b      	ldr	r3, [r3, #4]
 801f5ee:	4a0c      	ldr	r2, [pc, #48]	; (801f620 <prvHeapInit+0xbc>)
 801f5f0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f5f2:	683b      	ldr	r3, [r7, #0]
 801f5f4:	685b      	ldr	r3, [r3, #4]
 801f5f6:	4a0b      	ldr	r2, [pc, #44]	; (801f624 <prvHeapInit+0xc0>)
 801f5f8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801f5fa:	4b0b      	ldr	r3, [pc, #44]	; (801f628 <prvHeapInit+0xc4>)
 801f5fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801f600:	601a      	str	r2, [r3, #0]
}
 801f602:	bf00      	nop
 801f604:	3714      	adds	r7, #20
 801f606:	46bd      	mov	sp, r7
 801f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f60c:	4770      	bx	lr
 801f60e:	bf00      	nop
 801f610:	000249f0 	.word	0x000249f0
 801f614:	20002440 	.word	0x20002440
 801f618:	20026e30 	.word	0x20026e30
 801f61c:	20026e38 	.word	0x20026e38
 801f620:	20026e40 	.word	0x20026e40
 801f624:	20026e3c 	.word	0x20026e3c
 801f628:	20026e44 	.word	0x20026e44

0801f62c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801f62c:	b480      	push	{r7}
 801f62e:	b085      	sub	sp, #20
 801f630:	af00      	add	r7, sp, #0
 801f632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801f634:	4b28      	ldr	r3, [pc, #160]	; (801f6d8 <prvInsertBlockIntoFreeList+0xac>)
 801f636:	60fb      	str	r3, [r7, #12]
 801f638:	e002      	b.n	801f640 <prvInsertBlockIntoFreeList+0x14>
 801f63a:	68fb      	ldr	r3, [r7, #12]
 801f63c:	681b      	ldr	r3, [r3, #0]
 801f63e:	60fb      	str	r3, [r7, #12]
 801f640:	68fb      	ldr	r3, [r7, #12]
 801f642:	681b      	ldr	r3, [r3, #0]
 801f644:	687a      	ldr	r2, [r7, #4]
 801f646:	429a      	cmp	r2, r3
 801f648:	d8f7      	bhi.n	801f63a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801f64a:	68fb      	ldr	r3, [r7, #12]
 801f64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801f64e:	68fb      	ldr	r3, [r7, #12]
 801f650:	685b      	ldr	r3, [r3, #4]
 801f652:	68ba      	ldr	r2, [r7, #8]
 801f654:	4413      	add	r3, r2
 801f656:	687a      	ldr	r2, [r7, #4]
 801f658:	429a      	cmp	r2, r3
 801f65a:	d108      	bne.n	801f66e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801f65c:	68fb      	ldr	r3, [r7, #12]
 801f65e:	685a      	ldr	r2, [r3, #4]
 801f660:	687b      	ldr	r3, [r7, #4]
 801f662:	685b      	ldr	r3, [r3, #4]
 801f664:	441a      	add	r2, r3
 801f666:	68fb      	ldr	r3, [r7, #12]
 801f668:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801f66a:	68fb      	ldr	r3, [r7, #12]
 801f66c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801f66e:	687b      	ldr	r3, [r7, #4]
 801f670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	685b      	ldr	r3, [r3, #4]
 801f676:	68ba      	ldr	r2, [r7, #8]
 801f678:	441a      	add	r2, r3
 801f67a:	68fb      	ldr	r3, [r7, #12]
 801f67c:	681b      	ldr	r3, [r3, #0]
 801f67e:	429a      	cmp	r2, r3
 801f680:	d118      	bne.n	801f6b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801f682:	68fb      	ldr	r3, [r7, #12]
 801f684:	681a      	ldr	r2, [r3, #0]
 801f686:	4b15      	ldr	r3, [pc, #84]	; (801f6dc <prvInsertBlockIntoFreeList+0xb0>)
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	429a      	cmp	r2, r3
 801f68c:	d00d      	beq.n	801f6aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	685a      	ldr	r2, [r3, #4]
 801f692:	68fb      	ldr	r3, [r7, #12]
 801f694:	681b      	ldr	r3, [r3, #0]
 801f696:	685b      	ldr	r3, [r3, #4]
 801f698:	441a      	add	r2, r3
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801f69e:	68fb      	ldr	r3, [r7, #12]
 801f6a0:	681b      	ldr	r3, [r3, #0]
 801f6a2:	681a      	ldr	r2, [r3, #0]
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	601a      	str	r2, [r3, #0]
 801f6a8:	e008      	b.n	801f6bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801f6aa:	4b0c      	ldr	r3, [pc, #48]	; (801f6dc <prvInsertBlockIntoFreeList+0xb0>)
 801f6ac:	681a      	ldr	r2, [r3, #0]
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	601a      	str	r2, [r3, #0]
 801f6b2:	e003      	b.n	801f6bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801f6b4:	68fb      	ldr	r3, [r7, #12]
 801f6b6:	681a      	ldr	r2, [r3, #0]
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801f6bc:	68fa      	ldr	r2, [r7, #12]
 801f6be:	687b      	ldr	r3, [r7, #4]
 801f6c0:	429a      	cmp	r2, r3
 801f6c2:	d002      	beq.n	801f6ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801f6c4:	68fb      	ldr	r3, [r7, #12]
 801f6c6:	687a      	ldr	r2, [r7, #4]
 801f6c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f6ca:	bf00      	nop
 801f6cc:	3714      	adds	r7, #20
 801f6ce:	46bd      	mov	sp, r7
 801f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6d4:	4770      	bx	lr
 801f6d6:	bf00      	nop
 801f6d8:	20026e30 	.word	0x20026e30
 801f6dc:	20026e38 	.word	0x20026e38

0801f6e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801f6e0:	b480      	push	{r7}
 801f6e2:	b083      	sub	sp, #12
 801f6e4:	af00      	add	r7, sp, #0
 801f6e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	f103 0208 	add.w	r2, r3, #8
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801f6f2:	687b      	ldr	r3, [r7, #4]
 801f6f4:	f04f 32ff 	mov.w	r2, #4294967295
 801f6f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f6fa:	687b      	ldr	r3, [r7, #4]
 801f6fc:	f103 0208 	add.w	r2, r3, #8
 801f700:	687b      	ldr	r3, [r7, #4]
 801f702:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f704:	687b      	ldr	r3, [r7, #4]
 801f706:	f103 0208 	add.w	r2, r3, #8
 801f70a:	687b      	ldr	r3, [r7, #4]
 801f70c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801f70e:	687b      	ldr	r3, [r7, #4]
 801f710:	2200      	movs	r2, #0
 801f712:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801f714:	bf00      	nop
 801f716:	370c      	adds	r7, #12
 801f718:	46bd      	mov	sp, r7
 801f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f71e:	4770      	bx	lr

0801f720 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801f720:	b480      	push	{r7}
 801f722:	b083      	sub	sp, #12
 801f724:	af00      	add	r7, sp, #0
 801f726:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801f728:	687b      	ldr	r3, [r7, #4]
 801f72a:	2200      	movs	r2, #0
 801f72c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801f72e:	bf00      	nop
 801f730:	370c      	adds	r7, #12
 801f732:	46bd      	mov	sp, r7
 801f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f738:	4770      	bx	lr

0801f73a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801f73a:	b480      	push	{r7}
 801f73c:	b085      	sub	sp, #20
 801f73e:	af00      	add	r7, sp, #0
 801f740:	6078      	str	r0, [r7, #4]
 801f742:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801f744:	687b      	ldr	r3, [r7, #4]
 801f746:	685b      	ldr	r3, [r3, #4]
 801f748:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801f74a:	683b      	ldr	r3, [r7, #0]
 801f74c:	68fa      	ldr	r2, [r7, #12]
 801f74e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801f750:	68fb      	ldr	r3, [r7, #12]
 801f752:	689a      	ldr	r2, [r3, #8]
 801f754:	683b      	ldr	r3, [r7, #0]
 801f756:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801f758:	68fb      	ldr	r3, [r7, #12]
 801f75a:	689b      	ldr	r3, [r3, #8]
 801f75c:	683a      	ldr	r2, [r7, #0]
 801f75e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801f760:	68fb      	ldr	r3, [r7, #12]
 801f762:	683a      	ldr	r2, [r7, #0]
 801f764:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801f766:	683b      	ldr	r3, [r7, #0]
 801f768:	687a      	ldr	r2, [r7, #4]
 801f76a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	1c5a      	adds	r2, r3, #1
 801f772:	687b      	ldr	r3, [r7, #4]
 801f774:	601a      	str	r2, [r3, #0]
}
 801f776:	bf00      	nop
 801f778:	3714      	adds	r7, #20
 801f77a:	46bd      	mov	sp, r7
 801f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f780:	4770      	bx	lr

0801f782 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801f782:	b480      	push	{r7}
 801f784:	b085      	sub	sp, #20
 801f786:	af00      	add	r7, sp, #0
 801f788:	6078      	str	r0, [r7, #4]
 801f78a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801f78c:	683b      	ldr	r3, [r7, #0]
 801f78e:	681b      	ldr	r3, [r3, #0]
 801f790:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801f792:	68bb      	ldr	r3, [r7, #8]
 801f794:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f798:	d103      	bne.n	801f7a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801f79a:	687b      	ldr	r3, [r7, #4]
 801f79c:	691b      	ldr	r3, [r3, #16]
 801f79e:	60fb      	str	r3, [r7, #12]
 801f7a0:	e00c      	b.n	801f7bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f7a2:	687b      	ldr	r3, [r7, #4]
 801f7a4:	3308      	adds	r3, #8
 801f7a6:	60fb      	str	r3, [r7, #12]
 801f7a8:	e002      	b.n	801f7b0 <vListInsert+0x2e>
 801f7aa:	68fb      	ldr	r3, [r7, #12]
 801f7ac:	685b      	ldr	r3, [r3, #4]
 801f7ae:	60fb      	str	r3, [r7, #12]
 801f7b0:	68fb      	ldr	r3, [r7, #12]
 801f7b2:	685b      	ldr	r3, [r3, #4]
 801f7b4:	681b      	ldr	r3, [r3, #0]
 801f7b6:	68ba      	ldr	r2, [r7, #8]
 801f7b8:	429a      	cmp	r2, r3
 801f7ba:	d2f6      	bcs.n	801f7aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801f7bc:	68fb      	ldr	r3, [r7, #12]
 801f7be:	685a      	ldr	r2, [r3, #4]
 801f7c0:	683b      	ldr	r3, [r7, #0]
 801f7c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801f7c4:	683b      	ldr	r3, [r7, #0]
 801f7c6:	685b      	ldr	r3, [r3, #4]
 801f7c8:	683a      	ldr	r2, [r7, #0]
 801f7ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801f7cc:	683b      	ldr	r3, [r7, #0]
 801f7ce:	68fa      	ldr	r2, [r7, #12]
 801f7d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801f7d2:	68fb      	ldr	r3, [r7, #12]
 801f7d4:	683a      	ldr	r2, [r7, #0]
 801f7d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801f7d8:	683b      	ldr	r3, [r7, #0]
 801f7da:	687a      	ldr	r2, [r7, #4]
 801f7dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	681b      	ldr	r3, [r3, #0]
 801f7e2:	1c5a      	adds	r2, r3, #1
 801f7e4:	687b      	ldr	r3, [r7, #4]
 801f7e6:	601a      	str	r2, [r3, #0]
}
 801f7e8:	bf00      	nop
 801f7ea:	3714      	adds	r7, #20
 801f7ec:	46bd      	mov	sp, r7
 801f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7f2:	4770      	bx	lr

0801f7f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801f7f4:	b480      	push	{r7}
 801f7f6:	b085      	sub	sp, #20
 801f7f8:	af00      	add	r7, sp, #0
 801f7fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801f7fc:	687b      	ldr	r3, [r7, #4]
 801f7fe:	691b      	ldr	r3, [r3, #16]
 801f800:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	685b      	ldr	r3, [r3, #4]
 801f806:	687a      	ldr	r2, [r7, #4]
 801f808:	6892      	ldr	r2, [r2, #8]
 801f80a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	689b      	ldr	r3, [r3, #8]
 801f810:	687a      	ldr	r2, [r7, #4]
 801f812:	6852      	ldr	r2, [r2, #4]
 801f814:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801f816:	68fb      	ldr	r3, [r7, #12]
 801f818:	685b      	ldr	r3, [r3, #4]
 801f81a:	687a      	ldr	r2, [r7, #4]
 801f81c:	429a      	cmp	r2, r3
 801f81e:	d103      	bne.n	801f828 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801f820:	687b      	ldr	r3, [r7, #4]
 801f822:	689a      	ldr	r2, [r3, #8]
 801f824:	68fb      	ldr	r3, [r7, #12]
 801f826:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801f828:	687b      	ldr	r3, [r7, #4]
 801f82a:	2200      	movs	r2, #0
 801f82c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801f82e:	68fb      	ldr	r3, [r7, #12]
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	1e5a      	subs	r2, r3, #1
 801f834:	68fb      	ldr	r3, [r7, #12]
 801f836:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801f838:	68fb      	ldr	r3, [r7, #12]
 801f83a:	681b      	ldr	r3, [r3, #0]
}
 801f83c:	4618      	mov	r0, r3
 801f83e:	3714      	adds	r7, #20
 801f840:	46bd      	mov	sp, r7
 801f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f846:	4770      	bx	lr

0801f848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801f848:	b480      	push	{r7}
 801f84a:	b085      	sub	sp, #20
 801f84c:	af00      	add	r7, sp, #0
 801f84e:	60f8      	str	r0, [r7, #12]
 801f850:	60b9      	str	r1, [r7, #8]
 801f852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801f854:	68fb      	ldr	r3, [r7, #12]
 801f856:	3b04      	subs	r3, #4
 801f858:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801f85a:	68fb      	ldr	r3, [r7, #12]
 801f85c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801f860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801f862:	68fb      	ldr	r3, [r7, #12]
 801f864:	3b04      	subs	r3, #4
 801f866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801f868:	68bb      	ldr	r3, [r7, #8]
 801f86a:	f023 0201 	bic.w	r2, r3, #1
 801f86e:	68fb      	ldr	r3, [r7, #12]
 801f870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801f872:	68fb      	ldr	r3, [r7, #12]
 801f874:	3b04      	subs	r3, #4
 801f876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801f878:	4a0c      	ldr	r2, [pc, #48]	; (801f8ac <pxPortInitialiseStack+0x64>)
 801f87a:	68fb      	ldr	r3, [r7, #12]
 801f87c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801f87e:	68fb      	ldr	r3, [r7, #12]
 801f880:	3b14      	subs	r3, #20
 801f882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801f884:	687a      	ldr	r2, [r7, #4]
 801f886:	68fb      	ldr	r3, [r7, #12]
 801f888:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801f88a:	68fb      	ldr	r3, [r7, #12]
 801f88c:	3b04      	subs	r3, #4
 801f88e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801f890:	68fb      	ldr	r3, [r7, #12]
 801f892:	f06f 0202 	mvn.w	r2, #2
 801f896:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801f898:	68fb      	ldr	r3, [r7, #12]
 801f89a:	3b20      	subs	r3, #32
 801f89c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801f89e:	68fb      	ldr	r3, [r7, #12]
}
 801f8a0:	4618      	mov	r0, r3
 801f8a2:	3714      	adds	r7, #20
 801f8a4:	46bd      	mov	sp, r7
 801f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8aa:	4770      	bx	lr
 801f8ac:	0801f8b1 	.word	0x0801f8b1

0801f8b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801f8b0:	b480      	push	{r7}
 801f8b2:	b085      	sub	sp, #20
 801f8b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801f8b6:	2300      	movs	r3, #0
 801f8b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801f8ba:	4b11      	ldr	r3, [pc, #68]	; (801f900 <prvTaskExitError+0x50>)
 801f8bc:	681b      	ldr	r3, [r3, #0]
 801f8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f8c2:	d009      	beq.n	801f8d8 <prvTaskExitError+0x28>
 801f8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f8c8:	f383 8811 	msr	BASEPRI, r3
 801f8cc:	f3bf 8f6f 	isb	sy
 801f8d0:	f3bf 8f4f 	dsb	sy
 801f8d4:	60fb      	str	r3, [r7, #12]
 801f8d6:	e7fe      	b.n	801f8d6 <prvTaskExitError+0x26>
 801f8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f8dc:	f383 8811 	msr	BASEPRI, r3
 801f8e0:	f3bf 8f6f 	isb	sy
 801f8e4:	f3bf 8f4f 	dsb	sy
 801f8e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801f8ea:	bf00      	nop
 801f8ec:	687b      	ldr	r3, [r7, #4]
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	d0fc      	beq.n	801f8ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801f8f2:	bf00      	nop
 801f8f4:	3714      	adds	r7, #20
 801f8f6:	46bd      	mov	sp, r7
 801f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8fc:	4770      	bx	lr
 801f8fe:	bf00      	nop
 801f900:	20000084 	.word	0x20000084
	...

0801f910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801f910:	4b07      	ldr	r3, [pc, #28]	; (801f930 <pxCurrentTCBConst2>)
 801f912:	6819      	ldr	r1, [r3, #0]
 801f914:	6808      	ldr	r0, [r1, #0]
 801f916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f91a:	f380 8809 	msr	PSP, r0
 801f91e:	f3bf 8f6f 	isb	sy
 801f922:	f04f 0000 	mov.w	r0, #0
 801f926:	f380 8811 	msr	BASEPRI, r0
 801f92a:	4770      	bx	lr
 801f92c:	f3af 8000 	nop.w

0801f930 <pxCurrentTCBConst2>:
 801f930:	20026e50 	.word	0x20026e50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801f934:	bf00      	nop
 801f936:	bf00      	nop

0801f938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801f938:	4808      	ldr	r0, [pc, #32]	; (801f95c <prvPortStartFirstTask+0x24>)
 801f93a:	6800      	ldr	r0, [r0, #0]
 801f93c:	6800      	ldr	r0, [r0, #0]
 801f93e:	f380 8808 	msr	MSP, r0
 801f942:	f04f 0000 	mov.w	r0, #0
 801f946:	f380 8814 	msr	CONTROL, r0
 801f94a:	b662      	cpsie	i
 801f94c:	b661      	cpsie	f
 801f94e:	f3bf 8f4f 	dsb	sy
 801f952:	f3bf 8f6f 	isb	sy
 801f956:	df00      	svc	0
 801f958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801f95a:	bf00      	nop
 801f95c:	e000ed08 	.word	0xe000ed08

0801f960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801f960:	b580      	push	{r7, lr}
 801f962:	b086      	sub	sp, #24
 801f964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801f966:	4b44      	ldr	r3, [pc, #272]	; (801fa78 <xPortStartScheduler+0x118>)
 801f968:	681b      	ldr	r3, [r3, #0]
 801f96a:	4a44      	ldr	r2, [pc, #272]	; (801fa7c <xPortStartScheduler+0x11c>)
 801f96c:	4293      	cmp	r3, r2
 801f96e:	d109      	bne.n	801f984 <xPortStartScheduler+0x24>
 801f970:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f974:	f383 8811 	msr	BASEPRI, r3
 801f978:	f3bf 8f6f 	isb	sy
 801f97c:	f3bf 8f4f 	dsb	sy
 801f980:	613b      	str	r3, [r7, #16]
 801f982:	e7fe      	b.n	801f982 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801f984:	4b3c      	ldr	r3, [pc, #240]	; (801fa78 <xPortStartScheduler+0x118>)
 801f986:	681b      	ldr	r3, [r3, #0]
 801f988:	4a3d      	ldr	r2, [pc, #244]	; (801fa80 <xPortStartScheduler+0x120>)
 801f98a:	4293      	cmp	r3, r2
 801f98c:	d109      	bne.n	801f9a2 <xPortStartScheduler+0x42>
 801f98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f992:	f383 8811 	msr	BASEPRI, r3
 801f996:	f3bf 8f6f 	isb	sy
 801f99a:	f3bf 8f4f 	dsb	sy
 801f99e:	60fb      	str	r3, [r7, #12]
 801f9a0:	e7fe      	b.n	801f9a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801f9a2:	4b38      	ldr	r3, [pc, #224]	; (801fa84 <xPortStartScheduler+0x124>)
 801f9a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801f9a6:	697b      	ldr	r3, [r7, #20]
 801f9a8:	781b      	ldrb	r3, [r3, #0]
 801f9aa:	b2db      	uxtb	r3, r3
 801f9ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801f9ae:	697b      	ldr	r3, [r7, #20]
 801f9b0:	22ff      	movs	r2, #255	; 0xff
 801f9b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801f9b4:	697b      	ldr	r3, [r7, #20]
 801f9b6:	781b      	ldrb	r3, [r3, #0]
 801f9b8:	b2db      	uxtb	r3, r3
 801f9ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801f9bc:	78fb      	ldrb	r3, [r7, #3]
 801f9be:	b2db      	uxtb	r3, r3
 801f9c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801f9c4:	b2da      	uxtb	r2, r3
 801f9c6:	4b30      	ldr	r3, [pc, #192]	; (801fa88 <xPortStartScheduler+0x128>)
 801f9c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801f9ca:	4b30      	ldr	r3, [pc, #192]	; (801fa8c <xPortStartScheduler+0x12c>)
 801f9cc:	2207      	movs	r2, #7
 801f9ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801f9d0:	e009      	b.n	801f9e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 801f9d2:	4b2e      	ldr	r3, [pc, #184]	; (801fa8c <xPortStartScheduler+0x12c>)
 801f9d4:	681b      	ldr	r3, [r3, #0]
 801f9d6:	3b01      	subs	r3, #1
 801f9d8:	4a2c      	ldr	r2, [pc, #176]	; (801fa8c <xPortStartScheduler+0x12c>)
 801f9da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801f9dc:	78fb      	ldrb	r3, [r7, #3]
 801f9de:	b2db      	uxtb	r3, r3
 801f9e0:	005b      	lsls	r3, r3, #1
 801f9e2:	b2db      	uxtb	r3, r3
 801f9e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801f9e6:	78fb      	ldrb	r3, [r7, #3]
 801f9e8:	b2db      	uxtb	r3, r3
 801f9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f9ee:	2b80      	cmp	r3, #128	; 0x80
 801f9f0:	d0ef      	beq.n	801f9d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801f9f2:	4b26      	ldr	r3, [pc, #152]	; (801fa8c <xPortStartScheduler+0x12c>)
 801f9f4:	681b      	ldr	r3, [r3, #0]
 801f9f6:	f1c3 0307 	rsb	r3, r3, #7
 801f9fa:	2b04      	cmp	r3, #4
 801f9fc:	d009      	beq.n	801fa12 <xPortStartScheduler+0xb2>
 801f9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fa02:	f383 8811 	msr	BASEPRI, r3
 801fa06:	f3bf 8f6f 	isb	sy
 801fa0a:	f3bf 8f4f 	dsb	sy
 801fa0e:	60bb      	str	r3, [r7, #8]
 801fa10:	e7fe      	b.n	801fa10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801fa12:	4b1e      	ldr	r3, [pc, #120]	; (801fa8c <xPortStartScheduler+0x12c>)
 801fa14:	681b      	ldr	r3, [r3, #0]
 801fa16:	021b      	lsls	r3, r3, #8
 801fa18:	4a1c      	ldr	r2, [pc, #112]	; (801fa8c <xPortStartScheduler+0x12c>)
 801fa1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801fa1c:	4b1b      	ldr	r3, [pc, #108]	; (801fa8c <xPortStartScheduler+0x12c>)
 801fa1e:	681b      	ldr	r3, [r3, #0]
 801fa20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801fa24:	4a19      	ldr	r2, [pc, #100]	; (801fa8c <xPortStartScheduler+0x12c>)
 801fa26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	b2da      	uxtb	r2, r3
 801fa2c:	697b      	ldr	r3, [r7, #20]
 801fa2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801fa30:	4b17      	ldr	r3, [pc, #92]	; (801fa90 <xPortStartScheduler+0x130>)
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	4a16      	ldr	r2, [pc, #88]	; (801fa90 <xPortStartScheduler+0x130>)
 801fa36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801fa3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801fa3c:	4b14      	ldr	r3, [pc, #80]	; (801fa90 <xPortStartScheduler+0x130>)
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	4a13      	ldr	r2, [pc, #76]	; (801fa90 <xPortStartScheduler+0x130>)
 801fa42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801fa46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801fa48:	f7f2 fc44 	bl	80122d4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801fa4c:	4b11      	ldr	r3, [pc, #68]	; (801fa94 <xPortStartScheduler+0x134>)
 801fa4e:	2200      	movs	r2, #0
 801fa50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801fa52:	f000 f8d1 	bl	801fbf8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801fa56:	4b10      	ldr	r3, [pc, #64]	; (801fa98 <xPortStartScheduler+0x138>)
 801fa58:	681b      	ldr	r3, [r3, #0]
 801fa5a:	4a0f      	ldr	r2, [pc, #60]	; (801fa98 <xPortStartScheduler+0x138>)
 801fa5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801fa60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801fa62:	f7ff ff69 	bl	801f938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801fa66:	f001 fdc1 	bl	80215ec <vTaskSwitchContext>
	prvTaskExitError();
 801fa6a:	f7ff ff21 	bl	801f8b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801fa6e:	2300      	movs	r3, #0
}
 801fa70:	4618      	mov	r0, r3
 801fa72:	3718      	adds	r7, #24
 801fa74:	46bd      	mov	sp, r7
 801fa76:	bd80      	pop	{r7, pc}
 801fa78:	e000ed00 	.word	0xe000ed00
 801fa7c:	410fc271 	.word	0x410fc271
 801fa80:	410fc270 	.word	0x410fc270
 801fa84:	e000e400 	.word	0xe000e400
 801fa88:	20026e48 	.word	0x20026e48
 801fa8c:	20026e4c 	.word	0x20026e4c
 801fa90:	e000ed20 	.word	0xe000ed20
 801fa94:	20000084 	.word	0x20000084
 801fa98:	e000ef34 	.word	0xe000ef34

0801fa9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801fa9c:	b480      	push	{r7}
 801fa9e:	b083      	sub	sp, #12
 801faa0:	af00      	add	r7, sp, #0
 801faa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801faa6:	f383 8811 	msr	BASEPRI, r3
 801faaa:	f3bf 8f6f 	isb	sy
 801faae:	f3bf 8f4f 	dsb	sy
 801fab2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801fab4:	4b0e      	ldr	r3, [pc, #56]	; (801faf0 <vPortEnterCritical+0x54>)
 801fab6:	681b      	ldr	r3, [r3, #0]
 801fab8:	3301      	adds	r3, #1
 801faba:	4a0d      	ldr	r2, [pc, #52]	; (801faf0 <vPortEnterCritical+0x54>)
 801fabc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801fabe:	4b0c      	ldr	r3, [pc, #48]	; (801faf0 <vPortEnterCritical+0x54>)
 801fac0:	681b      	ldr	r3, [r3, #0]
 801fac2:	2b01      	cmp	r3, #1
 801fac4:	d10e      	bne.n	801fae4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801fac6:	4b0b      	ldr	r3, [pc, #44]	; (801faf4 <vPortEnterCritical+0x58>)
 801fac8:	681b      	ldr	r3, [r3, #0]
 801faca:	b2db      	uxtb	r3, r3
 801facc:	2b00      	cmp	r3, #0
 801face:	d009      	beq.n	801fae4 <vPortEnterCritical+0x48>
 801fad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fad4:	f383 8811 	msr	BASEPRI, r3
 801fad8:	f3bf 8f6f 	isb	sy
 801fadc:	f3bf 8f4f 	dsb	sy
 801fae0:	603b      	str	r3, [r7, #0]
 801fae2:	e7fe      	b.n	801fae2 <vPortEnterCritical+0x46>
	}
}
 801fae4:	bf00      	nop
 801fae6:	370c      	adds	r7, #12
 801fae8:	46bd      	mov	sp, r7
 801faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faee:	4770      	bx	lr
 801faf0:	20000084 	.word	0x20000084
 801faf4:	e000ed04 	.word	0xe000ed04

0801faf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801faf8:	b480      	push	{r7}
 801fafa:	b083      	sub	sp, #12
 801fafc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801fafe:	4b11      	ldr	r3, [pc, #68]	; (801fb44 <vPortExitCritical+0x4c>)
 801fb00:	681b      	ldr	r3, [r3, #0]
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	d109      	bne.n	801fb1a <vPortExitCritical+0x22>
 801fb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fb0a:	f383 8811 	msr	BASEPRI, r3
 801fb0e:	f3bf 8f6f 	isb	sy
 801fb12:	f3bf 8f4f 	dsb	sy
 801fb16:	607b      	str	r3, [r7, #4]
 801fb18:	e7fe      	b.n	801fb18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801fb1a:	4b0a      	ldr	r3, [pc, #40]	; (801fb44 <vPortExitCritical+0x4c>)
 801fb1c:	681b      	ldr	r3, [r3, #0]
 801fb1e:	3b01      	subs	r3, #1
 801fb20:	4a08      	ldr	r2, [pc, #32]	; (801fb44 <vPortExitCritical+0x4c>)
 801fb22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801fb24:	4b07      	ldr	r3, [pc, #28]	; (801fb44 <vPortExitCritical+0x4c>)
 801fb26:	681b      	ldr	r3, [r3, #0]
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	d104      	bne.n	801fb36 <vPortExitCritical+0x3e>
 801fb2c:	2300      	movs	r3, #0
 801fb2e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801fb30:	683b      	ldr	r3, [r7, #0]
 801fb32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801fb36:	bf00      	nop
 801fb38:	370c      	adds	r7, #12
 801fb3a:	46bd      	mov	sp, r7
 801fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb40:	4770      	bx	lr
 801fb42:	bf00      	nop
 801fb44:	20000084 	.word	0x20000084
	...

0801fb50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801fb50:	f3ef 8009 	mrs	r0, PSP
 801fb54:	f3bf 8f6f 	isb	sy
 801fb58:	4b15      	ldr	r3, [pc, #84]	; (801fbb0 <pxCurrentTCBConst>)
 801fb5a:	681a      	ldr	r2, [r3, #0]
 801fb5c:	f01e 0f10 	tst.w	lr, #16
 801fb60:	bf08      	it	eq
 801fb62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801fb66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb6a:	6010      	str	r0, [r2, #0]
 801fb6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801fb70:	f04f 0050 	mov.w	r0, #80	; 0x50
 801fb74:	f380 8811 	msr	BASEPRI, r0
 801fb78:	f3bf 8f4f 	dsb	sy
 801fb7c:	f3bf 8f6f 	isb	sy
 801fb80:	f001 fd34 	bl	80215ec <vTaskSwitchContext>
 801fb84:	f04f 0000 	mov.w	r0, #0
 801fb88:	f380 8811 	msr	BASEPRI, r0
 801fb8c:	bc09      	pop	{r0, r3}
 801fb8e:	6819      	ldr	r1, [r3, #0]
 801fb90:	6808      	ldr	r0, [r1, #0]
 801fb92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb96:	f01e 0f10 	tst.w	lr, #16
 801fb9a:	bf08      	it	eq
 801fb9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801fba0:	f380 8809 	msr	PSP, r0
 801fba4:	f3bf 8f6f 	isb	sy
 801fba8:	4770      	bx	lr
 801fbaa:	bf00      	nop
 801fbac:	f3af 8000 	nop.w

0801fbb0 <pxCurrentTCBConst>:
 801fbb0:	20026e50 	.word	0x20026e50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801fbb4:	bf00      	nop
 801fbb6:	bf00      	nop

0801fbb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801fbb8:	b580      	push	{r7, lr}
 801fbba:	b082      	sub	sp, #8
 801fbbc:	af00      	add	r7, sp, #0
	__asm volatile
 801fbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fbc2:	f383 8811 	msr	BASEPRI, r3
 801fbc6:	f3bf 8f6f 	isb	sy
 801fbca:	f3bf 8f4f 	dsb	sy
 801fbce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801fbd0:	f001 fc46 	bl	8021460 <xTaskIncrementTick>
 801fbd4:	4603      	mov	r3, r0
 801fbd6:	2b00      	cmp	r3, #0
 801fbd8:	d003      	beq.n	801fbe2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801fbda:	4b06      	ldr	r3, [pc, #24]	; (801fbf4 <SysTick_Handler+0x3c>)
 801fbdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fbe0:	601a      	str	r2, [r3, #0]
 801fbe2:	2300      	movs	r3, #0
 801fbe4:	603b      	str	r3, [r7, #0]
	__asm volatile
 801fbe6:	683b      	ldr	r3, [r7, #0]
 801fbe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801fbec:	bf00      	nop
 801fbee:	3708      	adds	r7, #8
 801fbf0:	46bd      	mov	sp, r7
 801fbf2:	bd80      	pop	{r7, pc}
 801fbf4:	e000ed04 	.word	0xe000ed04

0801fbf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801fbf8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801fc08 <vPortEnableVFP+0x10>
 801fbfc:	6801      	ldr	r1, [r0, #0]
 801fbfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801fc02:	6001      	str	r1, [r0, #0]
 801fc04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801fc06:	bf00      	nop
 801fc08:	e000ed88 	.word	0xe000ed88

0801fc0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801fc0c:	b480      	push	{r7}
 801fc0e:	b085      	sub	sp, #20
 801fc10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801fc12:	f3ef 8305 	mrs	r3, IPSR
 801fc16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801fc18:	68fb      	ldr	r3, [r7, #12]
 801fc1a:	2b0f      	cmp	r3, #15
 801fc1c:	d913      	bls.n	801fc46 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801fc1e:	4a16      	ldr	r2, [pc, #88]	; (801fc78 <vPortValidateInterruptPriority+0x6c>)
 801fc20:	68fb      	ldr	r3, [r7, #12]
 801fc22:	4413      	add	r3, r2
 801fc24:	781b      	ldrb	r3, [r3, #0]
 801fc26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801fc28:	4b14      	ldr	r3, [pc, #80]	; (801fc7c <vPortValidateInterruptPriority+0x70>)
 801fc2a:	781b      	ldrb	r3, [r3, #0]
 801fc2c:	7afa      	ldrb	r2, [r7, #11]
 801fc2e:	429a      	cmp	r2, r3
 801fc30:	d209      	bcs.n	801fc46 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801fc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fc36:	f383 8811 	msr	BASEPRI, r3
 801fc3a:	f3bf 8f6f 	isb	sy
 801fc3e:	f3bf 8f4f 	dsb	sy
 801fc42:	607b      	str	r3, [r7, #4]
 801fc44:	e7fe      	b.n	801fc44 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801fc46:	4b0e      	ldr	r3, [pc, #56]	; (801fc80 <vPortValidateInterruptPriority+0x74>)
 801fc48:	681b      	ldr	r3, [r3, #0]
 801fc4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801fc4e:	4b0d      	ldr	r3, [pc, #52]	; (801fc84 <vPortValidateInterruptPriority+0x78>)
 801fc50:	681b      	ldr	r3, [r3, #0]
 801fc52:	429a      	cmp	r2, r3
 801fc54:	d909      	bls.n	801fc6a <vPortValidateInterruptPriority+0x5e>
 801fc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fc5a:	f383 8811 	msr	BASEPRI, r3
 801fc5e:	f3bf 8f6f 	isb	sy
 801fc62:	f3bf 8f4f 	dsb	sy
 801fc66:	603b      	str	r3, [r7, #0]
 801fc68:	e7fe      	b.n	801fc68 <vPortValidateInterruptPriority+0x5c>
	}
 801fc6a:	bf00      	nop
 801fc6c:	3714      	adds	r7, #20
 801fc6e:	46bd      	mov	sp, r7
 801fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc74:	4770      	bx	lr
 801fc76:	bf00      	nop
 801fc78:	e000e3f0 	.word	0xe000e3f0
 801fc7c:	20026e48 	.word	0x20026e48
 801fc80:	e000ed0c 	.word	0xe000ed0c
 801fc84:	20026e4c 	.word	0x20026e4c

0801fc88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801fc88:	b580      	push	{r7, lr}
 801fc8a:	b084      	sub	sp, #16
 801fc8c:	af00      	add	r7, sp, #0
 801fc8e:	6078      	str	r0, [r7, #4]
 801fc90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801fc92:	687b      	ldr	r3, [r7, #4]
 801fc94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801fc96:	68fb      	ldr	r3, [r7, #12]
 801fc98:	2b00      	cmp	r3, #0
 801fc9a:	d109      	bne.n	801fcb0 <xQueueGenericReset+0x28>
 801fc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fca0:	f383 8811 	msr	BASEPRI, r3
 801fca4:	f3bf 8f6f 	isb	sy
 801fca8:	f3bf 8f4f 	dsb	sy
 801fcac:	60bb      	str	r3, [r7, #8]
 801fcae:	e7fe      	b.n	801fcae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 801fcb0:	f7ff fef4 	bl	801fa9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801fcb4:	68fb      	ldr	r3, [r7, #12]
 801fcb6:	681a      	ldr	r2, [r3, #0]
 801fcb8:	68fb      	ldr	r3, [r7, #12]
 801fcba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fcbc:	68f9      	ldr	r1, [r7, #12]
 801fcbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801fcc0:	fb01 f303 	mul.w	r3, r1, r3
 801fcc4:	441a      	add	r2, r3
 801fcc6:	68fb      	ldr	r3, [r7, #12]
 801fcc8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801fcca:	68fb      	ldr	r3, [r7, #12]
 801fccc:	2200      	movs	r2, #0
 801fcce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801fcd0:	68fb      	ldr	r3, [r7, #12]
 801fcd2:	681a      	ldr	r2, [r3, #0]
 801fcd4:	68fb      	ldr	r3, [r7, #12]
 801fcd6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801fcd8:	68fb      	ldr	r3, [r7, #12]
 801fcda:	681a      	ldr	r2, [r3, #0]
 801fcdc:	68fb      	ldr	r3, [r7, #12]
 801fcde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fce0:	3b01      	subs	r3, #1
 801fce2:	68f9      	ldr	r1, [r7, #12]
 801fce4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801fce6:	fb01 f303 	mul.w	r3, r1, r3
 801fcea:	441a      	add	r2, r3
 801fcec:	68fb      	ldr	r3, [r7, #12]
 801fcee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801fcf0:	68fb      	ldr	r3, [r7, #12]
 801fcf2:	22ff      	movs	r2, #255	; 0xff
 801fcf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801fcf8:	68fb      	ldr	r3, [r7, #12]
 801fcfa:	22ff      	movs	r2, #255	; 0xff
 801fcfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801fd00:	683b      	ldr	r3, [r7, #0]
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d114      	bne.n	801fd30 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801fd06:	68fb      	ldr	r3, [r7, #12]
 801fd08:	691b      	ldr	r3, [r3, #16]
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	d01a      	beq.n	801fd44 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801fd0e:	68fb      	ldr	r3, [r7, #12]
 801fd10:	3310      	adds	r3, #16
 801fd12:	4618      	mov	r0, r3
 801fd14:	f001 fd40 	bl	8021798 <xTaskRemoveFromEventList>
 801fd18:	4603      	mov	r3, r0
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	d012      	beq.n	801fd44 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801fd1e:	4b0d      	ldr	r3, [pc, #52]	; (801fd54 <xQueueGenericReset+0xcc>)
 801fd20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fd24:	601a      	str	r2, [r3, #0]
 801fd26:	f3bf 8f4f 	dsb	sy
 801fd2a:	f3bf 8f6f 	isb	sy
 801fd2e:	e009      	b.n	801fd44 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801fd30:	68fb      	ldr	r3, [r7, #12]
 801fd32:	3310      	adds	r3, #16
 801fd34:	4618      	mov	r0, r3
 801fd36:	f7ff fcd3 	bl	801f6e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801fd3a:	68fb      	ldr	r3, [r7, #12]
 801fd3c:	3324      	adds	r3, #36	; 0x24
 801fd3e:	4618      	mov	r0, r3
 801fd40:	f7ff fcce 	bl	801f6e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801fd44:	f7ff fed8 	bl	801faf8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801fd48:	2301      	movs	r3, #1
}
 801fd4a:	4618      	mov	r0, r3
 801fd4c:	3710      	adds	r7, #16
 801fd4e:	46bd      	mov	sp, r7
 801fd50:	bd80      	pop	{r7, pc}
 801fd52:	bf00      	nop
 801fd54:	e000ed04 	.word	0xe000ed04

0801fd58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801fd58:	b580      	push	{r7, lr}
 801fd5a:	b08e      	sub	sp, #56	; 0x38
 801fd5c:	af02      	add	r7, sp, #8
 801fd5e:	60f8      	str	r0, [r7, #12]
 801fd60:	60b9      	str	r1, [r7, #8]
 801fd62:	607a      	str	r2, [r7, #4]
 801fd64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801fd66:	68fb      	ldr	r3, [r7, #12]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d109      	bne.n	801fd80 <xQueueGenericCreateStatic+0x28>
 801fd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fd70:	f383 8811 	msr	BASEPRI, r3
 801fd74:	f3bf 8f6f 	isb	sy
 801fd78:	f3bf 8f4f 	dsb	sy
 801fd7c:	62bb      	str	r3, [r7, #40]	; 0x28
 801fd7e:	e7fe      	b.n	801fd7e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801fd80:	683b      	ldr	r3, [r7, #0]
 801fd82:	2b00      	cmp	r3, #0
 801fd84:	d109      	bne.n	801fd9a <xQueueGenericCreateStatic+0x42>
 801fd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fd8a:	f383 8811 	msr	BASEPRI, r3
 801fd8e:	f3bf 8f6f 	isb	sy
 801fd92:	f3bf 8f4f 	dsb	sy
 801fd96:	627b      	str	r3, [r7, #36]	; 0x24
 801fd98:	e7fe      	b.n	801fd98 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	2b00      	cmp	r3, #0
 801fd9e:	d002      	beq.n	801fda6 <xQueueGenericCreateStatic+0x4e>
 801fda0:	68bb      	ldr	r3, [r7, #8]
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d001      	beq.n	801fdaa <xQueueGenericCreateStatic+0x52>
 801fda6:	2301      	movs	r3, #1
 801fda8:	e000      	b.n	801fdac <xQueueGenericCreateStatic+0x54>
 801fdaa:	2300      	movs	r3, #0
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d109      	bne.n	801fdc4 <xQueueGenericCreateStatic+0x6c>
 801fdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fdb4:	f383 8811 	msr	BASEPRI, r3
 801fdb8:	f3bf 8f6f 	isb	sy
 801fdbc:	f3bf 8f4f 	dsb	sy
 801fdc0:	623b      	str	r3, [r7, #32]
 801fdc2:	e7fe      	b.n	801fdc2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801fdc4:	687b      	ldr	r3, [r7, #4]
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	d102      	bne.n	801fdd0 <xQueueGenericCreateStatic+0x78>
 801fdca:	68bb      	ldr	r3, [r7, #8]
 801fdcc:	2b00      	cmp	r3, #0
 801fdce:	d101      	bne.n	801fdd4 <xQueueGenericCreateStatic+0x7c>
 801fdd0:	2301      	movs	r3, #1
 801fdd2:	e000      	b.n	801fdd6 <xQueueGenericCreateStatic+0x7e>
 801fdd4:	2300      	movs	r3, #0
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d109      	bne.n	801fdee <xQueueGenericCreateStatic+0x96>
 801fdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fdde:	f383 8811 	msr	BASEPRI, r3
 801fde2:	f3bf 8f6f 	isb	sy
 801fde6:	f3bf 8f4f 	dsb	sy
 801fdea:	61fb      	str	r3, [r7, #28]
 801fdec:	e7fe      	b.n	801fdec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801fdee:	2350      	movs	r3, #80	; 0x50
 801fdf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801fdf2:	697b      	ldr	r3, [r7, #20]
 801fdf4:	2b50      	cmp	r3, #80	; 0x50
 801fdf6:	d009      	beq.n	801fe0c <xQueueGenericCreateStatic+0xb4>
 801fdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fdfc:	f383 8811 	msr	BASEPRI, r3
 801fe00:	f3bf 8f6f 	isb	sy
 801fe04:	f3bf 8f4f 	dsb	sy
 801fe08:	61bb      	str	r3, [r7, #24]
 801fe0a:	e7fe      	b.n	801fe0a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801fe0c:	683b      	ldr	r3, [r7, #0]
 801fe0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801fe10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe12:	2b00      	cmp	r3, #0
 801fe14:	d00d      	beq.n	801fe32 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801fe16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe18:	2201      	movs	r2, #1
 801fe1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801fe1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801fe22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe24:	9300      	str	r3, [sp, #0]
 801fe26:	4613      	mov	r3, r2
 801fe28:	687a      	ldr	r2, [r7, #4]
 801fe2a:	68b9      	ldr	r1, [r7, #8]
 801fe2c:	68f8      	ldr	r0, [r7, #12]
 801fe2e:	f000 f842 	bl	801feb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801fe32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801fe34:	4618      	mov	r0, r3
 801fe36:	3730      	adds	r7, #48	; 0x30
 801fe38:	46bd      	mov	sp, r7
 801fe3a:	bd80      	pop	{r7, pc}

0801fe3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801fe3c:	b580      	push	{r7, lr}
 801fe3e:	b08a      	sub	sp, #40	; 0x28
 801fe40:	af02      	add	r7, sp, #8
 801fe42:	60f8      	str	r0, [r7, #12]
 801fe44:	60b9      	str	r1, [r7, #8]
 801fe46:	4613      	mov	r3, r2
 801fe48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801fe4a:	68fb      	ldr	r3, [r7, #12]
 801fe4c:	2b00      	cmp	r3, #0
 801fe4e:	d109      	bne.n	801fe64 <xQueueGenericCreate+0x28>
 801fe50:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fe54:	f383 8811 	msr	BASEPRI, r3
 801fe58:	f3bf 8f6f 	isb	sy
 801fe5c:	f3bf 8f4f 	dsb	sy
 801fe60:	613b      	str	r3, [r7, #16]
 801fe62:	e7fe      	b.n	801fe62 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801fe64:	68bb      	ldr	r3, [r7, #8]
 801fe66:	2b00      	cmp	r3, #0
 801fe68:	d102      	bne.n	801fe70 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801fe6a:	2300      	movs	r3, #0
 801fe6c:	61fb      	str	r3, [r7, #28]
 801fe6e:	e004      	b.n	801fe7a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801fe70:	68fb      	ldr	r3, [r7, #12]
 801fe72:	68ba      	ldr	r2, [r7, #8]
 801fe74:	fb02 f303 	mul.w	r3, r2, r3
 801fe78:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801fe7a:	69fb      	ldr	r3, [r7, #28]
 801fe7c:	3350      	adds	r3, #80	; 0x50
 801fe7e:	4618      	mov	r0, r3
 801fe80:	f7ff fa52 	bl	801f328 <pvPortMalloc>
 801fe84:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801fe86:	69bb      	ldr	r3, [r7, #24]
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d00f      	beq.n	801feac <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 801fe8c:	69bb      	ldr	r3, [r7, #24]
 801fe8e:	3350      	adds	r3, #80	; 0x50
 801fe90:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801fe92:	69bb      	ldr	r3, [r7, #24]
 801fe94:	2200      	movs	r2, #0
 801fe96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801fe9a:	79fa      	ldrb	r2, [r7, #7]
 801fe9c:	69bb      	ldr	r3, [r7, #24]
 801fe9e:	9300      	str	r3, [sp, #0]
 801fea0:	4613      	mov	r3, r2
 801fea2:	697a      	ldr	r2, [r7, #20]
 801fea4:	68b9      	ldr	r1, [r7, #8]
 801fea6:	68f8      	ldr	r0, [r7, #12]
 801fea8:	f000 f805 	bl	801feb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801feac:	69bb      	ldr	r3, [r7, #24]
	}
 801feae:	4618      	mov	r0, r3
 801feb0:	3720      	adds	r7, #32
 801feb2:	46bd      	mov	sp, r7
 801feb4:	bd80      	pop	{r7, pc}

0801feb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801feb6:	b580      	push	{r7, lr}
 801feb8:	b084      	sub	sp, #16
 801feba:	af00      	add	r7, sp, #0
 801febc:	60f8      	str	r0, [r7, #12]
 801febe:	60b9      	str	r1, [r7, #8]
 801fec0:	607a      	str	r2, [r7, #4]
 801fec2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801fec4:	68bb      	ldr	r3, [r7, #8]
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	d103      	bne.n	801fed2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801feca:	69bb      	ldr	r3, [r7, #24]
 801fecc:	69ba      	ldr	r2, [r7, #24]
 801fece:	601a      	str	r2, [r3, #0]
 801fed0:	e002      	b.n	801fed8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801fed2:	69bb      	ldr	r3, [r7, #24]
 801fed4:	687a      	ldr	r2, [r7, #4]
 801fed6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801fed8:	69bb      	ldr	r3, [r7, #24]
 801feda:	68fa      	ldr	r2, [r7, #12]
 801fedc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801fede:	69bb      	ldr	r3, [r7, #24]
 801fee0:	68ba      	ldr	r2, [r7, #8]
 801fee2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801fee4:	2101      	movs	r1, #1
 801fee6:	69b8      	ldr	r0, [r7, #24]
 801fee8:	f7ff fece 	bl	801fc88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801feec:	69bb      	ldr	r3, [r7, #24]
 801feee:	78fa      	ldrb	r2, [r7, #3]
 801fef0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801fef4:	bf00      	nop
 801fef6:	3710      	adds	r7, #16
 801fef8:	46bd      	mov	sp, r7
 801fefa:	bd80      	pop	{r7, pc}

0801fefc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801fefc:	b580      	push	{r7, lr}
 801fefe:	b082      	sub	sp, #8
 801ff00:	af00      	add	r7, sp, #0
 801ff02:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d00e      	beq.n	801ff28 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 801ff0a:	687b      	ldr	r3, [r7, #4]
 801ff0c:	2200      	movs	r2, #0
 801ff0e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	2200      	movs	r2, #0
 801ff14:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 801ff16:	687b      	ldr	r3, [r7, #4]
 801ff18:	2200      	movs	r2, #0
 801ff1a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801ff1c:	2300      	movs	r3, #0
 801ff1e:	2200      	movs	r2, #0
 801ff20:	2100      	movs	r1, #0
 801ff22:	6878      	ldr	r0, [r7, #4]
 801ff24:	f000 f906 	bl	8020134 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801ff28:	bf00      	nop
 801ff2a:	3708      	adds	r7, #8
 801ff2c:	46bd      	mov	sp, r7
 801ff2e:	bd80      	pop	{r7, pc}

0801ff30 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801ff30:	b580      	push	{r7, lr}
 801ff32:	b086      	sub	sp, #24
 801ff34:	af00      	add	r7, sp, #0
 801ff36:	4603      	mov	r3, r0
 801ff38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801ff3a:	2301      	movs	r3, #1
 801ff3c:	617b      	str	r3, [r7, #20]
 801ff3e:	2300      	movs	r3, #0
 801ff40:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801ff42:	79fb      	ldrb	r3, [r7, #7]
 801ff44:	461a      	mov	r2, r3
 801ff46:	6939      	ldr	r1, [r7, #16]
 801ff48:	6978      	ldr	r0, [r7, #20]
 801ff4a:	f7ff ff77 	bl	801fe3c <xQueueGenericCreate>
 801ff4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 801ff50:	68f8      	ldr	r0, [r7, #12]
 801ff52:	f7ff ffd3 	bl	801fefc <prvInitialiseMutex>

		return pxNewQueue;
 801ff56:	68fb      	ldr	r3, [r7, #12]
	}
 801ff58:	4618      	mov	r0, r3
 801ff5a:	3718      	adds	r7, #24
 801ff5c:	46bd      	mov	sp, r7
 801ff5e:	bd80      	pop	{r7, pc}

0801ff60 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801ff60:	b580      	push	{r7, lr}
 801ff62:	b088      	sub	sp, #32
 801ff64:	af02      	add	r7, sp, #8
 801ff66:	4603      	mov	r3, r0
 801ff68:	6039      	str	r1, [r7, #0]
 801ff6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801ff6c:	2301      	movs	r3, #1
 801ff6e:	617b      	str	r3, [r7, #20]
 801ff70:	2300      	movs	r3, #0
 801ff72:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801ff74:	79fb      	ldrb	r3, [r7, #7]
 801ff76:	9300      	str	r3, [sp, #0]
 801ff78:	683b      	ldr	r3, [r7, #0]
 801ff7a:	2200      	movs	r2, #0
 801ff7c:	6939      	ldr	r1, [r7, #16]
 801ff7e:	6978      	ldr	r0, [r7, #20]
 801ff80:	f7ff feea 	bl	801fd58 <xQueueGenericCreateStatic>
 801ff84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 801ff86:	68f8      	ldr	r0, [r7, #12]
 801ff88:	f7ff ffb8 	bl	801fefc <prvInitialiseMutex>

		return pxNewQueue;
 801ff8c:	68fb      	ldr	r3, [r7, #12]
	}
 801ff8e:	4618      	mov	r0, r3
 801ff90:	3718      	adds	r7, #24
 801ff92:	46bd      	mov	sp, r7
 801ff94:	bd80      	pop	{r7, pc}

0801ff96 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801ff96:	b590      	push	{r4, r7, lr}
 801ff98:	b087      	sub	sp, #28
 801ff9a:	af00      	add	r7, sp, #0
 801ff9c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801ff9e:	687b      	ldr	r3, [r7, #4]
 801ffa0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801ffa2:	693b      	ldr	r3, [r7, #16]
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	d109      	bne.n	801ffbc <xQueueGiveMutexRecursive+0x26>
 801ffa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ffac:	f383 8811 	msr	BASEPRI, r3
 801ffb0:	f3bf 8f6f 	isb	sy
 801ffb4:	f3bf 8f4f 	dsb	sy
 801ffb8:	60fb      	str	r3, [r7, #12]
 801ffba:	e7fe      	b.n	801ffba <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 801ffbc:	693b      	ldr	r3, [r7, #16]
 801ffbe:	685c      	ldr	r4, [r3, #4]
 801ffc0:	f001 fdfc 	bl	8021bbc <xTaskGetCurrentTaskHandle>
 801ffc4:	4603      	mov	r3, r0
 801ffc6:	429c      	cmp	r4, r3
 801ffc8:	d111      	bne.n	801ffee <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 801ffca:	693b      	ldr	r3, [r7, #16]
 801ffcc:	68db      	ldr	r3, [r3, #12]
 801ffce:	1e5a      	subs	r2, r3, #1
 801ffd0:	693b      	ldr	r3, [r7, #16]
 801ffd2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801ffd4:	693b      	ldr	r3, [r7, #16]
 801ffd6:	68db      	ldr	r3, [r3, #12]
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	d105      	bne.n	801ffe8 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801ffdc:	2300      	movs	r3, #0
 801ffde:	2200      	movs	r2, #0
 801ffe0:	2100      	movs	r1, #0
 801ffe2:	6938      	ldr	r0, [r7, #16]
 801ffe4:	f000 f8a6 	bl	8020134 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801ffe8:	2301      	movs	r3, #1
 801ffea:	617b      	str	r3, [r7, #20]
 801ffec:	e001      	b.n	801fff2 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801ffee:	2300      	movs	r3, #0
 801fff0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801fff2:	697b      	ldr	r3, [r7, #20]
	}
 801fff4:	4618      	mov	r0, r3
 801fff6:	371c      	adds	r7, #28
 801fff8:	46bd      	mov	sp, r7
 801fffa:	bd90      	pop	{r4, r7, pc}

0801fffc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801fffc:	b590      	push	{r4, r7, lr}
 801fffe:	b087      	sub	sp, #28
 8020000:	af00      	add	r7, sp, #0
 8020002:	6078      	str	r0, [r7, #4]
 8020004:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020006:	687b      	ldr	r3, [r7, #4]
 8020008:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 802000a:	693b      	ldr	r3, [r7, #16]
 802000c:	2b00      	cmp	r3, #0
 802000e:	d109      	bne.n	8020024 <xQueueTakeMutexRecursive+0x28>
 8020010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020014:	f383 8811 	msr	BASEPRI, r3
 8020018:	f3bf 8f6f 	isb	sy
 802001c:	f3bf 8f4f 	dsb	sy
 8020020:	60fb      	str	r3, [r7, #12]
 8020022:	e7fe      	b.n	8020022 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8020024:	693b      	ldr	r3, [r7, #16]
 8020026:	685c      	ldr	r4, [r3, #4]
 8020028:	f001 fdc8 	bl	8021bbc <xTaskGetCurrentTaskHandle>
 802002c:	4603      	mov	r3, r0
 802002e:	429c      	cmp	r4, r3
 8020030:	d107      	bne.n	8020042 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8020032:	693b      	ldr	r3, [r7, #16]
 8020034:	68db      	ldr	r3, [r3, #12]
 8020036:	1c5a      	adds	r2, r3, #1
 8020038:	693b      	ldr	r3, [r7, #16]
 802003a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 802003c:	2301      	movs	r3, #1
 802003e:	617b      	str	r3, [r7, #20]
 8020040:	e00c      	b.n	802005c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8020042:	6839      	ldr	r1, [r7, #0]
 8020044:	6938      	ldr	r0, [r7, #16]
 8020046:	f000 fb69 	bl	802071c <xQueueSemaphoreTake>
 802004a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 802004c:	697b      	ldr	r3, [r7, #20]
 802004e:	2b00      	cmp	r3, #0
 8020050:	d004      	beq.n	802005c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8020052:	693b      	ldr	r3, [r7, #16]
 8020054:	68db      	ldr	r3, [r3, #12]
 8020056:	1c5a      	adds	r2, r3, #1
 8020058:	693b      	ldr	r3, [r7, #16]
 802005a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 802005c:	697b      	ldr	r3, [r7, #20]
	}
 802005e:	4618      	mov	r0, r3
 8020060:	371c      	adds	r7, #28
 8020062:	46bd      	mov	sp, r7
 8020064:	bd90      	pop	{r4, r7, pc}

08020066 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8020066:	b580      	push	{r7, lr}
 8020068:	b08a      	sub	sp, #40	; 0x28
 802006a:	af02      	add	r7, sp, #8
 802006c:	60f8      	str	r0, [r7, #12]
 802006e:	60b9      	str	r1, [r7, #8]
 8020070:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8020072:	68fb      	ldr	r3, [r7, #12]
 8020074:	2b00      	cmp	r3, #0
 8020076:	d109      	bne.n	802008c <xQueueCreateCountingSemaphoreStatic+0x26>
 8020078:	f04f 0350 	mov.w	r3, #80	; 0x50
 802007c:	f383 8811 	msr	BASEPRI, r3
 8020080:	f3bf 8f6f 	isb	sy
 8020084:	f3bf 8f4f 	dsb	sy
 8020088:	61bb      	str	r3, [r7, #24]
 802008a:	e7fe      	b.n	802008a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 802008c:	68ba      	ldr	r2, [r7, #8]
 802008e:	68fb      	ldr	r3, [r7, #12]
 8020090:	429a      	cmp	r2, r3
 8020092:	d909      	bls.n	80200a8 <xQueueCreateCountingSemaphoreStatic+0x42>
 8020094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020098:	f383 8811 	msr	BASEPRI, r3
 802009c:	f3bf 8f6f 	isb	sy
 80200a0:	f3bf 8f4f 	dsb	sy
 80200a4:	617b      	str	r3, [r7, #20]
 80200a6:	e7fe      	b.n	80200a6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80200a8:	2302      	movs	r3, #2
 80200aa:	9300      	str	r3, [sp, #0]
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	2200      	movs	r2, #0
 80200b0:	2100      	movs	r1, #0
 80200b2:	68f8      	ldr	r0, [r7, #12]
 80200b4:	f7ff fe50 	bl	801fd58 <xQueueGenericCreateStatic>
 80200b8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80200ba:	69fb      	ldr	r3, [r7, #28]
 80200bc:	2b00      	cmp	r3, #0
 80200be:	d002      	beq.n	80200c6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80200c0:	69fb      	ldr	r3, [r7, #28]
 80200c2:	68ba      	ldr	r2, [r7, #8]
 80200c4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80200c6:	69fb      	ldr	r3, [r7, #28]
	}
 80200c8:	4618      	mov	r0, r3
 80200ca:	3720      	adds	r7, #32
 80200cc:	46bd      	mov	sp, r7
 80200ce:	bd80      	pop	{r7, pc}

080200d0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80200d0:	b580      	push	{r7, lr}
 80200d2:	b086      	sub	sp, #24
 80200d4:	af00      	add	r7, sp, #0
 80200d6:	6078      	str	r0, [r7, #4]
 80200d8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80200da:	687b      	ldr	r3, [r7, #4]
 80200dc:	2b00      	cmp	r3, #0
 80200de:	d109      	bne.n	80200f4 <xQueueCreateCountingSemaphore+0x24>
 80200e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80200e4:	f383 8811 	msr	BASEPRI, r3
 80200e8:	f3bf 8f6f 	isb	sy
 80200ec:	f3bf 8f4f 	dsb	sy
 80200f0:	613b      	str	r3, [r7, #16]
 80200f2:	e7fe      	b.n	80200f2 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80200f4:	683a      	ldr	r2, [r7, #0]
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	429a      	cmp	r2, r3
 80200fa:	d909      	bls.n	8020110 <xQueueCreateCountingSemaphore+0x40>
 80200fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020100:	f383 8811 	msr	BASEPRI, r3
 8020104:	f3bf 8f6f 	isb	sy
 8020108:	f3bf 8f4f 	dsb	sy
 802010c:	60fb      	str	r3, [r7, #12]
 802010e:	e7fe      	b.n	802010e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8020110:	2202      	movs	r2, #2
 8020112:	2100      	movs	r1, #0
 8020114:	6878      	ldr	r0, [r7, #4]
 8020116:	f7ff fe91 	bl	801fe3c <xQueueGenericCreate>
 802011a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 802011c:	697b      	ldr	r3, [r7, #20]
 802011e:	2b00      	cmp	r3, #0
 8020120:	d002      	beq.n	8020128 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8020122:	697b      	ldr	r3, [r7, #20]
 8020124:	683a      	ldr	r2, [r7, #0]
 8020126:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8020128:	697b      	ldr	r3, [r7, #20]
	}
 802012a:	4618      	mov	r0, r3
 802012c:	3718      	adds	r7, #24
 802012e:	46bd      	mov	sp, r7
 8020130:	bd80      	pop	{r7, pc}
	...

08020134 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8020134:	b580      	push	{r7, lr}
 8020136:	b08e      	sub	sp, #56	; 0x38
 8020138:	af00      	add	r7, sp, #0
 802013a:	60f8      	str	r0, [r7, #12]
 802013c:	60b9      	str	r1, [r7, #8]
 802013e:	607a      	str	r2, [r7, #4]
 8020140:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8020142:	2300      	movs	r3, #0
 8020144:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8020146:	68fb      	ldr	r3, [r7, #12]
 8020148:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 802014a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802014c:	2b00      	cmp	r3, #0
 802014e:	d109      	bne.n	8020164 <xQueueGenericSend+0x30>
 8020150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020154:	f383 8811 	msr	BASEPRI, r3
 8020158:	f3bf 8f6f 	isb	sy
 802015c:	f3bf 8f4f 	dsb	sy
 8020160:	62bb      	str	r3, [r7, #40]	; 0x28
 8020162:	e7fe      	b.n	8020162 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020164:	68bb      	ldr	r3, [r7, #8]
 8020166:	2b00      	cmp	r3, #0
 8020168:	d103      	bne.n	8020172 <xQueueGenericSend+0x3e>
 802016a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802016c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802016e:	2b00      	cmp	r3, #0
 8020170:	d101      	bne.n	8020176 <xQueueGenericSend+0x42>
 8020172:	2301      	movs	r3, #1
 8020174:	e000      	b.n	8020178 <xQueueGenericSend+0x44>
 8020176:	2300      	movs	r3, #0
 8020178:	2b00      	cmp	r3, #0
 802017a:	d109      	bne.n	8020190 <xQueueGenericSend+0x5c>
 802017c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020180:	f383 8811 	msr	BASEPRI, r3
 8020184:	f3bf 8f6f 	isb	sy
 8020188:	f3bf 8f4f 	dsb	sy
 802018c:	627b      	str	r3, [r7, #36]	; 0x24
 802018e:	e7fe      	b.n	802018e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020190:	683b      	ldr	r3, [r7, #0]
 8020192:	2b02      	cmp	r3, #2
 8020194:	d103      	bne.n	802019e <xQueueGenericSend+0x6a>
 8020196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802019a:	2b01      	cmp	r3, #1
 802019c:	d101      	bne.n	80201a2 <xQueueGenericSend+0x6e>
 802019e:	2301      	movs	r3, #1
 80201a0:	e000      	b.n	80201a4 <xQueueGenericSend+0x70>
 80201a2:	2300      	movs	r3, #0
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	d109      	bne.n	80201bc <xQueueGenericSend+0x88>
 80201a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80201ac:	f383 8811 	msr	BASEPRI, r3
 80201b0:	f3bf 8f6f 	isb	sy
 80201b4:	f3bf 8f4f 	dsb	sy
 80201b8:	623b      	str	r3, [r7, #32]
 80201ba:	e7fe      	b.n	80201ba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80201bc:	f001 fd0e 	bl	8021bdc <xTaskGetSchedulerState>
 80201c0:	4603      	mov	r3, r0
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	d102      	bne.n	80201cc <xQueueGenericSend+0x98>
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	2b00      	cmp	r3, #0
 80201ca:	d101      	bne.n	80201d0 <xQueueGenericSend+0x9c>
 80201cc:	2301      	movs	r3, #1
 80201ce:	e000      	b.n	80201d2 <xQueueGenericSend+0x9e>
 80201d0:	2300      	movs	r3, #0
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	d109      	bne.n	80201ea <xQueueGenericSend+0xb6>
 80201d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80201da:	f383 8811 	msr	BASEPRI, r3
 80201de:	f3bf 8f6f 	isb	sy
 80201e2:	f3bf 8f4f 	dsb	sy
 80201e6:	61fb      	str	r3, [r7, #28]
 80201e8:	e7fe      	b.n	80201e8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80201ea:	f7ff fc57 	bl	801fa9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80201ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80201f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80201f6:	429a      	cmp	r2, r3
 80201f8:	d302      	bcc.n	8020200 <xQueueGenericSend+0xcc>
 80201fa:	683b      	ldr	r3, [r7, #0]
 80201fc:	2b02      	cmp	r3, #2
 80201fe:	d129      	bne.n	8020254 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020200:	683a      	ldr	r2, [r7, #0]
 8020202:	68b9      	ldr	r1, [r7, #8]
 8020204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020206:	f000 fc48 	bl	8020a9a <prvCopyDataToQueue>
 802020a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802020c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802020e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020210:	2b00      	cmp	r3, #0
 8020212:	d010      	beq.n	8020236 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020216:	3324      	adds	r3, #36	; 0x24
 8020218:	4618      	mov	r0, r3
 802021a:	f001 fabd 	bl	8021798 <xTaskRemoveFromEventList>
 802021e:	4603      	mov	r3, r0
 8020220:	2b00      	cmp	r3, #0
 8020222:	d013      	beq.n	802024c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8020224:	4b3f      	ldr	r3, [pc, #252]	; (8020324 <xQueueGenericSend+0x1f0>)
 8020226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802022a:	601a      	str	r2, [r3, #0]
 802022c:	f3bf 8f4f 	dsb	sy
 8020230:	f3bf 8f6f 	isb	sy
 8020234:	e00a      	b.n	802024c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8020236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020238:	2b00      	cmp	r3, #0
 802023a:	d007      	beq.n	802024c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 802023c:	4b39      	ldr	r3, [pc, #228]	; (8020324 <xQueueGenericSend+0x1f0>)
 802023e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020242:	601a      	str	r2, [r3, #0]
 8020244:	f3bf 8f4f 	dsb	sy
 8020248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 802024c:	f7ff fc54 	bl	801faf8 <vPortExitCritical>
				return pdPASS;
 8020250:	2301      	movs	r3, #1
 8020252:	e063      	b.n	802031c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	2b00      	cmp	r3, #0
 8020258:	d103      	bne.n	8020262 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802025a:	f7ff fc4d 	bl	801faf8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 802025e:	2300      	movs	r3, #0
 8020260:	e05c      	b.n	802031c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020264:	2b00      	cmp	r3, #0
 8020266:	d106      	bne.n	8020276 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020268:	f107 0314 	add.w	r3, r7, #20
 802026c:	4618      	mov	r0, r3
 802026e:	f001 faf7 	bl	8021860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020272:	2301      	movs	r3, #1
 8020274:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020276:	f7ff fc3f 	bl	801faf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802027a:	f000 ffd9 	bl	8021230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802027e:	f7ff fc0d 	bl	801fa9c <vPortEnterCritical>
 8020282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020288:	b25b      	sxtb	r3, r3
 802028a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802028e:	d103      	bne.n	8020298 <xQueueGenericSend+0x164>
 8020290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020292:	2200      	movs	r2, #0
 8020294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802029a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802029e:	b25b      	sxtb	r3, r3
 80202a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80202a4:	d103      	bne.n	80202ae <xQueueGenericSend+0x17a>
 80202a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80202a8:	2200      	movs	r2, #0
 80202aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80202ae:	f7ff fc23 	bl	801faf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80202b2:	1d3a      	adds	r2, r7, #4
 80202b4:	f107 0314 	add.w	r3, r7, #20
 80202b8:	4611      	mov	r1, r2
 80202ba:	4618      	mov	r0, r3
 80202bc:	f001 fae6 	bl	802188c <xTaskCheckForTimeOut>
 80202c0:	4603      	mov	r3, r0
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	d124      	bne.n	8020310 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80202c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80202c8:	f000 fcdf 	bl	8020c8a <prvIsQueueFull>
 80202cc:	4603      	mov	r3, r0
 80202ce:	2b00      	cmp	r3, #0
 80202d0:	d018      	beq.n	8020304 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80202d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80202d4:	3310      	adds	r3, #16
 80202d6:	687a      	ldr	r2, [r7, #4]
 80202d8:	4611      	mov	r1, r2
 80202da:	4618      	mov	r0, r3
 80202dc:	f001 fa0e 	bl	80216fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80202e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80202e2:	f000 fc6a 	bl	8020bba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80202e6:	f000 ffe9 	bl	80212bc <xTaskResumeAll>
 80202ea:	4603      	mov	r3, r0
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	f47f af7c 	bne.w	80201ea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80202f2:	4b0c      	ldr	r3, [pc, #48]	; (8020324 <xQueueGenericSend+0x1f0>)
 80202f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80202f8:	601a      	str	r2, [r3, #0]
 80202fa:	f3bf 8f4f 	dsb	sy
 80202fe:	f3bf 8f6f 	isb	sy
 8020302:	e772      	b.n	80201ea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8020304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020306:	f000 fc58 	bl	8020bba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802030a:	f000 ffd7 	bl	80212bc <xTaskResumeAll>
 802030e:	e76c      	b.n	80201ea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8020310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020312:	f000 fc52 	bl	8020bba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020316:	f000 ffd1 	bl	80212bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 802031a:	2300      	movs	r3, #0
		}
	}
}
 802031c:	4618      	mov	r0, r3
 802031e:	3738      	adds	r7, #56	; 0x38
 8020320:	46bd      	mov	sp, r7
 8020322:	bd80      	pop	{r7, pc}
 8020324:	e000ed04 	.word	0xe000ed04

08020328 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8020328:	b580      	push	{r7, lr}
 802032a:	b08e      	sub	sp, #56	; 0x38
 802032c:	af00      	add	r7, sp, #0
 802032e:	60f8      	str	r0, [r7, #12]
 8020330:	60b9      	str	r1, [r7, #8]
 8020332:	607a      	str	r2, [r7, #4]
 8020334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8020336:	68fb      	ldr	r3, [r7, #12]
 8020338:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 802033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802033c:	2b00      	cmp	r3, #0
 802033e:	d109      	bne.n	8020354 <xQueueGenericSendFromISR+0x2c>
 8020340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020344:	f383 8811 	msr	BASEPRI, r3
 8020348:	f3bf 8f6f 	isb	sy
 802034c:	f3bf 8f4f 	dsb	sy
 8020350:	627b      	str	r3, [r7, #36]	; 0x24
 8020352:	e7fe      	b.n	8020352 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020354:	68bb      	ldr	r3, [r7, #8]
 8020356:	2b00      	cmp	r3, #0
 8020358:	d103      	bne.n	8020362 <xQueueGenericSendFromISR+0x3a>
 802035a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802035c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802035e:	2b00      	cmp	r3, #0
 8020360:	d101      	bne.n	8020366 <xQueueGenericSendFromISR+0x3e>
 8020362:	2301      	movs	r3, #1
 8020364:	e000      	b.n	8020368 <xQueueGenericSendFromISR+0x40>
 8020366:	2300      	movs	r3, #0
 8020368:	2b00      	cmp	r3, #0
 802036a:	d109      	bne.n	8020380 <xQueueGenericSendFromISR+0x58>
 802036c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020370:	f383 8811 	msr	BASEPRI, r3
 8020374:	f3bf 8f6f 	isb	sy
 8020378:	f3bf 8f4f 	dsb	sy
 802037c:	623b      	str	r3, [r7, #32]
 802037e:	e7fe      	b.n	802037e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020380:	683b      	ldr	r3, [r7, #0]
 8020382:	2b02      	cmp	r3, #2
 8020384:	d103      	bne.n	802038e <xQueueGenericSendFromISR+0x66>
 8020386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802038a:	2b01      	cmp	r3, #1
 802038c:	d101      	bne.n	8020392 <xQueueGenericSendFromISR+0x6a>
 802038e:	2301      	movs	r3, #1
 8020390:	e000      	b.n	8020394 <xQueueGenericSendFromISR+0x6c>
 8020392:	2300      	movs	r3, #0
 8020394:	2b00      	cmp	r3, #0
 8020396:	d109      	bne.n	80203ac <xQueueGenericSendFromISR+0x84>
 8020398:	f04f 0350 	mov.w	r3, #80	; 0x50
 802039c:	f383 8811 	msr	BASEPRI, r3
 80203a0:	f3bf 8f6f 	isb	sy
 80203a4:	f3bf 8f4f 	dsb	sy
 80203a8:	61fb      	str	r3, [r7, #28]
 80203aa:	e7fe      	b.n	80203aa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80203ac:	f7ff fc2e 	bl	801fc0c <vPortValidateInterruptPriority>
	__asm volatile
 80203b0:	f3ef 8211 	mrs	r2, BASEPRI
 80203b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80203b8:	f383 8811 	msr	BASEPRI, r3
 80203bc:	f3bf 8f6f 	isb	sy
 80203c0:	f3bf 8f4f 	dsb	sy
 80203c4:	61ba      	str	r2, [r7, #24]
 80203c6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80203c8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80203ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80203cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80203d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80203d4:	429a      	cmp	r2, r3
 80203d6:	d302      	bcc.n	80203de <xQueueGenericSendFromISR+0xb6>
 80203d8:	683b      	ldr	r3, [r7, #0]
 80203da:	2b02      	cmp	r3, #2
 80203dc:	d12c      	bne.n	8020438 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80203de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80203e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80203e8:	683a      	ldr	r2, [r7, #0]
 80203ea:	68b9      	ldr	r1, [r7, #8]
 80203ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80203ee:	f000 fb54 	bl	8020a9a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80203f2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80203f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80203fa:	d112      	bne.n	8020422 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80203fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020400:	2b00      	cmp	r3, #0
 8020402:	d016      	beq.n	8020432 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020406:	3324      	adds	r3, #36	; 0x24
 8020408:	4618      	mov	r0, r3
 802040a:	f001 f9c5 	bl	8021798 <xTaskRemoveFromEventList>
 802040e:	4603      	mov	r3, r0
 8020410:	2b00      	cmp	r3, #0
 8020412:	d00e      	beq.n	8020432 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	2b00      	cmp	r3, #0
 8020418:	d00b      	beq.n	8020432 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 802041a:	687b      	ldr	r3, [r7, #4]
 802041c:	2201      	movs	r2, #1
 802041e:	601a      	str	r2, [r3, #0]
 8020420:	e007      	b.n	8020432 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8020422:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8020426:	3301      	adds	r3, #1
 8020428:	b2db      	uxtb	r3, r3
 802042a:	b25a      	sxtb	r2, r3
 802042c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802042e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8020432:	2301      	movs	r3, #1
 8020434:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8020436:	e001      	b.n	802043c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8020438:	2300      	movs	r3, #0
 802043a:	637b      	str	r3, [r7, #52]	; 0x34
 802043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802043e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8020440:	693b      	ldr	r3, [r7, #16]
 8020442:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8020448:	4618      	mov	r0, r3
 802044a:	3738      	adds	r7, #56	; 0x38
 802044c:	46bd      	mov	sp, r7
 802044e:	bd80      	pop	{r7, pc}

08020450 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8020450:	b580      	push	{r7, lr}
 8020452:	b08e      	sub	sp, #56	; 0x38
 8020454:	af00      	add	r7, sp, #0
 8020456:	6078      	str	r0, [r7, #4]
 8020458:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 802045e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020460:	2b00      	cmp	r3, #0
 8020462:	d109      	bne.n	8020478 <xQueueGiveFromISR+0x28>
	__asm volatile
 8020464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020468:	f383 8811 	msr	BASEPRI, r3
 802046c:	f3bf 8f6f 	isb	sy
 8020470:	f3bf 8f4f 	dsb	sy
 8020474:	623b      	str	r3, [r7, #32]
 8020476:	e7fe      	b.n	8020476 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8020478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802047a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802047c:	2b00      	cmp	r3, #0
 802047e:	d009      	beq.n	8020494 <xQueueGiveFromISR+0x44>
 8020480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020484:	f383 8811 	msr	BASEPRI, r3
 8020488:	f3bf 8f6f 	isb	sy
 802048c:	f3bf 8f4f 	dsb	sy
 8020490:	61fb      	str	r3, [r7, #28]
 8020492:	e7fe      	b.n	8020492 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8020494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020496:	681b      	ldr	r3, [r3, #0]
 8020498:	2b00      	cmp	r3, #0
 802049a:	d103      	bne.n	80204a4 <xQueueGiveFromISR+0x54>
 802049c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802049e:	685b      	ldr	r3, [r3, #4]
 80204a0:	2b00      	cmp	r3, #0
 80204a2:	d101      	bne.n	80204a8 <xQueueGiveFromISR+0x58>
 80204a4:	2301      	movs	r3, #1
 80204a6:	e000      	b.n	80204aa <xQueueGiveFromISR+0x5a>
 80204a8:	2300      	movs	r3, #0
 80204aa:	2b00      	cmp	r3, #0
 80204ac:	d109      	bne.n	80204c2 <xQueueGiveFromISR+0x72>
 80204ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80204b2:	f383 8811 	msr	BASEPRI, r3
 80204b6:	f3bf 8f6f 	isb	sy
 80204ba:	f3bf 8f4f 	dsb	sy
 80204be:	61bb      	str	r3, [r7, #24]
 80204c0:	e7fe      	b.n	80204c0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80204c2:	f7ff fba3 	bl	801fc0c <vPortValidateInterruptPriority>
	__asm volatile
 80204c6:	f3ef 8211 	mrs	r2, BASEPRI
 80204ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80204ce:	f383 8811 	msr	BASEPRI, r3
 80204d2:	f3bf 8f6f 	isb	sy
 80204d6:	f3bf 8f4f 	dsb	sy
 80204da:	617a      	str	r2, [r7, #20]
 80204dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80204de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80204e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80204e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80204e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80204e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80204ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80204ee:	429a      	cmp	r2, r3
 80204f0:	d22b      	bcs.n	802054a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80204f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80204f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80204fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204fe:	1c5a      	adds	r2, r3, #1
 8020500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020502:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8020504:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020508:	f1b3 3fff 	cmp.w	r3, #4294967295
 802050c:	d112      	bne.n	8020534 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020512:	2b00      	cmp	r3, #0
 8020514:	d016      	beq.n	8020544 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020518:	3324      	adds	r3, #36	; 0x24
 802051a:	4618      	mov	r0, r3
 802051c:	f001 f93c 	bl	8021798 <xTaskRemoveFromEventList>
 8020520:	4603      	mov	r3, r0
 8020522:	2b00      	cmp	r3, #0
 8020524:	d00e      	beq.n	8020544 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8020526:	683b      	ldr	r3, [r7, #0]
 8020528:	2b00      	cmp	r3, #0
 802052a:	d00b      	beq.n	8020544 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 802052c:	683b      	ldr	r3, [r7, #0]
 802052e:	2201      	movs	r2, #1
 8020530:	601a      	str	r2, [r3, #0]
 8020532:	e007      	b.n	8020544 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8020534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020538:	3301      	adds	r3, #1
 802053a:	b2db      	uxtb	r3, r3
 802053c:	b25a      	sxtb	r2, r3
 802053e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8020544:	2301      	movs	r3, #1
 8020546:	637b      	str	r3, [r7, #52]	; 0x34
 8020548:	e001      	b.n	802054e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 802054a:	2300      	movs	r3, #0
 802054c:	637b      	str	r3, [r7, #52]	; 0x34
 802054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020550:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8020552:	68fb      	ldr	r3, [r7, #12]
 8020554:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 802055a:	4618      	mov	r0, r3
 802055c:	3738      	adds	r7, #56	; 0x38
 802055e:	46bd      	mov	sp, r7
 8020560:	bd80      	pop	{r7, pc}
	...

08020564 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8020564:	b580      	push	{r7, lr}
 8020566:	b08c      	sub	sp, #48	; 0x30
 8020568:	af00      	add	r7, sp, #0
 802056a:	60f8      	str	r0, [r7, #12]
 802056c:	60b9      	str	r1, [r7, #8]
 802056e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8020570:	2300      	movs	r3, #0
 8020572:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8020574:	68fb      	ldr	r3, [r7, #12]
 8020576:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802057a:	2b00      	cmp	r3, #0
 802057c:	d109      	bne.n	8020592 <xQueueReceive+0x2e>
	__asm volatile
 802057e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020582:	f383 8811 	msr	BASEPRI, r3
 8020586:	f3bf 8f6f 	isb	sy
 802058a:	f3bf 8f4f 	dsb	sy
 802058e:	623b      	str	r3, [r7, #32]
 8020590:	e7fe      	b.n	8020590 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020592:	68bb      	ldr	r3, [r7, #8]
 8020594:	2b00      	cmp	r3, #0
 8020596:	d103      	bne.n	80205a0 <xQueueReceive+0x3c>
 8020598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802059c:	2b00      	cmp	r3, #0
 802059e:	d101      	bne.n	80205a4 <xQueueReceive+0x40>
 80205a0:	2301      	movs	r3, #1
 80205a2:	e000      	b.n	80205a6 <xQueueReceive+0x42>
 80205a4:	2300      	movs	r3, #0
 80205a6:	2b00      	cmp	r3, #0
 80205a8:	d109      	bne.n	80205be <xQueueReceive+0x5a>
 80205aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80205ae:	f383 8811 	msr	BASEPRI, r3
 80205b2:	f3bf 8f6f 	isb	sy
 80205b6:	f3bf 8f4f 	dsb	sy
 80205ba:	61fb      	str	r3, [r7, #28]
 80205bc:	e7fe      	b.n	80205bc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80205be:	f001 fb0d 	bl	8021bdc <xTaskGetSchedulerState>
 80205c2:	4603      	mov	r3, r0
 80205c4:	2b00      	cmp	r3, #0
 80205c6:	d102      	bne.n	80205ce <xQueueReceive+0x6a>
 80205c8:	687b      	ldr	r3, [r7, #4]
 80205ca:	2b00      	cmp	r3, #0
 80205cc:	d101      	bne.n	80205d2 <xQueueReceive+0x6e>
 80205ce:	2301      	movs	r3, #1
 80205d0:	e000      	b.n	80205d4 <xQueueReceive+0x70>
 80205d2:	2300      	movs	r3, #0
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	d109      	bne.n	80205ec <xQueueReceive+0x88>
 80205d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80205dc:	f383 8811 	msr	BASEPRI, r3
 80205e0:	f3bf 8f6f 	isb	sy
 80205e4:	f3bf 8f4f 	dsb	sy
 80205e8:	61bb      	str	r3, [r7, #24]
 80205ea:	e7fe      	b.n	80205ea <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80205ec:	f7ff fa56 	bl	801fa9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80205f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80205f4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80205f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205f8:	2b00      	cmp	r3, #0
 80205fa:	d01f      	beq.n	802063c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80205fc:	68b9      	ldr	r1, [r7, #8]
 80205fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020600:	f000 fab5 	bl	8020b6e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8020604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020606:	1e5a      	subs	r2, r3, #1
 8020608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802060a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802060c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802060e:	691b      	ldr	r3, [r3, #16]
 8020610:	2b00      	cmp	r3, #0
 8020612:	d00f      	beq.n	8020634 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020616:	3310      	adds	r3, #16
 8020618:	4618      	mov	r0, r3
 802061a:	f001 f8bd 	bl	8021798 <xTaskRemoveFromEventList>
 802061e:	4603      	mov	r3, r0
 8020620:	2b00      	cmp	r3, #0
 8020622:	d007      	beq.n	8020634 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8020624:	4b3c      	ldr	r3, [pc, #240]	; (8020718 <xQueueReceive+0x1b4>)
 8020626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802062a:	601a      	str	r2, [r3, #0]
 802062c:	f3bf 8f4f 	dsb	sy
 8020630:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8020634:	f7ff fa60 	bl	801faf8 <vPortExitCritical>
				return pdPASS;
 8020638:	2301      	movs	r3, #1
 802063a:	e069      	b.n	8020710 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802063c:	687b      	ldr	r3, [r7, #4]
 802063e:	2b00      	cmp	r3, #0
 8020640:	d103      	bne.n	802064a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020642:	f7ff fa59 	bl	801faf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8020646:	2300      	movs	r3, #0
 8020648:	e062      	b.n	8020710 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 802064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802064c:	2b00      	cmp	r3, #0
 802064e:	d106      	bne.n	802065e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020650:	f107 0310 	add.w	r3, r7, #16
 8020654:	4618      	mov	r0, r3
 8020656:	f001 f903 	bl	8021860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802065a:	2301      	movs	r3, #1
 802065c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802065e:	f7ff fa4b 	bl	801faf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020662:	f000 fde5 	bl	8021230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020666:	f7ff fa19 	bl	801fa9c <vPortEnterCritical>
 802066a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802066c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020670:	b25b      	sxtb	r3, r3
 8020672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020676:	d103      	bne.n	8020680 <xQueueReceive+0x11c>
 8020678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802067a:	2200      	movs	r2, #0
 802067c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020686:	b25b      	sxtb	r3, r3
 8020688:	f1b3 3fff 	cmp.w	r3, #4294967295
 802068c:	d103      	bne.n	8020696 <xQueueReceive+0x132>
 802068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020690:	2200      	movs	r2, #0
 8020692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020696:	f7ff fa2f 	bl	801faf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802069a:	1d3a      	adds	r2, r7, #4
 802069c:	f107 0310 	add.w	r3, r7, #16
 80206a0:	4611      	mov	r1, r2
 80206a2:	4618      	mov	r0, r3
 80206a4:	f001 f8f2 	bl	802188c <xTaskCheckForTimeOut>
 80206a8:	4603      	mov	r3, r0
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	d123      	bne.n	80206f6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80206ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80206b0:	f000 fad5 	bl	8020c5e <prvIsQueueEmpty>
 80206b4:	4603      	mov	r3, r0
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d017      	beq.n	80206ea <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80206ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206bc:	3324      	adds	r3, #36	; 0x24
 80206be:	687a      	ldr	r2, [r7, #4]
 80206c0:	4611      	mov	r1, r2
 80206c2:	4618      	mov	r0, r3
 80206c4:	f001 f81a 	bl	80216fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80206c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80206ca:	f000 fa76 	bl	8020bba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80206ce:	f000 fdf5 	bl	80212bc <xTaskResumeAll>
 80206d2:	4603      	mov	r3, r0
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	d189      	bne.n	80205ec <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80206d8:	4b0f      	ldr	r3, [pc, #60]	; (8020718 <xQueueReceive+0x1b4>)
 80206da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80206de:	601a      	str	r2, [r3, #0]
 80206e0:	f3bf 8f4f 	dsb	sy
 80206e4:	f3bf 8f6f 	isb	sy
 80206e8:	e780      	b.n	80205ec <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80206ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80206ec:	f000 fa65 	bl	8020bba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80206f0:	f000 fde4 	bl	80212bc <xTaskResumeAll>
 80206f4:	e77a      	b.n	80205ec <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80206f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80206f8:	f000 fa5f 	bl	8020bba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80206fc:	f000 fdde 	bl	80212bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020702:	f000 faac 	bl	8020c5e <prvIsQueueEmpty>
 8020706:	4603      	mov	r3, r0
 8020708:	2b00      	cmp	r3, #0
 802070a:	f43f af6f 	beq.w	80205ec <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802070e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8020710:	4618      	mov	r0, r3
 8020712:	3730      	adds	r7, #48	; 0x30
 8020714:	46bd      	mov	sp, r7
 8020716:	bd80      	pop	{r7, pc}
 8020718:	e000ed04 	.word	0xe000ed04

0802071c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 802071c:	b580      	push	{r7, lr}
 802071e:	b08e      	sub	sp, #56	; 0x38
 8020720:	af00      	add	r7, sp, #0
 8020722:	6078      	str	r0, [r7, #4]
 8020724:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8020726:	2300      	movs	r3, #0
 8020728:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 802072a:	687b      	ldr	r3, [r7, #4]
 802072c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 802072e:	2300      	movs	r3, #0
 8020730:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020734:	2b00      	cmp	r3, #0
 8020736:	d109      	bne.n	802074c <xQueueSemaphoreTake+0x30>
 8020738:	f04f 0350 	mov.w	r3, #80	; 0x50
 802073c:	f383 8811 	msr	BASEPRI, r3
 8020740:	f3bf 8f6f 	isb	sy
 8020744:	f3bf 8f4f 	dsb	sy
 8020748:	623b      	str	r3, [r7, #32]
 802074a:	e7fe      	b.n	802074a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 802074c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020750:	2b00      	cmp	r3, #0
 8020752:	d009      	beq.n	8020768 <xQueueSemaphoreTake+0x4c>
 8020754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020758:	f383 8811 	msr	BASEPRI, r3
 802075c:	f3bf 8f6f 	isb	sy
 8020760:	f3bf 8f4f 	dsb	sy
 8020764:	61fb      	str	r3, [r7, #28]
 8020766:	e7fe      	b.n	8020766 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020768:	f001 fa38 	bl	8021bdc <xTaskGetSchedulerState>
 802076c:	4603      	mov	r3, r0
 802076e:	2b00      	cmp	r3, #0
 8020770:	d102      	bne.n	8020778 <xQueueSemaphoreTake+0x5c>
 8020772:	683b      	ldr	r3, [r7, #0]
 8020774:	2b00      	cmp	r3, #0
 8020776:	d101      	bne.n	802077c <xQueueSemaphoreTake+0x60>
 8020778:	2301      	movs	r3, #1
 802077a:	e000      	b.n	802077e <xQueueSemaphoreTake+0x62>
 802077c:	2300      	movs	r3, #0
 802077e:	2b00      	cmp	r3, #0
 8020780:	d109      	bne.n	8020796 <xQueueSemaphoreTake+0x7a>
 8020782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020786:	f383 8811 	msr	BASEPRI, r3
 802078a:	f3bf 8f6f 	isb	sy
 802078e:	f3bf 8f4f 	dsb	sy
 8020792:	61bb      	str	r3, [r7, #24]
 8020794:	e7fe      	b.n	8020794 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8020796:	f7ff f981 	bl	801fa9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 802079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802079c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802079e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80207a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d024      	beq.n	80207f0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80207a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207a8:	1e5a      	subs	r2, r3, #1
 80207aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207ac:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80207ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207b0:	681b      	ldr	r3, [r3, #0]
 80207b2:	2b00      	cmp	r3, #0
 80207b4:	d104      	bne.n	80207c0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80207b6:	f001 fb8d 	bl	8021ed4 <pvTaskIncrementMutexHeldCount>
 80207ba:	4602      	mov	r2, r0
 80207bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207be:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80207c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207c2:	691b      	ldr	r3, [r3, #16]
 80207c4:	2b00      	cmp	r3, #0
 80207c6:	d00f      	beq.n	80207e8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80207c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207ca:	3310      	adds	r3, #16
 80207cc:	4618      	mov	r0, r3
 80207ce:	f000 ffe3 	bl	8021798 <xTaskRemoveFromEventList>
 80207d2:	4603      	mov	r3, r0
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	d007      	beq.n	80207e8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80207d8:	4b53      	ldr	r3, [pc, #332]	; (8020928 <xQueueSemaphoreTake+0x20c>)
 80207da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80207de:	601a      	str	r2, [r3, #0]
 80207e0:	f3bf 8f4f 	dsb	sy
 80207e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80207e8:	f7ff f986 	bl	801faf8 <vPortExitCritical>
				return pdPASS;
 80207ec:	2301      	movs	r3, #1
 80207ee:	e096      	b.n	802091e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80207f0:	683b      	ldr	r3, [r7, #0]
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d110      	bne.n	8020818 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80207f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	d009      	beq.n	8020810 <xQueueSemaphoreTake+0xf4>
 80207fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020800:	f383 8811 	msr	BASEPRI, r3
 8020804:	f3bf 8f6f 	isb	sy
 8020808:	f3bf 8f4f 	dsb	sy
 802080c:	617b      	str	r3, [r7, #20]
 802080e:	e7fe      	b.n	802080e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8020810:	f7ff f972 	bl	801faf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8020814:	2300      	movs	r3, #0
 8020816:	e082      	b.n	802091e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802081a:	2b00      	cmp	r3, #0
 802081c:	d106      	bne.n	802082c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802081e:	f107 030c 	add.w	r3, r7, #12
 8020822:	4618      	mov	r0, r3
 8020824:	f001 f81c 	bl	8021860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020828:	2301      	movs	r3, #1
 802082a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802082c:	f7ff f964 	bl	801faf8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020830:	f000 fcfe 	bl	8021230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020834:	f7ff f932 	bl	801fa9c <vPortEnterCritical>
 8020838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802083a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802083e:	b25b      	sxtb	r3, r3
 8020840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020844:	d103      	bne.n	802084e <xQueueSemaphoreTake+0x132>
 8020846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020848:	2200      	movs	r2, #0
 802084a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020854:	b25b      	sxtb	r3, r3
 8020856:	f1b3 3fff 	cmp.w	r3, #4294967295
 802085a:	d103      	bne.n	8020864 <xQueueSemaphoreTake+0x148>
 802085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802085e:	2200      	movs	r2, #0
 8020860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020864:	f7ff f948 	bl	801faf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020868:	463a      	mov	r2, r7
 802086a:	f107 030c 	add.w	r3, r7, #12
 802086e:	4611      	mov	r1, r2
 8020870:	4618      	mov	r0, r3
 8020872:	f001 f80b 	bl	802188c <xTaskCheckForTimeOut>
 8020876:	4603      	mov	r3, r0
 8020878:	2b00      	cmp	r3, #0
 802087a:	d132      	bne.n	80208e2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802087c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802087e:	f000 f9ee 	bl	8020c5e <prvIsQueueEmpty>
 8020882:	4603      	mov	r3, r0
 8020884:	2b00      	cmp	r3, #0
 8020886:	d026      	beq.n	80208d6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8020888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802088a:	681b      	ldr	r3, [r3, #0]
 802088c:	2b00      	cmp	r3, #0
 802088e:	d109      	bne.n	80208a4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8020890:	f7ff f904 	bl	801fa9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8020894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020896:	685b      	ldr	r3, [r3, #4]
 8020898:	4618      	mov	r0, r3
 802089a:	f001 f9bd 	bl	8021c18 <xTaskPriorityInherit>
 802089e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80208a0:	f7ff f92a 	bl	801faf8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80208a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208a6:	3324      	adds	r3, #36	; 0x24
 80208a8:	683a      	ldr	r2, [r7, #0]
 80208aa:	4611      	mov	r1, r2
 80208ac:	4618      	mov	r0, r3
 80208ae:	f000 ff25 	bl	80216fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80208b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80208b4:	f000 f981 	bl	8020bba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80208b8:	f000 fd00 	bl	80212bc <xTaskResumeAll>
 80208bc:	4603      	mov	r3, r0
 80208be:	2b00      	cmp	r3, #0
 80208c0:	f47f af69 	bne.w	8020796 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80208c4:	4b18      	ldr	r3, [pc, #96]	; (8020928 <xQueueSemaphoreTake+0x20c>)
 80208c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80208ca:	601a      	str	r2, [r3, #0]
 80208cc:	f3bf 8f4f 	dsb	sy
 80208d0:	f3bf 8f6f 	isb	sy
 80208d4:	e75f      	b.n	8020796 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80208d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80208d8:	f000 f96f 	bl	8020bba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80208dc:	f000 fcee 	bl	80212bc <xTaskResumeAll>
 80208e0:	e759      	b.n	8020796 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80208e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80208e4:	f000 f969 	bl	8020bba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80208e8:	f000 fce8 	bl	80212bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80208ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80208ee:	f000 f9b6 	bl	8020c5e <prvIsQueueEmpty>
 80208f2:	4603      	mov	r3, r0
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	f43f af4e 	beq.w	8020796 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80208fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208fc:	2b00      	cmp	r3, #0
 80208fe:	d00d      	beq.n	802091c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8020900:	f7ff f8cc 	bl	801fa9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8020904:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020906:	f000 f8b0 	bl	8020a6a <prvGetDisinheritPriorityAfterTimeout>
 802090a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 802090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802090e:	685b      	ldr	r3, [r3, #4]
 8020910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020912:	4618      	mov	r0, r3
 8020914:	f001 fa5a 	bl	8021dcc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8020918:	f7ff f8ee 	bl	801faf8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802091c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 802091e:	4618      	mov	r0, r3
 8020920:	3738      	adds	r7, #56	; 0x38
 8020922:	46bd      	mov	sp, r7
 8020924:	bd80      	pop	{r7, pc}
 8020926:	bf00      	nop
 8020928:	e000ed04 	.word	0xe000ed04

0802092c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 802092c:	b580      	push	{r7, lr}
 802092e:	b08e      	sub	sp, #56	; 0x38
 8020930:	af00      	add	r7, sp, #0
 8020932:	60f8      	str	r0, [r7, #12]
 8020934:	60b9      	str	r1, [r7, #8]
 8020936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8020938:	68fb      	ldr	r3, [r7, #12]
 802093a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 802093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802093e:	2b00      	cmp	r3, #0
 8020940:	d109      	bne.n	8020956 <xQueueReceiveFromISR+0x2a>
 8020942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020946:	f383 8811 	msr	BASEPRI, r3
 802094a:	f3bf 8f6f 	isb	sy
 802094e:	f3bf 8f4f 	dsb	sy
 8020952:	623b      	str	r3, [r7, #32]
 8020954:	e7fe      	b.n	8020954 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020956:	68bb      	ldr	r3, [r7, #8]
 8020958:	2b00      	cmp	r3, #0
 802095a:	d103      	bne.n	8020964 <xQueueReceiveFromISR+0x38>
 802095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020960:	2b00      	cmp	r3, #0
 8020962:	d101      	bne.n	8020968 <xQueueReceiveFromISR+0x3c>
 8020964:	2301      	movs	r3, #1
 8020966:	e000      	b.n	802096a <xQueueReceiveFromISR+0x3e>
 8020968:	2300      	movs	r3, #0
 802096a:	2b00      	cmp	r3, #0
 802096c:	d109      	bne.n	8020982 <xQueueReceiveFromISR+0x56>
 802096e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020972:	f383 8811 	msr	BASEPRI, r3
 8020976:	f3bf 8f6f 	isb	sy
 802097a:	f3bf 8f4f 	dsb	sy
 802097e:	61fb      	str	r3, [r7, #28]
 8020980:	e7fe      	b.n	8020980 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8020982:	f7ff f943 	bl	801fc0c <vPortValidateInterruptPriority>
	__asm volatile
 8020986:	f3ef 8211 	mrs	r2, BASEPRI
 802098a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802098e:	f383 8811 	msr	BASEPRI, r3
 8020992:	f3bf 8f6f 	isb	sy
 8020996:	f3bf 8f4f 	dsb	sy
 802099a:	61ba      	str	r2, [r7, #24]
 802099c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 802099e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80209a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80209a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80209a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80209a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	d02f      	beq.n	8020a0e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80209ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80209b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80209b8:	68b9      	ldr	r1, [r7, #8]
 80209ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80209bc:	f000 f8d7 	bl	8020b6e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80209c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209c2:	1e5a      	subs	r2, r3, #1
 80209c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80209c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80209cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80209d0:	d112      	bne.n	80209f8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80209d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209d4:	691b      	ldr	r3, [r3, #16]
 80209d6:	2b00      	cmp	r3, #0
 80209d8:	d016      	beq.n	8020a08 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80209da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209dc:	3310      	adds	r3, #16
 80209de:	4618      	mov	r0, r3
 80209e0:	f000 feda 	bl	8021798 <xTaskRemoveFromEventList>
 80209e4:	4603      	mov	r3, r0
 80209e6:	2b00      	cmp	r3, #0
 80209e8:	d00e      	beq.n	8020a08 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80209ea:	687b      	ldr	r3, [r7, #4]
 80209ec:	2b00      	cmp	r3, #0
 80209ee:	d00b      	beq.n	8020a08 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80209f0:	687b      	ldr	r3, [r7, #4]
 80209f2:	2201      	movs	r2, #1
 80209f4:	601a      	str	r2, [r3, #0]
 80209f6:	e007      	b.n	8020a08 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80209f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80209fc:	3301      	adds	r3, #1
 80209fe:	b2db      	uxtb	r3, r3
 8020a00:	b25a      	sxtb	r2, r3
 8020a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8020a08:	2301      	movs	r3, #1
 8020a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8020a0c:	e001      	b.n	8020a12 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8020a0e:	2300      	movs	r3, #0
 8020a10:	637b      	str	r3, [r7, #52]	; 0x34
 8020a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8020a16:	693b      	ldr	r3, [r7, #16]
 8020a18:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8020a1e:	4618      	mov	r0, r3
 8020a20:	3738      	adds	r7, #56	; 0x38
 8020a22:	46bd      	mov	sp, r7
 8020a24:	bd80      	pop	{r7, pc}

08020a26 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8020a26:	b580      	push	{r7, lr}
 8020a28:	b084      	sub	sp, #16
 8020a2a:	af00      	add	r7, sp, #0
 8020a2c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8020a2e:	687b      	ldr	r3, [r7, #4]
 8020a30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8020a32:	68fb      	ldr	r3, [r7, #12]
 8020a34:	2b00      	cmp	r3, #0
 8020a36:	d109      	bne.n	8020a4c <vQueueDelete+0x26>
	__asm volatile
 8020a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a3c:	f383 8811 	msr	BASEPRI, r3
 8020a40:	f3bf 8f6f 	isb	sy
 8020a44:	f3bf 8f4f 	dsb	sy
 8020a48:	60bb      	str	r3, [r7, #8]
 8020a4a:	e7fe      	b.n	8020a4a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8020a4c:	68f8      	ldr	r0, [r7, #12]
 8020a4e:	f000 f95d 	bl	8020d0c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8020a52:	68fb      	ldr	r3, [r7, #12]
 8020a54:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	d102      	bne.n	8020a62 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8020a5c:	68f8      	ldr	r0, [r7, #12]
 8020a5e:	f7fe fd29 	bl	801f4b4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8020a62:	bf00      	nop
 8020a64:	3710      	adds	r7, #16
 8020a66:	46bd      	mov	sp, r7
 8020a68:	bd80      	pop	{r7, pc}

08020a6a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8020a6a:	b480      	push	{r7}
 8020a6c:	b085      	sub	sp, #20
 8020a6e:	af00      	add	r7, sp, #0
 8020a70:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	d006      	beq.n	8020a88 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8020a7a:	687b      	ldr	r3, [r7, #4]
 8020a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a7e:	681b      	ldr	r3, [r3, #0]
 8020a80:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8020a84:	60fb      	str	r3, [r7, #12]
 8020a86:	e001      	b.n	8020a8c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8020a88:	2300      	movs	r3, #0
 8020a8a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8020a8c:	68fb      	ldr	r3, [r7, #12]
	}
 8020a8e:	4618      	mov	r0, r3
 8020a90:	3714      	adds	r7, #20
 8020a92:	46bd      	mov	sp, r7
 8020a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a98:	4770      	bx	lr

08020a9a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8020a9a:	b580      	push	{r7, lr}
 8020a9c:	b086      	sub	sp, #24
 8020a9e:	af00      	add	r7, sp, #0
 8020aa0:	60f8      	str	r0, [r7, #12]
 8020aa2:	60b9      	str	r1, [r7, #8]
 8020aa4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8020aa6:	2300      	movs	r3, #0
 8020aa8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020aaa:	68fb      	ldr	r3, [r7, #12]
 8020aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020aae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8020ab0:	68fb      	ldr	r3, [r7, #12]
 8020ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	d10d      	bne.n	8020ad4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8020ab8:	68fb      	ldr	r3, [r7, #12]
 8020aba:	681b      	ldr	r3, [r3, #0]
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	d14d      	bne.n	8020b5c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8020ac0:	68fb      	ldr	r3, [r7, #12]
 8020ac2:	685b      	ldr	r3, [r3, #4]
 8020ac4:	4618      	mov	r0, r3
 8020ac6:	f001 f915 	bl	8021cf4 <xTaskPriorityDisinherit>
 8020aca:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8020acc:	68fb      	ldr	r3, [r7, #12]
 8020ace:	2200      	movs	r2, #0
 8020ad0:	605a      	str	r2, [r3, #4]
 8020ad2:	e043      	b.n	8020b5c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	d119      	bne.n	8020b0e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8020ada:	68fb      	ldr	r3, [r7, #12]
 8020adc:	6898      	ldr	r0, [r3, #8]
 8020ade:	68fb      	ldr	r3, [r7, #12]
 8020ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ae2:	461a      	mov	r2, r3
 8020ae4:	68b9      	ldr	r1, [r7, #8]
 8020ae6:	f006 f89d 	bl	8026c24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8020aea:	68fb      	ldr	r3, [r7, #12]
 8020aec:	689a      	ldr	r2, [r3, #8]
 8020aee:	68fb      	ldr	r3, [r7, #12]
 8020af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020af2:	441a      	add	r2, r3
 8020af4:	68fb      	ldr	r3, [r7, #12]
 8020af6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8020af8:	68fb      	ldr	r3, [r7, #12]
 8020afa:	689a      	ldr	r2, [r3, #8]
 8020afc:	68fb      	ldr	r3, [r7, #12]
 8020afe:	685b      	ldr	r3, [r3, #4]
 8020b00:	429a      	cmp	r2, r3
 8020b02:	d32b      	bcc.n	8020b5c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8020b04:	68fb      	ldr	r3, [r7, #12]
 8020b06:	681a      	ldr	r2, [r3, #0]
 8020b08:	68fb      	ldr	r3, [r7, #12]
 8020b0a:	609a      	str	r2, [r3, #8]
 8020b0c:	e026      	b.n	8020b5c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020b0e:	68fb      	ldr	r3, [r7, #12]
 8020b10:	68d8      	ldr	r0, [r3, #12]
 8020b12:	68fb      	ldr	r3, [r7, #12]
 8020b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b16:	461a      	mov	r2, r3
 8020b18:	68b9      	ldr	r1, [r7, #8]
 8020b1a:	f006 f883 	bl	8026c24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8020b1e:	68fb      	ldr	r3, [r7, #12]
 8020b20:	68da      	ldr	r2, [r3, #12]
 8020b22:	68fb      	ldr	r3, [r7, #12]
 8020b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b26:	425b      	negs	r3, r3
 8020b28:	441a      	add	r2, r3
 8020b2a:	68fb      	ldr	r3, [r7, #12]
 8020b2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8020b2e:	68fb      	ldr	r3, [r7, #12]
 8020b30:	68da      	ldr	r2, [r3, #12]
 8020b32:	68fb      	ldr	r3, [r7, #12]
 8020b34:	681b      	ldr	r3, [r3, #0]
 8020b36:	429a      	cmp	r2, r3
 8020b38:	d207      	bcs.n	8020b4a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8020b3a:	68fb      	ldr	r3, [r7, #12]
 8020b3c:	685a      	ldr	r2, [r3, #4]
 8020b3e:	68fb      	ldr	r3, [r7, #12]
 8020b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b42:	425b      	negs	r3, r3
 8020b44:	441a      	add	r2, r3
 8020b46:	68fb      	ldr	r3, [r7, #12]
 8020b48:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8020b4a:	687b      	ldr	r3, [r7, #4]
 8020b4c:	2b02      	cmp	r3, #2
 8020b4e:	d105      	bne.n	8020b5c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8020b50:	693b      	ldr	r3, [r7, #16]
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	d002      	beq.n	8020b5c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8020b56:	693b      	ldr	r3, [r7, #16]
 8020b58:	3b01      	subs	r3, #1
 8020b5a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8020b5c:	693b      	ldr	r3, [r7, #16]
 8020b5e:	1c5a      	adds	r2, r3, #1
 8020b60:	68fb      	ldr	r3, [r7, #12]
 8020b62:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8020b64:	697b      	ldr	r3, [r7, #20]
}
 8020b66:	4618      	mov	r0, r3
 8020b68:	3718      	adds	r7, #24
 8020b6a:	46bd      	mov	sp, r7
 8020b6c:	bd80      	pop	{r7, pc}

08020b6e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8020b6e:	b580      	push	{r7, lr}
 8020b70:	b082      	sub	sp, #8
 8020b72:	af00      	add	r7, sp, #0
 8020b74:	6078      	str	r0, [r7, #4]
 8020b76:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	d018      	beq.n	8020bb2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	68da      	ldr	r2, [r3, #12]
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b88:	441a      	add	r2, r3
 8020b8a:	687b      	ldr	r3, [r7, #4]
 8020b8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	68da      	ldr	r2, [r3, #12]
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	685b      	ldr	r3, [r3, #4]
 8020b96:	429a      	cmp	r2, r3
 8020b98:	d303      	bcc.n	8020ba2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8020b9a:	687b      	ldr	r3, [r7, #4]
 8020b9c:	681a      	ldr	r2, [r3, #0]
 8020b9e:	687b      	ldr	r3, [r7, #4]
 8020ba0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	68d9      	ldr	r1, [r3, #12]
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020baa:	461a      	mov	r2, r3
 8020bac:	6838      	ldr	r0, [r7, #0]
 8020bae:	f006 f839 	bl	8026c24 <memcpy>
	}
}
 8020bb2:	bf00      	nop
 8020bb4:	3708      	adds	r7, #8
 8020bb6:	46bd      	mov	sp, r7
 8020bb8:	bd80      	pop	{r7, pc}

08020bba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8020bba:	b580      	push	{r7, lr}
 8020bbc:	b084      	sub	sp, #16
 8020bbe:	af00      	add	r7, sp, #0
 8020bc0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8020bc2:	f7fe ff6b 	bl	801fa9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8020bc6:	687b      	ldr	r3, [r7, #4]
 8020bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020bcc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8020bce:	e011      	b.n	8020bf4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020bd0:	687b      	ldr	r3, [r7, #4]
 8020bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020bd4:	2b00      	cmp	r3, #0
 8020bd6:	d012      	beq.n	8020bfe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020bd8:	687b      	ldr	r3, [r7, #4]
 8020bda:	3324      	adds	r3, #36	; 0x24
 8020bdc:	4618      	mov	r0, r3
 8020bde:	f000 fddb 	bl	8021798 <xTaskRemoveFromEventList>
 8020be2:	4603      	mov	r3, r0
 8020be4:	2b00      	cmp	r3, #0
 8020be6:	d001      	beq.n	8020bec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8020be8:	f000 feb0 	bl	802194c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8020bec:	7bfb      	ldrb	r3, [r7, #15]
 8020bee:	3b01      	subs	r3, #1
 8020bf0:	b2db      	uxtb	r3, r3
 8020bf2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8020bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020bf8:	2b00      	cmp	r3, #0
 8020bfa:	dce9      	bgt.n	8020bd0 <prvUnlockQueue+0x16>
 8020bfc:	e000      	b.n	8020c00 <prvUnlockQueue+0x46>
					break;
 8020bfe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8020c00:	687b      	ldr	r3, [r7, #4]
 8020c02:	22ff      	movs	r2, #255	; 0xff
 8020c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8020c08:	f7fe ff76 	bl	801faf8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8020c0c:	f7fe ff46 	bl	801fa9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8020c10:	687b      	ldr	r3, [r7, #4]
 8020c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020c16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8020c18:	e011      	b.n	8020c3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020c1a:	687b      	ldr	r3, [r7, #4]
 8020c1c:	691b      	ldr	r3, [r3, #16]
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	d012      	beq.n	8020c48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020c22:	687b      	ldr	r3, [r7, #4]
 8020c24:	3310      	adds	r3, #16
 8020c26:	4618      	mov	r0, r3
 8020c28:	f000 fdb6 	bl	8021798 <xTaskRemoveFromEventList>
 8020c2c:	4603      	mov	r3, r0
 8020c2e:	2b00      	cmp	r3, #0
 8020c30:	d001      	beq.n	8020c36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8020c32:	f000 fe8b 	bl	802194c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8020c36:	7bbb      	ldrb	r3, [r7, #14]
 8020c38:	3b01      	subs	r3, #1
 8020c3a:	b2db      	uxtb	r3, r3
 8020c3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8020c3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8020c42:	2b00      	cmp	r3, #0
 8020c44:	dce9      	bgt.n	8020c1a <prvUnlockQueue+0x60>
 8020c46:	e000      	b.n	8020c4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8020c48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8020c4a:	687b      	ldr	r3, [r7, #4]
 8020c4c:	22ff      	movs	r2, #255	; 0xff
 8020c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8020c52:	f7fe ff51 	bl	801faf8 <vPortExitCritical>
}
 8020c56:	bf00      	nop
 8020c58:	3710      	adds	r7, #16
 8020c5a:	46bd      	mov	sp, r7
 8020c5c:	bd80      	pop	{r7, pc}

08020c5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8020c5e:	b580      	push	{r7, lr}
 8020c60:	b084      	sub	sp, #16
 8020c62:	af00      	add	r7, sp, #0
 8020c64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8020c66:	f7fe ff19 	bl	801fa9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8020c6a:	687b      	ldr	r3, [r7, #4]
 8020c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d102      	bne.n	8020c78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8020c72:	2301      	movs	r3, #1
 8020c74:	60fb      	str	r3, [r7, #12]
 8020c76:	e001      	b.n	8020c7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8020c78:	2300      	movs	r3, #0
 8020c7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8020c7c:	f7fe ff3c 	bl	801faf8 <vPortExitCritical>

	return xReturn;
 8020c80:	68fb      	ldr	r3, [r7, #12]
}
 8020c82:	4618      	mov	r0, r3
 8020c84:	3710      	adds	r7, #16
 8020c86:	46bd      	mov	sp, r7
 8020c88:	bd80      	pop	{r7, pc}

08020c8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8020c8a:	b580      	push	{r7, lr}
 8020c8c:	b084      	sub	sp, #16
 8020c8e:	af00      	add	r7, sp, #0
 8020c90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8020c92:	f7fe ff03 	bl	801fa9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020c9e:	429a      	cmp	r2, r3
 8020ca0:	d102      	bne.n	8020ca8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8020ca2:	2301      	movs	r3, #1
 8020ca4:	60fb      	str	r3, [r7, #12]
 8020ca6:	e001      	b.n	8020cac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8020ca8:	2300      	movs	r3, #0
 8020caa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8020cac:	f7fe ff24 	bl	801faf8 <vPortExitCritical>

	return xReturn;
 8020cb0:	68fb      	ldr	r3, [r7, #12]
}
 8020cb2:	4618      	mov	r0, r3
 8020cb4:	3710      	adds	r7, #16
 8020cb6:	46bd      	mov	sp, r7
 8020cb8:	bd80      	pop	{r7, pc}
	...

08020cbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8020cbc:	b480      	push	{r7}
 8020cbe:	b085      	sub	sp, #20
 8020cc0:	af00      	add	r7, sp, #0
 8020cc2:	6078      	str	r0, [r7, #4]
 8020cc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020cc6:	2300      	movs	r3, #0
 8020cc8:	60fb      	str	r3, [r7, #12]
 8020cca:	e014      	b.n	8020cf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8020ccc:	4a0e      	ldr	r2, [pc, #56]	; (8020d08 <vQueueAddToRegistry+0x4c>)
 8020cce:	68fb      	ldr	r3, [r7, #12]
 8020cd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8020cd4:	2b00      	cmp	r3, #0
 8020cd6:	d10b      	bne.n	8020cf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8020cd8:	490b      	ldr	r1, [pc, #44]	; (8020d08 <vQueueAddToRegistry+0x4c>)
 8020cda:	68fb      	ldr	r3, [r7, #12]
 8020cdc:	683a      	ldr	r2, [r7, #0]
 8020cde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8020ce2:	4a09      	ldr	r2, [pc, #36]	; (8020d08 <vQueueAddToRegistry+0x4c>)
 8020ce4:	68fb      	ldr	r3, [r7, #12]
 8020ce6:	00db      	lsls	r3, r3, #3
 8020ce8:	4413      	add	r3, r2
 8020cea:	687a      	ldr	r2, [r7, #4]
 8020cec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8020cee:	e005      	b.n	8020cfc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020cf0:	68fb      	ldr	r3, [r7, #12]
 8020cf2:	3301      	adds	r3, #1
 8020cf4:	60fb      	str	r3, [r7, #12]
 8020cf6:	68fb      	ldr	r3, [r7, #12]
 8020cf8:	2b0b      	cmp	r3, #11
 8020cfa:	d9e7      	bls.n	8020ccc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8020cfc:	bf00      	nop
 8020cfe:	3714      	adds	r7, #20
 8020d00:	46bd      	mov	sp, r7
 8020d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d06:	4770      	bx	lr
 8020d08:	20028880 	.word	0x20028880

08020d0c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8020d0c:	b480      	push	{r7}
 8020d0e:	b085      	sub	sp, #20
 8020d10:	af00      	add	r7, sp, #0
 8020d12:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020d14:	2300      	movs	r3, #0
 8020d16:	60fb      	str	r3, [r7, #12]
 8020d18:	e016      	b.n	8020d48 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8020d1a:	4a10      	ldr	r2, [pc, #64]	; (8020d5c <vQueueUnregisterQueue+0x50>)
 8020d1c:	68fb      	ldr	r3, [r7, #12]
 8020d1e:	00db      	lsls	r3, r3, #3
 8020d20:	4413      	add	r3, r2
 8020d22:	685b      	ldr	r3, [r3, #4]
 8020d24:	687a      	ldr	r2, [r7, #4]
 8020d26:	429a      	cmp	r2, r3
 8020d28:	d10b      	bne.n	8020d42 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8020d2a:	4a0c      	ldr	r2, [pc, #48]	; (8020d5c <vQueueUnregisterQueue+0x50>)
 8020d2c:	68fb      	ldr	r3, [r7, #12]
 8020d2e:	2100      	movs	r1, #0
 8020d30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8020d34:	4a09      	ldr	r2, [pc, #36]	; (8020d5c <vQueueUnregisterQueue+0x50>)
 8020d36:	68fb      	ldr	r3, [r7, #12]
 8020d38:	00db      	lsls	r3, r3, #3
 8020d3a:	4413      	add	r3, r2
 8020d3c:	2200      	movs	r2, #0
 8020d3e:	605a      	str	r2, [r3, #4]
				break;
 8020d40:	e005      	b.n	8020d4e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020d42:	68fb      	ldr	r3, [r7, #12]
 8020d44:	3301      	adds	r3, #1
 8020d46:	60fb      	str	r3, [r7, #12]
 8020d48:	68fb      	ldr	r3, [r7, #12]
 8020d4a:	2b0b      	cmp	r3, #11
 8020d4c:	d9e5      	bls.n	8020d1a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8020d4e:	bf00      	nop
 8020d50:	3714      	adds	r7, #20
 8020d52:	46bd      	mov	sp, r7
 8020d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d58:	4770      	bx	lr
 8020d5a:	bf00      	nop
 8020d5c:	20028880 	.word	0x20028880

08020d60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8020d60:	b580      	push	{r7, lr}
 8020d62:	b086      	sub	sp, #24
 8020d64:	af00      	add	r7, sp, #0
 8020d66:	60f8      	str	r0, [r7, #12]
 8020d68:	60b9      	str	r1, [r7, #8]
 8020d6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8020d6c:	68fb      	ldr	r3, [r7, #12]
 8020d6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8020d70:	f7fe fe94 	bl	801fa9c <vPortEnterCritical>
 8020d74:	697b      	ldr	r3, [r7, #20]
 8020d76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020d7a:	b25b      	sxtb	r3, r3
 8020d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020d80:	d103      	bne.n	8020d8a <vQueueWaitForMessageRestricted+0x2a>
 8020d82:	697b      	ldr	r3, [r7, #20]
 8020d84:	2200      	movs	r2, #0
 8020d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020d8a:	697b      	ldr	r3, [r7, #20]
 8020d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020d90:	b25b      	sxtb	r3, r3
 8020d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020d96:	d103      	bne.n	8020da0 <vQueueWaitForMessageRestricted+0x40>
 8020d98:	697b      	ldr	r3, [r7, #20]
 8020d9a:	2200      	movs	r2, #0
 8020d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020da0:	f7fe feaa 	bl	801faf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8020da4:	697b      	ldr	r3, [r7, #20]
 8020da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020da8:	2b00      	cmp	r3, #0
 8020daa:	d106      	bne.n	8020dba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8020dac:	697b      	ldr	r3, [r7, #20]
 8020dae:	3324      	adds	r3, #36	; 0x24
 8020db0:	687a      	ldr	r2, [r7, #4]
 8020db2:	68b9      	ldr	r1, [r7, #8]
 8020db4:	4618      	mov	r0, r3
 8020db6:	f000 fcc5 	bl	8021744 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8020dba:	6978      	ldr	r0, [r7, #20]
 8020dbc:	f7ff fefd 	bl	8020bba <prvUnlockQueue>
	}
 8020dc0:	bf00      	nop
 8020dc2:	3718      	adds	r7, #24
 8020dc4:	46bd      	mov	sp, r7
 8020dc6:	bd80      	pop	{r7, pc}

08020dc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8020dc8:	b580      	push	{r7, lr}
 8020dca:	b08e      	sub	sp, #56	; 0x38
 8020dcc:	af04      	add	r7, sp, #16
 8020dce:	60f8      	str	r0, [r7, #12]
 8020dd0:	60b9      	str	r1, [r7, #8]
 8020dd2:	607a      	str	r2, [r7, #4]
 8020dd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8020dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	d109      	bne.n	8020df0 <xTaskCreateStatic+0x28>
 8020ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020de0:	f383 8811 	msr	BASEPRI, r3
 8020de4:	f3bf 8f6f 	isb	sy
 8020de8:	f3bf 8f4f 	dsb	sy
 8020dec:	623b      	str	r3, [r7, #32]
 8020dee:	e7fe      	b.n	8020dee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8020df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020df2:	2b00      	cmp	r3, #0
 8020df4:	d109      	bne.n	8020e0a <xTaskCreateStatic+0x42>
 8020df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020dfa:	f383 8811 	msr	BASEPRI, r3
 8020dfe:	f3bf 8f6f 	isb	sy
 8020e02:	f3bf 8f4f 	dsb	sy
 8020e06:	61fb      	str	r3, [r7, #28]
 8020e08:	e7fe      	b.n	8020e08 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8020e0a:	2364      	movs	r3, #100	; 0x64
 8020e0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8020e0e:	693b      	ldr	r3, [r7, #16]
 8020e10:	2b64      	cmp	r3, #100	; 0x64
 8020e12:	d009      	beq.n	8020e28 <xTaskCreateStatic+0x60>
 8020e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e18:	f383 8811 	msr	BASEPRI, r3
 8020e1c:	f3bf 8f6f 	isb	sy
 8020e20:	f3bf 8f4f 	dsb	sy
 8020e24:	61bb      	str	r3, [r7, #24]
 8020e26:	e7fe      	b.n	8020e26 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8020e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	d01e      	beq.n	8020e6c <xTaskCreateStatic+0xa4>
 8020e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d01b      	beq.n	8020e6c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8020e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020e36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8020e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020e3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8020e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e40:	2202      	movs	r2, #2
 8020e42:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8020e46:	2300      	movs	r3, #0
 8020e48:	9303      	str	r3, [sp, #12]
 8020e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e4c:	9302      	str	r3, [sp, #8]
 8020e4e:	f107 0314 	add.w	r3, r7, #20
 8020e52:	9301      	str	r3, [sp, #4]
 8020e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e56:	9300      	str	r3, [sp, #0]
 8020e58:	683b      	ldr	r3, [r7, #0]
 8020e5a:	687a      	ldr	r2, [r7, #4]
 8020e5c:	68b9      	ldr	r1, [r7, #8]
 8020e5e:	68f8      	ldr	r0, [r7, #12]
 8020e60:	f000 f850 	bl	8020f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8020e64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020e66:	f000 f8d9 	bl	802101c <prvAddNewTaskToReadyList>
 8020e6a:	e001      	b.n	8020e70 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8020e6c:	2300      	movs	r3, #0
 8020e6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8020e70:	697b      	ldr	r3, [r7, #20]
	}
 8020e72:	4618      	mov	r0, r3
 8020e74:	3728      	adds	r7, #40	; 0x28
 8020e76:	46bd      	mov	sp, r7
 8020e78:	bd80      	pop	{r7, pc}

08020e7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8020e7a:	b580      	push	{r7, lr}
 8020e7c:	b08c      	sub	sp, #48	; 0x30
 8020e7e:	af04      	add	r7, sp, #16
 8020e80:	60f8      	str	r0, [r7, #12]
 8020e82:	60b9      	str	r1, [r7, #8]
 8020e84:	603b      	str	r3, [r7, #0]
 8020e86:	4613      	mov	r3, r2
 8020e88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020e8a:	88fb      	ldrh	r3, [r7, #6]
 8020e8c:	009b      	lsls	r3, r3, #2
 8020e8e:	4618      	mov	r0, r3
 8020e90:	f7fe fa4a 	bl	801f328 <pvPortMalloc>
 8020e94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8020e96:	697b      	ldr	r3, [r7, #20]
 8020e98:	2b00      	cmp	r3, #0
 8020e9a:	d00e      	beq.n	8020eba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8020e9c:	2064      	movs	r0, #100	; 0x64
 8020e9e:	f7fe fa43 	bl	801f328 <pvPortMalloc>
 8020ea2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8020ea4:	69fb      	ldr	r3, [r7, #28]
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	d003      	beq.n	8020eb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8020eaa:	69fb      	ldr	r3, [r7, #28]
 8020eac:	697a      	ldr	r2, [r7, #20]
 8020eae:	631a      	str	r2, [r3, #48]	; 0x30
 8020eb0:	e005      	b.n	8020ebe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8020eb2:	6978      	ldr	r0, [r7, #20]
 8020eb4:	f7fe fafe 	bl	801f4b4 <vPortFree>
 8020eb8:	e001      	b.n	8020ebe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8020eba:	2300      	movs	r3, #0
 8020ebc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8020ebe:	69fb      	ldr	r3, [r7, #28]
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	d017      	beq.n	8020ef4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8020ec4:	69fb      	ldr	r3, [r7, #28]
 8020ec6:	2200      	movs	r2, #0
 8020ec8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8020ecc:	88fa      	ldrh	r2, [r7, #6]
 8020ece:	2300      	movs	r3, #0
 8020ed0:	9303      	str	r3, [sp, #12]
 8020ed2:	69fb      	ldr	r3, [r7, #28]
 8020ed4:	9302      	str	r3, [sp, #8]
 8020ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ed8:	9301      	str	r3, [sp, #4]
 8020eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020edc:	9300      	str	r3, [sp, #0]
 8020ede:	683b      	ldr	r3, [r7, #0]
 8020ee0:	68b9      	ldr	r1, [r7, #8]
 8020ee2:	68f8      	ldr	r0, [r7, #12]
 8020ee4:	f000 f80e 	bl	8020f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8020ee8:	69f8      	ldr	r0, [r7, #28]
 8020eea:	f000 f897 	bl	802101c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8020eee:	2301      	movs	r3, #1
 8020ef0:	61bb      	str	r3, [r7, #24]
 8020ef2:	e002      	b.n	8020efa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8020ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8020ef8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8020efa:	69bb      	ldr	r3, [r7, #24]
	}
 8020efc:	4618      	mov	r0, r3
 8020efe:	3720      	adds	r7, #32
 8020f00:	46bd      	mov	sp, r7
 8020f02:	bd80      	pop	{r7, pc}

08020f04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8020f04:	b580      	push	{r7, lr}
 8020f06:	b088      	sub	sp, #32
 8020f08:	af00      	add	r7, sp, #0
 8020f0a:	60f8      	str	r0, [r7, #12]
 8020f0c:	60b9      	str	r1, [r7, #8]
 8020f0e:	607a      	str	r2, [r7, #4]
 8020f10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8020f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8020f16:	687b      	ldr	r3, [r7, #4]
 8020f18:	009b      	lsls	r3, r3, #2
 8020f1a:	461a      	mov	r2, r3
 8020f1c:	21a5      	movs	r1, #165	; 0xa5
 8020f1e:	f005 fe8c 	bl	8026c3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8020f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020f26:	687b      	ldr	r3, [r7, #4]
 8020f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020f2c:	3b01      	subs	r3, #1
 8020f2e:	009b      	lsls	r3, r3, #2
 8020f30:	4413      	add	r3, r2
 8020f32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8020f34:	69bb      	ldr	r3, [r7, #24]
 8020f36:	f023 0307 	bic.w	r3, r3, #7
 8020f3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8020f3c:	69bb      	ldr	r3, [r7, #24]
 8020f3e:	f003 0307 	and.w	r3, r3, #7
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d009      	beq.n	8020f5a <prvInitialiseNewTask+0x56>
 8020f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020f4a:	f383 8811 	msr	BASEPRI, r3
 8020f4e:	f3bf 8f6f 	isb	sy
 8020f52:	f3bf 8f4f 	dsb	sy
 8020f56:	617b      	str	r3, [r7, #20]
 8020f58:	e7fe      	b.n	8020f58 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8020f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f5c:	69ba      	ldr	r2, [r7, #24]
 8020f5e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8020f60:	2300      	movs	r3, #0
 8020f62:	61fb      	str	r3, [r7, #28]
 8020f64:	e012      	b.n	8020f8c <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8020f66:	68ba      	ldr	r2, [r7, #8]
 8020f68:	69fb      	ldr	r3, [r7, #28]
 8020f6a:	4413      	add	r3, r2
 8020f6c:	7819      	ldrb	r1, [r3, #0]
 8020f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020f70:	69fb      	ldr	r3, [r7, #28]
 8020f72:	4413      	add	r3, r2
 8020f74:	3334      	adds	r3, #52	; 0x34
 8020f76:	460a      	mov	r2, r1
 8020f78:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8020f7a:	68ba      	ldr	r2, [r7, #8]
 8020f7c:	69fb      	ldr	r3, [r7, #28]
 8020f7e:	4413      	add	r3, r2
 8020f80:	781b      	ldrb	r3, [r3, #0]
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d006      	beq.n	8020f94 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8020f86:	69fb      	ldr	r3, [r7, #28]
 8020f88:	3301      	adds	r3, #1
 8020f8a:	61fb      	str	r3, [r7, #28]
 8020f8c:	69fb      	ldr	r3, [r7, #28]
 8020f8e:	2b0f      	cmp	r3, #15
 8020f90:	d9e9      	bls.n	8020f66 <prvInitialiseNewTask+0x62>
 8020f92:	e000      	b.n	8020f96 <prvInitialiseNewTask+0x92>
		{
			break;
 8020f94:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8020f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f98:	2200      	movs	r2, #0
 8020f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8020f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fa0:	2b37      	cmp	r3, #55	; 0x37
 8020fa2:	d901      	bls.n	8020fa8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8020fa4:	2337      	movs	r3, #55	; 0x37
 8020fa6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8020fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020fac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8020fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020fb2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8020fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8020fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fbc:	3304      	adds	r3, #4
 8020fbe:	4618      	mov	r0, r3
 8020fc0:	f7fe fbae 	bl	801f720 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8020fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fc6:	3318      	adds	r3, #24
 8020fc8:	4618      	mov	r0, r3
 8020fca:	f7fe fba9 	bl	801f720 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8020fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020fd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8020fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8020fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020fe2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8020fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fe6:	2200      	movs	r2, #0
 8020fe8:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8020fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fec:	2200      	movs	r2, #0
 8020fee:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8020ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ff2:	2200      	movs	r2, #0
 8020ff4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8020ff8:	683a      	ldr	r2, [r7, #0]
 8020ffa:	68f9      	ldr	r1, [r7, #12]
 8020ffc:	69b8      	ldr	r0, [r7, #24]
 8020ffe:	f7fe fc23 	bl	801f848 <pxPortInitialiseStack>
 8021002:	4602      	mov	r2, r0
 8021004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021006:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8021008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802100a:	2b00      	cmp	r3, #0
 802100c:	d002      	beq.n	8021014 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 802100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021012:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021014:	bf00      	nop
 8021016:	3720      	adds	r7, #32
 8021018:	46bd      	mov	sp, r7
 802101a:	bd80      	pop	{r7, pc}

0802101c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 802101c:	b580      	push	{r7, lr}
 802101e:	b082      	sub	sp, #8
 8021020:	af00      	add	r7, sp, #0
 8021022:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8021024:	f7fe fd3a 	bl	801fa9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8021028:	4b2d      	ldr	r3, [pc, #180]	; (80210e0 <prvAddNewTaskToReadyList+0xc4>)
 802102a:	681b      	ldr	r3, [r3, #0]
 802102c:	3301      	adds	r3, #1
 802102e:	4a2c      	ldr	r2, [pc, #176]	; (80210e0 <prvAddNewTaskToReadyList+0xc4>)
 8021030:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8021032:	4b2c      	ldr	r3, [pc, #176]	; (80210e4 <prvAddNewTaskToReadyList+0xc8>)
 8021034:	681b      	ldr	r3, [r3, #0]
 8021036:	2b00      	cmp	r3, #0
 8021038:	d109      	bne.n	802104e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 802103a:	4a2a      	ldr	r2, [pc, #168]	; (80210e4 <prvAddNewTaskToReadyList+0xc8>)
 802103c:	687b      	ldr	r3, [r7, #4]
 802103e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8021040:	4b27      	ldr	r3, [pc, #156]	; (80210e0 <prvAddNewTaskToReadyList+0xc4>)
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	2b01      	cmp	r3, #1
 8021046:	d110      	bne.n	802106a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8021048:	f000 fcf8 	bl	8021a3c <prvInitialiseTaskLists>
 802104c:	e00d      	b.n	802106a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 802104e:	4b26      	ldr	r3, [pc, #152]	; (80210e8 <prvAddNewTaskToReadyList+0xcc>)
 8021050:	681b      	ldr	r3, [r3, #0]
 8021052:	2b00      	cmp	r3, #0
 8021054:	d109      	bne.n	802106a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8021056:	4b23      	ldr	r3, [pc, #140]	; (80210e4 <prvAddNewTaskToReadyList+0xc8>)
 8021058:	681b      	ldr	r3, [r3, #0]
 802105a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021060:	429a      	cmp	r2, r3
 8021062:	d802      	bhi.n	802106a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8021064:	4a1f      	ldr	r2, [pc, #124]	; (80210e4 <prvAddNewTaskToReadyList+0xc8>)
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 802106a:	4b20      	ldr	r3, [pc, #128]	; (80210ec <prvAddNewTaskToReadyList+0xd0>)
 802106c:	681b      	ldr	r3, [r3, #0]
 802106e:	3301      	adds	r3, #1
 8021070:	4a1e      	ldr	r2, [pc, #120]	; (80210ec <prvAddNewTaskToReadyList+0xd0>)
 8021072:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8021074:	4b1d      	ldr	r3, [pc, #116]	; (80210ec <prvAddNewTaskToReadyList+0xd0>)
 8021076:	681a      	ldr	r2, [r3, #0]
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 802107c:	687b      	ldr	r3, [r7, #4]
 802107e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021080:	4b1b      	ldr	r3, [pc, #108]	; (80210f0 <prvAddNewTaskToReadyList+0xd4>)
 8021082:	681b      	ldr	r3, [r3, #0]
 8021084:	429a      	cmp	r2, r3
 8021086:	d903      	bls.n	8021090 <prvAddNewTaskToReadyList+0x74>
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802108c:	4a18      	ldr	r2, [pc, #96]	; (80210f0 <prvAddNewTaskToReadyList+0xd4>)
 802108e:	6013      	str	r3, [r2, #0]
 8021090:	687b      	ldr	r3, [r7, #4]
 8021092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021094:	4613      	mov	r3, r2
 8021096:	009b      	lsls	r3, r3, #2
 8021098:	4413      	add	r3, r2
 802109a:	009b      	lsls	r3, r3, #2
 802109c:	4a15      	ldr	r2, [pc, #84]	; (80210f4 <prvAddNewTaskToReadyList+0xd8>)
 802109e:	441a      	add	r2, r3
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	3304      	adds	r3, #4
 80210a4:	4619      	mov	r1, r3
 80210a6:	4610      	mov	r0, r2
 80210a8:	f7fe fb47 	bl	801f73a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80210ac:	f7fe fd24 	bl	801faf8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80210b0:	4b0d      	ldr	r3, [pc, #52]	; (80210e8 <prvAddNewTaskToReadyList+0xcc>)
 80210b2:	681b      	ldr	r3, [r3, #0]
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	d00e      	beq.n	80210d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80210b8:	4b0a      	ldr	r3, [pc, #40]	; (80210e4 <prvAddNewTaskToReadyList+0xc8>)
 80210ba:	681b      	ldr	r3, [r3, #0]
 80210bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80210be:	687b      	ldr	r3, [r7, #4]
 80210c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80210c2:	429a      	cmp	r2, r3
 80210c4:	d207      	bcs.n	80210d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80210c6:	4b0c      	ldr	r3, [pc, #48]	; (80210f8 <prvAddNewTaskToReadyList+0xdc>)
 80210c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80210cc:	601a      	str	r2, [r3, #0]
 80210ce:	f3bf 8f4f 	dsb	sy
 80210d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80210d6:	bf00      	nop
 80210d8:	3708      	adds	r7, #8
 80210da:	46bd      	mov	sp, r7
 80210dc:	bd80      	pop	{r7, pc}
 80210de:	bf00      	nop
 80210e0:	20027324 	.word	0x20027324
 80210e4:	20026e50 	.word	0x20026e50
 80210e8:	20027330 	.word	0x20027330
 80210ec:	20027340 	.word	0x20027340
 80210f0:	2002732c 	.word	0x2002732c
 80210f4:	20026e54 	.word	0x20026e54
 80210f8:	e000ed04 	.word	0xe000ed04

080210fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80210fc:	b580      	push	{r7, lr}
 80210fe:	b084      	sub	sp, #16
 8021100:	af00      	add	r7, sp, #0
 8021102:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8021104:	2300      	movs	r3, #0
 8021106:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	2b00      	cmp	r3, #0
 802110c:	d016      	beq.n	802113c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 802110e:	4b13      	ldr	r3, [pc, #76]	; (802115c <vTaskDelay+0x60>)
 8021110:	681b      	ldr	r3, [r3, #0]
 8021112:	2b00      	cmp	r3, #0
 8021114:	d009      	beq.n	802112a <vTaskDelay+0x2e>
 8021116:	f04f 0350 	mov.w	r3, #80	; 0x50
 802111a:	f383 8811 	msr	BASEPRI, r3
 802111e:	f3bf 8f6f 	isb	sy
 8021122:	f3bf 8f4f 	dsb	sy
 8021126:	60bb      	str	r3, [r7, #8]
 8021128:	e7fe      	b.n	8021128 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 802112a:	f000 f881 	bl	8021230 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 802112e:	2100      	movs	r1, #0
 8021130:	6878      	ldr	r0, [r7, #4]
 8021132:	f001 f8a9 	bl	8022288 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8021136:	f000 f8c1 	bl	80212bc <xTaskResumeAll>
 802113a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802113c:	68fb      	ldr	r3, [r7, #12]
 802113e:	2b00      	cmp	r3, #0
 8021140:	d107      	bne.n	8021152 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8021142:	4b07      	ldr	r3, [pc, #28]	; (8021160 <vTaskDelay+0x64>)
 8021144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021148:	601a      	str	r2, [r3, #0]
 802114a:	f3bf 8f4f 	dsb	sy
 802114e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021152:	bf00      	nop
 8021154:	3710      	adds	r7, #16
 8021156:	46bd      	mov	sp, r7
 8021158:	bd80      	pop	{r7, pc}
 802115a:	bf00      	nop
 802115c:	2002734c 	.word	0x2002734c
 8021160:	e000ed04 	.word	0xe000ed04

08021164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8021164:	b580      	push	{r7, lr}
 8021166:	b08a      	sub	sp, #40	; 0x28
 8021168:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 802116a:	2300      	movs	r3, #0
 802116c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 802116e:	2300      	movs	r3, #0
 8021170:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8021172:	463a      	mov	r2, r7
 8021174:	1d39      	adds	r1, r7, #4
 8021176:	f107 0308 	add.w	r3, r7, #8
 802117a:	4618      	mov	r0, r3
 802117c:	f7fe f8a0 	bl	801f2c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8021180:	6839      	ldr	r1, [r7, #0]
 8021182:	687b      	ldr	r3, [r7, #4]
 8021184:	68ba      	ldr	r2, [r7, #8]
 8021186:	9202      	str	r2, [sp, #8]
 8021188:	9301      	str	r3, [sp, #4]
 802118a:	2300      	movs	r3, #0
 802118c:	9300      	str	r3, [sp, #0]
 802118e:	2300      	movs	r3, #0
 8021190:	460a      	mov	r2, r1
 8021192:	4921      	ldr	r1, [pc, #132]	; (8021218 <vTaskStartScheduler+0xb4>)
 8021194:	4821      	ldr	r0, [pc, #132]	; (802121c <vTaskStartScheduler+0xb8>)
 8021196:	f7ff fe17 	bl	8020dc8 <xTaskCreateStatic>
 802119a:	4602      	mov	r2, r0
 802119c:	4b20      	ldr	r3, [pc, #128]	; (8021220 <vTaskStartScheduler+0xbc>)
 802119e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80211a0:	4b1f      	ldr	r3, [pc, #124]	; (8021220 <vTaskStartScheduler+0xbc>)
 80211a2:	681b      	ldr	r3, [r3, #0]
 80211a4:	2b00      	cmp	r3, #0
 80211a6:	d002      	beq.n	80211ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80211a8:	2301      	movs	r3, #1
 80211aa:	617b      	str	r3, [r7, #20]
 80211ac:	e001      	b.n	80211b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80211ae:	2300      	movs	r3, #0
 80211b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80211b2:	697b      	ldr	r3, [r7, #20]
 80211b4:	2b01      	cmp	r3, #1
 80211b6:	d102      	bne.n	80211be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80211b8:	f001 f8ba 	bl	8022330 <xTimerCreateTimerTask>
 80211bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80211be:	697b      	ldr	r3, [r7, #20]
 80211c0:	2b01      	cmp	r3, #1
 80211c2:	d117      	bne.n	80211f4 <vTaskStartScheduler+0x90>
 80211c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80211c8:	f383 8811 	msr	BASEPRI, r3
 80211cc:	f3bf 8f6f 	isb	sy
 80211d0:	f3bf 8f4f 	dsb	sy
 80211d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80211d6:	4b13      	ldr	r3, [pc, #76]	; (8021224 <vTaskStartScheduler+0xc0>)
 80211d8:	f04f 32ff 	mov.w	r2, #4294967295
 80211dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80211de:	4b12      	ldr	r3, [pc, #72]	; (8021228 <vTaskStartScheduler+0xc4>)
 80211e0:	2201      	movs	r2, #1
 80211e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80211e4:	4b11      	ldr	r3, [pc, #68]	; (802122c <vTaskStartScheduler+0xc8>)
 80211e6:	2200      	movs	r2, #0
 80211e8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80211ea:	f7f0 f820 	bl	801122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80211ee:	f7fe fbb7 	bl	801f960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80211f2:	e00d      	b.n	8021210 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80211f4:	697b      	ldr	r3, [r7, #20]
 80211f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80211fa:	d109      	bne.n	8021210 <vTaskStartScheduler+0xac>
 80211fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021200:	f383 8811 	msr	BASEPRI, r3
 8021204:	f3bf 8f6f 	isb	sy
 8021208:	f3bf 8f4f 	dsb	sy
 802120c:	60fb      	str	r3, [r7, #12]
 802120e:	e7fe      	b.n	802120e <vTaskStartScheduler+0xaa>
}
 8021210:	bf00      	nop
 8021212:	3718      	adds	r7, #24
 8021214:	46bd      	mov	sp, r7
 8021216:	bd80      	pop	{r7, pc}
 8021218:	0802801c 	.word	0x0802801c
 802121c:	08021965 	.word	0x08021965
 8021220:	20027348 	.word	0x20027348
 8021224:	20027344 	.word	0x20027344
 8021228:	20027330 	.word	0x20027330
 802122c:	20027328 	.word	0x20027328

08021230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8021230:	b480      	push	{r7}
 8021232:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8021234:	4b04      	ldr	r3, [pc, #16]	; (8021248 <vTaskSuspendAll+0x18>)
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	3301      	adds	r3, #1
 802123a:	4a03      	ldr	r2, [pc, #12]	; (8021248 <vTaskSuspendAll+0x18>)
 802123c:	6013      	str	r3, [r2, #0]
}
 802123e:	bf00      	nop
 8021240:	46bd      	mov	sp, r7
 8021242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021246:	4770      	bx	lr
 8021248:	2002734c 	.word	0x2002734c

0802124c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 802124c:	b480      	push	{r7}
 802124e:	b083      	sub	sp, #12
 8021250:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8021252:	2300      	movs	r3, #0
 8021254:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8021256:	4b14      	ldr	r3, [pc, #80]	; (80212a8 <prvGetExpectedIdleTime+0x5c>)
 8021258:	681b      	ldr	r3, [r3, #0]
 802125a:	2b00      	cmp	r3, #0
 802125c:	d001      	beq.n	8021262 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 802125e:	2301      	movs	r3, #1
 8021260:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8021262:	4b12      	ldr	r3, [pc, #72]	; (80212ac <prvGetExpectedIdleTime+0x60>)
 8021264:	681b      	ldr	r3, [r3, #0]
 8021266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021268:	2b00      	cmp	r3, #0
 802126a:	d002      	beq.n	8021272 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 802126c:	2300      	movs	r3, #0
 802126e:	607b      	str	r3, [r7, #4]
 8021270:	e012      	b.n	8021298 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8021272:	4b0f      	ldr	r3, [pc, #60]	; (80212b0 <prvGetExpectedIdleTime+0x64>)
 8021274:	681b      	ldr	r3, [r3, #0]
 8021276:	2b01      	cmp	r3, #1
 8021278:	d902      	bls.n	8021280 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 802127a:	2300      	movs	r3, #0
 802127c:	607b      	str	r3, [r7, #4]
 802127e:	e00b      	b.n	8021298 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8021280:	683b      	ldr	r3, [r7, #0]
 8021282:	2b00      	cmp	r3, #0
 8021284:	d002      	beq.n	802128c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8021286:	2300      	movs	r3, #0
 8021288:	607b      	str	r3, [r7, #4]
 802128a:	e005      	b.n	8021298 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 802128c:	4b09      	ldr	r3, [pc, #36]	; (80212b4 <prvGetExpectedIdleTime+0x68>)
 802128e:	681a      	ldr	r2, [r3, #0]
 8021290:	4b09      	ldr	r3, [pc, #36]	; (80212b8 <prvGetExpectedIdleTime+0x6c>)
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	1ad3      	subs	r3, r2, r3
 8021296:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8021298:	687b      	ldr	r3, [r7, #4]
	}
 802129a:	4618      	mov	r0, r3
 802129c:	370c      	adds	r7, #12
 802129e:	46bd      	mov	sp, r7
 80212a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212a4:	4770      	bx	lr
 80212a6:	bf00      	nop
 80212a8:	2002732c 	.word	0x2002732c
 80212ac:	20026e50 	.word	0x20026e50
 80212b0:	20026e54 	.word	0x20026e54
 80212b4:	20027344 	.word	0x20027344
 80212b8:	20027328 	.word	0x20027328

080212bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80212bc:	b580      	push	{r7, lr}
 80212be:	b084      	sub	sp, #16
 80212c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80212c2:	2300      	movs	r3, #0
 80212c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80212c6:	2300      	movs	r3, #0
 80212c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80212ca:	4b41      	ldr	r3, [pc, #260]	; (80213d0 <xTaskResumeAll+0x114>)
 80212cc:	681b      	ldr	r3, [r3, #0]
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	d109      	bne.n	80212e6 <xTaskResumeAll+0x2a>
 80212d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80212d6:	f383 8811 	msr	BASEPRI, r3
 80212da:	f3bf 8f6f 	isb	sy
 80212de:	f3bf 8f4f 	dsb	sy
 80212e2:	603b      	str	r3, [r7, #0]
 80212e4:	e7fe      	b.n	80212e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80212e6:	f7fe fbd9 	bl	801fa9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80212ea:	4b39      	ldr	r3, [pc, #228]	; (80213d0 <xTaskResumeAll+0x114>)
 80212ec:	681b      	ldr	r3, [r3, #0]
 80212ee:	3b01      	subs	r3, #1
 80212f0:	4a37      	ldr	r2, [pc, #220]	; (80213d0 <xTaskResumeAll+0x114>)
 80212f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80212f4:	4b36      	ldr	r3, [pc, #216]	; (80213d0 <xTaskResumeAll+0x114>)
 80212f6:	681b      	ldr	r3, [r3, #0]
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	d162      	bne.n	80213c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80212fc:	4b35      	ldr	r3, [pc, #212]	; (80213d4 <xTaskResumeAll+0x118>)
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	2b00      	cmp	r3, #0
 8021302:	d05e      	beq.n	80213c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021304:	e02f      	b.n	8021366 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8021306:	4b34      	ldr	r3, [pc, #208]	; (80213d8 <xTaskResumeAll+0x11c>)
 8021308:	68db      	ldr	r3, [r3, #12]
 802130a:	68db      	ldr	r3, [r3, #12]
 802130c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802130e:	68fb      	ldr	r3, [r7, #12]
 8021310:	3318      	adds	r3, #24
 8021312:	4618      	mov	r0, r3
 8021314:	f7fe fa6e 	bl	801f7f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021318:	68fb      	ldr	r3, [r7, #12]
 802131a:	3304      	adds	r3, #4
 802131c:	4618      	mov	r0, r3
 802131e:	f7fe fa69 	bl	801f7f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8021322:	68fb      	ldr	r3, [r7, #12]
 8021324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021326:	4b2d      	ldr	r3, [pc, #180]	; (80213dc <xTaskResumeAll+0x120>)
 8021328:	681b      	ldr	r3, [r3, #0]
 802132a:	429a      	cmp	r2, r3
 802132c:	d903      	bls.n	8021336 <xTaskResumeAll+0x7a>
 802132e:	68fb      	ldr	r3, [r7, #12]
 8021330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021332:	4a2a      	ldr	r2, [pc, #168]	; (80213dc <xTaskResumeAll+0x120>)
 8021334:	6013      	str	r3, [r2, #0]
 8021336:	68fb      	ldr	r3, [r7, #12]
 8021338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802133a:	4613      	mov	r3, r2
 802133c:	009b      	lsls	r3, r3, #2
 802133e:	4413      	add	r3, r2
 8021340:	009b      	lsls	r3, r3, #2
 8021342:	4a27      	ldr	r2, [pc, #156]	; (80213e0 <xTaskResumeAll+0x124>)
 8021344:	441a      	add	r2, r3
 8021346:	68fb      	ldr	r3, [r7, #12]
 8021348:	3304      	adds	r3, #4
 802134a:	4619      	mov	r1, r3
 802134c:	4610      	mov	r0, r2
 802134e:	f7fe f9f4 	bl	801f73a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8021352:	68fb      	ldr	r3, [r7, #12]
 8021354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021356:	4b23      	ldr	r3, [pc, #140]	; (80213e4 <xTaskResumeAll+0x128>)
 8021358:	681b      	ldr	r3, [r3, #0]
 802135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802135c:	429a      	cmp	r2, r3
 802135e:	d302      	bcc.n	8021366 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8021360:	4b21      	ldr	r3, [pc, #132]	; (80213e8 <xTaskResumeAll+0x12c>)
 8021362:	2201      	movs	r2, #1
 8021364:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021366:	4b1c      	ldr	r3, [pc, #112]	; (80213d8 <xTaskResumeAll+0x11c>)
 8021368:	681b      	ldr	r3, [r3, #0]
 802136a:	2b00      	cmp	r3, #0
 802136c:	d1cb      	bne.n	8021306 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 802136e:	68fb      	ldr	r3, [r7, #12]
 8021370:	2b00      	cmp	r3, #0
 8021372:	d001      	beq.n	8021378 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8021374:	f000 fbfc 	bl	8021b70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8021378:	4b1c      	ldr	r3, [pc, #112]	; (80213ec <xTaskResumeAll+0x130>)
 802137a:	681b      	ldr	r3, [r3, #0]
 802137c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	2b00      	cmp	r3, #0
 8021382:	d010      	beq.n	80213a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8021384:	f000 f86c 	bl	8021460 <xTaskIncrementTick>
 8021388:	4603      	mov	r3, r0
 802138a:	2b00      	cmp	r3, #0
 802138c:	d002      	beq.n	8021394 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 802138e:	4b16      	ldr	r3, [pc, #88]	; (80213e8 <xTaskResumeAll+0x12c>)
 8021390:	2201      	movs	r2, #1
 8021392:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8021394:	687b      	ldr	r3, [r7, #4]
 8021396:	3b01      	subs	r3, #1
 8021398:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 802139a:	687b      	ldr	r3, [r7, #4]
 802139c:	2b00      	cmp	r3, #0
 802139e:	d1f1      	bne.n	8021384 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80213a0:	4b12      	ldr	r3, [pc, #72]	; (80213ec <xTaskResumeAll+0x130>)
 80213a2:	2200      	movs	r2, #0
 80213a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80213a6:	4b10      	ldr	r3, [pc, #64]	; (80213e8 <xTaskResumeAll+0x12c>)
 80213a8:	681b      	ldr	r3, [r3, #0]
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	d009      	beq.n	80213c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80213ae:	2301      	movs	r3, #1
 80213b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80213b2:	4b0f      	ldr	r3, [pc, #60]	; (80213f0 <xTaskResumeAll+0x134>)
 80213b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80213b8:	601a      	str	r2, [r3, #0]
 80213ba:	f3bf 8f4f 	dsb	sy
 80213be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80213c2:	f7fe fb99 	bl	801faf8 <vPortExitCritical>

	return xAlreadyYielded;
 80213c6:	68bb      	ldr	r3, [r7, #8]
}
 80213c8:	4618      	mov	r0, r3
 80213ca:	3710      	adds	r7, #16
 80213cc:	46bd      	mov	sp, r7
 80213ce:	bd80      	pop	{r7, pc}
 80213d0:	2002734c 	.word	0x2002734c
 80213d4:	20027324 	.word	0x20027324
 80213d8:	200272e4 	.word	0x200272e4
 80213dc:	2002732c 	.word	0x2002732c
 80213e0:	20026e54 	.word	0x20026e54
 80213e4:	20026e50 	.word	0x20026e50
 80213e8:	20027338 	.word	0x20027338
 80213ec:	20027334 	.word	0x20027334
 80213f0:	e000ed04 	.word	0xe000ed04

080213f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80213f4:	b480      	push	{r7}
 80213f6:	b083      	sub	sp, #12
 80213f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80213fa:	4b05      	ldr	r3, [pc, #20]	; (8021410 <xTaskGetTickCount+0x1c>)
 80213fc:	681b      	ldr	r3, [r3, #0]
 80213fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8021400:	687b      	ldr	r3, [r7, #4]
}
 8021402:	4618      	mov	r0, r3
 8021404:	370c      	adds	r7, #12
 8021406:	46bd      	mov	sp, r7
 8021408:	f85d 7b04 	ldr.w	r7, [sp], #4
 802140c:	4770      	bx	lr
 802140e:	bf00      	nop
 8021410:	20027328 	.word	0x20027328

08021414 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8021414:	b480      	push	{r7}
 8021416:	b085      	sub	sp, #20
 8021418:	af00      	add	r7, sp, #0
 802141a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 802141c:	4b0e      	ldr	r3, [pc, #56]	; (8021458 <vTaskStepTick+0x44>)
 802141e:	681a      	ldr	r2, [r3, #0]
 8021420:	687b      	ldr	r3, [r7, #4]
 8021422:	441a      	add	r2, r3
 8021424:	4b0d      	ldr	r3, [pc, #52]	; (802145c <vTaskStepTick+0x48>)
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	429a      	cmp	r2, r3
 802142a:	d909      	bls.n	8021440 <vTaskStepTick+0x2c>
 802142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021430:	f383 8811 	msr	BASEPRI, r3
 8021434:	f3bf 8f6f 	isb	sy
 8021438:	f3bf 8f4f 	dsb	sy
 802143c:	60fb      	str	r3, [r7, #12]
 802143e:	e7fe      	b.n	802143e <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 8021440:	4b05      	ldr	r3, [pc, #20]	; (8021458 <vTaskStepTick+0x44>)
 8021442:	681a      	ldr	r2, [r3, #0]
 8021444:	687b      	ldr	r3, [r7, #4]
 8021446:	4413      	add	r3, r2
 8021448:	4a03      	ldr	r2, [pc, #12]	; (8021458 <vTaskStepTick+0x44>)
 802144a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 802144c:	bf00      	nop
 802144e:	3714      	adds	r7, #20
 8021450:	46bd      	mov	sp, r7
 8021452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021456:	4770      	bx	lr
 8021458:	20027328 	.word	0x20027328
 802145c:	20027344 	.word	0x20027344

08021460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8021460:	b580      	push	{r7, lr}
 8021462:	b086      	sub	sp, #24
 8021464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8021466:	2300      	movs	r3, #0
 8021468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802146a:	4b55      	ldr	r3, [pc, #340]	; (80215c0 <xTaskIncrementTick+0x160>)
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	2b00      	cmp	r3, #0
 8021470:	f040 8093 	bne.w	802159a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8021474:	4b53      	ldr	r3, [pc, #332]	; (80215c4 <xTaskIncrementTick+0x164>)
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	3301      	adds	r3, #1
 802147a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 802147c:	4a51      	ldr	r2, [pc, #324]	; (80215c4 <xTaskIncrementTick+0x164>)
 802147e:	693b      	ldr	r3, [r7, #16]
 8021480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8021482:	693b      	ldr	r3, [r7, #16]
 8021484:	2b00      	cmp	r3, #0
 8021486:	d11f      	bne.n	80214c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8021488:	4b4f      	ldr	r3, [pc, #316]	; (80215c8 <xTaskIncrementTick+0x168>)
 802148a:	681b      	ldr	r3, [r3, #0]
 802148c:	681b      	ldr	r3, [r3, #0]
 802148e:	2b00      	cmp	r3, #0
 8021490:	d009      	beq.n	80214a6 <xTaskIncrementTick+0x46>
 8021492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021496:	f383 8811 	msr	BASEPRI, r3
 802149a:	f3bf 8f6f 	isb	sy
 802149e:	f3bf 8f4f 	dsb	sy
 80214a2:	603b      	str	r3, [r7, #0]
 80214a4:	e7fe      	b.n	80214a4 <xTaskIncrementTick+0x44>
 80214a6:	4b48      	ldr	r3, [pc, #288]	; (80215c8 <xTaskIncrementTick+0x168>)
 80214a8:	681b      	ldr	r3, [r3, #0]
 80214aa:	60fb      	str	r3, [r7, #12]
 80214ac:	4b47      	ldr	r3, [pc, #284]	; (80215cc <xTaskIncrementTick+0x16c>)
 80214ae:	681b      	ldr	r3, [r3, #0]
 80214b0:	4a45      	ldr	r2, [pc, #276]	; (80215c8 <xTaskIncrementTick+0x168>)
 80214b2:	6013      	str	r3, [r2, #0]
 80214b4:	4a45      	ldr	r2, [pc, #276]	; (80215cc <xTaskIncrementTick+0x16c>)
 80214b6:	68fb      	ldr	r3, [r7, #12]
 80214b8:	6013      	str	r3, [r2, #0]
 80214ba:	4b45      	ldr	r3, [pc, #276]	; (80215d0 <xTaskIncrementTick+0x170>)
 80214bc:	681b      	ldr	r3, [r3, #0]
 80214be:	3301      	adds	r3, #1
 80214c0:	4a43      	ldr	r2, [pc, #268]	; (80215d0 <xTaskIncrementTick+0x170>)
 80214c2:	6013      	str	r3, [r2, #0]
 80214c4:	f000 fb54 	bl	8021b70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80214c8:	4b42      	ldr	r3, [pc, #264]	; (80215d4 <xTaskIncrementTick+0x174>)
 80214ca:	681b      	ldr	r3, [r3, #0]
 80214cc:	693a      	ldr	r2, [r7, #16]
 80214ce:	429a      	cmp	r2, r3
 80214d0:	d34e      	bcc.n	8021570 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80214d2:	4b3d      	ldr	r3, [pc, #244]	; (80215c8 <xTaskIncrementTick+0x168>)
 80214d4:	681b      	ldr	r3, [r3, #0]
 80214d6:	681b      	ldr	r3, [r3, #0]
 80214d8:	2b00      	cmp	r3, #0
 80214da:	d101      	bne.n	80214e0 <xTaskIncrementTick+0x80>
 80214dc:	2301      	movs	r3, #1
 80214de:	e000      	b.n	80214e2 <xTaskIncrementTick+0x82>
 80214e0:	2300      	movs	r3, #0
 80214e2:	2b00      	cmp	r3, #0
 80214e4:	d004      	beq.n	80214f0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80214e6:	4b3b      	ldr	r3, [pc, #236]	; (80215d4 <xTaskIncrementTick+0x174>)
 80214e8:	f04f 32ff 	mov.w	r2, #4294967295
 80214ec:	601a      	str	r2, [r3, #0]
					break;
 80214ee:	e03f      	b.n	8021570 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80214f0:	4b35      	ldr	r3, [pc, #212]	; (80215c8 <xTaskIncrementTick+0x168>)
 80214f2:	681b      	ldr	r3, [r3, #0]
 80214f4:	68db      	ldr	r3, [r3, #12]
 80214f6:	68db      	ldr	r3, [r3, #12]
 80214f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80214fa:	68bb      	ldr	r3, [r7, #8]
 80214fc:	685b      	ldr	r3, [r3, #4]
 80214fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8021500:	693a      	ldr	r2, [r7, #16]
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	429a      	cmp	r2, r3
 8021506:	d203      	bcs.n	8021510 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8021508:	4a32      	ldr	r2, [pc, #200]	; (80215d4 <xTaskIncrementTick+0x174>)
 802150a:	687b      	ldr	r3, [r7, #4]
 802150c:	6013      	str	r3, [r2, #0]
						break;
 802150e:	e02f      	b.n	8021570 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021510:	68bb      	ldr	r3, [r7, #8]
 8021512:	3304      	adds	r3, #4
 8021514:	4618      	mov	r0, r3
 8021516:	f7fe f96d 	bl	801f7f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802151a:	68bb      	ldr	r3, [r7, #8]
 802151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802151e:	2b00      	cmp	r3, #0
 8021520:	d004      	beq.n	802152c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8021522:	68bb      	ldr	r3, [r7, #8]
 8021524:	3318      	adds	r3, #24
 8021526:	4618      	mov	r0, r3
 8021528:	f7fe f964 	bl	801f7f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802152c:	68bb      	ldr	r3, [r7, #8]
 802152e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021530:	4b29      	ldr	r3, [pc, #164]	; (80215d8 <xTaskIncrementTick+0x178>)
 8021532:	681b      	ldr	r3, [r3, #0]
 8021534:	429a      	cmp	r2, r3
 8021536:	d903      	bls.n	8021540 <xTaskIncrementTick+0xe0>
 8021538:	68bb      	ldr	r3, [r7, #8]
 802153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802153c:	4a26      	ldr	r2, [pc, #152]	; (80215d8 <xTaskIncrementTick+0x178>)
 802153e:	6013      	str	r3, [r2, #0]
 8021540:	68bb      	ldr	r3, [r7, #8]
 8021542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021544:	4613      	mov	r3, r2
 8021546:	009b      	lsls	r3, r3, #2
 8021548:	4413      	add	r3, r2
 802154a:	009b      	lsls	r3, r3, #2
 802154c:	4a23      	ldr	r2, [pc, #140]	; (80215dc <xTaskIncrementTick+0x17c>)
 802154e:	441a      	add	r2, r3
 8021550:	68bb      	ldr	r3, [r7, #8]
 8021552:	3304      	adds	r3, #4
 8021554:	4619      	mov	r1, r3
 8021556:	4610      	mov	r0, r2
 8021558:	f7fe f8ef 	bl	801f73a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802155c:	68bb      	ldr	r3, [r7, #8]
 802155e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021560:	4b1f      	ldr	r3, [pc, #124]	; (80215e0 <xTaskIncrementTick+0x180>)
 8021562:	681b      	ldr	r3, [r3, #0]
 8021564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021566:	429a      	cmp	r2, r3
 8021568:	d3b3      	bcc.n	80214d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 802156a:	2301      	movs	r3, #1
 802156c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802156e:	e7b0      	b.n	80214d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8021570:	4b1b      	ldr	r3, [pc, #108]	; (80215e0 <xTaskIncrementTick+0x180>)
 8021572:	681b      	ldr	r3, [r3, #0]
 8021574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021576:	4919      	ldr	r1, [pc, #100]	; (80215dc <xTaskIncrementTick+0x17c>)
 8021578:	4613      	mov	r3, r2
 802157a:	009b      	lsls	r3, r3, #2
 802157c:	4413      	add	r3, r2
 802157e:	009b      	lsls	r3, r3, #2
 8021580:	440b      	add	r3, r1
 8021582:	681b      	ldr	r3, [r3, #0]
 8021584:	2b01      	cmp	r3, #1
 8021586:	d901      	bls.n	802158c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8021588:	2301      	movs	r3, #1
 802158a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 802158c:	4b15      	ldr	r3, [pc, #84]	; (80215e4 <xTaskIncrementTick+0x184>)
 802158e:	681b      	ldr	r3, [r3, #0]
 8021590:	2b00      	cmp	r3, #0
 8021592:	d109      	bne.n	80215a8 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8021594:	f7ef fe59 	bl	801124a <vApplicationTickHook>
 8021598:	e006      	b.n	80215a8 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 802159a:	4b12      	ldr	r3, [pc, #72]	; (80215e4 <xTaskIncrementTick+0x184>)
 802159c:	681b      	ldr	r3, [r3, #0]
 802159e:	3301      	adds	r3, #1
 80215a0:	4a10      	ldr	r2, [pc, #64]	; (80215e4 <xTaskIncrementTick+0x184>)
 80215a2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80215a4:	f7ef fe51 	bl	801124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80215a8:	4b0f      	ldr	r3, [pc, #60]	; (80215e8 <xTaskIncrementTick+0x188>)
 80215aa:	681b      	ldr	r3, [r3, #0]
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d001      	beq.n	80215b4 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 80215b0:	2301      	movs	r3, #1
 80215b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80215b4:	697b      	ldr	r3, [r7, #20]
}
 80215b6:	4618      	mov	r0, r3
 80215b8:	3718      	adds	r7, #24
 80215ba:	46bd      	mov	sp, r7
 80215bc:	bd80      	pop	{r7, pc}
 80215be:	bf00      	nop
 80215c0:	2002734c 	.word	0x2002734c
 80215c4:	20027328 	.word	0x20027328
 80215c8:	200272dc 	.word	0x200272dc
 80215cc:	200272e0 	.word	0x200272e0
 80215d0:	2002733c 	.word	0x2002733c
 80215d4:	20027344 	.word	0x20027344
 80215d8:	2002732c 	.word	0x2002732c
 80215dc:	20026e54 	.word	0x20026e54
 80215e0:	20026e50 	.word	0x20026e50
 80215e4:	20027334 	.word	0x20027334
 80215e8:	20027338 	.word	0x20027338

080215ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80215ec:	b580      	push	{r7, lr}
 80215ee:	b084      	sub	sp, #16
 80215f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80215f2:	4b3b      	ldr	r3, [pc, #236]	; (80216e0 <vTaskSwitchContext+0xf4>)
 80215f4:	681b      	ldr	r3, [r3, #0]
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d003      	beq.n	8021602 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80215fa:	4b3a      	ldr	r3, [pc, #232]	; (80216e4 <vTaskSwitchContext+0xf8>)
 80215fc:	2201      	movs	r2, #1
 80215fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8021600:	e06a      	b.n	80216d8 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8021602:	4b38      	ldr	r3, [pc, #224]	; (80216e4 <vTaskSwitchContext+0xf8>)
 8021604:	2200      	movs	r2, #0
 8021606:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8021608:	f7ef fe18 	bl	801123c <getRunTimeCounterValue>
 802160c:	4602      	mov	r2, r0
 802160e:	4b36      	ldr	r3, [pc, #216]	; (80216e8 <vTaskSwitchContext+0xfc>)
 8021610:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8021612:	4b35      	ldr	r3, [pc, #212]	; (80216e8 <vTaskSwitchContext+0xfc>)
 8021614:	681a      	ldr	r2, [r3, #0]
 8021616:	4b35      	ldr	r3, [pc, #212]	; (80216ec <vTaskSwitchContext+0x100>)
 8021618:	681b      	ldr	r3, [r3, #0]
 802161a:	429a      	cmp	r2, r3
 802161c:	d909      	bls.n	8021632 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 802161e:	4b34      	ldr	r3, [pc, #208]	; (80216f0 <vTaskSwitchContext+0x104>)
 8021620:	681b      	ldr	r3, [r3, #0]
 8021622:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8021624:	4a30      	ldr	r2, [pc, #192]	; (80216e8 <vTaskSwitchContext+0xfc>)
 8021626:	6810      	ldr	r0, [r2, #0]
 8021628:	4a30      	ldr	r2, [pc, #192]	; (80216ec <vTaskSwitchContext+0x100>)
 802162a:	6812      	ldr	r2, [r2, #0]
 802162c:	1a82      	subs	r2, r0, r2
 802162e:	440a      	add	r2, r1
 8021630:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8021632:	4b2d      	ldr	r3, [pc, #180]	; (80216e8 <vTaskSwitchContext+0xfc>)
 8021634:	681b      	ldr	r3, [r3, #0]
 8021636:	4a2d      	ldr	r2, [pc, #180]	; (80216ec <vTaskSwitchContext+0x100>)
 8021638:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 802163a:	4b2d      	ldr	r3, [pc, #180]	; (80216f0 <vTaskSwitchContext+0x104>)
 802163c:	681b      	ldr	r3, [r3, #0]
 802163e:	681a      	ldr	r2, [r3, #0]
 8021640:	4b2b      	ldr	r3, [pc, #172]	; (80216f0 <vTaskSwitchContext+0x104>)
 8021642:	681b      	ldr	r3, [r3, #0]
 8021644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021646:	429a      	cmp	r2, r3
 8021648:	d808      	bhi.n	802165c <vTaskSwitchContext+0x70>
 802164a:	4b29      	ldr	r3, [pc, #164]	; (80216f0 <vTaskSwitchContext+0x104>)
 802164c:	681a      	ldr	r2, [r3, #0]
 802164e:	4b28      	ldr	r3, [pc, #160]	; (80216f0 <vTaskSwitchContext+0x104>)
 8021650:	681b      	ldr	r3, [r3, #0]
 8021652:	3334      	adds	r3, #52	; 0x34
 8021654:	4619      	mov	r1, r3
 8021656:	4610      	mov	r0, r2
 8021658:	f7ef fdfe 	bl	8011258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 802165c:	4b25      	ldr	r3, [pc, #148]	; (80216f4 <vTaskSwitchContext+0x108>)
 802165e:	681b      	ldr	r3, [r3, #0]
 8021660:	60fb      	str	r3, [r7, #12]
 8021662:	e00f      	b.n	8021684 <vTaskSwitchContext+0x98>
 8021664:	68fb      	ldr	r3, [r7, #12]
 8021666:	2b00      	cmp	r3, #0
 8021668:	d109      	bne.n	802167e <vTaskSwitchContext+0x92>
 802166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802166e:	f383 8811 	msr	BASEPRI, r3
 8021672:	f3bf 8f6f 	isb	sy
 8021676:	f3bf 8f4f 	dsb	sy
 802167a:	607b      	str	r3, [r7, #4]
 802167c:	e7fe      	b.n	802167c <vTaskSwitchContext+0x90>
 802167e:	68fb      	ldr	r3, [r7, #12]
 8021680:	3b01      	subs	r3, #1
 8021682:	60fb      	str	r3, [r7, #12]
 8021684:	491c      	ldr	r1, [pc, #112]	; (80216f8 <vTaskSwitchContext+0x10c>)
 8021686:	68fa      	ldr	r2, [r7, #12]
 8021688:	4613      	mov	r3, r2
 802168a:	009b      	lsls	r3, r3, #2
 802168c:	4413      	add	r3, r2
 802168e:	009b      	lsls	r3, r3, #2
 8021690:	440b      	add	r3, r1
 8021692:	681b      	ldr	r3, [r3, #0]
 8021694:	2b00      	cmp	r3, #0
 8021696:	d0e5      	beq.n	8021664 <vTaskSwitchContext+0x78>
 8021698:	68fa      	ldr	r2, [r7, #12]
 802169a:	4613      	mov	r3, r2
 802169c:	009b      	lsls	r3, r3, #2
 802169e:	4413      	add	r3, r2
 80216a0:	009b      	lsls	r3, r3, #2
 80216a2:	4a15      	ldr	r2, [pc, #84]	; (80216f8 <vTaskSwitchContext+0x10c>)
 80216a4:	4413      	add	r3, r2
 80216a6:	60bb      	str	r3, [r7, #8]
 80216a8:	68bb      	ldr	r3, [r7, #8]
 80216aa:	685b      	ldr	r3, [r3, #4]
 80216ac:	685a      	ldr	r2, [r3, #4]
 80216ae:	68bb      	ldr	r3, [r7, #8]
 80216b0:	605a      	str	r2, [r3, #4]
 80216b2:	68bb      	ldr	r3, [r7, #8]
 80216b4:	685a      	ldr	r2, [r3, #4]
 80216b6:	68bb      	ldr	r3, [r7, #8]
 80216b8:	3308      	adds	r3, #8
 80216ba:	429a      	cmp	r2, r3
 80216bc:	d104      	bne.n	80216c8 <vTaskSwitchContext+0xdc>
 80216be:	68bb      	ldr	r3, [r7, #8]
 80216c0:	685b      	ldr	r3, [r3, #4]
 80216c2:	685a      	ldr	r2, [r3, #4]
 80216c4:	68bb      	ldr	r3, [r7, #8]
 80216c6:	605a      	str	r2, [r3, #4]
 80216c8:	68bb      	ldr	r3, [r7, #8]
 80216ca:	685b      	ldr	r3, [r3, #4]
 80216cc:	68db      	ldr	r3, [r3, #12]
 80216ce:	4a08      	ldr	r2, [pc, #32]	; (80216f0 <vTaskSwitchContext+0x104>)
 80216d0:	6013      	str	r3, [r2, #0]
 80216d2:	4a08      	ldr	r2, [pc, #32]	; (80216f4 <vTaskSwitchContext+0x108>)
 80216d4:	68fb      	ldr	r3, [r7, #12]
 80216d6:	6013      	str	r3, [r2, #0]
}
 80216d8:	bf00      	nop
 80216da:	3710      	adds	r7, #16
 80216dc:	46bd      	mov	sp, r7
 80216de:	bd80      	pop	{r7, pc}
 80216e0:	2002734c 	.word	0x2002734c
 80216e4:	20027338 	.word	0x20027338
 80216e8:	20027354 	.word	0x20027354
 80216ec:	20027350 	.word	0x20027350
 80216f0:	20026e50 	.word	0x20026e50
 80216f4:	2002732c 	.word	0x2002732c
 80216f8:	20026e54 	.word	0x20026e54

080216fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80216fc:	b580      	push	{r7, lr}
 80216fe:	b084      	sub	sp, #16
 8021700:	af00      	add	r7, sp, #0
 8021702:	6078      	str	r0, [r7, #4]
 8021704:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8021706:	687b      	ldr	r3, [r7, #4]
 8021708:	2b00      	cmp	r3, #0
 802170a:	d109      	bne.n	8021720 <vTaskPlaceOnEventList+0x24>
 802170c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021710:	f383 8811 	msr	BASEPRI, r3
 8021714:	f3bf 8f6f 	isb	sy
 8021718:	f3bf 8f4f 	dsb	sy
 802171c:	60fb      	str	r3, [r7, #12]
 802171e:	e7fe      	b.n	802171e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8021720:	4b07      	ldr	r3, [pc, #28]	; (8021740 <vTaskPlaceOnEventList+0x44>)
 8021722:	681b      	ldr	r3, [r3, #0]
 8021724:	3318      	adds	r3, #24
 8021726:	4619      	mov	r1, r3
 8021728:	6878      	ldr	r0, [r7, #4]
 802172a:	f7fe f82a 	bl	801f782 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 802172e:	2101      	movs	r1, #1
 8021730:	6838      	ldr	r0, [r7, #0]
 8021732:	f000 fda9 	bl	8022288 <prvAddCurrentTaskToDelayedList>
}
 8021736:	bf00      	nop
 8021738:	3710      	adds	r7, #16
 802173a:	46bd      	mov	sp, r7
 802173c:	bd80      	pop	{r7, pc}
 802173e:	bf00      	nop
 8021740:	20026e50 	.word	0x20026e50

08021744 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8021744:	b580      	push	{r7, lr}
 8021746:	b086      	sub	sp, #24
 8021748:	af00      	add	r7, sp, #0
 802174a:	60f8      	str	r0, [r7, #12]
 802174c:	60b9      	str	r1, [r7, #8]
 802174e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8021750:	68fb      	ldr	r3, [r7, #12]
 8021752:	2b00      	cmp	r3, #0
 8021754:	d109      	bne.n	802176a <vTaskPlaceOnEventListRestricted+0x26>
 8021756:	f04f 0350 	mov.w	r3, #80	; 0x50
 802175a:	f383 8811 	msr	BASEPRI, r3
 802175e:	f3bf 8f6f 	isb	sy
 8021762:	f3bf 8f4f 	dsb	sy
 8021766:	617b      	str	r3, [r7, #20]
 8021768:	e7fe      	b.n	8021768 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802176a:	4b0a      	ldr	r3, [pc, #40]	; (8021794 <vTaskPlaceOnEventListRestricted+0x50>)
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	3318      	adds	r3, #24
 8021770:	4619      	mov	r1, r3
 8021772:	68f8      	ldr	r0, [r7, #12]
 8021774:	f7fd ffe1 	bl	801f73a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8021778:	687b      	ldr	r3, [r7, #4]
 802177a:	2b00      	cmp	r3, #0
 802177c:	d002      	beq.n	8021784 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 802177e:	f04f 33ff 	mov.w	r3, #4294967295
 8021782:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8021784:	6879      	ldr	r1, [r7, #4]
 8021786:	68b8      	ldr	r0, [r7, #8]
 8021788:	f000 fd7e 	bl	8022288 <prvAddCurrentTaskToDelayedList>
	}
 802178c:	bf00      	nop
 802178e:	3718      	adds	r7, #24
 8021790:	46bd      	mov	sp, r7
 8021792:	bd80      	pop	{r7, pc}
 8021794:	20026e50 	.word	0x20026e50

08021798 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8021798:	b580      	push	{r7, lr}
 802179a:	b086      	sub	sp, #24
 802179c:	af00      	add	r7, sp, #0
 802179e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	68db      	ldr	r3, [r3, #12]
 80217a4:	68db      	ldr	r3, [r3, #12]
 80217a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80217a8:	693b      	ldr	r3, [r7, #16]
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	d109      	bne.n	80217c2 <xTaskRemoveFromEventList+0x2a>
 80217ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80217b2:	f383 8811 	msr	BASEPRI, r3
 80217b6:	f3bf 8f6f 	isb	sy
 80217ba:	f3bf 8f4f 	dsb	sy
 80217be:	60fb      	str	r3, [r7, #12]
 80217c0:	e7fe      	b.n	80217c0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80217c2:	693b      	ldr	r3, [r7, #16]
 80217c4:	3318      	adds	r3, #24
 80217c6:	4618      	mov	r0, r3
 80217c8:	f7fe f814 	bl	801f7f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80217cc:	4b1e      	ldr	r3, [pc, #120]	; (8021848 <xTaskRemoveFromEventList+0xb0>)
 80217ce:	681b      	ldr	r3, [r3, #0]
 80217d0:	2b00      	cmp	r3, #0
 80217d2:	d11d      	bne.n	8021810 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80217d4:	693b      	ldr	r3, [r7, #16]
 80217d6:	3304      	adds	r3, #4
 80217d8:	4618      	mov	r0, r3
 80217da:	f7fe f80b 	bl	801f7f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80217de:	693b      	ldr	r3, [r7, #16]
 80217e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80217e2:	4b1a      	ldr	r3, [pc, #104]	; (802184c <xTaskRemoveFromEventList+0xb4>)
 80217e4:	681b      	ldr	r3, [r3, #0]
 80217e6:	429a      	cmp	r2, r3
 80217e8:	d903      	bls.n	80217f2 <xTaskRemoveFromEventList+0x5a>
 80217ea:	693b      	ldr	r3, [r7, #16]
 80217ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80217ee:	4a17      	ldr	r2, [pc, #92]	; (802184c <xTaskRemoveFromEventList+0xb4>)
 80217f0:	6013      	str	r3, [r2, #0]
 80217f2:	693b      	ldr	r3, [r7, #16]
 80217f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80217f6:	4613      	mov	r3, r2
 80217f8:	009b      	lsls	r3, r3, #2
 80217fa:	4413      	add	r3, r2
 80217fc:	009b      	lsls	r3, r3, #2
 80217fe:	4a14      	ldr	r2, [pc, #80]	; (8021850 <xTaskRemoveFromEventList+0xb8>)
 8021800:	441a      	add	r2, r3
 8021802:	693b      	ldr	r3, [r7, #16]
 8021804:	3304      	adds	r3, #4
 8021806:	4619      	mov	r1, r3
 8021808:	4610      	mov	r0, r2
 802180a:	f7fd ff96 	bl	801f73a <vListInsertEnd>
 802180e:	e005      	b.n	802181c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8021810:	693b      	ldr	r3, [r7, #16]
 8021812:	3318      	adds	r3, #24
 8021814:	4619      	mov	r1, r3
 8021816:	480f      	ldr	r0, [pc, #60]	; (8021854 <xTaskRemoveFromEventList+0xbc>)
 8021818:	f7fd ff8f 	bl	801f73a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 802181c:	693b      	ldr	r3, [r7, #16]
 802181e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021820:	4b0d      	ldr	r3, [pc, #52]	; (8021858 <xTaskRemoveFromEventList+0xc0>)
 8021822:	681b      	ldr	r3, [r3, #0]
 8021824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021826:	429a      	cmp	r2, r3
 8021828:	d905      	bls.n	8021836 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 802182a:	2301      	movs	r3, #1
 802182c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 802182e:	4b0b      	ldr	r3, [pc, #44]	; (802185c <xTaskRemoveFromEventList+0xc4>)
 8021830:	2201      	movs	r2, #1
 8021832:	601a      	str	r2, [r3, #0]
 8021834:	e001      	b.n	802183a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8021836:	2300      	movs	r3, #0
 8021838:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 802183a:	f000 f999 	bl	8021b70 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 802183e:	697b      	ldr	r3, [r7, #20]
}
 8021840:	4618      	mov	r0, r3
 8021842:	3718      	adds	r7, #24
 8021844:	46bd      	mov	sp, r7
 8021846:	bd80      	pop	{r7, pc}
 8021848:	2002734c 	.word	0x2002734c
 802184c:	2002732c 	.word	0x2002732c
 8021850:	20026e54 	.word	0x20026e54
 8021854:	200272e4 	.word	0x200272e4
 8021858:	20026e50 	.word	0x20026e50
 802185c:	20027338 	.word	0x20027338

08021860 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8021860:	b480      	push	{r7}
 8021862:	b083      	sub	sp, #12
 8021864:	af00      	add	r7, sp, #0
 8021866:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8021868:	4b06      	ldr	r3, [pc, #24]	; (8021884 <vTaskInternalSetTimeOutState+0x24>)
 802186a:	681a      	ldr	r2, [r3, #0]
 802186c:	687b      	ldr	r3, [r7, #4]
 802186e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8021870:	4b05      	ldr	r3, [pc, #20]	; (8021888 <vTaskInternalSetTimeOutState+0x28>)
 8021872:	681a      	ldr	r2, [r3, #0]
 8021874:	687b      	ldr	r3, [r7, #4]
 8021876:	605a      	str	r2, [r3, #4]
}
 8021878:	bf00      	nop
 802187a:	370c      	adds	r7, #12
 802187c:	46bd      	mov	sp, r7
 802187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021882:	4770      	bx	lr
 8021884:	2002733c 	.word	0x2002733c
 8021888:	20027328 	.word	0x20027328

0802188c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 802188c:	b580      	push	{r7, lr}
 802188e:	b088      	sub	sp, #32
 8021890:	af00      	add	r7, sp, #0
 8021892:	6078      	str	r0, [r7, #4]
 8021894:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8021896:	687b      	ldr	r3, [r7, #4]
 8021898:	2b00      	cmp	r3, #0
 802189a:	d109      	bne.n	80218b0 <xTaskCheckForTimeOut+0x24>
 802189c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80218a0:	f383 8811 	msr	BASEPRI, r3
 80218a4:	f3bf 8f6f 	isb	sy
 80218a8:	f3bf 8f4f 	dsb	sy
 80218ac:	613b      	str	r3, [r7, #16]
 80218ae:	e7fe      	b.n	80218ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80218b0:	683b      	ldr	r3, [r7, #0]
 80218b2:	2b00      	cmp	r3, #0
 80218b4:	d109      	bne.n	80218ca <xTaskCheckForTimeOut+0x3e>
 80218b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80218ba:	f383 8811 	msr	BASEPRI, r3
 80218be:	f3bf 8f6f 	isb	sy
 80218c2:	f3bf 8f4f 	dsb	sy
 80218c6:	60fb      	str	r3, [r7, #12]
 80218c8:	e7fe      	b.n	80218c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80218ca:	f7fe f8e7 	bl	801fa9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80218ce:	4b1d      	ldr	r3, [pc, #116]	; (8021944 <xTaskCheckForTimeOut+0xb8>)
 80218d0:	681b      	ldr	r3, [r3, #0]
 80218d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80218d4:	687b      	ldr	r3, [r7, #4]
 80218d6:	685b      	ldr	r3, [r3, #4]
 80218d8:	69ba      	ldr	r2, [r7, #24]
 80218da:	1ad3      	subs	r3, r2, r3
 80218dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80218de:	683b      	ldr	r3, [r7, #0]
 80218e0:	681b      	ldr	r3, [r3, #0]
 80218e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80218e6:	d102      	bne.n	80218ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80218e8:	2300      	movs	r3, #0
 80218ea:	61fb      	str	r3, [r7, #28]
 80218ec:	e023      	b.n	8021936 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80218ee:	687b      	ldr	r3, [r7, #4]
 80218f0:	681a      	ldr	r2, [r3, #0]
 80218f2:	4b15      	ldr	r3, [pc, #84]	; (8021948 <xTaskCheckForTimeOut+0xbc>)
 80218f4:	681b      	ldr	r3, [r3, #0]
 80218f6:	429a      	cmp	r2, r3
 80218f8:	d007      	beq.n	802190a <xTaskCheckForTimeOut+0x7e>
 80218fa:	687b      	ldr	r3, [r7, #4]
 80218fc:	685b      	ldr	r3, [r3, #4]
 80218fe:	69ba      	ldr	r2, [r7, #24]
 8021900:	429a      	cmp	r2, r3
 8021902:	d302      	bcc.n	802190a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8021904:	2301      	movs	r3, #1
 8021906:	61fb      	str	r3, [r7, #28]
 8021908:	e015      	b.n	8021936 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 802190a:	683b      	ldr	r3, [r7, #0]
 802190c:	681b      	ldr	r3, [r3, #0]
 802190e:	697a      	ldr	r2, [r7, #20]
 8021910:	429a      	cmp	r2, r3
 8021912:	d20b      	bcs.n	802192c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8021914:	683b      	ldr	r3, [r7, #0]
 8021916:	681a      	ldr	r2, [r3, #0]
 8021918:	697b      	ldr	r3, [r7, #20]
 802191a:	1ad2      	subs	r2, r2, r3
 802191c:	683b      	ldr	r3, [r7, #0]
 802191e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8021920:	6878      	ldr	r0, [r7, #4]
 8021922:	f7ff ff9d 	bl	8021860 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8021926:	2300      	movs	r3, #0
 8021928:	61fb      	str	r3, [r7, #28]
 802192a:	e004      	b.n	8021936 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 802192c:	683b      	ldr	r3, [r7, #0]
 802192e:	2200      	movs	r2, #0
 8021930:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8021932:	2301      	movs	r3, #1
 8021934:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8021936:	f7fe f8df 	bl	801faf8 <vPortExitCritical>

	return xReturn;
 802193a:	69fb      	ldr	r3, [r7, #28]
}
 802193c:	4618      	mov	r0, r3
 802193e:	3720      	adds	r7, #32
 8021940:	46bd      	mov	sp, r7
 8021942:	bd80      	pop	{r7, pc}
 8021944:	20027328 	.word	0x20027328
 8021948:	2002733c 	.word	0x2002733c

0802194c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 802194c:	b480      	push	{r7}
 802194e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8021950:	4b03      	ldr	r3, [pc, #12]	; (8021960 <vTaskMissedYield+0x14>)
 8021952:	2201      	movs	r2, #1
 8021954:	601a      	str	r2, [r3, #0]
}
 8021956:	bf00      	nop
 8021958:	46bd      	mov	sp, r7
 802195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802195e:	4770      	bx	lr
 8021960:	20027338 	.word	0x20027338

08021964 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8021964:	b580      	push	{r7, lr}
 8021966:	b084      	sub	sp, #16
 8021968:	af00      	add	r7, sp, #0
 802196a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 802196c:	f000 f8a6 	bl	8021abc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8021970:	4b17      	ldr	r3, [pc, #92]	; (80219d0 <prvIdleTask+0x6c>)
 8021972:	681b      	ldr	r3, [r3, #0]
 8021974:	2b01      	cmp	r3, #1
 8021976:	d907      	bls.n	8021988 <prvIdleTask+0x24>
			{
				taskYIELD();
 8021978:	4b16      	ldr	r3, [pc, #88]	; (80219d4 <prvIdleTask+0x70>)
 802197a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802197e:	601a      	str	r2, [r3, #0]
 8021980:	f3bf 8f4f 	dsb	sy
 8021984:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8021988:	f7ff fc60 	bl	802124c <prvGetExpectedIdleTime>
 802198c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 802198e:	68fb      	ldr	r3, [r7, #12]
 8021990:	2b01      	cmp	r3, #1
 8021992:	d9eb      	bls.n	802196c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8021994:	f7ff fc4c 	bl	8021230 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8021998:	4b0f      	ldr	r3, [pc, #60]	; (80219d8 <prvIdleTask+0x74>)
 802199a:	681a      	ldr	r2, [r3, #0]
 802199c:	4b0f      	ldr	r3, [pc, #60]	; (80219dc <prvIdleTask+0x78>)
 802199e:	681b      	ldr	r3, [r3, #0]
 80219a0:	429a      	cmp	r2, r3
 80219a2:	d209      	bcs.n	80219b8 <prvIdleTask+0x54>
 80219a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80219a8:	f383 8811 	msr	BASEPRI, r3
 80219ac:	f3bf 8f6f 	isb	sy
 80219b0:	f3bf 8f4f 	dsb	sy
 80219b4:	60bb      	str	r3, [r7, #8]
 80219b6:	e7fe      	b.n	80219b6 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80219b8:	f7ff fc48 	bl	802124c <prvGetExpectedIdleTime>
 80219bc:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80219be:	68fb      	ldr	r3, [r7, #12]
 80219c0:	2b01      	cmp	r3, #1
 80219c2:	d902      	bls.n	80219ca <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80219c4:	68f8      	ldr	r0, [r7, #12]
 80219c6:	f7f0 fc3b 	bl	8012240 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80219ca:	f7ff fc77 	bl	80212bc <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80219ce:	e7cd      	b.n	802196c <prvIdleTask+0x8>
 80219d0:	20026e54 	.word	0x20026e54
 80219d4:	e000ed04 	.word	0xe000ed04
 80219d8:	20027344 	.word	0x20027344
 80219dc:	20027328 	.word	0x20027328

080219e0 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 80219e0:	b480      	push	{r7}
 80219e2:	b083      	sub	sp, #12
 80219e4:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 80219e6:	2301      	movs	r3, #1
 80219e8:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 80219ea:	2301      	movs	r3, #1
 80219ec:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80219ee:	4b0f      	ldr	r3, [pc, #60]	; (8021a2c <eTaskConfirmSleepModeStatus+0x4c>)
 80219f0:	681b      	ldr	r3, [r3, #0]
 80219f2:	2b00      	cmp	r3, #0
 80219f4:	d002      	beq.n	80219fc <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80219f6:	2300      	movs	r3, #0
 80219f8:	71fb      	strb	r3, [r7, #7]
 80219fa:	e010      	b.n	8021a1e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80219fc:	4b0c      	ldr	r3, [pc, #48]	; (8021a30 <eTaskConfirmSleepModeStatus+0x50>)
 80219fe:	681b      	ldr	r3, [r3, #0]
 8021a00:	2b00      	cmp	r3, #0
 8021a02:	d002      	beq.n	8021a0a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8021a04:	2300      	movs	r3, #0
 8021a06:	71fb      	strb	r3, [r7, #7]
 8021a08:	e009      	b.n	8021a1e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8021a0a:	4b0a      	ldr	r3, [pc, #40]	; (8021a34 <eTaskConfirmSleepModeStatus+0x54>)
 8021a0c:	681a      	ldr	r2, [r3, #0]
 8021a0e:	4b0a      	ldr	r3, [pc, #40]	; (8021a38 <eTaskConfirmSleepModeStatus+0x58>)
 8021a10:	6819      	ldr	r1, [r3, #0]
 8021a12:	683b      	ldr	r3, [r7, #0]
 8021a14:	1acb      	subs	r3, r1, r3
 8021a16:	429a      	cmp	r2, r3
 8021a18:	d101      	bne.n	8021a1e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8021a1a:	2302      	movs	r3, #2
 8021a1c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8021a1e:	79fb      	ldrb	r3, [r7, #7]
	}
 8021a20:	4618      	mov	r0, r3
 8021a22:	370c      	adds	r7, #12
 8021a24:	46bd      	mov	sp, r7
 8021a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a2a:	4770      	bx	lr
 8021a2c:	200272e4 	.word	0x200272e4
 8021a30:	20027338 	.word	0x20027338
 8021a34:	20027310 	.word	0x20027310
 8021a38:	20027324 	.word	0x20027324

08021a3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8021a3c:	b580      	push	{r7, lr}
 8021a3e:	b082      	sub	sp, #8
 8021a40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8021a42:	2300      	movs	r3, #0
 8021a44:	607b      	str	r3, [r7, #4]
 8021a46:	e00c      	b.n	8021a62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8021a48:	687a      	ldr	r2, [r7, #4]
 8021a4a:	4613      	mov	r3, r2
 8021a4c:	009b      	lsls	r3, r3, #2
 8021a4e:	4413      	add	r3, r2
 8021a50:	009b      	lsls	r3, r3, #2
 8021a52:	4a12      	ldr	r2, [pc, #72]	; (8021a9c <prvInitialiseTaskLists+0x60>)
 8021a54:	4413      	add	r3, r2
 8021a56:	4618      	mov	r0, r3
 8021a58:	f7fd fe42 	bl	801f6e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	3301      	adds	r3, #1
 8021a60:	607b      	str	r3, [r7, #4]
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	2b37      	cmp	r3, #55	; 0x37
 8021a66:	d9ef      	bls.n	8021a48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8021a68:	480d      	ldr	r0, [pc, #52]	; (8021aa0 <prvInitialiseTaskLists+0x64>)
 8021a6a:	f7fd fe39 	bl	801f6e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8021a6e:	480d      	ldr	r0, [pc, #52]	; (8021aa4 <prvInitialiseTaskLists+0x68>)
 8021a70:	f7fd fe36 	bl	801f6e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8021a74:	480c      	ldr	r0, [pc, #48]	; (8021aa8 <prvInitialiseTaskLists+0x6c>)
 8021a76:	f7fd fe33 	bl	801f6e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8021a7a:	480c      	ldr	r0, [pc, #48]	; (8021aac <prvInitialiseTaskLists+0x70>)
 8021a7c:	f7fd fe30 	bl	801f6e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8021a80:	480b      	ldr	r0, [pc, #44]	; (8021ab0 <prvInitialiseTaskLists+0x74>)
 8021a82:	f7fd fe2d 	bl	801f6e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8021a86:	4b0b      	ldr	r3, [pc, #44]	; (8021ab4 <prvInitialiseTaskLists+0x78>)
 8021a88:	4a05      	ldr	r2, [pc, #20]	; (8021aa0 <prvInitialiseTaskLists+0x64>)
 8021a8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8021a8c:	4b0a      	ldr	r3, [pc, #40]	; (8021ab8 <prvInitialiseTaskLists+0x7c>)
 8021a8e:	4a05      	ldr	r2, [pc, #20]	; (8021aa4 <prvInitialiseTaskLists+0x68>)
 8021a90:	601a      	str	r2, [r3, #0]
}
 8021a92:	bf00      	nop
 8021a94:	3708      	adds	r7, #8
 8021a96:	46bd      	mov	sp, r7
 8021a98:	bd80      	pop	{r7, pc}
 8021a9a:	bf00      	nop
 8021a9c:	20026e54 	.word	0x20026e54
 8021aa0:	200272b4 	.word	0x200272b4
 8021aa4:	200272c8 	.word	0x200272c8
 8021aa8:	200272e4 	.word	0x200272e4
 8021aac:	200272f8 	.word	0x200272f8
 8021ab0:	20027310 	.word	0x20027310
 8021ab4:	200272dc 	.word	0x200272dc
 8021ab8:	200272e0 	.word	0x200272e0

08021abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8021abc:	b580      	push	{r7, lr}
 8021abe:	b082      	sub	sp, #8
 8021ac0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8021ac2:	e019      	b.n	8021af8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8021ac4:	f7fd ffea 	bl	801fa9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8021ac8:	4b0f      	ldr	r3, [pc, #60]	; (8021b08 <prvCheckTasksWaitingTermination+0x4c>)
 8021aca:	68db      	ldr	r3, [r3, #12]
 8021acc:	68db      	ldr	r3, [r3, #12]
 8021ace:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021ad0:	687b      	ldr	r3, [r7, #4]
 8021ad2:	3304      	adds	r3, #4
 8021ad4:	4618      	mov	r0, r3
 8021ad6:	f7fd fe8d 	bl	801f7f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8021ada:	4b0c      	ldr	r3, [pc, #48]	; (8021b0c <prvCheckTasksWaitingTermination+0x50>)
 8021adc:	681b      	ldr	r3, [r3, #0]
 8021ade:	3b01      	subs	r3, #1
 8021ae0:	4a0a      	ldr	r2, [pc, #40]	; (8021b0c <prvCheckTasksWaitingTermination+0x50>)
 8021ae2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8021ae4:	4b0a      	ldr	r3, [pc, #40]	; (8021b10 <prvCheckTasksWaitingTermination+0x54>)
 8021ae6:	681b      	ldr	r3, [r3, #0]
 8021ae8:	3b01      	subs	r3, #1
 8021aea:	4a09      	ldr	r2, [pc, #36]	; (8021b10 <prvCheckTasksWaitingTermination+0x54>)
 8021aec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8021aee:	f7fe f803 	bl	801faf8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8021af2:	6878      	ldr	r0, [r7, #4]
 8021af4:	f000 f80e 	bl	8021b14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8021af8:	4b05      	ldr	r3, [pc, #20]	; (8021b10 <prvCheckTasksWaitingTermination+0x54>)
 8021afa:	681b      	ldr	r3, [r3, #0]
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	d1e1      	bne.n	8021ac4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8021b00:	bf00      	nop
 8021b02:	3708      	adds	r7, #8
 8021b04:	46bd      	mov	sp, r7
 8021b06:	bd80      	pop	{r7, pc}
 8021b08:	200272f8 	.word	0x200272f8
 8021b0c:	20027324 	.word	0x20027324
 8021b10:	2002730c 	.word	0x2002730c

08021b14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8021b14:	b580      	push	{r7, lr}
 8021b16:	b084      	sub	sp, #16
 8021b18:	af00      	add	r7, sp, #0
 8021b1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8021b22:	2b00      	cmp	r3, #0
 8021b24:	d108      	bne.n	8021b38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8021b26:	687b      	ldr	r3, [r7, #4]
 8021b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b2a:	4618      	mov	r0, r3
 8021b2c:	f7fd fcc2 	bl	801f4b4 <vPortFree>
				vPortFree( pxTCB );
 8021b30:	6878      	ldr	r0, [r7, #4]
 8021b32:	f7fd fcbf 	bl	801f4b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8021b36:	e017      	b.n	8021b68 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8021b38:	687b      	ldr	r3, [r7, #4]
 8021b3a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8021b3e:	2b01      	cmp	r3, #1
 8021b40:	d103      	bne.n	8021b4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8021b42:	6878      	ldr	r0, [r7, #4]
 8021b44:	f7fd fcb6 	bl	801f4b4 <vPortFree>
	}
 8021b48:	e00e      	b.n	8021b68 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8021b4a:	687b      	ldr	r3, [r7, #4]
 8021b4c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8021b50:	2b02      	cmp	r3, #2
 8021b52:	d009      	beq.n	8021b68 <prvDeleteTCB+0x54>
 8021b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021b58:	f383 8811 	msr	BASEPRI, r3
 8021b5c:	f3bf 8f6f 	isb	sy
 8021b60:	f3bf 8f4f 	dsb	sy
 8021b64:	60fb      	str	r3, [r7, #12]
 8021b66:	e7fe      	b.n	8021b66 <prvDeleteTCB+0x52>
	}
 8021b68:	bf00      	nop
 8021b6a:	3710      	adds	r7, #16
 8021b6c:	46bd      	mov	sp, r7
 8021b6e:	bd80      	pop	{r7, pc}

08021b70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8021b70:	b480      	push	{r7}
 8021b72:	b083      	sub	sp, #12
 8021b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021b76:	4b0f      	ldr	r3, [pc, #60]	; (8021bb4 <prvResetNextTaskUnblockTime+0x44>)
 8021b78:	681b      	ldr	r3, [r3, #0]
 8021b7a:	681b      	ldr	r3, [r3, #0]
 8021b7c:	2b00      	cmp	r3, #0
 8021b7e:	d101      	bne.n	8021b84 <prvResetNextTaskUnblockTime+0x14>
 8021b80:	2301      	movs	r3, #1
 8021b82:	e000      	b.n	8021b86 <prvResetNextTaskUnblockTime+0x16>
 8021b84:	2300      	movs	r3, #0
 8021b86:	2b00      	cmp	r3, #0
 8021b88:	d004      	beq.n	8021b94 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8021b8a:	4b0b      	ldr	r3, [pc, #44]	; (8021bb8 <prvResetNextTaskUnblockTime+0x48>)
 8021b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8021b90:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8021b92:	e008      	b.n	8021ba6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8021b94:	4b07      	ldr	r3, [pc, #28]	; (8021bb4 <prvResetNextTaskUnblockTime+0x44>)
 8021b96:	681b      	ldr	r3, [r3, #0]
 8021b98:	68db      	ldr	r3, [r3, #12]
 8021b9a:	68db      	ldr	r3, [r3, #12]
 8021b9c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8021b9e:	687b      	ldr	r3, [r7, #4]
 8021ba0:	685b      	ldr	r3, [r3, #4]
 8021ba2:	4a05      	ldr	r2, [pc, #20]	; (8021bb8 <prvResetNextTaskUnblockTime+0x48>)
 8021ba4:	6013      	str	r3, [r2, #0]
}
 8021ba6:	bf00      	nop
 8021ba8:	370c      	adds	r7, #12
 8021baa:	46bd      	mov	sp, r7
 8021bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bb0:	4770      	bx	lr
 8021bb2:	bf00      	nop
 8021bb4:	200272dc 	.word	0x200272dc
 8021bb8:	20027344 	.word	0x20027344

08021bbc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8021bbc:	b480      	push	{r7}
 8021bbe:	b083      	sub	sp, #12
 8021bc0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8021bc2:	4b05      	ldr	r3, [pc, #20]	; (8021bd8 <xTaskGetCurrentTaskHandle+0x1c>)
 8021bc4:	681b      	ldr	r3, [r3, #0]
 8021bc6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8021bc8:	687b      	ldr	r3, [r7, #4]
	}
 8021bca:	4618      	mov	r0, r3
 8021bcc:	370c      	adds	r7, #12
 8021bce:	46bd      	mov	sp, r7
 8021bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bd4:	4770      	bx	lr
 8021bd6:	bf00      	nop
 8021bd8:	20026e50 	.word	0x20026e50

08021bdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8021bdc:	b480      	push	{r7}
 8021bde:	b083      	sub	sp, #12
 8021be0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8021be2:	4b0b      	ldr	r3, [pc, #44]	; (8021c10 <xTaskGetSchedulerState+0x34>)
 8021be4:	681b      	ldr	r3, [r3, #0]
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d102      	bne.n	8021bf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8021bea:	2301      	movs	r3, #1
 8021bec:	607b      	str	r3, [r7, #4]
 8021bee:	e008      	b.n	8021c02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021bf0:	4b08      	ldr	r3, [pc, #32]	; (8021c14 <xTaskGetSchedulerState+0x38>)
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d102      	bne.n	8021bfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8021bf8:	2302      	movs	r3, #2
 8021bfa:	607b      	str	r3, [r7, #4]
 8021bfc:	e001      	b.n	8021c02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8021bfe:	2300      	movs	r3, #0
 8021c00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8021c02:	687b      	ldr	r3, [r7, #4]
	}
 8021c04:	4618      	mov	r0, r3
 8021c06:	370c      	adds	r7, #12
 8021c08:	46bd      	mov	sp, r7
 8021c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c0e:	4770      	bx	lr
 8021c10:	20027330 	.word	0x20027330
 8021c14:	2002734c 	.word	0x2002734c

08021c18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8021c18:	b580      	push	{r7, lr}
 8021c1a:	b084      	sub	sp, #16
 8021c1c:	af00      	add	r7, sp, #0
 8021c1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8021c24:	2300      	movs	r3, #0
 8021c26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8021c28:	687b      	ldr	r3, [r7, #4]
 8021c2a:	2b00      	cmp	r3, #0
 8021c2c:	d056      	beq.n	8021cdc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8021c2e:	68bb      	ldr	r3, [r7, #8]
 8021c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021c32:	4b2d      	ldr	r3, [pc, #180]	; (8021ce8 <xTaskPriorityInherit+0xd0>)
 8021c34:	681b      	ldr	r3, [r3, #0]
 8021c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c38:	429a      	cmp	r2, r3
 8021c3a:	d246      	bcs.n	8021cca <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8021c3c:	68bb      	ldr	r3, [r7, #8]
 8021c3e:	699b      	ldr	r3, [r3, #24]
 8021c40:	2b00      	cmp	r3, #0
 8021c42:	db06      	blt.n	8021c52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021c44:	4b28      	ldr	r3, [pc, #160]	; (8021ce8 <xTaskPriorityInherit+0xd0>)
 8021c46:	681b      	ldr	r3, [r3, #0]
 8021c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8021c4e:	68bb      	ldr	r3, [r7, #8]
 8021c50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8021c52:	68bb      	ldr	r3, [r7, #8]
 8021c54:	6959      	ldr	r1, [r3, #20]
 8021c56:	68bb      	ldr	r3, [r7, #8]
 8021c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021c5a:	4613      	mov	r3, r2
 8021c5c:	009b      	lsls	r3, r3, #2
 8021c5e:	4413      	add	r3, r2
 8021c60:	009b      	lsls	r3, r3, #2
 8021c62:	4a22      	ldr	r2, [pc, #136]	; (8021cec <xTaskPriorityInherit+0xd4>)
 8021c64:	4413      	add	r3, r2
 8021c66:	4299      	cmp	r1, r3
 8021c68:	d101      	bne.n	8021c6e <xTaskPriorityInherit+0x56>
 8021c6a:	2301      	movs	r3, #1
 8021c6c:	e000      	b.n	8021c70 <xTaskPriorityInherit+0x58>
 8021c6e:	2300      	movs	r3, #0
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d022      	beq.n	8021cba <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8021c74:	68bb      	ldr	r3, [r7, #8]
 8021c76:	3304      	adds	r3, #4
 8021c78:	4618      	mov	r0, r3
 8021c7a:	f7fd fdbb 	bl	801f7f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8021c7e:	4b1a      	ldr	r3, [pc, #104]	; (8021ce8 <xTaskPriorityInherit+0xd0>)
 8021c80:	681b      	ldr	r3, [r3, #0]
 8021c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021c84:	68bb      	ldr	r3, [r7, #8]
 8021c86:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8021c88:	68bb      	ldr	r3, [r7, #8]
 8021c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021c8c:	4b18      	ldr	r3, [pc, #96]	; (8021cf0 <xTaskPriorityInherit+0xd8>)
 8021c8e:	681b      	ldr	r3, [r3, #0]
 8021c90:	429a      	cmp	r2, r3
 8021c92:	d903      	bls.n	8021c9c <xTaskPriorityInherit+0x84>
 8021c94:	68bb      	ldr	r3, [r7, #8]
 8021c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c98:	4a15      	ldr	r2, [pc, #84]	; (8021cf0 <xTaskPriorityInherit+0xd8>)
 8021c9a:	6013      	str	r3, [r2, #0]
 8021c9c:	68bb      	ldr	r3, [r7, #8]
 8021c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ca0:	4613      	mov	r3, r2
 8021ca2:	009b      	lsls	r3, r3, #2
 8021ca4:	4413      	add	r3, r2
 8021ca6:	009b      	lsls	r3, r3, #2
 8021ca8:	4a10      	ldr	r2, [pc, #64]	; (8021cec <xTaskPriorityInherit+0xd4>)
 8021caa:	441a      	add	r2, r3
 8021cac:	68bb      	ldr	r3, [r7, #8]
 8021cae:	3304      	adds	r3, #4
 8021cb0:	4619      	mov	r1, r3
 8021cb2:	4610      	mov	r0, r2
 8021cb4:	f7fd fd41 	bl	801f73a <vListInsertEnd>
 8021cb8:	e004      	b.n	8021cc4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8021cba:	4b0b      	ldr	r3, [pc, #44]	; (8021ce8 <xTaskPriorityInherit+0xd0>)
 8021cbc:	681b      	ldr	r3, [r3, #0]
 8021cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021cc0:	68bb      	ldr	r3, [r7, #8]
 8021cc2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8021cc4:	2301      	movs	r3, #1
 8021cc6:	60fb      	str	r3, [r7, #12]
 8021cc8:	e008      	b.n	8021cdc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8021cca:	68bb      	ldr	r3, [r7, #8]
 8021ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021cce:	4b06      	ldr	r3, [pc, #24]	; (8021ce8 <xTaskPriorityInherit+0xd0>)
 8021cd0:	681b      	ldr	r3, [r3, #0]
 8021cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021cd4:	429a      	cmp	r2, r3
 8021cd6:	d201      	bcs.n	8021cdc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8021cd8:	2301      	movs	r3, #1
 8021cda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8021cdc:	68fb      	ldr	r3, [r7, #12]
	}
 8021cde:	4618      	mov	r0, r3
 8021ce0:	3710      	adds	r7, #16
 8021ce2:	46bd      	mov	sp, r7
 8021ce4:	bd80      	pop	{r7, pc}
 8021ce6:	bf00      	nop
 8021ce8:	20026e50 	.word	0x20026e50
 8021cec:	20026e54 	.word	0x20026e54
 8021cf0:	2002732c 	.word	0x2002732c

08021cf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8021cf4:	b580      	push	{r7, lr}
 8021cf6:	b086      	sub	sp, #24
 8021cf8:	af00      	add	r7, sp, #0
 8021cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8021cfc:	687b      	ldr	r3, [r7, #4]
 8021cfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8021d00:	2300      	movs	r3, #0
 8021d02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8021d04:	687b      	ldr	r3, [r7, #4]
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	d054      	beq.n	8021db4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8021d0a:	4b2d      	ldr	r3, [pc, #180]	; (8021dc0 <xTaskPriorityDisinherit+0xcc>)
 8021d0c:	681b      	ldr	r3, [r3, #0]
 8021d0e:	693a      	ldr	r2, [r7, #16]
 8021d10:	429a      	cmp	r2, r3
 8021d12:	d009      	beq.n	8021d28 <xTaskPriorityDisinherit+0x34>
 8021d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021d18:	f383 8811 	msr	BASEPRI, r3
 8021d1c:	f3bf 8f6f 	isb	sy
 8021d20:	f3bf 8f4f 	dsb	sy
 8021d24:	60fb      	str	r3, [r7, #12]
 8021d26:	e7fe      	b.n	8021d26 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8021d28:	693b      	ldr	r3, [r7, #16]
 8021d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021d2c:	2b00      	cmp	r3, #0
 8021d2e:	d109      	bne.n	8021d44 <xTaskPriorityDisinherit+0x50>
 8021d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021d34:	f383 8811 	msr	BASEPRI, r3
 8021d38:	f3bf 8f6f 	isb	sy
 8021d3c:	f3bf 8f4f 	dsb	sy
 8021d40:	60bb      	str	r3, [r7, #8]
 8021d42:	e7fe      	b.n	8021d42 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8021d44:	693b      	ldr	r3, [r7, #16]
 8021d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021d48:	1e5a      	subs	r2, r3, #1
 8021d4a:	693b      	ldr	r3, [r7, #16]
 8021d4c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8021d4e:	693b      	ldr	r3, [r7, #16]
 8021d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021d52:	693b      	ldr	r3, [r7, #16]
 8021d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021d56:	429a      	cmp	r2, r3
 8021d58:	d02c      	beq.n	8021db4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8021d5a:	693b      	ldr	r3, [r7, #16]
 8021d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	d128      	bne.n	8021db4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8021d62:	693b      	ldr	r3, [r7, #16]
 8021d64:	3304      	adds	r3, #4
 8021d66:	4618      	mov	r0, r3
 8021d68:	f7fd fd44 	bl	801f7f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8021d6c:	693b      	ldr	r3, [r7, #16]
 8021d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021d70:	693b      	ldr	r3, [r7, #16]
 8021d72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021d74:	693b      	ldr	r3, [r7, #16]
 8021d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8021d7c:	693b      	ldr	r3, [r7, #16]
 8021d7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8021d80:	693b      	ldr	r3, [r7, #16]
 8021d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021d84:	4b0f      	ldr	r3, [pc, #60]	; (8021dc4 <xTaskPriorityDisinherit+0xd0>)
 8021d86:	681b      	ldr	r3, [r3, #0]
 8021d88:	429a      	cmp	r2, r3
 8021d8a:	d903      	bls.n	8021d94 <xTaskPriorityDisinherit+0xa0>
 8021d8c:	693b      	ldr	r3, [r7, #16]
 8021d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d90:	4a0c      	ldr	r2, [pc, #48]	; (8021dc4 <xTaskPriorityDisinherit+0xd0>)
 8021d92:	6013      	str	r3, [r2, #0]
 8021d94:	693b      	ldr	r3, [r7, #16]
 8021d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021d98:	4613      	mov	r3, r2
 8021d9a:	009b      	lsls	r3, r3, #2
 8021d9c:	4413      	add	r3, r2
 8021d9e:	009b      	lsls	r3, r3, #2
 8021da0:	4a09      	ldr	r2, [pc, #36]	; (8021dc8 <xTaskPriorityDisinherit+0xd4>)
 8021da2:	441a      	add	r2, r3
 8021da4:	693b      	ldr	r3, [r7, #16]
 8021da6:	3304      	adds	r3, #4
 8021da8:	4619      	mov	r1, r3
 8021daa:	4610      	mov	r0, r2
 8021dac:	f7fd fcc5 	bl	801f73a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8021db0:	2301      	movs	r3, #1
 8021db2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8021db4:	697b      	ldr	r3, [r7, #20]
	}
 8021db6:	4618      	mov	r0, r3
 8021db8:	3718      	adds	r7, #24
 8021dba:	46bd      	mov	sp, r7
 8021dbc:	bd80      	pop	{r7, pc}
 8021dbe:	bf00      	nop
 8021dc0:	20026e50 	.word	0x20026e50
 8021dc4:	2002732c 	.word	0x2002732c
 8021dc8:	20026e54 	.word	0x20026e54

08021dcc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8021dcc:	b580      	push	{r7, lr}
 8021dce:	b088      	sub	sp, #32
 8021dd0:	af00      	add	r7, sp, #0
 8021dd2:	6078      	str	r0, [r7, #4]
 8021dd4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8021dd6:	687b      	ldr	r3, [r7, #4]
 8021dd8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8021dda:	2301      	movs	r3, #1
 8021ddc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8021dde:	687b      	ldr	r3, [r7, #4]
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d06d      	beq.n	8021ec0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8021de4:	69bb      	ldr	r3, [r7, #24]
 8021de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021de8:	2b00      	cmp	r3, #0
 8021dea:	d109      	bne.n	8021e00 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8021dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021df0:	f383 8811 	msr	BASEPRI, r3
 8021df4:	f3bf 8f6f 	isb	sy
 8021df8:	f3bf 8f4f 	dsb	sy
 8021dfc:	60fb      	str	r3, [r7, #12]
 8021dfe:	e7fe      	b.n	8021dfe <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8021e00:	69bb      	ldr	r3, [r7, #24]
 8021e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021e04:	683a      	ldr	r2, [r7, #0]
 8021e06:	429a      	cmp	r2, r3
 8021e08:	d902      	bls.n	8021e10 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8021e0a:	683b      	ldr	r3, [r7, #0]
 8021e0c:	61fb      	str	r3, [r7, #28]
 8021e0e:	e002      	b.n	8021e16 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8021e10:	69bb      	ldr	r3, [r7, #24]
 8021e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021e14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8021e16:	69bb      	ldr	r3, [r7, #24]
 8021e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e1a:	69fa      	ldr	r2, [r7, #28]
 8021e1c:	429a      	cmp	r2, r3
 8021e1e:	d04f      	beq.n	8021ec0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8021e20:	69bb      	ldr	r3, [r7, #24]
 8021e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021e24:	697a      	ldr	r2, [r7, #20]
 8021e26:	429a      	cmp	r2, r3
 8021e28:	d14a      	bne.n	8021ec0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8021e2a:	4b27      	ldr	r3, [pc, #156]	; (8021ec8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8021e2c:	681b      	ldr	r3, [r3, #0]
 8021e2e:	69ba      	ldr	r2, [r7, #24]
 8021e30:	429a      	cmp	r2, r3
 8021e32:	d109      	bne.n	8021e48 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8021e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021e38:	f383 8811 	msr	BASEPRI, r3
 8021e3c:	f3bf 8f6f 	isb	sy
 8021e40:	f3bf 8f4f 	dsb	sy
 8021e44:	60bb      	str	r3, [r7, #8]
 8021e46:	e7fe      	b.n	8021e46 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8021e48:	69bb      	ldr	r3, [r7, #24]
 8021e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8021e4e:	69bb      	ldr	r3, [r7, #24]
 8021e50:	69fa      	ldr	r2, [r7, #28]
 8021e52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8021e54:	69bb      	ldr	r3, [r7, #24]
 8021e56:	699b      	ldr	r3, [r3, #24]
 8021e58:	2b00      	cmp	r3, #0
 8021e5a:	db04      	blt.n	8021e66 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021e5c:	69fb      	ldr	r3, [r7, #28]
 8021e5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8021e62:	69bb      	ldr	r3, [r7, #24]
 8021e64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8021e66:	69bb      	ldr	r3, [r7, #24]
 8021e68:	6959      	ldr	r1, [r3, #20]
 8021e6a:	693a      	ldr	r2, [r7, #16]
 8021e6c:	4613      	mov	r3, r2
 8021e6e:	009b      	lsls	r3, r3, #2
 8021e70:	4413      	add	r3, r2
 8021e72:	009b      	lsls	r3, r3, #2
 8021e74:	4a15      	ldr	r2, [pc, #84]	; (8021ecc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8021e76:	4413      	add	r3, r2
 8021e78:	4299      	cmp	r1, r3
 8021e7a:	d101      	bne.n	8021e80 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8021e7c:	2301      	movs	r3, #1
 8021e7e:	e000      	b.n	8021e82 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8021e80:	2300      	movs	r3, #0
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d01c      	beq.n	8021ec0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8021e86:	69bb      	ldr	r3, [r7, #24]
 8021e88:	3304      	adds	r3, #4
 8021e8a:	4618      	mov	r0, r3
 8021e8c:	f7fd fcb2 	bl	801f7f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8021e90:	69bb      	ldr	r3, [r7, #24]
 8021e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e94:	4b0e      	ldr	r3, [pc, #56]	; (8021ed0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8021e96:	681b      	ldr	r3, [r3, #0]
 8021e98:	429a      	cmp	r2, r3
 8021e9a:	d903      	bls.n	8021ea4 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8021e9c:	69bb      	ldr	r3, [r7, #24]
 8021e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ea0:	4a0b      	ldr	r2, [pc, #44]	; (8021ed0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8021ea2:	6013      	str	r3, [r2, #0]
 8021ea4:	69bb      	ldr	r3, [r7, #24]
 8021ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ea8:	4613      	mov	r3, r2
 8021eaa:	009b      	lsls	r3, r3, #2
 8021eac:	4413      	add	r3, r2
 8021eae:	009b      	lsls	r3, r3, #2
 8021eb0:	4a06      	ldr	r2, [pc, #24]	; (8021ecc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8021eb2:	441a      	add	r2, r3
 8021eb4:	69bb      	ldr	r3, [r7, #24]
 8021eb6:	3304      	adds	r3, #4
 8021eb8:	4619      	mov	r1, r3
 8021eba:	4610      	mov	r0, r2
 8021ebc:	f7fd fc3d 	bl	801f73a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021ec0:	bf00      	nop
 8021ec2:	3720      	adds	r7, #32
 8021ec4:	46bd      	mov	sp, r7
 8021ec6:	bd80      	pop	{r7, pc}
 8021ec8:	20026e50 	.word	0x20026e50
 8021ecc:	20026e54 	.word	0x20026e54
 8021ed0:	2002732c 	.word	0x2002732c

08021ed4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8021ed4:	b480      	push	{r7}
 8021ed6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8021ed8:	4b07      	ldr	r3, [pc, #28]	; (8021ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8021eda:	681b      	ldr	r3, [r3, #0]
 8021edc:	2b00      	cmp	r3, #0
 8021ede:	d004      	beq.n	8021eea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8021ee0:	4b05      	ldr	r3, [pc, #20]	; (8021ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8021ee2:	681b      	ldr	r3, [r3, #0]
 8021ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8021ee6:	3201      	adds	r2, #1
 8021ee8:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8021eea:	4b03      	ldr	r3, [pc, #12]	; (8021ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8021eec:	681b      	ldr	r3, [r3, #0]
	}
 8021eee:	4618      	mov	r0, r3
 8021ef0:	46bd      	mov	sp, r7
 8021ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ef6:	4770      	bx	lr
 8021ef8:	20026e50 	.word	0x20026e50

08021efc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8021efc:	b580      	push	{r7, lr}
 8021efe:	b086      	sub	sp, #24
 8021f00:	af00      	add	r7, sp, #0
 8021f02:	60f8      	str	r0, [r7, #12]
 8021f04:	60b9      	str	r1, [r7, #8]
 8021f06:	607a      	str	r2, [r7, #4]
 8021f08:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8021f0a:	f7fd fdc7 	bl	801fa9c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8021f0e:	4b26      	ldr	r3, [pc, #152]	; (8021fa8 <xTaskNotifyWait+0xac>)
 8021f10:	681b      	ldr	r3, [r3, #0]
 8021f12:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8021f16:	b2db      	uxtb	r3, r3
 8021f18:	2b02      	cmp	r3, #2
 8021f1a:	d01a      	beq.n	8021f52 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8021f1c:	4b22      	ldr	r3, [pc, #136]	; (8021fa8 <xTaskNotifyWait+0xac>)
 8021f1e:	681b      	ldr	r3, [r3, #0]
 8021f20:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8021f22:	68fa      	ldr	r2, [r7, #12]
 8021f24:	43d2      	mvns	r2, r2
 8021f26:	400a      	ands	r2, r1
 8021f28:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8021f2a:	4b1f      	ldr	r3, [pc, #124]	; (8021fa8 <xTaskNotifyWait+0xac>)
 8021f2c:	681b      	ldr	r3, [r3, #0]
 8021f2e:	2201      	movs	r2, #1
 8021f30:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8021f34:	683b      	ldr	r3, [r7, #0]
 8021f36:	2b00      	cmp	r3, #0
 8021f38:	d00b      	beq.n	8021f52 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8021f3a:	2101      	movs	r1, #1
 8021f3c:	6838      	ldr	r0, [r7, #0]
 8021f3e:	f000 f9a3 	bl	8022288 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8021f42:	4b1a      	ldr	r3, [pc, #104]	; (8021fac <xTaskNotifyWait+0xb0>)
 8021f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021f48:	601a      	str	r2, [r3, #0]
 8021f4a:	f3bf 8f4f 	dsb	sy
 8021f4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8021f52:	f7fd fdd1 	bl	801faf8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8021f56:	f7fd fda1 	bl	801fa9c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	d004      	beq.n	8021f6a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8021f60:	4b11      	ldr	r3, [pc, #68]	; (8021fa8 <xTaskNotifyWait+0xac>)
 8021f62:	681b      	ldr	r3, [r3, #0]
 8021f64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8021f6a:	4b0f      	ldr	r3, [pc, #60]	; (8021fa8 <xTaskNotifyWait+0xac>)
 8021f6c:	681b      	ldr	r3, [r3, #0]
 8021f6e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8021f72:	b2db      	uxtb	r3, r3
 8021f74:	2b02      	cmp	r3, #2
 8021f76:	d002      	beq.n	8021f7e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8021f78:	2300      	movs	r3, #0
 8021f7a:	617b      	str	r3, [r7, #20]
 8021f7c:	e008      	b.n	8021f90 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8021f7e:	4b0a      	ldr	r3, [pc, #40]	; (8021fa8 <xTaskNotifyWait+0xac>)
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8021f84:	68ba      	ldr	r2, [r7, #8]
 8021f86:	43d2      	mvns	r2, r2
 8021f88:	400a      	ands	r2, r1
 8021f8a:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 8021f8c:	2301      	movs	r3, #1
 8021f8e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8021f90:	4b05      	ldr	r3, [pc, #20]	; (8021fa8 <xTaskNotifyWait+0xac>)
 8021f92:	681b      	ldr	r3, [r3, #0]
 8021f94:	2200      	movs	r2, #0
 8021f96:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 8021f9a:	f7fd fdad 	bl	801faf8 <vPortExitCritical>

		return xReturn;
 8021f9e:	697b      	ldr	r3, [r7, #20]
	}
 8021fa0:	4618      	mov	r0, r3
 8021fa2:	3718      	adds	r7, #24
 8021fa4:	46bd      	mov	sp, r7
 8021fa6:	bd80      	pop	{r7, pc}
 8021fa8:	20026e50 	.word	0x20026e50
 8021fac:	e000ed04 	.word	0xe000ed04

08021fb0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8021fb0:	b580      	push	{r7, lr}
 8021fb2:	b08a      	sub	sp, #40	; 0x28
 8021fb4:	af00      	add	r7, sp, #0
 8021fb6:	60f8      	str	r0, [r7, #12]
 8021fb8:	60b9      	str	r1, [r7, #8]
 8021fba:	603b      	str	r3, [r7, #0]
 8021fbc:	4613      	mov	r3, r2
 8021fbe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8021fc0:	2301      	movs	r3, #1
 8021fc2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8021fc4:	68fb      	ldr	r3, [r7, #12]
 8021fc6:	2b00      	cmp	r3, #0
 8021fc8:	d109      	bne.n	8021fde <xTaskGenericNotify+0x2e>
 8021fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021fce:	f383 8811 	msr	BASEPRI, r3
 8021fd2:	f3bf 8f6f 	isb	sy
 8021fd6:	f3bf 8f4f 	dsb	sy
 8021fda:	61bb      	str	r3, [r7, #24]
 8021fdc:	e7fe      	b.n	8021fdc <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8021fde:	68fb      	ldr	r3, [r7, #12]
 8021fe0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8021fe2:	f7fd fd5b 	bl	801fa9c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8021fe6:	683b      	ldr	r3, [r7, #0]
 8021fe8:	2b00      	cmp	r3, #0
 8021fea:	d003      	beq.n	8021ff4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8021fec:	6a3b      	ldr	r3, [r7, #32]
 8021fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8021ff0:	683b      	ldr	r3, [r7, #0]
 8021ff2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8021ff4:	6a3b      	ldr	r3, [r7, #32]
 8021ff6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8021ffa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8021ffc:	6a3b      	ldr	r3, [r7, #32]
 8021ffe:	2202      	movs	r2, #2
 8022000:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8022004:	79fb      	ldrb	r3, [r7, #7]
 8022006:	2b04      	cmp	r3, #4
 8022008:	d827      	bhi.n	802205a <xTaskGenericNotify+0xaa>
 802200a:	a201      	add	r2, pc, #4	; (adr r2, 8022010 <xTaskGenericNotify+0x60>)
 802200c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022010:	0802205b 	.word	0x0802205b
 8022014:	08022025 	.word	0x08022025
 8022018:	08022033 	.word	0x08022033
 802201c:	0802203f 	.word	0x0802203f
 8022020:	08022047 	.word	0x08022047
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8022024:	6a3b      	ldr	r3, [r7, #32]
 8022026:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8022028:	68bb      	ldr	r3, [r7, #8]
 802202a:	431a      	orrs	r2, r3
 802202c:	6a3b      	ldr	r3, [r7, #32]
 802202e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8022030:	e013      	b.n	802205a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8022032:	6a3b      	ldr	r3, [r7, #32]
 8022034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022036:	1c5a      	adds	r2, r3, #1
 8022038:	6a3b      	ldr	r3, [r7, #32]
 802203a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 802203c:	e00d      	b.n	802205a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 802203e:	6a3b      	ldr	r3, [r7, #32]
 8022040:	68ba      	ldr	r2, [r7, #8]
 8022042:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8022044:	e009      	b.n	802205a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8022046:	7ffb      	ldrb	r3, [r7, #31]
 8022048:	2b02      	cmp	r3, #2
 802204a:	d003      	beq.n	8022054 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 802204c:	6a3b      	ldr	r3, [r7, #32]
 802204e:	68ba      	ldr	r2, [r7, #8]
 8022050:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8022052:	e001      	b.n	8022058 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8022054:	2300      	movs	r3, #0
 8022056:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8022058:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 802205a:	7ffb      	ldrb	r3, [r7, #31]
 802205c:	2b01      	cmp	r3, #1
 802205e:	d13b      	bne.n	80220d8 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022060:	6a3b      	ldr	r3, [r7, #32]
 8022062:	3304      	adds	r3, #4
 8022064:	4618      	mov	r0, r3
 8022066:	f7fd fbc5 	bl	801f7f4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 802206a:	6a3b      	ldr	r3, [r7, #32]
 802206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802206e:	4b1e      	ldr	r3, [pc, #120]	; (80220e8 <xTaskGenericNotify+0x138>)
 8022070:	681b      	ldr	r3, [r3, #0]
 8022072:	429a      	cmp	r2, r3
 8022074:	d903      	bls.n	802207e <xTaskGenericNotify+0xce>
 8022076:	6a3b      	ldr	r3, [r7, #32]
 8022078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802207a:	4a1b      	ldr	r2, [pc, #108]	; (80220e8 <xTaskGenericNotify+0x138>)
 802207c:	6013      	str	r3, [r2, #0]
 802207e:	6a3b      	ldr	r3, [r7, #32]
 8022080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022082:	4613      	mov	r3, r2
 8022084:	009b      	lsls	r3, r3, #2
 8022086:	4413      	add	r3, r2
 8022088:	009b      	lsls	r3, r3, #2
 802208a:	4a18      	ldr	r2, [pc, #96]	; (80220ec <xTaskGenericNotify+0x13c>)
 802208c:	441a      	add	r2, r3
 802208e:	6a3b      	ldr	r3, [r7, #32]
 8022090:	3304      	adds	r3, #4
 8022092:	4619      	mov	r1, r3
 8022094:	4610      	mov	r0, r2
 8022096:	f7fd fb50 	bl	801f73a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 802209a:	6a3b      	ldr	r3, [r7, #32]
 802209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802209e:	2b00      	cmp	r3, #0
 80220a0:	d009      	beq.n	80220b6 <xTaskGenericNotify+0x106>
 80220a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80220a6:	f383 8811 	msr	BASEPRI, r3
 80220aa:	f3bf 8f6f 	isb	sy
 80220ae:	f3bf 8f4f 	dsb	sy
 80220b2:	617b      	str	r3, [r7, #20]
 80220b4:	e7fe      	b.n	80220b4 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80220b6:	f7ff fd5b 	bl	8021b70 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80220ba:	6a3b      	ldr	r3, [r7, #32]
 80220bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80220be:	4b0c      	ldr	r3, [pc, #48]	; (80220f0 <xTaskGenericNotify+0x140>)
 80220c0:	681b      	ldr	r3, [r3, #0]
 80220c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80220c4:	429a      	cmp	r2, r3
 80220c6:	d907      	bls.n	80220d8 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80220c8:	4b0a      	ldr	r3, [pc, #40]	; (80220f4 <xTaskGenericNotify+0x144>)
 80220ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80220ce:	601a      	str	r2, [r3, #0]
 80220d0:	f3bf 8f4f 	dsb	sy
 80220d4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80220d8:	f7fd fd0e 	bl	801faf8 <vPortExitCritical>

		return xReturn;
 80220dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80220de:	4618      	mov	r0, r3
 80220e0:	3728      	adds	r7, #40	; 0x28
 80220e2:	46bd      	mov	sp, r7
 80220e4:	bd80      	pop	{r7, pc}
 80220e6:	bf00      	nop
 80220e8:	2002732c 	.word	0x2002732c
 80220ec:	20026e54 	.word	0x20026e54
 80220f0:	20026e50 	.word	0x20026e50
 80220f4:	e000ed04 	.word	0xe000ed04

080220f8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80220f8:	b580      	push	{r7, lr}
 80220fa:	b08e      	sub	sp, #56	; 0x38
 80220fc:	af00      	add	r7, sp, #0
 80220fe:	60f8      	str	r0, [r7, #12]
 8022100:	60b9      	str	r1, [r7, #8]
 8022102:	603b      	str	r3, [r7, #0]
 8022104:	4613      	mov	r3, r2
 8022106:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8022108:	2301      	movs	r3, #1
 802210a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 802210c:	68fb      	ldr	r3, [r7, #12]
 802210e:	2b00      	cmp	r3, #0
 8022110:	d109      	bne.n	8022126 <xTaskGenericNotifyFromISR+0x2e>
 8022112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022116:	f383 8811 	msr	BASEPRI, r3
 802211a:	f3bf 8f6f 	isb	sy
 802211e:	f3bf 8f4f 	dsb	sy
 8022122:	627b      	str	r3, [r7, #36]	; 0x24
 8022124:	e7fe      	b.n	8022124 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8022126:	f7fd fd71 	bl	801fc0c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 802212a:	68fb      	ldr	r3, [r7, #12]
 802212c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 802212e:	f3ef 8211 	mrs	r2, BASEPRI
 8022132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022136:	f383 8811 	msr	BASEPRI, r3
 802213a:	f3bf 8f6f 	isb	sy
 802213e:	f3bf 8f4f 	dsb	sy
 8022142:	623a      	str	r2, [r7, #32]
 8022144:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8022146:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8022148:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 802214a:	683b      	ldr	r3, [r7, #0]
 802214c:	2b00      	cmp	r3, #0
 802214e:	d003      	beq.n	8022158 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8022150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022152:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8022154:	683b      	ldr	r3, [r7, #0]
 8022156:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8022158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802215a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 802215e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8022162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022164:	2202      	movs	r2, #2
 8022166:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 802216a:	79fb      	ldrb	r3, [r7, #7]
 802216c:	2b04      	cmp	r3, #4
 802216e:	d829      	bhi.n	80221c4 <xTaskGenericNotifyFromISR+0xcc>
 8022170:	a201      	add	r2, pc, #4	; (adr r2, 8022178 <xTaskGenericNotifyFromISR+0x80>)
 8022172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022176:	bf00      	nop
 8022178:	080221c5 	.word	0x080221c5
 802217c:	0802218d 	.word	0x0802218d
 8022180:	0802219b 	.word	0x0802219b
 8022184:	080221a7 	.word	0x080221a7
 8022188:	080221af 	.word	0x080221af
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 802218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802218e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8022190:	68bb      	ldr	r3, [r7, #8]
 8022192:	431a      	orrs	r2, r3
 8022194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022196:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8022198:	e014      	b.n	80221c4 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 802219a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802219e:	1c5a      	adds	r2, r3, #1
 80221a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221a2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80221a4:	e00e      	b.n	80221c4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80221a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221a8:	68ba      	ldr	r2, [r7, #8]
 80221aa:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80221ac:	e00a      	b.n	80221c4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80221ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80221b2:	2b02      	cmp	r3, #2
 80221b4:	d003      	beq.n	80221be <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80221b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221b8:	68ba      	ldr	r2, [r7, #8]
 80221ba:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80221bc:	e001      	b.n	80221c2 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80221be:	2300      	movs	r3, #0
 80221c0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80221c2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80221c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80221c8:	2b01      	cmp	r3, #1
 80221ca:	d146      	bne.n	802225a <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80221cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	d009      	beq.n	80221e8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80221d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80221d8:	f383 8811 	msr	BASEPRI, r3
 80221dc:	f3bf 8f6f 	isb	sy
 80221e0:	f3bf 8f4f 	dsb	sy
 80221e4:	61bb      	str	r3, [r7, #24]
 80221e6:	e7fe      	b.n	80221e6 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80221e8:	4b21      	ldr	r3, [pc, #132]	; (8022270 <xTaskGenericNotifyFromISR+0x178>)
 80221ea:	681b      	ldr	r3, [r3, #0]
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	d11d      	bne.n	802222c <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80221f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221f2:	3304      	adds	r3, #4
 80221f4:	4618      	mov	r0, r3
 80221f6:	f7fd fafd 	bl	801f7f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80221fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80221fe:	4b1d      	ldr	r3, [pc, #116]	; (8022274 <xTaskGenericNotifyFromISR+0x17c>)
 8022200:	681b      	ldr	r3, [r3, #0]
 8022202:	429a      	cmp	r2, r3
 8022204:	d903      	bls.n	802220e <xTaskGenericNotifyFromISR+0x116>
 8022206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802220a:	4a1a      	ldr	r2, [pc, #104]	; (8022274 <xTaskGenericNotifyFromISR+0x17c>)
 802220c:	6013      	str	r3, [r2, #0]
 802220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022212:	4613      	mov	r3, r2
 8022214:	009b      	lsls	r3, r3, #2
 8022216:	4413      	add	r3, r2
 8022218:	009b      	lsls	r3, r3, #2
 802221a:	4a17      	ldr	r2, [pc, #92]	; (8022278 <xTaskGenericNotifyFromISR+0x180>)
 802221c:	441a      	add	r2, r3
 802221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022220:	3304      	adds	r3, #4
 8022222:	4619      	mov	r1, r3
 8022224:	4610      	mov	r0, r2
 8022226:	f7fd fa88 	bl	801f73a <vListInsertEnd>
 802222a:	e005      	b.n	8022238 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 802222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802222e:	3318      	adds	r3, #24
 8022230:	4619      	mov	r1, r3
 8022232:	4812      	ldr	r0, [pc, #72]	; (802227c <xTaskGenericNotifyFromISR+0x184>)
 8022234:	f7fd fa81 	bl	801f73a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8022238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802223a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802223c:	4b10      	ldr	r3, [pc, #64]	; (8022280 <xTaskGenericNotifyFromISR+0x188>)
 802223e:	681b      	ldr	r3, [r3, #0]
 8022240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022242:	429a      	cmp	r2, r3
 8022244:	d909      	bls.n	802225a <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8022246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022248:	2b00      	cmp	r3, #0
 802224a:	d003      	beq.n	8022254 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 802224c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802224e:	2201      	movs	r2, #1
 8022250:	601a      	str	r2, [r3, #0]
 8022252:	e002      	b.n	802225a <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8022254:	4b0b      	ldr	r3, [pc, #44]	; (8022284 <xTaskGenericNotifyFromISR+0x18c>)
 8022256:	2201      	movs	r2, #1
 8022258:	601a      	str	r2, [r3, #0]
 802225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802225c:	617b      	str	r3, [r7, #20]
	__asm volatile
 802225e:	697b      	ldr	r3, [r7, #20]
 8022260:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8022264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8022266:	4618      	mov	r0, r3
 8022268:	3738      	adds	r7, #56	; 0x38
 802226a:	46bd      	mov	sp, r7
 802226c:	bd80      	pop	{r7, pc}
 802226e:	bf00      	nop
 8022270:	2002734c 	.word	0x2002734c
 8022274:	2002732c 	.word	0x2002732c
 8022278:	20026e54 	.word	0x20026e54
 802227c:	200272e4 	.word	0x200272e4
 8022280:	20026e50 	.word	0x20026e50
 8022284:	20027338 	.word	0x20027338

08022288 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8022288:	b580      	push	{r7, lr}
 802228a:	b084      	sub	sp, #16
 802228c:	af00      	add	r7, sp, #0
 802228e:	6078      	str	r0, [r7, #4]
 8022290:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8022292:	4b21      	ldr	r3, [pc, #132]	; (8022318 <prvAddCurrentTaskToDelayedList+0x90>)
 8022294:	681b      	ldr	r3, [r3, #0]
 8022296:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022298:	4b20      	ldr	r3, [pc, #128]	; (802231c <prvAddCurrentTaskToDelayedList+0x94>)
 802229a:	681b      	ldr	r3, [r3, #0]
 802229c:	3304      	adds	r3, #4
 802229e:	4618      	mov	r0, r3
 80222a0:	f7fd faa8 	bl	801f7f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80222a4:	687b      	ldr	r3, [r7, #4]
 80222a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80222aa:	d10a      	bne.n	80222c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80222ac:	683b      	ldr	r3, [r7, #0]
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d007      	beq.n	80222c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80222b2:	4b1a      	ldr	r3, [pc, #104]	; (802231c <prvAddCurrentTaskToDelayedList+0x94>)
 80222b4:	681b      	ldr	r3, [r3, #0]
 80222b6:	3304      	adds	r3, #4
 80222b8:	4619      	mov	r1, r3
 80222ba:	4819      	ldr	r0, [pc, #100]	; (8022320 <prvAddCurrentTaskToDelayedList+0x98>)
 80222bc:	f7fd fa3d 	bl	801f73a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80222c0:	e026      	b.n	8022310 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80222c2:	68fa      	ldr	r2, [r7, #12]
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	4413      	add	r3, r2
 80222c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80222ca:	4b14      	ldr	r3, [pc, #80]	; (802231c <prvAddCurrentTaskToDelayedList+0x94>)
 80222cc:	681b      	ldr	r3, [r3, #0]
 80222ce:	68ba      	ldr	r2, [r7, #8]
 80222d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80222d2:	68ba      	ldr	r2, [r7, #8]
 80222d4:	68fb      	ldr	r3, [r7, #12]
 80222d6:	429a      	cmp	r2, r3
 80222d8:	d209      	bcs.n	80222ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80222da:	4b12      	ldr	r3, [pc, #72]	; (8022324 <prvAddCurrentTaskToDelayedList+0x9c>)
 80222dc:	681a      	ldr	r2, [r3, #0]
 80222de:	4b0f      	ldr	r3, [pc, #60]	; (802231c <prvAddCurrentTaskToDelayedList+0x94>)
 80222e0:	681b      	ldr	r3, [r3, #0]
 80222e2:	3304      	adds	r3, #4
 80222e4:	4619      	mov	r1, r3
 80222e6:	4610      	mov	r0, r2
 80222e8:	f7fd fa4b 	bl	801f782 <vListInsert>
}
 80222ec:	e010      	b.n	8022310 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80222ee:	4b0e      	ldr	r3, [pc, #56]	; (8022328 <prvAddCurrentTaskToDelayedList+0xa0>)
 80222f0:	681a      	ldr	r2, [r3, #0]
 80222f2:	4b0a      	ldr	r3, [pc, #40]	; (802231c <prvAddCurrentTaskToDelayedList+0x94>)
 80222f4:	681b      	ldr	r3, [r3, #0]
 80222f6:	3304      	adds	r3, #4
 80222f8:	4619      	mov	r1, r3
 80222fa:	4610      	mov	r0, r2
 80222fc:	f7fd fa41 	bl	801f782 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8022300:	4b0a      	ldr	r3, [pc, #40]	; (802232c <prvAddCurrentTaskToDelayedList+0xa4>)
 8022302:	681b      	ldr	r3, [r3, #0]
 8022304:	68ba      	ldr	r2, [r7, #8]
 8022306:	429a      	cmp	r2, r3
 8022308:	d202      	bcs.n	8022310 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 802230a:	4a08      	ldr	r2, [pc, #32]	; (802232c <prvAddCurrentTaskToDelayedList+0xa4>)
 802230c:	68bb      	ldr	r3, [r7, #8]
 802230e:	6013      	str	r3, [r2, #0]
}
 8022310:	bf00      	nop
 8022312:	3710      	adds	r7, #16
 8022314:	46bd      	mov	sp, r7
 8022316:	bd80      	pop	{r7, pc}
 8022318:	20027328 	.word	0x20027328
 802231c:	20026e50 	.word	0x20026e50
 8022320:	20027310 	.word	0x20027310
 8022324:	200272e0 	.word	0x200272e0
 8022328:	200272dc 	.word	0x200272dc
 802232c:	20027344 	.word	0x20027344

08022330 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8022330:	b580      	push	{r7, lr}
 8022332:	b08a      	sub	sp, #40	; 0x28
 8022334:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8022336:	2300      	movs	r3, #0
 8022338:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802233a:	f000 fb51 	bl	80229e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 802233e:	4b1c      	ldr	r3, [pc, #112]	; (80223b0 <xTimerCreateTimerTask+0x80>)
 8022340:	681b      	ldr	r3, [r3, #0]
 8022342:	2b00      	cmp	r3, #0
 8022344:	d021      	beq.n	802238a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8022346:	2300      	movs	r3, #0
 8022348:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802234a:	2300      	movs	r3, #0
 802234c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802234e:	1d3a      	adds	r2, r7, #4
 8022350:	f107 0108 	add.w	r1, r7, #8
 8022354:	f107 030c 	add.w	r3, r7, #12
 8022358:	4618      	mov	r0, r3
 802235a:	f7fc ffcb 	bl	801f2f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 802235e:	6879      	ldr	r1, [r7, #4]
 8022360:	68bb      	ldr	r3, [r7, #8]
 8022362:	68fa      	ldr	r2, [r7, #12]
 8022364:	9202      	str	r2, [sp, #8]
 8022366:	9301      	str	r3, [sp, #4]
 8022368:	2302      	movs	r3, #2
 802236a:	9300      	str	r3, [sp, #0]
 802236c:	2300      	movs	r3, #0
 802236e:	460a      	mov	r2, r1
 8022370:	4910      	ldr	r1, [pc, #64]	; (80223b4 <xTimerCreateTimerTask+0x84>)
 8022372:	4811      	ldr	r0, [pc, #68]	; (80223b8 <xTimerCreateTimerTask+0x88>)
 8022374:	f7fe fd28 	bl	8020dc8 <xTaskCreateStatic>
 8022378:	4602      	mov	r2, r0
 802237a:	4b10      	ldr	r3, [pc, #64]	; (80223bc <xTimerCreateTimerTask+0x8c>)
 802237c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 802237e:	4b0f      	ldr	r3, [pc, #60]	; (80223bc <xTimerCreateTimerTask+0x8c>)
 8022380:	681b      	ldr	r3, [r3, #0]
 8022382:	2b00      	cmp	r3, #0
 8022384:	d001      	beq.n	802238a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8022386:	2301      	movs	r3, #1
 8022388:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 802238a:	697b      	ldr	r3, [r7, #20]
 802238c:	2b00      	cmp	r3, #0
 802238e:	d109      	bne.n	80223a4 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8022390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022394:	f383 8811 	msr	BASEPRI, r3
 8022398:	f3bf 8f6f 	isb	sy
 802239c:	f3bf 8f4f 	dsb	sy
 80223a0:	613b      	str	r3, [r7, #16]
 80223a2:	e7fe      	b.n	80223a2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80223a4:	697b      	ldr	r3, [r7, #20]
}
 80223a6:	4618      	mov	r0, r3
 80223a8:	3718      	adds	r7, #24
 80223aa:	46bd      	mov	sp, r7
 80223ac:	bd80      	pop	{r7, pc}
 80223ae:	bf00      	nop
 80223b0:	20027388 	.word	0x20027388
 80223b4:	08028024 	.word	0x08028024
 80223b8:	080225f5 	.word	0x080225f5
 80223bc:	2002738c 	.word	0x2002738c

080223c0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80223c0:	b580      	push	{r7, lr}
 80223c2:	b088      	sub	sp, #32
 80223c4:	af02      	add	r7, sp, #8
 80223c6:	60f8      	str	r0, [r7, #12]
 80223c8:	60b9      	str	r1, [r7, #8]
 80223ca:	607a      	str	r2, [r7, #4]
 80223cc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80223ce:	2030      	movs	r0, #48	; 0x30
 80223d0:	f7fc ffaa 	bl	801f328 <pvPortMalloc>
 80223d4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80223d6:	697b      	ldr	r3, [r7, #20]
 80223d8:	2b00      	cmp	r3, #0
 80223da:	d00d      	beq.n	80223f8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80223dc:	697b      	ldr	r3, [r7, #20]
 80223de:	9301      	str	r3, [sp, #4]
 80223e0:	6a3b      	ldr	r3, [r7, #32]
 80223e2:	9300      	str	r3, [sp, #0]
 80223e4:	683b      	ldr	r3, [r7, #0]
 80223e6:	687a      	ldr	r2, [r7, #4]
 80223e8:	68b9      	ldr	r1, [r7, #8]
 80223ea:	68f8      	ldr	r0, [r7, #12]
 80223ec:	f000 f844 	bl	8022478 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80223f0:	697b      	ldr	r3, [r7, #20]
 80223f2:	2200      	movs	r2, #0
 80223f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80223f8:	697b      	ldr	r3, [r7, #20]
	}
 80223fa:	4618      	mov	r0, r3
 80223fc:	3718      	adds	r7, #24
 80223fe:	46bd      	mov	sp, r7
 8022400:	bd80      	pop	{r7, pc}

08022402 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8022402:	b580      	push	{r7, lr}
 8022404:	b08a      	sub	sp, #40	; 0x28
 8022406:	af02      	add	r7, sp, #8
 8022408:	60f8      	str	r0, [r7, #12]
 802240a:	60b9      	str	r1, [r7, #8]
 802240c:	607a      	str	r2, [r7, #4]
 802240e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8022410:	2330      	movs	r3, #48	; 0x30
 8022412:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8022414:	693b      	ldr	r3, [r7, #16]
 8022416:	2b30      	cmp	r3, #48	; 0x30
 8022418:	d009      	beq.n	802242e <xTimerCreateStatic+0x2c>
 802241a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802241e:	f383 8811 	msr	BASEPRI, r3
 8022422:	f3bf 8f6f 	isb	sy
 8022426:	f3bf 8f4f 	dsb	sy
 802242a:	61bb      	str	r3, [r7, #24]
 802242c:	e7fe      	b.n	802242c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 802242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022430:	2b00      	cmp	r3, #0
 8022432:	d109      	bne.n	8022448 <xTimerCreateStatic+0x46>
 8022434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022438:	f383 8811 	msr	BASEPRI, r3
 802243c:	f3bf 8f6f 	isb	sy
 8022440:	f3bf 8f4f 	dsb	sy
 8022444:	617b      	str	r3, [r7, #20]
 8022446:	e7fe      	b.n	8022446 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8022448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802244a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 802244c:	69fb      	ldr	r3, [r7, #28]
 802244e:	2b00      	cmp	r3, #0
 8022450:	d00d      	beq.n	802246e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8022452:	69fb      	ldr	r3, [r7, #28]
 8022454:	9301      	str	r3, [sp, #4]
 8022456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022458:	9300      	str	r3, [sp, #0]
 802245a:	683b      	ldr	r3, [r7, #0]
 802245c:	687a      	ldr	r2, [r7, #4]
 802245e:	68b9      	ldr	r1, [r7, #8]
 8022460:	68f8      	ldr	r0, [r7, #12]
 8022462:	f000 f809 	bl	8022478 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8022466:	69fb      	ldr	r3, [r7, #28]
 8022468:	2201      	movs	r2, #1
 802246a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 802246e:	69fb      	ldr	r3, [r7, #28]
	}
 8022470:	4618      	mov	r0, r3
 8022472:	3720      	adds	r7, #32
 8022474:	46bd      	mov	sp, r7
 8022476:	bd80      	pop	{r7, pc}

08022478 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8022478:	b580      	push	{r7, lr}
 802247a:	b086      	sub	sp, #24
 802247c:	af00      	add	r7, sp, #0
 802247e:	60f8      	str	r0, [r7, #12]
 8022480:	60b9      	str	r1, [r7, #8]
 8022482:	607a      	str	r2, [r7, #4]
 8022484:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8022486:	68bb      	ldr	r3, [r7, #8]
 8022488:	2b00      	cmp	r3, #0
 802248a:	d109      	bne.n	80224a0 <prvInitialiseNewTimer+0x28>
 802248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022490:	f383 8811 	msr	BASEPRI, r3
 8022494:	f3bf 8f6f 	isb	sy
 8022498:	f3bf 8f4f 	dsb	sy
 802249c:	617b      	str	r3, [r7, #20]
 802249e:	e7fe      	b.n	802249e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80224a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224a2:	2b00      	cmp	r3, #0
 80224a4:	d015      	beq.n	80224d2 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80224a6:	f000 fa9b 	bl	80229e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80224aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224ac:	68fa      	ldr	r2, [r7, #12]
 80224ae:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80224b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224b2:	68ba      	ldr	r2, [r7, #8]
 80224b4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80224b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224b8:	687a      	ldr	r2, [r7, #4]
 80224ba:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80224bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224be:	683a      	ldr	r2, [r7, #0]
 80224c0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80224c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224c4:	6a3a      	ldr	r2, [r7, #32]
 80224c6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80224c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224ca:	3304      	adds	r3, #4
 80224cc:	4618      	mov	r0, r3
 80224ce:	f7fd f927 	bl	801f720 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80224d2:	bf00      	nop
 80224d4:	3718      	adds	r7, #24
 80224d6:	46bd      	mov	sp, r7
 80224d8:	bd80      	pop	{r7, pc}
	...

080224dc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80224dc:	b580      	push	{r7, lr}
 80224de:	b08a      	sub	sp, #40	; 0x28
 80224e0:	af00      	add	r7, sp, #0
 80224e2:	60f8      	str	r0, [r7, #12]
 80224e4:	60b9      	str	r1, [r7, #8]
 80224e6:	607a      	str	r2, [r7, #4]
 80224e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80224ea:	2300      	movs	r3, #0
 80224ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80224ee:	68fb      	ldr	r3, [r7, #12]
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	d109      	bne.n	8022508 <xTimerGenericCommand+0x2c>
 80224f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80224f8:	f383 8811 	msr	BASEPRI, r3
 80224fc:	f3bf 8f6f 	isb	sy
 8022500:	f3bf 8f4f 	dsb	sy
 8022504:	623b      	str	r3, [r7, #32]
 8022506:	e7fe      	b.n	8022506 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8022508:	4b19      	ldr	r3, [pc, #100]	; (8022570 <xTimerGenericCommand+0x94>)
 802250a:	681b      	ldr	r3, [r3, #0]
 802250c:	2b00      	cmp	r3, #0
 802250e:	d02a      	beq.n	8022566 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8022510:	68bb      	ldr	r3, [r7, #8]
 8022512:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8022514:	687b      	ldr	r3, [r7, #4]
 8022516:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8022518:	68fb      	ldr	r3, [r7, #12]
 802251a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802251c:	68bb      	ldr	r3, [r7, #8]
 802251e:	2b05      	cmp	r3, #5
 8022520:	dc18      	bgt.n	8022554 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8022522:	f7ff fb5b 	bl	8021bdc <xTaskGetSchedulerState>
 8022526:	4603      	mov	r3, r0
 8022528:	2b02      	cmp	r3, #2
 802252a:	d109      	bne.n	8022540 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802252c:	4b10      	ldr	r3, [pc, #64]	; (8022570 <xTimerGenericCommand+0x94>)
 802252e:	6818      	ldr	r0, [r3, #0]
 8022530:	f107 0110 	add.w	r1, r7, #16
 8022534:	2300      	movs	r3, #0
 8022536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022538:	f7fd fdfc 	bl	8020134 <xQueueGenericSend>
 802253c:	6278      	str	r0, [r7, #36]	; 0x24
 802253e:	e012      	b.n	8022566 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8022540:	4b0b      	ldr	r3, [pc, #44]	; (8022570 <xTimerGenericCommand+0x94>)
 8022542:	6818      	ldr	r0, [r3, #0]
 8022544:	f107 0110 	add.w	r1, r7, #16
 8022548:	2300      	movs	r3, #0
 802254a:	2200      	movs	r2, #0
 802254c:	f7fd fdf2 	bl	8020134 <xQueueGenericSend>
 8022550:	6278      	str	r0, [r7, #36]	; 0x24
 8022552:	e008      	b.n	8022566 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8022554:	4b06      	ldr	r3, [pc, #24]	; (8022570 <xTimerGenericCommand+0x94>)
 8022556:	6818      	ldr	r0, [r3, #0]
 8022558:	f107 0110 	add.w	r1, r7, #16
 802255c:	2300      	movs	r3, #0
 802255e:	683a      	ldr	r2, [r7, #0]
 8022560:	f7fd fee2 	bl	8020328 <xQueueGenericSendFromISR>
 8022564:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8022566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8022568:	4618      	mov	r0, r3
 802256a:	3728      	adds	r7, #40	; 0x28
 802256c:	46bd      	mov	sp, r7
 802256e:	bd80      	pop	{r7, pc}
 8022570:	20027388 	.word	0x20027388

08022574 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8022574:	b580      	push	{r7, lr}
 8022576:	b088      	sub	sp, #32
 8022578:	af02      	add	r7, sp, #8
 802257a:	6078      	str	r0, [r7, #4]
 802257c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 802257e:	4b1c      	ldr	r3, [pc, #112]	; (80225f0 <prvProcessExpiredTimer+0x7c>)
 8022580:	681b      	ldr	r3, [r3, #0]
 8022582:	68db      	ldr	r3, [r3, #12]
 8022584:	68db      	ldr	r3, [r3, #12]
 8022586:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022588:	697b      	ldr	r3, [r7, #20]
 802258a:	3304      	adds	r3, #4
 802258c:	4618      	mov	r0, r3
 802258e:	f7fd f931 	bl	801f7f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8022592:	697b      	ldr	r3, [r7, #20]
 8022594:	69db      	ldr	r3, [r3, #28]
 8022596:	2b01      	cmp	r3, #1
 8022598:	d121      	bne.n	80225de <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 802259a:	697b      	ldr	r3, [r7, #20]
 802259c:	699a      	ldr	r2, [r3, #24]
 802259e:	687b      	ldr	r3, [r7, #4]
 80225a0:	18d1      	adds	r1, r2, r3
 80225a2:	687b      	ldr	r3, [r7, #4]
 80225a4:	683a      	ldr	r2, [r7, #0]
 80225a6:	6978      	ldr	r0, [r7, #20]
 80225a8:	f000 f8c8 	bl	802273c <prvInsertTimerInActiveList>
 80225ac:	4603      	mov	r3, r0
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	d015      	beq.n	80225de <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80225b2:	2300      	movs	r3, #0
 80225b4:	9300      	str	r3, [sp, #0]
 80225b6:	2300      	movs	r3, #0
 80225b8:	687a      	ldr	r2, [r7, #4]
 80225ba:	2100      	movs	r1, #0
 80225bc:	6978      	ldr	r0, [r7, #20]
 80225be:	f7ff ff8d 	bl	80224dc <xTimerGenericCommand>
 80225c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80225c4:	693b      	ldr	r3, [r7, #16]
 80225c6:	2b00      	cmp	r3, #0
 80225c8:	d109      	bne.n	80225de <prvProcessExpiredTimer+0x6a>
 80225ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80225ce:	f383 8811 	msr	BASEPRI, r3
 80225d2:	f3bf 8f6f 	isb	sy
 80225d6:	f3bf 8f4f 	dsb	sy
 80225da:	60fb      	str	r3, [r7, #12]
 80225dc:	e7fe      	b.n	80225dc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80225de:	697b      	ldr	r3, [r7, #20]
 80225e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225e2:	6978      	ldr	r0, [r7, #20]
 80225e4:	4798      	blx	r3
}
 80225e6:	bf00      	nop
 80225e8:	3718      	adds	r7, #24
 80225ea:	46bd      	mov	sp, r7
 80225ec:	bd80      	pop	{r7, pc}
 80225ee:	bf00      	nop
 80225f0:	20027380 	.word	0x20027380

080225f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80225f4:	b580      	push	{r7, lr}
 80225f6:	b084      	sub	sp, #16
 80225f8:	af00      	add	r7, sp, #0
 80225fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80225fc:	f107 0308 	add.w	r3, r7, #8
 8022600:	4618      	mov	r0, r3
 8022602:	f000 f857 	bl	80226b4 <prvGetNextExpireTime>
 8022606:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8022608:	68bb      	ldr	r3, [r7, #8]
 802260a:	4619      	mov	r1, r3
 802260c:	68f8      	ldr	r0, [r7, #12]
 802260e:	f000 f803 	bl	8022618 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8022612:	f000 f8d5 	bl	80227c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022616:	e7f1      	b.n	80225fc <prvTimerTask+0x8>

08022618 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8022618:	b580      	push	{r7, lr}
 802261a:	b084      	sub	sp, #16
 802261c:	af00      	add	r7, sp, #0
 802261e:	6078      	str	r0, [r7, #4]
 8022620:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8022622:	f7fe fe05 	bl	8021230 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022626:	f107 0308 	add.w	r3, r7, #8
 802262a:	4618      	mov	r0, r3
 802262c:	f000 f866 	bl	80226fc <prvSampleTimeNow>
 8022630:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8022632:	68bb      	ldr	r3, [r7, #8]
 8022634:	2b00      	cmp	r3, #0
 8022636:	d130      	bne.n	802269a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8022638:	683b      	ldr	r3, [r7, #0]
 802263a:	2b00      	cmp	r3, #0
 802263c:	d10a      	bne.n	8022654 <prvProcessTimerOrBlockTask+0x3c>
 802263e:	687a      	ldr	r2, [r7, #4]
 8022640:	68fb      	ldr	r3, [r7, #12]
 8022642:	429a      	cmp	r2, r3
 8022644:	d806      	bhi.n	8022654 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8022646:	f7fe fe39 	bl	80212bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802264a:	68f9      	ldr	r1, [r7, #12]
 802264c:	6878      	ldr	r0, [r7, #4]
 802264e:	f7ff ff91 	bl	8022574 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8022652:	e024      	b.n	802269e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8022654:	683b      	ldr	r3, [r7, #0]
 8022656:	2b00      	cmp	r3, #0
 8022658:	d008      	beq.n	802266c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802265a:	4b13      	ldr	r3, [pc, #76]	; (80226a8 <prvProcessTimerOrBlockTask+0x90>)
 802265c:	681b      	ldr	r3, [r3, #0]
 802265e:	681b      	ldr	r3, [r3, #0]
 8022660:	2b00      	cmp	r3, #0
 8022662:	bf0c      	ite	eq
 8022664:	2301      	moveq	r3, #1
 8022666:	2300      	movne	r3, #0
 8022668:	b2db      	uxtb	r3, r3
 802266a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 802266c:	4b0f      	ldr	r3, [pc, #60]	; (80226ac <prvProcessTimerOrBlockTask+0x94>)
 802266e:	6818      	ldr	r0, [r3, #0]
 8022670:	687a      	ldr	r2, [r7, #4]
 8022672:	68fb      	ldr	r3, [r7, #12]
 8022674:	1ad3      	subs	r3, r2, r3
 8022676:	683a      	ldr	r2, [r7, #0]
 8022678:	4619      	mov	r1, r3
 802267a:	f7fe fb71 	bl	8020d60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 802267e:	f7fe fe1d 	bl	80212bc <xTaskResumeAll>
 8022682:	4603      	mov	r3, r0
 8022684:	2b00      	cmp	r3, #0
 8022686:	d10a      	bne.n	802269e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8022688:	4b09      	ldr	r3, [pc, #36]	; (80226b0 <prvProcessTimerOrBlockTask+0x98>)
 802268a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802268e:	601a      	str	r2, [r3, #0]
 8022690:	f3bf 8f4f 	dsb	sy
 8022694:	f3bf 8f6f 	isb	sy
}
 8022698:	e001      	b.n	802269e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 802269a:	f7fe fe0f 	bl	80212bc <xTaskResumeAll>
}
 802269e:	bf00      	nop
 80226a0:	3710      	adds	r7, #16
 80226a2:	46bd      	mov	sp, r7
 80226a4:	bd80      	pop	{r7, pc}
 80226a6:	bf00      	nop
 80226a8:	20027384 	.word	0x20027384
 80226ac:	20027388 	.word	0x20027388
 80226b0:	e000ed04 	.word	0xe000ed04

080226b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80226b4:	b480      	push	{r7}
 80226b6:	b085      	sub	sp, #20
 80226b8:	af00      	add	r7, sp, #0
 80226ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80226bc:	4b0e      	ldr	r3, [pc, #56]	; (80226f8 <prvGetNextExpireTime+0x44>)
 80226be:	681b      	ldr	r3, [r3, #0]
 80226c0:	681b      	ldr	r3, [r3, #0]
 80226c2:	2b00      	cmp	r3, #0
 80226c4:	bf0c      	ite	eq
 80226c6:	2301      	moveq	r3, #1
 80226c8:	2300      	movne	r3, #0
 80226ca:	b2db      	uxtb	r3, r3
 80226cc:	461a      	mov	r2, r3
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80226d2:	687b      	ldr	r3, [r7, #4]
 80226d4:	681b      	ldr	r3, [r3, #0]
 80226d6:	2b00      	cmp	r3, #0
 80226d8:	d105      	bne.n	80226e6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80226da:	4b07      	ldr	r3, [pc, #28]	; (80226f8 <prvGetNextExpireTime+0x44>)
 80226dc:	681b      	ldr	r3, [r3, #0]
 80226de:	68db      	ldr	r3, [r3, #12]
 80226e0:	681b      	ldr	r3, [r3, #0]
 80226e2:	60fb      	str	r3, [r7, #12]
 80226e4:	e001      	b.n	80226ea <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80226e6:	2300      	movs	r3, #0
 80226e8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80226ea:	68fb      	ldr	r3, [r7, #12]
}
 80226ec:	4618      	mov	r0, r3
 80226ee:	3714      	adds	r7, #20
 80226f0:	46bd      	mov	sp, r7
 80226f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226f6:	4770      	bx	lr
 80226f8:	20027380 	.word	0x20027380

080226fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80226fc:	b580      	push	{r7, lr}
 80226fe:	b084      	sub	sp, #16
 8022700:	af00      	add	r7, sp, #0
 8022702:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8022704:	f7fe fe76 	bl	80213f4 <xTaskGetTickCount>
 8022708:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 802270a:	4b0b      	ldr	r3, [pc, #44]	; (8022738 <prvSampleTimeNow+0x3c>)
 802270c:	681b      	ldr	r3, [r3, #0]
 802270e:	68fa      	ldr	r2, [r7, #12]
 8022710:	429a      	cmp	r2, r3
 8022712:	d205      	bcs.n	8022720 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8022714:	f000 f904 	bl	8022920 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	2201      	movs	r2, #1
 802271c:	601a      	str	r2, [r3, #0]
 802271e:	e002      	b.n	8022726 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	2200      	movs	r2, #0
 8022724:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8022726:	4a04      	ldr	r2, [pc, #16]	; (8022738 <prvSampleTimeNow+0x3c>)
 8022728:	68fb      	ldr	r3, [r7, #12]
 802272a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 802272c:	68fb      	ldr	r3, [r7, #12]
}
 802272e:	4618      	mov	r0, r3
 8022730:	3710      	adds	r7, #16
 8022732:	46bd      	mov	sp, r7
 8022734:	bd80      	pop	{r7, pc}
 8022736:	bf00      	nop
 8022738:	20027390 	.word	0x20027390

0802273c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 802273c:	b580      	push	{r7, lr}
 802273e:	b086      	sub	sp, #24
 8022740:	af00      	add	r7, sp, #0
 8022742:	60f8      	str	r0, [r7, #12]
 8022744:	60b9      	str	r1, [r7, #8]
 8022746:	607a      	str	r2, [r7, #4]
 8022748:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802274a:	2300      	movs	r3, #0
 802274c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 802274e:	68fb      	ldr	r3, [r7, #12]
 8022750:	68ba      	ldr	r2, [r7, #8]
 8022752:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022754:	68fb      	ldr	r3, [r7, #12]
 8022756:	68fa      	ldr	r2, [r7, #12]
 8022758:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802275a:	68ba      	ldr	r2, [r7, #8]
 802275c:	687b      	ldr	r3, [r7, #4]
 802275e:	429a      	cmp	r2, r3
 8022760:	d812      	bhi.n	8022788 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022762:	687a      	ldr	r2, [r7, #4]
 8022764:	683b      	ldr	r3, [r7, #0]
 8022766:	1ad2      	subs	r2, r2, r3
 8022768:	68fb      	ldr	r3, [r7, #12]
 802276a:	699b      	ldr	r3, [r3, #24]
 802276c:	429a      	cmp	r2, r3
 802276e:	d302      	bcc.n	8022776 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8022770:	2301      	movs	r3, #1
 8022772:	617b      	str	r3, [r7, #20]
 8022774:	e01b      	b.n	80227ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8022776:	4b10      	ldr	r3, [pc, #64]	; (80227b8 <prvInsertTimerInActiveList+0x7c>)
 8022778:	681a      	ldr	r2, [r3, #0]
 802277a:	68fb      	ldr	r3, [r7, #12]
 802277c:	3304      	adds	r3, #4
 802277e:	4619      	mov	r1, r3
 8022780:	4610      	mov	r0, r2
 8022782:	f7fc fffe 	bl	801f782 <vListInsert>
 8022786:	e012      	b.n	80227ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8022788:	687a      	ldr	r2, [r7, #4]
 802278a:	683b      	ldr	r3, [r7, #0]
 802278c:	429a      	cmp	r2, r3
 802278e:	d206      	bcs.n	802279e <prvInsertTimerInActiveList+0x62>
 8022790:	68ba      	ldr	r2, [r7, #8]
 8022792:	683b      	ldr	r3, [r7, #0]
 8022794:	429a      	cmp	r2, r3
 8022796:	d302      	bcc.n	802279e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8022798:	2301      	movs	r3, #1
 802279a:	617b      	str	r3, [r7, #20]
 802279c:	e007      	b.n	80227ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802279e:	4b07      	ldr	r3, [pc, #28]	; (80227bc <prvInsertTimerInActiveList+0x80>)
 80227a0:	681a      	ldr	r2, [r3, #0]
 80227a2:	68fb      	ldr	r3, [r7, #12]
 80227a4:	3304      	adds	r3, #4
 80227a6:	4619      	mov	r1, r3
 80227a8:	4610      	mov	r0, r2
 80227aa:	f7fc ffea 	bl	801f782 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80227ae:	697b      	ldr	r3, [r7, #20]
}
 80227b0:	4618      	mov	r0, r3
 80227b2:	3718      	adds	r7, #24
 80227b4:	46bd      	mov	sp, r7
 80227b6:	bd80      	pop	{r7, pc}
 80227b8:	20027384 	.word	0x20027384
 80227bc:	20027380 	.word	0x20027380

080227c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80227c0:	b580      	push	{r7, lr}
 80227c2:	b08e      	sub	sp, #56	; 0x38
 80227c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80227c6:	e099      	b.n	80228fc <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80227c8:	687b      	ldr	r3, [r7, #4]
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	da17      	bge.n	80227fe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80227ce:	1d3b      	adds	r3, r7, #4
 80227d0:	3304      	adds	r3, #4
 80227d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80227d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80227d6:	2b00      	cmp	r3, #0
 80227d8:	d109      	bne.n	80227ee <prvProcessReceivedCommands+0x2e>
 80227da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80227de:	f383 8811 	msr	BASEPRI, r3
 80227e2:	f3bf 8f6f 	isb	sy
 80227e6:	f3bf 8f4f 	dsb	sy
 80227ea:	61fb      	str	r3, [r7, #28]
 80227ec:	e7fe      	b.n	80227ec <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80227ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80227f0:	681b      	ldr	r3, [r3, #0]
 80227f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80227f4:	6850      	ldr	r0, [r2, #4]
 80227f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80227f8:	6892      	ldr	r2, [r2, #8]
 80227fa:	4611      	mov	r1, r2
 80227fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80227fe:	687b      	ldr	r3, [r7, #4]
 8022800:	2b00      	cmp	r3, #0
 8022802:	db7a      	blt.n	80228fa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8022804:	68fb      	ldr	r3, [r7, #12]
 8022806:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8022808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802280a:	695b      	ldr	r3, [r3, #20]
 802280c:	2b00      	cmp	r3, #0
 802280e:	d004      	beq.n	802281a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022812:	3304      	adds	r3, #4
 8022814:	4618      	mov	r0, r3
 8022816:	f7fc ffed 	bl	801f7f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802281a:	463b      	mov	r3, r7
 802281c:	4618      	mov	r0, r3
 802281e:	f7ff ff6d 	bl	80226fc <prvSampleTimeNow>
 8022822:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8022824:	687b      	ldr	r3, [r7, #4]
 8022826:	2b09      	cmp	r3, #9
 8022828:	d868      	bhi.n	80228fc <prvProcessReceivedCommands+0x13c>
 802282a:	a201      	add	r2, pc, #4	; (adr r2, 8022830 <prvProcessReceivedCommands+0x70>)
 802282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022830:	08022859 	.word	0x08022859
 8022834:	08022859 	.word	0x08022859
 8022838:	08022859 	.word	0x08022859
 802283c:	080228fd 	.word	0x080228fd
 8022840:	080228b3 	.word	0x080228b3
 8022844:	080228e9 	.word	0x080228e9
 8022848:	08022859 	.word	0x08022859
 802284c:	08022859 	.word	0x08022859
 8022850:	080228fd 	.word	0x080228fd
 8022854:	080228b3 	.word	0x080228b3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8022858:	68ba      	ldr	r2, [r7, #8]
 802285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802285c:	699b      	ldr	r3, [r3, #24]
 802285e:	18d1      	adds	r1, r2, r3
 8022860:	68bb      	ldr	r3, [r7, #8]
 8022862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022866:	f7ff ff69 	bl	802273c <prvInsertTimerInActiveList>
 802286a:	4603      	mov	r3, r0
 802286c:	2b00      	cmp	r3, #0
 802286e:	d045      	beq.n	80228fc <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022876:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8022878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802287a:	69db      	ldr	r3, [r3, #28]
 802287c:	2b01      	cmp	r3, #1
 802287e:	d13d      	bne.n	80228fc <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8022880:	68ba      	ldr	r2, [r7, #8]
 8022882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022884:	699b      	ldr	r3, [r3, #24]
 8022886:	441a      	add	r2, r3
 8022888:	2300      	movs	r3, #0
 802288a:	9300      	str	r3, [sp, #0]
 802288c:	2300      	movs	r3, #0
 802288e:	2100      	movs	r1, #0
 8022890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022892:	f7ff fe23 	bl	80224dc <xTimerGenericCommand>
 8022896:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8022898:	6a3b      	ldr	r3, [r7, #32]
 802289a:	2b00      	cmp	r3, #0
 802289c:	d12e      	bne.n	80228fc <prvProcessReceivedCommands+0x13c>
 802289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80228a2:	f383 8811 	msr	BASEPRI, r3
 80228a6:	f3bf 8f6f 	isb	sy
 80228aa:	f3bf 8f4f 	dsb	sy
 80228ae:	61bb      	str	r3, [r7, #24]
 80228b0:	e7fe      	b.n	80228b0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80228b2:	68ba      	ldr	r2, [r7, #8]
 80228b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80228b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228ba:	699b      	ldr	r3, [r3, #24]
 80228bc:	2b00      	cmp	r3, #0
 80228be:	d109      	bne.n	80228d4 <prvProcessReceivedCommands+0x114>
 80228c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80228c4:	f383 8811 	msr	BASEPRI, r3
 80228c8:	f3bf 8f6f 	isb	sy
 80228cc:	f3bf 8f4f 	dsb	sy
 80228d0:	617b      	str	r3, [r7, #20]
 80228d2:	e7fe      	b.n	80228d2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80228d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228d6:	699a      	ldr	r2, [r3, #24]
 80228d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80228da:	18d1      	adds	r1, r2, r3
 80228dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80228de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80228e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80228e2:	f7ff ff2b 	bl	802273c <prvInsertTimerInActiveList>
					break;
 80228e6:	e009      	b.n	80228fc <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80228e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80228ee:	2b00      	cmp	r3, #0
 80228f0:	d104      	bne.n	80228fc <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80228f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80228f4:	f7fc fdde 	bl	801f4b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80228f8:	e000      	b.n	80228fc <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80228fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80228fc:	4b07      	ldr	r3, [pc, #28]	; (802291c <prvProcessReceivedCommands+0x15c>)
 80228fe:	681b      	ldr	r3, [r3, #0]
 8022900:	1d39      	adds	r1, r7, #4
 8022902:	2200      	movs	r2, #0
 8022904:	4618      	mov	r0, r3
 8022906:	f7fd fe2d 	bl	8020564 <xQueueReceive>
 802290a:	4603      	mov	r3, r0
 802290c:	2b00      	cmp	r3, #0
 802290e:	f47f af5b 	bne.w	80227c8 <prvProcessReceivedCommands+0x8>
	}
}
 8022912:	bf00      	nop
 8022914:	3730      	adds	r7, #48	; 0x30
 8022916:	46bd      	mov	sp, r7
 8022918:	bd80      	pop	{r7, pc}
 802291a:	bf00      	nop
 802291c:	20027388 	.word	0x20027388

08022920 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8022920:	b580      	push	{r7, lr}
 8022922:	b088      	sub	sp, #32
 8022924:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022926:	e044      	b.n	80229b2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022928:	4b2b      	ldr	r3, [pc, #172]	; (80229d8 <prvSwitchTimerLists+0xb8>)
 802292a:	681b      	ldr	r3, [r3, #0]
 802292c:	68db      	ldr	r3, [r3, #12]
 802292e:	681b      	ldr	r3, [r3, #0]
 8022930:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022932:	4b29      	ldr	r3, [pc, #164]	; (80229d8 <prvSwitchTimerLists+0xb8>)
 8022934:	681b      	ldr	r3, [r3, #0]
 8022936:	68db      	ldr	r3, [r3, #12]
 8022938:	68db      	ldr	r3, [r3, #12]
 802293a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802293c:	68fb      	ldr	r3, [r7, #12]
 802293e:	3304      	adds	r3, #4
 8022940:	4618      	mov	r0, r3
 8022942:	f7fc ff57 	bl	801f7f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022946:	68fb      	ldr	r3, [r7, #12]
 8022948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802294a:	68f8      	ldr	r0, [r7, #12]
 802294c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 802294e:	68fb      	ldr	r3, [r7, #12]
 8022950:	69db      	ldr	r3, [r3, #28]
 8022952:	2b01      	cmp	r3, #1
 8022954:	d12d      	bne.n	80229b2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8022956:	68fb      	ldr	r3, [r7, #12]
 8022958:	699b      	ldr	r3, [r3, #24]
 802295a:	693a      	ldr	r2, [r7, #16]
 802295c:	4413      	add	r3, r2
 802295e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8022960:	68ba      	ldr	r2, [r7, #8]
 8022962:	693b      	ldr	r3, [r7, #16]
 8022964:	429a      	cmp	r2, r3
 8022966:	d90e      	bls.n	8022986 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8022968:	68fb      	ldr	r3, [r7, #12]
 802296a:	68ba      	ldr	r2, [r7, #8]
 802296c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802296e:	68fb      	ldr	r3, [r7, #12]
 8022970:	68fa      	ldr	r2, [r7, #12]
 8022972:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022974:	4b18      	ldr	r3, [pc, #96]	; (80229d8 <prvSwitchTimerLists+0xb8>)
 8022976:	681a      	ldr	r2, [r3, #0]
 8022978:	68fb      	ldr	r3, [r7, #12]
 802297a:	3304      	adds	r3, #4
 802297c:	4619      	mov	r1, r3
 802297e:	4610      	mov	r0, r2
 8022980:	f7fc feff 	bl	801f782 <vListInsert>
 8022984:	e015      	b.n	80229b2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022986:	2300      	movs	r3, #0
 8022988:	9300      	str	r3, [sp, #0]
 802298a:	2300      	movs	r3, #0
 802298c:	693a      	ldr	r2, [r7, #16]
 802298e:	2100      	movs	r1, #0
 8022990:	68f8      	ldr	r0, [r7, #12]
 8022992:	f7ff fda3 	bl	80224dc <xTimerGenericCommand>
 8022996:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	2b00      	cmp	r3, #0
 802299c:	d109      	bne.n	80229b2 <prvSwitchTimerLists+0x92>
 802299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80229a2:	f383 8811 	msr	BASEPRI, r3
 80229a6:	f3bf 8f6f 	isb	sy
 80229aa:	f3bf 8f4f 	dsb	sy
 80229ae:	603b      	str	r3, [r7, #0]
 80229b0:	e7fe      	b.n	80229b0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80229b2:	4b09      	ldr	r3, [pc, #36]	; (80229d8 <prvSwitchTimerLists+0xb8>)
 80229b4:	681b      	ldr	r3, [r3, #0]
 80229b6:	681b      	ldr	r3, [r3, #0]
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	d1b5      	bne.n	8022928 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80229bc:	4b06      	ldr	r3, [pc, #24]	; (80229d8 <prvSwitchTimerLists+0xb8>)
 80229be:	681b      	ldr	r3, [r3, #0]
 80229c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80229c2:	4b06      	ldr	r3, [pc, #24]	; (80229dc <prvSwitchTimerLists+0xbc>)
 80229c4:	681b      	ldr	r3, [r3, #0]
 80229c6:	4a04      	ldr	r2, [pc, #16]	; (80229d8 <prvSwitchTimerLists+0xb8>)
 80229c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80229ca:	4a04      	ldr	r2, [pc, #16]	; (80229dc <prvSwitchTimerLists+0xbc>)
 80229cc:	697b      	ldr	r3, [r7, #20]
 80229ce:	6013      	str	r3, [r2, #0]
}
 80229d0:	bf00      	nop
 80229d2:	3718      	adds	r7, #24
 80229d4:	46bd      	mov	sp, r7
 80229d6:	bd80      	pop	{r7, pc}
 80229d8:	20027380 	.word	0x20027380
 80229dc:	20027384 	.word	0x20027384

080229e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80229e0:	b580      	push	{r7, lr}
 80229e2:	b082      	sub	sp, #8
 80229e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80229e6:	f7fd f859 	bl	801fa9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80229ea:	4b15      	ldr	r3, [pc, #84]	; (8022a40 <prvCheckForValidListAndQueue+0x60>)
 80229ec:	681b      	ldr	r3, [r3, #0]
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	d120      	bne.n	8022a34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80229f2:	4814      	ldr	r0, [pc, #80]	; (8022a44 <prvCheckForValidListAndQueue+0x64>)
 80229f4:	f7fc fe74 	bl	801f6e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80229f8:	4813      	ldr	r0, [pc, #76]	; (8022a48 <prvCheckForValidListAndQueue+0x68>)
 80229fa:	f7fc fe71 	bl	801f6e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80229fe:	4b13      	ldr	r3, [pc, #76]	; (8022a4c <prvCheckForValidListAndQueue+0x6c>)
 8022a00:	4a10      	ldr	r2, [pc, #64]	; (8022a44 <prvCheckForValidListAndQueue+0x64>)
 8022a02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8022a04:	4b12      	ldr	r3, [pc, #72]	; (8022a50 <prvCheckForValidListAndQueue+0x70>)
 8022a06:	4a10      	ldr	r2, [pc, #64]	; (8022a48 <prvCheckForValidListAndQueue+0x68>)
 8022a08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8022a0a:	2300      	movs	r3, #0
 8022a0c:	9300      	str	r3, [sp, #0]
 8022a0e:	4b11      	ldr	r3, [pc, #68]	; (8022a54 <prvCheckForValidListAndQueue+0x74>)
 8022a10:	4a11      	ldr	r2, [pc, #68]	; (8022a58 <prvCheckForValidListAndQueue+0x78>)
 8022a12:	2110      	movs	r1, #16
 8022a14:	200a      	movs	r0, #10
 8022a16:	f7fd f99f 	bl	801fd58 <xQueueGenericCreateStatic>
 8022a1a:	4602      	mov	r2, r0
 8022a1c:	4b08      	ldr	r3, [pc, #32]	; (8022a40 <prvCheckForValidListAndQueue+0x60>)
 8022a1e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8022a20:	4b07      	ldr	r3, [pc, #28]	; (8022a40 <prvCheckForValidListAndQueue+0x60>)
 8022a22:	681b      	ldr	r3, [r3, #0]
 8022a24:	2b00      	cmp	r3, #0
 8022a26:	d005      	beq.n	8022a34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8022a28:	4b05      	ldr	r3, [pc, #20]	; (8022a40 <prvCheckForValidListAndQueue+0x60>)
 8022a2a:	681b      	ldr	r3, [r3, #0]
 8022a2c:	490b      	ldr	r1, [pc, #44]	; (8022a5c <prvCheckForValidListAndQueue+0x7c>)
 8022a2e:	4618      	mov	r0, r3
 8022a30:	f7fe f944 	bl	8020cbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8022a34:	f7fd f860 	bl	801faf8 <vPortExitCritical>
}
 8022a38:	bf00      	nop
 8022a3a:	46bd      	mov	sp, r7
 8022a3c:	bd80      	pop	{r7, pc}
 8022a3e:	bf00      	nop
 8022a40:	20027388 	.word	0x20027388
 8022a44:	20027358 	.word	0x20027358
 8022a48:	2002736c 	.word	0x2002736c
 8022a4c:	20027380 	.word	0x20027380
 8022a50:	20027384 	.word	0x20027384
 8022a54:	20027434 	.word	0x20027434
 8022a58:	20027394 	.word	0x20027394
 8022a5c:	0802802c 	.word	0x0802802c

08022a60 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8022a60:	b580      	push	{r7, lr}
 8022a62:	b086      	sub	sp, #24
 8022a64:	af00      	add	r7, sp, #0
 8022a66:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	d109      	bne.n	8022a86 <xTimerIsTimerActive+0x26>
 8022a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a76:	f383 8811 	msr	BASEPRI, r3
 8022a7a:	f3bf 8f6f 	isb	sy
 8022a7e:	f3bf 8f4f 	dsb	sy
 8022a82:	60fb      	str	r3, [r7, #12]
 8022a84:	e7fe      	b.n	8022a84 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8022a86:	f7fd f809 	bl	801fa9c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8022a8a:	697b      	ldr	r3, [r7, #20]
 8022a8c:	695b      	ldr	r3, [r3, #20]
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	bf14      	ite	ne
 8022a92:	2301      	movne	r3, #1
 8022a94:	2300      	moveq	r3, #0
 8022a96:	b2db      	uxtb	r3, r3
 8022a98:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8022a9a:	f7fd f82d 	bl	801faf8 <vPortExitCritical>

	return xTimerIsInActiveList;
 8022a9e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8022aa0:	4618      	mov	r0, r3
 8022aa2:	3718      	adds	r7, #24
 8022aa4:	46bd      	mov	sp, r7
 8022aa6:	bd80      	pop	{r7, pc}

08022aa8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8022aa8:	b580      	push	{r7, lr}
 8022aaa:	b086      	sub	sp, #24
 8022aac:	af00      	add	r7, sp, #0
 8022aae:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8022ab0:	687b      	ldr	r3, [r7, #4]
 8022ab2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8022ab4:	687b      	ldr	r3, [r7, #4]
 8022ab6:	2b00      	cmp	r3, #0
 8022ab8:	d109      	bne.n	8022ace <pvTimerGetTimerID+0x26>
 8022aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022abe:	f383 8811 	msr	BASEPRI, r3
 8022ac2:	f3bf 8f6f 	isb	sy
 8022ac6:	f3bf 8f4f 	dsb	sy
 8022aca:	60fb      	str	r3, [r7, #12]
 8022acc:	e7fe      	b.n	8022acc <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8022ace:	f7fc ffe5 	bl	801fa9c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8022ad2:	697b      	ldr	r3, [r7, #20]
 8022ad4:	6a1b      	ldr	r3, [r3, #32]
 8022ad6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8022ad8:	f7fd f80e 	bl	801faf8 <vPortExitCritical>

	return pvReturn;
 8022adc:	693b      	ldr	r3, [r7, #16]
}
 8022ade:	4618      	mov	r0, r3
 8022ae0:	3718      	adds	r7, #24
 8022ae2:	46bd      	mov	sp, r7
 8022ae4:	bd80      	pop	{r7, pc}

08022ae6 <otChildSupervisionSetInterval>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetInterval(otInstance *aInstance, uint16_t aInterval)
{
 8022ae6:	b580      	push	{r7, lr}
 8022ae8:	b084      	sub	sp, #16
 8022aea:	af00      	add	r7, sp, #0
 8022aec:	6078      	str	r0, [r7, #4]
 8022aee:	460b      	mov	r3, r1
 8022af0:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8022af2:	f003 f9c3 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022af6:	f003 f95f 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022afa:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_INTERVAL;
 8022afc:	68fb      	ldr	r3, [r7, #12]
 8022afe:	2200      	movs	r2, #0
 8022b00:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8022b04:	701a      	strb	r2, [r3, #0]
 8022b06:	2200      	movs	r2, #0
 8022b08:	f042 0201 	orr.w	r2, r2, #1
 8022b0c:	705a      	strb	r2, [r3, #1]
 8022b0e:	2200      	movs	r2, #0
 8022b10:	709a      	strb	r2, [r3, #2]
 8022b12:	2200      	movs	r2, #0
 8022b14:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8022b16:	68fb      	ldr	r3, [r7, #12]
 8022b18:	2200      	movs	r2, #0
 8022b1a:	f042 0201 	orr.w	r2, r2, #1
 8022b1e:	711a      	strb	r2, [r3, #4]
 8022b20:	2200      	movs	r2, #0
 8022b22:	715a      	strb	r2, [r3, #5]
 8022b24:	2200      	movs	r2, #0
 8022b26:	719a      	strb	r2, [r3, #6]
 8022b28:	2200      	movs	r2, #0
 8022b2a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aInterval;
 8022b2c:	887a      	ldrh	r2, [r7, #2]
 8022b2e:	68fb      	ldr	r3, [r7, #12]
 8022b30:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8022b32:	f003 f965 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022b36:	f003 f94b 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022b3a:	60f8      	str	r0, [r7, #12]
}
 8022b3c:	bf00      	nop
 8022b3e:	3710      	adds	r7, #16
 8022b40:	46bd      	mov	sp, r7
 8022b42:	bd80      	pop	{r7, pc}

08022b44 <otChildSupervisionSetCheckTimeout>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetCheckTimeout(otInstance *aInstance, uint16_t aTimeout)
{
 8022b44:	b580      	push	{r7, lr}
 8022b46:	b084      	sub	sp, #16
 8022b48:	af00      	add	r7, sp, #0
 8022b4a:	6078      	str	r0, [r7, #4]
 8022b4c:	460b      	mov	r3, r1
 8022b4e:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8022b50:	f003 f994 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022b54:	f003 f930 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022b58:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_CHECK_TIMEOUT;
 8022b5a:	68fb      	ldr	r3, [r7, #12]
 8022b5c:	2200      	movs	r2, #0
 8022b5e:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8022b62:	701a      	strb	r2, [r3, #0]
 8022b64:	2200      	movs	r2, #0
 8022b66:	f042 0201 	orr.w	r2, r2, #1
 8022b6a:	705a      	strb	r2, [r3, #1]
 8022b6c:	2200      	movs	r2, #0
 8022b6e:	709a      	strb	r2, [r3, #2]
 8022b70:	2200      	movs	r2, #0
 8022b72:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8022b74:	68fb      	ldr	r3, [r7, #12]
 8022b76:	2200      	movs	r2, #0
 8022b78:	f042 0201 	orr.w	r2, r2, #1
 8022b7c:	711a      	strb	r2, [r3, #4]
 8022b7e:	2200      	movs	r2, #0
 8022b80:	715a      	strb	r2, [r3, #5]
 8022b82:	2200      	movs	r2, #0
 8022b84:	719a      	strb	r2, [r3, #6]
 8022b86:	2200      	movs	r2, #0
 8022b88:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aTimeout;
 8022b8a:	887a      	ldrh	r2, [r7, #2]
 8022b8c:	68fb      	ldr	r3, [r7, #12]
 8022b8e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8022b90:	f003 f936 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022b94:	f003 f91c 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022b98:	60f8      	str	r0, [r7, #12]
}
 8022b9a:	bf00      	nop
 8022b9c:	3710      	adds	r7, #16
 8022b9e:	46bd      	mov	sp, r7
 8022ba0:	bd80      	pop	{r7, pc}

08022ba2 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8022ba2:	b580      	push	{r7, lr}
 8022ba4:	b084      	sub	sp, #16
 8022ba6:	af00      	add	r7, sp, #0
 8022ba8:	6078      	str	r0, [r7, #4]
 8022baa:	460b      	mov	r3, r1
 8022bac:	70fb      	strb	r3, [r7, #3]
 8022bae:	4613      	mov	r3, r2
 8022bb0:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8022bb2:	f003 f963 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022bb6:	f003 f8ff 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022bba:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8022bbc:	68fb      	ldr	r3, [r7, #12]
 8022bbe:	2200      	movs	r2, #0
 8022bc0:	f062 0260 	orn	r2, r2, #96	; 0x60
 8022bc4:	701a      	strb	r2, [r3, #0]
 8022bc6:	2200      	movs	r2, #0
 8022bc8:	705a      	strb	r2, [r3, #1]
 8022bca:	2200      	movs	r2, #0
 8022bcc:	709a      	strb	r2, [r3, #2]
 8022bce:	2200      	movs	r2, #0
 8022bd0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8022bd2:	68fb      	ldr	r3, [r7, #12]
 8022bd4:	2200      	movs	r2, #0
 8022bd6:	f042 0203 	orr.w	r2, r2, #3
 8022bda:	711a      	strb	r2, [r3, #4]
 8022bdc:	2200      	movs	r2, #0
 8022bde:	715a      	strb	r2, [r3, #5]
 8022be0:	2200      	movs	r2, #0
 8022be2:	719a      	strb	r2, [r3, #6]
 8022be4:	2200      	movs	r2, #0
 8022be6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022be8:	687a      	ldr	r2, [r7, #4]
 8022bea:	68fb      	ldr	r3, [r7, #12]
 8022bec:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 8022bee:	78fa      	ldrb	r2, [r7, #3]
 8022bf0:	68fb      	ldr	r3, [r7, #12]
 8022bf2:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8022bf4:	78ba      	ldrb	r2, [r7, #2]
 8022bf6:	68fb      	ldr	r3, [r7, #12]
 8022bf8:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8022bfa:	f003 f901 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022bfe:	f003 f8e7 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022c02:	60f8      	str	r0, [r7, #12]
}
 8022c04:	bf00      	nop
 8022c06:	3710      	adds	r7, #16
 8022c08:	46bd      	mov	sp, r7
 8022c0a:	bd80      	pop	{r7, pc}

08022c0c <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8022c0c:	b580      	push	{r7, lr}
 8022c0e:	b086      	sub	sp, #24
 8022c10:	af00      	add	r7, sp, #0
 8022c12:	60f8      	str	r0, [r7, #12]
 8022c14:	60b9      	str	r1, [r7, #8]
 8022c16:	4613      	mov	r3, r2
 8022c18:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 8022c1a:	f003 f92f 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022c1e:	f003 f8cb 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022c22:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8022c24:	697b      	ldr	r3, [r7, #20]
 8022c26:	2200      	movs	r2, #0
 8022c28:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8022c2c:	701a      	strb	r2, [r3, #0]
 8022c2e:	2200      	movs	r2, #0
 8022c30:	705a      	strb	r2, [r3, #1]
 8022c32:	2200      	movs	r2, #0
 8022c34:	709a      	strb	r2, [r3, #2]
 8022c36:	2200      	movs	r2, #0
 8022c38:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8022c3a:	697b      	ldr	r3, [r7, #20]
 8022c3c:	2200      	movs	r2, #0
 8022c3e:	f042 0203 	orr.w	r2, r2, #3
 8022c42:	711a      	strb	r2, [r3, #4]
 8022c44:	2200      	movs	r2, #0
 8022c46:	715a      	strb	r2, [r3, #5]
 8022c48:	2200      	movs	r2, #0
 8022c4a:	719a      	strb	r2, [r3, #6]
 8022c4c:	2200      	movs	r2, #0
 8022c4e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022c50:	68fa      	ldr	r2, [r7, #12]
 8022c52:	697b      	ldr	r3, [r7, #20]
 8022c54:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8022c56:	68ba      	ldr	r2, [r7, #8]
 8022c58:	697b      	ldr	r3, [r7, #20]
 8022c5a:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8022c5c:	79fa      	ldrb	r2, [r7, #7]
 8022c5e:	697b      	ldr	r3, [r7, #20]
 8022c60:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8022c62:	f003 f8cd 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022c66:	f003 f8b3 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022c6a:	6178      	str	r0, [r7, #20]
}
 8022c6c:	bf00      	nop
 8022c6e:	3718      	adds	r7, #24
 8022c70:	46bd      	mov	sp, r7
 8022c72:	bd80      	pop	{r7, pc}

08022c74 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8022c74:	b580      	push	{r7, lr}
 8022c76:	b084      	sub	sp, #16
 8022c78:	af00      	add	r7, sp, #0
 8022c7a:	6078      	str	r0, [r7, #4]
 8022c7c:	460b      	mov	r3, r1
 8022c7e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8022c80:	f003 f8fc 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022c84:	f003 f898 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022c88:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 8022c8a:	68fb      	ldr	r3, [r7, #12]
 8022c8c:	2200      	movs	r2, #0
 8022c8e:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8022c92:	701a      	strb	r2, [r3, #0]
 8022c94:	2200      	movs	r2, #0
 8022c96:	705a      	strb	r2, [r3, #1]
 8022c98:	2200      	movs	r2, #0
 8022c9a:	709a      	strb	r2, [r3, #2]
 8022c9c:	2200      	movs	r2, #0
 8022c9e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8022ca0:	68fb      	ldr	r3, [r7, #12]
 8022ca2:	2200      	movs	r2, #0
 8022ca4:	f042 0202 	orr.w	r2, r2, #2
 8022ca8:	711a      	strb	r2, [r3, #4]
 8022caa:	2200      	movs	r2, #0
 8022cac:	715a      	strb	r2, [r3, #5]
 8022cae:	2200      	movs	r2, #0
 8022cb0:	719a      	strb	r2, [r3, #6]
 8022cb2:	2200      	movs	r2, #0
 8022cb4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022cb6:	687a      	ldr	r2, [r7, #4]
 8022cb8:	68fb      	ldr	r3, [r7, #12]
 8022cba:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8022cbc:	78fa      	ldrb	r2, [r7, #3]
 8022cbe:	68fb      	ldr	r3, [r7, #12]
 8022cc0:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8022cc2:	f003 f89d 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022cc6:	f003 f883 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022cca:	60f8      	str	r0, [r7, #12]
}
 8022ccc:	bf00      	nop
 8022cce:	3710      	adds	r7, #16
 8022cd0:	46bd      	mov	sp, r7
 8022cd2:	bd80      	pop	{r7, pc}

08022cd4 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8022cd4:	b580      	push	{r7, lr}
 8022cd6:	b084      	sub	sp, #16
 8022cd8:	af00      	add	r7, sp, #0
 8022cda:	6078      	str	r0, [r7, #4]
 8022cdc:	460b      	mov	r3, r1
 8022cde:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8022ce0:	f003 f8cc 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022ce4:	f003 f868 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022ce8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 8022cea:	68fb      	ldr	r3, [r7, #12]
 8022cec:	2200      	movs	r2, #0
 8022cee:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8022cf2:	701a      	strb	r2, [r3, #0]
 8022cf4:	2200      	movs	r2, #0
 8022cf6:	705a      	strb	r2, [r3, #1]
 8022cf8:	2200      	movs	r2, #0
 8022cfa:	709a      	strb	r2, [r3, #2]
 8022cfc:	2200      	movs	r2, #0
 8022cfe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8022d00:	68fb      	ldr	r3, [r7, #12]
 8022d02:	2200      	movs	r2, #0
 8022d04:	f042 0202 	orr.w	r2, r2, #2
 8022d08:	711a      	strb	r2, [r3, #4]
 8022d0a:	2200      	movs	r2, #0
 8022d0c:	715a      	strb	r2, [r3, #5]
 8022d0e:	2200      	movs	r2, #0
 8022d10:	719a      	strb	r2, [r3, #6]
 8022d12:	2200      	movs	r2, #0
 8022d14:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022d16:	687a      	ldr	r2, [r7, #4]
 8022d18:	68fb      	ldr	r3, [r7, #12]
 8022d1a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 8022d1c:	78fa      	ldrb	r2, [r7, #3]
 8022d1e:	68fb      	ldr	r3, [r7, #12]
 8022d20:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8022d22:	f003 f86d 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022d26:	f003 f853 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022d2a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8022d2c:	68fb      	ldr	r3, [r7, #12]
 8022d2e:	689b      	ldr	r3, [r3, #8]
 8022d30:	b2db      	uxtb	r3, r3
}
 8022d32:	4618      	mov	r0, r3
 8022d34:	3710      	adds	r7, #16
 8022d36:	46bd      	mov	sp, r7
 8022d38:	bd80      	pop	{r7, pc}

08022d3a <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 8022d3a:	b580      	push	{r7, lr}
 8022d3c:	b084      	sub	sp, #16
 8022d3e:	af00      	add	r7, sp, #0
 8022d40:	6078      	str	r0, [r7, #4]
 8022d42:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8022d44:	f003 f89a 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022d48:	f003 f836 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022d4c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8022d4e:	68fb      	ldr	r3, [r7, #12]
 8022d50:	2200      	movs	r2, #0
 8022d52:	f062 0250 	orn	r2, r2, #80	; 0x50
 8022d56:	701a      	strb	r2, [r3, #0]
 8022d58:	2200      	movs	r2, #0
 8022d5a:	705a      	strb	r2, [r3, #1]
 8022d5c:	2200      	movs	r2, #0
 8022d5e:	709a      	strb	r2, [r3, #2]
 8022d60:	2200      	movs	r2, #0
 8022d62:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8022d64:	68fb      	ldr	r3, [r7, #12]
 8022d66:	2200      	movs	r2, #0
 8022d68:	f042 0202 	orr.w	r2, r2, #2
 8022d6c:	711a      	strb	r2, [r3, #4]
 8022d6e:	2200      	movs	r2, #0
 8022d70:	715a      	strb	r2, [r3, #5]
 8022d72:	2200      	movs	r2, #0
 8022d74:	719a      	strb	r2, [r3, #6]
 8022d76:	2200      	movs	r2, #0
 8022d78:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022d7a:	687a      	ldr	r2, [r7, #4]
 8022d7c:	68fb      	ldr	r3, [r7, #12]
 8022d7e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8022d80:	683a      	ldr	r2, [r7, #0]
 8022d82:	68fb      	ldr	r3, [r7, #12]
 8022d84:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8022d86:	f003 f83b 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022d8a:	f003 f821 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022d8e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8022d90:	68fb      	ldr	r3, [r7, #12]
 8022d92:	689b      	ldr	r3, [r3, #8]
 8022d94:	b2db      	uxtb	r3, r3
}
 8022d96:	4618      	mov	r0, r3
 8022d98:	3710      	adds	r7, #16
 8022d9a:	46bd      	mov	sp, r7
 8022d9c:	bd80      	pop	{r7, pc}

08022d9e <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8022d9e:	b580      	push	{r7, lr}
 8022da0:	b084      	sub	sp, #16
 8022da2:	af00      	add	r7, sp, #0
 8022da4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8022da6:	f003 f869 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022daa:	f003 f805 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022dae:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8022db0:	68fb      	ldr	r3, [r7, #12]
 8022db2:	2200      	movs	r2, #0
 8022db4:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8022db8:	701a      	strb	r2, [r3, #0]
 8022dba:	2200      	movs	r2, #0
 8022dbc:	705a      	strb	r2, [r3, #1]
 8022dbe:	2200      	movs	r2, #0
 8022dc0:	709a      	strb	r2, [r3, #2]
 8022dc2:	2200      	movs	r2, #0
 8022dc4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8022dc6:	68fb      	ldr	r3, [r7, #12]
 8022dc8:	2200      	movs	r2, #0
 8022dca:	f042 0201 	orr.w	r2, r2, #1
 8022dce:	711a      	strb	r2, [r3, #4]
 8022dd0:	2200      	movs	r2, #0
 8022dd2:	715a      	strb	r2, [r3, #5]
 8022dd4:	2200      	movs	r2, #0
 8022dd6:	719a      	strb	r2, [r3, #6]
 8022dd8:	2200      	movs	r2, #0
 8022dda:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022ddc:	687a      	ldr	r2, [r7, #4]
 8022dde:	68fb      	ldr	r3, [r7, #12]
 8022de0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8022de2:	f003 f80d 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022de6:	f002 fff3 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022dea:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8022dec:	68fb      	ldr	r3, [r7, #12]
 8022dee:	689b      	ldr	r3, [r3, #8]
 8022df0:	b2db      	uxtb	r3, r3
}
 8022df2:	4618      	mov	r0, r3
 8022df4:	3710      	adds	r7, #16
 8022df6:	46bd      	mov	sp, r7
 8022df8:	bd80      	pop	{r7, pc}

08022dfa <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8022dfa:	b580      	push	{r7, lr}
 8022dfc:	b084      	sub	sp, #16
 8022dfe:	af00      	add	r7, sp, #0
 8022e00:	6078      	str	r0, [r7, #4]
 8022e02:	460b      	mov	r3, r1
 8022e04:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8022e06:	f003 f839 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022e0a:	f002 ffd5 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022e0e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8022e10:	68fb      	ldr	r3, [r7, #12]
 8022e12:	2200      	movs	r2, #0
 8022e14:	f062 0256 	orn	r2, r2, #86	; 0x56
 8022e18:	701a      	strb	r2, [r3, #0]
 8022e1a:	2200      	movs	r2, #0
 8022e1c:	705a      	strb	r2, [r3, #1]
 8022e1e:	2200      	movs	r2, #0
 8022e20:	709a      	strb	r2, [r3, #2]
 8022e22:	2200      	movs	r2, #0
 8022e24:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8022e26:	68fb      	ldr	r3, [r7, #12]
 8022e28:	2200      	movs	r2, #0
 8022e2a:	f042 0202 	orr.w	r2, r2, #2
 8022e2e:	711a      	strb	r2, [r3, #4]
 8022e30:	2200      	movs	r2, #0
 8022e32:	715a      	strb	r2, [r3, #5]
 8022e34:	2200      	movs	r2, #0
 8022e36:	719a      	strb	r2, [r3, #6]
 8022e38:	2200      	movs	r2, #0
 8022e3a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022e3c:	687a      	ldr	r2, [r7, #4]
 8022e3e:	68fb      	ldr	r3, [r7, #12]
 8022e40:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8022e42:	887a      	ldrh	r2, [r7, #2]
 8022e44:	68fb      	ldr	r3, [r7, #12]
 8022e46:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8022e48:	f002 ffda 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022e4c:	f002 ffc0 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022e50:	60f8      	str	r0, [r7, #12]
}
 8022e52:	bf00      	nop
 8022e54:	3710      	adds	r7, #16
 8022e56:	46bd      	mov	sp, r7
 8022e58:	bd80      	pop	{r7, pc}

08022e5a <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8022e5a:	b580      	push	{r7, lr}
 8022e5c:	b084      	sub	sp, #16
 8022e5e:	af00      	add	r7, sp, #0
 8022e60:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8022e62:	f003 f80b 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022e66:	f002 ffa7 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022e6a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8022e6c:	68fb      	ldr	r3, [r7, #12]
 8022e6e:	2200      	movs	r2, #0
 8022e70:	f062 0261 	orn	r2, r2, #97	; 0x61
 8022e74:	701a      	strb	r2, [r3, #0]
 8022e76:	2200      	movs	r2, #0
 8022e78:	705a      	strb	r2, [r3, #1]
 8022e7a:	2200      	movs	r2, #0
 8022e7c:	709a      	strb	r2, [r3, #2]
 8022e7e:	2200      	movs	r2, #0
 8022e80:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8022e82:	68fb      	ldr	r3, [r7, #12]
 8022e84:	2200      	movs	r2, #0
 8022e86:	f042 0201 	orr.w	r2, r2, #1
 8022e8a:	711a      	strb	r2, [r3, #4]
 8022e8c:	2200      	movs	r2, #0
 8022e8e:	715a      	strb	r2, [r3, #5]
 8022e90:	2200      	movs	r2, #0
 8022e92:	719a      	strb	r2, [r3, #6]
 8022e94:	2200      	movs	r2, #0
 8022e96:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022e98:	687a      	ldr	r2, [r7, #4]
 8022e9a:	68fb      	ldr	r3, [r7, #12]
 8022e9c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8022e9e:	f002 ffaf 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022ea2:	f002 ff95 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022ea6:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8022ea8:	68fb      	ldr	r3, [r7, #12]
 8022eaa:	689b      	ldr	r3, [r3, #8]
 8022eac:	b2db      	uxtb	r3, r3
}
 8022eae:	4618      	mov	r0, r3
 8022eb0:	3710      	adds	r7, #16
 8022eb2:	46bd      	mov	sp, r7
 8022eb4:	bd80      	pop	{r7, pc}

08022eb6 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8022eb6:	b580      	push	{r7, lr}
 8022eb8:	b084      	sub	sp, #16
 8022eba:	af00      	add	r7, sp, #0
 8022ebc:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8022ebe:	f002 ffdd 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022ec2:	f002 ff79 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022ec6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8022ec8:	68fb      	ldr	r3, [r7, #12]
 8022eca:	2200      	movs	r2, #0
 8022ecc:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8022ed0:	701a      	strb	r2, [r3, #0]
 8022ed2:	2200      	movs	r2, #0
 8022ed4:	705a      	strb	r2, [r3, #1]
 8022ed6:	2200      	movs	r2, #0
 8022ed8:	709a      	strb	r2, [r3, #2]
 8022eda:	2200      	movs	r2, #0
 8022edc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8022ede:	68fb      	ldr	r3, [r7, #12]
 8022ee0:	2200      	movs	r2, #0
 8022ee2:	f042 0201 	orr.w	r2, r2, #1
 8022ee6:	711a      	strb	r2, [r3, #4]
 8022ee8:	2200      	movs	r2, #0
 8022eea:	715a      	strb	r2, [r3, #5]
 8022eec:	2200      	movs	r2, #0
 8022eee:	719a      	strb	r2, [r3, #6]
 8022ef0:	2200      	movs	r2, #0
 8022ef2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022ef4:	687a      	ldr	r2, [r7, #4]
 8022ef6:	68fb      	ldr	r3, [r7, #12]
 8022ef8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8022efa:	f002 ff81 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022efe:	f002 ff67 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022f02:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8022f04:	68fb      	ldr	r3, [r7, #12]
 8022f06:	689b      	ldr	r3, [r3, #8]
 8022f08:	b2db      	uxtb	r3, r3
}
 8022f0a:	4618      	mov	r0, r3
 8022f0c:	3710      	adds	r7, #16
 8022f0e:	46bd      	mov	sp, r7
 8022f10:	bd80      	pop	{r7, pc}

08022f12 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8022f12:	b580      	push	{r7, lr}
 8022f14:	b084      	sub	sp, #16
 8022f16:	af00      	add	r7, sp, #0
 8022f18:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8022f1a:	f002 ffaf 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022f1e:	f002 ff4b 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022f22:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8022f24:	68fb      	ldr	r3, [r7, #12]
 8022f26:	2200      	movs	r2, #0
 8022f28:	f062 0255 	orn	r2, r2, #85	; 0x55
 8022f2c:	701a      	strb	r2, [r3, #0]
 8022f2e:	2200      	movs	r2, #0
 8022f30:	705a      	strb	r2, [r3, #1]
 8022f32:	2200      	movs	r2, #0
 8022f34:	709a      	strb	r2, [r3, #2]
 8022f36:	2200      	movs	r2, #0
 8022f38:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8022f3a:	68fb      	ldr	r3, [r7, #12]
 8022f3c:	2200      	movs	r2, #0
 8022f3e:	f042 0201 	orr.w	r2, r2, #1
 8022f42:	711a      	strb	r2, [r3, #4]
 8022f44:	2200      	movs	r2, #0
 8022f46:	715a      	strb	r2, [r3, #5]
 8022f48:	2200      	movs	r2, #0
 8022f4a:	719a      	strb	r2, [r3, #6]
 8022f4c:	2200      	movs	r2, #0
 8022f4e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8022f50:	687a      	ldr	r2, [r7, #4]
 8022f52:	68fb      	ldr	r3, [r7, #12]
 8022f54:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8022f56:	f002 ff53 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022f5a:	f002 ff39 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022f5e:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8022f60:	68fb      	ldr	r3, [r7, #12]
 8022f62:	689b      	ldr	r3, [r3, #8]
 8022f64:	b29b      	uxth	r3, r3
}
 8022f66:	4618      	mov	r0, r3
 8022f68:	3710      	adds	r7, #16
 8022f6a:	46bd      	mov	sp, r7
 8022f6c:	bd80      	pop	{r7, pc}

08022f6e <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8022f6e:	b580      	push	{r7, lr}
 8022f70:	b084      	sub	sp, #16
 8022f72:	af00      	add	r7, sp, #0
 8022f74:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8022f76:	f002 ff81 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022f7a:	f002 ff1d 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022f7e:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8022f80:	68fb      	ldr	r3, [r7, #12]
 8022f82:	2200      	movs	r2, #0
 8022f84:	f062 0254 	orn	r2, r2, #84	; 0x54
 8022f88:	701a      	strb	r2, [r3, #0]
 8022f8a:	2200      	movs	r2, #0
 8022f8c:	705a      	strb	r2, [r3, #1]
 8022f8e:	2200      	movs	r2, #0
 8022f90:	709a      	strb	r2, [r3, #2]
 8022f92:	2200      	movs	r2, #0
 8022f94:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 8022f96:	68fb      	ldr	r3, [r7, #12]
 8022f98:	2200      	movs	r2, #0
 8022f9a:	f042 0201 	orr.w	r2, r2, #1
 8022f9e:	711a      	strb	r2, [r3, #4]
 8022fa0:	2200      	movs	r2, #0
 8022fa2:	715a      	strb	r2, [r3, #5]
 8022fa4:	2200      	movs	r2, #0
 8022fa6:	719a      	strb	r2, [r3, #6]
 8022fa8:	2200      	movs	r2, #0
 8022faa:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8022fac:	687a      	ldr	r2, [r7, #4]
 8022fae:	68fb      	ldr	r3, [r7, #12]
 8022fb0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8022fb2:	f002 ff25 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8022fb6:	f002 ff0b 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8022fba:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8022fbc:	68fb      	ldr	r3, [r7, #12]
 8022fbe:	689b      	ldr	r3, [r3, #8]
 8022fc0:	b2db      	uxtb	r3, r3
}
 8022fc2:	4618      	mov	r0, r3
 8022fc4:	3710      	adds	r7, #16
 8022fc6:	46bd      	mov	sp, r7
 8022fc8:	bd80      	pop	{r7, pc}

08022fca <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 8022fca:	b580      	push	{r7, lr}
 8022fcc:	b084      	sub	sp, #16
 8022fce:	af00      	add	r7, sp, #0
 8022fd0:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8022fd2:	f002 ff53 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8022fd6:	f002 feef 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8022fda:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8022fdc:	68fb      	ldr	r3, [r7, #12]
 8022fde:	2200      	movs	r2, #0
 8022fe0:	f062 0253 	orn	r2, r2, #83	; 0x53
 8022fe4:	701a      	strb	r2, [r3, #0]
 8022fe6:	2200      	movs	r2, #0
 8022fe8:	705a      	strb	r2, [r3, #1]
 8022fea:	2200      	movs	r2, #0
 8022fec:	709a      	strb	r2, [r3, #2]
 8022fee:	2200      	movs	r2, #0
 8022ff0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8022ff2:	68fb      	ldr	r3, [r7, #12]
 8022ff4:	2200      	movs	r2, #0
 8022ff6:	f042 0201 	orr.w	r2, r2, #1
 8022ffa:	711a      	strb	r2, [r3, #4]
 8022ffc:	2200      	movs	r2, #0
 8022ffe:	715a      	strb	r2, [r3, #5]
 8023000:	2200      	movs	r2, #0
 8023002:	719a      	strb	r2, [r3, #6]
 8023004:	2200      	movs	r2, #0
 8023006:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8023008:	687a      	ldr	r2, [r7, #4]
 802300a:	68fb      	ldr	r3, [r7, #12]
 802300c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 802300e:	f002 fef7 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023012:	f002 fedd 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023016:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8023018:	68fb      	ldr	r3, [r7, #12]
 802301a:	689b      	ldr	r3, [r3, #8]
}
 802301c:	4618      	mov	r0, r3
 802301e:	3710      	adds	r7, #16
 8023020:	46bd      	mov	sp, r7
 8023022:	bd80      	pop	{r7, pc}

08023024 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8023024:	b580      	push	{r7, lr}
 8023026:	b084      	sub	sp, #16
 8023028:	af00      	add	r7, sp, #0
 802302a:	6078      	str	r0, [r7, #4]
 802302c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 802302e:	f002 ff25 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023032:	f002 fec1 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023036:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8023038:	68fb      	ldr	r3, [r7, #12]
 802303a:	2200      	movs	r2, #0
 802303c:	f062 0259 	orn	r2, r2, #89	; 0x59
 8023040:	701a      	strb	r2, [r3, #0]
 8023042:	2200      	movs	r2, #0
 8023044:	705a      	strb	r2, [r3, #1]
 8023046:	2200      	movs	r2, #0
 8023048:	709a      	strb	r2, [r3, #2]
 802304a:	2200      	movs	r2, #0
 802304c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 802304e:	68fb      	ldr	r3, [r7, #12]
 8023050:	2200      	movs	r2, #0
 8023052:	f042 0201 	orr.w	r2, r2, #1
 8023056:	711a      	strb	r2, [r3, #4]
 8023058:	2200      	movs	r2, #0
 802305a:	715a      	strb	r2, [r3, #5]
 802305c:	2200      	movs	r2, #0
 802305e:	719a      	strb	r2, [r3, #6]
 8023060:	2200      	movs	r2, #0
 8023062:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8023064:	683a      	ldr	r2, [r7, #0]
 8023066:	68fb      	ldr	r3, [r7, #12]
 8023068:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 802306a:	f002 fec9 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802306e:	f002 feaf 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023072:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8023074:	68fb      	ldr	r3, [r7, #12]
 8023076:	689b      	ldr	r3, [r3, #8]

}
 8023078:	4618      	mov	r0, r3
 802307a:	3710      	adds	r7, #16
 802307c:	46bd      	mov	sp, r7
 802307e:	bd80      	pop	{r7, pc}

08023080 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8023080:	b580      	push	{r7, lr}
 8023082:	b086      	sub	sp, #24
 8023084:	af00      	add	r7, sp, #0
 8023086:	60f8      	str	r0, [r7, #12]
 8023088:	60b9      	str	r1, [r7, #8]
 802308a:	607a      	str	r2, [r7, #4]
 802308c:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 802308e:	f002 fef5 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023092:	f002 fe91 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023096:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8023098:	697b      	ldr	r3, [r7, #20]
 802309a:	2200      	movs	r2, #0
 802309c:	f062 0258 	orn	r2, r2, #88	; 0x58
 80230a0:	701a      	strb	r2, [r3, #0]
 80230a2:	2200      	movs	r2, #0
 80230a4:	705a      	strb	r2, [r3, #1]
 80230a6:	2200      	movs	r2, #0
 80230a8:	709a      	strb	r2, [r3, #2]
 80230aa:	2200      	movs	r2, #0
 80230ac:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80230ae:	697b      	ldr	r3, [r7, #20]
 80230b0:	2200      	movs	r2, #0
 80230b2:	f042 0203 	orr.w	r2, r2, #3
 80230b6:	711a      	strb	r2, [r3, #4]
 80230b8:	2200      	movs	r2, #0
 80230ba:	715a      	strb	r2, [r3, #5]
 80230bc:	2200      	movs	r2, #0
 80230be:	719a      	strb	r2, [r3, #6]
 80230c0:	2200      	movs	r2, #0
 80230c2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80230c4:	68ba      	ldr	r2, [r7, #8]
 80230c6:	697b      	ldr	r3, [r7, #20]
 80230c8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80230ca:	687a      	ldr	r2, [r7, #4]
 80230cc:	697b      	ldr	r3, [r7, #20]
 80230ce:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 80230d0:	683a      	ldr	r2, [r7, #0]
 80230d2:	697b      	ldr	r3, [r7, #20]
 80230d4:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 80230d6:	6a3a      	ldr	r2, [r7, #32]
 80230d8:	697b      	ldr	r3, [r7, #20]
 80230da:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 80230dc:	f002 fe90 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80230e0:	f002 fe76 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80230e4:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80230e6:	697b      	ldr	r3, [r7, #20]
 80230e8:	689b      	ldr	r3, [r3, #8]
 80230ea:	b2db      	uxtb	r3, r3
}
 80230ec:	4618      	mov	r0, r3
 80230ee:	3718      	adds	r7, #24
 80230f0:	46bd      	mov	sp, r7
 80230f2:	bd80      	pop	{r7, pc}

080230f4 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 80230f4:	b580      	push	{r7, lr}
 80230f6:	b084      	sub	sp, #16
 80230f8:	af00      	add	r7, sp, #0
 80230fa:	6078      	str	r0, [r7, #4]
 80230fc:	460b      	mov	r3, r1
 80230fe:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8023100:	f002 febc 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023104:	f002 fe58 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023108:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 802310a:	68fb      	ldr	r3, [r7, #12]
 802310c:	2200      	movs	r2, #0
 802310e:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8023112:	701a      	strb	r2, [r3, #0]
 8023114:	2200      	movs	r2, #0
 8023116:	705a      	strb	r2, [r3, #1]
 8023118:	2200      	movs	r2, #0
 802311a:	709a      	strb	r2, [r3, #2]
 802311c:	2200      	movs	r2, #0
 802311e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8023120:	68fb      	ldr	r3, [r7, #12]
 8023122:	2200      	movs	r2, #0
 8023124:	f042 0201 	orr.w	r2, r2, #1
 8023128:	711a      	strb	r2, [r3, #4]
 802312a:	2200      	movs	r2, #0
 802312c:	715a      	strb	r2, [r3, #5]
 802312e:	2200      	movs	r2, #0
 8023130:	719a      	strb	r2, [r3, #6]
 8023132:	2200      	movs	r2, #0
 8023134:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 8023136:	887a      	ldrh	r2, [r7, #2]
 8023138:	68fb      	ldr	r3, [r7, #12]
 802313a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 802313c:	f002 fe60 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023140:	f002 fe46 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023144:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8023146:	68fb      	ldr	r3, [r7, #12]
 8023148:	689b      	ldr	r3, [r3, #8]
 802314a:	b2db      	uxtb	r3, r3
}
 802314c:	4618      	mov	r0, r3
 802314e:	3710      	adds	r7, #16
 8023150:	46bd      	mov	sp, r7
 8023152:	bd80      	pop	{r7, pc}

08023154 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8023154:	b580      	push	{r7, lr}
 8023156:	b084      	sub	sp, #16
 8023158:	af00      	add	r7, sp, #0
 802315a:	6078      	str	r0, [r7, #4]
 802315c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 802315e:	f002 fe8d 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023162:	f002 fe29 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023166:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8023168:	68fb      	ldr	r3, [r7, #12]
 802316a:	2200      	movs	r2, #0
 802316c:	f062 0249 	orn	r2, r2, #73	; 0x49
 8023170:	701a      	strb	r2, [r3, #0]
 8023172:	2200      	movs	r2, #0
 8023174:	705a      	strb	r2, [r3, #1]
 8023176:	2200      	movs	r2, #0
 8023178:	709a      	strb	r2, [r3, #2]
 802317a:	2200      	movs	r2, #0
 802317c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 802317e:	68fb      	ldr	r3, [r7, #12]
 8023180:	2200      	movs	r2, #0
 8023182:	f042 0201 	orr.w	r2, r2, #1
 8023186:	711a      	strb	r2, [r3, #4]
 8023188:	2200      	movs	r2, #0
 802318a:	715a      	strb	r2, [r3, #5]
 802318c:	2200      	movs	r2, #0
 802318e:	719a      	strb	r2, [r3, #6]
 8023190:	2200      	movs	r2, #0
 8023192:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8023194:	683a      	ldr	r2, [r7, #0]
 8023196:	68fb      	ldr	r3, [r7, #12]
 8023198:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 802319a:	f002 fe31 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802319e:	f002 fe17 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80231a2:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80231a4:	68fb      	ldr	r3, [r7, #12]
 80231a6:	689b      	ldr	r3, [r3, #8]
 80231a8:	b2db      	uxtb	r3, r3
}
 80231aa:	4618      	mov	r0, r3
 80231ac:	3710      	adds	r7, #16
 80231ae:	46bd      	mov	sp, r7
 80231b0:	bd80      	pop	{r7, pc}

080231b2 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 80231b2:	b580      	push	{r7, lr}
 80231b4:	b086      	sub	sp, #24
 80231b6:	af00      	add	r7, sp, #0
 80231b8:	60f8      	str	r0, [r7, #12]
 80231ba:	60b9      	str	r1, [r7, #8]
 80231bc:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 80231be:	f002 fe5d 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80231c2:	f002 fdf9 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 80231c6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 80231c8:	697b      	ldr	r3, [r7, #20]
 80231ca:	2200      	movs	r2, #0
 80231cc:	f062 0257 	orn	r2, r2, #87	; 0x57
 80231d0:	701a      	strb	r2, [r3, #0]
 80231d2:	2200      	movs	r2, #0
 80231d4:	705a      	strb	r2, [r3, #1]
 80231d6:	2200      	movs	r2, #0
 80231d8:	709a      	strb	r2, [r3, #2]
 80231da:	2200      	movs	r2, #0
 80231dc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80231de:	697b      	ldr	r3, [r7, #20]
 80231e0:	2200      	movs	r2, #0
 80231e2:	f042 0202 	orr.w	r2, r2, #2
 80231e6:	711a      	strb	r2, [r3, #4]
 80231e8:	2200      	movs	r2, #0
 80231ea:	715a      	strb	r2, [r3, #5]
 80231ec:	2200      	movs	r2, #0
 80231ee:	719a      	strb	r2, [r3, #6]
 80231f0:	2200      	movs	r2, #0
 80231f2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80231f4:	68ba      	ldr	r2, [r7, #8]
 80231f6:	697b      	ldr	r3, [r7, #20]
 80231f8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80231fa:	687a      	ldr	r2, [r7, #4]
 80231fc:	697b      	ldr	r3, [r7, #20]
 80231fe:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8023200:	f002 fdfe 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023204:	f002 fde4 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023208:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 802320a:	697b      	ldr	r3, [r7, #20]
 802320c:	689b      	ldr	r3, [r3, #8]
 802320e:	b2db      	uxtb	r3, r3
}
 8023210:	4618      	mov	r0, r3
 8023212:	3718      	adds	r7, #24
 8023214:	46bd      	mov	sp, r7
 8023216:	bd80      	pop	{r7, pc}

08023218 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8023218:	b580      	push	{r7, lr}
 802321a:	b082      	sub	sp, #8
 802321c:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 802321e:	f002 fe2d 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023222:	f002 fdc9 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023226:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8023228:	687b      	ldr	r3, [r7, #4]
 802322a:	2200      	movs	r2, #0
 802322c:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8023230:	701a      	strb	r2, [r3, #0]
 8023232:	2200      	movs	r2, #0
 8023234:	705a      	strb	r2, [r3, #1]
 8023236:	2200      	movs	r2, #0
 8023238:	709a      	strb	r2, [r3, #2]
 802323a:	2200      	movs	r2, #0
 802323c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 802323e:	687b      	ldr	r3, [r7, #4]
 8023240:	2200      	movs	r2, #0
 8023242:	711a      	strb	r2, [r3, #4]
 8023244:	2200      	movs	r2, #0
 8023246:	715a      	strb	r2, [r3, #5]
 8023248:	2200      	movs	r2, #0
 802324a:	719a      	strb	r2, [r3, #6]
 802324c:	2200      	movs	r2, #0
 802324e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8023250:	f002 fdd6 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023254:	f002 fdbc 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023258:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 802325a:	687b      	ldr	r3, [r7, #4]
 802325c:	689b      	ldr	r3, [r3, #8]
}
 802325e:	4618      	mov	r0, r3
 8023260:	3708      	adds	r7, #8
 8023262:	46bd      	mov	sp, r7
 8023264:	bd80      	pop	{r7, pc}

08023266 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8023266:	b580      	push	{r7, lr}
 8023268:	b084      	sub	sp, #16
 802326a:	af00      	add	r7, sp, #0
 802326c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 802326e:	f002 fe05 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023272:	f002 fda1 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023276:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8023278:	68fb      	ldr	r3, [r7, #12]
 802327a:	2200      	movs	r2, #0
 802327c:	f062 0269 	orn	r2, r2, #105	; 0x69
 8023280:	701a      	strb	r2, [r3, #0]
 8023282:	2200      	movs	r2, #0
 8023284:	705a      	strb	r2, [r3, #1]
 8023286:	2200      	movs	r2, #0
 8023288:	709a      	strb	r2, [r3, #2]
 802328a:	2200      	movs	r2, #0
 802328c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 802328e:	68fb      	ldr	r3, [r7, #12]
 8023290:	2200      	movs	r2, #0
 8023292:	711a      	strb	r2, [r3, #4]
 8023294:	2200      	movs	r2, #0
 8023296:	715a      	strb	r2, [r3, #5]
 8023298:	2200      	movs	r2, #0
 802329a:	719a      	strb	r2, [r3, #6]
 802329c:	2200      	movs	r2, #0
 802329e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80232a0:	f002 fdae 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80232a4:	f002 fd94 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80232a8:	60f8      	str	r0, [r7, #12]
}
 80232aa:	bf00      	nop
 80232ac:	3710      	adds	r7, #16
 80232ae:	46bd      	mov	sp, r7
 80232b0:	bd80      	pop	{r7, pc}
	...

080232b4 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 80232b4:	b580      	push	{r7, lr}
 80232b6:	b086      	sub	sp, #24
 80232b8:	af00      	add	r7, sp, #0
 80232ba:	60f8      	str	r0, [r7, #12]
 80232bc:	60b9      	str	r1, [r7, #8]
 80232be:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 80232c0:	f002 fddc 	bl	8025e7c <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 80232c4:	4a15      	ldr	r2, [pc, #84]	; (802331c <otSetStateChangedCallback+0x68>)
 80232c6:	68bb      	ldr	r3, [r7, #8]
 80232c8:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80232ca:	f002 fd75 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 80232ce:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 80232d0:	697b      	ldr	r3, [r7, #20]
 80232d2:	2200      	movs	r2, #0
 80232d4:	f062 0268 	orn	r2, r2, #104	; 0x68
 80232d8:	701a      	strb	r2, [r3, #0]
 80232da:	2200      	movs	r2, #0
 80232dc:	705a      	strb	r2, [r3, #1]
 80232de:	2200      	movs	r2, #0
 80232e0:	709a      	strb	r2, [r3, #2]
 80232e2:	2200      	movs	r2, #0
 80232e4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80232e6:	697b      	ldr	r3, [r7, #20]
 80232e8:	2200      	movs	r2, #0
 80232ea:	f042 0201 	orr.w	r2, r2, #1
 80232ee:	711a      	strb	r2, [r3, #4]
 80232f0:	2200      	movs	r2, #0
 80232f2:	715a      	strb	r2, [r3, #5]
 80232f4:	2200      	movs	r2, #0
 80232f6:	719a      	strb	r2, [r3, #6]
 80232f8:	2200      	movs	r2, #0
 80232fa:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 80232fc:	687a      	ldr	r2, [r7, #4]
 80232fe:	697b      	ldr	r3, [r7, #20]
 8023300:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8023302:	f002 fd7d 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023306:	f002 fd63 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 802330a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 802330c:	697b      	ldr	r3, [r7, #20]
 802330e:	689b      	ldr	r3, [r3, #8]
 8023310:	b2db      	uxtb	r3, r3
}
 8023312:	4618      	mov	r0, r3
 8023314:	3718      	adds	r7, #24
 8023316:	46bd      	mov	sp, r7
 8023318:	bd80      	pop	{r7, pc}
 802331a:	bf00      	nop
 802331c:	20027484 	.word	0x20027484

08023320 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8023320:	b580      	push	{r7, lr}
 8023322:	b084      	sub	sp, #16
 8023324:	af00      	add	r7, sp, #0
 8023326:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8023328:	f002 fda8 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 802332c:	f002 fd44 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023330:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8023332:	68fb      	ldr	r3, [r7, #12]
 8023334:	2200      	movs	r2, #0
 8023336:	f062 0264 	orn	r2, r2, #100	; 0x64
 802333a:	701a      	strb	r2, [r3, #0]
 802333c:	2200      	movs	r2, #0
 802333e:	705a      	strb	r2, [r3, #1]
 8023340:	2200      	movs	r2, #0
 8023342:	709a      	strb	r2, [r3, #2]
 8023344:	2200      	movs	r2, #0
 8023346:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8023348:	68fb      	ldr	r3, [r7, #12]
 802334a:	2200      	movs	r2, #0
 802334c:	711a      	strb	r2, [r3, #4]
 802334e:	2200      	movs	r2, #0
 8023350:	715a      	strb	r2, [r3, #5]
 8023352:	2200      	movs	r2, #0
 8023354:	719a      	strb	r2, [r3, #6]
 8023356:	2200      	movs	r2, #0
 8023358:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 802335a:	f002 fd51 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802335e:	f002 fd37 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023362:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8023364:	68fb      	ldr	r3, [r7, #12]
 8023366:	689b      	ldr	r3, [r3, #8]
 8023368:	b2db      	uxtb	r3, r3
}
 802336a:	4618      	mov	r0, r3
 802336c:	3710      	adds	r7, #16
 802336e:	46bd      	mov	sp, r7
 8023370:	bd80      	pop	{r7, pc}

08023372 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8023372:	b580      	push	{r7, lr}
 8023374:	b084      	sub	sp, #16
 8023376:	af00      	add	r7, sp, #0
 8023378:	6078      	str	r0, [r7, #4]
 802337a:	460b      	mov	r3, r1
 802337c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 802337e:	f002 fd7d 	bl	8025e7c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023382:	f002 fd19 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023386:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8023388:	68fb      	ldr	r3, [r7, #12]
 802338a:	2200      	movs	r2, #0
 802338c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8023390:	701a      	strb	r2, [r3, #0]
 8023392:	2200      	movs	r2, #0
 8023394:	705a      	strb	r2, [r3, #1]
 8023396:	2200      	movs	r2, #0
 8023398:	709a      	strb	r2, [r3, #2]
 802339a:	2200      	movs	r2, #0
 802339c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 802339e:	68fb      	ldr	r3, [r7, #12]
 80233a0:	2200      	movs	r2, #0
 80233a2:	f042 0201 	orr.w	r2, r2, #1
 80233a6:	711a      	strb	r2, [r3, #4]
 80233a8:	2200      	movs	r2, #0
 80233aa:	715a      	strb	r2, [r3, #5]
 80233ac:	2200      	movs	r2, #0
 80233ae:	719a      	strb	r2, [r3, #6]
 80233b0:	2200      	movs	r2, #0
 80233b2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80233b4:	78fa      	ldrb	r2, [r7, #3]
 80233b6:	68fb      	ldr	r3, [r7, #12]
 80233b8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80233ba:	f002 fd21 	bl	8025e00 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80233be:	f002 fd07 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80233c2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80233c4:	68fb      	ldr	r3, [r7, #12]
 80233c6:	689b      	ldr	r3, [r3, #8]
 80233c8:	b2db      	uxtb	r3, r3
}
 80233ca:	4618      	mov	r0, r3
 80233cc:	3710      	adds	r7, #16
 80233ce:	46bd      	mov	sp, r7
 80233d0:	bd80      	pop	{r7, pc}

080233d2 <otIp6IsAddressEqual>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t *)p_ot_req->Data[0];
}

OTAPI bool OTCALL otIp6IsAddressEqual(const otIp6Address *a, const otIp6Address *b)
{
 80233d2:	b580      	push	{r7, lr}
 80233d4:	b084      	sub	sp, #16
 80233d6:	af00      	add	r7, sp, #0
 80233d8:	6078      	str	r0, [r7, #4]
 80233da:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80233dc:	f002 fd4e 	bl	8025e7c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80233e0:	f002 fcea 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 80233e4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ADDRESS_EQUAL;
 80233e6:	68fb      	ldr	r3, [r7, #12]
 80233e8:	2200      	movs	r2, #0
 80233ea:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 80233ee:	701a      	strb	r2, [r3, #0]
 80233f0:	2200      	movs	r2, #0
 80233f2:	705a      	strb	r2, [r3, #1]
 80233f4:	2200      	movs	r2, #0
 80233f6:	709a      	strb	r2, [r3, #2]
 80233f8:	2200      	movs	r2, #0
 80233fa:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80233fc:	68fb      	ldr	r3, [r7, #12]
 80233fe:	2200      	movs	r2, #0
 8023400:	f042 0202 	orr.w	r2, r2, #2
 8023404:	711a      	strb	r2, [r3, #4]
 8023406:	2200      	movs	r2, #0
 8023408:	715a      	strb	r2, [r3, #5]
 802340a:	2200      	movs	r2, #0
 802340c:	719a      	strb	r2, [r3, #6]
 802340e:	2200      	movs	r2, #0
 8023410:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)a;
 8023412:	687a      	ldr	r2, [r7, #4]
 8023414:	68fb      	ldr	r3, [r7, #12]
 8023416:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)b;
 8023418:	683a      	ldr	r2, [r7, #0]
 802341a:	68fb      	ldr	r3, [r7, #12]
 802341c:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 802341e:	f002 fcef 	bl	8025e00 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023422:	f002 fcd5 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023426:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 8023428:	68fb      	ldr	r3, [r7, #12]
 802342a:	689b      	ldr	r3, [r3, #8]
 802342c:	2b00      	cmp	r3, #0
 802342e:	bf14      	ite	ne
 8023430:	2301      	movne	r3, #1
 8023432:	2300      	moveq	r3, #0
 8023434:	b2db      	uxtb	r3, r3
}
 8023436:	4618      	mov	r0, r3
 8023438:	3710      	adds	r7, #16
 802343a:	46bd      	mov	sp, r7
 802343c:	bd80      	pop	{r7, pc}

0802343e <otIp6AddressFromString>:

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 802343e:	b580      	push	{r7, lr}
 8023440:	b084      	sub	sp, #16
 8023442:	af00      	add	r7, sp, #0
 8023444:	6078      	str	r0, [r7, #4]
 8023446:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8023448:	f002 fd18 	bl	8025e7c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 802344c:	f002 fcb4 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023450:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8023452:	68fb      	ldr	r3, [r7, #12]
 8023454:	2200      	movs	r2, #0
 8023456:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 802345a:	701a      	strb	r2, [r3, #0]
 802345c:	2200      	movs	r2, #0
 802345e:	705a      	strb	r2, [r3, #1]
 8023460:	2200      	movs	r2, #0
 8023462:	709a      	strb	r2, [r3, #2]
 8023464:	2200      	movs	r2, #0
 8023466:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8023468:	68fb      	ldr	r3, [r7, #12]
 802346a:	2200      	movs	r2, #0
 802346c:	f042 0202 	orr.w	r2, r2, #2
 8023470:	711a      	strb	r2, [r3, #4]
 8023472:	2200      	movs	r2, #0
 8023474:	715a      	strb	r2, [r3, #5]
 8023476:	2200      	movs	r2, #0
 8023478:	719a      	strb	r2, [r3, #6]
 802347a:	2200      	movs	r2, #0
 802347c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 802347e:	687a      	ldr	r2, [r7, #4]
 8023480:	68fb      	ldr	r3, [r7, #12]
 8023482:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8023484:	683a      	ldr	r2, [r7, #0]
 8023486:	68fb      	ldr	r3, [r7, #12]
 8023488:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 802348a:	f002 fcb9 	bl	8025e00 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802348e:	f002 fc9f 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023492:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8023494:	68fb      	ldr	r3, [r7, #12]
 8023496:	689b      	ldr	r3, [r3, #8]
 8023498:	b2db      	uxtb	r3, r3
}
 802349a:	4618      	mov	r0, r3
 802349c:	3710      	adds	r7, #16
 802349e:	46bd      	mov	sp, r7
 80234a0:	bd80      	pop	{r7, pc}

080234a2 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 80234a2:	b580      	push	{r7, lr}
 80234a4:	b084      	sub	sp, #16
 80234a6:	af00      	add	r7, sp, #0
 80234a8:	6078      	str	r0, [r7, #4]
 80234aa:	460b      	mov	r3, r1
 80234ac:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80234ae:	f002 fce5 	bl	8025e7c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80234b2:	f002 fc81 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 80234b6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 80234b8:	68fb      	ldr	r3, [r7, #12]
 80234ba:	2200      	movs	r2, #0
 80234bc:	f042 0208 	orr.w	r2, r2, #8
 80234c0:	701a      	strb	r2, [r3, #0]
 80234c2:	2200      	movs	r2, #0
 80234c4:	705a      	strb	r2, [r3, #1]
 80234c6:	2200      	movs	r2, #0
 80234c8:	709a      	strb	r2, [r3, #2]
 80234ca:	2200      	movs	r2, #0
 80234cc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80234ce:	68fb      	ldr	r3, [r7, #12]
 80234d0:	2200      	movs	r2, #0
 80234d2:	f042 0201 	orr.w	r2, r2, #1
 80234d6:	711a      	strb	r2, [r3, #4]
 80234d8:	2200      	movs	r2, #0
 80234da:	715a      	strb	r2, [r3, #5]
 80234dc:	2200      	movs	r2, #0
 80234de:	719a      	strb	r2, [r3, #6]
 80234e0:	2200      	movs	r2, #0
 80234e2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 80234e4:	78fa      	ldrb	r2, [r7, #3]
 80234e6:	68fb      	ldr	r3, [r7, #12]
 80234e8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80234ea:	f002 fc89 	bl	8025e00 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80234ee:	f002 fc6f 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80234f2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80234f4:	68fb      	ldr	r3, [r7, #12]
 80234f6:	689b      	ldr	r3, [r3, #8]
 80234f8:	b2db      	uxtb	r3, r3
}
 80234fa:	4618      	mov	r0, r3
 80234fc:	3710      	adds	r7, #16
 80234fe:	46bd      	mov	sp, r7
 8023500:	bd80      	pop	{r7, pc}

08023502 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8023502:	b580      	push	{r7, lr}
 8023504:	b084      	sub	sp, #16
 8023506:	af00      	add	r7, sp, #0
 8023508:	6078      	str	r0, [r7, #4]
 802350a:	460b      	mov	r3, r1
 802350c:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 802350e:	f002 fcb5 	bl	8025e7c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023512:	f002 fc51 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023516:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8023518:	68fb      	ldr	r3, [r7, #12]
 802351a:	2200      	movs	r2, #0
 802351c:	f042 020f 	orr.w	r2, r2, #15
 8023520:	701a      	strb	r2, [r3, #0]
 8023522:	2200      	movs	r2, #0
 8023524:	705a      	strb	r2, [r3, #1]
 8023526:	2200      	movs	r2, #0
 8023528:	709a      	strb	r2, [r3, #2]
 802352a:	2200      	movs	r2, #0
 802352c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 802352e:	68fb      	ldr	r3, [r7, #12]
 8023530:	2200      	movs	r2, #0
 8023532:	f042 0201 	orr.w	r2, r2, #1
 8023536:	711a      	strb	r2, [r3, #4]
 8023538:	2200      	movs	r2, #0
 802353a:	715a      	strb	r2, [r3, #5]
 802353c:	2200      	movs	r2, #0
 802353e:	719a      	strb	r2, [r3, #6]
 8023540:	2200      	movs	r2, #0
 8023542:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8023544:	887a      	ldrh	r2, [r7, #2]
 8023546:	68fb      	ldr	r3, [r7, #12]
 8023548:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 802354a:	f002 fc59 	bl	8025e00 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802354e:	f002 fc3f 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023552:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8023554:	68fb      	ldr	r3, [r7, #12]
 8023556:	689b      	ldr	r3, [r3, #8]
 8023558:	b2db      	uxtb	r3, r3
}
 802355a:	4618      	mov	r0, r3
 802355c:	3710      	adds	r7, #16
 802355e:	46bd      	mov	sp, r7
 8023560:	bd80      	pop	{r7, pc}

08023562 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8023562:	b580      	push	{r7, lr}
 8023564:	b084      	sub	sp, #16
 8023566:	af00      	add	r7, sp, #0
 8023568:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 802356a:	f002 fc87 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 802356e:	f002 fc23 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023572:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8023574:	68fb      	ldr	r3, [r7, #12]
 8023576:	2200      	movs	r2, #0
 8023578:	f062 0246 	orn	r2, r2, #70	; 0x46
 802357c:	701a      	strb	r2, [r3, #0]
 802357e:	2200      	movs	r2, #0
 8023580:	705a      	strb	r2, [r3, #1]
 8023582:	2200      	movs	r2, #0
 8023584:	709a      	strb	r2, [r3, #2]
 8023586:	2200      	movs	r2, #0
 8023588:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 802358a:	68fb      	ldr	r3, [r7, #12]
 802358c:	2200      	movs	r2, #0
 802358e:	f042 0201 	orr.w	r2, r2, #1
 8023592:	711a      	strb	r2, [r3, #4]
 8023594:	2200      	movs	r2, #0
 8023596:	715a      	strb	r2, [r3, #5]
 8023598:	2200      	movs	r2, #0
 802359a:	719a      	strb	r2, [r3, #6]
 802359c:	2200      	movs	r2, #0
 802359e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80235a0:	687a      	ldr	r2, [r7, #4]
 80235a2:	68fb      	ldr	r3, [r7, #12]
 80235a4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80235a6:	f002 fc2b 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80235aa:	f002 fc11 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80235ae:	60f8      	str	r0, [r7, #12]
}
 80235b0:	bf00      	nop
 80235b2:	3710      	adds	r7, #16
 80235b4:	46bd      	mov	sp, r7
 80235b6:	bd80      	pop	{r7, pc}

080235b8 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 80235b8:	b580      	push	{r7, lr}
 80235ba:	b084      	sub	sp, #16
 80235bc:	af00      	add	r7, sp, #0
 80235be:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80235c0:	f002 fc5c 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80235c4:	f002 fbf8 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 80235c8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 80235ca:	68fb      	ldr	r3, [r7, #12]
 80235cc:	2200      	movs	r2, #0
 80235ce:	f062 0243 	orn	r2, r2, #67	; 0x43
 80235d2:	701a      	strb	r2, [r3, #0]
 80235d4:	2200      	movs	r2, #0
 80235d6:	705a      	strb	r2, [r3, #1]
 80235d8:	2200      	movs	r2, #0
 80235da:	709a      	strb	r2, [r3, #2]
 80235dc:	2200      	movs	r2, #0
 80235de:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80235e0:	68fb      	ldr	r3, [r7, #12]
 80235e2:	2200      	movs	r2, #0
 80235e4:	f042 0201 	orr.w	r2, r2, #1
 80235e8:	711a      	strb	r2, [r3, #4]
 80235ea:	2200      	movs	r2, #0
 80235ec:	715a      	strb	r2, [r3, #5]
 80235ee:	2200      	movs	r2, #0
 80235f0:	719a      	strb	r2, [r3, #6]
 80235f2:	2200      	movs	r2, #0
 80235f4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80235f6:	687a      	ldr	r2, [r7, #4]
 80235f8:	68fb      	ldr	r3, [r7, #12]
 80235fa:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80235fc:	f002 fc00 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023600:	f002 fbe6 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023604:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8023606:	68fb      	ldr	r3, [r7, #12]
 8023608:	689b      	ldr	r3, [r3, #8]
 802360a:	b29b      	uxth	r3, r3
}
 802360c:	4618      	mov	r0, r3
 802360e:	3710      	adds	r7, #16
 8023610:	46bd      	mov	sp, r7
 8023612:	bd80      	pop	{r7, pc}

08023614 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8023614:	b580      	push	{r7, lr}
 8023616:	b086      	sub	sp, #24
 8023618:	af00      	add	r7, sp, #0
 802361a:	60f8      	str	r0, [r7, #12]
 802361c:	60b9      	str	r1, [r7, #8]
 802361e:	4613      	mov	r3, r2
 8023620:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 8023622:	f002 fc2b 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023626:	f002 fbc7 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 802362a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 802362c:	697b      	ldr	r3, [r7, #20]
 802362e:	2200      	movs	r2, #0
 8023630:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8023634:	701a      	strb	r2, [r3, #0]
 8023636:	2200      	movs	r2, #0
 8023638:	705a      	strb	r2, [r3, #1]
 802363a:	2200      	movs	r2, #0
 802363c:	709a      	strb	r2, [r3, #2]
 802363e:	2200      	movs	r2, #0
 8023640:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8023642:	697b      	ldr	r3, [r7, #20]
 8023644:	2200      	movs	r2, #0
 8023646:	f042 0203 	orr.w	r2, r2, #3
 802364a:	711a      	strb	r2, [r3, #4]
 802364c:	2200      	movs	r2, #0
 802364e:	715a      	strb	r2, [r3, #5]
 8023650:	2200      	movs	r2, #0
 8023652:	719a      	strb	r2, [r3, #6]
 8023654:	2200      	movs	r2, #0
 8023656:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8023658:	68fa      	ldr	r2, [r7, #12]
 802365a:	697b      	ldr	r3, [r7, #20]
 802365c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 802365e:	68ba      	ldr	r2, [r7, #8]
 8023660:	697b      	ldr	r3, [r7, #20]
 8023662:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8023664:	88fa      	ldrh	r2, [r7, #6]
 8023666:	697b      	ldr	r3, [r7, #20]
 8023668:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 802366a:	f002 fbc9 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 802366e:	f002 fbaf 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023672:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8023674:	697b      	ldr	r3, [r7, #20]
 8023676:	689b      	ldr	r3, [r3, #8]
 8023678:	b2db      	uxtb	r3, r3
}
 802367a:	4618      	mov	r0, r3
 802367c:	3718      	adds	r7, #24
 802367e:	46bd      	mov	sp, r7
 8023680:	bd80      	pop	{r7, pc}

08023682 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8023682:	b580      	push	{r7, lr}
 8023684:	b086      	sub	sp, #24
 8023686:	af00      	add	r7, sp, #0
 8023688:	60f8      	str	r0, [r7, #12]
 802368a:	607a      	str	r2, [r7, #4]
 802368c:	461a      	mov	r2, r3
 802368e:	460b      	mov	r3, r1
 8023690:	817b      	strh	r3, [r7, #10]
 8023692:	4613      	mov	r3, r2
 8023694:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8023696:	f002 fbf1 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 802369a:	f002 fb8d 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 802369e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 80236a0:	697b      	ldr	r3, [r7, #20]
 80236a2:	2200      	movs	r2, #0
 80236a4:	f062 023d 	orn	r2, r2, #61	; 0x3d
 80236a8:	701a      	strb	r2, [r3, #0]
 80236aa:	2200      	movs	r2, #0
 80236ac:	705a      	strb	r2, [r3, #1]
 80236ae:	2200      	movs	r2, #0
 80236b0:	709a      	strb	r2, [r3, #2]
 80236b2:	2200      	movs	r2, #0
 80236b4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 80236b6:	697b      	ldr	r3, [r7, #20]
 80236b8:	2200      	movs	r2, #0
 80236ba:	f042 0204 	orr.w	r2, r2, #4
 80236be:	711a      	strb	r2, [r3, #4]
 80236c0:	2200      	movs	r2, #0
 80236c2:	715a      	strb	r2, [r3, #5]
 80236c4:	2200      	movs	r2, #0
 80236c6:	719a      	strb	r2, [r3, #6]
 80236c8:	2200      	movs	r2, #0
 80236ca:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80236cc:	68fa      	ldr	r2, [r7, #12]
 80236ce:	697b      	ldr	r3, [r7, #20]
 80236d0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 80236d2:	897a      	ldrh	r2, [r7, #10]
 80236d4:	697b      	ldr	r3, [r7, #20]
 80236d6:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 80236d8:	687a      	ldr	r2, [r7, #4]
 80236da:	697b      	ldr	r3, [r7, #20]
 80236dc:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 80236de:	893a      	ldrh	r2, [r7, #8]
 80236e0:	697b      	ldr	r3, [r7, #20]
 80236e2:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 80236e4:	f002 fb8c 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80236e8:	f002 fb72 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80236ec:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 80236ee:	697b      	ldr	r3, [r7, #20]
 80236f0:	689b      	ldr	r3, [r3, #8]
}
 80236f2:	4618      	mov	r0, r3
 80236f4:	3718      	adds	r7, #24
 80236f6:	46bd      	mov	sp, r7
 80236f8:	bd80      	pop	{r7, pc}
	...

080236fc <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 80236fc:	b5b0      	push	{r4, r5, r7, lr}
 80236fe:	b084      	sub	sp, #16
 8023700:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8023702:	2300      	movs	r3, #0
 8023704:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8023706:	f002 fb6f 	bl	8025de8 <THREAD_Get_NotificationPayloadBuffer>
 802370a:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 802370c:	683b      	ldr	r3, [r7, #0]
 802370e:	681b      	ldr	r3, [r3, #0]
 8023710:	3b01      	subs	r3, #1
 8023712:	2b14      	cmp	r3, #20
 8023714:	f200 8172 	bhi.w	80239fc <OpenThread_CallBack_Processing+0x300>
 8023718:	a201      	add	r2, pc, #4	; (adr r2, 8023720 <OpenThread_CallBack_Processing+0x24>)
 802371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802371e:	bf00      	nop
 8023720:	08023775 	.word	0x08023775
 8023724:	08023791 	.word	0x08023791
 8023728:	080237bd 	.word	0x080237bd
 802372c:	080237f1 	.word	0x080237f1
 8023730:	080237fd 	.word	0x080237fd
 8023734:	0802381b 	.word	0x0802381b
 8023738:	08023839 	.word	0x08023839
 802373c:	08023857 	.word	0x08023857
 8023740:	08023875 	.word	0x08023875
 8023744:	08023893 	.word	0x08023893
 8023748:	080238b5 	.word	0x080238b5
 802374c:	080238d3 	.word	0x080238d3
 8023750:	080239fd 	.word	0x080239fd
 8023754:	080238f9 	.word	0x080238f9
 8023758:	0802392d 	.word	0x0802392d
 802375c:	08023955 	.word	0x08023955
 8023760:	08023973 	.word	0x08023973
 8023764:	08023997 	.word	0x08023997
 8023768:	080239bf 	.word	0x080239bf
 802376c:	080239fd 	.word	0x080239fd
 8023770:	080239dd 	.word	0x080239dd
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8023774:	4ba3      	ldr	r3, [pc, #652]	; (8023a04 <OpenThread_CallBack_Processing+0x308>)
 8023776:	681b      	ldr	r3, [r3, #0]
 8023778:	2b00      	cmp	r3, #0
 802377a:	f000 8167 	beq.w	8023a4c <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 802377e:	4ba1      	ldr	r3, [pc, #644]	; (8023a04 <OpenThread_CallBack_Processing+0x308>)
 8023780:	681b      	ldr	r3, [r3, #0]
 8023782:	683a      	ldr	r2, [r7, #0]
 8023784:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 8023786:	683a      	ldr	r2, [r7, #0]
 8023788:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 802378a:	4611      	mov	r1, r2
 802378c:	4798      	blx	r3
        }
        break;
 802378e:	e15d      	b.n	8023a4c <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 8023790:	683b      	ldr	r3, [r7, #0]
 8023792:	689b      	ldr	r3, [r3, #8]
 8023794:	461a      	mov	r2, r3
 8023796:	4b9c      	ldr	r3, [pc, #624]	; (8023a08 <OpenThread_CallBack_Processing+0x30c>)
 8023798:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 802379a:	4b9b      	ldr	r3, [pc, #620]	; (8023a08 <OpenThread_CallBack_Processing+0x30c>)
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	2b00      	cmp	r3, #0
 80237a0:	f000 8156 	beq.w	8023a50 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80237a4:	4b98      	ldr	r3, [pc, #608]	; (8023a08 <OpenThread_CallBack_Processing+0x30c>)
 80237a6:	681b      	ldr	r3, [r3, #0]
 80237a8:	683a      	ldr	r2, [r7, #0]
 80237aa:	68d2      	ldr	r2, [r2, #12]
 80237ac:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 80237ae:	683a      	ldr	r2, [r7, #0]
 80237b0:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80237b2:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 80237b4:	683a      	ldr	r2, [r7, #0]
 80237b6:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80237b8:	4798      	blx	r3
        }
        break;
 80237ba:	e149      	b.n	8023a50 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 80237bc:	683b      	ldr	r3, [r7, #0]
 80237be:	689b      	ldr	r3, [r3, #8]
 80237c0:	461a      	mov	r2, r3
 80237c2:	4b92      	ldr	r3, [pc, #584]	; (8023a0c <OpenThread_CallBack_Processing+0x310>)
 80237c4:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 80237c6:	4b91      	ldr	r3, [pc, #580]	; (8023a0c <OpenThread_CallBack_Processing+0x310>)
 80237c8:	681b      	ldr	r3, [r3, #0]
 80237ca:	2b00      	cmp	r3, #0
 80237cc:	f000 8142 	beq.w	8023a54 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80237d0:	4b8e      	ldr	r3, [pc, #568]	; (8023a0c <OpenThread_CallBack_Processing+0x310>)
 80237d2:	681c      	ldr	r4, [r3, #0]
 80237d4:	683b      	ldr	r3, [r7, #0]
 80237d6:	68db      	ldr	r3, [r3, #12]
 80237d8:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 80237da:	683b      	ldr	r3, [r7, #0]
 80237dc:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80237de:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 80237e0:	683b      	ldr	r3, [r7, #0]
 80237e2:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80237e4:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 80237e6:	683b      	ldr	r3, [r7, #0]
 80237e8:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80237ea:	b2db      	uxtb	r3, r3
 80237ec:	47a0      	blx	r4
        }
        break;
 80237ee:	e131      	b.n	8023a54 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 80237f0:	2001      	movs	r0, #1
 80237f2:	f000 f9b8 	bl	8023b66 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 80237f6:	f7f4 fa5a 	bl	8017cae <HAL_NVIC_SystemReset>
        break;
 80237fa:	e14a      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 80237fc:	4b84      	ldr	r3, [pc, #528]	; (8023a10 <OpenThread_CallBack_Processing+0x314>)
 80237fe:	681b      	ldr	r3, [r3, #0]
 8023800:	2b00      	cmp	r3, #0
 8023802:	f000 8129 	beq.w	8023a58 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8023806:	4b82      	ldr	r3, [pc, #520]	; (8023a10 <OpenThread_CallBack_Processing+0x314>)
 8023808:	681b      	ldr	r3, [r3, #0]
 802380a:	683a      	ldr	r2, [r7, #0]
 802380c:	6892      	ldr	r2, [r2, #8]
 802380e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8023810:	683a      	ldr	r2, [r7, #0]
 8023812:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8023814:	4611      	mov	r1, r2
 8023816:	4798      	blx	r3
        }
        break;
 8023818:	e11e      	b.n	8023a58 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 802381a:	4b7e      	ldr	r3, [pc, #504]	; (8023a14 <OpenThread_CallBack_Processing+0x318>)
 802381c:	681b      	ldr	r3, [r3, #0]
 802381e:	2b00      	cmp	r3, #0
 8023820:	f000 811c 	beq.w	8023a5c <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8023824:	4b7b      	ldr	r3, [pc, #492]	; (8023a14 <OpenThread_CallBack_Processing+0x318>)
 8023826:	681b      	ldr	r3, [r3, #0]
 8023828:	683a      	ldr	r2, [r7, #0]
 802382a:	6892      	ldr	r2, [r2, #8]
 802382c:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 802382e:	683a      	ldr	r2, [r7, #0]
 8023830:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8023832:	2000      	movs	r0, #0
 8023834:	4798      	blx	r3
        }
        break;
 8023836:	e111      	b.n	8023a5c <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 8023838:	4b77      	ldr	r3, [pc, #476]	; (8023a18 <OpenThread_CallBack_Processing+0x31c>)
 802383a:	681b      	ldr	r3, [r3, #0]
 802383c:	2b00      	cmp	r3, #0
 802383e:	f000 810f 	beq.w	8023a60 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8023842:	4b75      	ldr	r3, [pc, #468]	; (8023a18 <OpenThread_CallBack_Processing+0x31c>)
 8023844:	681b      	ldr	r3, [r3, #0]
 8023846:	683a      	ldr	r2, [r7, #0]
 8023848:	6892      	ldr	r2, [r2, #8]
 802384a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 802384c:	683a      	ldr	r2, [r7, #0]
 802384e:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8023850:	4611      	mov	r1, r2
 8023852:	4798      	blx	r3
        }
        break;
 8023854:	e104      	b.n	8023a60 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 8023856:	4b71      	ldr	r3, [pc, #452]	; (8023a1c <OpenThread_CallBack_Processing+0x320>)
 8023858:	681b      	ldr	r3, [r3, #0]
 802385a:	2b00      	cmp	r3, #0
 802385c:	f000 8102 	beq.w	8023a64 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8023860:	4b6e      	ldr	r3, [pc, #440]	; (8023a1c <OpenThread_CallBack_Processing+0x320>)
 8023862:	681b      	ldr	r3, [r3, #0]
 8023864:	683a      	ldr	r2, [r7, #0]
 8023866:	6892      	ldr	r2, [r2, #8]
 8023868:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 802386a:	683a      	ldr	r2, [r7, #0]
 802386c:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 802386e:	4611      	mov	r1, r2
 8023870:	4798      	blx	r3
        }
        break;
 8023872:	e0f7      	b.n	8023a64 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8023874:	4b6a      	ldr	r3, [pc, #424]	; (8023a20 <OpenThread_CallBack_Processing+0x324>)
 8023876:	681b      	ldr	r3, [r3, #0]
 8023878:	2b00      	cmp	r3, #0
 802387a:	f000 80f5 	beq.w	8023a68 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 802387e:	4b68      	ldr	r3, [pc, #416]	; (8023a20 <OpenThread_CallBack_Processing+0x324>)
 8023880:	681b      	ldr	r3, [r3, #0]
 8023882:	683a      	ldr	r2, [r7, #0]
 8023884:	6892      	ldr	r2, [r2, #8]
 8023886:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8023888:	683a      	ldr	r2, [r7, #0]
 802388a:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 802388c:	4611      	mov	r1, r2
 802388e:	4798      	blx	r3
        }
        break;
 8023890:	e0ea      	b.n	8023a68 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8023892:	4b64      	ldr	r3, [pc, #400]	; (8023a24 <OpenThread_CallBack_Processing+0x328>)
 8023894:	681b      	ldr	r3, [r3, #0]
 8023896:	2b00      	cmp	r3, #0
 8023898:	f000 80e8 	beq.w	8023a6c <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 802389c:	4b61      	ldr	r3, [pc, #388]	; (8023a24 <OpenThread_CallBack_Processing+0x328>)
 802389e:	681b      	ldr	r3, [r3, #0]
 80238a0:	683a      	ldr	r2, [r7, #0]
 80238a2:	6892      	ldr	r2, [r2, #8]
 80238a4:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 80238a6:	683a      	ldr	r2, [r7, #0]
 80238a8:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 80238aa:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 80238ac:	683a      	ldr	r2, [r7, #0]
 80238ae:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 80238b0:	4798      	blx	r3
        }
        break;
 80238b2:	e0db      	b.n	8023a6c <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 80238b4:	4b5c      	ldr	r3, [pc, #368]	; (8023a28 <OpenThread_CallBack_Processing+0x32c>)
 80238b6:	681b      	ldr	r3, [r3, #0]
 80238b8:	2b00      	cmp	r3, #0
 80238ba:	f000 80d9 	beq.w	8023a70 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 80238be:	4b5a      	ldr	r3, [pc, #360]	; (8023a28 <OpenThread_CallBack_Processing+0x32c>)
 80238c0:	681b      	ldr	r3, [r3, #0]
 80238c2:	683a      	ldr	r2, [r7, #0]
 80238c4:	6892      	ldr	r2, [r2, #8]
 80238c6:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 80238c8:	683a      	ldr	r2, [r7, #0]
 80238ca:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 80238cc:	4611      	mov	r1, r2
 80238ce:	4798      	blx	r3
        }
        break;
 80238d0:	e0ce      	b.n	8023a70 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 80238d2:	4b56      	ldr	r3, [pc, #344]	; (8023a2c <OpenThread_CallBack_Processing+0x330>)
 80238d4:	681b      	ldr	r3, [r3, #0]
 80238d6:	2b00      	cmp	r3, #0
 80238d8:	f000 80cc 	beq.w	8023a74 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80238dc:	4b53      	ldr	r3, [pc, #332]	; (8023a2c <OpenThread_CallBack_Processing+0x330>)
 80238de:	681c      	ldr	r4, [r3, #0]
 80238e0:	683b      	ldr	r3, [r7, #0]
 80238e2:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 80238e4:	683b      	ldr	r3, [r7, #0]
 80238e6:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80238e8:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 80238ea:	683b      	ldr	r3, [r7, #0]
 80238ec:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80238ee:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 80238f0:	683b      	ldr	r3, [r7, #0]
 80238f2:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80238f4:	47a0      	blx	r4
        }
        break;
 80238f6:	e0bd      	b.n	8023a74 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 80238f8:	4b4d      	ldr	r3, [pc, #308]	; (8023a30 <OpenThread_CallBack_Processing+0x334>)
 80238fa:	681b      	ldr	r3, [r3, #0]
 80238fc:	2b00      	cmp	r3, #0
 80238fe:	f000 80bb 	beq.w	8023a78 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8023902:	4b4b      	ldr	r3, [pc, #300]	; (8023a30 <OpenThread_CallBack_Processing+0x334>)
 8023904:	681c      	ldr	r4, [r3, #0]
 8023906:	683b      	ldr	r3, [r7, #0]
 8023908:	689b      	ldr	r3, [r3, #8]
 802390a:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 802390c:	683b      	ldr	r3, [r7, #0]
 802390e:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8023910:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 8023912:	683b      	ldr	r3, [r7, #0]
 8023914:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8023916:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8023918:	683b      	ldr	r3, [r7, #0]
 802391a:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 802391c:	683b      	ldr	r3, [r7, #0]
 802391e:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8023920:	b2db      	uxtb	r3, r3
 8023922:	9300      	str	r3, [sp, #0]
 8023924:	4613      	mov	r3, r2
 8023926:	462a      	mov	r2, r5
 8023928:	47a0      	blx	r4
        }
        break;
 802392a:	e0a5      	b.n	8023a78 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 802392c:	4b41      	ldr	r3, [pc, #260]	; (8023a34 <OpenThread_CallBack_Processing+0x338>)
 802392e:	681b      	ldr	r3, [r3, #0]
 8023930:	2b00      	cmp	r3, #0
 8023932:	f000 80a3 	beq.w	8023a7c <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8023936:	4b3f      	ldr	r3, [pc, #252]	; (8023a34 <OpenThread_CallBack_Processing+0x338>)
 8023938:	681c      	ldr	r4, [r3, #0]
 802393a:	683b      	ldr	r3, [r7, #0]
 802393c:	689b      	ldr	r3, [r3, #8]
 802393e:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 8023940:	683b      	ldr	r3, [r7, #0]
 8023942:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8023944:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 8023946:	683b      	ldr	r3, [r7, #0]
 8023948:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 802394a:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 802394c:	683b      	ldr	r3, [r7, #0]
 802394e:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8023950:	47a0      	blx	r4
        }
        break;
 8023952:	e093      	b.n	8023a7c <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8023954:	4b38      	ldr	r3, [pc, #224]	; (8023a38 <OpenThread_CallBack_Processing+0x33c>)
 8023956:	681b      	ldr	r3, [r3, #0]
 8023958:	2b00      	cmp	r3, #0
 802395a:	f000 8091 	beq.w	8023a80 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 802395e:	4b36      	ldr	r3, [pc, #216]	; (8023a38 <OpenThread_CallBack_Processing+0x33c>)
 8023960:	681b      	ldr	r3, [r3, #0]
 8023962:	683a      	ldr	r2, [r7, #0]
 8023964:	6892      	ldr	r2, [r2, #8]
 8023966:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8023968:	683a      	ldr	r2, [r7, #0]
 802396a:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 802396c:	4611      	mov	r1, r2
 802396e:	4798      	blx	r3
        }
        break;
 8023970:	e086      	b.n	8023a80 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8023972:	4b32      	ldr	r3, [pc, #200]	; (8023a3c <OpenThread_CallBack_Processing+0x340>)
 8023974:	681b      	ldr	r3, [r3, #0]
 8023976:	2b00      	cmp	r3, #0
 8023978:	f000 8084 	beq.w	8023a84 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 802397c:	4b2f      	ldr	r3, [pc, #188]	; (8023a3c <OpenThread_CallBack_Processing+0x340>)
 802397e:	681b      	ldr	r3, [r3, #0]
 8023980:	683a      	ldr	r2, [r7, #0]
 8023982:	6892      	ldr	r2, [r2, #8]
 8023984:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8023986:	683a      	ldr	r2, [r7, #0]
 8023988:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 802398a:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 802398c:	683a      	ldr	r2, [r7, #0]
 802398e:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8023990:	b2d2      	uxtb	r2, r2
 8023992:	4798      	blx	r3
        }
        break;
 8023994:	e076      	b.n	8023a84 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8023996:	4b2a      	ldr	r3, [pc, #168]	; (8023a40 <OpenThread_CallBack_Processing+0x344>)
 8023998:	681b      	ldr	r3, [r3, #0]
 802399a:	2b00      	cmp	r3, #0
 802399c:	d074      	beq.n	8023a88 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 802399e:	4b28      	ldr	r3, [pc, #160]	; (8023a40 <OpenThread_CallBack_Processing+0x344>)
 80239a0:	681c      	ldr	r4, [r3, #0]
 80239a2:	683b      	ldr	r3, [r7, #0]
 80239a4:	689b      	ldr	r3, [r3, #8]
 80239a6:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 80239a8:	683b      	ldr	r3, [r7, #0]
 80239aa:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80239ac:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 80239ae:	683b      	ldr	r3, [r7, #0]
 80239b0:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80239b2:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 80239b4:	683b      	ldr	r3, [r7, #0]
 80239b6:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80239b8:	b2db      	uxtb	r3, r3
 80239ba:	47a0      	blx	r4
        }
        break;
 80239bc:	e064      	b.n	8023a88 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 80239be:	4b21      	ldr	r3, [pc, #132]	; (8023a44 <OpenThread_CallBack_Processing+0x348>)
 80239c0:	681b      	ldr	r3, [r3, #0]
 80239c2:	2b00      	cmp	r3, #0
 80239c4:	d062      	beq.n	8023a8c <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80239c6:	4b1f      	ldr	r3, [pc, #124]	; (8023a44 <OpenThread_CallBack_Processing+0x348>)
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	683a      	ldr	r2, [r7, #0]
 80239cc:	6892      	ldr	r2, [r2, #8]
 80239ce:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 80239d0:	683a      	ldr	r2, [r7, #0]
 80239d2:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80239d4:	b252      	sxtb	r2, r2
 80239d6:	4611      	mov	r1, r2
 80239d8:	4798      	blx	r3
        }
        break;
 80239da:	e057      	b.n	8023a8c <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 80239dc:	4b1a      	ldr	r3, [pc, #104]	; (8023a48 <OpenThread_CallBack_Processing+0x34c>)
 80239de:	681b      	ldr	r3, [r3, #0]
 80239e0:	2b00      	cmp	r3, #0
 80239e2:	d055      	beq.n	8023a90 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 80239e4:	4b18      	ldr	r3, [pc, #96]	; (8023a48 <OpenThread_CallBack_Processing+0x34c>)
 80239e6:	681b      	ldr	r3, [r3, #0]
 80239e8:	683a      	ldr	r2, [r7, #0]
 80239ea:	6892      	ldr	r2, [r2, #8]
 80239ec:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 80239ee:	683a      	ldr	r2, [r7, #0]
 80239f0:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80239f2:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 80239f4:	683a      	ldr	r2, [r7, #0]
 80239f6:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80239f8:	4798      	blx	r3
        }
        break;
 80239fa:	e049      	b.n	8023a90 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 80239fc:	2301      	movs	r3, #1
 80239fe:	71fb      	strb	r3, [r7, #7]
        break;
 8023a00:	e047      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
 8023a02:	bf00      	nop
 8023a04:	20027484 	.word	0x20027484
 8023a08:	200274c4 	.word	0x200274c4
 8023a0c:	200274c8 	.word	0x200274c8
 8023a10:	2002748c 	.word	0x2002748c
 8023a14:	20027488 	.word	0x20027488
 8023a18:	20027490 	.word	0x20027490
 8023a1c:	20027494 	.word	0x20027494
 8023a20:	20027498 	.word	0x20027498
 8023a24:	2002749c 	.word	0x2002749c
 8023a28:	200274a0 	.word	0x200274a0
 8023a2c:	200274a4 	.word	0x200274a4
 8023a30:	200274a8 	.word	0x200274a8
 8023a34:	200274ac 	.word	0x200274ac
 8023a38:	200274b0 	.word	0x200274b0
 8023a3c:	200274b4 	.word	0x200274b4
 8023a40:	200274b8 	.word	0x200274b8
 8023a44:	200274bc 	.word	0x200274bc
 8023a48:	200274c0 	.word	0x200274c0
        break;
 8023a4c:	bf00      	nop
 8023a4e:	e020      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a50:	bf00      	nop
 8023a52:	e01e      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a54:	bf00      	nop
 8023a56:	e01c      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a58:	bf00      	nop
 8023a5a:	e01a      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a5c:	bf00      	nop
 8023a5e:	e018      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a60:	bf00      	nop
 8023a62:	e016      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a64:	bf00      	nop
 8023a66:	e014      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a68:	bf00      	nop
 8023a6a:	e012      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a6c:	bf00      	nop
 8023a6e:	e010      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a70:	bf00      	nop
 8023a72:	e00e      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a74:	bf00      	nop
 8023a76:	e00c      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a78:	bf00      	nop
 8023a7a:	e00a      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a7c:	bf00      	nop
 8023a7e:	e008      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a80:	bf00      	nop
 8023a82:	e006      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a84:	bf00      	nop
 8023a86:	e004      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a88:	bf00      	nop
 8023a8a:	e002      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a8c:	bf00      	nop
 8023a8e:	e000      	b.n	8023a92 <OpenThread_CallBack_Processing+0x396>
        break;
 8023a90:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8023a92:	f000 fd05 	bl	80244a0 <TL_THREAD_SendAck>
    return status;
 8023a96:	79fb      	ldrb	r3, [r7, #7]

}
 8023a98:	4618      	mov	r0, r3
 8023a9a:	3708      	adds	r7, #8
 8023a9c:	46bd      	mov	sp, r7
 8023a9e:	bdb0      	pop	{r4, r5, r7, pc}

08023aa0 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8023aa0:	b580      	push	{r7, lr}
 8023aa2:	b084      	sub	sp, #16
 8023aa4:	af00      	add	r7, sp, #0
 8023aa6:	6078      	str	r0, [r7, #4]
 8023aa8:	460b      	mov	r3, r1
 8023aaa:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8023aac:	f002 f9e6 	bl	8025e7c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8023ab0:	f002 f982 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8023ab4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 8023ab6:	68fb      	ldr	r3, [r7, #12]
 8023ab8:	2200      	movs	r2, #0
 8023aba:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8023abe:	701a      	strb	r2, [r3, #0]
 8023ac0:	2200      	movs	r2, #0
 8023ac2:	f042 0201 	orr.w	r2, r2, #1
 8023ac6:	705a      	strb	r2, [r3, #1]
 8023ac8:	2200      	movs	r2, #0
 8023aca:	709a      	strb	r2, [r3, #2]
 8023acc:	2200      	movs	r2, #0
 8023ace:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8023ad0:	68fb      	ldr	r3, [r7, #12]
 8023ad2:	2200      	movs	r2, #0
 8023ad4:	f042 0201 	orr.w	r2, r2, #1
 8023ad8:	711a      	strb	r2, [r3, #4]
 8023ada:	2200      	movs	r2, #0
 8023adc:	715a      	strb	r2, [r3, #5]
 8023ade:	2200      	movs	r2, #0
 8023ae0:	719a      	strb	r2, [r3, #6]
 8023ae2:	2200      	movs	r2, #0
 8023ae4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 8023ae6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8023aea:	68fb      	ldr	r3, [r7, #12]
 8023aec:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8023aee:	f002 f987 	bl	8025e00 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8023af2:	f002 f96d 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8023af6:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8023af8:	68fb      	ldr	r3, [r7, #12]
 8023afa:	689b      	ldr	r3, [r3, #8]
 8023afc:	b2db      	uxtb	r3, r3
}
 8023afe:	4618      	mov	r0, r3
 8023b00:	3710      	adds	r7, #16
 8023b02:	46bd      	mov	sp, r7
 8023b04:	bd80      	pop	{r7, pc}

08023b06 <SHCI_C2_FUS_GetState>:
/**
 *  C2 COMMAND
 *  These commands are sent to the CPU2
 */
uint8_t SHCI_C2_FUS_GetState( SHCI_FUS_GetState_ErrorCode_t *p_error_code )
{
 8023b06:	b580      	push	{r7, lr}
 8023b08:	b088      	sub	sp, #32
 8023b0a:	af00      	add	r7, sp, #0
 8023b0c:	6078      	str	r0, [r7, #4]
   * A command status event + payload has the same size than the expected command complete
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE + 1];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8023b0e:	f107 030c 	add.w	r3, r7, #12
 8023b12:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_FUS_GET_STATE,
 8023b14:	69fb      	ldr	r3, [r7, #28]
 8023b16:	2200      	movs	r2, #0
 8023b18:	2100      	movs	r1, #0
 8023b1a:	f64f 4052 	movw	r0, #64594	; 0xfc52
 8023b1e:	f000 f92f 	bl	8023d80 <shci_send>
             0,
             0,
             p_rsp );

  if(p_error_code != 0)
 8023b22:	687b      	ldr	r3, [r7, #4]
 8023b24:	2b00      	cmp	r3, #0
 8023b26:	d004      	beq.n	8023b32 <SHCI_C2_FUS_GetState+0x2c>
  {
    *p_error_code = (SHCI_FUS_GetState_ErrorCode_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[1]);
 8023b28:	69fb      	ldr	r3, [r7, #28]
 8023b2a:	330b      	adds	r3, #11
 8023b2c:	791a      	ldrb	r2, [r3, #4]
 8023b2e:	687b      	ldr	r3, [r7, #4]
 8023b30:	701a      	strb	r2, [r3, #0]
  }

  return (((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8023b32:	69fb      	ldr	r3, [r7, #28]
 8023b34:	330b      	adds	r3, #11
 8023b36:	78db      	ldrb	r3, [r3, #3]
}
 8023b38:	4618      	mov	r0, r3
 8023b3a:	3720      	adds	r7, #32
 8023b3c:	46bd      	mov	sp, r7
 8023b3e:	bd80      	pop	{r7, pc}

08023b40 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8023b40:	b580      	push	{r7, lr}
 8023b42:	b086      	sub	sp, #24
 8023b44:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8023b46:	1d3b      	adds	r3, r7, #4
 8023b48:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8023b4a:	697b      	ldr	r3, [r7, #20]
 8023b4c:	2200      	movs	r2, #0
 8023b4e:	2100      	movs	r1, #0
 8023b50:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8023b54:	f000 f914 	bl	8023d80 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8023b58:	697b      	ldr	r3, [r7, #20]
 8023b5a:	330b      	adds	r3, #11
 8023b5c:	78db      	ldrb	r3, [r3, #3]
}
 8023b5e:	4618      	mov	r0, r3
 8023b60:	3718      	adds	r7, #24
 8023b62:	46bd      	mov	sp, r7
 8023b64:	bd80      	pop	{r7, pc}

08023b66 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8023b66:	b580      	push	{r7, lr}
 8023b68:	b088      	sub	sp, #32
 8023b6a:	af00      	add	r7, sp, #0
 8023b6c:	4603      	mov	r3, r0
 8023b6e:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8023b70:	f107 030c 	add.w	r3, r7, #12
 8023b74:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8023b76:	79fb      	ldrb	r3, [r7, #7]
 8023b78:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8023b7a:	f107 020c 	add.w	r2, r7, #12
 8023b7e:	69fb      	ldr	r3, [r7, #28]
 8023b80:	2101      	movs	r1, #1
 8023b82:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8023b86:	f000 f8fb 	bl	8023d80 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8023b8a:	69fb      	ldr	r3, [r7, #28]
 8023b8c:	330b      	adds	r3, #11
 8023b8e:	78db      	ldrb	r3, [r3, #3]
}
 8023b90:	4618      	mov	r0, r3
 8023b92:	3720      	adds	r7, #32
 8023b94:	46bd      	mov	sp, r7
 8023b96:	bd80      	pop	{r7, pc}

08023b98 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8023b98:	b480      	push	{r7}
 8023b9a:	b089      	sub	sp, #36	; 0x24
 8023b9c:	af00      	add	r7, sp, #0
 8023b9e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8023ba0:	2300      	movs	r3, #0
 8023ba2:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 8023ba4:	2300      	movs	r3, #0
 8023ba6:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 8023ba8:	2300      	movs	r3, #0
 8023baa:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 8023bac:	2300      	movs	r3, #0
 8023bae:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 8023bb0:	2300      	movs	r3, #0
 8023bb2:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8023bb4:	4b3c      	ldr	r3, [pc, #240]	; (8023ca8 <SHCI_GetWirelessFwInfo+0x110>)
 8023bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023bb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8023bbc:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8023bbe:	69fb      	ldr	r3, [r7, #28]
 8023bc0:	009b      	lsls	r3, r3, #2
 8023bc2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8023bc6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8023bca:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8023bcc:	69bb      	ldr	r3, [r7, #24]
 8023bce:	681b      	ldr	r3, [r3, #0]
 8023bd0:	691b      	ldr	r3, [r3, #16]
 8023bd2:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8023bd4:	697b      	ldr	r3, [r7, #20]
 8023bd6:	0e1b      	lsrs	r3, r3, #24
 8023bd8:	b2da      	uxtb	r2, r3
 8023bda:	687b      	ldr	r3, [r7, #4]
 8023bdc:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8023bde:	697b      	ldr	r3, [r7, #20]
 8023be0:	0c1b      	lsrs	r3, r3, #16
 8023be2:	b2da      	uxtb	r2, r3
 8023be4:	687b      	ldr	r3, [r7, #4]
 8023be6:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8023be8:	697b      	ldr	r3, [r7, #20]
 8023bea:	0a1b      	lsrs	r3, r3, #8
 8023bec:	b2da      	uxtb	r2, r3
 8023bee:	687b      	ldr	r3, [r7, #4]
 8023bf0:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8023bf2:	697b      	ldr	r3, [r7, #20]
 8023bf4:	091b      	lsrs	r3, r3, #4
 8023bf6:	b2db      	uxtb	r3, r3
 8023bf8:	f003 030f 	and.w	r3, r3, #15
 8023bfc:	b2da      	uxtb	r2, r3
 8023bfe:	687b      	ldr	r3, [r7, #4]
 8023c00:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8023c02:	697b      	ldr	r3, [r7, #20]
 8023c04:	b2db      	uxtb	r3, r3
 8023c06:	f003 030f 	and.w	r3, r3, #15
 8023c0a:	b2da      	uxtb	r2, r3
 8023c0c:	687b      	ldr	r3, [r7, #4]
 8023c0e:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8023c10:	69bb      	ldr	r3, [r7, #24]
 8023c12:	681b      	ldr	r3, [r3, #0]
 8023c14:	695b      	ldr	r3, [r3, #20]
 8023c16:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8023c18:	693b      	ldr	r3, [r7, #16]
 8023c1a:	0e1b      	lsrs	r3, r3, #24
 8023c1c:	b2da      	uxtb	r2, r3
 8023c1e:	687b      	ldr	r3, [r7, #4]
 8023c20:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8023c22:	693b      	ldr	r3, [r7, #16]
 8023c24:	0c1b      	lsrs	r3, r3, #16
 8023c26:	b2da      	uxtb	r2, r3
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8023c2c:	693b      	ldr	r3, [r7, #16]
 8023c2e:	0a1b      	lsrs	r3, r3, #8
 8023c30:	b2da      	uxtb	r2, r3
 8023c32:	687b      	ldr	r3, [r7, #4]
 8023c34:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8023c36:	693b      	ldr	r3, [r7, #16]
 8023c38:	b2da      	uxtb	r2, r3
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8023c3e:	69bb      	ldr	r3, [r7, #24]
 8023c40:	681b      	ldr	r3, [r3, #0]
 8023c42:	699b      	ldr	r3, [r3, #24]
 8023c44:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8023c46:	68fb      	ldr	r3, [r7, #12]
 8023c48:	b2da      	uxtb	r2, r3
 8023c4a:	687b      	ldr	r3, [r7, #4]
 8023c4c:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8023c4e:	69bb      	ldr	r3, [r7, #24]
 8023c50:	681b      	ldr	r3, [r3, #0]
 8023c52:	685b      	ldr	r3, [r3, #4]
 8023c54:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8023c56:	697b      	ldr	r3, [r7, #20]
 8023c58:	0e1b      	lsrs	r3, r3, #24
 8023c5a:	b2da      	uxtb	r2, r3
 8023c5c:	687b      	ldr	r3, [r7, #4]
 8023c5e:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8023c60:	697b      	ldr	r3, [r7, #20]
 8023c62:	0c1b      	lsrs	r3, r3, #16
 8023c64:	b2da      	uxtb	r2, r3
 8023c66:	687b      	ldr	r3, [r7, #4]
 8023c68:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8023c6a:	697b      	ldr	r3, [r7, #20]
 8023c6c:	0a1b      	lsrs	r3, r3, #8
 8023c6e:	b2da      	uxtb	r2, r3
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8023c74:	69bb      	ldr	r3, [r7, #24]
 8023c76:	681b      	ldr	r3, [r3, #0]
 8023c78:	689b      	ldr	r3, [r3, #8]
 8023c7a:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8023c7c:	693b      	ldr	r3, [r7, #16]
 8023c7e:	0e1b      	lsrs	r3, r3, #24
 8023c80:	b2da      	uxtb	r2, r3
 8023c82:	687b      	ldr	r3, [r7, #4]
 8023c84:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8023c86:	693b      	ldr	r3, [r7, #16]
 8023c88:	0c1b      	lsrs	r3, r3, #16
 8023c8a:	b2da      	uxtb	r2, r3
 8023c8c:	687b      	ldr	r3, [r7, #4]
 8023c8e:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8023c90:	693b      	ldr	r3, [r7, #16]
 8023c92:	b2da      	uxtb	r2, r3
 8023c94:	687b      	ldr	r3, [r7, #4]
 8023c96:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8023c98:	2300      	movs	r3, #0
}
 8023c9a:	4618      	mov	r0, r3
 8023c9c:	3724      	adds	r7, #36	; 0x24
 8023c9e:	46bd      	mov	sp, r7
 8023ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ca4:	4770      	bx	lr
 8023ca6:	bf00      	nop
 8023ca8:	58004000 	.word	0x58004000

08023cac <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8023cac:	b580      	push	{r7, lr}
 8023cae:	b082      	sub	sp, #8
 8023cb0:	af00      	add	r7, sp, #0
 8023cb2:	6078      	str	r0, [r7, #4]
 8023cb4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8023cb6:	683b      	ldr	r3, [r7, #0]
 8023cb8:	685b      	ldr	r3, [r3, #4]
 8023cba:	4a08      	ldr	r2, [pc, #32]	; (8023cdc <shci_init+0x30>)
 8023cbc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8023cbe:	4a08      	ldr	r2, [pc, #32]	; (8023ce0 <shci_init+0x34>)
 8023cc0:	687b      	ldr	r3, [r7, #4]
 8023cc2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8023cc4:	4806      	ldr	r0, [pc, #24]	; (8023ce0 <shci_init+0x34>)
 8023cc6:	f000 f911 	bl	8023eec <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8023cca:	683b      	ldr	r3, [r7, #0]
 8023ccc:	681b      	ldr	r3, [r3, #0]
 8023cce:	4618      	mov	r0, r3
 8023cd0:	f000 f894 	bl	8023dfc <TlInit>

  return;
 8023cd4:	bf00      	nop
}
 8023cd6:	3708      	adds	r7, #8
 8023cd8:	46bd      	mov	sp, r7
 8023cda:	bd80      	pop	{r7, pc}
 8023cdc:	200274ec 	.word	0x200274ec
 8023ce0:	200274cc 	.word	0x200274cc

08023ce4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8023ce4:	b580      	push	{r7, lr}
 8023ce6:	b084      	sub	sp, #16
 8023ce8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8023cea:	4822      	ldr	r0, [pc, #136]	; (8023d74 <shci_user_evt_proc+0x90>)
 8023cec:	f000 f922 	bl	8023f34 <LST_is_empty>
 8023cf0:	4603      	mov	r3, r0
 8023cf2:	2b00      	cmp	r3, #0
 8023cf4:	d12b      	bne.n	8023d4e <shci_user_evt_proc+0x6a>
 8023cf6:	4b20      	ldr	r3, [pc, #128]	; (8023d78 <shci_user_evt_proc+0x94>)
 8023cf8:	781b      	ldrb	r3, [r3, #0]
 8023cfa:	2b00      	cmp	r3, #0
 8023cfc:	d027      	beq.n	8023d4e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8023cfe:	f107 030c 	add.w	r3, r7, #12
 8023d02:	4619      	mov	r1, r3
 8023d04:	481b      	ldr	r0, [pc, #108]	; (8023d74 <shci_user_evt_proc+0x90>)
 8023d06:	f000 f99c 	bl	8024042 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8023d0a:	4b1c      	ldr	r3, [pc, #112]	; (8023d7c <shci_user_evt_proc+0x98>)
 8023d0c:	69db      	ldr	r3, [r3, #28]
 8023d0e:	2b00      	cmp	r3, #0
 8023d10:	d00c      	beq.n	8023d2c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8023d12:	68fb      	ldr	r3, [r7, #12]
 8023d14:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8023d16:	2301      	movs	r3, #1
 8023d18:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8023d1a:	4b18      	ldr	r3, [pc, #96]	; (8023d7c <shci_user_evt_proc+0x98>)
 8023d1c:	69db      	ldr	r3, [r3, #28]
 8023d1e:	1d3a      	adds	r2, r7, #4
 8023d20:	4610      	mov	r0, r2
 8023d22:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8023d24:	793a      	ldrb	r2, [r7, #4]
 8023d26:	4b14      	ldr	r3, [pc, #80]	; (8023d78 <shci_user_evt_proc+0x94>)
 8023d28:	701a      	strb	r2, [r3, #0]
 8023d2a:	e002      	b.n	8023d32 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8023d2c:	4b12      	ldr	r3, [pc, #72]	; (8023d78 <shci_user_evt_proc+0x94>)
 8023d2e:	2201      	movs	r2, #1
 8023d30:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8023d32:	4b11      	ldr	r3, [pc, #68]	; (8023d78 <shci_user_evt_proc+0x94>)
 8023d34:	781b      	ldrb	r3, [r3, #0]
 8023d36:	2b00      	cmp	r3, #0
 8023d38:	d004      	beq.n	8023d44 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8023d3a:	68fb      	ldr	r3, [r7, #12]
 8023d3c:	4618      	mov	r0, r3
 8023d3e:	f000 fc2b 	bl	8024598 <TL_MM_EvtDone>
 8023d42:	e004      	b.n	8023d4e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8023d44:	68fb      	ldr	r3, [r7, #12]
 8023d46:	4619      	mov	r1, r3
 8023d48:	480a      	ldr	r0, [pc, #40]	; (8023d74 <shci_user_evt_proc+0x90>)
 8023d4a:	f000 f913 	bl	8023f74 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8023d4e:	4809      	ldr	r0, [pc, #36]	; (8023d74 <shci_user_evt_proc+0x90>)
 8023d50:	f000 f8f0 	bl	8023f34 <LST_is_empty>
 8023d54:	4603      	mov	r3, r0
 8023d56:	2b00      	cmp	r3, #0
 8023d58:	d107      	bne.n	8023d6a <shci_user_evt_proc+0x86>
 8023d5a:	4b07      	ldr	r3, [pc, #28]	; (8023d78 <shci_user_evt_proc+0x94>)
 8023d5c:	781b      	ldrb	r3, [r3, #0]
 8023d5e:	2b00      	cmp	r3, #0
 8023d60:	d003      	beq.n	8023d6a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8023d62:	4804      	ldr	r0, [pc, #16]	; (8023d74 <shci_user_evt_proc+0x90>)
 8023d64:	f7ed fa26 	bl	80111b4 <shci_notify_asynch_evt>
  }


  return;
 8023d68:	bf00      	nop
 8023d6a:	bf00      	nop
}
 8023d6c:	3710      	adds	r7, #16
 8023d6e:	46bd      	mov	sp, r7
 8023d70:	bd80      	pop	{r7, pc}
 8023d72:	bf00      	nop
 8023d74:	20000248 	.word	0x20000248
 8023d78:	20000258 	.word	0x20000258
 8023d7c:	200274cc 	.word	0x200274cc

08023d80 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8023d80:	b580      	push	{r7, lr}
 8023d82:	b084      	sub	sp, #16
 8023d84:	af00      	add	r7, sp, #0
 8023d86:	60ba      	str	r2, [r7, #8]
 8023d88:	607b      	str	r3, [r7, #4]
 8023d8a:	4603      	mov	r3, r0
 8023d8c:	81fb      	strh	r3, [r7, #14]
 8023d8e:	460b      	mov	r3, r1
 8023d90:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8023d92:	2000      	movs	r0, #0
 8023d94:	f000 f864 	bl	8023e60 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8023d98:	4b16      	ldr	r3, [pc, #88]	; (8023df4 <shci_send+0x74>)
 8023d9a:	681b      	ldr	r3, [r3, #0]
 8023d9c:	89fa      	ldrh	r2, [r7, #14]
 8023d9e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8023da2:	4b14      	ldr	r3, [pc, #80]	; (8023df4 <shci_send+0x74>)
 8023da4:	681b      	ldr	r3, [r3, #0]
 8023da6:	7b7a      	ldrb	r2, [r7, #13]
 8023da8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8023daa:	4b12      	ldr	r3, [pc, #72]	; (8023df4 <shci_send+0x74>)
 8023dac:	681b      	ldr	r3, [r3, #0]
 8023dae:	330c      	adds	r3, #12
 8023db0:	7b7a      	ldrb	r2, [r7, #13]
 8023db2:	68b9      	ldr	r1, [r7, #8]
 8023db4:	4618      	mov	r0, r3
 8023db6:	f002 ff35 	bl	8026c24 <memcpy>

  shciContext.io.Send(0,0);
 8023dba:	4b0f      	ldr	r3, [pc, #60]	; (8023df8 <shci_send+0x78>)
 8023dbc:	691b      	ldr	r3, [r3, #16]
 8023dbe:	2100      	movs	r1, #0
 8023dc0:	2000      	movs	r0, #0
 8023dc2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8023dc4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8023dc8:	f7ed fa14 	bl	80111f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8023dcc:	687b      	ldr	r3, [r7, #4]
 8023dce:	f103 0008 	add.w	r0, r3, #8
 8023dd2:	4b08      	ldr	r3, [pc, #32]	; (8023df4 <shci_send+0x74>)
 8023dd4:	6819      	ldr	r1, [r3, #0]
 8023dd6:	4b07      	ldr	r3, [pc, #28]	; (8023df4 <shci_send+0x74>)
 8023dd8:	681b      	ldr	r3, [r3, #0]
 8023dda:	789b      	ldrb	r3, [r3, #2]
 8023ddc:	3303      	adds	r3, #3
 8023dde:	461a      	mov	r2, r3
 8023de0:	f002 ff20 	bl	8026c24 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8023de4:	2001      	movs	r0, #1
 8023de6:	f000 f83b 	bl	8023e60 <Cmd_SetStatus>

  return;
 8023dea:	bf00      	nop
}
 8023dec:	3710      	adds	r7, #16
 8023dee:	46bd      	mov	sp, r7
 8023df0:	bd80      	pop	{r7, pc}
 8023df2:	bf00      	nop
 8023df4:	20000254 	.word	0x20000254
 8023df8:	200274cc 	.word	0x200274cc

08023dfc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8023dfc:	b580      	push	{r7, lr}
 8023dfe:	b086      	sub	sp, #24
 8023e00:	af00      	add	r7, sp, #0
 8023e02:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8023e04:	4a10      	ldr	r2, [pc, #64]	; (8023e48 <TlInit+0x4c>)
 8023e06:	687b      	ldr	r3, [r7, #4]
 8023e08:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8023e0a:	4810      	ldr	r0, [pc, #64]	; (8023e4c <TlInit+0x50>)
 8023e0c:	f000 f882 	bl	8023f14 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8023e10:	2001      	movs	r0, #1
 8023e12:	f000 f825 	bl	8023e60 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8023e16:	4b0e      	ldr	r3, [pc, #56]	; (8023e50 <TlInit+0x54>)
 8023e18:	2201      	movs	r2, #1
 8023e1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8023e1c:	4b0d      	ldr	r3, [pc, #52]	; (8023e54 <TlInit+0x58>)
 8023e1e:	681b      	ldr	r3, [r3, #0]
 8023e20:	2b00      	cmp	r3, #0
 8023e22:	d00c      	beq.n	8023e3e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8023e24:	687b      	ldr	r3, [r7, #4]
 8023e26:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8023e28:	4b0b      	ldr	r3, [pc, #44]	; (8023e58 <TlInit+0x5c>)
 8023e2a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8023e2c:	4b0b      	ldr	r3, [pc, #44]	; (8023e5c <TlInit+0x60>)
 8023e2e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8023e30:	4b08      	ldr	r3, [pc, #32]	; (8023e54 <TlInit+0x58>)
 8023e32:	681b      	ldr	r3, [r3, #0]
 8023e34:	f107 020c 	add.w	r2, r7, #12
 8023e38:	4610      	mov	r0, r2
 8023e3a:	4798      	blx	r3
  }

  return;
 8023e3c:	bf00      	nop
 8023e3e:	bf00      	nop
}
 8023e40:	3718      	adds	r7, #24
 8023e42:	46bd      	mov	sp, r7
 8023e44:	bd80      	pop	{r7, pc}
 8023e46:	bf00      	nop
 8023e48:	20000254 	.word	0x20000254
 8023e4c:	20000248 	.word	0x20000248
 8023e50:	20000258 	.word	0x20000258
 8023e54:	200274cc 	.word	0x200274cc
 8023e58:	08023eb1 	.word	0x08023eb1
 8023e5c:	08023ec9 	.word	0x08023ec9

08023e60 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8023e60:	b580      	push	{r7, lr}
 8023e62:	b082      	sub	sp, #8
 8023e64:	af00      	add	r7, sp, #0
 8023e66:	4603      	mov	r3, r0
 8023e68:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8023e6a:	79fb      	ldrb	r3, [r7, #7]
 8023e6c:	2b00      	cmp	r3, #0
 8023e6e:	d10b      	bne.n	8023e88 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8023e70:	4b0d      	ldr	r3, [pc, #52]	; (8023ea8 <Cmd_SetStatus+0x48>)
 8023e72:	681b      	ldr	r3, [r3, #0]
 8023e74:	2b00      	cmp	r3, #0
 8023e76:	d003      	beq.n	8023e80 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8023e78:	4b0b      	ldr	r3, [pc, #44]	; (8023ea8 <Cmd_SetStatus+0x48>)
 8023e7a:	681b      	ldr	r3, [r3, #0]
 8023e7c:	2000      	movs	r0, #0
 8023e7e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8023e80:	4b0a      	ldr	r3, [pc, #40]	; (8023eac <Cmd_SetStatus+0x4c>)
 8023e82:	2200      	movs	r2, #0
 8023e84:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8023e86:	e00b      	b.n	8023ea0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8023e88:	4b08      	ldr	r3, [pc, #32]	; (8023eac <Cmd_SetStatus+0x4c>)
 8023e8a:	2201      	movs	r2, #1
 8023e8c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8023e8e:	4b06      	ldr	r3, [pc, #24]	; (8023ea8 <Cmd_SetStatus+0x48>)
 8023e90:	681b      	ldr	r3, [r3, #0]
 8023e92:	2b00      	cmp	r3, #0
 8023e94:	d004      	beq.n	8023ea0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8023e96:	4b04      	ldr	r3, [pc, #16]	; (8023ea8 <Cmd_SetStatus+0x48>)
 8023e98:	681b      	ldr	r3, [r3, #0]
 8023e9a:	2001      	movs	r0, #1
 8023e9c:	4798      	blx	r3
  return;
 8023e9e:	bf00      	nop
 8023ea0:	bf00      	nop
}
 8023ea2:	3708      	adds	r7, #8
 8023ea4:	46bd      	mov	sp, r7
 8023ea6:	bd80      	pop	{r7, pc}
 8023ea8:	200274ec 	.word	0x200274ec
 8023eac:	20000250 	.word	0x20000250

08023eb0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8023eb0:	b580      	push	{r7, lr}
 8023eb2:	b082      	sub	sp, #8
 8023eb4:	af00      	add	r7, sp, #0
 8023eb6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8023eb8:	2000      	movs	r0, #0
 8023eba:	f7ed f98b 	bl	80111d4 <shci_cmd_resp_release>

  return;
 8023ebe:	bf00      	nop
}
 8023ec0:	3708      	adds	r7, #8
 8023ec2:	46bd      	mov	sp, r7
 8023ec4:	bd80      	pop	{r7, pc}
	...

08023ec8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8023ec8:	b580      	push	{r7, lr}
 8023eca:	b082      	sub	sp, #8
 8023ecc:	af00      	add	r7, sp, #0
 8023ece:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8023ed0:	6879      	ldr	r1, [r7, #4]
 8023ed2:	4805      	ldr	r0, [pc, #20]	; (8023ee8 <TlUserEvtReceived+0x20>)
 8023ed4:	f000 f872 	bl	8023fbc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8023ed8:	4803      	ldr	r0, [pc, #12]	; (8023ee8 <TlUserEvtReceived+0x20>)
 8023eda:	f7ed f96b 	bl	80111b4 <shci_notify_asynch_evt>

  return;
 8023ede:	bf00      	nop
}
 8023ee0:	3708      	adds	r7, #8
 8023ee2:	46bd      	mov	sp, r7
 8023ee4:	bd80      	pop	{r7, pc}
 8023ee6:	bf00      	nop
 8023ee8:	20000248 	.word	0x20000248

08023eec <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8023eec:	b480      	push	{r7}
 8023eee:	b083      	sub	sp, #12
 8023ef0:	af00      	add	r7, sp, #0
 8023ef2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8023ef4:	687b      	ldr	r3, [r7, #4]
 8023ef6:	4a05      	ldr	r2, [pc, #20]	; (8023f0c <shci_register_io_bus+0x20>)
 8023ef8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8023efa:	687b      	ldr	r3, [r7, #4]
 8023efc:	4a04      	ldr	r2, [pc, #16]	; (8023f10 <shci_register_io_bus+0x24>)
 8023efe:	611a      	str	r2, [r3, #16]

  return;
 8023f00:	bf00      	nop
}
 8023f02:	370c      	adds	r7, #12
 8023f04:	46bd      	mov	sp, r7
 8023f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f0a:	4770      	bx	lr
 8023f0c:	0802435d 	.word	0x0802435d
 8023f10:	080243b1 	.word	0x080243b1

08023f14 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8023f14:	b480      	push	{r7}
 8023f16:	b083      	sub	sp, #12
 8023f18:	af00      	add	r7, sp, #0
 8023f1a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8023f1c:	687b      	ldr	r3, [r7, #4]
 8023f1e:	687a      	ldr	r2, [r7, #4]
 8023f20:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8023f22:	687b      	ldr	r3, [r7, #4]
 8023f24:	687a      	ldr	r2, [r7, #4]
 8023f26:	605a      	str	r2, [r3, #4]
}
 8023f28:	bf00      	nop
 8023f2a:	370c      	adds	r7, #12
 8023f2c:	46bd      	mov	sp, r7
 8023f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f32:	4770      	bx	lr

08023f34 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8023f34:	b480      	push	{r7}
 8023f36:	b087      	sub	sp, #28
 8023f38:	af00      	add	r7, sp, #0
 8023f3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8023f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8023f40:	60fb      	str	r3, [r7, #12]
  return(result);
 8023f42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8023f44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8023f46:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8023f48:	687b      	ldr	r3, [r7, #4]
 8023f4a:	681b      	ldr	r3, [r3, #0]
 8023f4c:	687a      	ldr	r2, [r7, #4]
 8023f4e:	429a      	cmp	r2, r3
 8023f50:	d102      	bne.n	8023f58 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8023f52:	2301      	movs	r3, #1
 8023f54:	75fb      	strb	r3, [r7, #23]
 8023f56:	e001      	b.n	8023f5c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8023f58:	2300      	movs	r3, #0
 8023f5a:	75fb      	strb	r3, [r7, #23]
 8023f5c:	693b      	ldr	r3, [r7, #16]
 8023f5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8023f60:	68bb      	ldr	r3, [r7, #8]
 8023f62:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8023f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8023f68:	4618      	mov	r0, r3
 8023f6a:	371c      	adds	r7, #28
 8023f6c:	46bd      	mov	sp, r7
 8023f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f72:	4770      	bx	lr

08023f74 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8023f74:	b480      	push	{r7}
 8023f76:	b087      	sub	sp, #28
 8023f78:	af00      	add	r7, sp, #0
 8023f7a:	6078      	str	r0, [r7, #4]
 8023f7c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8023f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8023f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8023f84:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8023f86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8023f88:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8023f8a:	687b      	ldr	r3, [r7, #4]
 8023f8c:	681a      	ldr	r2, [r3, #0]
 8023f8e:	683b      	ldr	r3, [r7, #0]
 8023f90:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8023f92:	683b      	ldr	r3, [r7, #0]
 8023f94:	687a      	ldr	r2, [r7, #4]
 8023f96:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8023f98:	687b      	ldr	r3, [r7, #4]
 8023f9a:	683a      	ldr	r2, [r7, #0]
 8023f9c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8023f9e:	683b      	ldr	r3, [r7, #0]
 8023fa0:	681b      	ldr	r3, [r3, #0]
 8023fa2:	683a      	ldr	r2, [r7, #0]
 8023fa4:	605a      	str	r2, [r3, #4]
 8023fa6:	697b      	ldr	r3, [r7, #20]
 8023fa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8023faa:	693b      	ldr	r3, [r7, #16]
 8023fac:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8023fb0:	bf00      	nop
 8023fb2:	371c      	adds	r7, #28
 8023fb4:	46bd      	mov	sp, r7
 8023fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fba:	4770      	bx	lr

08023fbc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8023fbc:	b480      	push	{r7}
 8023fbe:	b087      	sub	sp, #28
 8023fc0:	af00      	add	r7, sp, #0
 8023fc2:	6078      	str	r0, [r7, #4]
 8023fc4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8023fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8023fca:	60fb      	str	r3, [r7, #12]
  return(result);
 8023fcc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8023fce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8023fd0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8023fd2:	683b      	ldr	r3, [r7, #0]
 8023fd4:	687a      	ldr	r2, [r7, #4]
 8023fd6:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8023fd8:	687b      	ldr	r3, [r7, #4]
 8023fda:	685a      	ldr	r2, [r3, #4]
 8023fdc:	683b      	ldr	r3, [r7, #0]
 8023fde:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8023fe0:	687b      	ldr	r3, [r7, #4]
 8023fe2:	683a      	ldr	r2, [r7, #0]
 8023fe4:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8023fe6:	683b      	ldr	r3, [r7, #0]
 8023fe8:	685b      	ldr	r3, [r3, #4]
 8023fea:	683a      	ldr	r2, [r7, #0]
 8023fec:	601a      	str	r2, [r3, #0]
 8023fee:	697b      	ldr	r3, [r7, #20]
 8023ff0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8023ff2:	693b      	ldr	r3, [r7, #16]
 8023ff4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8023ff8:	bf00      	nop
 8023ffa:	371c      	adds	r7, #28
 8023ffc:	46bd      	mov	sp, r7
 8023ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024002:	4770      	bx	lr

08024004 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8024004:	b480      	push	{r7}
 8024006:	b087      	sub	sp, #28
 8024008:	af00      	add	r7, sp, #0
 802400a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802400c:	f3ef 8310 	mrs	r3, PRIMASK
 8024010:	60fb      	str	r3, [r7, #12]
  return(result);
 8024012:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8024014:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8024016:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8024018:	687b      	ldr	r3, [r7, #4]
 802401a:	685b      	ldr	r3, [r3, #4]
 802401c:	687a      	ldr	r2, [r7, #4]
 802401e:	6812      	ldr	r2, [r2, #0]
 8024020:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8024022:	687b      	ldr	r3, [r7, #4]
 8024024:	681b      	ldr	r3, [r3, #0]
 8024026:	687a      	ldr	r2, [r7, #4]
 8024028:	6852      	ldr	r2, [r2, #4]
 802402a:	605a      	str	r2, [r3, #4]
 802402c:	697b      	ldr	r3, [r7, #20]
 802402e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8024030:	693b      	ldr	r3, [r7, #16]
 8024032:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8024036:	bf00      	nop
 8024038:	371c      	adds	r7, #28
 802403a:	46bd      	mov	sp, r7
 802403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024040:	4770      	bx	lr

08024042 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8024042:	b580      	push	{r7, lr}
 8024044:	b086      	sub	sp, #24
 8024046:	af00      	add	r7, sp, #0
 8024048:	6078      	str	r0, [r7, #4]
 802404a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802404c:	f3ef 8310 	mrs	r3, PRIMASK
 8024050:	60fb      	str	r3, [r7, #12]
  return(result);
 8024052:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8024054:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8024056:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8024058:	687b      	ldr	r3, [r7, #4]
 802405a:	681a      	ldr	r2, [r3, #0]
 802405c:	683b      	ldr	r3, [r7, #0]
 802405e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8024060:	687b      	ldr	r3, [r7, #4]
 8024062:	681b      	ldr	r3, [r3, #0]
 8024064:	4618      	mov	r0, r3
 8024066:	f7ff ffcd 	bl	8024004 <LST_remove_node>
 802406a:	697b      	ldr	r3, [r7, #20]
 802406c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802406e:	693b      	ldr	r3, [r7, #16]
 8024070:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8024074:	bf00      	nop
 8024076:	3718      	adds	r7, #24
 8024078:	46bd      	mov	sp, r7
 802407a:	bd80      	pop	{r7, pc}

0802407c <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 802407c:	b580      	push	{r7, lr}
 802407e:	b084      	sub	sp, #16
 8024080:	af00      	add	r7, sp, #0
 8024082:	6078      	str	r0, [r7, #4]
 8024084:	460b      	mov	r3, r1
 8024086:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8024088:	f001 fef8 	bl	8025e7c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 802408c:	f001 fe94 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8024090:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8024092:	68fb      	ldr	r3, [r7, #12]
 8024094:	2200      	movs	r2, #0
 8024096:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 802409a:	701a      	strb	r2, [r3, #0]
 802409c:	2200      	movs	r2, #0
 802409e:	705a      	strb	r2, [r3, #1]
 80240a0:	2200      	movs	r2, #0
 80240a2:	709a      	strb	r2, [r3, #2]
 80240a4:	2200      	movs	r2, #0
 80240a6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80240a8:	68fb      	ldr	r3, [r7, #12]
 80240aa:	2200      	movs	r2, #0
 80240ac:	f042 0201 	orr.w	r2, r2, #1
 80240b0:	711a      	strb	r2, [r3, #4]
 80240b2:	2200      	movs	r2, #0
 80240b4:	715a      	strb	r2, [r3, #5]
 80240b6:	2200      	movs	r2, #0
 80240b8:	719a      	strb	r2, [r3, #6]
 80240ba:	2200      	movs	r2, #0
 80240bc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80240be:	78fa      	ldrb	r2, [r7, #3]
 80240c0:	68fb      	ldr	r3, [r7, #12]
 80240c2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80240c4:	f001 fe9c 	bl	8025e00 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80240c8:	f001 fe82 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80240cc:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80240ce:	68fb      	ldr	r3, [r7, #12]
 80240d0:	689b      	ldr	r3, [r3, #8]
 80240d2:	b2db      	uxtb	r3, r3
}
 80240d4:	4618      	mov	r0, r3
 80240d6:	3710      	adds	r7, #16
 80240d8:	46bd      	mov	sp, r7
 80240da:	bd80      	pop	{r7, pc}

080240dc <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 80240dc:	b580      	push	{r7, lr}
 80240de:	b084      	sub	sp, #16
 80240e0:	af00      	add	r7, sp, #0
 80240e2:	6078      	str	r0, [r7, #4]
 80240e4:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80240e6:	f001 fec9 	bl	8025e7c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80240ea:	f001 fe65 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 80240ee:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 80240f0:	68fb      	ldr	r3, [r7, #12]
 80240f2:	2200      	movs	r2, #0
 80240f4:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 80240f8:	701a      	strb	r2, [r3, #0]
 80240fa:	2200      	movs	r2, #0
 80240fc:	705a      	strb	r2, [r3, #1]
 80240fe:	2200      	movs	r2, #0
 8024100:	709a      	strb	r2, [r3, #2]
 8024102:	2200      	movs	r2, #0
 8024104:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8024106:	68fb      	ldr	r3, [r7, #12]
 8024108:	2200      	movs	r2, #0
 802410a:	f042 0201 	orr.w	r2, r2, #1
 802410e:	711a      	strb	r2, [r3, #4]
 8024110:	2200      	movs	r2, #0
 8024112:	715a      	strb	r2, [r3, #5]
 8024114:	2200      	movs	r2, #0
 8024116:	719a      	strb	r2, [r3, #6]
 8024118:	2200      	movs	r2, #0
 802411a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 802411c:	683a      	ldr	r2, [r7, #0]
 802411e:	68fb      	ldr	r3, [r7, #12]
 8024120:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8024122:	f001 fe6d 	bl	8025e00 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8024126:	f001 fe53 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 802412a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 802412c:	68fb      	ldr	r3, [r7, #12]
 802412e:	689b      	ldr	r3, [r3, #8]
 8024130:	b2db      	uxtb	r3, r3
}
 8024132:	4618      	mov	r0, r3
 8024134:	3710      	adds	r7, #16
 8024136:	46bd      	mov	sp, r7
 8024138:	bd80      	pop	{r7, pc}

0802413a <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 802413a:	b580      	push	{r7, lr}
 802413c:	b084      	sub	sp, #16
 802413e:	af00      	add	r7, sp, #0
 8024140:	6078      	str	r0, [r7, #4]
 8024142:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8024144:	f001 fe9a 	bl	8025e7c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8024148:	f001 fe36 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 802414c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 802414e:	68fb      	ldr	r3, [r7, #12]
 8024150:	2200      	movs	r2, #0
 8024152:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8024156:	701a      	strb	r2, [r3, #0]
 8024158:	2200      	movs	r2, #0
 802415a:	705a      	strb	r2, [r3, #1]
 802415c:	2200      	movs	r2, #0
 802415e:	709a      	strb	r2, [r3, #2]
 8024160:	2200      	movs	r2, #0
 8024162:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8024164:	68fb      	ldr	r3, [r7, #12]
 8024166:	2200      	movs	r2, #0
 8024168:	f042 0201 	orr.w	r2, r2, #1
 802416c:	711a      	strb	r2, [r3, #4]
 802416e:	2200      	movs	r2, #0
 8024170:	715a      	strb	r2, [r3, #5]
 8024172:	2200      	movs	r2, #0
 8024174:	719a      	strb	r2, [r3, #6]
 8024176:	2200      	movs	r2, #0
 8024178:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 802417a:	683a      	ldr	r2, [r7, #0]
 802417c:	68fb      	ldr	r3, [r7, #12]
 802417e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8024180:	f001 fe3e 	bl	8025e00 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8024184:	f001 fe24 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8024188:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 802418a:	68fb      	ldr	r3, [r7, #12]
 802418c:	689b      	ldr	r3, [r3, #8]
 802418e:	b2db      	uxtb	r3, r3
}
 8024190:	4618      	mov	r0, r3
 8024192:	3710      	adds	r7, #16
 8024194:	46bd      	mov	sp, r7
 8024196:	bd80      	pop	{r7, pc}

08024198 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 8024198:	b580      	push	{r7, lr}
 802419a:	b084      	sub	sp, #16
 802419c:	af00      	add	r7, sp, #0
 802419e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80241a0:	f001 fe6c 	bl	8025e7c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80241a4:	f001 fe08 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 80241a8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 80241aa:	68fb      	ldr	r3, [r7, #12]
 80241ac:	2200      	movs	r2, #0
 80241ae:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 80241b2:	701a      	strb	r2, [r3, #0]
 80241b4:	2200      	movs	r2, #0
 80241b6:	705a      	strb	r2, [r3, #1]
 80241b8:	2200      	movs	r2, #0
 80241ba:	709a      	strb	r2, [r3, #2]
 80241bc:	2200      	movs	r2, #0
 80241be:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80241c0:	68fb      	ldr	r3, [r7, #12]
 80241c2:	2200      	movs	r2, #0
 80241c4:	711a      	strb	r2, [r3, #4]
 80241c6:	2200      	movs	r2, #0
 80241c8:	715a      	strb	r2, [r3, #5]
 80241ca:	2200      	movs	r2, #0
 80241cc:	719a      	strb	r2, [r3, #6]
 80241ce:	2200      	movs	r2, #0
 80241d0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80241d2:	f001 fe15 	bl	8025e00 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80241d6:	f001 fdfb 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80241da:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 80241dc:	68fb      	ldr	r3, [r7, #12]
 80241de:	689b      	ldr	r3, [r3, #8]
}
 80241e0:	4618      	mov	r0, r3
 80241e2:	3710      	adds	r7, #16
 80241e4:	46bd      	mov	sp, r7
 80241e6:	bd80      	pop	{r7, pc}

080241e8 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 80241e8:	b580      	push	{r7, lr}
 80241ea:	b084      	sub	sp, #16
 80241ec:	af00      	add	r7, sp, #0
 80241ee:	6078      	str	r0, [r7, #4]
 80241f0:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80241f2:	f001 fe43 	bl	8025e7c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80241f6:	f001 fddf 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 80241fa:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 80241fc:	68fb      	ldr	r3, [r7, #12]
 80241fe:	2200      	movs	r2, #0
 8024200:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8024204:	701a      	strb	r2, [r3, #0]
 8024206:	2200      	movs	r2, #0
 8024208:	705a      	strb	r2, [r3, #1]
 802420a:	2200      	movs	r2, #0
 802420c:	709a      	strb	r2, [r3, #2]
 802420e:	2200      	movs	r2, #0
 8024210:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8024212:	68fb      	ldr	r3, [r7, #12]
 8024214:	2200      	movs	r2, #0
 8024216:	f042 0201 	orr.w	r2, r2, #1
 802421a:	711a      	strb	r2, [r3, #4]
 802421c:	2200      	movs	r2, #0
 802421e:	715a      	strb	r2, [r3, #5]
 8024220:	2200      	movs	r2, #0
 8024222:	719a      	strb	r2, [r3, #6]
 8024224:	2200      	movs	r2, #0
 8024226:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8024228:	683a      	ldr	r2, [r7, #0]
 802422a:	68fb      	ldr	r3, [r7, #12]
 802422c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 802422e:	f001 fde7 	bl	8025e00 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8024232:	f001 fdcd 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8024236:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8024238:	68fb      	ldr	r3, [r7, #12]
 802423a:	689b      	ldr	r3, [r3, #8]
 802423c:	b2db      	uxtb	r3, r3
}
 802423e:	4618      	mov	r0, r3
 8024240:	3710      	adds	r7, #16
 8024242:	46bd      	mov	sp, r7
 8024244:	bd80      	pop	{r7, pc}

08024246 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8024246:	b580      	push	{r7, lr}
 8024248:	b084      	sub	sp, #16
 802424a:	af00      	add	r7, sp, #0
 802424c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 802424e:	f001 fe15 	bl	8025e7c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8024252:	f001 fdb1 	bl	8025db8 <THREAD_Get_OTCmdPayloadBuffer>
 8024256:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8024258:	68fb      	ldr	r3, [r7, #12]
 802425a:	2200      	movs	r2, #0
 802425c:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8024260:	701a      	strb	r2, [r3, #0]
 8024262:	2200      	movs	r2, #0
 8024264:	705a      	strb	r2, [r3, #1]
 8024266:	2200      	movs	r2, #0
 8024268:	709a      	strb	r2, [r3, #2]
 802426a:	2200      	movs	r2, #0
 802426c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 802426e:	68fb      	ldr	r3, [r7, #12]
 8024270:	2200      	movs	r2, #0
 8024272:	711a      	strb	r2, [r3, #4]
 8024274:	2200      	movs	r2, #0
 8024276:	715a      	strb	r2, [r3, #5]
 8024278:	2200      	movs	r2, #0
 802427a:	719a      	strb	r2, [r3, #6]
 802427c:	2200      	movs	r2, #0
 802427e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8024280:	f001 fdbe 	bl	8025e00 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8024284:	f001 fda4 	bl	8025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8024288:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 802428a:	68fb      	ldr	r3, [r7, #12]
 802428c:	689b      	ldr	r3, [r3, #8]
 802428e:	b2db      	uxtb	r3, r3
}
 8024290:	4618      	mov	r0, r3
 8024292:	3710      	adds	r7, #16
 8024294:	46bd      	mov	sp, r7
 8024296:	bd80      	pop	{r7, pc}

08024298 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8024298:	b580      	push	{r7, lr}
 802429a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 802429c:	f002 f872 	bl	8026384 <HW_IPCC_Enable>

  return;
 80242a0:	bf00      	nop
}
 80242a2:	bd80      	pop	{r7, pc}

080242a4 <TL_Init>:


void TL_Init( void )
{
 80242a4:	b580      	push	{r7, lr}
 80242a6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80242a8:	4b0f      	ldr	r3, [pc, #60]	; (80242e8 <TL_Init+0x44>)
 80242aa:	4a10      	ldr	r2, [pc, #64]	; (80242ec <TL_Init+0x48>)
 80242ac:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80242ae:	4b0e      	ldr	r3, [pc, #56]	; (80242e8 <TL_Init+0x44>)
 80242b0:	4a0f      	ldr	r2, [pc, #60]	; (80242f0 <TL_Init+0x4c>)
 80242b2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80242b4:	4b0c      	ldr	r3, [pc, #48]	; (80242e8 <TL_Init+0x44>)
 80242b6:	4a0f      	ldr	r2, [pc, #60]	; (80242f4 <TL_Init+0x50>)
 80242b8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80242ba:	4b0b      	ldr	r3, [pc, #44]	; (80242e8 <TL_Init+0x44>)
 80242bc:	4a0e      	ldr	r2, [pc, #56]	; (80242f8 <TL_Init+0x54>)
 80242be:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 80242c0:	4b09      	ldr	r3, [pc, #36]	; (80242e8 <TL_Init+0x44>)
 80242c2:	4a0e      	ldr	r2, [pc, #56]	; (80242fc <TL_Init+0x58>)
 80242c4:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80242c6:	4b08      	ldr	r3, [pc, #32]	; (80242e8 <TL_Init+0x44>)
 80242c8:	4a0d      	ldr	r2, [pc, #52]	; (8024300 <TL_Init+0x5c>)
 80242ca:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80242cc:	4b06      	ldr	r3, [pc, #24]	; (80242e8 <TL_Init+0x44>)
 80242ce:	4a0d      	ldr	r2, [pc, #52]	; (8024304 <TL_Init+0x60>)
 80242d0:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80242d2:	4b05      	ldr	r3, [pc, #20]	; (80242e8 <TL_Init+0x44>)
 80242d4:	4a0c      	ldr	r2, [pc, #48]	; (8024308 <TL_Init+0x64>)
 80242d6:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80242d8:	4b03      	ldr	r3, [pc, #12]	; (80242e8 <TL_Init+0x44>)
 80242da:	4a0c      	ldr	r2, [pc, #48]	; (802430c <TL_Init+0x68>)
 80242dc:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80242de:	f002 f861 	bl	80263a4 <HW_IPCC_Init>

  return;
 80242e2:	bf00      	nop
}
 80242e4:	bd80      	pop	{r7, pc}
 80242e6:	bf00      	nop
 80242e8:	20030000 	.word	0x20030000
 80242ec:	20030024 	.word	0x20030024
 80242f0:	20030044 	.word	0x20030044
 80242f4:	20030054 	.word	0x20030054
 80242f8:	20030060 	.word	0x20030060
 80242fc:	20030068 	.word	0x20030068
 8024300:	20030070 	.word	0x20030070
 8024304:	2003008c 	.word	0x2003008c
 8024308:	20030090 	.word	0x20030090
 802430c:	2003009c 	.word	0x2003009c

08024310 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8024310:	b580      	push	{r7, lr}
 8024312:	b082      	sub	sp, #8
 8024314:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8024316:	e009      	b.n	802432c <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8024318:	1d3b      	adds	r3, r7, #4
 802431a:	4619      	mov	r1, r3
 802431c:	4808      	ldr	r0, [pc, #32]	; (8024340 <HW_IPCC_BLE_RxEvtNot+0x30>)
 802431e:	f7ff fe90 	bl	8024042 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8024322:	4b08      	ldr	r3, [pc, #32]	; (8024344 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8024324:	681b      	ldr	r3, [r3, #0]
 8024326:	687a      	ldr	r2, [r7, #4]
 8024328:	4610      	mov	r0, r2
 802432a:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 802432c:	4804      	ldr	r0, [pc, #16]	; (8024340 <HW_IPCC_BLE_RxEvtNot+0x30>)
 802432e:	f7ff fe01 	bl	8023f34 <LST_is_empty>
 8024332:	4603      	mov	r3, r0
 8024334:	2b00      	cmp	r3, #0
 8024336:	d0ef      	beq.n	8024318 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8024338:	bf00      	nop
}
 802433a:	3708      	adds	r7, #8
 802433c:	46bd      	mov	sp, r7
 802433e:	bd80      	pop	{r7, pc}
 8024340:	20030828 	.word	0x20030828
 8024344:	200274f8 	.word	0x200274f8

08024348 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8024348:	b580      	push	{r7, lr}
 802434a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 802434c:	4b02      	ldr	r3, [pc, #8]	; (8024358 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 802434e:	681b      	ldr	r3, [r3, #0]
 8024350:	4798      	blx	r3

  return;
 8024352:	bf00      	nop
}
 8024354:	bd80      	pop	{r7, pc}
 8024356:	bf00      	nop
 8024358:	200274fc 	.word	0x200274fc

0802435c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 802435c:	b580      	push	{r7, lr}
 802435e:	b084      	sub	sp, #16
 8024360:	af00      	add	r7, sp, #0
 8024362:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8024364:	687b      	ldr	r3, [r7, #4]
 8024366:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8024368:	480d      	ldr	r0, [pc, #52]	; (80243a0 <TL_SYS_Init+0x44>)
 802436a:	f7ff fdd3 	bl	8023f14 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 802436e:	4b0d      	ldr	r3, [pc, #52]	; (80243a4 <TL_SYS_Init+0x48>)
 8024370:	68db      	ldr	r3, [r3, #12]
 8024372:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8024374:	68fb      	ldr	r3, [r7, #12]
 8024376:	689a      	ldr	r2, [r3, #8]
 8024378:	68bb      	ldr	r3, [r7, #8]
 802437a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 802437c:	68bb      	ldr	r3, [r7, #8]
 802437e:	4a08      	ldr	r2, [pc, #32]	; (80243a0 <TL_SYS_Init+0x44>)
 8024380:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8024382:	f002 f83d 	bl	8026400 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8024386:	68fb      	ldr	r3, [r7, #12]
 8024388:	681b      	ldr	r3, [r3, #0]
 802438a:	4a07      	ldr	r2, [pc, #28]	; (80243a8 <TL_SYS_Init+0x4c>)
 802438c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 802438e:	68fb      	ldr	r3, [r7, #12]
 8024390:	685b      	ldr	r3, [r3, #4]
 8024392:	4a06      	ldr	r2, [pc, #24]	; (80243ac <TL_SYS_Init+0x50>)
 8024394:	6013      	str	r3, [r2, #0]

  return 0;
 8024396:	2300      	movs	r3, #0
}
 8024398:	4618      	mov	r0, r3
 802439a:	3710      	adds	r7, #16
 802439c:	46bd      	mov	sp, r7
 802439e:	bd80      	pop	{r7, pc}
 80243a0:	20030830 	.word	0x20030830
 80243a4:	20030000 	.word	0x20030000
 80243a8:	20027500 	.word	0x20027500
 80243ac:	20027504 	.word	0x20027504

080243b0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80243b0:	b580      	push	{r7, lr}
 80243b2:	b082      	sub	sp, #8
 80243b4:	af00      	add	r7, sp, #0
 80243b6:	6078      	str	r0, [r7, #4]
 80243b8:	460b      	mov	r3, r1
 80243ba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80243bc:	4b05      	ldr	r3, [pc, #20]	; (80243d4 <TL_SYS_SendCmd+0x24>)
 80243be:	68db      	ldr	r3, [r3, #12]
 80243c0:	681b      	ldr	r3, [r3, #0]
 80243c2:	2210      	movs	r2, #16
 80243c4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 80243c6:	f002 f825 	bl	8026414 <HW_IPCC_SYS_SendCmd>

  return 0;
 80243ca:	2300      	movs	r3, #0
}
 80243cc:	4618      	mov	r0, r3
 80243ce:	3708      	adds	r7, #8
 80243d0:	46bd      	mov	sp, r7
 80243d2:	bd80      	pop	{r7, pc}
 80243d4:	20030000 	.word	0x20030000

080243d8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80243d8:	b580      	push	{r7, lr}
 80243da:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80243dc:	4b04      	ldr	r3, [pc, #16]	; (80243f0 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 80243de:	681b      	ldr	r3, [r3, #0]
 80243e0:	4a04      	ldr	r2, [pc, #16]	; (80243f4 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 80243e2:	68d2      	ldr	r2, [r2, #12]
 80243e4:	6812      	ldr	r2, [r2, #0]
 80243e6:	4610      	mov	r0, r2
 80243e8:	4798      	blx	r3

  return;
 80243ea:	bf00      	nop
}
 80243ec:	bd80      	pop	{r7, pc}
 80243ee:	bf00      	nop
 80243f0:	20027500 	.word	0x20027500
 80243f4:	20030000 	.word	0x20030000

080243f8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80243f8:	b580      	push	{r7, lr}
 80243fa:	b082      	sub	sp, #8
 80243fc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80243fe:	e009      	b.n	8024414 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8024400:	1d3b      	adds	r3, r7, #4
 8024402:	4619      	mov	r1, r3
 8024404:	4808      	ldr	r0, [pc, #32]	; (8024428 <HW_IPCC_SYS_EvtNot+0x30>)
 8024406:	f7ff fe1c 	bl	8024042 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 802440a:	4b08      	ldr	r3, [pc, #32]	; (802442c <HW_IPCC_SYS_EvtNot+0x34>)
 802440c:	681b      	ldr	r3, [r3, #0]
 802440e:	687a      	ldr	r2, [r7, #4]
 8024410:	4610      	mov	r0, r2
 8024412:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8024414:	4804      	ldr	r0, [pc, #16]	; (8024428 <HW_IPCC_SYS_EvtNot+0x30>)
 8024416:	f7ff fd8d 	bl	8023f34 <LST_is_empty>
 802441a:	4603      	mov	r3, r0
 802441c:	2b00      	cmp	r3, #0
 802441e:	d0ef      	beq.n	8024400 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8024420:	bf00      	nop
}
 8024422:	3708      	adds	r7, #8
 8024424:	46bd      	mov	sp, r7
 8024426:	bd80      	pop	{r7, pc}
 8024428:	20030830 	.word	0x20030830
 802442c:	20027504 	.word	0x20027504

08024430 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8024430:	b580      	push	{r7, lr}
 8024432:	b084      	sub	sp, #16
 8024434:	af00      	add	r7, sp, #0
 8024436:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8024438:	4b0a      	ldr	r3, [pc, #40]	; (8024464 <TL_THREAD_Init+0x34>)
 802443a:	689b      	ldr	r3, [r3, #8]
 802443c:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 802443e:	687b      	ldr	r3, [r7, #4]
 8024440:	685a      	ldr	r2, [r3, #4]
 8024442:	68fb      	ldr	r3, [r7, #12]
 8024444:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8024446:	687b      	ldr	r3, [r7, #4]
 8024448:	681a      	ldr	r2, [r3, #0]
 802444a:	68fb      	ldr	r3, [r7, #12]
 802444c:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 802444e:	687b      	ldr	r3, [r7, #4]
 8024450:	689a      	ldr	r2, [r3, #8]
 8024452:	68fb      	ldr	r3, [r7, #12]
 8024454:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8024456:	f002 f803 	bl	8026460 <HW_IPCC_THREAD_Init>

  return;
 802445a:	bf00      	nop
}
 802445c:	3710      	adds	r7, #16
 802445e:	46bd      	mov	sp, r7
 8024460:	bd80      	pop	{r7, pc}
 8024462:	bf00      	nop
 8024464:	20030000 	.word	0x20030000

08024468 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8024468:	b580      	push	{r7, lr}
 802446a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 802446c:	4b04      	ldr	r3, [pc, #16]	; (8024480 <TL_OT_SendCmd+0x18>)
 802446e:	689b      	ldr	r3, [r3, #8]
 8024470:	689b      	ldr	r3, [r3, #8]
 8024472:	2208      	movs	r2, #8
 8024474:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8024476:	f002 f801 	bl	802647c <HW_IPCC_OT_SendCmd>

  return;
 802447a:	bf00      	nop
}
 802447c:	bd80      	pop	{r7, pc}
 802447e:	bf00      	nop
 8024480:	20030000 	.word	0x20030000

08024484 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 8024484:	b580      	push	{r7, lr}
 8024486:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8024488:	4b04      	ldr	r3, [pc, #16]	; (802449c <TL_CLI_SendCmd+0x18>)
 802448a:	689b      	ldr	r3, [r3, #8]
 802448c:	685b      	ldr	r3, [r3, #4]
 802448e:	220a      	movs	r2, #10
 8024490:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 8024492:	f002 f801 	bl	8026498 <HW_IPCC_CLI_SendCmd>

  return;
 8024496:	bf00      	nop
}
 8024498:	bd80      	pop	{r7, pc}
 802449a:	bf00      	nop
 802449c:	20030000 	.word	0x20030000

080244a0 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80244a0:	b580      	push	{r7, lr}
 80244a2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80244a4:	4b04      	ldr	r3, [pc, #16]	; (80244b8 <TL_THREAD_SendAck+0x18>)
 80244a6:	689b      	ldr	r3, [r3, #8]
 80244a8:	681b      	ldr	r3, [r3, #0]
 80244aa:	220d      	movs	r2, #13
 80244ac:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 80244ae:	f001 fffd 	bl	80264ac <HW_IPCC_THREAD_SendAck>

  return;
 80244b2:	bf00      	nop
}
 80244b4:	bd80      	pop	{r7, pc}
 80244b6:	bf00      	nop
 80244b8:	20030000 	.word	0x20030000

080244bc <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 80244bc:	b580      	push	{r7, lr}
 80244be:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80244c0:	4b04      	ldr	r3, [pc, #16]	; (80244d4 <TL_THREAD_CliSendAck+0x18>)
 80244c2:	689b      	ldr	r3, [r3, #8]
 80244c4:	681b      	ldr	r3, [r3, #0]
 80244c6:	220d      	movs	r2, #13
 80244c8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 80244ca:	f001 fffd 	bl	80264c8 <HW_IPCC_THREAD_CliSendAck>

  return;
 80244ce:	bf00      	nop
}
 80244d0:	bd80      	pop	{r7, pc}
 80244d2:	bf00      	nop
 80244d4:	20030000 	.word	0x20030000

080244d8 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 80244d8:	b580      	push	{r7, lr}
 80244da:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 80244dc:	4b03      	ldr	r3, [pc, #12]	; (80244ec <HW_IPCC_OT_CmdEvtNot+0x14>)
 80244de:	689b      	ldr	r3, [r3, #8]
 80244e0:	689b      	ldr	r3, [r3, #8]
 80244e2:	4618      	mov	r0, r3
 80244e4:	f001 fcb0 	bl	8025e48 <TL_OT_CmdEvtReceived>

  return;
 80244e8:	bf00      	nop
}
 80244ea:	bd80      	pop	{r7, pc}
 80244ec:	20030000 	.word	0x20030000

080244f0 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 80244f0:	b580      	push	{r7, lr}
 80244f2:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 80244f4:	4b03      	ldr	r3, [pc, #12]	; (8024504 <HW_IPCC_THREAD_EvtNot+0x14>)
 80244f6:	689b      	ldr	r3, [r3, #8]
 80244f8:	681b      	ldr	r3, [r3, #0]
 80244fa:	4618      	mov	r0, r3
 80244fc:	f001 fcae 	bl	8025e5c <TL_THREAD_NotReceived>

  return;
 8024500:	bf00      	nop
}
 8024502:	bd80      	pop	{r7, pc}
 8024504:	20030000 	.word	0x20030000

08024508 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8024508:	b580      	push	{r7, lr}
 802450a:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 802450c:	4b03      	ldr	r3, [pc, #12]	; (802451c <HW_IPCC_THREAD_CliEvtNot+0x14>)
 802450e:	689b      	ldr	r3, [r3, #8]
 8024510:	685b      	ldr	r3, [r3, #4]
 8024512:	4618      	mov	r0, r3
 8024514:	f001 fd50 	bl	8025fb8 <TL_THREAD_CliNotReceived>

  return;
 8024518:	bf00      	nop
}
 802451a:	bd80      	pop	{r7, pc}
 802451c:	20030000 	.word	0x20030000

08024520 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8024520:	b580      	push	{r7, lr}
 8024522:	b082      	sub	sp, #8
 8024524:	af00      	add	r7, sp, #0
 8024526:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8024528:	4817      	ldr	r0, [pc, #92]	; (8024588 <TL_MM_Init+0x68>)
 802452a:	f7ff fcf3 	bl	8023f14 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 802452e:	4817      	ldr	r0, [pc, #92]	; (802458c <TL_MM_Init+0x6c>)
 8024530:	f7ff fcf0 	bl	8023f14 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8024534:	4b16      	ldr	r3, [pc, #88]	; (8024590 <TL_MM_Init+0x70>)
 8024536:	691b      	ldr	r3, [r3, #16]
 8024538:	4a16      	ldr	r2, [pc, #88]	; (8024594 <TL_MM_Init+0x74>)
 802453a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 802453c:	4b15      	ldr	r3, [pc, #84]	; (8024594 <TL_MM_Init+0x74>)
 802453e:	681b      	ldr	r3, [r3, #0]
 8024540:	687a      	ldr	r2, [r7, #4]
 8024542:	6892      	ldr	r2, [r2, #8]
 8024544:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8024546:	4b13      	ldr	r3, [pc, #76]	; (8024594 <TL_MM_Init+0x74>)
 8024548:	681b      	ldr	r3, [r3, #0]
 802454a:	687a      	ldr	r2, [r7, #4]
 802454c:	68d2      	ldr	r2, [r2, #12]
 802454e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8024550:	4b10      	ldr	r3, [pc, #64]	; (8024594 <TL_MM_Init+0x74>)
 8024552:	681b      	ldr	r3, [r3, #0]
 8024554:	4a0c      	ldr	r2, [pc, #48]	; (8024588 <TL_MM_Init+0x68>)
 8024556:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8024558:	4b0e      	ldr	r3, [pc, #56]	; (8024594 <TL_MM_Init+0x74>)
 802455a:	681b      	ldr	r3, [r3, #0]
 802455c:	687a      	ldr	r2, [r7, #4]
 802455e:	6812      	ldr	r2, [r2, #0]
 8024560:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8024562:	4b0c      	ldr	r3, [pc, #48]	; (8024594 <TL_MM_Init+0x74>)
 8024564:	681b      	ldr	r3, [r3, #0]
 8024566:	687a      	ldr	r2, [r7, #4]
 8024568:	6852      	ldr	r2, [r2, #4]
 802456a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 802456c:	4b09      	ldr	r3, [pc, #36]	; (8024594 <TL_MM_Init+0x74>)
 802456e:	681b      	ldr	r3, [r3, #0]
 8024570:	687a      	ldr	r2, [r7, #4]
 8024572:	6912      	ldr	r2, [r2, #16]
 8024574:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8024576:	4b07      	ldr	r3, [pc, #28]	; (8024594 <TL_MM_Init+0x74>)
 8024578:	681b      	ldr	r3, [r3, #0]
 802457a:	687a      	ldr	r2, [r7, #4]
 802457c:	6952      	ldr	r2, [r2, #20]
 802457e:	619a      	str	r2, [r3, #24]

  return;
 8024580:	bf00      	nop
}
 8024582:	3708      	adds	r7, #8
 8024584:	46bd      	mov	sp, r7
 8024586:	bd80      	pop	{r7, pc}
 8024588:	200300a8 	.word	0x200300a8
 802458c:	200274f0 	.word	0x200274f0
 8024590:	20030000 	.word	0x20030000
 8024594:	20027508 	.word	0x20027508

08024598 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8024598:	b580      	push	{r7, lr}
 802459a:	b082      	sub	sp, #8
 802459c:	af00      	add	r7, sp, #0
 802459e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80245a0:	6879      	ldr	r1, [r7, #4]
 80245a2:	4805      	ldr	r0, [pc, #20]	; (80245b8 <TL_MM_EvtDone+0x20>)
 80245a4:	f7ff fd0a 	bl	8023fbc <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80245a8:	4804      	ldr	r0, [pc, #16]	; (80245bc <TL_MM_EvtDone+0x24>)
 80245aa:	f001 ffbf 	bl	802652c <HW_IPCC_MM_SendFreeBuf>

  return;
 80245ae:	bf00      	nop
}
 80245b0:	3708      	adds	r7, #8
 80245b2:	46bd      	mov	sp, r7
 80245b4:	bd80      	pop	{r7, pc}
 80245b6:	bf00      	nop
 80245b8:	200274f0 	.word	0x200274f0
 80245bc:	080245c1 	.word	0x080245c1

080245c0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80245c0:	b580      	push	{r7, lr}
 80245c2:	b082      	sub	sp, #8
 80245c4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80245c6:	e00c      	b.n	80245e2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80245c8:	1d3b      	adds	r3, r7, #4
 80245ca:	4619      	mov	r1, r3
 80245cc:	480a      	ldr	r0, [pc, #40]	; (80245f8 <SendFreeBuf+0x38>)
 80245ce:	f7ff fd38 	bl	8024042 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80245d2:	4b0a      	ldr	r3, [pc, #40]	; (80245fc <SendFreeBuf+0x3c>)
 80245d4:	691b      	ldr	r3, [r3, #16]
 80245d6:	691b      	ldr	r3, [r3, #16]
 80245d8:	687a      	ldr	r2, [r7, #4]
 80245da:	4611      	mov	r1, r2
 80245dc:	4618      	mov	r0, r3
 80245de:	f7ff fced 	bl	8023fbc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80245e2:	4805      	ldr	r0, [pc, #20]	; (80245f8 <SendFreeBuf+0x38>)
 80245e4:	f7ff fca6 	bl	8023f34 <LST_is_empty>
 80245e8:	4603      	mov	r3, r0
 80245ea:	2b00      	cmp	r3, #0
 80245ec:	d0ec      	beq.n	80245c8 <SendFreeBuf+0x8>
  }

  return;
 80245ee:	bf00      	nop
}
 80245f0:	3708      	adds	r7, #8
 80245f2:	46bd      	mov	sp, r7
 80245f4:	bd80      	pop	{r7, pc}
 80245f6:	bf00      	nop
 80245f8:	200274f0 	.word	0x200274f0
 80245fc:	20030000 	.word	0x20030000

08024600 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8024600:	b580      	push	{r7, lr}
 8024602:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8024604:	4805      	ldr	r0, [pc, #20]	; (802461c <TL_TRACES_Init+0x1c>)
 8024606:	f7ff fc85 	bl	8023f14 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 802460a:	4b05      	ldr	r3, [pc, #20]	; (8024620 <TL_TRACES_Init+0x20>)
 802460c:	695b      	ldr	r3, [r3, #20]
 802460e:	4a03      	ldr	r2, [pc, #12]	; (802461c <TL_TRACES_Init+0x1c>)
 8024610:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8024612:	f001 ffc1 	bl	8026598 <HW_IPCC_TRACES_Init>

  return;
 8024616:	bf00      	nop
}
 8024618:	bd80      	pop	{r7, pc}
 802461a:	bf00      	nop
 802461c:	200300b0 	.word	0x200300b0
 8024620:	20030000 	.word	0x20030000

08024624 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8024624:	b580      	push	{r7, lr}
 8024626:	b082      	sub	sp, #8
 8024628:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 802462a:	e008      	b.n	802463e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 802462c:	1d3b      	adds	r3, r7, #4
 802462e:	4619      	mov	r1, r3
 8024630:	4808      	ldr	r0, [pc, #32]	; (8024654 <HW_IPCC_TRACES_EvtNot+0x30>)
 8024632:	f7ff fd06 	bl	8024042 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8024636:	687b      	ldr	r3, [r7, #4]
 8024638:	4618      	mov	r0, r3
 802463a:	f7ec fded 	bl	8011218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 802463e:	4805      	ldr	r0, [pc, #20]	; (8024654 <HW_IPCC_TRACES_EvtNot+0x30>)
 8024640:	f7ff fc78 	bl	8023f34 <LST_is_empty>
 8024644:	4603      	mov	r3, r0
 8024646:	2b00      	cmp	r3, #0
 8024648:	d0f0      	beq.n	802462c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 802464a:	bf00      	nop
}
 802464c:	3708      	adds	r7, #8
 802464e:	46bd      	mov	sp, r7
 8024650:	bd80      	pop	{r7, pc}
 8024652:	bf00      	nop
 8024654:	200300b0 	.word	0x200300b0

08024658 <__NVIC_SystemReset>:
{
 8024658:	b480      	push	{r7}
 802465a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 802465c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8024660:	4b05      	ldr	r3, [pc, #20]	; (8024678 <__NVIC_SystemReset+0x20>)
 8024662:	68db      	ldr	r3, [r3, #12]
 8024664:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8024668:	4903      	ldr	r1, [pc, #12]	; (8024678 <__NVIC_SystemReset+0x20>)
 802466a:	4b04      	ldr	r3, [pc, #16]	; (802467c <__NVIC_SystemReset+0x24>)
 802466c:	4313      	orrs	r3, r2
 802466e:	60cb      	str	r3, [r1, #12]
 8024670:	f3bf 8f4f 	dsb	sy
    __NOP();
 8024674:	bf00      	nop
 8024676:	e7fd      	b.n	8024674 <__NVIC_SystemReset+0x1c>
 8024678:	e000ed00 	.word	0xe000ed00
 802467c:	05fa0004 	.word	0x05fa0004

08024680 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8024680:	b480      	push	{r7}
 8024682:	af00      	add	r7, sp, #0
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8024684:	4b07      	ldr	r3, [pc, #28]	; (80246a4 <LL_FLASH_IsActiveFlag_OperationSuspended+0x24>)
 8024686:	691b      	ldr	r3, [r3, #16]
 8024688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802468c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8024690:	d101      	bne.n	8024696 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8024692:	2301      	movs	r3, #1
 8024694:	e000      	b.n	8024698 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8024696:	2300      	movs	r3, #0
}
 8024698:	4618      	mov	r0, r3
 802469a:	46bd      	mov	sp, r7
 802469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246a0:	4770      	bx	lr
 80246a2:	bf00      	nop
 80246a4:	58004000 	.word	0x58004000

080246a8 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80246a8:	b480      	push	{r7}
 80246aa:	b083      	sub	sp, #12
 80246ac:	af00      	add	r7, sp, #0
 80246ae:	6078      	str	r0, [r7, #4]
 80246b0:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80246b2:	687b      	ldr	r3, [r7, #4]
 80246b4:	683a      	ldr	r2, [r7, #0]
 80246b6:	3220      	adds	r2, #32
 80246b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80246bc:	4a05      	ldr	r2, [pc, #20]	; (80246d4 <LL_HSEM_1StepLock+0x2c>)
 80246be:	4293      	cmp	r3, r2
 80246c0:	d001      	beq.n	80246c6 <LL_HSEM_1StepLock+0x1e>
 80246c2:	2301      	movs	r3, #1
 80246c4:	e000      	b.n	80246c8 <LL_HSEM_1StepLock+0x20>
 80246c6:	2300      	movs	r3, #0
}
 80246c8:	4618      	mov	r0, r3
 80246ca:	370c      	adds	r7, #12
 80246cc:	46bd      	mov	sp, r7
 80246ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246d2:	4770      	bx	lr
 80246d4:	80000400 	.word	0x80000400

080246d8 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 80246d8:	b480      	push	{r7}
 80246da:	b085      	sub	sp, #20
 80246dc:	af00      	add	r7, sp, #0
 80246de:	60f8      	str	r0, [r7, #12]
 80246e0:	60b9      	str	r1, [r7, #8]
 80246e2:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 80246e4:	687b      	ldr	r3, [r7, #4]
 80246e6:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 80246ea:	68fb      	ldr	r3, [r7, #12]
 80246ec:	68ba      	ldr	r2, [r7, #8]
 80246ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80246f2:	bf00      	nop
 80246f4:	3714      	adds	r7, #20
 80246f6:	46bd      	mov	sp, r7
 80246f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246fc:	4770      	bx	lr
	...

08024700 <APP_THREAD_Init>:
#endif
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init(void) {
 8024700:	b580      	push	{r7, lr}
 8024702:	b082      	sub	sp, #8
 8024704:	af00      	add	r7, sp, #0
#ifdef OTA_ENABLED
	  /**
	   * This is a safe clear in case the engi bytes are not all written
	   * The error flag should be cleared before moving forward
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8024706:	4b15      	ldr	r3, [pc, #84]	; (802475c <APP_THREAD_Init+0x5c>)
 8024708:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 802470c:	611a      	str	r2, [r3, #16]

	  APP_DBG("Delete_Sectors");
 802470e:	4a14      	ldr	r2, [pc, #80]	; (8024760 <APP_THREAD_Init+0x60>)
 8024710:	2101      	movs	r1, #1
 8024712:	2000      	movs	r0, #0
 8024714:	f7f0 fe86 	bl	8015424 <logApplication>
	  Delete_Sectors();
 8024718:	f000 faea 	bl	8024cf0 <Delete_Sectors>
	/* USER CODE END APP_THREAD_INIT_1 */

	SHCI_CmdStatus_t ThreadInitStatus;

	/* Check the compatibility with the Coprocessor Wireless Firmware loaded */
	APP_THREAD_CheckWirelessFirmwareInfo();
 802471c:	f000 fa50 	bl	8024bc0 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

	/* Register cmdbuffer */
	APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8024720:	4810      	ldr	r0, [pc, #64]	; (8024764 <APP_THREAD_Init+0x64>)
 8024722:	f001 fb39 	bl	8025d98 <APP_THREAD_RegisterCmdBuffer>

	/**
	 * Do not allow standby in the application
	 */
	UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8024726:	2101      	movs	r1, #1
 8024728:	2002      	movs	r0, #2
 802472a:	f001 ff5d 	bl	80265e8 <UTIL_LPM_SetOffMode>

	/* Init config buffer and call TL_THREAD_Init */
	APP_THREAD_TL_THREAD_INIT();
 802472e:	f001 fc2b 	bl	8025f88 <APP_THREAD_TL_THREAD_INIT>

	/* Configure UART for sending CLI command from M4 */
	APP_THREAD_Init_UART_CLI();
 8024732:	f001 fc17 	bl	8025f64 <APP_THREAD_Init_UART_CLI>

	/* Send Thread start system cmd to M0 */
	ThreadInitStatus = SHCI_C2_THREAD_Init();
 8024736:	f7ff fa03 	bl	8023b40 <SHCI_C2_THREAD_Init>
 802473a:	4603      	mov	r3, r0
 802473c:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN APP_THREAD_INIT_TIMER */

	/* USER CODE END APP_THREAD_INIT_TIMER */

	/* Create the different FreeRTOS tasks requested to run this Thread application*/
	OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL, &ThreadMsgM0ToM4Process_attr);
 802473e:	4a0a      	ldr	r2, [pc, #40]	; (8024768 <APP_THREAD_Init+0x68>)
 8024740:	2100      	movs	r1, #0
 8024742:	480a      	ldr	r0, [pc, #40]	; (802476c <APP_THREAD_Init+0x6c>)
 8024744:	f7f9 fe34 	bl	801e3b0 <osThreadNew>
 8024748:	4602      	mov	r2, r0
 802474a:	4b09      	ldr	r3, [pc, #36]	; (8024770 <APP_THREAD_Init+0x70>)
 802474c:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

	/* USER CODE END APP_THREAD_INIT_FREERTOS */

	/* Configure the Thread device at start */
	APP_THREAD_DeviceConfig();
 802474e:	f000 f897 	bl	8024880 <APP_THREAD_DeviceConfig>

	/* USER CODE BEGIN APP_THREAD_INIT_2 */

	/* USER CODE END APP_THREAD_INIT_2 */
}
 8024752:	bf00      	nop
 8024754:	3708      	adds	r7, #8
 8024756:	46bd      	mov	sp, r7
 8024758:	bd80      	pop	{r7, pc}
 802475a:	bf00      	nop
 802475c:	58004000 	.word	0x58004000
 8024760:	080280c0 	.word	0x080280c0
 8024764:	20030838 	.word	0x20030838
 8024768:	08028c7c 	.word	0x08028c7c
 802476c:	08024c7d 	.word	0x08024c7d
 8024770:	20027620 	.word	0x20027620

08024774 <APP_THREAD_Error>:
 * @brief  Trace the error or the warning reported.
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode) {
 8024774:	b580      	push	{r7, lr}
 8024776:	b082      	sub	sp, #8
 8024778:	af00      	add	r7, sp, #0
 802477a:	6078      	str	r0, [r7, #4]
 802477c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN APP_THREAD_Error_1 */

	/* USER CODE END APP_THREAD_Error_1 */
	switch (ErrId) {
 802477e:	687b      	ldr	r3, [r7, #4]
 8024780:	2b1a      	cmp	r3, #26
 8024782:	d861      	bhi.n	8024848 <APP_THREAD_Error+0xd4>
 8024784:	a201      	add	r2, pc, #4	; (adr r2, 802478c <APP_THREAD_Error+0x18>)
 8024786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802478a:	bf00      	nop
 802478c:	080247f9 	.word	0x080247f9
 8024790:	08024803 	.word	0x08024803
 8024794:	0802480d 	.word	0x0802480d
 8024798:	08024817 	.word	0x08024817
 802479c:	08024821 	.word	0x08024821
 80247a0:	0802482b 	.word	0x0802482b
 80247a4:	08024835 	.word	0x08024835
 80247a8:	08024849 	.word	0x08024849
 80247ac:	08024849 	.word	0x08024849
 80247b0:	08024849 	.word	0x08024849
 80247b4:	08024849 	.word	0x08024849
 80247b8:	08024849 	.word	0x08024849
 80247bc:	08024849 	.word	0x08024849
 80247c0:	08024849 	.word	0x08024849
 80247c4:	08024849 	.word	0x08024849
 80247c8:	08024849 	.word	0x08024849
 80247cc:	08024849 	.word	0x08024849
 80247d0:	08024849 	.word	0x08024849
 80247d4:	08024849 	.word	0x08024849
 80247d8:	08024849 	.word	0x08024849
 80247dc:	08024849 	.word	0x08024849
 80247e0:	08024849 	.word	0x08024849
 80247e4:	08024849 	.word	0x08024849
 80247e8:	08024849 	.word	0x08024849
 80247ec:	08024849 	.word	0x08024849
 80247f0:	08024849 	.word	0x08024849
 80247f4:	0802483f 	.word	0x0802483f
	case ERR_REC_MULTI_MSG_FROM_M0:
		APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 80247f8:	6839      	ldr	r1, [r7, #0]
 80247fa:	4818      	ldr	r0, [pc, #96]	; (802485c <APP_THREAD_Error+0xe8>)
 80247fc:	f000 f9d4 	bl	8024ba8 <APP_THREAD_TraceError>
		break;
 8024800:	e027      	b.n	8024852 <APP_THREAD_Error+0xde>
	case ERR_THREAD_SET_STATE_CB:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ", ErrCode);
 8024802:	6839      	ldr	r1, [r7, #0]
 8024804:	4816      	ldr	r0, [pc, #88]	; (8024860 <APP_THREAD_Error+0xec>)
 8024806:	f000 f9cf 	bl	8024ba8 <APP_THREAD_TraceError>
		break;
 802480a:	e022      	b.n	8024852 <APP_THREAD_Error+0xde>
	case ERR_THREAD_SET_CHANNEL:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ", ErrCode);
 802480c:	6839      	ldr	r1, [r7, #0]
 802480e:	4815      	ldr	r0, [pc, #84]	; (8024864 <APP_THREAD_Error+0xf0>)
 8024810:	f000 f9ca 	bl	8024ba8 <APP_THREAD_TraceError>
		break;
 8024814:	e01d      	b.n	8024852 <APP_THREAD_Error+0xde>
	case ERR_THREAD_SET_PANID:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ", ErrCode);
 8024816:	6839      	ldr	r1, [r7, #0]
 8024818:	4813      	ldr	r0, [pc, #76]	; (8024868 <APP_THREAD_Error+0xf4>)
 802481a:	f000 f9c5 	bl	8024ba8 <APP_THREAD_TraceError>
		break;
 802481e:	e018      	b.n	8024852 <APP_THREAD_Error+0xde>
	case ERR_THREAD_IPV6_ENABLE:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ", ErrCode);
 8024820:	6839      	ldr	r1, [r7, #0]
 8024822:	4812      	ldr	r0, [pc, #72]	; (802486c <APP_THREAD_Error+0xf8>)
 8024824:	f000 f9c0 	bl	8024ba8 <APP_THREAD_TraceError>
		break;
 8024828:	e013      	b.n	8024852 <APP_THREAD_Error+0xde>
	case ERR_THREAD_START:
		APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 802482a:	6839      	ldr	r1, [r7, #0]
 802482c:	4810      	ldr	r0, [pc, #64]	; (8024870 <APP_THREAD_Error+0xfc>)
 802482e:	f000 f9bb 	bl	8024ba8 <APP_THREAD_TraceError>
		break;
 8024832:	e00e      	b.n	8024852 <APP_THREAD_Error+0xde>
	case ERR_THREAD_ERASE_PERSISTENT_INFO:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ", ErrCode);
 8024834:	6839      	ldr	r1, [r7, #0]
 8024836:	480f      	ldr	r0, [pc, #60]	; (8024874 <APP_THREAD_Error+0x100>)
 8024838:	f000 f9b6 	bl	8024ba8 <APP_THREAD_TraceError>
		break;
 802483c:	e009      	b.n	8024852 <APP_THREAD_Error+0xde>
	case ERR_THREAD_CHECK_WIRELESS:
		APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ", ErrCode);
 802483e:	6839      	ldr	r1, [r7, #0]
 8024840:	480d      	ldr	r0, [pc, #52]	; (8024878 <APP_THREAD_Error+0x104>)
 8024842:	f000 f9b1 	bl	8024ba8 <APP_THREAD_TraceError>
		break;
 8024846:	e004      	b.n	8024852 <APP_THREAD_Error+0xde>
		/* USER CODE BEGIN APP_THREAD_Error_2 */

		/* USER CODE END APP_THREAD_Error_2 */
	default:
		APP_THREAD_TraceError("ERROR Unknown ", 0);
 8024848:	2100      	movs	r1, #0
 802484a:	480c      	ldr	r0, [pc, #48]	; (802487c <APP_THREAD_Error+0x108>)
 802484c:	f000 f9ac 	bl	8024ba8 <APP_THREAD_TraceError>
		break;
 8024850:	bf00      	nop
	}
}
 8024852:	bf00      	nop
 8024854:	3708      	adds	r7, #8
 8024856:	46bd      	mov	sp, r7
 8024858:	bd80      	pop	{r7, pc}
 802485a:	bf00      	nop
 802485c:	080280d0 	.word	0x080280d0
 8024860:	080280f4 	.word	0x080280f4
 8024864:	08028118 	.word	0x08028118
 8024868:	08028138 	.word	0x08028138
 802486c:	08028158 	.word	0x08028158
 8024870:	08028178 	.word	0x08028178
 8024874:	08028194 	.word	0x08028194
 8024878:	080281c0 	.word	0x080281c0
 802487c:	080281e4 	.word	0x080281e4

08024880 <APP_THREAD_DeviceConfig>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void) {
 8024880:	b590      	push	{r4, r7, lr}
 8024882:	b083      	sub	sp, #12
 8024884:	af00      	add	r7, sp, #0
	otError error;
	error = otInstanceErasePersistentInfo(NULL);
 8024886:	2000      	movs	r0, #0
 8024888:	f7fe fd4a 	bl	8023320 <otInstanceErasePersistentInfo>
 802488c:	4603      	mov	r3, r0
 802488e:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024890:	79fb      	ldrb	r3, [r7, #7]
 8024892:	2b00      	cmp	r3, #0
 8024894:	d004      	beq.n	80248a0 <APP_THREAD_DeviceConfig+0x20>
		APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO, error);
 8024896:	79fb      	ldrb	r3, [r7, #7]
 8024898:	4619      	mov	r1, r3
 802489a:	2006      	movs	r0, #6
 802489c:	f7ff ff6a 	bl	8024774 <APP_THREAD_Error>
	}
	otInstanceFinalize(NULL);
 80248a0:	2000      	movs	r0, #0
 80248a2:	f7fe fce0 	bl	8023266 <otInstanceFinalize>
	otInstanceInitSingle();
 80248a6:	f7fe fcb7 	bl	8023218 <otInstanceInitSingle>
	error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 80248aa:	2200      	movs	r2, #0
 80248ac:	4981      	ldr	r1, [pc, #516]	; (8024ab4 <APP_THREAD_DeviceConfig+0x234>)
 80248ae:	2000      	movs	r0, #0
 80248b0:	f7fe fd00 	bl	80232b4 <otSetStateChangedCallback>
 80248b4:	4603      	mov	r3, r0
 80248b6:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80248b8:	79fb      	ldrb	r3, [r7, #7]
 80248ba:	2b00      	cmp	r3, #0
 80248bc:	d004      	beq.n	80248c8 <APP_THREAD_DeviceConfig+0x48>
		APP_THREAD_Error(ERR_THREAD_SET_STATE_CB, error);
 80248be:	79fb      	ldrb	r3, [r7, #7]
 80248c0:	4619      	mov	r1, r3
 80248c2:	2001      	movs	r0, #1
 80248c4:	f7ff ff56 	bl	8024774 <APP_THREAD_Error>
	}
	error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 80248c8:	2117      	movs	r1, #23
 80248ca:	2000      	movs	r0, #0
 80248cc:	f7fe fde9 	bl	80234a2 <otLinkSetChannel>
 80248d0:	4603      	mov	r3, r0
 80248d2:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80248d4:	79fb      	ldrb	r3, [r7, #7]
 80248d6:	2b00      	cmp	r3, #0
 80248d8:	d004      	beq.n	80248e4 <APP_THREAD_DeviceConfig+0x64>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80248da:	79fb      	ldrb	r3, [r7, #7]
 80248dc:	4619      	mov	r1, r3
 80248de:	2002      	movs	r0, #2
 80248e0:	f7ff ff48 	bl	8024774 <APP_THREAD_Error>
	}
	error = otLinkSetPanId(NULL, C_PANID);
 80248e4:	f241 2134 	movw	r1, #4660	; 0x1234
 80248e8:	2000      	movs	r0, #0
 80248ea:	f7fe fe0a 	bl	8023502 <otLinkSetPanId>
 80248ee:	4603      	mov	r3, r0
 80248f0:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80248f2:	79fb      	ldrb	r3, [r7, #7]
 80248f4:	2b00      	cmp	r3, #0
 80248f6:	d004      	beq.n	8024902 <APP_THREAD_DeviceConfig+0x82>
		APP_THREAD_Error(ERR_THREAD_SET_PANID, error);
 80248f8:	79fb      	ldrb	r3, [r7, #7]
 80248fa:	4619      	mov	r1, r3
 80248fc:	2003      	movs	r0, #3
 80248fe:	f7ff ff39 	bl	8024774 <APP_THREAD_Error>
	}
	error = otIp6SetEnabled(NULL, true);
 8024902:	2101      	movs	r1, #1
 8024904:	2000      	movs	r0, #0
 8024906:	f7fe fd34 	bl	8023372 <otIp6SetEnabled>
 802490a:	4603      	mov	r3, r0
 802490c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 802490e:	79fb      	ldrb	r3, [r7, #7]
 8024910:	2b00      	cmp	r3, #0
 8024912:	d004      	beq.n	802491e <APP_THREAD_DeviceConfig+0x9e>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8024914:	79fb      	ldrb	r3, [r7, #7]
 8024916:	4619      	mov	r1, r3
 8024918:	2004      	movs	r0, #4
 802491a:	f7ff ff2b 	bl	8024774 <APP_THREAD_Error>
	}
	error = otThreadSetEnabled(NULL, true);
 802491e:	2101      	movs	r1, #1
 8024920:	2000      	movs	r0, #0
 8024922:	f7ff fbab 	bl	802407c <otThreadSetEnabled>
 8024926:	4603      	mov	r3, r0
 8024928:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 802492a:	79fb      	ldrb	r3, [r7, #7]
 802492c:	2b00      	cmp	r3, #0
 802492e:	d004      	beq.n	802493a <APP_THREAD_DeviceConfig+0xba>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8024930:	79fb      	ldrb	r3, [r7, #7]
 8024932:	4619      	mov	r1, r3
 8024934:	2005      	movs	r0, #5
 8024936:	f7ff ff1d 	bl	8024774 <APP_THREAD_Error>
	}

	/* USER CODE BEGIN DEVICECONFIG */
	error = otThreadSetEnabled(NULL, false);
 802493a:	2100      	movs	r1, #0
 802493c:	2000      	movs	r0, #0
 802493e:	f7ff fb9d 	bl	802407c <otThreadSetEnabled>
 8024942:	4603      	mov	r3, r0
 8024944:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024946:	79fb      	ldrb	r3, [r7, #7]
 8024948:	2b00      	cmp	r3, #0
 802494a:	d004      	beq.n	8024956 <APP_THREAD_DeviceConfig+0xd6>
		APP_THREAD_Error(ERR_THREAD_START, error);
 802494c:	79fb      	ldrb	r3, [r7, #7]
 802494e:	4619      	mov	r1, r3
 8024950:	2005      	movs	r0, #5
 8024952:	f7ff ff0f 	bl	8024774 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, false);
 8024956:	2100      	movs	r1, #0
 8024958:	2000      	movs	r0, #0
 802495a:	f7fe fd0a 	bl	8023372 <otIp6SetEnabled>
 802495e:	4603      	mov	r3, r0
 8024960:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024962:	79fb      	ldrb	r3, [r7, #7]
 8024964:	2b00      	cmp	r3, #0
 8024966:	d004      	beq.n	8024972 <APP_THREAD_DeviceConfig+0xf2>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8024968:	79fb      	ldrb	r3, [r7, #7]
 802496a:	4619      	mov	r1, r3
 802496c:	2004      	movs	r0, #4
 802496e:	f7ff ff01 	bl	8024774 <APP_THREAD_Error>
	}

	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8024972:	2106      	movs	r1, #6
 8024974:	2000      	movs	r0, #0
 8024976:	f7ff f893 	bl	8023aa0 <otPlatRadioSetTransmitPower>
 802497a:	4603      	mov	r3, r0
 802497c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 802497e:	79fb      	ldrb	r3, [r7, #7]
 8024980:	2b00      	cmp	r3, #0
 8024982:	d004      	beq.n	802498e <APP_THREAD_DeviceConfig+0x10e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8024984:	79fb      	ldrb	r3, [r7, #7]
 8024986:	4619      	mov	r1, r3
 8024988:	2002      	movs	r0, #2
 802498a:	f7ff fef3 	bl	8024774 <APP_THREAD_Error>
	}

	otChildSupervisionSetCheckTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 802498e:	2103      	movs	r1, #3
 8024990:	2000      	movs	r0, #0
 8024992:	f7fe f8d7 	bl	8022b44 <otChildSupervisionSetCheckTimeout>
	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);
 8024996:	2102      	movs	r1, #2
 8024998:	2000      	movs	r0, #0
 802499a:	f7fe f8a4 	bl	8022ae6 <otChildSupervisionSetInterval>

//   error = otIp6AddressFromString("ff12::1", &multicastAddr);
//   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

	error = otThreadSetMasterKey(NULL, &masterKey);
 802499e:	4946      	ldr	r1, [pc, #280]	; (8024ab8 <APP_THREAD_DeviceConfig+0x238>)
 80249a0:	2000      	movs	r0, #0
 80249a2:	f7ff fbca 	bl	802413a <otThreadSetMasterKey>
 80249a6:	4603      	mov	r3, r0
 80249a8:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80249aa:	79fb      	ldrb	r3, [r7, #7]
 80249ac:	2b00      	cmp	r3, #0
 80249ae:	d004      	beq.n	80249ba <APP_THREAD_DeviceConfig+0x13a>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80249b0:	79fb      	ldrb	r3, [r7, #7]
 80249b2:	4619      	mov	r1, r3
 80249b4:	2002      	movs	r0, #2
 80249b6:	f7ff fedd 	bl	8024774 <APP_THREAD_Error>
	}

	error = otThreadSetNetworkName(NULL, networkName);
 80249ba:	4940      	ldr	r1, [pc, #256]	; (8024abc <APP_THREAD_DeviceConfig+0x23c>)
 80249bc:	2000      	movs	r0, #0
 80249be:	f7ff fc13 	bl	80241e8 <otThreadSetNetworkName>
 80249c2:	4603      	mov	r3, r0
 80249c4:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80249c6:	79fb      	ldrb	r3, [r7, #7]
 80249c8:	2b00      	cmp	r3, #0
 80249ca:	d004      	beq.n	80249d6 <APP_THREAD_DeviceConfig+0x156>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80249cc:	79fb      	ldrb	r3, [r7, #7]
 80249ce:	4619      	mov	r1, r3
 80249d0:	2002      	movs	r0, #2
 80249d2:	f7ff fecf 	bl	8024774 <APP_THREAD_Error>
	}
	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 80249d6:	493a      	ldr	r1, [pc, #232]	; (8024ac0 <APP_THREAD_DeviceConfig+0x240>)
 80249d8:	2000      	movs	r0, #0
 80249da:	f7ff fb7f 	bl	80240dc <otThreadSetExtendedPanId>
 80249de:	4603      	mov	r3, r0
 80249e0:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80249e2:	79fb      	ldrb	r3, [r7, #7]
 80249e4:	2b00      	cmp	r3, #0
 80249e6:	d004      	beq.n	80249f2 <APP_THREAD_DeviceConfig+0x172>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80249e8:	79fb      	ldrb	r3, [r7, #7]
 80249ea:	4619      	mov	r1, r3
 80249ec:	2002      	movs	r0, #2
 80249ee:	f7ff fec1 	bl	8024774 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, true);
 80249f2:	2101      	movs	r1, #1
 80249f4:	2000      	movs	r0, #0
 80249f6:	f7fe fcbc 	bl	8023372 <otIp6SetEnabled>
 80249fa:	4603      	mov	r3, r0
 80249fc:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80249fe:	79fb      	ldrb	r3, [r7, #7]
 8024a00:	2b00      	cmp	r3, #0
 8024a02:	d004      	beq.n	8024a0e <APP_THREAD_DeviceConfig+0x18e>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8024a04:	79fb      	ldrb	r3, [r7, #7]
 8024a06:	4619      	mov	r1, r3
 8024a08:	2004      	movs	r0, #4
 8024a0a:	f7ff feb3 	bl	8024774 <APP_THREAD_Error>
	}

	error = otThreadSetEnabled(NULL, true);
 8024a0e:	2101      	movs	r1, #1
 8024a10:	2000      	movs	r0, #0
 8024a12:	f7ff fb33 	bl	802407c <otThreadSetEnabled>
 8024a16:	4603      	mov	r3, r0
 8024a18:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8024a1a:	79fb      	ldrb	r3, [r7, #7]
 8024a1c:	2b00      	cmp	r3, #0
 8024a1e:	d004      	beq.n	8024a2a <APP_THREAD_DeviceConfig+0x1aa>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8024a20:	79fb      	ldrb	r3, [r7, #7]
 8024a22:	4619      	mov	r1, r3
 8024a24:	2005      	movs	r0, #5
 8024a26:	f7ff fea5 	bl	8024774 <APP_THREAD_Error>
	}

	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8024a2a:	f241 6133 	movw	r1, #5683	; 0x1633
 8024a2e:	2000      	movs	r0, #0
 8024a30:	f7fe fb60 	bl	80230f4 <otCoapStart>
 8024a34:	4603      	mov	r3, r0
 8024a36:	71fb      	strb	r3, [r7, #7]
	//  error = otCoapAddResource(NULL, &OT_Light_Ressource);
	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8024a38:	4922      	ldr	r1, [pc, #136]	; (8024ac4 <APP_THREAD_DeviceConfig+0x244>)
 8024a3a:	2000      	movs	r0, #0
 8024a3c:	f7fe fb8a 	bl	8023154 <otCoapAddResource>
 8024a40:	4603      	mov	r3, r0
 8024a42:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 8024a44:	4920      	ldr	r1, [pc, #128]	; (8024ac8 <APP_THREAD_DeviceConfig+0x248>)
 8024a46:	2000      	movs	r0, #0
 8024a48:	f7fe fb84 	bl	8023154 <otCoapAddResource>
 8024a4c:	4603      	mov	r3, r0
 8024a4e:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 8024a50:	491e      	ldr	r1, [pc, #120]	; (8024acc <APP_THREAD_DeviceConfig+0x24c>)
 8024a52:	2000      	movs	r0, #0
 8024a54:	f7fe fb7e 	bl	8023154 <otCoapAddResource>
 8024a58:	4603      	mov	r3, r0
 8024a5a:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);
 8024a5c:	491c      	ldr	r1, [pc, #112]	; (8024ad0 <APP_THREAD_DeviceConfig+0x250>)
 8024a5e:	2000      	movs	r0, #0
 8024a60:	f7fe fb78 	bl	8023154 <otCoapAddResource>
 8024a64:	4603      	mov	r3, r0
 8024a66:	71fb      	strb	r3, [r7, #7]
#ifdef OTA_ENABLED
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaProvisioning);
 8024a68:	491a      	ldr	r1, [pc, #104]	; (8024ad4 <APP_THREAD_DeviceConfig+0x254>)
 8024a6a:	2000      	movs	r0, #0
 8024a6c:	f7fe fb72 	bl	8023154 <otCoapAddResource>
 8024a70:	4603      	mov	r3, r0
 8024a72:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaParameters);
 8024a74:	4918      	ldr	r1, [pc, #96]	; (8024ad8 <APP_THREAD_DeviceConfig+0x258>)
 8024a76:	2000      	movs	r0, #0
 8024a78:	f7fe fb6c 	bl	8023154 <otCoapAddResource>
 8024a7c:	4603      	mov	r3, r0
 8024a7e:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaSend);
 8024a80:	4916      	ldr	r1, [pc, #88]	; (8024adc <APP_THREAD_DeviceConfig+0x25c>)
 8024a82:	2000      	movs	r0, #0
 8024a84:	f7fe fb66 	bl	8023154 <otCoapAddResource>
 8024a88:	4603      	mov	r3, r0
 8024a8a:	71fb      	strb	r3, [r7, #7]
#ifndef DONGLE_CODE
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
#endif
	// set default multicast address for border router
//    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
	otIp6AddressFromString("ff03::1", &multicastAddr);
 8024a8c:	4914      	ldr	r1, [pc, #80]	; (8024ae0 <APP_THREAD_DeviceConfig+0x260>)
 8024a8e:	4815      	ldr	r0, [pc, #84]	; (8024ae4 <APP_THREAD_DeviceConfig+0x264>)
 8024a90:	f7fe fcd5 	bl	802343e <otIp6AddressFromString>
	memcpy(&borderRouter.ipv6, &multicastAddr, sizeof(multicastAddr));
 8024a94:	4a14      	ldr	r2, [pc, #80]	; (8024ae8 <APP_THREAD_DeviceConfig+0x268>)
 8024a96:	4b12      	ldr	r3, [pc, #72]	; (8024ae0 <APP_THREAD_DeviceConfig+0x260>)
 8024a98:	4614      	mov	r4, r2
 8024a9a:	6818      	ldr	r0, [r3, #0]
 8024a9c:	6859      	ldr	r1, [r3, #4]
 8024a9e:	689a      	ldr	r2, [r3, #8]
 8024aa0:	68db      	ldr	r3, [r3, #12]
 8024aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// set UID in local state variable
//	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
//	 = UID64_BASE;
	stm32UID(msgSendMyIP.uid);
 8024aa4:	4811      	ldr	r0, [pc, #68]	; (8024aec <APP_THREAD_DeviceConfig+0x26c>)
 8024aa6:	f000 f903 	bl	8024cb0 <stm32UID>

	/* USER CODE END DEVICECONFIG */
}
 8024aaa:	bf00      	nop
 8024aac:	370c      	adds	r7, #12
 8024aae:	46bd      	mov	sp, r7
 8024ab0:	bd90      	pop	{r4, r7, pc}
 8024ab2:	bf00      	nop
 8024ab4:	08024af1 	.word	0x08024af1
 8024ab8:	08028cf4 	.word	0x08028cf4
 8024abc:	08028d0c 	.word	0x08028d0c
 8024ac0:	08028d04 	.word	0x08028d04
 8024ac4:	20000088 	.word	0x20000088
 8024ac8:	20000098 	.word	0x20000098
 8024acc:	200000a8 	.word	0x200000a8
 8024ad0:	200000b8 	.word	0x200000b8
 8024ad4:	200000e8 	.word	0x200000e8
 8024ad8:	200000f8 	.word	0x200000f8
 8024adc:	20000108 	.word	0x20000108
 8024ae0:	20028924 	.word	0x20028924
 8024ae4:	080281f4 	.word	0x080281f4
 8024ae8:	200276f0 	.word	0x200276f0
 8024aec:	200000e0 	.word	0x200000e0

08024af0 <APP_THREAD_StateNotif>:
 * @param  aFlags  : Define the item that has been modified
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext) {
 8024af0:	b590      	push	{r4, r7, lr}
 8024af2:	b083      	sub	sp, #12
 8024af4:	af00      	add	r7, sp, #0
 8024af6:	6078      	str	r0, [r7, #4]
 8024af8:	6039      	str	r1, [r7, #0]

	/* USER CODE BEGIN APP_THREAD_STATENOTIF */

	/* USER CODE END APP_THREAD_STATENOTIF */

	if ((NotifFlags & (uint32_t) OT_CHANGED_THREAD_ROLE) == (uint32_t) OT_CHANGED_THREAD_ROLE) {
 8024afa:	687b      	ldr	r3, [r7, #4]
 8024afc:	f003 0304 	and.w	r3, r3, #4
 8024b00:	2b00      	cmp	r3, #0
 8024b02:	d04a      	beq.n	8024b9a <APP_THREAD_StateNotif+0xaa>
		switch (otThreadGetDeviceRole(NULL)) {
 8024b04:	2000      	movs	r0, #0
 8024b06:	f7ff fb9e 	bl	8024246 <otThreadGetDeviceRole>
 8024b0a:	4603      	mov	r3, r0
 8024b0c:	2b04      	cmp	r3, #4
 8024b0e:	d841      	bhi.n	8024b94 <APP_THREAD_StateNotif+0xa4>
 8024b10:	a201      	add	r2, pc, #4	; (adr r2, 8024b18 <APP_THREAD_StateNotif+0x28>)
 8024b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024b16:	bf00      	nop
 8024b18:	08024b2d 	.word	0x08024b2d
 8024b1c:	08024b3d 	.word	0x08024b3d
 8024b20:	08024b4d 	.word	0x08024b4d
 8024b24:	08024b65 	.word	0x08024b65
 8024b28:	08024b7d 	.word	0x08024b7d
		case OT_DEVICE_ROLE_DISABLED:
			/* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
			borderRouter.epoch = 0;
 8024b2c:	4a1d      	ldr	r2, [pc, #116]	; (8024ba4 <APP_THREAD_StateNotif+0xb4>)
 8024b2e:	f04f 0300 	mov.w	r3, #0
 8024b32:	f04f 0400 	mov.w	r4, #0
 8024b36:	e9c2 3404 	strd	r3, r4, [r2, #16]
			/* USER CODE END OT_DEVICE_ROLE_DISABLED */
			break;
 8024b3a:	e02f      	b.n	8024b9c <APP_THREAD_StateNotif+0xac>
		case OT_DEVICE_ROLE_DETACHED:
			/* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
			borderRouter.epoch = 0;
 8024b3c:	4a19      	ldr	r2, [pc, #100]	; (8024ba4 <APP_THREAD_StateNotif+0xb4>)
 8024b3e:	f04f 0300 	mov.w	r3, #0
 8024b42:	f04f 0400 	mov.w	r4, #0
 8024b46:	e9c2 3404 	strd	r3, r4, [r2, #16]
			/* USER CODE END OT_DEVICE_ROLE_DETACHED */
			break;
 8024b4a:	e027      	b.n	8024b9c <APP_THREAD_StateNotif+0xac>
		case OT_DEVICE_ROLE_CHILD:
			/* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
 8024b4c:	2001      	movs	r0, #1
 8024b4e:	f7ef fa77 	bl	8014040 <BSP_LED_On>
			BSP_LED_Off(LED_RED);
 8024b52:	2002      	movs	r0, #2
 8024b54:	f7ef fa8e 	bl	8014074 <BSP_LED_Off>
			BSP_LED_Off(LED_BLUE);
 8024b58:	2000      	movs	r0, #0
 8024b5a:	f7ef fa8b 	bl	8014074 <BSP_LED_Off>
#endif
			APP_THREAD_UpdateBorderRouter();
 8024b5e:	f000 fd47 	bl	80255f0 <APP_THREAD_UpdateBorderRouter>
			/* USER CODE END OT_DEVICE_ROLE_CHILD */
			break;
 8024b62:	e01b      	b.n	8024b9c <APP_THREAD_StateNotif+0xac>
		case OT_DEVICE_ROLE_ROUTER:
			/* USER CODE BEGIN OT_DEVICE_ROLE_ROUTER */
#ifdef DONGLE_CODE
			BSP_LED_Off(LED_GREEN);
 8024b64:	2001      	movs	r0, #1
 8024b66:	f7ef fa85 	bl	8014074 <BSP_LED_Off>
			BSP_LED_Off(LED_RED);
 8024b6a:	2002      	movs	r0, #2
 8024b6c:	f7ef fa82 	bl	8014074 <BSP_LED_Off>
			BSP_LED_On(LED_BLUE);
 8024b70:	2000      	movs	r0, #0
 8024b72:	f7ef fa65 	bl	8014040 <BSP_LED_On>
#endif
			APP_THREAD_UpdateBorderRouter();
 8024b76:	f000 fd3b 	bl	80255f0 <APP_THREAD_UpdateBorderRouter>
			/* USER CODE END OT_DEVICE_ROLE_ROUTER */
			break;
 8024b7a:	e00f      	b.n	8024b9c <APP_THREAD_StateNotif+0xac>
		case OT_DEVICE_ROLE_LEADER:
			/* USER CODE BEGIN OT_DEVICE_ROLE_LEADER */
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
 8024b7c:	2001      	movs	r0, #1
 8024b7e:	f7ef fa5f 	bl	8014040 <BSP_LED_On>
			BSP_LED_Off(LED_RED);
 8024b82:	2002      	movs	r0, #2
 8024b84:	f7ef fa76 	bl	8014074 <BSP_LED_Off>
			BSP_LED_On(LED_BLUE);
 8024b88:	2000      	movs	r0, #0
 8024b8a:	f7ef fa59 	bl	8014040 <BSP_LED_On>
#endif
			APP_THREAD_UpdateBorderRouter();
 8024b8e:	f000 fd2f 	bl	80255f0 <APP_THREAD_UpdateBorderRouter>
			/* USER CODE END OT_DEVICE_ROLE_LEADER */
			break;
 8024b92:	e003      	b.n	8024b9c <APP_THREAD_StateNotif+0xac>
		default:
			/* USER CODE BEGIN DEFAULT */
			APP_THREAD_UpdateBorderRouter();
 8024b94:	f000 fd2c 	bl	80255f0 <APP_THREAD_UpdateBorderRouter>
			/* USER CODE END DEFAULT */
			break;
 8024b98:	e000      	b.n	8024b9c <APP_THREAD_StateNotif+0xac>
		}
	}
 8024b9a:	bf00      	nop
}
 8024b9c:	bf00      	nop
 8024b9e:	370c      	adds	r7, #12
 8024ba0:	46bd      	mov	sp, r7
 8024ba2:	bd90      	pop	{r4, r7, pc}
 8024ba4:	200276f0 	.word	0x200276f0

08024ba8 <APP_THREAD_TraceError>:
 *
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
 * @retval None
 */
static void APP_THREAD_TraceError(const char *pMess, uint32_t ErrCode) {
 8024ba8:	b480      	push	{r7}
 8024baa:	b083      	sub	sp, #12
 8024bac:	af00      	add	r7, sp, #0
 8024bae:	6078      	str	r0, [r7, #4]
 8024bb0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN TRACE_ERROR */

	/* USER CODE END TRACE_ERROR */
}
 8024bb2:	bf00      	nop
 8024bb4:	370c      	adds	r7, #12
 8024bb6:	46bd      	mov	sp, r7
 8024bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bbc:	4770      	bx	lr
	...

08024bc0 <APP_THREAD_CheckWirelessFirmwareInfo>:
 * @brief Check if the Coprocessor Wireless Firmware loaded supports Thread
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void) {
 8024bc0:	b580      	push	{r7, lr}
 8024bc2:	b088      	sub	sp, #32
 8024bc4:	af02      	add	r7, sp, #8
	WirelessFwInfo_t wireless_info_instance;
	WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 8024bc6:	1d3b      	adds	r3, r7, #4
 8024bc8:	617b      	str	r3, [r7, #20]

	if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success) {
 8024bca:	6978      	ldr	r0, [r7, #20]
 8024bcc:	f7fe ffe4 	bl	8023b98 <SHCI_GetWirelessFwInfo>
 8024bd0:	4603      	mov	r3, r0
 8024bd2:	2b00      	cmp	r3, #0
 8024bd4:	d004      	beq.n	8024be0 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
		APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS, (uint32_t) ERR_INTERFACE_FATAL);
 8024bd6:	2101      	movs	r1, #1
 8024bd8:	201a      	movs	r0, #26
 8024bda:	f7ff fdcb 	bl	8024774 <APP_THREAD_Error>
			APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS, (uint32_t) ERR_INTERFACE_FATAL);
			break;
		}
		APP_DBG("**********************************************************");
	}
}
 8024bde:	e03d      	b.n	8024c5c <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
		APP_DBG("**********************************************************");
 8024be0:	4a20      	ldr	r2, [pc, #128]	; (8024c64 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8024be2:	2101      	movs	r1, #1
 8024be4:	2000      	movs	r0, #0
 8024be6:	f7f0 fc1d 	bl	8015424 <logApplication>
		APP_DBG("WIRELESS COPROCESSOR FW:");
 8024bea:	4a1f      	ldr	r2, [pc, #124]	; (8024c68 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8024bec:	2101      	movs	r1, #1
 8024bee:	2000      	movs	r0, #0
 8024bf0:	f7f0 fc18 	bl	8015424 <logApplication>
		APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor,
 8024bf4:	697b      	ldr	r3, [r7, #20]
 8024bf6:	781b      	ldrb	r3, [r3, #0]
 8024bf8:	4619      	mov	r1, r3
 8024bfa:	697b      	ldr	r3, [r7, #20]
 8024bfc:	785b      	ldrb	r3, [r3, #1]
 8024bfe:	461a      	mov	r2, r3
 8024c00:	697b      	ldr	r3, [r7, #20]
 8024c02:	789b      	ldrb	r3, [r3, #2]
 8024c04:	9301      	str	r3, [sp, #4]
 8024c06:	9200      	str	r2, [sp, #0]
 8024c08:	460b      	mov	r3, r1
 8024c0a:	4a18      	ldr	r2, [pc, #96]	; (8024c6c <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8024c0c:	2101      	movs	r1, #1
 8024c0e:	2000      	movs	r0, #0
 8024c10:	f7f0 fc08 	bl	8015424 <logApplication>
		switch (p_wireless_info->StackType) {
 8024c14:	697b      	ldr	r3, [r7, #20]
 8024c16:	7a5b      	ldrb	r3, [r3, #9]
 8024c18:	2b11      	cmp	r3, #17
 8024c1a:	d009      	beq.n	8024c30 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8024c1c:	2b50      	cmp	r3, #80	; 0x50
 8024c1e:	d00d      	beq.n	8024c3c <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8024c20:	2b10      	cmp	r3, #16
 8024c22:	d111      	bne.n	8024c48 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
			APP_DBG("FW Type : Thread FTD")
 8024c24:	4a12      	ldr	r2, [pc, #72]	; (8024c70 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8024c26:	2101      	movs	r1, #1
 8024c28:	2000      	movs	r0, #0
 8024c2a:	f7f0 fbfb 	bl	8015424 <logApplication>
			break;
 8024c2e:	e010      	b.n	8024c52 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
			APP_DBG("FW Type : Thread MTD")
 8024c30:	4a10      	ldr	r2, [pc, #64]	; (8024c74 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8024c32:	2101      	movs	r1, #1
 8024c34:	2000      	movs	r0, #0
 8024c36:	f7f0 fbf5 	bl	8015424 <logApplication>
			break;
 8024c3a:	e00a      	b.n	8024c52 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
			APP_DBG("FW Type : Static Concurrent Mode BLE/Thread")
 8024c3c:	4a0e      	ldr	r2, [pc, #56]	; (8024c78 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8024c3e:	2101      	movs	r1, #1
 8024c40:	2000      	movs	r0, #0
 8024c42:	f7f0 fbef 	bl	8015424 <logApplication>
			break;
 8024c46:	e004      	b.n	8024c52 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
			APP_THREAD_Error((uint32_t) ERR_THREAD_CHECK_WIRELESS, (uint32_t) ERR_INTERFACE_FATAL);
 8024c48:	2101      	movs	r1, #1
 8024c4a:	201a      	movs	r0, #26
 8024c4c:	f7ff fd92 	bl	8024774 <APP_THREAD_Error>
			break;
 8024c50:	bf00      	nop
		APP_DBG("**********************************************************");
 8024c52:	4a04      	ldr	r2, [pc, #16]	; (8024c64 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8024c54:	2101      	movs	r1, #1
 8024c56:	2000      	movs	r0, #0
 8024c58:	f7f0 fbe4 	bl	8015424 <logApplication>
}
 8024c5c:	bf00      	nop
 8024c5e:	3718      	adds	r7, #24
 8024c60:	46bd      	mov	sp, r7
 8024c62:	bd80      	pop	{r7, pc}
 8024c64:	080281fc 	.word	0x080281fc
 8024c68:	08028238 	.word	0x08028238
 8024c6c:	08028254 	.word	0x08028254
 8024c70:	0802826c 	.word	0x0802826c
 8024c74:	08028284 	.word	0x08028284
 8024c78:	0802829c 	.word	0x0802829c

08024c7c <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
/*************************************************************
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
 *************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument) {
 8024c7c:	b580      	push	{r7, lr}
 8024c7e:	b082      	sub	sp, #8
 8024c80:	af00      	add	r7, sp, #0
 8024c82:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	for (;;) {
		/* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

		/* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
		osThreadFlagsWait(1, osFlagsWaitAll, osWaitForever);
 8024c84:	f04f 32ff 	mov.w	r2, #4294967295
 8024c88:	2101      	movs	r1, #1
 8024c8a:	2001      	movs	r0, #1
 8024c8c:	f7f9 fcee 	bl	801e66c <osThreadFlagsWait>
		APP_THREAD_ProcessMsgM0ToM4();
 8024c90:	f001 f9ac 	bl	8025fec <APP_THREAD_ProcessMsgM0ToM4>
		osThreadFlagsWait(1, osFlagsWaitAll, osWaitForever);
 8024c94:	e7f6      	b.n	8024c84 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08024c96 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
		/* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_2 */
	}
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument) {
 8024c96:	b580      	push	{r7, lr}
 8024c98:	b082      	sub	sp, #8
 8024c9a:	af00      	add	r7, sp, #0
 8024c9c:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	for (;;) {
		/* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

		/* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
		osThreadFlagsWait(1, osFlagsWaitAll, osWaitForever);
 8024c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8024ca2:	2101      	movs	r1, #1
 8024ca4:	2001      	movs	r0, #1
 8024ca6:	f7f9 fce1 	bl	801e66c <osThreadFlagsWait>
		Send_CLI_To_M0();
 8024caa:	f001 f921 	bl	8025ef0 <Send_CLI_To_M0>
		osThreadFlagsWait(1, osFlagsWaitAll, osWaitForever);
 8024cae:	e7f6      	b.n	8024c9e <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08024cb0 <stm32UID>:
	}
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
void stm32UID(uint8_t* uid) {
 8024cb0:	b480      	push	{r7}
 8024cb2:	b085      	sub	sp, #20
 8024cb4:	af00      	add	r7, sp, #0
 8024cb6:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < 12; i++) {
 8024cb8:	2300      	movs	r3, #0
 8024cba:	73fb      	strb	r3, [r7, #15]
 8024cbc:	e00c      	b.n	8024cd8 <stm32UID+0x28>
    uid[i] = *(volatile uint8_t *)(UID_BASE + i);
 8024cbe:	7bfa      	ldrb	r2, [r7, #15]
 8024cc0:	4b0a      	ldr	r3, [pc, #40]	; (8024cec <stm32UID+0x3c>)
 8024cc2:	4413      	add	r3, r2
 8024cc4:	4619      	mov	r1, r3
 8024cc6:	7bfb      	ldrb	r3, [r7, #15]
 8024cc8:	687a      	ldr	r2, [r7, #4]
 8024cca:	4413      	add	r3, r2
 8024ccc:	780a      	ldrb	r2, [r1, #0]
 8024cce:	b2d2      	uxtb	r2, r2
 8024cd0:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 12; i++) {
 8024cd2:	7bfb      	ldrb	r3, [r7, #15]
 8024cd4:	3301      	adds	r3, #1
 8024cd6:	73fb      	strb	r3, [r7, #15]
 8024cd8:	7bfb      	ldrb	r3, [r7, #15]
 8024cda:	2b0b      	cmp	r3, #11
 8024cdc:	d9ef      	bls.n	8024cbe <stm32UID+0xe>
    }
  }
 8024cde:	bf00      	nop
 8024ce0:	3714      	adds	r7, #20
 8024ce2:	46bd      	mov	sp, r7
 8024ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ce8:	4770      	bx	lr
 8024cea:	bf00      	nop
 8024cec:	1fff7590 	.word	0x1fff7590

08024cf0 <Delete_Sectors>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */

#ifdef OTA_ENABLED
static void Delete_Sectors( void )
{
 8024cf0:	b590      	push	{r4, r7, lr}
 8024cf2:	b08b      	sub	sp, #44	; 0x2c
 8024cf4:	af04      	add	r7, sp, #16

  uint32_t page_error;
  FLASH_EraseInitTypeDef p_erase_init;
  uint32_t first_secure_sector_idx;

  first_secure_sector_idx = (READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos);
 8024cf6:	4b25      	ldr	r3, [pc, #148]	; (8024d8c <Delete_Sectors+0x9c>)
 8024cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8024cfc:	b2db      	uxtb	r3, r3
 8024cfe:	617b      	str	r3, [r7, #20]

  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8024d00:	2302      	movs	r3, #2
 8024d02:	607b      	str	r3, [r7, #4]
  p_erase_init.Page = *((uint8_t*) SRAM1_BASE + 1);
 8024d04:	4b22      	ldr	r3, [pc, #136]	; (8024d90 <Delete_Sectors+0xa0>)
 8024d06:	781b      	ldrb	r3, [r3, #0]
 8024d08:	60bb      	str	r3, [r7, #8]
  if(p_erase_init.Page < (CFG_APP_START_SECTOR_INDEX - 1))
 8024d0a:	68bb      	ldr	r3, [r7, #8]
 8024d0c:	2b0e      	cmp	r3, #14
 8024d0e:	d805      	bhi.n	8024d1c <Delete_Sectors+0x2c>
  {
    /**
     * Something has been wrong as there is no case we should delete the BLE_Ota application
     * Reboot on the firmware application
     */
    *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_FW_APP;
 8024d10:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8024d14:	2200      	movs	r2, #0
 8024d16:	701a      	strb	r2, [r3, #0]
    NVIC_SystemReset();
 8024d18:	f7ff fc9e 	bl	8024658 <__NVIC_SystemReset>
  }
  p_erase_init.NbPages = *((uint8_t*) SRAM1_BASE + 2);
 8024d1c:	4b1d      	ldr	r3, [pc, #116]	; (8024d94 <Delete_Sectors+0xa4>)
 8024d1e:	781b      	ldrb	r3, [r3, #0]
 8024d20:	60fb      	str	r3, [r7, #12]

  if ((p_erase_init.Page + p_erase_init.NbPages) > first_secure_sector_idx)
 8024d22:	68ba      	ldr	r2, [r7, #8]
 8024d24:	68fb      	ldr	r3, [r7, #12]
 8024d26:	4413      	add	r3, r2
 8024d28:	697a      	ldr	r2, [r7, #20]
 8024d2a:	429a      	cmp	r2, r3
 8024d2c:	d203      	bcs.n	8024d36 <Delete_Sectors+0x46>
  {
    p_erase_init.NbPages = first_secure_sector_idx - p_erase_init.Page;
 8024d2e:	68bb      	ldr	r3, [r7, #8]
 8024d30:	697a      	ldr	r2, [r7, #20]
 8024d32:	1ad3      	subs	r3, r2, r3
 8024d34:	60fb      	str	r3, [r7, #12]
  }

  APP_DBG("SFSA Option Bytes set to sector = %d (0x080%x)", first_secure_sector_idx, first_secure_sector_idx*4096);
 8024d36:	697b      	ldr	r3, [r7, #20]
 8024d38:	031b      	lsls	r3, r3, #12
 8024d3a:	9300      	str	r3, [sp, #0]
 8024d3c:	697b      	ldr	r3, [r7, #20]
 8024d3e:	4a16      	ldr	r2, [pc, #88]	; (8024d98 <Delete_Sectors+0xa8>)
 8024d40:	2101      	movs	r1, #1
 8024d42:	2000      	movs	r0, #0
 8024d44:	f7f0 fb6e 	bl	8015424 <logApplication>
  APP_DBG("Erase FLASH Memory from sector %d (0x080%x) to sector %d (0x080%x)", p_erase_init.Page, p_erase_init.Page*4096, p_erase_init.NbPages+p_erase_init.Page, (p_erase_init.NbPages+p_erase_init.Page)*4096);
 8024d48:	68bc      	ldr	r4, [r7, #8]
 8024d4a:	68bb      	ldr	r3, [r7, #8]
 8024d4c:	031b      	lsls	r3, r3, #12
 8024d4e:	68f9      	ldr	r1, [r7, #12]
 8024d50:	68ba      	ldr	r2, [r7, #8]
 8024d52:	440a      	add	r2, r1
 8024d54:	68f8      	ldr	r0, [r7, #12]
 8024d56:	68b9      	ldr	r1, [r7, #8]
 8024d58:	4401      	add	r1, r0
 8024d5a:	0309      	lsls	r1, r1, #12
 8024d5c:	9102      	str	r1, [sp, #8]
 8024d5e:	9201      	str	r2, [sp, #4]
 8024d60:	9300      	str	r3, [sp, #0]
 8024d62:	4623      	mov	r3, r4
 8024d64:	4a0d      	ldr	r2, [pc, #52]	; (8024d9c <Delete_Sectors+0xac>)
 8024d66:	2101      	movs	r1, #1
 8024d68:	2000      	movs	r0, #0
 8024d6a:	f7f0 fb5b 	bl	8015424 <logApplication>

  HAL_FLASH_Unlock();
 8024d6e:	f7f3 fb33 	bl	80183d8 <HAL_FLASH_Unlock>

  HAL_FLASHEx_Erase(&p_erase_init, &page_error);
 8024d72:	f107 0210 	add.w	r2, r7, #16
 8024d76:	1d3b      	adds	r3, r7, #4
 8024d78:	4611      	mov	r1, r2
 8024d7a:	4618      	mov	r0, r3
 8024d7c:	f7f3 fbee 	bl	801855c <HAL_FLASHEx_Erase>

  HAL_FLASH_Lock();
 8024d80:	f7f3 fb4c 	bl	801841c <HAL_FLASH_Lock>

  return;
 8024d84:	bf00      	nop
}
 8024d86:	371c      	adds	r7, #28
 8024d88:	46bd      	mov	sp, r7
 8024d8a:	bd90      	pop	{r4, r7, pc}
 8024d8c:	58004000 	.word	0x58004000
 8024d90:	20000001 	.word	0x20000001
 8024d94:	20000002 	.word	0x20000002
 8024d98:	080282c8 	.word	0x080282c8
 8024d9c:	080282f8 	.word	0x080282f8

08024da0 <APP_THREAD_DummyRespHandler>:
#endif

static void APP_THREAD_DummyRespHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8024da0:	b480      	push	{r7}
 8024da2:	b085      	sub	sp, #20
 8024da4:	af00      	add	r7, sp, #0
 8024da6:	60f8      	str	r0, [r7, #12]
 8024da8:	60b9      	str	r1, [r7, #8]
 8024daa:	607a      	str	r2, [r7, #4]
 8024dac:	603b      	str	r3, [r7, #0]
	UNUSED(p_context);
	UNUSED(pHeader);
	UNUSED(pMessage);
	UNUSED(pMessageInfo);
	UNUSED(Result);
}
 8024dae:	bf00      	nop
 8024db0:	3714      	adds	r7, #20
 8024db2:	46bd      	mov	sp, r7
 8024db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024db8:	4770      	bx	lr
	...

08024dbc <APP_THREAD_CoapRespHandler_UpdateBorderRouter>:

static void APP_THREAD_CoapRespHandler_UpdateBorderRouter(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8024dbc:	b5b0      	push	{r4, r5, r7, lr}
 8024dbe:	b084      	sub	sp, #16
 8024dc0:	af00      	add	r7, sp, #0
 8024dc2:	60f8      	str	r0, [r7, #12]
 8024dc4:	60b9      	str	r1, [r7, #8]
 8024dc6:	607a      	str	r2, [r7, #4]
 8024dc8:	70fb      	strb	r3, [r7, #3]

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8024dca:	68b8      	ldr	r0, [r7, #8]
 8024dcc:	f7fe fbf4 	bl	80235b8 <otMessageGetOffset>
 8024dd0:	4603      	mov	r3, r0
 8024dd2:	4619      	mov	r1, r3
 8024dd4:	2318      	movs	r3, #24
 8024dd6:	4a0e      	ldr	r2, [pc, #56]	; (8024e10 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8024dd8:	68b8      	ldr	r0, [r7, #8]
 8024dda:	f7fe fc52 	bl	8023682 <otMessageRead>
 8024dde:	4603      	mov	r3, r0
 8024de0:	2b18      	cmp	r3, #24
 8024de2:	d110      	bne.n	8024e06 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x4a>
			== sizeof(receivedSystemCal)) {

			// if successful, update border router state variable
			memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8024de4:	4a0b      	ldr	r2, [pc, #44]	; (8024e14 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8024de6:	4b0a      	ldr	r3, [pc, #40]	; (8024e10 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8024de8:	4614      	mov	r4, r2
 8024dea:	461d      	mov	r5, r3
 8024dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024df0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024df4:	e884 0003 	stmia.w	r4, {r0, r1}

			// update the onboard RTC unix time
			updateRTC(borderRouter.epoch);
 8024df8:	4b06      	ldr	r3, [pc, #24]	; (8024e14 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8024dfa:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8024dfe:	4618      	mov	r0, r3
 8024e00:	4621      	mov	r1, r4
 8024e02:	f000 fd33 	bl	802586c <updateRTC>
	}

}
 8024e06:	bf00      	nop
 8024e08:	3710      	adds	r7, #16
 8024e0a:	46bd      	mov	sp, r7
 8024e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8024e0e:	bf00      	nop
 8024e10:	20027708 	.word	0x20027708
 8024e14:	200276f0 	.word	0x200276f0

08024e18 <APP_THREAD_DummyReqHandler>:
 * @brief Dummy request handler
 * @param
 * @retval None
 */
static void APP_THREAD_DummyReqHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8024e18:	b480      	push	{r7}
 8024e1a:	b085      	sub	sp, #20
 8024e1c:	af00      	add	r7, sp, #0
 8024e1e:	60f8      	str	r0, [r7, #12]
 8024e20:	60b9      	str	r1, [r7, #8]
 8024e22:	607a      	str	r2, [r7, #4]
 8024e24:	603b      	str	r3, [r7, #0]
	tempMessageInfo = pMessageInfo;
 8024e26:	4a06      	ldr	r2, [pc, #24]	; (8024e40 <APP_THREAD_DummyReqHandler+0x28>)
 8024e28:	683b      	ldr	r3, [r7, #0]
 8024e2a:	6013      	str	r3, [r2, #0]
	receivedMessage = (otMessageInfo*) pMessage;
 8024e2c:	4a05      	ldr	r2, [pc, #20]	; (8024e44 <APP_THREAD_DummyReqHandler+0x2c>)
 8024e2e:	687b      	ldr	r3, [r7, #4]
 8024e30:	6013      	str	r3, [r2, #0]
}
 8024e32:	bf00      	nop
 8024e34:	3714      	adds	r7, #20
 8024e36:	46bd      	mov	sp, r7
 8024e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e3c:	4770      	bx	lr
 8024e3e:	bf00      	nop
 8024e40:	200288e0 	.word	0x200288e0
 8024e44:	20028938 	.word	0x20028938

08024e48 <APP_THREAD_CoapReqHandlerFuotaProvisioning>:
 * @retval None
 */
static void APP_THREAD_CoapReqHandlerFuotaProvisioning(otCoapHeader * pHeader,
    otMessage            * pMessage,
    const otMessageInfo  * pMessageInfo)
{
 8024e48:	b5b0      	push	{r4, r5, r7, lr}
 8024e4a:	b084      	sub	sp, #16
 8024e4c:	af00      	add	r7, sp, #0
 8024e4e:	60f8      	str	r0, [r7, #12]
 8024e50:	60b9      	str	r1, [r7, #8]
 8024e52:	607a      	str	r2, [r7, #4]
  APP_DBG(" Received CoAP request on FUOTA_PROVISIONING ressource");
 8024e54:	4a14      	ldr	r2, [pc, #80]	; (8024ea8 <APP_THREAD_CoapReqHandlerFuotaProvisioning+0x60>)
 8024e56:	2101      	movs	r1, #1
 8024e58:	2000      	movs	r0, #0
 8024e5a:	f7f0 fae3 	bl	8015424 <logApplication>

  if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_NON_CONFIRMABLE &&
 8024e5e:	68f8      	ldr	r0, [r7, #12]
 8024e60:	f7fd fffb 	bl	8022e5a <otCoapHeaderGetType>
 8024e64:	4603      	mov	r3, r0
 8024e66:	2b10      	cmp	r3, #16
 8024e68:	d11a      	bne.n	8024ea0 <APP_THREAD_CoapReqHandlerFuotaProvisioning+0x58>
      otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET)
 8024e6a:	68f8      	ldr	r0, [r7, #12]
 8024e6c:	f7fe f823 	bl	8022eb6 <otCoapHeaderGetCode>
 8024e70:	4603      	mov	r3, r0
  if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_NON_CONFIRMABLE &&
 8024e72:	2b01      	cmp	r3, #1
 8024e74:	d114      	bne.n	8024ea0 <APP_THREAD_CoapReqHandlerFuotaProvisioning+0x58>
  {
    OT_MessageInfo = *pMessageInfo;
 8024e76:	4a0d      	ldr	r2, [pc, #52]	; (8024eac <APP_THREAD_CoapReqHandlerFuotaProvisioning+0x64>)
 8024e78:	687b      	ldr	r3, [r7, #4]
 8024e7a:	4614      	mov	r4, r2
 8024e7c:	461d      	mov	r5, r3
 8024e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024e86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8024e8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    memset(&OT_MessageInfo.mSockAddr, 0, sizeof(OT_MessageInfo.mSockAddr));
 8024e8e:	2210      	movs	r2, #16
 8024e90:	2100      	movs	r1, #0
 8024e92:	4806      	ldr	r0, [pc, #24]	; (8024eac <APP_THREAD_CoapReqHandlerFuotaProvisioning+0x64>)
 8024e94:	f001 fed1 	bl	8026c3a <memset>
    APP_THREAD_ProvisioningRespSend(pHeader, pMessageInfo);
 8024e98:	6879      	ldr	r1, [r7, #4]
 8024e9a:	68f8      	ldr	r0, [r7, #12]
 8024e9c:	f000 f808 	bl	8024eb0 <APP_THREAD_ProvisioningRespSend>
  }
}
 8024ea0:	bf00      	nop
 8024ea2:	3710      	adds	r7, #16
 8024ea4:	46bd      	mov	sp, r7
 8024ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8024ea8:	0802833c 	.word	0x0802833c
 8024eac:	20027628 	.word	0x20027628

08024eb0 <APP_THREAD_ProvisioningRespSend>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_ProvisioningRespSend(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8024eb0:	b590      	push	{r4, r7, lr}
 8024eb2:	b085      	sub	sp, #20
 8024eb4:	af00      	add	r7, sp, #0
 8024eb6:	6078      	str	r0, [r7, #4]
 8024eb8:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 8024eba:	2300      	movs	r3, #0
 8024ebc:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG("Provisiong: Send CoAP response");
 8024ebe:	4a38      	ldr	r2, [pc, #224]	; (8024fa0 <APP_THREAD_ProvisioningRespSend+0xf0>)
 8024ec0:	2101      	movs	r1, #1
 8024ec2:	2000      	movs	r0, #0
 8024ec4:	f7f0 faae 	bl	8015424 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_CONTENT);
 8024ec8:	2245      	movs	r2, #69	; 0x45
 8024eca:	2110      	movs	r1, #16
 8024ecc:	4835      	ldr	r0, [pc, #212]	; (8024fa4 <APP_THREAD_ProvisioningRespSend+0xf4>)
 8024ece:	f7fd fe68 	bl	8022ba2 <otCoapHeaderInit>
    otCoapHeaderSetToken(&OT_Header,
 8024ed2:	6878      	ldr	r0, [r7, #4]
 8024ed4:	f7fe f879 	bl	8022fca <otCoapHeaderGetToken>
 8024ed8:	4604      	mov	r4, r0
 8024eda:	6878      	ldr	r0, [r7, #4]
 8024edc:	f7fe f847 	bl	8022f6e <otCoapHeaderGetTokenLength>
 8024ee0:	4603      	mov	r3, r0
 8024ee2:	461a      	mov	r2, r3
 8024ee4:	4621      	mov	r1, r4
 8024ee6:	482f      	ldr	r0, [pc, #188]	; (8024fa4 <APP_THREAD_ProvisioningRespSend+0xf4>)
 8024ee8:	f7fd fe90 	bl	8022c0c <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));
    otCoapHeaderSetPayloadMarker(&OT_Header);
 8024eec:	482d      	ldr	r0, [pc, #180]	; (8024fa4 <APP_THREAD_ProvisioningRespSend+0xf4>)
 8024eee:	f7fd ff56 	bl	8022d9e <otCoapHeaderSetPayloadMarker>

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8024ef2:	492c      	ldr	r1, [pc, #176]	; (8024fa4 <APP_THREAD_ProvisioningRespSend+0xf4>)
 8024ef4:	2000      	movs	r0, #0
 8024ef6:	f7fe f895 	bl	8023024 <otCoapNewMessage>
 8024efa:	4602      	mov	r2, r0
 8024efc:	4b2a      	ldr	r3, [pc, #168]	; (8024fa8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 8024efe:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 8024f00:	4b29      	ldr	r3, [pc, #164]	; (8024fa8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 8024f02:	681b      	ldr	r3, [r3, #0]
 8024f04:	2b00      	cmp	r3, #0
 8024f06:	d105      	bne.n	8024f14 <APP_THREAD_ProvisioningRespSend+0x64>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 8024f08:	7bfb      	ldrb	r3, [r7, #15]
 8024f0a:	4619      	mov	r1, r3
 8024f0c:	2014      	movs	r0, #20
 8024f0e:	f7ff fc31 	bl	8024774 <APP_THREAD_Error>
      break;
 8024f12:	e041      	b.n	8024f98 <APP_THREAD_ProvisioningRespSend+0xe8>
    }

    error = otMessageAppend(pOT_Message, &OT_Command, sizeof(OT_Command));
 8024f14:	4b24      	ldr	r3, [pc, #144]	; (8024fa8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 8024f16:	681b      	ldr	r3, [r3, #0]
 8024f18:	2201      	movs	r2, #1
 8024f1a:	4924      	ldr	r1, [pc, #144]	; (8024fac <APP_THREAD_ProvisioningRespSend+0xfc>)
 8024f1c:	4618      	mov	r0, r3
 8024f1e:	f7fe fb79 	bl	8023614 <otMessageAppend>
 8024f22:	4603      	mov	r3, r0
 8024f24:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE)
 8024f26:	7bfb      	ldrb	r3, [r7, #15]
 8024f28:	2b00      	cmp	r3, #0
 8024f2a:	d004      	beq.n	8024f36 <APP_THREAD_ProvisioningRespSend+0x86>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 8024f2c:	7bfb      	ldrb	r3, [r7, #15]
 8024f2e:	4619      	mov	r1, r3
 8024f30:	2014      	movs	r0, #20
 8024f32:	f7ff fc1f 	bl	8024774 <APP_THREAD_Error>
    }

    error = otMessageAppend(pOT_Message, otThreadGetMeshLocalEid(NULL), sizeof(otIp6Address));
 8024f36:	4b1c      	ldr	r3, [pc, #112]	; (8024fa8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 8024f38:	681c      	ldr	r4, [r3, #0]
 8024f3a:	2000      	movs	r0, #0
 8024f3c:	f7ff f92c 	bl	8024198 <otThreadGetMeshLocalEid>
 8024f40:	4603      	mov	r3, r0
 8024f42:	2210      	movs	r2, #16
 8024f44:	4619      	mov	r1, r3
 8024f46:	4620      	mov	r0, r4
 8024f48:	f7fe fb64 	bl	8023614 <otMessageAppend>
 8024f4c:	4603      	mov	r3, r0
 8024f4e:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE)
 8024f50:	7bfb      	ldrb	r3, [r7, #15]
 8024f52:	2b00      	cmp	r3, #0
 8024f54:	d005      	beq.n	8024f62 <APP_THREAD_ProvisioningRespSend+0xb2>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 8024f56:	7bfb      	ldrb	r3, [r7, #15]
 8024f58:	4619      	mov	r1, r3
 8024f5a:	2014      	movs	r0, #20
 8024f5c:	f7ff fc0a 	bl	8024774 <APP_THREAD_Error>
      break;
 8024f60:	e01a      	b.n	8024f98 <APP_THREAD_ProvisioningRespSend+0xe8>
    }

    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8024f62:	4b11      	ldr	r3, [pc, #68]	; (8024fa8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 8024f64:	681b      	ldr	r3, [r3, #0]
 8024f66:	683a      	ldr	r2, [r7, #0]
 8024f68:	4619      	mov	r1, r3
 8024f6a:	2000      	movs	r0, #0
 8024f6c:	f7fe f921 	bl	80231b2 <otCoapSendResponse>
 8024f70:	4603      	mov	r3, r0
 8024f72:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8024f74:	7bfb      	ldrb	r3, [r7, #15]
 8024f76:	2b00      	cmp	r3, #0
 8024f78:	d00e      	beq.n	8024f98 <APP_THREAD_ProvisioningRespSend+0xe8>
 8024f7a:	4b0b      	ldr	r3, [pc, #44]	; (8024fa8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 8024f7c:	681b      	ldr	r3, [r3, #0]
 8024f7e:	2b00      	cmp	r3, #0
 8024f80:	d00a      	beq.n	8024f98 <APP_THREAD_ProvisioningRespSend+0xe8>
    {
      otMessageFree(pOT_Message);
 8024f82:	4b09      	ldr	r3, [pc, #36]	; (8024fa8 <APP_THREAD_ProvisioningRespSend+0xf8>)
 8024f84:	681b      	ldr	r3, [r3, #0]
 8024f86:	4618      	mov	r0, r3
 8024f88:	f7fe faeb 	bl	8023562 <otMessageFree>
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
 8024f8c:	7bfb      	ldrb	r3, [r7, #15]
 8024f8e:	4619      	mov	r1, r3
 8024f90:	200e      	movs	r0, #14
 8024f92:	f7ff fbef 	bl	8024774 <APP_THREAD_Error>
    }
  }while(false);
}
 8024f96:	e7ff      	b.n	8024f98 <APP_THREAD_ProvisioningRespSend+0xe8>
 8024f98:	bf00      	nop
 8024f9a:	3714      	adds	r7, #20
 8024f9c:	46bd      	mov	sp, r7
 8024f9e:	bd90      	pop	{r4, r7, pc}
 8024fa0:	08028374 	.word	0x08028374
 8024fa4:	20027654 	.word	0x20027654
 8024fa8:	200276e4 	.word	0x200276e4
 8024fac:	20027720 	.word	0x20027720

08024fb0 <APP_THREAD_CoapReqHandlerFuotaParameters>:
 * @retval None
 */
static void APP_THREAD_CoapReqHandlerFuotaParameters(otCoapHeader * pHeader,
    otMessage            * pMessage,
    const otMessageInfo  * pMessageInfo)
{
 8024fb0:	b580      	push	{r7, lr}
 8024fb2:	b084      	sub	sp, #16
 8024fb4:	af00      	add	r7, sp, #0
 8024fb6:	60f8      	str	r0, [r7, #12]
 8024fb8:	60b9      	str	r1, [r7, #8]
 8024fba:	607a      	str	r2, [r7, #4]
  if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OtaContext, sizeof(OtaContext)) != sizeof(OtaContext))
 8024fbc:	68b8      	ldr	r0, [r7, #8]
 8024fbe:	f7fe fafb 	bl	80235b8 <otMessageGetOffset>
 8024fc2:	4603      	mov	r3, r0
 8024fc4:	4619      	mov	r1, r3
 8024fc6:	2310      	movs	r3, #16
 8024fc8:	4a2e      	ldr	r2, [pc, #184]	; (8025084 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 8024fca:	68b8      	ldr	r0, [r7, #8]
 8024fcc:	f7fe fb59 	bl	8023682 <otMessageRead>
 8024fd0:	4603      	mov	r3, r0
 8024fd2:	2b10      	cmp	r3, #16
 8024fd4:	d003      	beq.n	8024fde <APP_THREAD_CoapReqHandlerFuotaParameters+0x2e>
  {
    APP_THREAD_Error(ERR_THREAD_MESSAGE_READ, 0);
 8024fd6:	2100      	movs	r1, #0
 8024fd8:	2009      	movs	r0, #9
 8024fda:	f7ff fbcb 	bl	8024774 <APP_THREAD_Error>
  }

  /* Display Ota_Context values */
  if(OtaContext.file_type == APP_THREAD_OTA_FILE_TYPE_FW_APP)
 8024fde:	4b29      	ldr	r3, [pc, #164]	; (8025084 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 8024fe0:	781b      	ldrb	r3, [r3, #0]
 8024fe2:	2b00      	cmp	r3, #0
 8024fe4:	d105      	bne.n	8024ff2 <APP_THREAD_CoapReqHandlerFuotaParameters+0x42>
  {
    APP_DBG("FUOTA_PARAMETERS: File Type set to : FW_APP");
 8024fe6:	4a28      	ldr	r2, [pc, #160]	; (8025088 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd8>)
 8024fe8:	2101      	movs	r1, #1
 8024fea:	2000      	movs	r0, #0
 8024fec:	f7f0 fa1a 	bl	8015424 <logApplication>
 8024ff0:	e012      	b.n	8025018 <APP_THREAD_CoapReqHandlerFuotaParameters+0x68>
  }
  else  if (OtaContext.file_type == APP_THREAD_OTA_FILE_TYPE_FW_COPRO_WIRELESS)
 8024ff2:	4b24      	ldr	r3, [pc, #144]	; (8025084 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 8024ff4:	781b      	ldrb	r3, [r3, #0]
 8024ff6:	2b01      	cmp	r3, #1
 8024ff8:	d105      	bne.n	8025006 <APP_THREAD_CoapReqHandlerFuotaParameters+0x56>
  {
    APP_DBG("FUOTA_PARAMETERS: File Type set to : FW_COPRO_WIRELESS");
 8024ffa:	4a24      	ldr	r2, [pc, #144]	; (802508c <APP_THREAD_CoapReqHandlerFuotaParameters+0xdc>)
 8024ffc:	2101      	movs	r1, #1
 8024ffe:	2000      	movs	r0, #0
 8025000:	f7f0 fa10 	bl	8015424 <logApplication>
 8025004:	e008      	b.n	8025018 <APP_THREAD_CoapReqHandlerFuotaParameters+0x68>
  }
  else
  {
    APP_DBG("FUOTA_PARAMETERS: File Type not recognized");
 8025006:	4a22      	ldr	r2, [pc, #136]	; (8025090 <APP_THREAD_CoapReqHandlerFuotaParameters+0xe0>)
 8025008:	2101      	movs	r1, #1
 802500a:	2000      	movs	r0, #0
 802500c:	f7f0 fa0a 	bl	8015424 <logApplication>
    APP_THREAD_Error(ERR_THREAD_FUOTA_FILE_TYPE_NOT_RECOGNIZED, 0);
 8025010:	2100      	movs	r1, #0
 8025012:	2018      	movs	r0, #24
 8025014:	f7ff fbae 	bl	8024774 <APP_THREAD_Error>
  }

  APP_DBG("FUOTA_PARAMETERS: Binary Size = 0x%x", OtaContext.binary_size);
 8025018:	4b1a      	ldr	r3, [pc, #104]	; (8025084 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 802501a:	685b      	ldr	r3, [r3, #4]
 802501c:	4a1d      	ldr	r2, [pc, #116]	; (8025094 <APP_THREAD_CoapReqHandlerFuotaParameters+0xe4>)
 802501e:	2101      	movs	r1, #1
 8025020:	2000      	movs	r0, #0
 8025022:	f7f0 f9ff 	bl	8015424 <logApplication>
  APP_DBG("FUOTA_PARAMETERS: Address = 0x%x", OtaContext.base_address);
 8025026:	4b17      	ldr	r3, [pc, #92]	; (8025084 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 8025028:	689b      	ldr	r3, [r3, #8]
 802502a:	4a1b      	ldr	r2, [pc, #108]	; (8025098 <APP_THREAD_CoapReqHandlerFuotaParameters+0xe8>)
 802502c:	2101      	movs	r1, #1
 802502e:	2000      	movs	r0, #0
 8025030:	f7f0 f9f8 	bl	8015424 <logApplication>
  APP_DBG("FUOTA_PARAMETERS: Magic Keyword = 0x%x", OtaContext.magic_keyword);
 8025034:	4b13      	ldr	r3, [pc, #76]	; (8025084 <APP_THREAD_CoapReqHandlerFuotaParameters+0xd4>)
 8025036:	68db      	ldr	r3, [r3, #12]
 8025038:	4a18      	ldr	r2, [pc, #96]	; (802509c <APP_THREAD_CoapReqHandlerFuotaParameters+0xec>)
 802503a:	2101      	movs	r1, #1
 802503c:	2000      	movs	r0, #0
 802503e:	f7f0 f9f1 	bl	8015424 <logApplication>

  /* Check if Device can be updated with Fuota Server request */
  if (APP_THREAD_CheckDeviceCapabilities() == APP_THREAD_OK)
 8025042:	f000 f831 	bl	80250a8 <APP_THREAD_CheckDeviceCapabilities>
 8025046:	4603      	mov	r3, r0
 8025048:	2b00      	cmp	r3, #0
 802504a:	d103      	bne.n	8025054 <APP_THREAD_CoapReqHandlerFuotaParameters+0xa4>
  {
    OT_Command = APP_THREAD_OK;
 802504c:	4b14      	ldr	r3, [pc, #80]	; (80250a0 <APP_THREAD_CoapReqHandlerFuotaParameters+0xf0>)
 802504e:	2200      	movs	r2, #0
 8025050:	701a      	strb	r2, [r3, #0]
 8025052:	e007      	b.n	8025064 <APP_THREAD_CoapReqHandlerFuotaParameters+0xb4>
    // TODO : add LED toggling here
//    HW_TS_Start(TimerID, (uint32_t)LED_TOGGLE_TIMING);
  }
  else
  {
    OT_Command = APP_THREAD_ERROR;
 8025054:	4b12      	ldr	r3, [pc, #72]	; (80250a0 <APP_THREAD_CoapReqHandlerFuotaParameters+0xf0>)
 8025056:	2201      	movs	r2, #1
 8025058:	701a      	strb	r2, [r3, #0]
    APP_DBG("WARNING: Current Device capabilities cannot handle FUOTA. Check memory size available!");
 802505a:	4a12      	ldr	r2, [pc, #72]	; (80250a4 <APP_THREAD_CoapReqHandlerFuotaParameters+0xf4>)
 802505c:	2101      	movs	r1, #1
 802505e:	2000      	movs	r0, #0
 8025060:	f7f0 f9e0 	bl	8015424 <logApplication>
  }
  /* If Message is Confirmable, send response */
  if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8025064:	68f8      	ldr	r0, [r7, #12]
 8025066:	f7fd fef8 	bl	8022e5a <otCoapHeaderGetType>
 802506a:	4603      	mov	r3, r0
 802506c:	2b00      	cmp	r3, #0
 802506e:	d104      	bne.n	802507a <APP_THREAD_CoapReqHandlerFuotaParameters+0xca>
  {
    APP_THREAD_CoapSendRespFuotaParameters(pHeader, pMessageInfo, &OT_Command);
 8025070:	4a0b      	ldr	r2, [pc, #44]	; (80250a0 <APP_THREAD_CoapReqHandlerFuotaParameters+0xf0>)
 8025072:	6879      	ldr	r1, [r7, #4]
 8025074:	68f8      	ldr	r0, [r7, #12]
 8025076:	f000 f9f1 	bl	802545c <APP_THREAD_CoapSendRespFuotaParameters>
  }
}
 802507a:	bf00      	nop
 802507c:	3710      	adds	r7, #16
 802507e:	46bd      	mov	sp, r7
 8025080:	bd80      	pop	{r7, pc}
 8025082:	bf00      	nop
 8025084:	200278b8 	.word	0x200278b8
 8025088:	08028394 	.word	0x08028394
 802508c:	080283c0 	.word	0x080283c0
 8025090:	080283f8 	.word	0x080283f8
 8025094:	08028424 	.word	0x08028424
 8025098:	0802844c 	.word	0x0802844c
 802509c:	08028470 	.word	0x08028470
 80250a0:	20027720 	.word	0x20027720
 80250a4:	08028498 	.word	0x08028498

080250a8 <APP_THREAD_CheckDeviceCapabilities>:

static APP_THREAD_StatusTypeDef APP_THREAD_CheckDeviceCapabilities(void)
{
 80250a8:	b580      	push	{r7, lr}
 80250aa:	b088      	sub	sp, #32
 80250ac:	af02      	add	r7, sp, #8
  APP_THREAD_StatusTypeDef status = APP_THREAD_OK;
 80250ae:	2300      	movs	r3, #0
 80250b0:	74fb      	strb	r3, [r7, #19]
  uint32_t first_sector_idx;
  uint32_t first_secure_sector_idx;
  uint32_t free_sectors;
  uint32_t free_size;

  APP_DBG("Check Device capabilities");
 80250b2:	4a2e      	ldr	r2, [pc, #184]	; (802516c <APP_THREAD_CheckDeviceCapabilities+0xc4>)
 80250b4:	2101      	movs	r1, #1
 80250b6:	2000      	movs	r0, #0
 80250b8:	f7f0 f9b4 	bl	8015424 <logApplication>

  first_secure_sector_idx = (READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos);
 80250bc:	4b2c      	ldr	r3, [pc, #176]	; (8025170 <APP_THREAD_CheckDeviceCapabilities+0xc8>)
 80250be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80250c2:	b2db      	uxtb	r3, r3
 80250c4:	617b      	str	r3, [r7, #20]
  APP_DBG("SFSA Option Bytes set to sector = %d (0x080%x)", first_secure_sector_idx, first_secure_sector_idx*4096);
 80250c6:	697b      	ldr	r3, [r7, #20]
 80250c8:	031b      	lsls	r3, r3, #12
 80250ca:	9300      	str	r3, [sp, #0]
 80250cc:	697b      	ldr	r3, [r7, #20]
 80250ce:	4a29      	ldr	r2, [pc, #164]	; (8025174 <APP_THREAD_CheckDeviceCapabilities+0xcc>)
 80250d0:	2101      	movs	r1, #1
 80250d2:	2000      	movs	r0, #0
 80250d4:	f7f0 f9a6 	bl	8015424 <logApplication>

  first_sector_idx = *((uint8_t*) SRAM1_BASE + 1);
 80250d8:	4b27      	ldr	r3, [pc, #156]	; (8025178 <APP_THREAD_CheckDeviceCapabilities+0xd0>)
 80250da:	781b      	ldrb	r3, [r3, #0]
 80250dc:	60fb      	str	r3, [r7, #12]
  if (first_sector_idx == 0)
 80250de:	68fb      	ldr	r3, [r7, #12]
 80250e0:	2b00      	cmp	r3, #0
 80250e2:	d106      	bne.n	80250f2 <APP_THREAD_CheckDeviceCapabilities+0x4a>
  {
    APP_DBG("ERROR : SRAM1_BASE + 1 == 0");
 80250e4:	4a25      	ldr	r2, [pc, #148]	; (802517c <APP_THREAD_CheckDeviceCapabilities+0xd4>)
 80250e6:	2101      	movs	r1, #1
 80250e8:	2000      	movs	r0, #0
 80250ea:	f7f0 f99b 	bl	8015424 <logApplication>
    first_sector_idx = CFG_APP_START_SECTOR_INDEX;
 80250ee:	2310      	movs	r3, #16
 80250f0:	60fb      	str	r3, [r7, #12]
  }
  APP_DBG("First available sector = %d (0x080%x)", first_sector_idx, first_sector_idx*4096);
 80250f2:	68fb      	ldr	r3, [r7, #12]
 80250f4:	031b      	lsls	r3, r3, #12
 80250f6:	9300      	str	r3, [sp, #0]
 80250f8:	68fb      	ldr	r3, [r7, #12]
 80250fa:	4a21      	ldr	r2, [pc, #132]	; (8025180 <APP_THREAD_CheckDeviceCapabilities+0xd8>)
 80250fc:	2101      	movs	r1, #1
 80250fe:	2000      	movs	r0, #0
 8025100:	f7f0 f990 	bl	8015424 <logApplication>

  free_sectors = first_secure_sector_idx - first_sector_idx;
 8025104:	697a      	ldr	r2, [r7, #20]
 8025106:	68fb      	ldr	r3, [r7, #12]
 8025108:	1ad3      	subs	r3, r2, r3
 802510a:	60bb      	str	r3, [r7, #8]
  free_size = free_sectors*4096;
 802510c:	68bb      	ldr	r3, [r7, #8]
 802510e:	031b      	lsls	r3, r3, #12
 8025110:	607b      	str	r3, [r7, #4]

  APP_DBG("free_sectors = %d , -> %d bytes of FLASH Free", free_sectors, free_size);
 8025112:	687b      	ldr	r3, [r7, #4]
 8025114:	9300      	str	r3, [sp, #0]
 8025116:	68bb      	ldr	r3, [r7, #8]
 8025118:	4a1a      	ldr	r2, [pc, #104]	; (8025184 <APP_THREAD_CheckDeviceCapabilities+0xdc>)
 802511a:	2101      	movs	r1, #1
 802511c:	2000      	movs	r0, #0
 802511e:	f7f0 f981 	bl	8015424 <logApplication>

  APP_DBG("Server requests    : %d bytes", OtaContext.binary_size);
 8025122:	4b19      	ldr	r3, [pc, #100]	; (8025188 <APP_THREAD_CheckDeviceCapabilities+0xe0>)
 8025124:	685b      	ldr	r3, [r3, #4]
 8025126:	4a19      	ldr	r2, [pc, #100]	; (802518c <APP_THREAD_CheckDeviceCapabilities+0xe4>)
 8025128:	2101      	movs	r1, #1
 802512a:	2000      	movs	r0, #0
 802512c:	f7f0 f97a 	bl	8015424 <logApplication>
  APP_DBG("Client Free memory : %d bytes", free_size);
 8025130:	687b      	ldr	r3, [r7, #4]
 8025132:	4a17      	ldr	r2, [pc, #92]	; (8025190 <APP_THREAD_CheckDeviceCapabilities+0xe8>)
 8025134:	2101      	movs	r1, #1
 8025136:	2000      	movs	r0, #0
 8025138:	f7f0 f974 	bl	8015424 <logApplication>

  if (free_size < OtaContext.binary_size)
 802513c:	4b12      	ldr	r3, [pc, #72]	; (8025188 <APP_THREAD_CheckDeviceCapabilities+0xe0>)
 802513e:	685b      	ldr	r3, [r3, #4]
 8025140:	687a      	ldr	r2, [r7, #4]
 8025142:	429a      	cmp	r2, r3
 8025144:	d207      	bcs.n	8025156 <APP_THREAD_CheckDeviceCapabilities+0xae>
  {
    status = APP_THREAD_ERROR;
 8025146:	2301      	movs	r3, #1
 8025148:	74fb      	strb	r3, [r7, #19]
    APP_DBG("WARNING: Not enough Free Flash Memory available to download binary from Server!");
 802514a:	4a12      	ldr	r2, [pc, #72]	; (8025194 <APP_THREAD_CheckDeviceCapabilities+0xec>)
 802514c:	2101      	movs	r1, #1
 802514e:	2000      	movs	r0, #0
 8025150:	f7f0 f968 	bl	8015424 <logApplication>
 8025154:	e004      	b.n	8025160 <APP_THREAD_CheckDeviceCapabilities+0xb8>
  }
  else
  {
    APP_DBG("Device contains enough Flash Memory to download binary");
 8025156:	4a10      	ldr	r2, [pc, #64]	; (8025198 <APP_THREAD_CheckDeviceCapabilities+0xf0>)
 8025158:	2101      	movs	r1, #1
 802515a:	2000      	movs	r0, #0
 802515c:	f7f0 f962 	bl	8015424 <logApplication>
  }

  return status;
 8025160:	7cfb      	ldrb	r3, [r7, #19]
}
 8025162:	4618      	mov	r0, r3
 8025164:	3718      	adds	r7, #24
 8025166:	46bd      	mov	sp, r7
 8025168:	bd80      	pop	{r7, pc}
 802516a:	bf00      	nop
 802516c:	080284f0 	.word	0x080284f0
 8025170:	58004000 	.word	0x58004000
 8025174:	080282c8 	.word	0x080282c8
 8025178:	20000001 	.word	0x20000001
 802517c:	0802850c 	.word	0x0802850c
 8025180:	08028528 	.word	0x08028528
 8025184:	08028550 	.word	0x08028550
 8025188:	200278b8 	.word	0x200278b8
 802518c:	08028580 	.word	0x08028580
 8025190:	080285a0 	.word	0x080285a0
 8025194:	080285c0 	.word	0x080285c0
 8025198:	08028610 	.word	0x08028610

0802519c <APP_THREAD_CoapReqHandlerFuota>:
 * @retval None
 */
static void APP_THREAD_CoapReqHandlerFuota(otCoapHeader * pHeader,
    otMessage            * pMessage,
    const otMessageInfo  * pMessageInfo)
{
 802519c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80251a0:	b08e      	sub	sp, #56	; 0x38
 80251a2:	af04      	add	r7, sp, #16
 80251a4:	60f8      	str	r0, [r7, #12]
 80251a6:	60b9      	str	r1, [r7, #8]
 80251a8:	607a      	str	r2, [r7, #4]
  bool l_end_full_bin_transfer = FALSE;
 80251aa:	2300      	movs	r3, #0
 80251ac:	77fb      	strb	r3, [r7, #31]
  uint32_t flash_index = 0;
 80251ae:	2300      	movs	r3, #0
 80251b0:	623b      	str	r3, [r7, #32]
  uint64_t l_read64 = 0;
 80251b2:	f04f 0300 	mov.w	r3, #0
 80251b6:	f04f 0400 	mov.w	r4, #0
 80251ba:	e9c7 3404 	strd	r3, r4, [r7, #16]

  if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &FuotaTransferArray, FUOTA_PAYLOAD_SIZE) != FUOTA_PAYLOAD_SIZE)
 80251be:	68b8      	ldr	r0, [r7, #8]
 80251c0:	f7fe f9fa 	bl	80235b8 <otMessageGetOffset>
 80251c4:	4603      	mov	r3, r0
 80251c6:	4619      	mov	r1, r3
 80251c8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80251cc:	4a6f      	ldr	r2, [pc, #444]	; (802538c <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 80251ce:	68b8      	ldr	r0, [r7, #8]
 80251d0:	f7fe fa57 	bl	8023682 <otMessageRead>
 80251d4:	4603      	mov	r3, r0
 80251d6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80251da:	d003      	beq.n	80251e4 <APP_THREAD_CoapReqHandlerFuota+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_MESSAGE_READ, 0);
 80251dc:	2100      	movs	r1, #0
 80251de:	2009      	movs	r0, #9
 80251e0:	f7ff fac8 	bl	8024774 <APP_THREAD_Error>
  }

  /* Test if magic Keyword is in FuotaBinData */
  for (int index = 0; index < FUOTA_NUMBER_WORDS_64BITS; ++index) {
 80251e4:	2300      	movs	r3, #0
 80251e6:	627b      	str	r3, [r7, #36]	; 0x24
 80251e8:	e046      	b.n	8025278 <APP_THREAD_CoapReqHandlerFuota+0xdc>
    if((FuotaTransferArray[index] & 0x00000000FFFFFFFF) == OtaContext.magic_keyword)
 80251ea:	4a68      	ldr	r2, [pc, #416]	; (802538c <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 80251ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80251ee:	00db      	lsls	r3, r3, #3
 80251f0:	4413      	add	r3, r2
 80251f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80251f6:	f04f 31ff 	mov.w	r1, #4294967295
 80251fa:	f04f 0200 	mov.w	r2, #0
 80251fe:	ea01 0b03 	and.w	fp, r1, r3
 8025202:	ea02 0c04 	and.w	ip, r2, r4
 8025206:	4b62      	ldr	r3, [pc, #392]	; (8025390 <APP_THREAD_CoapReqHandlerFuota+0x1f4>)
 8025208:	68db      	ldr	r3, [r3, #12]
 802520a:	f04f 0400 	mov.w	r4, #0
 802520e:	45a4      	cmp	ip, r4
 8025210:	bf08      	it	eq
 8025212:	459b      	cmpeq	fp, r3
 8025214:	d10c      	bne.n	8025230 <APP_THREAD_CoapReqHandlerFuota+0x94>
    {
      APP_DBG("1 - FUOTA_MAGIC_KEYWORD found at flash_current_offset = %d", (FuotaBinData_index + index)*8);
 8025216:	4b5f      	ldr	r3, [pc, #380]	; (8025394 <APP_THREAD_CoapReqHandlerFuota+0x1f8>)
 8025218:	681a      	ldr	r2, [r3, #0]
 802521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802521c:	4413      	add	r3, r2
 802521e:	00db      	lsls	r3, r3, #3
 8025220:	4a5d      	ldr	r2, [pc, #372]	; (8025398 <APP_THREAD_CoapReqHandlerFuota+0x1fc>)
 8025222:	2101      	movs	r1, #1
 8025224:	2000      	movs	r0, #0
 8025226:	f7f0 f8fd 	bl	8015424 <logApplication>
      l_end_full_bin_transfer = TRUE;
 802522a:	2301      	movs	r3, #1
 802522c:	77fb      	strb	r3, [r7, #31]
 802522e:	e020      	b.n	8025272 <APP_THREAD_CoapReqHandlerFuota+0xd6>
    }
    else
    if (((FuotaTransferArray[index] & 0xFFFFFFFF00000000) >> 32) == OtaContext.magic_keyword)
 8025230:	4a56      	ldr	r2, [pc, #344]	; (802538c <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 8025232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025234:	00db      	lsls	r3, r3, #3
 8025236:	4413      	add	r3, r2
 8025238:	e9d3 1200 	ldrd	r1, r2, [r3]
 802523c:	f04f 0300 	mov.w	r3, #0
 8025240:	f04f 0400 	mov.w	r4, #0
 8025244:	0013      	movs	r3, r2
 8025246:	2400      	movs	r4, #0
 8025248:	4a51      	ldr	r2, [pc, #324]	; (8025390 <APP_THREAD_CoapReqHandlerFuota+0x1f4>)
 802524a:	68d2      	ldr	r2, [r2, #12]
 802524c:	4611      	mov	r1, r2
 802524e:	f04f 0200 	mov.w	r2, #0
 8025252:	4294      	cmp	r4, r2
 8025254:	bf08      	it	eq
 8025256:	428b      	cmpeq	r3, r1
 8025258:	d10b      	bne.n	8025272 <APP_THREAD_CoapReqHandlerFuota+0xd6>
    {
      APP_DBG("2 - FUOTA_MAGIC_KEYWORD found at flash_current_offset = %d", (FuotaBinData_index + index)*8);
 802525a:	4b4e      	ldr	r3, [pc, #312]	; (8025394 <APP_THREAD_CoapReqHandlerFuota+0x1f8>)
 802525c:	681a      	ldr	r2, [r3, #0]
 802525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025260:	4413      	add	r3, r2
 8025262:	00db      	lsls	r3, r3, #3
 8025264:	4a4d      	ldr	r2, [pc, #308]	; (802539c <APP_THREAD_CoapReqHandlerFuota+0x200>)
 8025266:	2101      	movs	r1, #1
 8025268:	2000      	movs	r0, #0
 802526a:	f7f0 f8db 	bl	8015424 <logApplication>
      l_end_full_bin_transfer = TRUE;
 802526e:	2301      	movs	r3, #1
 8025270:	77fb      	strb	r3, [r7, #31]
  for (int index = 0; index < FUOTA_NUMBER_WORDS_64BITS; ++index) {
 8025272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025274:	3301      	adds	r3, #1
 8025276:	627b      	str	r3, [r7, #36]	; 0x24
 8025278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802527a:	2b31      	cmp	r3, #49	; 0x31
 802527c:	ddb5      	ble.n	80251ea <APP_THREAD_CoapReqHandlerFuota+0x4e>
    }
  }

  FuotaBinData_index += FUOTA_NUMBER_WORDS_64BITS;
 802527e:	4b45      	ldr	r3, [pc, #276]	; (8025394 <APP_THREAD_CoapReqHandlerFuota+0x1f8>)
 8025280:	681b      	ldr	r3, [r3, #0]
 8025282:	3332      	adds	r3, #50	; 0x32
 8025284:	4a43      	ldr	r2, [pc, #268]	; (8025394 <APP_THREAD_CoapReqHandlerFuota+0x1f8>)
 8025286:	6013      	str	r3, [r2, #0]

  /* Write to Flash Memory */
  for(flash_index = 0; flash_index < FUOTA_NUMBER_WORDS_64BITS; flash_index++)
 8025288:	2300      	movs	r3, #0
 802528a:	623b      	str	r3, [r7, #32]
 802528c:	e066      	b.n	802535c <APP_THREAD_CoapReqHandlerFuota+0x1c0>
  {
    while( LL_HSEM_1StepLock( HSEM, CFG_HW_FLASH_SEMID ) );
 802528e:	bf00      	nop
 8025290:	2102      	movs	r1, #2
 8025292:	4843      	ldr	r0, [pc, #268]	; (80253a0 <APP_THREAD_CoapReqHandlerFuota+0x204>)
 8025294:	f7ff fa08 	bl	80246a8 <LL_HSEM_1StepLock>
 8025298:	4603      	mov	r3, r0
 802529a:	2b00      	cmp	r3, #0
 802529c:	d1f8      	bne.n	8025290 <APP_THREAD_CoapReqHandlerFuota+0xf4>
    HAL_FLASH_Unlock();
 802529e:	f7f3 f89b 	bl	80183d8 <HAL_FLASH_Unlock>
    while(LL_FLASH_IsActiveFlag_OperationSuspended());
 80252a2:	bf00      	nop
 80252a4:	f7ff f9ec 	bl	8024680 <LL_FLASH_IsActiveFlag_OperationSuspended>
 80252a8:	4603      	mov	r3, r0
 80252aa:	2b00      	cmp	r3, #0
 80252ac:	d1fa      	bne.n	80252a4 <APP_THREAD_CoapReqHandlerFuota+0x108>

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
        OtaContext.base_address + flash_current_offset,
 80252ae:	4b38      	ldr	r3, [pc, #224]	; (8025390 <APP_THREAD_CoapReqHandlerFuota+0x1f4>)
 80252b0:	689a      	ldr	r2, [r3, #8]
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 80252b2:	4b3c      	ldr	r3, [pc, #240]	; (80253a4 <APP_THREAD_CoapReqHandlerFuota+0x208>)
 80252b4:	681b      	ldr	r3, [r3, #0]
 80252b6:	18d1      	adds	r1, r2, r3
 80252b8:	4a34      	ldr	r2, [pc, #208]	; (802538c <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 80252ba:	6a3b      	ldr	r3, [r7, #32]
 80252bc:	00db      	lsls	r3, r3, #3
 80252be:	4413      	add	r3, r2
 80252c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80252c4:	461a      	mov	r2, r3
 80252c6:	4623      	mov	r3, r4
 80252c8:	2001      	movs	r0, #1
 80252ca:	f7f3 f841 	bl	8018350 <HAL_FLASH_Program>
 80252ce:	4603      	mov	r3, r0
 80252d0:	2b00      	cmp	r3, #0
 80252d2:	d12a      	bne.n	802532a <APP_THREAD_CoapReqHandlerFuota+0x18e>
        FuotaTransferArray[flash_index]) == HAL_OK)
    {
      /* Read back value for verification */
      l_read64 = *(uint64_t*)(OtaContext.base_address + flash_current_offset);
 80252d4:	4b2e      	ldr	r3, [pc, #184]	; (8025390 <APP_THREAD_CoapReqHandlerFuota+0x1f4>)
 80252d6:	689a      	ldr	r2, [r3, #8]
 80252d8:	4b32      	ldr	r3, [pc, #200]	; (80253a4 <APP_THREAD_CoapReqHandlerFuota+0x208>)
 80252da:	681b      	ldr	r3, [r3, #0]
 80252dc:	4413      	add	r3, r2
 80252de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80252e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
      if(l_read64 != FuotaTransferArray[flash_index])
 80252e6:	4a29      	ldr	r2, [pc, #164]	; (802538c <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 80252e8:	6a3b      	ldr	r3, [r7, #32]
 80252ea:	00db      	lsls	r3, r3, #3
 80252ec:	4413      	add	r3, r2
 80252ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80252f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80252f6:	42a2      	cmp	r2, r4
 80252f8:	bf08      	it	eq
 80252fa:	4299      	cmpeq	r1, r3
 80252fc:	d01f      	beq.n	802533e <APP_THREAD_CoapReqHandlerFuota+0x1a2>
      {
        APP_DBG("FLASH: Comparison failed l_read64 = 0x%jx / ram_array = 0x%jx", l_read64, FuotaTransferArray[flash_index])
 80252fe:	4a23      	ldr	r2, [pc, #140]	; (802538c <APP_THREAD_CoapReqHandlerFuota+0x1f0>)
 8025300:	6a3b      	ldr	r3, [r7, #32]
 8025302:	00db      	lsls	r3, r3, #3
 8025304:	4413      	add	r3, r2
 8025306:	e9d3 3400 	ldrd	r3, r4, [r3]
 802530a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802530e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8025312:	e9cd 3400 	strd	r3, r4, [sp]
 8025316:	4a24      	ldr	r2, [pc, #144]	; (80253a8 <APP_THREAD_CoapReqHandlerFuota+0x20c>)
 8025318:	2101      	movs	r1, #1
 802531a:	2000      	movs	r0, #0
 802531c:	f7f0 f882 	bl	8015424 <logApplication>
                  APP_THREAD_Error(ERR_THREAD_MSG_COMPARE_FAILED,0);
 8025320:	2100      	movs	r1, #0
 8025322:	2013      	movs	r0, #19
 8025324:	f7ff fa26 	bl	8024774 <APP_THREAD_Error>
 8025328:	e009      	b.n	802533e <APP_THREAD_CoapReqHandlerFuota+0x1a2>
      }
    }
    else
    {
      APP_DBG("HAL_FLASH_Program FAILED at flash_index = %d", flash_index)
 802532a:	6a3b      	ldr	r3, [r7, #32]
 802532c:	4a1f      	ldr	r2, [pc, #124]	; (80253ac <APP_THREAD_CoapReqHandlerFuota+0x210>)
 802532e:	2101      	movs	r1, #1
 8025330:	2000      	movs	r0, #0
 8025332:	f7f0 f877 	bl	8015424 <logApplication>
      APP_THREAD_Error(ERR_THREAD_FLASH_PROGRAM,0);
 8025336:	2100      	movs	r1, #0
 8025338:	2017      	movs	r0, #23
 802533a:	f7ff fa1b 	bl	8024774 <APP_THREAD_Error>
    }

    HAL_FLASH_Lock();
 802533e:	f7f3 f86d 	bl	801841c <HAL_FLASH_Lock>
    LL_HSEM_ReleaseLock( HSEM, CFG_HW_FLASH_SEMID, 0 );
 8025342:	2200      	movs	r2, #0
 8025344:	2102      	movs	r1, #2
 8025346:	4816      	ldr	r0, [pc, #88]	; (80253a0 <APP_THREAD_CoapReqHandlerFuota+0x204>)
 8025348:	f7ff f9c6 	bl	80246d8 <LL_HSEM_ReleaseLock>

    flash_current_offset += 8;
 802534c:	4b15      	ldr	r3, [pc, #84]	; (80253a4 <APP_THREAD_CoapReqHandlerFuota+0x208>)
 802534e:	681b      	ldr	r3, [r3, #0]
 8025350:	3308      	adds	r3, #8
 8025352:	4a14      	ldr	r2, [pc, #80]	; (80253a4 <APP_THREAD_CoapReqHandlerFuota+0x208>)
 8025354:	6013      	str	r3, [r2, #0]
  for(flash_index = 0; flash_index < FUOTA_NUMBER_WORDS_64BITS; flash_index++)
 8025356:	6a3b      	ldr	r3, [r7, #32]
 8025358:	3301      	adds	r3, #1
 802535a:	623b      	str	r3, [r7, #32]
 802535c:	6a3b      	ldr	r3, [r7, #32]
 802535e:	2b31      	cmp	r3, #49	; 0x31
 8025360:	d995      	bls.n	802528e <APP_THREAD_CoapReqHandlerFuota+0xf2>
  }

  /* If Message is Confirmable, send response */
  if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8025362:	68f8      	ldr	r0, [r7, #12]
 8025364:	f7fd fd79 	bl	8022e5a <otCoapHeaderGetType>
 8025368:	4603      	mov	r3, r0
 802536a:	2b00      	cmp	r3, #0
 802536c:	d103      	bne.n	8025376 <APP_THREAD_CoapReqHandlerFuota+0x1da>
  {
    APP_THREAD_CoapSendDataResponseFuota(pHeader, pMessageInfo);
 802536e:	6879      	ldr	r1, [r7, #4]
 8025370:	68f8      	ldr	r0, [r7, #12]
 8025372:	f000 f81d 	bl	80253b0 <APP_THREAD_CoapSendDataResponseFuota>
  }

  if(l_end_full_bin_transfer == TRUE)
 8025376:	7ffb      	ldrb	r3, [r7, #31]
 8025378:	2b00      	cmp	r3, #0
 802537a:	d001      	beq.n	8025380 <APP_THREAD_CoapReqHandlerFuota+0x1e4>
  {
	  // TODO : add FREERTOS task flag enable here

	  APP_THREAD_PerformReset();
 802537c:	f000 f8e4 	bl	8025548 <APP_THREAD_PerformReset>

//    UTIL_SEQ_SetTask(TASK_FUOTA_RESET, CFG_SCH_PRIO_0);
  }
}
 8025380:	bf00      	nop
 8025382:	3728      	adds	r7, #40	; 0x28
 8025384:	46bd      	mov	sp, r7
 8025386:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 802538a:	bf00      	nop
 802538c:	20027728 	.word	0x20027728
 8025390:	200278b8 	.word	0x200278b8
 8025394:	20027724 	.word	0x20027724
 8025398:	08028648 	.word	0x08028648
 802539c:	08028684 	.word	0x08028684
 80253a0:	58001400 	.word	0x58001400
 80253a4:	200278c8 	.word	0x200278c8
 80253a8:	080286c0 	.word	0x080286c0
 80253ac:	08028700 	.word	0x08028700

080253b0 <APP_THREAD_CoapSendDataResponseFuota>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponseFuota(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 80253b0:	b590      	push	{r4, r7, lr}
 80253b2:	b085      	sub	sp, #20
 80253b4:	af00      	add	r7, sp, #0
 80253b6:	6078      	str	r0, [r7, #4]
 80253b8:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 80253ba:	2300      	movs	r3, #0
 80253bc:	73fb      	strb	r3, [r7, #15]
  static otCoapHeader  OT_Header = {0};

  do{
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 80253be:	2244      	movs	r2, #68	; 0x44
 80253c0:	2120      	movs	r1, #32
 80253c2:	4824      	ldr	r0, [pc, #144]	; (8025454 <APP_THREAD_CoapSendDataResponseFuota+0xa4>)
 80253c4:	f7fd fbed 	bl	8022ba2 <otCoapHeaderInit>
    otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 80253c8:	6878      	ldr	r0, [r7, #4]
 80253ca:	f7fd fda2 	bl	8022f12 <otCoapHeaderGetMessageId>
 80253ce:	4603      	mov	r3, r0
 80253d0:	4619      	mov	r1, r3
 80253d2:	4820      	ldr	r0, [pc, #128]	; (8025454 <APP_THREAD_CoapSendDataResponseFuota+0xa4>)
 80253d4:	f7fd fd11 	bl	8022dfa <otCoapHeaderSetMessageId>
    otCoapHeaderSetToken(&OT_Header,
 80253d8:	6878      	ldr	r0, [r7, #4]
 80253da:	f7fd fdf6 	bl	8022fca <otCoapHeaderGetToken>
 80253de:	4604      	mov	r4, r0
 80253e0:	6878      	ldr	r0, [r7, #4]
 80253e2:	f7fd fdc4 	bl	8022f6e <otCoapHeaderGetTokenLength>
 80253e6:	4603      	mov	r3, r0
 80253e8:	461a      	mov	r2, r3
 80253ea:	4621      	mov	r1, r4
 80253ec:	4819      	ldr	r0, [pc, #100]	; (8025454 <APP_THREAD_CoapSendDataResponseFuota+0xa4>)
 80253ee:	f7fd fc0d 	bl	8022c0c <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80253f2:	4918      	ldr	r1, [pc, #96]	; (8025454 <APP_THREAD_CoapSendDataResponseFuota+0xa4>)
 80253f4:	2000      	movs	r0, #0
 80253f6:	f7fd fe15 	bl	8023024 <otCoapNewMessage>
 80253fa:	4602      	mov	r2, r0
 80253fc:	4b16      	ldr	r3, [pc, #88]	; (8025458 <APP_THREAD_CoapSendDataResponseFuota+0xa8>)
 80253fe:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 8025400:	4b15      	ldr	r3, [pc, #84]	; (8025458 <APP_THREAD_CoapSendDataResponseFuota+0xa8>)
 8025402:	681b      	ldr	r3, [r3, #0]
 8025404:	2b00      	cmp	r3, #0
 8025406:	d106      	bne.n	8025416 <APP_THREAD_CoapSendDataResponseFuota+0x66>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 8025408:	7bfb      	ldrb	r3, [r7, #15]
 802540a:	4619      	mov	r1, r3
 802540c:	2014      	movs	r0, #20
 802540e:	f7ff f9b1 	bl	8024774 <APP_THREAD_Error>
      break;
 8025412:	bf00      	nop
    {
      otMessageFree(pOT_Message);
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 8025414:	e019      	b.n	802544a <APP_THREAD_CoapSendDataResponseFuota+0x9a>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8025416:	4b10      	ldr	r3, [pc, #64]	; (8025458 <APP_THREAD_CoapSendDataResponseFuota+0xa8>)
 8025418:	681b      	ldr	r3, [r3, #0]
 802541a:	683a      	ldr	r2, [r7, #0]
 802541c:	4619      	mov	r1, r3
 802541e:	2000      	movs	r0, #0
 8025420:	f7fd fec7 	bl	80231b2 <otCoapSendResponse>
 8025424:	4603      	mov	r3, r0
 8025426:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8025428:	7bfb      	ldrb	r3, [r7, #15]
 802542a:	2b00      	cmp	r3, #0
 802542c:	d00d      	beq.n	802544a <APP_THREAD_CoapSendDataResponseFuota+0x9a>
 802542e:	4b0a      	ldr	r3, [pc, #40]	; (8025458 <APP_THREAD_CoapSendDataResponseFuota+0xa8>)
 8025430:	681b      	ldr	r3, [r3, #0]
 8025432:	2b00      	cmp	r3, #0
 8025434:	d009      	beq.n	802544a <APP_THREAD_CoapSendDataResponseFuota+0x9a>
      otMessageFree(pOT_Message);
 8025436:	4b08      	ldr	r3, [pc, #32]	; (8025458 <APP_THREAD_CoapSendDataResponseFuota+0xa8>)
 8025438:	681b      	ldr	r3, [r3, #0]
 802543a:	4618      	mov	r0, r3
 802543c:	f7fe f891 	bl	8023562 <otMessageFree>
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
 8025440:	7bfb      	ldrb	r3, [r7, #15]
 8025442:	4619      	mov	r1, r3
 8025444:	200e      	movs	r0, #14
 8025446:	f7ff f995 	bl	8024774 <APP_THREAD_Error>
}
 802544a:	bf00      	nop
 802544c:	3714      	adds	r7, #20
 802544e:	46bd      	mov	sp, r7
 8025450:	bd90      	pop	{r4, r7, pc}
 8025452:	bf00      	nop
 8025454:	200278cc 	.word	0x200278cc
 8025458:	200276e4 	.word	0x200276e4

0802545c <APP_THREAD_CoapSendRespFuotaParameters>:
 * @retval None
 */
static void APP_THREAD_CoapSendRespFuotaParameters(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo,
    uint8_t * pData)
{
 802545c:	b590      	push	{r4, r7, lr}
 802545e:	b087      	sub	sp, #28
 8025460:	af00      	add	r7, sp, #0
 8025462:	60f8      	str	r0, [r7, #12]
 8025464:	60b9      	str	r1, [r7, #8]
 8025466:	607a      	str	r2, [r7, #4]
  otError  error = OT_ERROR_NONE;
 8025468:	2300      	movs	r3, #0
 802546a:	75fb      	strb	r3, [r7, #23]
  static otCoapHeader  OT_Header = {0};
  uint8_t data = *pData;
 802546c:	687b      	ldr	r3, [r7, #4]
 802546e:	781b      	ldrb	r3, [r3, #0]
 8025470:	75bb      	strb	r3, [r7, #22]
  APP_DBG("APP_THREAD_CoapSendRespFuotaParameters data = %d", data);
 8025472:	7dbb      	ldrb	r3, [r7, #22]
 8025474:	4a30      	ldr	r2, [pc, #192]	; (8025538 <APP_THREAD_CoapSendRespFuotaParameters+0xdc>)
 8025476:	2101      	movs	r1, #1
 8025478:	2000      	movs	r0, #0
 802547a:	f7ef ffd3 	bl	8015424 <logApplication>

  do{
    APP_DBG("FUOTA: Send CoAP response for Fuota Parameters");
 802547e:	4a2f      	ldr	r2, [pc, #188]	; (802553c <APP_THREAD_CoapSendRespFuotaParameters+0xe0>)
 8025480:	2101      	movs	r1, #1
 8025482:	2000      	movs	r0, #0
 8025484:	f7ef ffce 	bl	8015424 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_CONTENT);
 8025488:	2245      	movs	r2, #69	; 0x45
 802548a:	2110      	movs	r1, #16
 802548c:	482c      	ldr	r0, [pc, #176]	; (8025540 <APP_THREAD_CoapSendRespFuotaParameters+0xe4>)
 802548e:	f7fd fb88 	bl	8022ba2 <otCoapHeaderInit>
    otCoapHeaderSetToken(&OT_Header,
 8025492:	68f8      	ldr	r0, [r7, #12]
 8025494:	f7fd fd99 	bl	8022fca <otCoapHeaderGetToken>
 8025498:	4604      	mov	r4, r0
 802549a:	68f8      	ldr	r0, [r7, #12]
 802549c:	f7fd fd67 	bl	8022f6e <otCoapHeaderGetTokenLength>
 80254a0:	4603      	mov	r3, r0
 80254a2:	461a      	mov	r2, r3
 80254a4:	4621      	mov	r1, r4
 80254a6:	4826      	ldr	r0, [pc, #152]	; (8025540 <APP_THREAD_CoapSendRespFuotaParameters+0xe4>)
 80254a8:	f7fd fbb0 	bl	8022c0c <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));
    otCoapHeaderSetPayloadMarker(&OT_Header);
 80254ac:	4824      	ldr	r0, [pc, #144]	; (8025540 <APP_THREAD_CoapSendRespFuotaParameters+0xe4>)
 80254ae:	f7fd fc76 	bl	8022d9e <otCoapHeaderSetPayloadMarker>

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80254b2:	4923      	ldr	r1, [pc, #140]	; (8025540 <APP_THREAD_CoapSendRespFuotaParameters+0xe4>)
 80254b4:	2000      	movs	r0, #0
 80254b6:	f7fd fdb5 	bl	8023024 <otCoapNewMessage>
 80254ba:	4602      	mov	r2, r0
 80254bc:	4b21      	ldr	r3, [pc, #132]	; (8025544 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 80254be:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 80254c0:	4b20      	ldr	r3, [pc, #128]	; (8025544 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 80254c2:	681b      	ldr	r3, [r3, #0]
 80254c4:	2b00      	cmp	r3, #0
 80254c6:	d106      	bne.n	80254d6 <APP_THREAD_CoapSendRespFuotaParameters+0x7a>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 80254c8:	7dfb      	ldrb	r3, [r7, #23]
 80254ca:	4619      	mov	r1, r3
 80254cc:	2014      	movs	r0, #20
 80254ce:	f7ff f951 	bl	8024774 <APP_THREAD_Error>
      break;
 80254d2:	bf00      	nop
    {
      otMessageFree(pOT_Message);
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 80254d4:	e02b      	b.n	802552e <APP_THREAD_CoapSendRespFuotaParameters+0xd2>
    error = otMessageAppend(pOT_Message, &data, sizeof(data));
 80254d6:	4b1b      	ldr	r3, [pc, #108]	; (8025544 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 80254d8:	681b      	ldr	r3, [r3, #0]
 80254da:	f107 0116 	add.w	r1, r7, #22
 80254de:	2201      	movs	r2, #1
 80254e0:	4618      	mov	r0, r3
 80254e2:	f7fe f897 	bl	8023614 <otMessageAppend>
 80254e6:	4603      	mov	r3, r0
 80254e8:	75fb      	strb	r3, [r7, #23]
    if (error != OT_ERROR_NONE)
 80254ea:	7dfb      	ldrb	r3, [r7, #23]
 80254ec:	2b00      	cmp	r3, #0
 80254ee:	d004      	beq.n	80254fa <APP_THREAD_CoapSendRespFuotaParameters+0x9e>
      APP_THREAD_Error(ERR_THREAD_COAP_APPEND_MSG, error);
 80254f0:	7dfb      	ldrb	r3, [r7, #23]
 80254f2:	4619      	mov	r1, r3
 80254f4:	2014      	movs	r0, #20
 80254f6:	f7ff f93d 	bl	8024774 <APP_THREAD_Error>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 80254fa:	4b12      	ldr	r3, [pc, #72]	; (8025544 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 80254fc:	681b      	ldr	r3, [r3, #0]
 80254fe:	68ba      	ldr	r2, [r7, #8]
 8025500:	4619      	mov	r1, r3
 8025502:	2000      	movs	r0, #0
 8025504:	f7fd fe55 	bl	80231b2 <otCoapSendResponse>
 8025508:	4603      	mov	r3, r0
 802550a:	75fb      	strb	r3, [r7, #23]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 802550c:	7dfb      	ldrb	r3, [r7, #23]
 802550e:	2b00      	cmp	r3, #0
 8025510:	d00d      	beq.n	802552e <APP_THREAD_CoapSendRespFuotaParameters+0xd2>
 8025512:	4b0c      	ldr	r3, [pc, #48]	; (8025544 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 8025514:	681b      	ldr	r3, [r3, #0]
 8025516:	2b00      	cmp	r3, #0
 8025518:	d009      	beq.n	802552e <APP_THREAD_CoapSendRespFuotaParameters+0xd2>
      otMessageFree(pOT_Message);
 802551a:	4b0a      	ldr	r3, [pc, #40]	; (8025544 <APP_THREAD_CoapSendRespFuotaParameters+0xe8>)
 802551c:	681b      	ldr	r3, [r3, #0]
 802551e:	4618      	mov	r0, r3
 8025520:	f7fe f81f 	bl	8023562 <otMessageFree>
      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
 8025524:	7dfb      	ldrb	r3, [r7, #23]
 8025526:	4619      	mov	r1, r3
 8025528:	200e      	movs	r0, #14
 802552a:	f7ff f923 	bl	8024774 <APP_THREAD_Error>
}
 802552e:	bf00      	nop
 8025530:	371c      	adds	r7, #28
 8025532:	46bd      	mov	sp, r7
 8025534:	bd90      	pop	{r4, r7, pc}
 8025536:	bf00      	nop
 8025538:	08028730 	.word	0x08028730
 802553c:	08028764 	.word	0x08028764
 8025540:	2002795c 	.word	0x2002795c
 8025544:	200276e4 	.word	0x200276e4

08025548 <APP_THREAD_PerformReset>:
 * @brief Task responsible for the reset at the end of OTA transfer.
 * @param  None
 * @retval None
 */
static void APP_THREAD_PerformReset(void)
{
 8025548:	b580      	push	{r7, lr}
 802554a:	af00      	add	r7, sp, #0
  APP_DBG("*******************************************************");
 802554c:	4a22      	ldr	r2, [pc, #136]	; (80255d8 <APP_THREAD_PerformReset+0x90>)
 802554e:	2101      	movs	r1, #1
 8025550:	2000      	movs	r0, #0
 8025552:	f7ef ff67 	bl	8015424 <logApplication>
  APP_DBG(" FUOTA_CLIENT : END OF TRANSFER COMPLETED");
 8025556:	4a21      	ldr	r2, [pc, #132]	; (80255dc <APP_THREAD_PerformReset+0x94>)
 8025558:	2101      	movs	r1, #1
 802555a:	2000      	movs	r0, #0
 802555c:	f7ef ff62 	bl	8015424 <logApplication>
  /* Stop Toggling of the LED */
//  HW_TS_Stop(TimerID);
//  BSP_LED_On(LED1);

  /* Insert delay to make sure CoAP response has been sent */
  HAL_Delay(200);
 8025560:	20c8      	movs	r0, #200	; 0xc8
 8025562:	f7f0 fe53 	bl	801620c <HAL_Delay>

  if(OtaContext.file_type == APP_THREAD_OTA_FILE_TYPE_FW_APP)
 8025566:	4b1e      	ldr	r3, [pc, #120]	; (80255e0 <APP_THREAD_PerformReset+0x98>)
 8025568:	781b      	ldrb	r3, [r3, #0]
 802556a:	2b00      	cmp	r3, #0
 802556c:	d10f      	bne.n	802558e <APP_THREAD_PerformReset+0x46>
  {
    APP_DBG("  --> Request to reboot on FW Application");
 802556e:	4a1d      	ldr	r2, [pc, #116]	; (80255e4 <APP_THREAD_PerformReset+0x9c>)
 8025570:	2101      	movs	r1, #1
 8025572:	2000      	movs	r0, #0
 8025574:	f7ef ff56 	bl	8015424 <logApplication>
    APP_DBG("*******************************************************");
 8025578:	4a17      	ldr	r2, [pc, #92]	; (80255d8 <APP_THREAD_PerformReset+0x90>)
 802557a:	2101      	movs	r1, #1
 802557c:	2000      	movs	r0, #0
 802557e:	f7ef ff51 	bl	8015424 <logApplication>
    /**
     * Reboot on FW Application
     */
    *(uint8_t*)SRAM1_BASE = CFG_REBOOT_ON_FW_APP;
 8025582:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8025586:	2200      	movs	r2, #0
 8025588:	701a      	strb	r2, [r3, #0]
    NVIC_SystemReset();
 802558a:	f7ff f865 	bl	8024658 <__NVIC_SystemReset>
  }
  else if(OtaContext.file_type == APP_THREAD_OTA_FILE_TYPE_FW_COPRO_WIRELESS)
 802558e:	4b14      	ldr	r3, [pc, #80]	; (80255e0 <APP_THREAD_PerformReset+0x98>)
 8025590:	781b      	ldrb	r3, [r3, #0]
 8025592:	2b01      	cmp	r3, #1
 8025594:	d114      	bne.n	80255c0 <APP_THREAD_PerformReset+0x78>
  {
    APP_DBG("  --> Request to reboot on FUS");
 8025596:	4a14      	ldr	r2, [pc, #80]	; (80255e8 <APP_THREAD_PerformReset+0xa0>)
 8025598:	2101      	movs	r1, #1
 802559a:	2000      	movs	r0, #0
 802559c:	f7ef ff42 	bl	8015424 <logApplication>
    APP_DBG("*******************************************************");
 80255a0:	4a0d      	ldr	r2, [pc, #52]	; (80255d8 <APP_THREAD_PerformReset+0x90>)
 80255a2:	2101      	movs	r1, #1
 80255a4:	2000      	movs	r0, #0
 80255a6:	f7ef ff3d 	bl	8015424 <logApplication>
    /**
     * Wireless firmware update is requested
     * Request CPU2 to reboot on FUS by sending two FUS command
     */
    SHCI_C2_FUS_GetState( NULL );
 80255aa:	2000      	movs	r0, #0
 80255ac:	f7fe faab 	bl	8023b06 <SHCI_C2_FUS_GetState>
    SHCI_C2_FUS_GetState( NULL );
 80255b0:	2000      	movs	r0, #0
 80255b2:	f7fe faa8 	bl	8023b06 <SHCI_C2_FUS_GetState>
    while(1)
    {
      HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80255b6:	2101      	movs	r1, #1
 80255b8:	2000      	movs	r0, #0
 80255ba:	f7f5 fa27 	bl	801aa0c <HAL_PWR_EnterSLEEPMode>
 80255be:	e7fa      	b.n	80255b6 <APP_THREAD_PerformReset+0x6e>
    }
  }
  else
  {
    APP_DBG("APP_THREAD_PerformReset: OtaContext.file_type not recognized");
 80255c0:	4a0a      	ldr	r2, [pc, #40]	; (80255ec <APP_THREAD_PerformReset+0xa4>)
 80255c2:	2101      	movs	r1, #1
 80255c4:	2000      	movs	r0, #0
 80255c6:	f7ef ff2d 	bl	8015424 <logApplication>
    APP_THREAD_Error(ERR_THREAD_FUOTA_FILE_TYPE_NOT_RECOGNIZED,0);
 80255ca:	2100      	movs	r1, #0
 80255cc:	2018      	movs	r0, #24
 80255ce:	f7ff f8d1 	bl	8024774 <APP_THREAD_Error>
  }

}
 80255d2:	bf00      	nop
 80255d4:	bd80      	pop	{r7, pc}
 80255d6:	bf00      	nop
 80255d8:	08028794 	.word	0x08028794
 80255dc:	080287cc 	.word	0x080287cc
 80255e0:	200278b8 	.word	0x200278b8
 80255e4:	080287f8 	.word	0x080287f8
 80255e8:	08028824 	.word	0x08028824
 80255ec:	08028844 	.word	0x08028844

080255f0 <APP_THREAD_UpdateBorderRouter>:
//volatile otNetifMulticastAddress *test_addr;
//volatile otExtAddress *test_ext_addr;
//volatile otExtAddress test_1;
//volatile otExtAddress test_2;

void APP_THREAD_UpdateBorderRouter() {
 80255f0:	b580      	push	{r7, lr}
 80255f2:	af00      	add	r7, sp, #0

	// if border router IP is still multicast (ff03::1), attempt to sync
	if (otIp6IsAddressEqual(&multicastAddr, &borderRouter.ipv6)) {
 80255f4:	4906      	ldr	r1, [pc, #24]	; (8025610 <APP_THREAD_UpdateBorderRouter+0x20>)
 80255f6:	4807      	ldr	r0, [pc, #28]	; (8025614 <APP_THREAD_UpdateBorderRouter+0x24>)
 80255f8:	f7fd feeb 	bl	80233d2 <otIp6IsAddressEqual>
 80255fc:	4603      	mov	r3, r0
 80255fe:	2b00      	cmp	r3, #0
 8025600:	d001      	beq.n	8025606 <APP_THREAD_UpdateBorderRouter+0x16>
		APP_THREAD_SyncWithBorderRouter();
 8025602:	f000 f809 	bl	8025618 <APP_THREAD_SyncWithBorderRouter>
	}

	// send IP to border router
	APP_THREAD_SendMyInfo();
 8025606:	f000 f81d 	bl	8025644 <APP_THREAD_SendMyInfo>
}
 802560a:	bf00      	nop
 802560c:	bd80      	pop	{r7, pc}
 802560e:	bf00      	nop
 8025610:	200276f0 	.word	0x200276f0
 8025614:	20028924 	.word	0x20028924

08025618 <APP_THREAD_SyncWithBorderRouter>:

// send a GET request to border router via multicast
void APP_THREAD_SyncWithBorderRouter() {
 8025618:	b580      	push	{r7, lr}
 802561a:	b084      	sub	sp, #16
 802561c:	af04      	add	r7, sp, #16
	APP_THREAD_SendCoapMsgForBorderSync(NULL, 0, &multicastAddr, borderSyncResource, REQUEST_ACK, OT_COAP_CODE_GET, 1U);
 802561e:	2301      	movs	r3, #1
 8025620:	9302      	str	r3, [sp, #8]
 8025622:	2301      	movs	r3, #1
 8025624:	9301      	str	r3, [sp, #4]
 8025626:	2301      	movs	r3, #1
 8025628:	9300      	str	r3, [sp, #0]
 802562a:	4b04      	ldr	r3, [pc, #16]	; (802563c <APP_THREAD_SyncWithBorderRouter+0x24>)
 802562c:	4a04      	ldr	r2, [pc, #16]	; (8025640 <APP_THREAD_SyncWithBorderRouter+0x28>)
 802562e:	2100      	movs	r1, #0
 8025630:	2000      	movs	r0, #0
 8025632:	f000 fa79 	bl	8025b28 <APP_THREAD_SendCoapMsgForBorderSync>
}
 8025636:	bf00      	nop
 8025638:	46bd      	mov	sp, r7
 802563a:	bd80      	pop	{r7, pc}
 802563c:	08028cc4 	.word	0x08028cc4
 8025640:	20028924 	.word	0x20028924

08025644 <APP_THREAD_SendMyInfo>:

void APP_THREAD_SendMyInfo() {
 8025644:	b580      	push	{r7, lr}
 8025646:	b084      	sub	sp, #16
 8025648:	af04      	add	r7, sp, #16
////	test_1 = test_ext_addr[0];
////	test_2 = &test_ext_addr;
//
//	error = otThreadGetNextNeighborInfo(NULL, &test_neighbor_iterator, &test_info_neighbor);
	// TODO: does this need an ACK
	APP_THREAD_SendCoapMsg(&msgSendMyIP, sizeof(msgSendMyIP), &borderRouter.ipv6, nodeInfoResource, REQUEST_ACK,
 802564a:	2301      	movs	r3, #1
 802564c:	9302      	str	r3, [sp, #8]
 802564e:	2303      	movs	r3, #3
 8025650:	9301      	str	r3, [sp, #4]
 8025652:	2301      	movs	r3, #1
 8025654:	9300      	str	r3, [sp, #0]
 8025656:	4b04      	ldr	r3, [pc, #16]	; (8025668 <APP_THREAD_SendMyInfo+0x24>)
 8025658:	4a04      	ldr	r2, [pc, #16]	; (802566c <APP_THREAD_SendMyInfo+0x28>)
 802565a:	2120      	movs	r1, #32
 802565c:	4804      	ldr	r0, [pc, #16]	; (8025670 <APP_THREAD_SendMyInfo+0x2c>)
 802565e:	f000 f96f 	bl	8025940 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 8025662:	bf00      	nop
 8025664:	46bd      	mov	sp, r7
 8025666:	bd80      	pop	{r7, pc}
 8025668:	08028ce4 	.word	0x08028ce4
 802566c:	200276f0 	.word	0x200276f0
 8025670:	200000c8 	.word	0x200000c8

08025674 <APP_THREAD_SendBorderPacket>:
void APP_THREAD_SendBorderMessage(void *packet, uint8_t len) {
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(packet, len, &borderRouter.ipv6, borderPacket, REQUEST_ACK, OT_COAP_CODE_PUT, 1U);
}

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket) {
 8025674:	b580      	push	{r7, lr}
 8025676:	b086      	sub	sp, #24
 8025678:	af04      	add	r7, sp, #16
 802567a:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(sensorPacket, sizeof(struct LogPacket), &borderRouter.ipv6, borderPacket, NO_ACK,
 802567c:	2301      	movs	r3, #1
 802567e:	9302      	str	r3, [sp, #8]
 8025680:	2303      	movs	r3, #3
 8025682:	9301      	str	r3, [sp, #4]
 8025684:	2300      	movs	r3, #0
 8025686:	9300      	str	r3, [sp, #0]
 8025688:	4b04      	ldr	r3, [pc, #16]	; (802569c <APP_THREAD_SendBorderPacket+0x28>)
 802568a:	4a05      	ldr	r2, [pc, #20]	; (80256a0 <APP_THREAD_SendBorderPacket+0x2c>)
 802568c:	21cc      	movs	r1, #204	; 0xcc
 802568e:	6878      	ldr	r0, [r7, #4]
 8025690:	f000 f956 	bl	8025940 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);

}
 8025694:	bf00      	nop
 8025696:	3708      	adds	r7, #8
 8025698:	46bd      	mov	sp, r7
 802569a:	bd80      	pop	{r7, pc}
 802569c:	08028cd4 	.word	0x08028cd4
 80256a0:	200276f0 	.word	0x200276f0

080256a4 <APP_THREAD_CoapLightsSimpleRequestHandler>:

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80256a4:	b580      	push	{r7, lr}
 80256a6:	b084      	sub	sp, #16
 80256a8:	af00      	add	r7, sp, #0
 80256aa:	60f8      	str	r0, [r7, #12]
 80256ac:	60b9      	str	r1, [r7, #8]
 80256ae:	607a      	str	r2, [r7, #4]
	do {

		// if get, send response with current log message
		if (otCoapHeaderGetType(pHeader) == OT_COAP_CODE_GET) {
 80256b0:	68f8      	ldr	r0, [r7, #12]
 80256b2:	f7fd fbd2 	bl	8022e5a <otCoapHeaderGetType>
 80256b6:	4603      	mov	r3, r0
 80256b8:	2b01      	cmp	r3, #1
 80256ba:	d106      	bne.n	80256ca <APP_THREAD_CoapLightsSimpleRequestHandler+0x26>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &lightsSimpleMessage, sizeof(lightsSimpleMessage));
 80256bc:	2304      	movs	r3, #4
 80256be:	4a23      	ldr	r2, [pc, #140]	; (802574c <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 80256c0:	6879      	ldr	r1, [r7, #4]
 80256c2:	68f8      	ldr	r0, [r7, #12]
 80256c4:	f000 fb14 	bl	8025cf0 <APP_THREAD_SendDataResponse>
			break;
 80256c8:	e03c      	b.n	8025744 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage))
 80256ca:	68b8      	ldr	r0, [r7, #8]
 80256cc:	f7fd ff74 	bl	80235b8 <otMessageGetOffset>
 80256d0:	4603      	mov	r3, r0
 80256d2:	4619      	mov	r1, r3
 80256d4:	2304      	movs	r3, #4
 80256d6:	4a1d      	ldr	r2, [pc, #116]	; (802574c <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 80256d8:	68b8      	ldr	r0, [r7, #8]
 80256da:	f7fd ffd2 	bl	8023682 <otMessageRead>
 80256de:	4603      	mov	r3, r0
 80256e0:	2b04      	cmp	r3, #4
 80256e2:	d112      	bne.n	802570a <APP_THREAD_CoapLightsSimpleRequestHandler+0x66>
				== 4U) {
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80256e4:	68f8      	ldr	r0, [r7, #12]
 80256e6:	f7fd fbe6 	bl	8022eb6 <otCoapHeaderGetCode>
 80256ea:	4603      	mov	r3, r0
 80256ec:	2b03      	cmp	r3, #3
 80256ee:	d005      	beq.n	80256fc <APP_THREAD_CoapLightsSimpleRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 80256f0:	68f8      	ldr	r0, [r7, #12]
 80256f2:	f7fd fbe0 	bl	8022eb6 <otCoapHeaderGetCode>
 80256f6:	4603      	mov	r3, r0
 80256f8:	2b02      	cmp	r3, #2
 80256fa:	d106      	bne.n	802570a <APP_THREAD_CoapLightsSimpleRequestHandler+0x66>
				osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 80256fc:	4b14      	ldr	r3, [pc, #80]	; (8025750 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 80256fe:	6818      	ldr	r0, [r3, #0]
 8025700:	2300      	movs	r3, #0
 8025702:	2200      	movs	r2, #0
 8025704:	4911      	ldr	r1, [pc, #68]	; (802574c <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 8025706:	f7f9 fcc1 	bl	801f08c <osMessageQueuePut>
			}

		}

		tempMessageInfo = pMessageInfo;
 802570a:	4a12      	ldr	r2, [pc, #72]	; (8025754 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb0>)
 802570c:	687b      	ldr	r3, [r7, #4]
 802570e:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8025710:	4a11      	ldr	r2, [pc, #68]	; (8025758 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb4>)
 8025712:	68bb      	ldr	r3, [r7, #8]
 8025714:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8025716:	68f8      	ldr	r0, [r7, #12]
 8025718:	f7fd fb9f 	bl	8022e5a <otCoapHeaderGetType>
 802571c:	4603      	mov	r3, r0
 802571e:	2b00      	cmp	r3, #0
 8025720:	d106      	bne.n	8025730 <APP_THREAD_CoapLightsSimpleRequestHandler+0x8c>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 8025722:	2300      	movs	r3, #0
 8025724:	2200      	movs	r2, #0
 8025726:	6879      	ldr	r1, [r7, #4]
 8025728:	68f8      	ldr	r0, [r7, #12]
 802572a:	f000 fae1 	bl	8025cf0 <APP_THREAD_SendDataResponse>
			break;
 802572e:	e009      	b.n	8025744 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8025730:	68b8      	ldr	r0, [r7, #8]
 8025732:	f7fd ff41 	bl	80235b8 <otMessageGetOffset>
 8025736:	4603      	mov	r3, r0
 8025738:	4619      	mov	r1, r3
 802573a:	2301      	movs	r3, #1
 802573c:	4a07      	ldr	r2, [pc, #28]	; (802575c <APP_THREAD_CoapLightsSimpleRequestHandler+0xb8>)
 802573e:	68b8      	ldr	r0, [r7, #8]
 8025740:	f7fd ff9f 	bl	8023682 <otMessageRead>

		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}
	} while (false);
}
 8025744:	bf00      	nop
 8025746:	3710      	adds	r7, #16
 8025748:	46bd      	mov	sp, r7
 802574a:	bd80      	pop	{r7, pc}
 802574c:	20028010 	.word	0x20028010
 8025750:	20027bcc 	.word	0x20027bcc
 8025754:	200288e0 	.word	0x200288e0
 8025758:	20028938 	.word	0x20028938
 802575c:	200276e9 	.word	0x200276e9

08025760 <APP_THREAD_CoapBorderTimeRequestHandler>:
volatile char temp_var[100];
volatile uint8_t temp_num = 0;

// request handler for when receiving a message directed at the border router synchronizing resource
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8025760:	b5b0      	push	{r4, r5, r7, lr}
 8025762:	b084      	sub	sp, #16
 8025764:	af00      	add	r7, sp, #0
 8025766:	60f8      	str	r0, [r7, #12]
 8025768:	60b9      	str	r1, [r7, #8]
 802576a:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
 802576c:	2002      	movs	r0, #2
 802576e:	f7ee fc9b 	bl	80140a8 <BSP_LED_Toggle>
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8025772:	68b8      	ldr	r0, [r7, #8]
 8025774:	f7fd ff20 	bl	80235b8 <otMessageGetOffset>
 8025778:	4603      	mov	r3, r0
 802577a:	4619      	mov	r1, r3
 802577c:	2318      	movs	r3, #24
 802577e:	4a1f      	ldr	r2, [pc, #124]	; (80257fc <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8025780:	68b8      	ldr	r0, [r7, #8]
 8025782:	f7fd ff7e 	bl	8023682 <otMessageRead>
 8025786:	4603      	mov	r3, r0
 8025788:	2b18      	cmp	r3, #24
 802578a:	d11c      	bne.n	80257c6 <APP_THREAD_CoapBorderTimeRequestHandler+0x66>
				== sizeof(receivedSystemCal)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 802578c:	68f8      	ldr	r0, [r7, #12]
 802578e:	f7fd fb92 	bl	8022eb6 <otCoapHeaderGetCode>
 8025792:	4603      	mov	r3, r0
 8025794:	2b03      	cmp	r3, #3
 8025796:	d005      	beq.n	80257a4 <APP_THREAD_CoapBorderTimeRequestHandler+0x44>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8025798:	68f8      	ldr	r0, [r7, #12]
 802579a:	f7fd fb8c 	bl	8022eb6 <otCoapHeaderGetCode>
 802579e:	4603      	mov	r3, r0
 80257a0:	2b02      	cmp	r3, #2
 80257a2:	d110      	bne.n	80257c6 <APP_THREAD_CoapBorderTimeRequestHandler+0x66>

				memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 80257a4:	4a16      	ldr	r2, [pc, #88]	; (8025800 <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 80257a6:	4b15      	ldr	r3, [pc, #84]	; (80257fc <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 80257a8:	4614      	mov	r4, r2
 80257aa:	461d      	mov	r5, r3
 80257ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80257ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80257b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80257b4:	e884 0003 	stmia.w	r4, {r0, r1}

				// update the onboard RTC unix time
				updateRTC(borderRouter.epoch);
 80257b8:	4b11      	ldr	r3, [pc, #68]	; (8025800 <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 80257ba:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80257be:	4618      	mov	r0, r3
 80257c0:	4621      	mov	r1, r4
 80257c2:	f000 f853 	bl	802586c <updateRTC>
			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 80257c6:	4a0f      	ldr	r2, [pc, #60]	; (8025804 <APP_THREAD_CoapBorderTimeRequestHandler+0xa4>)
 80257c8:	68bb      	ldr	r3, [r7, #8]
 80257ca:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80257cc:	68f8      	ldr	r0, [r7, #12]
 80257ce:	f7fd fb72 	bl	8022eb6 <otCoapHeaderGetCode>
 80257d2:	4603      	mov	r3, r0
 80257d4:	2b01      	cmp	r3, #1
 80257d6:	d00c      	beq.n	80257f2 <APP_THREAD_CoapBorderTimeRequestHandler+0x92>
			//APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &borderRouter, sizeof(borderRouter));

			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 80257d8:	68f8      	ldr	r0, [r7, #12]
 80257da:	f7fd fb3e 	bl	8022e5a <otCoapHeaderGetType>
 80257de:	4603      	mov	r3, r0
 80257e0:	2b00      	cmp	r3, #0
 80257e2:	d107      	bne.n	80257f4 <APP_THREAD_CoapBorderTimeRequestHandler+0x94>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 80257e4:	2300      	movs	r3, #0
 80257e6:	2200      	movs	r2, #0
 80257e8:	6879      	ldr	r1, [r7, #4]
 80257ea:	68f8      	ldr	r0, [r7, #12]
 80257ec:	f000 fa80 	bl	8025cf0 <APP_THREAD_SendDataResponse>
			break;
 80257f0:	e000      	b.n	80257f4 <APP_THREAD_CoapBorderTimeRequestHandler+0x94>
			break;
 80257f2:	bf00      	nop
		}

	} while (false);
}
 80257f4:	bf00      	nop
 80257f6:	3710      	adds	r7, #16
 80257f8:	46bd      	mov	sp, r7
 80257fa:	bdb0      	pop	{r4, r5, r7, pc}
 80257fc:	20027708 	.word	0x20027708
 8025800:	200276f0 	.word	0x200276f0
 8025804:	20028938 	.word	0x20028938

08025808 <APP_THREAD_CoapNodeInfoRequestHandler>:

// Only get requests allowed for this resource
struct sendIP_struct tempVar = {"test","test",0};
//char test_string[200] = "test";
static void APP_THREAD_CoapNodeInfoRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8025808:	b580      	push	{r7, lr}
 802580a:	b084      	sub	sp, #16
 802580c:	af00      	add	r7, sp, #0
 802580e:	60f8      	str	r0, [r7, #12]
 8025810:	60b9      	str	r1, [r7, #8]
 8025812:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
 8025814:	2002      	movs	r0, #2
 8025816:	f7ee fc47 	bl	80140a8 <BSP_LED_Toggle>
#endif

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &tempVar, sizeof(tempVar))
 802581a:	68b8      	ldr	r0, [r7, #8]
 802581c:	f7fd fecc 	bl	80235b8 <otMessageGetOffset>
 8025820:	4603      	mov	r3, r0
 8025822:	4619      	mov	r1, r3
 8025824:	2320      	movs	r3, #32
 8025826:	4a0f      	ldr	r2, [pc, #60]	; (8025864 <APP_THREAD_CoapNodeInfoRequestHandler+0x5c>)
 8025828:	68b8      	ldr	r0, [r7, #8]
 802582a:	f7fd ff2a 	bl	8023682 <otMessageRead>
//				// update the onboard RTC unix time
//				updateRTC(borderRouter.epoch);
//			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 802582e:	4a0e      	ldr	r2, [pc, #56]	; (8025868 <APP_THREAD_CoapNodeInfoRequestHandler+0x60>)
 8025830:	68bb      	ldr	r3, [r7, #8]
 8025832:	6013      	str	r3, [r2, #0]

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8025834:	68f8      	ldr	r0, [r7, #12]
 8025836:	f7fd fb3e 	bl	8022eb6 <otCoapHeaderGetCode>
 802583a:	4603      	mov	r3, r0
 802583c:	2b01      	cmp	r3, #1
 802583e:	d101      	bne.n	8025844 <APP_THREAD_CoapNodeInfoRequestHandler+0x3c>
//			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &msgSendMyIP, sizeof(msgSendMyIP));
			APP_THREAD_SendMyInfo();
 8025840:	f7ff ff00 	bl	8025644 <APP_THREAD_SendMyInfo>
//			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &tempVar, sizeof(tempVar));

//			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8025844:	68f8      	ldr	r0, [r7, #12]
 8025846:	f7fd fb08 	bl	8022e5a <otCoapHeaderGetType>
 802584a:	4603      	mov	r3, r0
 802584c:	2b00      	cmp	r3, #0
 802584e:	d105      	bne.n	802585c <APP_THREAD_CoapNodeInfoRequestHandler+0x54>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 8025850:	2300      	movs	r3, #0
 8025852:	2200      	movs	r2, #0
 8025854:	6879      	ldr	r1, [r7, #4]
 8025856:	68f8      	ldr	r0, [r7, #12]
 8025858:	f000 fa4a 	bl	8025cf0 <APP_THREAD_SendDataResponse>
		}

	} while (false);
}
 802585c:	bf00      	nop
 802585e:	3710      	adds	r7, #16
 8025860:	46bd      	mov	sp, r7
 8025862:	bd80      	pop	{r7, pc}
 8025864:	20000118 	.word	0x20000118
 8025868:	20028938 	.word	0x20028938

0802586c <updateRTC>:

void updateRTC(time_t now) {
 802586c:	b580      	push	{r7, lr}
 802586e:	b088      	sub	sp, #32
 8025870:	af00      	add	r7, sp, #0
 8025872:	e9c7 0100 	strd	r0, r1, [r7]
	RTC_DateTypeDef sDate;

	// https://www.st.com/content/ccc/resource/technical/document/application_note/2a/c2/6f/74/fa/0d/46/3a/CD00015424.pdf/files/CD00015424.pdf/jcr:content/translations/en.CD00015424.pdf
	struct tm *time_tm;

	RTC_FromEpoch(now, &sTime, &sDate);
 8025876:	683b      	ldr	r3, [r7, #0]
 8025878:	f107 0208 	add.w	r2, r7, #8
 802587c:	f107 010c 	add.w	r1, r7, #12
 8025880:	4618      	mov	r0, r3
 8025882:	f7ef fb8f 	bl	8014fa4 <RTC_FromEpoch>

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8025886:	f107 030c 	add.w	r3, r7, #12
 802588a:	2200      	movs	r2, #0
 802588c:	4619      	mov	r1, r3
 802588e:	480a      	ldr	r0, [pc, #40]	; (80258b8 <updateRTC+0x4c>)
 8025890:	f7f6 ffbf 	bl	801c812 <HAL_RTC_SetTime>
	}

	/*
	 * update the RTC
	 */
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8025894:	f107 0308 	add.w	r3, r7, #8
 8025898:	2200      	movs	r2, #0
 802589a:	4619      	mov	r1, r3
 802589c:	4806      	ldr	r0, [pc, #24]	; (80258b8 <updateRTC+0x4c>)
 802589e:	f7f7 f8d8 	bl	801ca52 <HAL_RTC_SetDate>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // lock it in with the backup registers
 80258a2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80258a6:	2100      	movs	r1, #0
 80258a8:	4803      	ldr	r0, [pc, #12]	; (80258b8 <updateRTC+0x4c>)
 80258aa:	f7f7 fa59 	bl	801cd60 <HAL_RTCEx_BKUPWrite>
}
 80258ae:	bf00      	nop
 80258b0:	3720      	adds	r7, #32
 80258b2:	46bd      	mov	sp, r7
 80258b4:	bd80      	pop	{r7, pc}
 80258b6:	bf00      	nop
 80258b8:	20028720 	.word	0x20028720

080258bc <APP_THREAD_CoapLightsComplexRequestHandler>:
//    BSP_LED_On(LED1);
//    APP_DBG(" ********* BUFFER HAS BEEN TRANFERED \r\n");
//  }
//}
static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80258bc:	b580      	push	{r7, lr}
 80258be:	b084      	sub	sp, #16
 80258c0:	af00      	add	r7, sp, #0
 80258c2:	60f8      	str	r0, [r7, #12]
 80258c4:	60b9      	str	r1, [r7, #8]
 80258c6:	607a      	str	r2, [r7, #4]
	do {
		//APP_THREAD_SendCoapUnicastRequest();

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex))
 80258c8:	68b8      	ldr	r0, [r7, #8]
 80258ca:	f7fd fe75 	bl	80235b8 <otMessageGetOffset>
 80258ce:	4603      	mov	r3, r0
 80258d0:	4619      	mov	r1, r3
 80258d2:	2312      	movs	r3, #18
 80258d4:	4a16      	ldr	r2, [pc, #88]	; (8025930 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 80258d6:	68b8      	ldr	r0, [r7, #8]
 80258d8:	f7fd fed3 	bl	8023682 <otMessageRead>
 80258dc:	4603      	mov	r3, r0
 80258de:	2b12      	cmp	r3, #18
 80258e0:	d102      	bne.n	80258e8 <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
				== sizeof(lightMessageComplex)) {
			FrontLightsSet(&lightMessageComplex);
 80258e2:	4813      	ldr	r0, [pc, #76]	; (8025930 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 80258e4:	f7ee fa9c 	bl	8013e20 <FrontLightsSet>
		}

		tempMessageInfo = pMessageInfo;
 80258e8:	4a12      	ldr	r2, [pc, #72]	; (8025934 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 80258ea:	687b      	ldr	r3, [r7, #4]
 80258ec:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 80258ee:	4a12      	ldr	r2, [pc, #72]	; (8025938 <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 80258f0:	68bb      	ldr	r3, [r7, #8]
 80258f2:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE) {
 80258f4:	68f8      	ldr	r0, [r7, #12]
 80258f6:	f7fd fab0 	bl	8022e5a <otCoapHeaderGetType>
 80258fa:	4603      	mov	r3, r0
 80258fc:	2b10      	cmp	r3, #16
 80258fe:	d110      	bne.n	8025922 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
			break;
		}

		if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT) {
 8025900:	68f8      	ldr	r0, [r7, #12]
 8025902:	f7fd fad8 	bl	8022eb6 <otCoapHeaderGetCode>
 8025906:	4603      	mov	r3, r0
 8025908:	2b03      	cmp	r3, #3
 802590a:	d10c      	bne.n	8025926 <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
			break;
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 802590c:	68b8      	ldr	r0, [r7, #8]
 802590e:	f7fd fe53 	bl	80235b8 <otMessageGetOffset>
 8025912:	4603      	mov	r3, r0
 8025914:	4619      	mov	r1, r3
 8025916:	2301      	movs	r3, #1
 8025918:	4a08      	ldr	r2, [pc, #32]	; (802593c <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 802591a:	68b8      	ldr	r0, [r7, #8]
 802591c:	f7fd feb1 	bl	8023682 <otMessageRead>
		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}

	} while (false);
}
 8025920:	e002      	b.n	8025928 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8025922:	bf00      	nop
 8025924:	e000      	b.n	8025928 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8025926:	bf00      	nop
}
 8025928:	bf00      	nop
 802592a:	3710      	adds	r7, #16
 802592c:	46bd      	mov	sp, r7
 802592e:	bd80      	pop	{r7, pc}
 8025930:	20028910 	.word	0x20028910
 8025934:	200288e0 	.word	0x200288e0
 8025938:	20028938 	.word	0x20028938
 802593c:	200276e9 	.word	0x200276e9

08025940 <APP_THREAD_SendCoapMsg>:
//  }
//}

static char empty_message[10] = "empty";
static void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8025940:	b590      	push	{r4, r7, lr}
 8025942:	b087      	sub	sp, #28
 8025944:	af02      	add	r7, sp, #8
 8025946:	60f8      	str	r0, [r7, #12]
 8025948:	607a      	str	r2, [r7, #4]
 802594a:	603b      	str	r3, [r7, #0]
 802594c:	460b      	mov	r3, r1
 802594e:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8025950:	222c      	movs	r2, #44	; 0x2c
 8025952:	2100      	movs	r1, #0
 8025954:	486c      	ldr	r0, [pc, #432]	; (8025b08 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025956:	f001 f970 	bl	8026c3a <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 802595a:	897b      	ldrh	r3, [r7, #10]
 802595c:	2b64      	cmp	r3, #100	; 0x64
 802595e:	d90c      	bls.n	802597a <APP_THREAD_SendCoapMsg+0x3a>
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8025960:	4b69      	ldr	r3, [pc, #420]	; (8025b08 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025962:	4a6a      	ldr	r2, [pc, #424]	; (8025b0c <APP_THREAD_SendCoapMsg+0x1cc>)
 8025964:	f103 0410 	add.w	r4, r3, #16
 8025968:	4613      	mov	r3, r2
 802596a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802596c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
 8025970:	4965      	ldr	r1, [pc, #404]	; (8025b08 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025972:	4867      	ldr	r0, [pc, #412]	; (8025b10 <APP_THREAD_SendCoapMsg+0x1d0>)
 8025974:	f7fd fd63 	bl	802343e <otIp6AddressFromString>
 8025978:	e009      	b.n	802598e <APP_THREAD_SendCoapMsg+0x4e>
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 802597a:	4b63      	ldr	r3, [pc, #396]	; (8025b08 <APP_THREAD_SendCoapMsg+0x1c8>)
 802597c:	4a65      	ldr	r2, [pc, #404]	; (8025b14 <APP_THREAD_SendCoapMsg+0x1d4>)
 802597e:	f103 0410 	add.w	r4, r3, #16
 8025982:	4613      	mov	r3, r2
 8025984:	6818      	ldr	r0, [r3, #0]
 8025986:	6859      	ldr	r1, [r3, #4]
 8025988:	689a      	ldr	r2, [r3, #8]
 802598a:	68db      	ldr	r3, [r3, #12]
 802598c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 802598e:	4b5e      	ldr	r3, [pc, #376]	; (8025b08 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025990:	2201      	movs	r2, #1
 8025992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8025996:	4b5c      	ldr	r3, [pc, #368]	; (8025b08 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025998:	f241 6233 	movw	r2, #5683	; 0x1633
 802599c:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 802599e:	4b5a      	ldr	r3, [pc, #360]	; (8025b08 <APP_THREAD_SendCoapMsg+0x1c8>)
 80259a0:	2240      	movs	r2, #64	; 0x40
 80259a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 80259a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80259aa:	2b00      	cmp	r3, #0
 80259ac:	d009      	beq.n	80259c2 <APP_THREAD_SendCoapMsg+0x82>
 80259ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80259b2:	2b03      	cmp	r3, #3
 80259b4:	d105      	bne.n	80259c2 <APP_THREAD_SendCoapMsg+0x82>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 80259b6:	2203      	movs	r2, #3
 80259b8:	2100      	movs	r1, #0
 80259ba:	4857      	ldr	r0, [pc, #348]	; (8025b18 <APP_THREAD_SendCoapMsg+0x1d8>)
 80259bc:	f7fd f8f1 	bl	8022ba2 <otCoapHeaderInit>
 80259c0:	e04a      	b.n	8025a58 <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 80259c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80259c6:	2b00      	cmp	r3, #0
 80259c8:	d009      	beq.n	80259de <APP_THREAD_SendCoapMsg+0x9e>
 80259ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80259ce:	2b01      	cmp	r3, #1
 80259d0:	d105      	bne.n	80259de <APP_THREAD_SendCoapMsg+0x9e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 80259d2:	2201      	movs	r2, #1
 80259d4:	2100      	movs	r1, #0
 80259d6:	4850      	ldr	r0, [pc, #320]	; (8025b18 <APP_THREAD_SendCoapMsg+0x1d8>)
 80259d8:	f7fd f8e3 	bl	8022ba2 <otCoapHeaderInit>
 80259dc:	e03c      	b.n	8025a58 <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 80259de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80259e2:	2b00      	cmp	r3, #0
 80259e4:	d009      	beq.n	80259fa <APP_THREAD_SendCoapMsg+0xba>
 80259e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80259ea:	2b02      	cmp	r3, #2
 80259ec:	d105      	bne.n	80259fa <APP_THREAD_SendCoapMsg+0xba>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 80259ee:	2202      	movs	r2, #2
 80259f0:	2100      	movs	r1, #0
 80259f2:	4849      	ldr	r0, [pc, #292]	; (8025b18 <APP_THREAD_SendCoapMsg+0x1d8>)
 80259f4:	f7fd f8d5 	bl	8022ba2 <otCoapHeaderInit>
 80259f8:	e02e      	b.n	8025a58 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 80259fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80259fe:	2b00      	cmp	r3, #0
 8025a00:	d109      	bne.n	8025a16 <APP_THREAD_SendCoapMsg+0xd6>
 8025a02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025a06:	2b03      	cmp	r3, #3
 8025a08:	d105      	bne.n	8025a16 <APP_THREAD_SendCoapMsg+0xd6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8025a0a:	2203      	movs	r2, #3
 8025a0c:	2110      	movs	r1, #16
 8025a0e:	4842      	ldr	r0, [pc, #264]	; (8025b18 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025a10:	f7fd f8c7 	bl	8022ba2 <otCoapHeaderInit>
 8025a14:	e020      	b.n	8025a58 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8025a16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025a1a:	2b00      	cmp	r3, #0
 8025a1c:	d109      	bne.n	8025a32 <APP_THREAD_SendCoapMsg+0xf2>
 8025a1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025a22:	2b01      	cmp	r3, #1
 8025a24:	d105      	bne.n	8025a32 <APP_THREAD_SendCoapMsg+0xf2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8025a26:	2201      	movs	r2, #1
 8025a28:	2110      	movs	r1, #16
 8025a2a:	483b      	ldr	r0, [pc, #236]	; (8025b18 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025a2c:	f7fd f8b9 	bl	8022ba2 <otCoapHeaderInit>
 8025a30:	e012      	b.n	8025a58 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8025a32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025a36:	2b00      	cmp	r3, #0
 8025a38:	d109      	bne.n	8025a4e <APP_THREAD_SendCoapMsg+0x10e>
 8025a3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025a3e:	2b02      	cmp	r3, #2
 8025a40:	d105      	bne.n	8025a4e <APP_THREAD_SendCoapMsg+0x10e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8025a42:	2202      	movs	r2, #2
 8025a44:	2110      	movs	r1, #16
 8025a46:	4834      	ldr	r0, [pc, #208]	; (8025b18 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025a48:	f7fd f8ab 	bl	8022ba2 <otCoapHeaderInit>
 8025a4c:	e004      	b.n	8025a58 <APP_THREAD_SendCoapMsg+0x118>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8025a4e:	2102      	movs	r1, #2
 8025a50:	4831      	ldr	r0, [pc, #196]	; (8025b18 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025a52:	f7fd f90f 	bl	8022c74 <otCoapHeaderGenerateToken>
 8025a56:	e053      	b.n	8025b00 <APP_THREAD_SendCoapMsg+0x1c0>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8025a58:	6839      	ldr	r1, [r7, #0]
 8025a5a:	482f      	ldr	r0, [pc, #188]	; (8025b18 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025a5c:	f7fd f96d 	bl	8022d3a <otCoapHeaderAppendUriPathOptions>
 8025a60:	4603      	mov	r3, r0
 8025a62:	461a      	mov	r2, r3
 8025a64:	4b2d      	ldr	r3, [pc, #180]	; (8025b1c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025a66:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8025a68:	212a      	movs	r1, #42	; 0x2a
 8025a6a:	482b      	ldr	r0, [pc, #172]	; (8025b18 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025a6c:	f7fd f932 	bl	8022cd4 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header);
 8025a70:	4829      	ldr	r0, [pc, #164]	; (8025b18 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025a72:	f7fd f994 	bl	8022d9e <otCoapHeaderSetPayloadMarker>

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8025a76:	4928      	ldr	r1, [pc, #160]	; (8025b18 <APP_THREAD_SendCoapMsg+0x1d8>)
 8025a78:	2000      	movs	r0, #0
 8025a7a:	f7fd fad3 	bl	8023024 <otCoapNewMessage>
 8025a7e:	4602      	mov	r2, r0
 8025a80:	4b27      	ldr	r3, [pc, #156]	; (8025b20 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025a82:	601a      	str	r2, [r3, #0]
		if (pOT_Message == NULL)
 8025a84:	4b26      	ldr	r3, [pc, #152]	; (8025b20 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025a86:	681b      	ldr	r3, [r3, #0]
 8025a88:	2b00      	cmp	r3, #0
 8025a8a:	d100      	bne.n	8025a8e <APP_THREAD_SendCoapMsg+0x14e>
			while (1);
 8025a8c:	e7fe      	b.n	8025a8c <APP_THREAD_SendCoapMsg+0x14c>

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8025a8e:	897b      	ldrh	r3, [r7, #10]
 8025a90:	2b00      	cmp	r3, #0
 8025a92:	d00b      	beq.n	8025aac <APP_THREAD_SendCoapMsg+0x16c>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8025a94:	4b22      	ldr	r3, [pc, #136]	; (8025b20 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025a96:	681b      	ldr	r3, [r3, #0]
 8025a98:	897a      	ldrh	r2, [r7, #10]
 8025a9a:	68f9      	ldr	r1, [r7, #12]
 8025a9c:	4618      	mov	r0, r3
 8025a9e:	f7fd fdb9 	bl	8023614 <otMessageAppend>
 8025aa2:	4603      	mov	r3, r0
 8025aa4:	461a      	mov	r2, r3
 8025aa6:	4b1d      	ldr	r3, [pc, #116]	; (8025b1c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025aa8:	701a      	strb	r2, [r3, #0]
 8025aaa:	e00a      	b.n	8025ac2 <APP_THREAD_SendCoapMsg+0x182>
		}else{
			error = otMessageAppend(pOT_Message, empty_message, 10);
 8025aac:	4b1c      	ldr	r3, [pc, #112]	; (8025b20 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025aae:	681b      	ldr	r3, [r3, #0]
 8025ab0:	220a      	movs	r2, #10
 8025ab2:	491c      	ldr	r1, [pc, #112]	; (8025b24 <APP_THREAD_SendCoapMsg+0x1e4>)
 8025ab4:	4618      	mov	r0, r3
 8025ab6:	f7fd fdad 	bl	8023614 <otMessageAppend>
 8025aba:	4603      	mov	r3, r0
 8025abc:	461a      	mov	r2, r3
 8025abe:	4b17      	ldr	r3, [pc, #92]	; (8025b1c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025ac0:	701a      	strb	r2, [r3, #0]
		}

			  if (error != OT_ERROR_NONE) while(1);
 8025ac2:	4b16      	ldr	r3, [pc, #88]	; (8025b1c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025ac4:	781b      	ldrb	r3, [r3, #0]
 8025ac6:	2b00      	cmp	r3, #0
 8025ac8:	d000      	beq.n	8025acc <APP_THREAD_SendCoapMsg+0x18c>
 8025aca:	e7fe      	b.n	8025aca <APP_THREAD_SendCoapMsg+0x18a>

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 8025acc:	4b14      	ldr	r3, [pc, #80]	; (8025b20 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025ace:	6819      	ldr	r1, [r3, #0]
 8025ad0:	2300      	movs	r3, #0
 8025ad2:	9300      	str	r3, [sp, #0]
 8025ad4:	2300      	movs	r3, #0
 8025ad6:	4a0c      	ldr	r2, [pc, #48]	; (8025b08 <APP_THREAD_SendCoapMsg+0x1c8>)
 8025ad8:	2000      	movs	r0, #0
 8025ada:	f7fd fad1 	bl	8023080 <otCoapSendRequest>
 8025ade:	4603      	mov	r3, r0
 8025ae0:	461a      	mov	r2, r3
 8025ae2:	4b0e      	ldr	r3, [pc, #56]	; (8025b1c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025ae4:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8025ae6:	4b0d      	ldr	r3, [pc, #52]	; (8025b1c <APP_THREAD_SendCoapMsg+0x1dc>)
 8025ae8:	781b      	ldrb	r3, [r3, #0]
 8025aea:	2b00      	cmp	r3, #0
 8025aec:	d008      	beq.n	8025b00 <APP_THREAD_SendCoapMsg+0x1c0>
 8025aee:	4b0c      	ldr	r3, [pc, #48]	; (8025b20 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025af0:	681b      	ldr	r3, [r3, #0]
 8025af2:	2b00      	cmp	r3, #0
 8025af4:	d004      	beq.n	8025b00 <APP_THREAD_SendCoapMsg+0x1c0>
			otMessageFree(pOT_Message);
 8025af6:	4b0a      	ldr	r3, [pc, #40]	; (8025b20 <APP_THREAD_SendCoapMsg+0x1e0>)
 8025af8:	681b      	ldr	r3, [r3, #0]
 8025afa:	4618      	mov	r0, r3
 8025afc:	f7fd fd31 	bl	8023562 <otMessageFree>
		}

	} while (false);
}
 8025b00:	3714      	adds	r7, #20
 8025b02:	46bd      	mov	sp, r7
 8025b04:	bd90      	pop	{r4, r7, pc}
 8025b06:	bf00      	nop
 8025b08:	20027628 	.word	0x20027628
 8025b0c:	200276f0 	.word	0x200276f0
 8025b10:	08028884 	.word	0x08028884
 8025b14:	20028924 	.word	0x20028924
 8025b18:	20027654 	.word	0x20027654
 8025b1c:	200276e8 	.word	0x200276e8
 8025b20:	200276e4 	.word	0x200276e4
 8025b24:	20000138 	.word	0x20000138

08025b28 <APP_THREAD_SendCoapMsgForBorderSync>:

static void APP_THREAD_SendCoapMsgForBorderSync(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8025b28:	b590      	push	{r4, r7, lr}
 8025b2a:	b087      	sub	sp, #28
 8025b2c:	af02      	add	r7, sp, #8
 8025b2e:	60f8      	str	r0, [r7, #12]
 8025b30:	607a      	str	r2, [r7, #4]
 8025b32:	603b      	str	r3, [r7, #0]
 8025b34:	460b      	mov	r3, r1
 8025b36:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8025b38:	222c      	movs	r2, #44	; 0x2c
 8025b3a:	2100      	movs	r1, #0
 8025b3c:	4864      	ldr	r0, [pc, #400]	; (8025cd0 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025b3e:	f001 f87c 	bl	8026c3a <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed


		memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8025b42:	4b63      	ldr	r3, [pc, #396]	; (8025cd0 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025b44:	4a63      	ldr	r2, [pc, #396]	; (8025cd4 <APP_THREAD_SendCoapMsgForBorderSync+0x1ac>)
 8025b46:	f103 0410 	add.w	r4, r3, #16
 8025b4a:	4613      	mov	r3, r2
 8025b4c:	6818      	ldr	r0, [r3, #0]
 8025b4e:	6859      	ldr	r1, [r3, #4]
 8025b50:	689a      	ldr	r2, [r3, #8]
 8025b52:	68db      	ldr	r3, [r3, #12]
 8025b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8025b56:	4b5e      	ldr	r3, [pc, #376]	; (8025cd0 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025b58:	2201      	movs	r2, #1
 8025b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8025b5e:	4b5c      	ldr	r3, [pc, #368]	; (8025cd0 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025b60:	f241 6233 	movw	r2, #5683	; 0x1633
 8025b64:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8025b66:	4b5a      	ldr	r3, [pc, #360]	; (8025cd0 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025b68:	2240      	movs	r2, #64	; 0x40
 8025b6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8025b6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025b72:	2b00      	cmp	r3, #0
 8025b74:	d009      	beq.n	8025b8a <APP_THREAD_SendCoapMsgForBorderSync+0x62>
 8025b76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025b7a:	2b03      	cmp	r3, #3
 8025b7c:	d105      	bne.n	8025b8a <APP_THREAD_SendCoapMsgForBorderSync+0x62>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8025b7e:	2203      	movs	r2, #3
 8025b80:	2100      	movs	r1, #0
 8025b82:	4855      	ldr	r0, [pc, #340]	; (8025cd8 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025b84:	f7fd f80d 	bl	8022ba2 <otCoapHeaderInit>
 8025b88:	e04a      	b.n	8025c20 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8025b8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025b8e:	2b00      	cmp	r3, #0
 8025b90:	d009      	beq.n	8025ba6 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
 8025b92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025b96:	2b01      	cmp	r3, #1
 8025b98:	d105      	bne.n	8025ba6 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8025b9a:	2201      	movs	r2, #1
 8025b9c:	2100      	movs	r1, #0
 8025b9e:	484e      	ldr	r0, [pc, #312]	; (8025cd8 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025ba0:	f7fc ffff 	bl	8022ba2 <otCoapHeaderInit>
 8025ba4:	e03c      	b.n	8025c20 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8025ba6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	d009      	beq.n	8025bc2 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
 8025bae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025bb2:	2b02      	cmp	r3, #2
 8025bb4:	d105      	bne.n	8025bc2 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8025bb6:	2202      	movs	r2, #2
 8025bb8:	2100      	movs	r1, #0
 8025bba:	4847      	ldr	r0, [pc, #284]	; (8025cd8 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025bbc:	f7fc fff1 	bl	8022ba2 <otCoapHeaderInit>
 8025bc0:	e02e      	b.n	8025c20 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8025bc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025bc6:	2b00      	cmp	r3, #0
 8025bc8:	d109      	bne.n	8025bde <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
 8025bca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025bce:	2b03      	cmp	r3, #3
 8025bd0:	d105      	bne.n	8025bde <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8025bd2:	2203      	movs	r2, #3
 8025bd4:	2110      	movs	r1, #16
 8025bd6:	4840      	ldr	r0, [pc, #256]	; (8025cd8 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025bd8:	f7fc ffe3 	bl	8022ba2 <otCoapHeaderInit>
 8025bdc:	e020      	b.n	8025c20 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8025bde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025be2:	2b00      	cmp	r3, #0
 8025be4:	d109      	bne.n	8025bfa <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
 8025be6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025bea:	2b01      	cmp	r3, #1
 8025bec:	d105      	bne.n	8025bfa <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8025bee:	2201      	movs	r2, #1
 8025bf0:	2110      	movs	r1, #16
 8025bf2:	4839      	ldr	r0, [pc, #228]	; (8025cd8 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025bf4:	f7fc ffd5 	bl	8022ba2 <otCoapHeaderInit>
 8025bf8:	e012      	b.n	8025c20 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8025bfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025bfe:	2b00      	cmp	r3, #0
 8025c00:	d109      	bne.n	8025c16 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
 8025c02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025c06:	2b02      	cmp	r3, #2
 8025c08:	d105      	bne.n	8025c16 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8025c0a:	2202      	movs	r2, #2
 8025c0c:	2110      	movs	r1, #16
 8025c0e:	4832      	ldr	r0, [pc, #200]	; (8025cd8 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025c10:	f7fc ffc7 	bl	8022ba2 <otCoapHeaderInit>
 8025c14:	e004      	b.n	8025c20 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8025c16:	2102      	movs	r1, #2
 8025c18:	482f      	ldr	r0, [pc, #188]	; (8025cd8 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025c1a:	f7fd f82b 	bl	8022c74 <otCoapHeaderGenerateToken>
 8025c1e:	e053      	b.n	8025cc8 <APP_THREAD_SendCoapMsgForBorderSync+0x1a0>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8025c20:	6839      	ldr	r1, [r7, #0]
 8025c22:	482d      	ldr	r0, [pc, #180]	; (8025cd8 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025c24:	f7fd f889 	bl	8022d3a <otCoapHeaderAppendUriPathOptions>
 8025c28:	4603      	mov	r3, r0
 8025c2a:	461a      	mov	r2, r3
 8025c2c:	4b2b      	ldr	r3, [pc, #172]	; (8025cdc <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025c2e:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8025c30:	212a      	movs	r1, #42	; 0x2a
 8025c32:	4829      	ldr	r0, [pc, #164]	; (8025cd8 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025c34:	f7fd f84e 	bl	8022cd4 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header);
 8025c38:	4827      	ldr	r0, [pc, #156]	; (8025cd8 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025c3a:	f7fd f8b0 	bl	8022d9e <otCoapHeaderSetPayloadMarker>

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8025c3e:	4926      	ldr	r1, [pc, #152]	; (8025cd8 <APP_THREAD_SendCoapMsgForBorderSync+0x1b0>)
 8025c40:	2000      	movs	r0, #0
 8025c42:	f7fd f9ef 	bl	8023024 <otCoapNewMessage>
 8025c46:	4602      	mov	r2, r0
 8025c48:	4b25      	ldr	r3, [pc, #148]	; (8025ce0 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025c4a:	601a      	str	r2, [r3, #0]
		if (pOT_Message == NULL)
 8025c4c:	4b24      	ldr	r3, [pc, #144]	; (8025ce0 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025c4e:	681b      	ldr	r3, [r3, #0]
 8025c50:	2b00      	cmp	r3, #0
 8025c52:	d100      	bne.n	8025c56 <APP_THREAD_SendCoapMsgForBorderSync+0x12e>
			while (1);
 8025c54:	e7fe      	b.n	8025c54 <APP_THREAD_SendCoapMsgForBorderSync+0x12c>

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8025c56:	897b      	ldrh	r3, [r7, #10]
 8025c58:	2b00      	cmp	r3, #0
 8025c5a:	d00b      	beq.n	8025c74 <APP_THREAD_SendCoapMsgForBorderSync+0x14c>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8025c5c:	4b20      	ldr	r3, [pc, #128]	; (8025ce0 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025c5e:	681b      	ldr	r3, [r3, #0]
 8025c60:	897a      	ldrh	r2, [r7, #10]
 8025c62:	68f9      	ldr	r1, [r7, #12]
 8025c64:	4618      	mov	r0, r3
 8025c66:	f7fd fcd5 	bl	8023614 <otMessageAppend>
 8025c6a:	4603      	mov	r3, r0
 8025c6c:	461a      	mov	r2, r3
 8025c6e:	4b1b      	ldr	r3, [pc, #108]	; (8025cdc <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025c70:	701a      	strb	r2, [r3, #0]
 8025c72:	e00a      	b.n	8025c8a <APP_THREAD_SendCoapMsgForBorderSync+0x162>
		}else{
			error = otMessageAppend(pOT_Message, empty_message, 10);
 8025c74:	4b1a      	ldr	r3, [pc, #104]	; (8025ce0 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025c76:	681b      	ldr	r3, [r3, #0]
 8025c78:	220a      	movs	r2, #10
 8025c7a:	491a      	ldr	r1, [pc, #104]	; (8025ce4 <APP_THREAD_SendCoapMsgForBorderSync+0x1bc>)
 8025c7c:	4618      	mov	r0, r3
 8025c7e:	f7fd fcc9 	bl	8023614 <otMessageAppend>
 8025c82:	4603      	mov	r3, r0
 8025c84:	461a      	mov	r2, r3
 8025c86:	4b15      	ldr	r3, [pc, #84]	; (8025cdc <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025c88:	701a      	strb	r2, [r3, #0]
		}

			  if (error != OT_ERROR_NONE) while(1);
 8025c8a:	4b14      	ldr	r3, [pc, #80]	; (8025cdc <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025c8c:	781b      	ldrb	r3, [r3, #0]
 8025c8e:	2b00      	cmp	r3, #0
 8025c90:	d000      	beq.n	8025c94 <APP_THREAD_SendCoapMsgForBorderSync+0x16c>
 8025c92:	e7fe      	b.n	8025c92 <APP_THREAD_SendCoapMsgForBorderSync+0x16a>

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL, pOT_Message, &OT_MessageInfo, &APP_THREAD_DummyRespHandler,
 8025c94:	4b12      	ldr	r3, [pc, #72]	; (8025ce0 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025c96:	6819      	ldr	r1, [r3, #0]
 8025c98:	4b13      	ldr	r3, [pc, #76]	; (8025ce8 <APP_THREAD_SendCoapMsgForBorderSync+0x1c0>)
 8025c9a:	9300      	str	r3, [sp, #0]
 8025c9c:	4b13      	ldr	r3, [pc, #76]	; (8025cec <APP_THREAD_SendCoapMsgForBorderSync+0x1c4>)
 8025c9e:	4a0c      	ldr	r2, [pc, #48]	; (8025cd0 <APP_THREAD_SendCoapMsgForBorderSync+0x1a8>)
 8025ca0:	2000      	movs	r0, #0
 8025ca2:	f7fd f9ed 	bl	8023080 <otCoapSendRequest>
 8025ca6:	4603      	mov	r3, r0
 8025ca8:	461a      	mov	r2, r3
 8025caa:	4b0c      	ldr	r3, [pc, #48]	; (8025cdc <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025cac:	701a      	strb	r2, [r3, #0]
				(void*) &APP_THREAD_CoapRespHandler_UpdateBorderRouter);



		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8025cae:	4b0b      	ldr	r3, [pc, #44]	; (8025cdc <APP_THREAD_SendCoapMsgForBorderSync+0x1b4>)
 8025cb0:	781b      	ldrb	r3, [r3, #0]
 8025cb2:	2b00      	cmp	r3, #0
 8025cb4:	d008      	beq.n	8025cc8 <APP_THREAD_SendCoapMsgForBorderSync+0x1a0>
 8025cb6:	4b0a      	ldr	r3, [pc, #40]	; (8025ce0 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025cb8:	681b      	ldr	r3, [r3, #0]
 8025cba:	2b00      	cmp	r3, #0
 8025cbc:	d004      	beq.n	8025cc8 <APP_THREAD_SendCoapMsgForBorderSync+0x1a0>
			otMessageFree(pOT_Message);
 8025cbe:	4b08      	ldr	r3, [pc, #32]	; (8025ce0 <APP_THREAD_SendCoapMsgForBorderSync+0x1b8>)
 8025cc0:	681b      	ldr	r3, [r3, #0]
 8025cc2:	4618      	mov	r0, r3
 8025cc4:	f7fd fc4d 	bl	8023562 <otMessageFree>
		}

	} while (false);

}
 8025cc8:	3714      	adds	r7, #20
 8025cca:	46bd      	mov	sp, r7
 8025ccc:	bd90      	pop	{r4, r7, pc}
 8025cce:	bf00      	nop
 8025cd0:	20027628 	.word	0x20027628
 8025cd4:	20028924 	.word	0x20028924
 8025cd8:	20027654 	.word	0x20027654
 8025cdc:	200276e8 	.word	0x200276e8
 8025ce0:	200276e4 	.word	0x200276e4
 8025ce4:	20000138 	.word	0x20000138
 8025ce8:	08024dbd 	.word	0x08024dbd
 8025cec:	08024da1 	.word	0x08024da1

08025cf0 <APP_THREAD_SendDataResponse>:
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo, void *message,
		uint16_t msgSize) {
 8025cf0:	b590      	push	{r4, r7, lr}
 8025cf2:	b087      	sub	sp, #28
 8025cf4:	af00      	add	r7, sp, #0
 8025cf6:	60f8      	str	r0, [r7, #12]
 8025cf8:	60b9      	str	r1, [r7, #8]
 8025cfa:	607a      	str	r2, [r7, #4]
 8025cfc:	807b      	strh	r3, [r7, #2]
	otError error = OT_ERROR_NONE;
 8025cfe:	2300      	movs	r3, #0
 8025d00:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8025d02:	2244      	movs	r2, #68	; 0x44
 8025d04:	2120      	movs	r1, #32
 8025d06:	4822      	ldr	r0, [pc, #136]	; (8025d90 <APP_THREAD_SendDataResponse+0xa0>)
 8025d08:	f7fc ff4b 	bl	8022ba2 <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8025d0c:	68f8      	ldr	r0, [r7, #12]
 8025d0e:	f7fd f900 	bl	8022f12 <otCoapHeaderGetMessageId>
 8025d12:	4603      	mov	r3, r0
 8025d14:	4619      	mov	r1, r3
 8025d16:	481e      	ldr	r0, [pc, #120]	; (8025d90 <APP_THREAD_SendDataResponse+0xa0>)
 8025d18:	f7fd f86f 	bl	8022dfa <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 8025d1c:	68f8      	ldr	r0, [r7, #12]
 8025d1e:	f7fd f954 	bl	8022fca <otCoapHeaderGetToken>
 8025d22:	4604      	mov	r4, r0
 8025d24:	68f8      	ldr	r0, [r7, #12]
 8025d26:	f7fd f922 	bl	8022f6e <otCoapHeaderGetTokenLength>
 8025d2a:	4603      	mov	r3, r0
 8025d2c:	461a      	mov	r2, r3
 8025d2e:	4621      	mov	r1, r4
 8025d30:	4817      	ldr	r0, [pc, #92]	; (8025d90 <APP_THREAD_SendDataResponse+0xa0>)
 8025d32:	f7fc ff6b 	bl	8022c0c <otCoapHeaderSetToken>

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8025d36:	4916      	ldr	r1, [pc, #88]	; (8025d90 <APP_THREAD_SendDataResponse+0xa0>)
 8025d38:	2000      	movs	r0, #0
 8025d3a:	f7fd f973 	bl	8023024 <otCoapNewMessage>
 8025d3e:	4602      	mov	r2, r0
 8025d40:	4b14      	ldr	r3, [pc, #80]	; (8025d94 <APP_THREAD_SendDataResponse+0xa4>)
 8025d42:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 8025d44:	887b      	ldrh	r3, [r7, #2]
 8025d46:	2b00      	cmp	r3, #0
 8025d48:	d008      	beq.n	8025d5c <APP_THREAD_SendDataResponse+0x6c>
		error = otMessageAppend(pOT_Message, message, msgSize);
 8025d4a:	4b12      	ldr	r3, [pc, #72]	; (8025d94 <APP_THREAD_SendDataResponse+0xa4>)
 8025d4c:	681b      	ldr	r3, [r3, #0]
 8025d4e:	887a      	ldrh	r2, [r7, #2]
 8025d50:	6879      	ldr	r1, [r7, #4]
 8025d52:	4618      	mov	r0, r3
 8025d54:	f7fd fc5e 	bl	8023614 <otMessageAppend>
 8025d58:	4603      	mov	r3, r0
 8025d5a:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8025d5c:	4b0d      	ldr	r3, [pc, #52]	; (8025d94 <APP_THREAD_SendDataResponse+0xa4>)
 8025d5e:	681b      	ldr	r3, [r3, #0]
 8025d60:	68ba      	ldr	r2, [r7, #8]
 8025d62:	4619      	mov	r1, r3
 8025d64:	2000      	movs	r0, #0
 8025d66:	f7fd fa24 	bl	80231b2 <otCoapSendResponse>
 8025d6a:	4603      	mov	r3, r0
 8025d6c:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8025d6e:	7dfb      	ldrb	r3, [r7, #23]
 8025d70:	2b00      	cmp	r3, #0
 8025d72:	d008      	beq.n	8025d86 <APP_THREAD_SendDataResponse+0x96>
 8025d74:	4b07      	ldr	r3, [pc, #28]	; (8025d94 <APP_THREAD_SendDataResponse+0xa4>)
 8025d76:	681b      	ldr	r3, [r3, #0]
 8025d78:	2b00      	cmp	r3, #0
 8025d7a:	d004      	beq.n	8025d86 <APP_THREAD_SendDataResponse+0x96>
		otMessageFree(pOT_Message);
 8025d7c:	4b05      	ldr	r3, [pc, #20]	; (8025d94 <APP_THREAD_SendDataResponse+0xa4>)
 8025d7e:	681b      	ldr	r3, [r3, #0]
 8025d80:	4618      	mov	r0, r3
 8025d82:	f7fd fbee 	bl	8023562 <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 8025d86:	bf00      	nop
 8025d88:	371c      	adds	r7, #28
 8025d8a:	46bd      	mov	sp, r7
 8025d8c:	bd90      	pop	{r4, r7, pc}
 8025d8e:	bf00      	nop
 8025d90:	20027654 	.word	0x20027654
 8025d94:	200276e4 	.word	0x200276e4

08025d98 <APP_THREAD_RegisterCmdBuffer>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer) {
 8025d98:	b480      	push	{r7}
 8025d9a:	b083      	sub	sp, #12
 8025d9c:	af00      	add	r7, sp, #0
 8025d9e:	6078      	str	r0, [r7, #4]
	p_thread_otcmdbuffer = p_buffer;
 8025da0:	4a04      	ldr	r2, [pc, #16]	; (8025db4 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8025da2:	687b      	ldr	r3, [r7, #4]
 8025da4:	6013      	str	r3, [r2, #0]
}
 8025da6:	bf00      	nop
 8025da8:	370c      	adds	r7, #12
 8025daa:	46bd      	mov	sp, r7
 8025dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025db0:	4770      	bx	lr
 8025db2:	bf00      	nop
 8025db4:	20027610 	.word	0x20027610

08025db8 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void) {
 8025db8:	b480      	push	{r7}
 8025dba:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8025dbc:	4b03      	ldr	r3, [pc, #12]	; (8025dcc <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8025dbe:	681b      	ldr	r3, [r3, #0]
 8025dc0:	330c      	adds	r3, #12
}
 8025dc2:	4618      	mov	r0, r3
 8025dc4:	46bd      	mov	sp, r7
 8025dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dca:	4770      	bx	lr
 8025dcc:	20027610 	.word	0x20027610

08025dd0 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void) {
 8025dd0:	b480      	push	{r7}
 8025dd2:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) ((TL_EvtPacket_t*) p_thread_otcmdbuffer)->evtserial.evt.payload;
 8025dd4:	4b03      	ldr	r3, [pc, #12]	; (8025de4 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8025dd6:	681b      	ldr	r3, [r3, #0]
 8025dd8:	330b      	adds	r3, #11
}
 8025dda:	4618      	mov	r0, r3
 8025ddc:	46bd      	mov	sp, r7
 8025dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025de2:	4770      	bx	lr
 8025de4:	20027610 	.word	0x20027610

08025de8 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void) {
 8025de8:	b480      	push	{r7}
 8025dea:	af00      	add	r7, sp, #0
	return (Thread_OT_Cmd_Request_t*) (p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8025dec:	4b03      	ldr	r3, [pc, #12]	; (8025dfc <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8025dee:	681b      	ldr	r3, [r3, #0]
 8025df0:	330b      	adds	r3, #11
}
 8025df2:	4618      	mov	r0, r3
 8025df4:	46bd      	mov	sp, r7
 8025df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dfa:	4770      	bx	lr
 8025dfc:	20027614 	.word	0x20027614

08025e00 <Ot_Cmd_Transfer>:
 *         M4 to the M0.
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void) {
 8025e00:	b580      	push	{r7, lr}
 8025e02:	b082      	sub	sp, #8
 8025e04:	af00      	add	r7, sp, #0
	/* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
	p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8025e06:	4b0f      	ldr	r3, [pc, #60]	; (8025e44 <Ot_Cmd_Transfer+0x44>)
 8025e08:	681b      	ldr	r3, [r3, #0]
 8025e0a:	2200      	movs	r2, #0
 8025e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8025e10:	725a      	strb	r2, [r3, #9]
 8025e12:	2200      	movs	r2, #0
 8025e14:	f042 0202 	orr.w	r2, r2, #2
 8025e18:	729a      	strb	r2, [r3, #10]
	/* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
	 * + ID (4 bytes) + Size (4 bytes) */
	uint32_t l_size = ((Thread_OT_Cmd_Request_t*) (p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8025e1a:	4b0a      	ldr	r3, [pc, #40]	; (8025e44 <Ot_Cmd_Transfer+0x44>)
 8025e1c:	681b      	ldr	r3, [r3, #0]
 8025e1e:	330c      	adds	r3, #12
 8025e20:	685b      	ldr	r3, [r3, #4]
 8025e22:	3302      	adds	r3, #2
 8025e24:	009b      	lsls	r3, r3, #2
 8025e26:	607b      	str	r3, [r7, #4]
	p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8025e28:	4b06      	ldr	r3, [pc, #24]	; (8025e44 <Ot_Cmd_Transfer+0x44>)
 8025e2a:	681b      	ldr	r3, [r3, #0]
 8025e2c:	687a      	ldr	r2, [r7, #4]
 8025e2e:	b2d2      	uxtb	r2, r2
 8025e30:	72da      	strb	r2, [r3, #11]

	TL_OT_SendCmd();
 8025e32:	f7fe fb19 	bl	8024468 <TL_OT_SendCmd>

	/* Wait completion of cmd */
	Wait_Getting_Ack_From_M0();
 8025e36:	f000 f829 	bl	8025e8c <Wait_Getting_Ack_From_M0>
}
 8025e3a:	bf00      	nop
 8025e3c:	3708      	adds	r7, #8
 8025e3e:	46bd      	mov	sp, r7
 8025e40:	bd80      	pop	{r7, pc}
 8025e42:	bf00      	nop
 8025e44:	20027610 	.word	0x20027610

08025e48 <TL_OT_CmdEvtReceived>:
 * @brief  This function is called when acknowledge from OT command is received from the M0+.
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived(TL_EvtPacket_t *Otbuffer) {
 8025e48:	b580      	push	{r7, lr}
 8025e4a:	b082      	sub	sp, #8
 8025e4c:	af00      	add	r7, sp, #0
 8025e4e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(Otbuffer);

	Receive_Ack_From_M0();
 8025e50:	f000 f82e 	bl	8025eb0 <Receive_Ack_From_M0>
}
 8025e54:	bf00      	nop
 8025e56:	3708      	adds	r7, #8
 8025e58:	46bd      	mov	sp, r7
 8025e5a:	bd80      	pop	{r7, pc}

08025e5c <TL_THREAD_NotReceived>:
 * @brief  This function is called when notification from M0+ is received.
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived(TL_EvtPacket_t *Notbuffer) {
 8025e5c:	b580      	push	{r7, lr}
 8025e5e:	b082      	sub	sp, #8
 8025e60:	af00      	add	r7, sp, #0
 8025e62:	6078      	str	r0, [r7, #4]
	p_thread_notif_M0_to_M4 = Notbuffer;
 8025e64:	4a04      	ldr	r2, [pc, #16]	; (8025e78 <TL_THREAD_NotReceived+0x1c>)
 8025e66:	687b      	ldr	r3, [r7, #4]
 8025e68:	6013      	str	r3, [r2, #0]

	Receive_Notification_From_M0();
 8025e6a:	f000 f82d 	bl	8025ec8 <Receive_Notification_From_M0>
}
 8025e6e:	bf00      	nop
 8025e70:	3708      	adds	r7, #8
 8025e72:	46bd      	mov	sp, r7
 8025e74:	bd80      	pop	{r7, pc}
 8025e76:	bf00      	nop
 8025e78:	20027614 	.word	0x20027614

08025e7c <Pre_OtCmdProcessing>:
 *         there are no notifications coming from the M0 core which are
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_OtCmdProcessing(void) {
 8025e7c:	b480      	push	{r7}
 8025e7e:	af00      	add	r7, sp, #0

}
 8025e80:	bf00      	nop
 8025e82:	46bd      	mov	sp, r7
 8025e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e88:	4770      	bx	lr
	...

08025e8c <Wait_Getting_Ack_From_M0>:
 * @brief  This function waits for getting an acknowledgment from the M0.
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void) {
 8025e8c:	b480      	push	{r7}
 8025e8e:	af00      	add	r7, sp, #0
	while (FlagReceiveAckFromM0 == 0) {
 8025e90:	bf00      	nop
 8025e92:	4b06      	ldr	r3, [pc, #24]	; (8025eac <Wait_Getting_Ack_From_M0+0x20>)
 8025e94:	681b      	ldr	r3, [r3, #0]
 8025e96:	2b00      	cmp	r3, #0
 8025e98:	d0fb      	beq.n	8025e92 <Wait_Getting_Ack_From_M0+0x6>
	}
	FlagReceiveAckFromM0 = 0;
 8025e9a:	4b04      	ldr	r3, [pc, #16]	; (8025eac <Wait_Getting_Ack_From_M0+0x20>)
 8025e9c:	2200      	movs	r2, #0
 8025e9e:	601a      	str	r2, [r3, #0]
}
 8025ea0:	bf00      	nop
 8025ea2:	46bd      	mov	sp, r7
 8025ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ea8:	4770      	bx	lr
 8025eaa:	bf00      	nop
 8025eac:	2002761c 	.word	0x2002761c

08025eb0 <Receive_Ack_From_M0>:
 *         Each command send by the M4 to the M0 are acknowledged.
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void) {
 8025eb0:	b480      	push	{r7}
 8025eb2:	af00      	add	r7, sp, #0
	FlagReceiveAckFromM0 = 1;
 8025eb4:	4b03      	ldr	r3, [pc, #12]	; (8025ec4 <Receive_Ack_From_M0+0x14>)
 8025eb6:	2201      	movs	r2, #1
 8025eb8:	601a      	str	r2, [r3, #0]
}
 8025eba:	bf00      	nop
 8025ebc:	46bd      	mov	sp, r7
 8025ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ec2:	4770      	bx	lr
 8025ec4:	2002761c 	.word	0x2002761c

08025ec8 <Receive_Notification_From_M0>:
 * @brief  Receive a notification from the M0+ through the IPCC.
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void) {
 8025ec8:	b580      	push	{r7, lr}
 8025eca:	af00      	add	r7, sp, #0
	CptReceiveMsgFromM0++;
 8025ecc:	4b06      	ldr	r3, [pc, #24]	; (8025ee8 <Receive_Notification_From_M0+0x20>)
 8025ece:	681b      	ldr	r3, [r3, #0]
 8025ed0:	3301      	adds	r3, #1
 8025ed2:	4a05      	ldr	r2, [pc, #20]	; (8025ee8 <Receive_Notification_From_M0+0x20>)
 8025ed4:	6013      	str	r3, [r2, #0]
	osThreadFlagsSet(OsTaskMsgM0ToM4Id, 1);
 8025ed6:	4b05      	ldr	r3, [pc, #20]	; (8025eec <Receive_Notification_From_M0+0x24>)
 8025ed8:	681b      	ldr	r3, [r3, #0]
 8025eda:	2101      	movs	r1, #1
 8025edc:	4618      	mov	r0, r3
 8025ede:	f7f8 fb13 	bl	801e508 <osThreadFlagsSet>
}
 8025ee2:	bf00      	nop
 8025ee4:	bd80      	pop	{r7, pc}
 8025ee6:	bf00      	nop
 8025ee8:	20027618 	.word	0x20027618
 8025eec:	20027620 	.word	0x20027620

08025ef0 <Send_CLI_To_M0>:
/**
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void) {
 8025ef0:	b580      	push	{r7, lr}
 8025ef2:	af00      	add	r7, sp, #0
	memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8025ef4:	22ff      	movs	r2, #255	; 0xff
 8025ef6:	2100      	movs	r1, #0
 8025ef8:	4812      	ldr	r0, [pc, #72]	; (8025f44 <Send_CLI_To_M0+0x54>)
 8025efa:	f000 fe9e 	bl	8026c3a <memset>
	memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8025efe:	4b12      	ldr	r3, [pc, #72]	; (8025f48 <Send_CLI_To_M0+0x58>)
 8025f00:	881b      	ldrh	r3, [r3, #0]
 8025f02:	b29b      	uxth	r3, r3
 8025f04:	461a      	mov	r2, r3
 8025f06:	4911      	ldr	r1, [pc, #68]	; (8025f4c <Send_CLI_To_M0+0x5c>)
 8025f08:	480e      	ldr	r0, [pc, #56]	; (8025f44 <Send_CLI_To_M0+0x54>)
 8025f0a:	f000 fe8b 	bl	8026c24 <memcpy>
	ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8025f0e:	4b0e      	ldr	r3, [pc, #56]	; (8025f48 <Send_CLI_To_M0+0x58>)
 8025f10:	881b      	ldrh	r3, [r3, #0]
 8025f12:	b29b      	uxth	r3, r3
 8025f14:	b2da      	uxtb	r2, r3
 8025f16:	4b0e      	ldr	r3, [pc, #56]	; (8025f50 <Send_CLI_To_M0+0x60>)
 8025f18:	72da      	strb	r2, [r3, #11]
	ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8025f1a:	4b0d      	ldr	r3, [pc, #52]	; (8025f50 <Send_CLI_To_M0+0x60>)
 8025f1c:	2200      	movs	r2, #0
 8025f1e:	725a      	strb	r2, [r3, #9]
 8025f20:	2200      	movs	r2, #0
 8025f22:	729a      	strb	r2, [r3, #10]

	/* Clear receive buffer, character counter and command complete */
	CptReceiveCmdFromUser = 0;
 8025f24:	4b0b      	ldr	r3, [pc, #44]	; (8025f54 <Send_CLI_To_M0+0x64>)
 8025f26:	2200      	movs	r2, #0
 8025f28:	801a      	strh	r2, [r3, #0]
	indexReceiveChar = 0;
 8025f2a:	4b07      	ldr	r3, [pc, #28]	; (8025f48 <Send_CLI_To_M0+0x58>)
 8025f2c:	2200      	movs	r2, #0
 8025f2e:	801a      	strh	r2, [r3, #0]
	memset(CommandString, 0, C_SIZE_CMD_STRING);
 8025f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025f34:	2100      	movs	r1, #0
 8025f36:	4805      	ldr	r0, [pc, #20]	; (8025f4c <Send_CLI_To_M0+0x5c>)
 8025f38:	f000 fe7f 	bl	8026c3a <memset>

	TL_CLI_SendCmd();
 8025f3c:	f7fe faa2 	bl	8024484 <TL_CLI_SendCmd>
}
 8025f40:	bf00      	nop
 8025f42:	bd80      	pop	{r7, pc}
 8025f44:	20030a5c 	.word	0x20030a5c
 8025f48:	2002760c 	.word	0x2002760c
 8025f4c:	2002750c 	.word	0x2002750c
 8025f50:	20030a50 	.word	0x20030a50
 8025f54:	2002760e 	.word	0x2002760e

08025f58 <Send_CLI_Ack_For_OT>:
/**
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void) {
 8025f58:	b580      	push	{r7, lr}
 8025f5a:	af00      	add	r7, sp, #0

	/* Notify M0 that characters have been sent to UART */
	TL_THREAD_CliSendAck();
 8025f5c:	f7fe faae 	bl	80244bc <TL_THREAD_CliSendAck>
}
 8025f60:	bf00      	nop
 8025f62:	bd80      	pop	{r7, pc}

08025f64 <APP_THREAD_Init_UART_CLI>:
/**
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void) {
 8025f64:	b580      	push	{r7, lr}
 8025f66:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
	OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL, &ThreadCliProcess_attr);
 8025f68:	4a04      	ldr	r2, [pc, #16]	; (8025f7c <APP_THREAD_Init_UART_CLI+0x18>)
 8025f6a:	2100      	movs	r1, #0
 8025f6c:	4804      	ldr	r0, [pc, #16]	; (8025f80 <APP_THREAD_Init_UART_CLI+0x1c>)
 8025f6e:	f7f8 fa1f 	bl	801e3b0 <osThreadNew>
 8025f72:	4602      	mov	r2, r0
 8025f74:	4b03      	ldr	r3, [pc, #12]	; (8025f84 <APP_THREAD_Init_UART_CLI+0x20>)
 8025f76:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8025f78:	bf00      	nop
 8025f7a:	bd80      	pop	{r7, pc}
 8025f7c:	08028ca0 	.word	0x08028ca0
 8025f80:	08024c97 	.word	0x08024c97
 8025f84:	20027624 	.word	0x20027624

08025f88 <APP_THREAD_TL_THREAD_INIT>:
/**
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void) {
 8025f88:	b580      	push	{r7, lr}
 8025f8a:	af00      	add	r7, sp, #0
	ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*) &ThreadOtCmdBuffer;
 8025f8c:	4b06      	ldr	r3, [pc, #24]	; (8025fa8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8025f8e:	4a07      	ldr	r2, [pc, #28]	; (8025fac <APP_THREAD_TL_THREAD_INIT+0x24>)
 8025f90:	601a      	str	r2, [r3, #0]
	ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*) ThreadNotifRspEvtBuffer;
 8025f92:	4b05      	ldr	r3, [pc, #20]	; (8025fa8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8025f94:	4a06      	ldr	r2, [pc, #24]	; (8025fb0 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8025f96:	609a      	str	r2, [r3, #8]
	ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*) &ThreadCliCmdBuffer;
 8025f98:	4b03      	ldr	r3, [pc, #12]	; (8025fa8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8025f9a:	4a06      	ldr	r2, [pc, #24]	; (8025fb4 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8025f9c:	605a      	str	r2, [r3, #4]

	TL_THREAD_Init(&ThreadConfigBuffer);
 8025f9e:	4802      	ldr	r0, [pc, #8]	; (8025fa8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8025fa0:	f7fe fa46 	bl	8024430 <TL_THREAD_Init>
}
 8025fa4:	bf00      	nop
 8025fa6:	bd80      	pop	{r7, pc}
 8025fa8:	200300b8 	.word	0x200300b8
 8025fac:	20030838 	.word	0x20030838
 8025fb0:	20030944 	.word	0x20030944
 8025fb4:	20030a50 	.word	0x20030a50

08025fb8 <TL_THREAD_CliNotReceived>:
 * @brief  This function is called when notification on CLI TL Channel from M0+ is received.
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived(TL_EvtPacket_t *Notbuffer) {
 8025fb8:	b580      	push	{r7, lr}
 8025fba:	b084      	sub	sp, #16
 8025fbc:	af00      	add	r7, sp, #0
 8025fbe:	6078      	str	r0, [r7, #4]
	TL_CmdPacket_t *l_CliBuffer = (TL_CmdPacket_t*) Notbuffer;
 8025fc0:	687b      	ldr	r3, [r7, #4]
 8025fc2:	60fb      	str	r3, [r7, #12]
	uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8025fc4:	68fb      	ldr	r3, [r7, #12]
 8025fc6:	7adb      	ldrb	r3, [r3, #11]
 8025fc8:	72fb      	strb	r3, [r7, #11]

	/* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
	if (strcmp((const char*) l_CliBuffer->cmdserial.cmd.payload, "> ") != 0) {
 8025fca:	68fb      	ldr	r3, [r7, #12]
 8025fcc:	330c      	adds	r3, #12
 8025fce:	4906      	ldr	r1, [pc, #24]	; (8025fe8 <TL_THREAD_CliNotReceived+0x30>)
 8025fd0:	4618      	mov	r0, r3
 8025fd2:	f7ea f8d5 	bl	8010180 <strcmp>
 8025fd6:	4603      	mov	r3, r0
 8025fd8:	2b00      	cmp	r3, #0
 8025fda:	d101      	bne.n	8025fe0 <TL_THREAD_CliNotReceived+0x28>
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
	} else {
		Send_CLI_Ack_For_OT();
 8025fdc:	f7ff ffbc 	bl	8025f58 <Send_CLI_Ack_For_OT>
	}
}
 8025fe0:	bf00      	nop
 8025fe2:	3710      	adds	r7, #16
 8025fe4:	46bd      	mov	sp, r7
 8025fe6:	bd80      	pop	{r7, pc}
 8025fe8:	080288a4 	.word	0x080288a4

08025fec <APP_THREAD_ProcessMsgM0ToM4>:
/**
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void) {
 8025fec:	b580      	push	{r7, lr}
 8025fee:	af00      	add	r7, sp, #0
	if (CptReceiveMsgFromM0 != 0) {
 8025ff0:	4b09      	ldr	r3, [pc, #36]	; (8026018 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8025ff2:	681b      	ldr	r3, [r3, #0]
 8025ff4:	2b00      	cmp	r3, #0
 8025ff6:	d00d      	beq.n	8026014 <APP_THREAD_ProcessMsgM0ToM4+0x28>
		/* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
		if (CptReceiveMsgFromM0 > 1U) {
 8025ff8:	4b07      	ldr	r3, [pc, #28]	; (8026018 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8025ffa:	681b      	ldr	r3, [r3, #0]
 8025ffc:	2b01      	cmp	r3, #1
 8025ffe:	d904      	bls.n	802600a <APP_THREAD_ProcessMsgM0ToM4+0x1e>
			APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8026000:	2100      	movs	r1, #0
 8026002:	2000      	movs	r0, #0
 8026004:	f7fe fbb6 	bl	8024774 <APP_THREAD_Error>
 8026008:	e001      	b.n	802600e <APP_THREAD_ProcessMsgM0ToM4+0x22>
		} else {
			OpenThread_CallBack_Processing();
 802600a:	f7fd fb77 	bl	80236fc <OpenThread_CallBack_Processing>
		}
		/* Reset counter */
		CptReceiveMsgFromM0 = 0;
 802600e:	4b02      	ldr	r3, [pc, #8]	; (8026018 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8026010:	2200      	movs	r2, #0
 8026012:	601a      	str	r2, [r3, #0]
	}
}
 8026014:	bf00      	nop
 8026016:	bd80      	pop	{r7, pc}
 8026018:	20027618 	.word	0x20027618

0802601c <LL_C2_EXTI_EnableEvent_32_63>:
{
 802601c:	b480      	push	{r7}
 802601e:	b083      	sub	sp, #12
 8026020:	af00      	add	r7, sp, #0
 8026022:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8026024:	4b06      	ldr	r3, [pc, #24]	; (8026040 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8026026:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 802602a:	4905      	ldr	r1, [pc, #20]	; (8026040 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 802602c:	687b      	ldr	r3, [r7, #4]
 802602e:	4313      	orrs	r3, r2
 8026030:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8026034:	bf00      	nop
 8026036:	370c      	adds	r7, #12
 8026038:	46bd      	mov	sp, r7
 802603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802603e:	4770      	bx	lr
 8026040:	58000800 	.word	0x58000800

08026044 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8026044:	b480      	push	{r7}
 8026046:	b083      	sub	sp, #12
 8026048:	af00      	add	r7, sp, #0
 802604a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 802604c:	4b05      	ldr	r3, [pc, #20]	; (8026064 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 802604e:	6a1a      	ldr	r2, [r3, #32]
 8026050:	4904      	ldr	r1, [pc, #16]	; (8026064 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8026052:	687b      	ldr	r3, [r7, #4]
 8026054:	4313      	orrs	r3, r2
 8026056:	620b      	str	r3, [r1, #32]
}
 8026058:	bf00      	nop
 802605a:	370c      	adds	r7, #12
 802605c:	46bd      	mov	sp, r7
 802605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026062:	4770      	bx	lr
 8026064:	58000800 	.word	0x58000800

08026068 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8026068:	b480      	push	{r7}
 802606a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 802606c:	4b05      	ldr	r3, [pc, #20]	; (8026084 <LL_PWR_EnableBootC2+0x1c>)
 802606e:	68db      	ldr	r3, [r3, #12]
 8026070:	4a04      	ldr	r2, [pc, #16]	; (8026084 <LL_PWR_EnableBootC2+0x1c>)
 8026072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8026076:	60d3      	str	r3, [r2, #12]
}
 8026078:	bf00      	nop
 802607a:	46bd      	mov	sp, r7
 802607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026080:	4770      	bx	lr
 8026082:	bf00      	nop
 8026084:	58000400 	.word	0x58000400

08026088 <LL_AHB3_GRP1_EnableClock>:
{
 8026088:	b480      	push	{r7}
 802608a:	b085      	sub	sp, #20
 802608c:	af00      	add	r7, sp, #0
 802608e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8026090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8026094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8026096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802609a:	687b      	ldr	r3, [r7, #4]
 802609c:	4313      	orrs	r3, r2
 802609e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80260a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80260a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80260a6:	687b      	ldr	r3, [r7, #4]
 80260a8:	4013      	ands	r3, r2
 80260aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80260ac:	68fb      	ldr	r3, [r7, #12]
}
 80260ae:	bf00      	nop
 80260b0:	3714      	adds	r7, #20
 80260b2:	46bd      	mov	sp, r7
 80260b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260b8:	4770      	bx	lr

080260ba <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80260ba:	b480      	push	{r7}
 80260bc:	b083      	sub	sp, #12
 80260be:	af00      	add	r7, sp, #0
 80260c0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80260c2:	687b      	ldr	r3, [r7, #4]
 80260c4:	681b      	ldr	r3, [r3, #0]
 80260c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80260ca:	687b      	ldr	r3, [r7, #4]
 80260cc:	601a      	str	r2, [r3, #0]
}
 80260ce:	bf00      	nop
 80260d0:	370c      	adds	r7, #12
 80260d2:	46bd      	mov	sp, r7
 80260d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260d8:	4770      	bx	lr

080260da <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80260da:	b480      	push	{r7}
 80260dc:	b083      	sub	sp, #12
 80260de:	af00      	add	r7, sp, #0
 80260e0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80260e2:	687b      	ldr	r3, [r7, #4]
 80260e4:	681b      	ldr	r3, [r3, #0]
 80260e6:	f043 0201 	orr.w	r2, r3, #1
 80260ea:	687b      	ldr	r3, [r7, #4]
 80260ec:	601a      	str	r2, [r3, #0]
}
 80260ee:	bf00      	nop
 80260f0:	370c      	adds	r7, #12
 80260f2:	46bd      	mov	sp, r7
 80260f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260f8:	4770      	bx	lr

080260fa <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80260fa:	b480      	push	{r7}
 80260fc:	b083      	sub	sp, #12
 80260fe:	af00      	add	r7, sp, #0
 8026100:	6078      	str	r0, [r7, #4]
 8026102:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8026104:	687b      	ldr	r3, [r7, #4]
 8026106:	685a      	ldr	r2, [r3, #4]
 8026108:	683b      	ldr	r3, [r7, #0]
 802610a:	041b      	lsls	r3, r3, #16
 802610c:	43db      	mvns	r3, r3
 802610e:	401a      	ands	r2, r3
 8026110:	687b      	ldr	r3, [r7, #4]
 8026112:	605a      	str	r2, [r3, #4]
}
 8026114:	bf00      	nop
 8026116:	370c      	adds	r7, #12
 8026118:	46bd      	mov	sp, r7
 802611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802611e:	4770      	bx	lr

08026120 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8026120:	b480      	push	{r7}
 8026122:	b083      	sub	sp, #12
 8026124:	af00      	add	r7, sp, #0
 8026126:	6078      	str	r0, [r7, #4]
 8026128:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 802612a:	687b      	ldr	r3, [r7, #4]
 802612c:	685a      	ldr	r2, [r3, #4]
 802612e:	683b      	ldr	r3, [r7, #0]
 8026130:	041b      	lsls	r3, r3, #16
 8026132:	431a      	orrs	r2, r3
 8026134:	687b      	ldr	r3, [r7, #4]
 8026136:	605a      	str	r2, [r3, #4]
}
 8026138:	bf00      	nop
 802613a:	370c      	adds	r7, #12
 802613c:	46bd      	mov	sp, r7
 802613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026142:	4770      	bx	lr

08026144 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8026144:	b480      	push	{r7}
 8026146:	b083      	sub	sp, #12
 8026148:	af00      	add	r7, sp, #0
 802614a:	6078      	str	r0, [r7, #4]
 802614c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 802614e:	687b      	ldr	r3, [r7, #4]
 8026150:	685a      	ldr	r2, [r3, #4]
 8026152:	683b      	ldr	r3, [r7, #0]
 8026154:	43db      	mvns	r3, r3
 8026156:	401a      	ands	r2, r3
 8026158:	687b      	ldr	r3, [r7, #4]
 802615a:	605a      	str	r2, [r3, #4]
}
 802615c:	bf00      	nop
 802615e:	370c      	adds	r7, #12
 8026160:	46bd      	mov	sp, r7
 8026162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026166:	4770      	bx	lr

08026168 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8026168:	b480      	push	{r7}
 802616a:	b083      	sub	sp, #12
 802616c:	af00      	add	r7, sp, #0
 802616e:	6078      	str	r0, [r7, #4]
 8026170:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8026172:	687b      	ldr	r3, [r7, #4]
 8026174:	685a      	ldr	r2, [r3, #4]
 8026176:	683b      	ldr	r3, [r7, #0]
 8026178:	431a      	orrs	r2, r3
 802617a:	687b      	ldr	r3, [r7, #4]
 802617c:	605a      	str	r2, [r3, #4]
}
 802617e:	bf00      	nop
 8026180:	370c      	adds	r7, #12
 8026182:	46bd      	mov	sp, r7
 8026184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026188:	4770      	bx	lr

0802618a <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 802618a:	b480      	push	{r7}
 802618c:	b083      	sub	sp, #12
 802618e:	af00      	add	r7, sp, #0
 8026190:	6078      	str	r0, [r7, #4]
 8026192:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8026194:	687b      	ldr	r3, [r7, #4]
 8026196:	683a      	ldr	r2, [r7, #0]
 8026198:	609a      	str	r2, [r3, #8]
}
 802619a:	bf00      	nop
 802619c:	370c      	adds	r7, #12
 802619e:	46bd      	mov	sp, r7
 80261a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261a4:	4770      	bx	lr

080261a6 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80261a6:	b480      	push	{r7}
 80261a8:	b083      	sub	sp, #12
 80261aa:	af00      	add	r7, sp, #0
 80261ac:	6078      	str	r0, [r7, #4]
 80261ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80261b0:	683b      	ldr	r3, [r7, #0]
 80261b2:	041a      	lsls	r2, r3, #16
 80261b4:	687b      	ldr	r3, [r7, #4]
 80261b6:	609a      	str	r2, [r3, #8]
}
 80261b8:	bf00      	nop
 80261ba:	370c      	adds	r7, #12
 80261bc:	46bd      	mov	sp, r7
 80261be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261c2:	4770      	bx	lr

080261c4 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80261c4:	b480      	push	{r7}
 80261c6:	b083      	sub	sp, #12
 80261c8:	af00      	add	r7, sp, #0
 80261ca:	6078      	str	r0, [r7, #4]
 80261cc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80261ce:	687b      	ldr	r3, [r7, #4]
 80261d0:	68da      	ldr	r2, [r3, #12]
 80261d2:	683b      	ldr	r3, [r7, #0]
 80261d4:	4013      	ands	r3, r2
 80261d6:	683a      	ldr	r2, [r7, #0]
 80261d8:	429a      	cmp	r2, r3
 80261da:	d101      	bne.n	80261e0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80261dc:	2301      	movs	r3, #1
 80261de:	e000      	b.n	80261e2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80261e0:	2300      	movs	r3, #0
}
 80261e2:	4618      	mov	r0, r3
 80261e4:	370c      	adds	r7, #12
 80261e6:	46bd      	mov	sp, r7
 80261e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261ec:	4770      	bx	lr

080261ee <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80261ee:	b480      	push	{r7}
 80261f0:	b083      	sub	sp, #12
 80261f2:	af00      	add	r7, sp, #0
 80261f4:	6078      	str	r0, [r7, #4]
 80261f6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80261f8:	687b      	ldr	r3, [r7, #4]
 80261fa:	69da      	ldr	r2, [r3, #28]
 80261fc:	683b      	ldr	r3, [r7, #0]
 80261fe:	4013      	ands	r3, r2
 8026200:	683a      	ldr	r2, [r7, #0]
 8026202:	429a      	cmp	r2, r3
 8026204:	d101      	bne.n	802620a <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8026206:	2301      	movs	r3, #1
 8026208:	e000      	b.n	802620c <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 802620a:	2300      	movs	r3, #0
}
 802620c:	4618      	mov	r0, r3
 802620e:	370c      	adds	r7, #12
 8026210:	46bd      	mov	sp, r7
 8026212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026216:	4770      	bx	lr

08026218 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8026218:	b580      	push	{r7, lr}
 802621a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 802621c:	2102      	movs	r1, #2
 802621e:	482a      	ldr	r0, [pc, #168]	; (80262c8 <HW_IPCC_Rx_Handler+0xb0>)
 8026220:	f7ff ffe5 	bl	80261ee <LL_C2_IPCC_IsActiveFlag_CHx>
 8026224:	4603      	mov	r3, r0
 8026226:	2b00      	cmp	r3, #0
 8026228:	d009      	beq.n	802623e <HW_IPCC_Rx_Handler+0x26>
 802622a:	4b27      	ldr	r3, [pc, #156]	; (80262c8 <HW_IPCC_Rx_Handler+0xb0>)
 802622c:	685b      	ldr	r3, [r3, #4]
 802622e:	43db      	mvns	r3, r3
 8026230:	f003 0302 	and.w	r3, r3, #2
 8026234:	2b00      	cmp	r3, #0
 8026236:	d002      	beq.n	802623e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8026238:	f000 f906 	bl	8026448 <HW_IPCC_SYS_EvtHandler>
 802623c:	e041      	b.n	80262c2 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 802623e:	2104      	movs	r1, #4
 8026240:	4821      	ldr	r0, [pc, #132]	; (80262c8 <HW_IPCC_Rx_Handler+0xb0>)
 8026242:	f7ff ffd4 	bl	80261ee <LL_C2_IPCC_IsActiveFlag_CHx>
 8026246:	4603      	mov	r3, r0
 8026248:	2b00      	cmp	r3, #0
 802624a:	d009      	beq.n	8026260 <HW_IPCC_Rx_Handler+0x48>
 802624c:	4b1e      	ldr	r3, [pc, #120]	; (80262c8 <HW_IPCC_Rx_Handler+0xb0>)
 802624e:	685b      	ldr	r3, [r3, #4]
 8026250:	43db      	mvns	r3, r3
 8026252:	f003 0304 	and.w	r3, r3, #4
 8026256:	2b00      	cmp	r3, #0
 8026258:	d002      	beq.n	8026260 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 802625a:	f000 f94f 	bl	80264fc <HW_IPCC_THREAD_NotEvtHandler>
 802625e:	e030      	b.n	80262c2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8026260:	2110      	movs	r1, #16
 8026262:	4819      	ldr	r0, [pc, #100]	; (80262c8 <HW_IPCC_Rx_Handler+0xb0>)
 8026264:	f7ff ffc3 	bl	80261ee <LL_C2_IPCC_IsActiveFlag_CHx>
 8026268:	4603      	mov	r3, r0
 802626a:	2b00      	cmp	r3, #0
 802626c:	d009      	beq.n	8026282 <HW_IPCC_Rx_Handler+0x6a>
 802626e:	4b16      	ldr	r3, [pc, #88]	; (80262c8 <HW_IPCC_Rx_Handler+0xb0>)
 8026270:	685b      	ldr	r3, [r3, #4]
 8026272:	43db      	mvns	r3, r3
 8026274:	f003 0310 	and.w	r3, r3, #16
 8026278:	2b00      	cmp	r3, #0
 802627a:	d002      	beq.n	8026282 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 802627c:	f000 f94a 	bl	8026514 <HW_IPCC_THREAD_CliNotEvtHandler>
 8026280:	e01f      	b.n	80262c2 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8026282:	2101      	movs	r1, #1
 8026284:	4810      	ldr	r0, [pc, #64]	; (80262c8 <HW_IPCC_Rx_Handler+0xb0>)
 8026286:	f7ff ffb2 	bl	80261ee <LL_C2_IPCC_IsActiveFlag_CHx>
 802628a:	4603      	mov	r3, r0
 802628c:	2b00      	cmp	r3, #0
 802628e:	d008      	beq.n	80262a2 <HW_IPCC_Rx_Handler+0x8a>
 8026290:	4b0d      	ldr	r3, [pc, #52]	; (80262c8 <HW_IPCC_Rx_Handler+0xb0>)
 8026292:	685b      	ldr	r3, [r3, #4]
 8026294:	f003 0301 	and.w	r3, r3, #1
 8026298:	2b00      	cmp	r3, #0
 802629a:	d102      	bne.n	80262a2 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 802629c:	f000 f898 	bl	80263d0 <HW_IPCC_BLE_EvtHandler>
 80262a0:	e00f      	b.n	80262c2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80262a2:	2108      	movs	r1, #8
 80262a4:	4808      	ldr	r0, [pc, #32]	; (80262c8 <HW_IPCC_Rx_Handler+0xb0>)
 80262a6:	f7ff ffa2 	bl	80261ee <LL_C2_IPCC_IsActiveFlag_CHx>
 80262aa:	4603      	mov	r3, r0
 80262ac:	2b00      	cmp	r3, #0
 80262ae:	d009      	beq.n	80262c4 <HW_IPCC_Rx_Handler+0xac>
 80262b0:	4b05      	ldr	r3, [pc, #20]	; (80262c8 <HW_IPCC_Rx_Handler+0xb0>)
 80262b2:	685b      	ldr	r3, [r3, #4]
 80262b4:	43db      	mvns	r3, r3
 80262b6:	f003 0308 	and.w	r3, r3, #8
 80262ba:	2b00      	cmp	r3, #0
 80262bc:	d002      	beq.n	80262c4 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 80262be:	f000 f975 	bl	80265ac <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80262c2:	bf00      	nop
 80262c4:	bf00      	nop
}
 80262c6:	bd80      	pop	{r7, pc}
 80262c8:	58000c00 	.word	0x58000c00

080262cc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80262cc:	b580      	push	{r7, lr}
 80262ce:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80262d0:	2102      	movs	r1, #2
 80262d2:	482b      	ldr	r0, [pc, #172]	; (8026380 <HW_IPCC_Tx_Handler+0xb4>)
 80262d4:	f7ff ff76 	bl	80261c4 <LL_C1_IPCC_IsActiveFlag_CHx>
 80262d8:	4603      	mov	r3, r0
 80262da:	2b00      	cmp	r3, #0
 80262dc:	d109      	bne.n	80262f2 <HW_IPCC_Tx_Handler+0x26>
 80262de:	4b28      	ldr	r3, [pc, #160]	; (8026380 <HW_IPCC_Tx_Handler+0xb4>)
 80262e0:	685b      	ldr	r3, [r3, #4]
 80262e2:	43db      	mvns	r3, r3
 80262e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80262e8:	2b00      	cmp	r3, #0
 80262ea:	d002      	beq.n	80262f2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80262ec:	f000 f8a0 	bl	8026430 <HW_IPCC_SYS_CmdEvtHandler>
 80262f0:	e042      	b.n	8026378 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 80262f2:	2104      	movs	r1, #4
 80262f4:	4822      	ldr	r0, [pc, #136]	; (8026380 <HW_IPCC_Tx_Handler+0xb4>)
 80262f6:	f7ff ff65 	bl	80261c4 <LL_C1_IPCC_IsActiveFlag_CHx>
 80262fa:	4603      	mov	r3, r0
 80262fc:	2b00      	cmp	r3, #0
 80262fe:	d109      	bne.n	8026314 <HW_IPCC_Tx_Handler+0x48>
 8026300:	4b1f      	ldr	r3, [pc, #124]	; (8026380 <HW_IPCC_Tx_Handler+0xb4>)
 8026302:	685b      	ldr	r3, [r3, #4]
 8026304:	43db      	mvns	r3, r3
 8026306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802630a:	2b00      	cmp	r3, #0
 802630c:	d002      	beq.n	8026314 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 802630e:	f000 f8e9 	bl	80264e4 <HW_IPCC_OT_CmdEvtHandler>
 8026312:	e031      	b.n	8026378 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8026314:	2102      	movs	r1, #2
 8026316:	481a      	ldr	r0, [pc, #104]	; (8026380 <HW_IPCC_Tx_Handler+0xb4>)
 8026318:	f7ff ff54 	bl	80261c4 <LL_C1_IPCC_IsActiveFlag_CHx>
 802631c:	4603      	mov	r3, r0
 802631e:	2b00      	cmp	r3, #0
 8026320:	d109      	bne.n	8026336 <HW_IPCC_Tx_Handler+0x6a>
 8026322:	4b17      	ldr	r3, [pc, #92]	; (8026380 <HW_IPCC_Tx_Handler+0xb4>)
 8026324:	685b      	ldr	r3, [r3, #4]
 8026326:	43db      	mvns	r3, r3
 8026328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802632c:	2b00      	cmp	r3, #0
 802632e:	d002      	beq.n	8026336 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8026330:	f000 f87e 	bl	8026430 <HW_IPCC_SYS_CmdEvtHandler>
 8026334:	e020      	b.n	8026378 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8026336:	2108      	movs	r1, #8
 8026338:	4811      	ldr	r0, [pc, #68]	; (8026380 <HW_IPCC_Tx_Handler+0xb4>)
 802633a:	f7ff ff43 	bl	80261c4 <LL_C1_IPCC_IsActiveFlag_CHx>
 802633e:	4603      	mov	r3, r0
 8026340:	2b00      	cmp	r3, #0
 8026342:	d109      	bne.n	8026358 <HW_IPCC_Tx_Handler+0x8c>
 8026344:	4b0e      	ldr	r3, [pc, #56]	; (8026380 <HW_IPCC_Tx_Handler+0xb4>)
 8026346:	685b      	ldr	r3, [r3, #4]
 8026348:	43db      	mvns	r3, r3
 802634a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802634e:	2b00      	cmp	r3, #0
 8026350:	d002      	beq.n	8026358 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8026352:	f000 f90d 	bl	8026570 <HW_IPCC_MM_FreeBufHandler>
 8026356:	e00f      	b.n	8026378 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8026358:	2120      	movs	r1, #32
 802635a:	4809      	ldr	r0, [pc, #36]	; (8026380 <HW_IPCC_Tx_Handler+0xb4>)
 802635c:	f7ff ff32 	bl	80261c4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8026360:	4603      	mov	r3, r0
 8026362:	2b00      	cmp	r3, #0
 8026364:	d109      	bne.n	802637a <HW_IPCC_Tx_Handler+0xae>
 8026366:	4b06      	ldr	r3, [pc, #24]	; (8026380 <HW_IPCC_Tx_Handler+0xb4>)
 8026368:	685b      	ldr	r3, [r3, #4]
 802636a:	43db      	mvns	r3, r3
 802636c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8026370:	2b00      	cmp	r3, #0
 8026372:	d002      	beq.n	802637a <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8026374:	f000 f838 	bl	80263e8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8026378:	bf00      	nop
 802637a:	bf00      	nop
}
 802637c:	bd80      	pop	{r7, pc}
 802637e:	bf00      	nop
 8026380:	58000c00 	.word	0x58000c00

08026384 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8026384:	b580      	push	{r7, lr}
 8026386:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8026388:	f44f 7000 	mov.w	r0, #512	; 0x200
 802638c:	f7ff fe46 	bl	802601c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8026390:	f44f 7000 	mov.w	r0, #512	; 0x200
 8026394:	f7ff fe56 	bl	8026044 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8026398:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 802639a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 802639c:	f7ff fe64 	bl	8026068 <LL_PWR_EnableBootC2>

  return;
 80263a0:	bf00      	nop
}
 80263a2:	bd80      	pop	{r7, pc}

080263a4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80263a4:	b580      	push	{r7, lr}
 80263a6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80263a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80263ac:	f7ff fe6c 	bl	8026088 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80263b0:	4806      	ldr	r0, [pc, #24]	; (80263cc <HW_IPCC_Init+0x28>)
 80263b2:	f7ff fe92 	bl	80260da <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80263b6:	4805      	ldr	r0, [pc, #20]	; (80263cc <HW_IPCC_Init+0x28>)
 80263b8:	f7ff fe7f 	bl	80260ba <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80263bc:	202c      	movs	r0, #44	; 0x2c
 80263be:	f7f1 fc5a 	bl	8017c76 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80263c2:	202d      	movs	r0, #45	; 0x2d
 80263c4:	f7f1 fc57 	bl	8017c76 <HAL_NVIC_EnableIRQ>

  return;
 80263c8:	bf00      	nop
}
 80263ca:	bd80      	pop	{r7, pc}
 80263cc:	58000c00 	.word	0x58000c00

080263d0 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80263d0:	b580      	push	{r7, lr}
 80263d2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80263d4:	f7fd ff9c 	bl	8024310 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80263d8:	2101      	movs	r1, #1
 80263da:	4802      	ldr	r0, [pc, #8]	; (80263e4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80263dc:	f7ff fed5 	bl	802618a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80263e0:	bf00      	nop
}
 80263e2:	bd80      	pop	{r7, pc}
 80263e4:	58000c00 	.word	0x58000c00

080263e8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80263e8:	b580      	push	{r7, lr}
 80263ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80263ec:	2120      	movs	r1, #32
 80263ee:	4803      	ldr	r0, [pc, #12]	; (80263fc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80263f0:	f7ff fe96 	bl	8026120 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80263f4:	f7fd ffa8 	bl	8024348 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80263f8:	bf00      	nop
}
 80263fa:	bd80      	pop	{r7, pc}
 80263fc:	58000c00 	.word	0x58000c00

08026400 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8026400:	b580      	push	{r7, lr}
 8026402:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8026404:	2102      	movs	r1, #2
 8026406:	4802      	ldr	r0, [pc, #8]	; (8026410 <HW_IPCC_SYS_Init+0x10>)
 8026408:	f7ff fe9c 	bl	8026144 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 802640c:	bf00      	nop
}
 802640e:	bd80      	pop	{r7, pc}
 8026410:	58000c00 	.word	0x58000c00

08026414 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8026414:	b580      	push	{r7, lr}
 8026416:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8026418:	2102      	movs	r1, #2
 802641a:	4804      	ldr	r0, [pc, #16]	; (802642c <HW_IPCC_SYS_SendCmd+0x18>)
 802641c:	f7ff fec3 	bl	80261a6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8026420:	2102      	movs	r1, #2
 8026422:	4802      	ldr	r0, [pc, #8]	; (802642c <HW_IPCC_SYS_SendCmd+0x18>)
 8026424:	f7ff fe69 	bl	80260fa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8026428:	bf00      	nop
}
 802642a:	bd80      	pop	{r7, pc}
 802642c:	58000c00 	.word	0x58000c00

08026430 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8026430:	b580      	push	{r7, lr}
 8026432:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8026434:	2102      	movs	r1, #2
 8026436:	4803      	ldr	r0, [pc, #12]	; (8026444 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8026438:	f7ff fe72 	bl	8026120 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 802643c:	f7fd ffcc 	bl	80243d8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8026440:	bf00      	nop
}
 8026442:	bd80      	pop	{r7, pc}
 8026444:	58000c00 	.word	0x58000c00

08026448 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8026448:	b580      	push	{r7, lr}
 802644a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 802644c:	f7fd ffd4 	bl	80243f8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8026450:	2102      	movs	r1, #2
 8026452:	4802      	ldr	r0, [pc, #8]	; (802645c <HW_IPCC_SYS_EvtHandler+0x14>)
 8026454:	f7ff fe99 	bl	802618a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8026458:	bf00      	nop
}
 802645a:	bd80      	pop	{r7, pc}
 802645c:	58000c00 	.word	0x58000c00

08026460 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8026460:	b580      	push	{r7, lr}
 8026462:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8026464:	2104      	movs	r1, #4
 8026466:	4804      	ldr	r0, [pc, #16]	; (8026478 <HW_IPCC_THREAD_Init+0x18>)
 8026468:	f7ff fe6c 	bl	8026144 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 802646c:	2110      	movs	r1, #16
 802646e:	4802      	ldr	r0, [pc, #8]	; (8026478 <HW_IPCC_THREAD_Init+0x18>)
 8026470:	f7ff fe68 	bl	8026144 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8026474:	bf00      	nop
}
 8026476:	bd80      	pop	{r7, pc}
 8026478:	58000c00 	.word	0x58000c00

0802647c <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 802647c:	b580      	push	{r7, lr}
 802647e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8026480:	2104      	movs	r1, #4
 8026482:	4804      	ldr	r0, [pc, #16]	; (8026494 <HW_IPCC_OT_SendCmd+0x18>)
 8026484:	f7ff fe8f 	bl	80261a6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8026488:	2104      	movs	r1, #4
 802648a:	4802      	ldr	r0, [pc, #8]	; (8026494 <HW_IPCC_OT_SendCmd+0x18>)
 802648c:	f7ff fe35 	bl	80260fa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8026490:	bf00      	nop
}
 8026492:	bd80      	pop	{r7, pc}
 8026494:	58000c00 	.word	0x58000c00

08026498 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8026498:	b580      	push	{r7, lr}
 802649a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 802649c:	2110      	movs	r1, #16
 802649e:	4802      	ldr	r0, [pc, #8]	; (80264a8 <HW_IPCC_CLI_SendCmd+0x10>)
 80264a0:	f7ff fe81 	bl	80261a6 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80264a4:	bf00      	nop
}
 80264a6:	bd80      	pop	{r7, pc}
 80264a8:	58000c00 	.word	0x58000c00

080264ac <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 80264ac:	b580      	push	{r7, lr}
 80264ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80264b0:	2104      	movs	r1, #4
 80264b2:	4804      	ldr	r0, [pc, #16]	; (80264c4 <HW_IPCC_THREAD_SendAck+0x18>)
 80264b4:	f7ff fe69 	bl	802618a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80264b8:	2104      	movs	r1, #4
 80264ba:	4802      	ldr	r0, [pc, #8]	; (80264c4 <HW_IPCC_THREAD_SendAck+0x18>)
 80264bc:	f7ff fe42 	bl	8026144 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80264c0:	bf00      	nop
}
 80264c2:	bd80      	pop	{r7, pc}
 80264c4:	58000c00 	.word	0x58000c00

080264c8 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 80264c8:	b580      	push	{r7, lr}
 80264ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80264cc:	2110      	movs	r1, #16
 80264ce:	4804      	ldr	r0, [pc, #16]	; (80264e0 <HW_IPCC_THREAD_CliSendAck+0x18>)
 80264d0:	f7ff fe5b 	bl	802618a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80264d4:	2110      	movs	r1, #16
 80264d6:	4802      	ldr	r0, [pc, #8]	; (80264e0 <HW_IPCC_THREAD_CliSendAck+0x18>)
 80264d8:	f7ff fe34 	bl	8026144 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80264dc:	bf00      	nop
}
 80264de:	bd80      	pop	{r7, pc}
 80264e0:	58000c00 	.word	0x58000c00

080264e4 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 80264e4:	b580      	push	{r7, lr}
 80264e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80264e8:	2104      	movs	r1, #4
 80264ea:	4803      	ldr	r0, [pc, #12]	; (80264f8 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 80264ec:	f7ff fe18 	bl	8026120 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 80264f0:	f7fd fff2 	bl	80244d8 <HW_IPCC_OT_CmdEvtNot>

  return;
 80264f4:	bf00      	nop
}
 80264f6:	bd80      	pop	{r7, pc}
 80264f8:	58000c00 	.word	0x58000c00

080264fc <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 80264fc:	b580      	push	{r7, lr}
 80264fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8026500:	2104      	movs	r1, #4
 8026502:	4803      	ldr	r0, [pc, #12]	; (8026510 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8026504:	f7ff fe30 	bl	8026168 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8026508:	f7fd fff2 	bl	80244f0 <HW_IPCC_THREAD_EvtNot>

  return;
 802650c:	bf00      	nop
}
 802650e:	bd80      	pop	{r7, pc}
 8026510:	58000c00 	.word	0x58000c00

08026514 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8026514:	b580      	push	{r7, lr}
 8026516:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8026518:	2110      	movs	r1, #16
 802651a:	4803      	ldr	r0, [pc, #12]	; (8026528 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 802651c:	f7ff fe24 	bl	8026168 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8026520:	f7fd fff2 	bl	8024508 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8026524:	bf00      	nop
}
 8026526:	bd80      	pop	{r7, pc}
 8026528:	58000c00 	.word	0x58000c00

0802652c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 802652c:	b580      	push	{r7, lr}
 802652e:	b082      	sub	sp, #8
 8026530:	af00      	add	r7, sp, #0
 8026532:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8026534:	2108      	movs	r1, #8
 8026536:	480c      	ldr	r0, [pc, #48]	; (8026568 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8026538:	f7ff fe44 	bl	80261c4 <LL_C1_IPCC_IsActiveFlag_CHx>
 802653c:	4603      	mov	r3, r0
 802653e:	2b00      	cmp	r3, #0
 8026540:	d007      	beq.n	8026552 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8026542:	4a0a      	ldr	r2, [pc, #40]	; (802656c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8026544:	687b      	ldr	r3, [r7, #4]
 8026546:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8026548:	2108      	movs	r1, #8
 802654a:	4807      	ldr	r0, [pc, #28]	; (8026568 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 802654c:	f7ff fdd5 	bl	80260fa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8026550:	e006      	b.n	8026560 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8026552:	687b      	ldr	r3, [r7, #4]
 8026554:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8026556:	2108      	movs	r1, #8
 8026558:	4803      	ldr	r0, [pc, #12]	; (8026568 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 802655a:	f7ff fe24 	bl	80261a6 <LL_C1_IPCC_SetFlag_CHx>
  return;
 802655e:	bf00      	nop
}
 8026560:	3708      	adds	r7, #8
 8026562:	46bd      	mov	sp, r7
 8026564:	bd80      	pop	{r7, pc}
 8026566:	bf00      	nop
 8026568:	58000c00 	.word	0x58000c00
 802656c:	200279ec 	.word	0x200279ec

08026570 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8026570:	b580      	push	{r7, lr}
 8026572:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8026574:	2108      	movs	r1, #8
 8026576:	4806      	ldr	r0, [pc, #24]	; (8026590 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8026578:	f7ff fdd2 	bl	8026120 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 802657c:	4b05      	ldr	r3, [pc, #20]	; (8026594 <HW_IPCC_MM_FreeBufHandler+0x24>)
 802657e:	681b      	ldr	r3, [r3, #0]
 8026580:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8026582:	2108      	movs	r1, #8
 8026584:	4802      	ldr	r0, [pc, #8]	; (8026590 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8026586:	f7ff fe0e 	bl	80261a6 <LL_C1_IPCC_SetFlag_CHx>

  return;
 802658a:	bf00      	nop
}
 802658c:	bd80      	pop	{r7, pc}
 802658e:	bf00      	nop
 8026590:	58000c00 	.word	0x58000c00
 8026594:	200279ec 	.word	0x200279ec

08026598 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8026598:	b580      	push	{r7, lr}
 802659a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 802659c:	2108      	movs	r1, #8
 802659e:	4802      	ldr	r0, [pc, #8]	; (80265a8 <HW_IPCC_TRACES_Init+0x10>)
 80265a0:	f7ff fdd0 	bl	8026144 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80265a4:	bf00      	nop
}
 80265a6:	bd80      	pop	{r7, pc}
 80265a8:	58000c00 	.word	0x58000c00

080265ac <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80265ac:	b580      	push	{r7, lr}
 80265ae:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80265b0:	f7fe f838 	bl	8024624 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80265b4:	2108      	movs	r1, #8
 80265b6:	4802      	ldr	r0, [pc, #8]	; (80265c0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80265b8:	f7ff fde7 	bl	802618a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80265bc:	bf00      	nop
}
 80265be:	bd80      	pop	{r7, pc}
 80265c0:	58000c00 	.word	0x58000c00

080265c4 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 80265c4:	b480      	push	{r7}
 80265c6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80265c8:	4b05      	ldr	r3, [pc, #20]	; (80265e0 <UTIL_LPM_Init+0x1c>)
 80265ca:	2200      	movs	r2, #0
 80265cc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80265ce:	4b05      	ldr	r3, [pc, #20]	; (80265e4 <UTIL_LPM_Init+0x20>)
 80265d0:	2200      	movs	r2, #0
 80265d2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80265d4:	bf00      	nop
 80265d6:	46bd      	mov	sp, r7
 80265d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265dc:	4770      	bx	lr
 80265de:	bf00      	nop
 80265e0:	200279f0 	.word	0x200279f0
 80265e4:	200279f4 	.word	0x200279f4

080265e8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80265e8:	b480      	push	{r7}
 80265ea:	b087      	sub	sp, #28
 80265ec:	af00      	add	r7, sp, #0
 80265ee:	6078      	str	r0, [r7, #4]
 80265f0:	460b      	mov	r3, r1
 80265f2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80265f4:	f3ef 8310 	mrs	r3, PRIMASK
 80265f8:	613b      	str	r3, [r7, #16]
  return(result);
 80265fa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80265fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80265fe:	b672      	cpsid	i
  
  switch(state)
 8026600:	78fb      	ldrb	r3, [r7, #3]
 8026602:	2b00      	cmp	r3, #0
 8026604:	d009      	beq.n	802661a <UTIL_LPM_SetOffMode+0x32>
 8026606:	2b01      	cmp	r3, #1
 8026608:	d000      	beq.n	802660c <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 802660a:	e00e      	b.n	802662a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 802660c:	4b0c      	ldr	r3, [pc, #48]	; (8026640 <UTIL_LPM_SetOffMode+0x58>)
 802660e:	681a      	ldr	r2, [r3, #0]
 8026610:	687b      	ldr	r3, [r7, #4]
 8026612:	4313      	orrs	r3, r2
 8026614:	4a0a      	ldr	r2, [pc, #40]	; (8026640 <UTIL_LPM_SetOffMode+0x58>)
 8026616:	6013      	str	r3, [r2, #0]
      break;
 8026618:	e007      	b.n	802662a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 802661a:	687b      	ldr	r3, [r7, #4]
 802661c:	43da      	mvns	r2, r3
 802661e:	4b08      	ldr	r3, [pc, #32]	; (8026640 <UTIL_LPM_SetOffMode+0x58>)
 8026620:	681b      	ldr	r3, [r3, #0]
 8026622:	4013      	ands	r3, r2
 8026624:	4a06      	ldr	r2, [pc, #24]	; (8026640 <UTIL_LPM_SetOffMode+0x58>)
 8026626:	6013      	str	r3, [r2, #0]
      break;
 8026628:	bf00      	nop
 802662a:	697b      	ldr	r3, [r7, #20]
 802662c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802662e:	68fb      	ldr	r3, [r7, #12]
 8026630:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8026634:	bf00      	nop
 8026636:	371c      	adds	r7, #28
 8026638:	46bd      	mov	sp, r7
 802663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802663e:	4770      	bx	lr
 8026640:	200279f4 	.word	0x200279f4

08026644 <arm_power_f32>:
 8026644:	b430      	push	{r4, r5}
 8026646:	088d      	lsrs	r5, r1, #2
 8026648:	eddf 5a20 	vldr	s11, [pc, #128]	; 80266cc <arm_power_f32+0x88>
 802664c:	d020      	beq.n	8026690 <arm_power_f32+0x4c>
 802664e:	f100 0310 	add.w	r3, r0, #16
 8026652:	462c      	mov	r4, r5
 8026654:	ed53 6a04 	vldr	s13, [r3, #-16]
 8026658:	ed13 7a03 	vldr	s14, [r3, #-12]
 802665c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8026660:	ed13 6a01 	vldr	s12, [r3, #-4]
 8026664:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8026668:	ee27 7a07 	vmul.f32	s14, s14, s14
 802666c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8026670:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8026674:	ee37 7a26 	vadd.f32	s14, s14, s13
 8026678:	ee26 6a06 	vmul.f32	s12, s12, s12
 802667c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026680:	3c01      	subs	r4, #1
 8026682:	f103 0310 	add.w	r3, r3, #16
 8026686:	ee76 5a27 	vadd.f32	s11, s12, s15
 802668a:	d1e3      	bne.n	8026654 <arm_power_f32+0x10>
 802668c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8026690:	f011 0103 	ands.w	r1, r1, #3
 8026694:	d015      	beq.n	80266c2 <arm_power_f32+0x7e>
 8026696:	edd0 7a00 	vldr	s15, [r0]
 802669a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802669e:	3901      	subs	r1, #1
 80266a0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80266a4:	d00d      	beq.n	80266c2 <arm_power_f32+0x7e>
 80266a6:	edd0 7a01 	vldr	s15, [r0, #4]
 80266aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80266ae:	2901      	cmp	r1, #1
 80266b0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80266b4:	d005      	beq.n	80266c2 <arm_power_f32+0x7e>
 80266b6:	edd0 7a02 	vldr	s15, [r0, #8]
 80266ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80266be:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80266c2:	edc2 5a00 	vstr	s11, [r2]
 80266c6:	bc30      	pop	{r4, r5}
 80266c8:	4770      	bx	lr
 80266ca:	bf00      	nop
 80266cc:	00000000 	.word	0x00000000

080266d0 <arm_mat_mult_f32>:
 80266d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266d4:	8845      	ldrh	r5, [r0, #2]
 80266d6:	880b      	ldrh	r3, [r1, #0]
 80266d8:	8806      	ldrh	r6, [r0, #0]
 80266da:	6847      	ldr	r7, [r0, #4]
 80266dc:	6854      	ldr	r4, [r2, #4]
 80266de:	6848      	ldr	r0, [r1, #4]
 80266e0:	b08b      	sub	sp, #44	; 0x2c
 80266e2:	42ab      	cmp	r3, r5
 80266e4:	9109      	str	r1, [sp, #36]	; 0x24
 80266e6:	9604      	str	r6, [sp, #16]
 80266e8:	8849      	ldrh	r1, [r1, #2]
 80266ea:	f040 808a 	bne.w	8026802 <arm_mat_mult_f32+0x132>
 80266ee:	8815      	ldrh	r5, [r2, #0]
 80266f0:	42b5      	cmp	r5, r6
 80266f2:	f040 8086 	bne.w	8026802 <arm_mat_mult_f32+0x132>
 80266f6:	8852      	ldrh	r2, [r2, #2]
 80266f8:	428a      	cmp	r2, r1
 80266fa:	f040 8082 	bne.w	8026802 <arm_mat_mult_f32+0x132>
 80266fe:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8026702:	1d01      	adds	r1, r0, #4
 8026704:	0116      	lsls	r6, r2, #4
 8026706:	9108      	str	r1, [sp, #32]
 8026708:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 802670c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8026710:	9101      	str	r1, [sp, #4]
 8026712:	fb06 f108 	mul.w	r1, r6, r8
 8026716:	0095      	lsls	r5, r2, #2
 8026718:	9103      	str	r1, [sp, #12]
 802671a:	00d2      	lsls	r2, r2, #3
 802671c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8026720:	f003 0903 	and.w	r9, r3, #3
 8026724:	009b      	lsls	r3, r3, #2
 8026726:	f107 0b10 	add.w	fp, r7, #16
 802672a:	eb04 0a05 	add.w	sl, r4, r5
 802672e:	9107      	str	r1, [sp, #28]
 8026730:	9202      	str	r2, [sp, #8]
 8026732:	9306      	str	r3, [sp, #24]
 8026734:	f1ab 0310 	sub.w	r3, fp, #16
 8026738:	9305      	str	r3, [sp, #20]
 802673a:	9b07      	ldr	r3, [sp, #28]
 802673c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8026740:	eb03 0c0a 	add.w	ip, r3, sl
 8026744:	eddf 7a31 	vldr	s15, [pc, #196]	; 802680c <arm_mat_mult_f32+0x13c>
 8026748:	f1b8 0f00 	cmp.w	r8, #0
 802674c:	d053      	beq.n	80267f6 <arm_mat_mult_f32+0x126>
 802674e:	9b02      	ldr	r3, [sp, #8]
 8026750:	4644      	mov	r4, r8
 8026752:	18c1      	adds	r1, r0, r3
 8026754:	4602      	mov	r2, r0
 8026756:	465b      	mov	r3, fp
 8026758:	ed92 6a00 	vldr	s12, [r2]
 802675c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8026760:	ed53 4a03 	vldr	s9, [r3, #-12]
 8026764:	ed53 6a02 	vldr	s13, [r3, #-8]
 8026768:	ed91 5a00 	vldr	s10, [r1]
 802676c:	ed53 5a01 	vldr	s11, [r3, #-4]
 8026770:	1957      	adds	r7, r2, r5
 8026772:	ee27 7a06 	vmul.f32	s14, s14, s12
 8026776:	ed97 6a00 	vldr	s12, [r7]
 802677a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802677e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8026782:	194f      	adds	r7, r1, r5
 8026784:	ee36 6a27 	vadd.f32	s12, s12, s15
 8026788:	ee26 7a85 	vmul.f32	s14, s13, s10
 802678c:	edd7 7a00 	vldr	s15, [r7]
 8026790:	ee37 7a06 	vadd.f32	s14, s14, s12
 8026794:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8026798:	3c01      	subs	r4, #1
 802679a:	4432      	add	r2, r6
 802679c:	4431      	add	r1, r6
 802679e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80267a2:	f103 0310 	add.w	r3, r3, #16
 80267a6:	d1d7      	bne.n	8026758 <arm_mat_mult_f32+0x88>
 80267a8:	9b03      	ldr	r3, [sp, #12]
 80267aa:	9a01      	ldr	r2, [sp, #4]
 80267ac:	4418      	add	r0, r3
 80267ae:	f1b9 0f00 	cmp.w	r9, #0
 80267b2:	d00b      	beq.n	80267cc <arm_mat_mult_f32+0xfc>
 80267b4:	464b      	mov	r3, r9
 80267b6:	edd0 6a00 	vldr	s13, [r0]
 80267ba:	ecb2 7a01 	vldmia	r2!, {s14}
 80267be:	ee27 7a26 	vmul.f32	s14, s14, s13
 80267c2:	3b01      	subs	r3, #1
 80267c4:	4428      	add	r0, r5
 80267c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80267ca:	d1f4      	bne.n	80267b6 <arm_mat_mult_f32+0xe6>
 80267cc:	ecec 7a01 	vstmia	ip!, {s15}
 80267d0:	45d4      	cmp	ip, sl
 80267d2:	4670      	mov	r0, lr
 80267d4:	f10e 0e04 	add.w	lr, lr, #4
 80267d8:	d1b4      	bne.n	8026744 <arm_mat_mult_f32+0x74>
 80267da:	9a01      	ldr	r2, [sp, #4]
 80267dc:	9b06      	ldr	r3, [sp, #24]
 80267de:	4611      	mov	r1, r2
 80267e0:	4419      	add	r1, r3
 80267e2:	449b      	add	fp, r3
 80267e4:	9b04      	ldr	r3, [sp, #16]
 80267e6:	9101      	str	r1, [sp, #4]
 80267e8:	3b01      	subs	r3, #1
 80267ea:	44aa      	add	sl, r5
 80267ec:	9304      	str	r3, [sp, #16]
 80267ee:	d004      	beq.n	80267fa <arm_mat_mult_f32+0x12a>
 80267f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267f2:	6858      	ldr	r0, [r3, #4]
 80267f4:	e79e      	b.n	8026734 <arm_mat_mult_f32+0x64>
 80267f6:	9a05      	ldr	r2, [sp, #20]
 80267f8:	e7d9      	b.n	80267ae <arm_mat_mult_f32+0xde>
 80267fa:	4618      	mov	r0, r3
 80267fc:	b00b      	add	sp, #44	; 0x2c
 80267fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026802:	f06f 0002 	mvn.w	r0, #2
 8026806:	b00b      	add	sp, #44	; 0x2c
 8026808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802680c:	00000000 	.word	0x00000000

08026810 <arm_sin_f32>:
 8026810:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8026890 <arm_sin_f32+0x80>
 8026814:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026818:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802681c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026820:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8026824:	d504      	bpl.n	8026830 <arm_sin_f32+0x20>
 8026826:	ee17 3a90 	vmov	r3, s15
 802682a:	3b01      	subs	r3, #1
 802682c:	ee07 3a90 	vmov	s15, r3
 8026830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026834:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8026894 <arm_sin_f32+0x84>
 8026838:	ee30 0a67 	vsub.f32	s0, s0, s15
 802683c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8026840:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8026844:	ee17 3a90 	vmov	r3, s15
 8026848:	b29b      	uxth	r3, r3
 802684a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802684e:	d21a      	bcs.n	8026886 <arm_sin_f32+0x76>
 8026850:	ee07 3a90 	vmov	s15, r3
 8026854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8026858:	1c59      	adds	r1, r3, #1
 802685a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802685e:	4a0e      	ldr	r2, [pc, #56]	; (8026898 <arm_sin_f32+0x88>)
 8026860:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026864:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026868:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 802686c:	ed93 7a00 	vldr	s14, [r3]
 8026870:	edd2 6a00 	vldr	s13, [r2]
 8026874:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8026878:	ee20 0a26 	vmul.f32	s0, s0, s13
 802687c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026880:	ee37 0a80 	vadd.f32	s0, s15, s0
 8026884:	4770      	bx	lr
 8026886:	ee30 0a47 	vsub.f32	s0, s0, s14
 802688a:	2101      	movs	r1, #1
 802688c:	2300      	movs	r3, #0
 802688e:	e7e6      	b.n	802685e <arm_sin_f32+0x4e>
 8026890:	3e22f983 	.word	0x3e22f983
 8026894:	44000000 	.word	0x44000000
 8026898:	08028d20 	.word	0x08028d20

0802689c <arm_cos_f32>:
 802689c:	eddf 7a21 	vldr	s15, [pc, #132]	; 8026924 <arm_cos_f32+0x88>
 80268a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80268a4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80268a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80268ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80268b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268b4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80268b8:	d504      	bpl.n	80268c4 <arm_cos_f32+0x28>
 80268ba:	ee17 3a90 	vmov	r3, s15
 80268be:	3b01      	subs	r3, #1
 80268c0:	ee07 3a90 	vmov	s15, r3
 80268c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80268c8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8026928 <arm_cos_f32+0x8c>
 80268cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80268d0:	ee20 0a07 	vmul.f32	s0, s0, s14
 80268d4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80268d8:	ee17 3a90 	vmov	r3, s15
 80268dc:	b29b      	uxth	r3, r3
 80268de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80268e2:	d21a      	bcs.n	802691a <arm_cos_f32+0x7e>
 80268e4:	ee07 3a90 	vmov	s15, r3
 80268e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80268ec:	1c59      	adds	r1, r3, #1
 80268ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80268f2:	4a0e      	ldr	r2, [pc, #56]	; (802692c <arm_cos_f32+0x90>)
 80268f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80268f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80268fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8026900:	ed93 7a00 	vldr	s14, [r3]
 8026904:	edd2 6a00 	vldr	s13, [r2]
 8026908:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802690c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8026910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026914:	ee37 0a80 	vadd.f32	s0, s15, s0
 8026918:	4770      	bx	lr
 802691a:	ee30 0a47 	vsub.f32	s0, s0, s14
 802691e:	2101      	movs	r1, #1
 8026920:	2300      	movs	r3, #0
 8026922:	e7e6      	b.n	80268f2 <arm_cos_f32+0x56>
 8026924:	3e22f983 	.word	0x3e22f983
 8026928:	44000000 	.word	0x44000000
 802692c:	08028d20 	.word	0x08028d20

08026930 <arm_sub_f32>:
 8026930:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8026934:	b4f0      	push	{r4, r5, r6, r7}
 8026936:	d033      	beq.n	80269a0 <arm_sub_f32+0x70>
 8026938:	f100 0610 	add.w	r6, r0, #16
 802693c:	f101 0510 	add.w	r5, r1, #16
 8026940:	f102 0410 	add.w	r4, r2, #16
 8026944:	4667      	mov	r7, ip
 8026946:	ed15 7a04 	vldr	s14, [r5, #-16]
 802694a:	ed56 7a04 	vldr	s15, [r6, #-16]
 802694e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026952:	3f01      	subs	r7, #1
 8026954:	ed44 7a04 	vstr	s15, [r4, #-16]
 8026958:	ed15 7a03 	vldr	s14, [r5, #-12]
 802695c:	ed56 7a03 	vldr	s15, [r6, #-12]
 8026960:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026964:	f106 0610 	add.w	r6, r6, #16
 8026968:	ed44 7a03 	vstr	s15, [r4, #-12]
 802696c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8026970:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8026974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026978:	f105 0510 	add.w	r5, r5, #16
 802697c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8026980:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8026984:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8026988:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802698c:	f104 0410 	add.w	r4, r4, #16
 8026990:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8026994:	d1d7      	bne.n	8026946 <arm_sub_f32+0x16>
 8026996:	ea4f 140c 	mov.w	r4, ip, lsl #4
 802699a:	4420      	add	r0, r4
 802699c:	4421      	add	r1, r4
 802699e:	4422      	add	r2, r4
 80269a0:	f013 0303 	ands.w	r3, r3, #3
 80269a4:	d01b      	beq.n	80269de <arm_sub_f32+0xae>
 80269a6:	edd0 7a00 	vldr	s15, [r0]
 80269aa:	ed91 7a00 	vldr	s14, [r1]
 80269ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80269b2:	3b01      	subs	r3, #1
 80269b4:	edc2 7a00 	vstr	s15, [r2]
 80269b8:	d011      	beq.n	80269de <arm_sub_f32+0xae>
 80269ba:	edd0 7a01 	vldr	s15, [r0, #4]
 80269be:	ed91 7a01 	vldr	s14, [r1, #4]
 80269c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80269c6:	2b01      	cmp	r3, #1
 80269c8:	edc2 7a01 	vstr	s15, [r2, #4]
 80269cc:	d007      	beq.n	80269de <arm_sub_f32+0xae>
 80269ce:	edd0 7a02 	vldr	s15, [r0, #8]
 80269d2:	ed91 7a02 	vldr	s14, [r1, #8]
 80269d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80269da:	edc2 7a02 	vstr	s15, [r2, #8]
 80269de:	bcf0      	pop	{r4, r5, r6, r7}
 80269e0:	4770      	bx	lr
 80269e2:	bf00      	nop

080269e4 <arm_scale_f32>:
 80269e4:	b470      	push	{r4, r5, r6}
 80269e6:	0896      	lsrs	r6, r2, #2
 80269e8:	d025      	beq.n	8026a36 <arm_scale_f32+0x52>
 80269ea:	f100 0410 	add.w	r4, r0, #16
 80269ee:	f101 0310 	add.w	r3, r1, #16
 80269f2:	4635      	mov	r5, r6
 80269f4:	ed54 7a04 	vldr	s15, [r4, #-16]
 80269f8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80269fc:	3d01      	subs	r5, #1
 80269fe:	ed43 7a04 	vstr	s15, [r3, #-16]
 8026a02:	ed54 7a03 	vldr	s15, [r4, #-12]
 8026a06:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026a0a:	f104 0410 	add.w	r4, r4, #16
 8026a0e:	ed43 7a03 	vstr	s15, [r3, #-12]
 8026a12:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8026a16:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026a1a:	f103 0310 	add.w	r3, r3, #16
 8026a1e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8026a22:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8026a26:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026a2a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8026a2e:	d1e1      	bne.n	80269f4 <arm_scale_f32+0x10>
 8026a30:	0136      	lsls	r6, r6, #4
 8026a32:	4430      	add	r0, r6
 8026a34:	4431      	add	r1, r6
 8026a36:	f012 0203 	ands.w	r2, r2, #3
 8026a3a:	d015      	beq.n	8026a68 <arm_scale_f32+0x84>
 8026a3c:	edd0 7a00 	vldr	s15, [r0]
 8026a40:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026a44:	3a01      	subs	r2, #1
 8026a46:	edc1 7a00 	vstr	s15, [r1]
 8026a4a:	d00d      	beq.n	8026a68 <arm_scale_f32+0x84>
 8026a4c:	edd0 7a01 	vldr	s15, [r0, #4]
 8026a50:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026a54:	2a01      	cmp	r2, #1
 8026a56:	edc1 7a01 	vstr	s15, [r1, #4]
 8026a5a:	d005      	beq.n	8026a68 <arm_scale_f32+0x84>
 8026a5c:	edd0 7a02 	vldr	s15, [r0, #8]
 8026a60:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026a64:	ed81 0a02 	vstr	s0, [r1, #8]
 8026a68:	bc70      	pop	{r4, r5, r6}
 8026a6a:	4770      	bx	lr

08026a6c <arm_dot_prod_f32>:
 8026a6c:	b4f0      	push	{r4, r5, r6, r7}
 8026a6e:	0897      	lsrs	r7, r2, #2
 8026a70:	eddf 5a29 	vldr	s11, [pc, #164]	; 8026b18 <arm_dot_prod_f32+0xac>
 8026a74:	d02d      	beq.n	8026ad2 <arm_dot_prod_f32+0x66>
 8026a76:	f100 0510 	add.w	r5, r0, #16
 8026a7a:	f101 0410 	add.w	r4, r1, #16
 8026a7e:	463e      	mov	r6, r7
 8026a80:	ed55 6a04 	vldr	s13, [r5, #-16]
 8026a84:	ed54 3a04 	vldr	s7, [r4, #-16]
 8026a88:	ed15 7a03 	vldr	s14, [r5, #-12]
 8026a8c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8026a90:	ed55 7a02 	vldr	s15, [r5, #-8]
 8026a94:	ed54 4a02 	vldr	s9, [r4, #-8]
 8026a98:	ed15 6a01 	vldr	s12, [r5, #-4]
 8026a9c:	ed14 5a01 	vldr	s10, [r4, #-4]
 8026aa0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8026aa4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8026aa8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8026aac:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8026ab0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8026ab4:	ee66 6a05 	vmul.f32	s13, s12, s10
 8026ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026abc:	3e01      	subs	r6, #1
 8026abe:	f105 0510 	add.w	r5, r5, #16
 8026ac2:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8026ac6:	f104 0410 	add.w	r4, r4, #16
 8026aca:	d1d9      	bne.n	8026a80 <arm_dot_prod_f32+0x14>
 8026acc:	013f      	lsls	r7, r7, #4
 8026ace:	4438      	add	r0, r7
 8026ad0:	4439      	add	r1, r7
 8026ad2:	f012 0203 	ands.w	r2, r2, #3
 8026ad6:	d01b      	beq.n	8026b10 <arm_dot_prod_f32+0xa4>
 8026ad8:	edd1 7a00 	vldr	s15, [r1]
 8026adc:	ed90 7a00 	vldr	s14, [r0]
 8026ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026ae4:	3a01      	subs	r2, #1
 8026ae6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8026aea:	d011      	beq.n	8026b10 <arm_dot_prod_f32+0xa4>
 8026aec:	edd1 7a01 	vldr	s15, [r1, #4]
 8026af0:	ed90 7a01 	vldr	s14, [r0, #4]
 8026af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026af8:	2a01      	cmp	r2, #1
 8026afa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8026afe:	d007      	beq.n	8026b10 <arm_dot_prod_f32+0xa4>
 8026b00:	edd0 7a02 	vldr	s15, [r0, #8]
 8026b04:	ed91 7a02 	vldr	s14, [r1, #8]
 8026b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026b0c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8026b10:	edc3 5a00 	vstr	s11, [r3]
 8026b14:	bcf0      	pop	{r4, r5, r6, r7}
 8026b16:	4770      	bx	lr
 8026b18:	00000000 	.word	0x00000000

08026b1c <arm_add_f32>:
 8026b1c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8026b20:	b4f0      	push	{r4, r5, r6, r7}
 8026b22:	d033      	beq.n	8026b8c <arm_add_f32+0x70>
 8026b24:	f100 0610 	add.w	r6, r0, #16
 8026b28:	f101 0510 	add.w	r5, r1, #16
 8026b2c:	f102 0410 	add.w	r4, r2, #16
 8026b30:	4667      	mov	r7, ip
 8026b32:	ed15 7a04 	vldr	s14, [r5, #-16]
 8026b36:	ed56 7a04 	vldr	s15, [r6, #-16]
 8026b3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026b3e:	3f01      	subs	r7, #1
 8026b40:	ed44 7a04 	vstr	s15, [r4, #-16]
 8026b44:	ed15 7a03 	vldr	s14, [r5, #-12]
 8026b48:	ed56 7a03 	vldr	s15, [r6, #-12]
 8026b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026b50:	f106 0610 	add.w	r6, r6, #16
 8026b54:	ed44 7a03 	vstr	s15, [r4, #-12]
 8026b58:	ed15 7a02 	vldr	s14, [r5, #-8]
 8026b5c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8026b60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026b64:	f105 0510 	add.w	r5, r5, #16
 8026b68:	ed44 7a02 	vstr	s15, [r4, #-8]
 8026b6c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8026b70:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8026b74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026b78:	f104 0410 	add.w	r4, r4, #16
 8026b7c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8026b80:	d1d7      	bne.n	8026b32 <arm_add_f32+0x16>
 8026b82:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8026b86:	4420      	add	r0, r4
 8026b88:	4421      	add	r1, r4
 8026b8a:	4422      	add	r2, r4
 8026b8c:	f013 0303 	ands.w	r3, r3, #3
 8026b90:	d01b      	beq.n	8026bca <arm_add_f32+0xae>
 8026b92:	edd1 7a00 	vldr	s15, [r1]
 8026b96:	ed90 7a00 	vldr	s14, [r0]
 8026b9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026b9e:	3b01      	subs	r3, #1
 8026ba0:	edc2 7a00 	vstr	s15, [r2]
 8026ba4:	d011      	beq.n	8026bca <arm_add_f32+0xae>
 8026ba6:	edd0 7a01 	vldr	s15, [r0, #4]
 8026baa:	ed91 7a01 	vldr	s14, [r1, #4]
 8026bae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026bb2:	2b01      	cmp	r3, #1
 8026bb4:	edc2 7a01 	vstr	s15, [r2, #4]
 8026bb8:	d007      	beq.n	8026bca <arm_add_f32+0xae>
 8026bba:	edd0 7a02 	vldr	s15, [r0, #8]
 8026bbe:	ed91 7a02 	vldr	s14, [r1, #8]
 8026bc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026bc6:	edc2 7a02 	vstr	s15, [r2, #8]
 8026bca:	bcf0      	pop	{r4, r5, r6, r7}
 8026bcc:	4770      	bx	lr
 8026bce:	bf00      	nop

08026bd0 <__errno>:
 8026bd0:	4b01      	ldr	r3, [pc, #4]	; (8026bd8 <__errno+0x8>)
 8026bd2:	6818      	ldr	r0, [r3, #0]
 8026bd4:	4770      	bx	lr
 8026bd6:	bf00      	nop
 8026bd8:	20000144 	.word	0x20000144

08026bdc <__libc_init_array>:
 8026bdc:	b570      	push	{r4, r5, r6, lr}
 8026bde:	4e0d      	ldr	r6, [pc, #52]	; (8026c14 <__libc_init_array+0x38>)
 8026be0:	4c0d      	ldr	r4, [pc, #52]	; (8026c18 <__libc_init_array+0x3c>)
 8026be2:	1ba4      	subs	r4, r4, r6
 8026be4:	10a4      	asrs	r4, r4, #2
 8026be6:	2500      	movs	r5, #0
 8026be8:	42a5      	cmp	r5, r4
 8026bea:	d109      	bne.n	8026c00 <__libc_init_array+0x24>
 8026bec:	4e0b      	ldr	r6, [pc, #44]	; (8026c1c <__libc_init_array+0x40>)
 8026bee:	4c0c      	ldr	r4, [pc, #48]	; (8026c20 <__libc_init_array+0x44>)
 8026bf0:	f001 f8d4 	bl	8027d9c <_init>
 8026bf4:	1ba4      	subs	r4, r4, r6
 8026bf6:	10a4      	asrs	r4, r4, #2
 8026bf8:	2500      	movs	r5, #0
 8026bfa:	42a5      	cmp	r5, r4
 8026bfc:	d105      	bne.n	8026c0a <__libc_init_array+0x2e>
 8026bfe:	bd70      	pop	{r4, r5, r6, pc}
 8026c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026c04:	4798      	blx	r3
 8026c06:	3501      	adds	r5, #1
 8026c08:	e7ee      	b.n	8026be8 <__libc_init_array+0xc>
 8026c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026c0e:	4798      	blx	r3
 8026c10:	3501      	adds	r5, #1
 8026c12:	e7f2      	b.n	8026bfa <__libc_init_array+0x1e>
 8026c14:	080295d8 	.word	0x080295d8
 8026c18:	080295d8 	.word	0x080295d8
 8026c1c:	080295d8 	.word	0x080295d8
 8026c20:	080295dc 	.word	0x080295dc

08026c24 <memcpy>:
 8026c24:	b510      	push	{r4, lr}
 8026c26:	1e43      	subs	r3, r0, #1
 8026c28:	440a      	add	r2, r1
 8026c2a:	4291      	cmp	r1, r2
 8026c2c:	d100      	bne.n	8026c30 <memcpy+0xc>
 8026c2e:	bd10      	pop	{r4, pc}
 8026c30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026c34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026c38:	e7f7      	b.n	8026c2a <memcpy+0x6>

08026c3a <memset>:
 8026c3a:	4402      	add	r2, r0
 8026c3c:	4603      	mov	r3, r0
 8026c3e:	4293      	cmp	r3, r2
 8026c40:	d100      	bne.n	8026c44 <memset+0xa>
 8026c42:	4770      	bx	lr
 8026c44:	f803 1b01 	strb.w	r1, [r3], #1
 8026c48:	e7f9      	b.n	8026c3e <memset+0x4>
	...

08026c4c <pow>:
 8026c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c50:	ed2d 8b04 	vpush	{d8-d9}
 8026c54:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8026f28 <pow+0x2dc>
 8026c58:	b08d      	sub	sp, #52	; 0x34
 8026c5a:	ec57 6b10 	vmov	r6, r7, d0
 8026c5e:	ec55 4b11 	vmov	r4, r5, d1
 8026c62:	f000 f9b5 	bl	8026fd0 <__ieee754_pow>
 8026c66:	f999 3000 	ldrsb.w	r3, [r9]
 8026c6a:	9300      	str	r3, [sp, #0]
 8026c6c:	3301      	adds	r3, #1
 8026c6e:	eeb0 8a40 	vmov.f32	s16, s0
 8026c72:	eef0 8a60 	vmov.f32	s17, s1
 8026c76:	46c8      	mov	r8, r9
 8026c78:	d05f      	beq.n	8026d3a <pow+0xee>
 8026c7a:	4622      	mov	r2, r4
 8026c7c:	462b      	mov	r3, r5
 8026c7e:	4620      	mov	r0, r4
 8026c80:	4629      	mov	r1, r5
 8026c82:	f7e9 fedd 	bl	8010a40 <__aeabi_dcmpun>
 8026c86:	4683      	mov	fp, r0
 8026c88:	2800      	cmp	r0, #0
 8026c8a:	d156      	bne.n	8026d3a <pow+0xee>
 8026c8c:	4632      	mov	r2, r6
 8026c8e:	463b      	mov	r3, r7
 8026c90:	4630      	mov	r0, r6
 8026c92:	4639      	mov	r1, r7
 8026c94:	f7e9 fed4 	bl	8010a40 <__aeabi_dcmpun>
 8026c98:	9001      	str	r0, [sp, #4]
 8026c9a:	b1e8      	cbz	r0, 8026cd8 <pow+0x8c>
 8026c9c:	2200      	movs	r2, #0
 8026c9e:	2300      	movs	r3, #0
 8026ca0:	4620      	mov	r0, r4
 8026ca2:	4629      	mov	r1, r5
 8026ca4:	f7e9 fe9a 	bl	80109dc <__aeabi_dcmpeq>
 8026ca8:	2800      	cmp	r0, #0
 8026caa:	d046      	beq.n	8026d3a <pow+0xee>
 8026cac:	2301      	movs	r3, #1
 8026cae:	9302      	str	r3, [sp, #8]
 8026cb0:	4b96      	ldr	r3, [pc, #600]	; (8026f0c <pow+0x2c0>)
 8026cb2:	9303      	str	r3, [sp, #12]
 8026cb4:	4b96      	ldr	r3, [pc, #600]	; (8026f10 <pow+0x2c4>)
 8026cb6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8026cba:	2200      	movs	r2, #0
 8026cbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026cc0:	9b00      	ldr	r3, [sp, #0]
 8026cc2:	2b02      	cmp	r3, #2
 8026cc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8026cc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8026ccc:	d033      	beq.n	8026d36 <pow+0xea>
 8026cce:	a802      	add	r0, sp, #8
 8026cd0:	f000 ff50 	bl	8027b74 <matherr>
 8026cd4:	bb48      	cbnz	r0, 8026d2a <pow+0xde>
 8026cd6:	e05d      	b.n	8026d94 <pow+0x148>
 8026cd8:	f04f 0a00 	mov.w	sl, #0
 8026cdc:	f04f 0b00 	mov.w	fp, #0
 8026ce0:	4652      	mov	r2, sl
 8026ce2:	465b      	mov	r3, fp
 8026ce4:	4630      	mov	r0, r6
 8026ce6:	4639      	mov	r1, r7
 8026ce8:	f7e9 fe78 	bl	80109dc <__aeabi_dcmpeq>
 8026cec:	ec4b ab19 	vmov	d9, sl, fp
 8026cf0:	2800      	cmp	r0, #0
 8026cf2:	d054      	beq.n	8026d9e <pow+0x152>
 8026cf4:	4652      	mov	r2, sl
 8026cf6:	465b      	mov	r3, fp
 8026cf8:	4620      	mov	r0, r4
 8026cfa:	4629      	mov	r1, r5
 8026cfc:	f7e9 fe6e 	bl	80109dc <__aeabi_dcmpeq>
 8026d00:	4680      	mov	r8, r0
 8026d02:	b318      	cbz	r0, 8026d4c <pow+0x100>
 8026d04:	2301      	movs	r3, #1
 8026d06:	9302      	str	r3, [sp, #8]
 8026d08:	4b80      	ldr	r3, [pc, #512]	; (8026f0c <pow+0x2c0>)
 8026d0a:	9303      	str	r3, [sp, #12]
 8026d0c:	9b01      	ldr	r3, [sp, #4]
 8026d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8026d10:	9b00      	ldr	r3, [sp, #0]
 8026d12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8026d16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8026d1a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8026d1e:	2b00      	cmp	r3, #0
 8026d20:	d0d5      	beq.n	8026cce <pow+0x82>
 8026d22:	4b7b      	ldr	r3, [pc, #492]	; (8026f10 <pow+0x2c4>)
 8026d24:	2200      	movs	r2, #0
 8026d26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026d2c:	b11b      	cbz	r3, 8026d36 <pow+0xea>
 8026d2e:	f7ff ff4f 	bl	8026bd0 <__errno>
 8026d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026d34:	6003      	str	r3, [r0, #0]
 8026d36:	ed9d 8b08 	vldr	d8, [sp, #32]
 8026d3a:	eeb0 0a48 	vmov.f32	s0, s16
 8026d3e:	eef0 0a68 	vmov.f32	s1, s17
 8026d42:	b00d      	add	sp, #52	; 0x34
 8026d44:	ecbd 8b04 	vpop	{d8-d9}
 8026d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d4c:	ec45 4b10 	vmov	d0, r4, r5
 8026d50:	f000 ff08 	bl	8027b64 <finite>
 8026d54:	2800      	cmp	r0, #0
 8026d56:	d0f0      	beq.n	8026d3a <pow+0xee>
 8026d58:	4652      	mov	r2, sl
 8026d5a:	465b      	mov	r3, fp
 8026d5c:	4620      	mov	r0, r4
 8026d5e:	4629      	mov	r1, r5
 8026d60:	f7e9 fe46 	bl	80109f0 <__aeabi_dcmplt>
 8026d64:	2800      	cmp	r0, #0
 8026d66:	d0e8      	beq.n	8026d3a <pow+0xee>
 8026d68:	2301      	movs	r3, #1
 8026d6a:	9302      	str	r3, [sp, #8]
 8026d6c:	4b67      	ldr	r3, [pc, #412]	; (8026f0c <pow+0x2c0>)
 8026d6e:	9303      	str	r3, [sp, #12]
 8026d70:	f999 3000 	ldrsb.w	r3, [r9]
 8026d74:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8026d78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8026d7c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8026d80:	b913      	cbnz	r3, 8026d88 <pow+0x13c>
 8026d82:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8026d86:	e7a2      	b.n	8026cce <pow+0x82>
 8026d88:	4962      	ldr	r1, [pc, #392]	; (8026f14 <pow+0x2c8>)
 8026d8a:	2000      	movs	r0, #0
 8026d8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8026d90:	2b02      	cmp	r3, #2
 8026d92:	d19c      	bne.n	8026cce <pow+0x82>
 8026d94:	f7ff ff1c 	bl	8026bd0 <__errno>
 8026d98:	2321      	movs	r3, #33	; 0x21
 8026d9a:	6003      	str	r3, [r0, #0]
 8026d9c:	e7c5      	b.n	8026d2a <pow+0xde>
 8026d9e:	eeb0 0a48 	vmov.f32	s0, s16
 8026da2:	eef0 0a68 	vmov.f32	s1, s17
 8026da6:	f000 fedd 	bl	8027b64 <finite>
 8026daa:	9000      	str	r0, [sp, #0]
 8026dac:	2800      	cmp	r0, #0
 8026dae:	f040 8081 	bne.w	8026eb4 <pow+0x268>
 8026db2:	ec47 6b10 	vmov	d0, r6, r7
 8026db6:	f000 fed5 	bl	8027b64 <finite>
 8026dba:	2800      	cmp	r0, #0
 8026dbc:	d07a      	beq.n	8026eb4 <pow+0x268>
 8026dbe:	ec45 4b10 	vmov	d0, r4, r5
 8026dc2:	f000 fecf 	bl	8027b64 <finite>
 8026dc6:	2800      	cmp	r0, #0
 8026dc8:	d074      	beq.n	8026eb4 <pow+0x268>
 8026dca:	ec53 2b18 	vmov	r2, r3, d8
 8026dce:	ee18 0a10 	vmov	r0, s16
 8026dd2:	4619      	mov	r1, r3
 8026dd4:	f7e9 fe34 	bl	8010a40 <__aeabi_dcmpun>
 8026dd8:	f999 9000 	ldrsb.w	r9, [r9]
 8026ddc:	4b4b      	ldr	r3, [pc, #300]	; (8026f0c <pow+0x2c0>)
 8026dde:	b1b0      	cbz	r0, 8026e0e <pow+0x1c2>
 8026de0:	2201      	movs	r2, #1
 8026de2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8026de6:	9b00      	ldr	r3, [sp, #0]
 8026de8:	930a      	str	r3, [sp, #40]	; 0x28
 8026dea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8026dee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8026df2:	f1b9 0f00 	cmp.w	r9, #0
 8026df6:	d0c4      	beq.n	8026d82 <pow+0x136>
 8026df8:	4652      	mov	r2, sl
 8026dfa:	465b      	mov	r3, fp
 8026dfc:	4650      	mov	r0, sl
 8026dfe:	4659      	mov	r1, fp
 8026e00:	f7e9 fcae 	bl	8010760 <__aeabi_ddiv>
 8026e04:	f1b9 0f02 	cmp.w	r9, #2
 8026e08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8026e0c:	e7c1      	b.n	8026d92 <pow+0x146>
 8026e0e:	2203      	movs	r2, #3
 8026e10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8026e14:	900a      	str	r0, [sp, #40]	; 0x28
 8026e16:	4629      	mov	r1, r5
 8026e18:	4620      	mov	r0, r4
 8026e1a:	2200      	movs	r2, #0
 8026e1c:	4b3e      	ldr	r3, [pc, #248]	; (8026f18 <pow+0x2cc>)
 8026e1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8026e22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8026e26:	f7e9 fb71 	bl	801050c <__aeabi_dmul>
 8026e2a:	4604      	mov	r4, r0
 8026e2c:	460d      	mov	r5, r1
 8026e2e:	f1b9 0f00 	cmp.w	r9, #0
 8026e32:	d124      	bne.n	8026e7e <pow+0x232>
 8026e34:	4b39      	ldr	r3, [pc, #228]	; (8026f1c <pow+0x2d0>)
 8026e36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8026e3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026e3e:	4630      	mov	r0, r6
 8026e40:	4652      	mov	r2, sl
 8026e42:	465b      	mov	r3, fp
 8026e44:	4639      	mov	r1, r7
 8026e46:	f7e9 fdd3 	bl	80109f0 <__aeabi_dcmplt>
 8026e4a:	2800      	cmp	r0, #0
 8026e4c:	d056      	beq.n	8026efc <pow+0x2b0>
 8026e4e:	ec45 4b10 	vmov	d0, r4, r5
 8026e52:	f000 fe99 	bl	8027b88 <rint>
 8026e56:	4622      	mov	r2, r4
 8026e58:	462b      	mov	r3, r5
 8026e5a:	ec51 0b10 	vmov	r0, r1, d0
 8026e5e:	f7e9 fdbd 	bl	80109dc <__aeabi_dcmpeq>
 8026e62:	b920      	cbnz	r0, 8026e6e <pow+0x222>
 8026e64:	4b2e      	ldr	r3, [pc, #184]	; (8026f20 <pow+0x2d4>)
 8026e66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8026e6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026e6e:	f998 3000 	ldrsb.w	r3, [r8]
 8026e72:	2b02      	cmp	r3, #2
 8026e74:	d142      	bne.n	8026efc <pow+0x2b0>
 8026e76:	f7ff feab 	bl	8026bd0 <__errno>
 8026e7a:	2322      	movs	r3, #34	; 0x22
 8026e7c:	e78d      	b.n	8026d9a <pow+0x14e>
 8026e7e:	4b29      	ldr	r3, [pc, #164]	; (8026f24 <pow+0x2d8>)
 8026e80:	2200      	movs	r2, #0
 8026e82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026e86:	4630      	mov	r0, r6
 8026e88:	4652      	mov	r2, sl
 8026e8a:	465b      	mov	r3, fp
 8026e8c:	4639      	mov	r1, r7
 8026e8e:	f7e9 fdaf 	bl	80109f0 <__aeabi_dcmplt>
 8026e92:	2800      	cmp	r0, #0
 8026e94:	d0eb      	beq.n	8026e6e <pow+0x222>
 8026e96:	ec45 4b10 	vmov	d0, r4, r5
 8026e9a:	f000 fe75 	bl	8027b88 <rint>
 8026e9e:	4622      	mov	r2, r4
 8026ea0:	462b      	mov	r3, r5
 8026ea2:	ec51 0b10 	vmov	r0, r1, d0
 8026ea6:	f7e9 fd99 	bl	80109dc <__aeabi_dcmpeq>
 8026eaa:	2800      	cmp	r0, #0
 8026eac:	d1df      	bne.n	8026e6e <pow+0x222>
 8026eae:	2200      	movs	r2, #0
 8026eb0:	4b18      	ldr	r3, [pc, #96]	; (8026f14 <pow+0x2c8>)
 8026eb2:	e7da      	b.n	8026e6a <pow+0x21e>
 8026eb4:	2200      	movs	r2, #0
 8026eb6:	2300      	movs	r3, #0
 8026eb8:	ec51 0b18 	vmov	r0, r1, d8
 8026ebc:	f7e9 fd8e 	bl	80109dc <__aeabi_dcmpeq>
 8026ec0:	2800      	cmp	r0, #0
 8026ec2:	f43f af3a 	beq.w	8026d3a <pow+0xee>
 8026ec6:	ec47 6b10 	vmov	d0, r6, r7
 8026eca:	f000 fe4b 	bl	8027b64 <finite>
 8026ece:	2800      	cmp	r0, #0
 8026ed0:	f43f af33 	beq.w	8026d3a <pow+0xee>
 8026ed4:	ec45 4b10 	vmov	d0, r4, r5
 8026ed8:	f000 fe44 	bl	8027b64 <finite>
 8026edc:	2800      	cmp	r0, #0
 8026ede:	f43f af2c 	beq.w	8026d3a <pow+0xee>
 8026ee2:	2304      	movs	r3, #4
 8026ee4:	9302      	str	r3, [sp, #8]
 8026ee6:	4b09      	ldr	r3, [pc, #36]	; (8026f0c <pow+0x2c0>)
 8026ee8:	9303      	str	r3, [sp, #12]
 8026eea:	2300      	movs	r3, #0
 8026eec:	930a      	str	r3, [sp, #40]	; 0x28
 8026eee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8026ef2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8026ef6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8026efa:	e7b8      	b.n	8026e6e <pow+0x222>
 8026efc:	a802      	add	r0, sp, #8
 8026efe:	f000 fe39 	bl	8027b74 <matherr>
 8026f02:	2800      	cmp	r0, #0
 8026f04:	f47f af11 	bne.w	8026d2a <pow+0xde>
 8026f08:	e7b5      	b.n	8026e76 <pow+0x22a>
 8026f0a:	bf00      	nop
 8026f0c:	08029584 	.word	0x08029584
 8026f10:	3ff00000 	.word	0x3ff00000
 8026f14:	fff00000 	.word	0xfff00000
 8026f18:	3fe00000 	.word	0x3fe00000
 8026f1c:	47efffff 	.word	0x47efffff
 8026f20:	c7efffff 	.word	0xc7efffff
 8026f24:	7ff00000 	.word	0x7ff00000
 8026f28:	200001a8 	.word	0x200001a8

08026f2c <sqrtf>:
 8026f2c:	b510      	push	{r4, lr}
 8026f2e:	ed2d 8b02 	vpush	{d8}
 8026f32:	b08a      	sub	sp, #40	; 0x28
 8026f34:	eeb0 8a40 	vmov.f32	s16, s0
 8026f38:	f000 fe08 	bl	8027b4c <__ieee754_sqrtf>
 8026f3c:	4b21      	ldr	r3, [pc, #132]	; (8026fc4 <sqrtf+0x98>)
 8026f3e:	f993 4000 	ldrsb.w	r4, [r3]
 8026f42:	1c63      	adds	r3, r4, #1
 8026f44:	d02c      	beq.n	8026fa0 <sqrtf+0x74>
 8026f46:	eeb4 8a48 	vcmp.f32	s16, s16
 8026f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f4e:	d627      	bvs.n	8026fa0 <sqrtf+0x74>
 8026f50:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8026f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f58:	d522      	bpl.n	8026fa0 <sqrtf+0x74>
 8026f5a:	2301      	movs	r3, #1
 8026f5c:	9300      	str	r3, [sp, #0]
 8026f5e:	4b1a      	ldr	r3, [pc, #104]	; (8026fc8 <sqrtf+0x9c>)
 8026f60:	9301      	str	r3, [sp, #4]
 8026f62:	ee18 0a10 	vmov	r0, s16
 8026f66:	2300      	movs	r3, #0
 8026f68:	9308      	str	r3, [sp, #32]
 8026f6a:	f7e9 fa77 	bl	801045c <__aeabi_f2d>
 8026f6e:	2200      	movs	r2, #0
 8026f70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026f78:	2300      	movs	r3, #0
 8026f7a:	b9ac      	cbnz	r4, 8026fa8 <sqrtf+0x7c>
 8026f7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8026f80:	4668      	mov	r0, sp
 8026f82:	f000 fdf7 	bl	8027b74 <matherr>
 8026f86:	b1b8      	cbz	r0, 8026fb8 <sqrtf+0x8c>
 8026f88:	9b08      	ldr	r3, [sp, #32]
 8026f8a:	b11b      	cbz	r3, 8026f94 <sqrtf+0x68>
 8026f8c:	f7ff fe20 	bl	8026bd0 <__errno>
 8026f90:	9b08      	ldr	r3, [sp, #32]
 8026f92:	6003      	str	r3, [r0, #0]
 8026f94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8026f98:	f7e9 fd68 	bl	8010a6c <__aeabi_d2f>
 8026f9c:	ee00 0a10 	vmov	s0, r0
 8026fa0:	b00a      	add	sp, #40	; 0x28
 8026fa2:	ecbd 8b02 	vpop	{d8}
 8026fa6:	bd10      	pop	{r4, pc}
 8026fa8:	4610      	mov	r0, r2
 8026faa:	4619      	mov	r1, r3
 8026fac:	f7e9 fbd8 	bl	8010760 <__aeabi_ddiv>
 8026fb0:	2c02      	cmp	r4, #2
 8026fb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8026fb6:	d1e3      	bne.n	8026f80 <sqrtf+0x54>
 8026fb8:	f7ff fe0a 	bl	8026bd0 <__errno>
 8026fbc:	2321      	movs	r3, #33	; 0x21
 8026fbe:	6003      	str	r3, [r0, #0]
 8026fc0:	e7e2      	b.n	8026f88 <sqrtf+0x5c>
 8026fc2:	bf00      	nop
 8026fc4:	200001a8 	.word	0x200001a8
 8026fc8:	08029588 	.word	0x08029588
 8026fcc:	00000000 	.word	0x00000000

08026fd0 <__ieee754_pow>:
 8026fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fd4:	b091      	sub	sp, #68	; 0x44
 8026fd6:	ed8d 1b00 	vstr	d1, [sp]
 8026fda:	e9dd 2900 	ldrd	r2, r9, [sp]
 8026fde:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8026fe2:	ea58 0302 	orrs.w	r3, r8, r2
 8026fe6:	ec57 6b10 	vmov	r6, r7, d0
 8026fea:	f000 84be 	beq.w	802796a <__ieee754_pow+0x99a>
 8026fee:	4b7a      	ldr	r3, [pc, #488]	; (80271d8 <__ieee754_pow+0x208>)
 8026ff0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8026ff4:	429c      	cmp	r4, r3
 8026ff6:	463d      	mov	r5, r7
 8026ff8:	ee10 aa10 	vmov	sl, s0
 8026ffc:	dc09      	bgt.n	8027012 <__ieee754_pow+0x42>
 8026ffe:	d103      	bne.n	8027008 <__ieee754_pow+0x38>
 8027000:	b93e      	cbnz	r6, 8027012 <__ieee754_pow+0x42>
 8027002:	45a0      	cmp	r8, r4
 8027004:	dc0d      	bgt.n	8027022 <__ieee754_pow+0x52>
 8027006:	e001      	b.n	802700c <__ieee754_pow+0x3c>
 8027008:	4598      	cmp	r8, r3
 802700a:	dc02      	bgt.n	8027012 <__ieee754_pow+0x42>
 802700c:	4598      	cmp	r8, r3
 802700e:	d10e      	bne.n	802702e <__ieee754_pow+0x5e>
 8027010:	b16a      	cbz	r2, 802702e <__ieee754_pow+0x5e>
 8027012:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8027016:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802701a:	ea54 030a 	orrs.w	r3, r4, sl
 802701e:	f000 84a4 	beq.w	802796a <__ieee754_pow+0x99a>
 8027022:	486e      	ldr	r0, [pc, #440]	; (80271dc <__ieee754_pow+0x20c>)
 8027024:	b011      	add	sp, #68	; 0x44
 8027026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802702a:	f000 bda5 	b.w	8027b78 <nan>
 802702e:	2d00      	cmp	r5, #0
 8027030:	da53      	bge.n	80270da <__ieee754_pow+0x10a>
 8027032:	4b6b      	ldr	r3, [pc, #428]	; (80271e0 <__ieee754_pow+0x210>)
 8027034:	4598      	cmp	r8, r3
 8027036:	dc4d      	bgt.n	80270d4 <__ieee754_pow+0x104>
 8027038:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802703c:	4598      	cmp	r8, r3
 802703e:	dd4c      	ble.n	80270da <__ieee754_pow+0x10a>
 8027040:	ea4f 5328 	mov.w	r3, r8, asr #20
 8027044:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8027048:	2b14      	cmp	r3, #20
 802704a:	dd26      	ble.n	802709a <__ieee754_pow+0xca>
 802704c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8027050:	fa22 f103 	lsr.w	r1, r2, r3
 8027054:	fa01 f303 	lsl.w	r3, r1, r3
 8027058:	4293      	cmp	r3, r2
 802705a:	d13e      	bne.n	80270da <__ieee754_pow+0x10a>
 802705c:	f001 0101 	and.w	r1, r1, #1
 8027060:	f1c1 0b02 	rsb	fp, r1, #2
 8027064:	2a00      	cmp	r2, #0
 8027066:	d15b      	bne.n	8027120 <__ieee754_pow+0x150>
 8027068:	4b5b      	ldr	r3, [pc, #364]	; (80271d8 <__ieee754_pow+0x208>)
 802706a:	4598      	cmp	r8, r3
 802706c:	d124      	bne.n	80270b8 <__ieee754_pow+0xe8>
 802706e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8027072:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8027076:	ea53 030a 	orrs.w	r3, r3, sl
 802707a:	f000 8476 	beq.w	802796a <__ieee754_pow+0x99a>
 802707e:	4b59      	ldr	r3, [pc, #356]	; (80271e4 <__ieee754_pow+0x214>)
 8027080:	429c      	cmp	r4, r3
 8027082:	dd2d      	ble.n	80270e0 <__ieee754_pow+0x110>
 8027084:	f1b9 0f00 	cmp.w	r9, #0
 8027088:	f280 8473 	bge.w	8027972 <__ieee754_pow+0x9a2>
 802708c:	2000      	movs	r0, #0
 802708e:	2100      	movs	r1, #0
 8027090:	ec41 0b10 	vmov	d0, r0, r1
 8027094:	b011      	add	sp, #68	; 0x44
 8027096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802709a:	2a00      	cmp	r2, #0
 802709c:	d13e      	bne.n	802711c <__ieee754_pow+0x14c>
 802709e:	f1c3 0314 	rsb	r3, r3, #20
 80270a2:	fa48 f103 	asr.w	r1, r8, r3
 80270a6:	fa01 f303 	lsl.w	r3, r1, r3
 80270aa:	4543      	cmp	r3, r8
 80270ac:	f040 8469 	bne.w	8027982 <__ieee754_pow+0x9b2>
 80270b0:	f001 0101 	and.w	r1, r1, #1
 80270b4:	f1c1 0b02 	rsb	fp, r1, #2
 80270b8:	4b4b      	ldr	r3, [pc, #300]	; (80271e8 <__ieee754_pow+0x218>)
 80270ba:	4598      	cmp	r8, r3
 80270bc:	d118      	bne.n	80270f0 <__ieee754_pow+0x120>
 80270be:	f1b9 0f00 	cmp.w	r9, #0
 80270c2:	f280 845a 	bge.w	802797a <__ieee754_pow+0x9aa>
 80270c6:	4948      	ldr	r1, [pc, #288]	; (80271e8 <__ieee754_pow+0x218>)
 80270c8:	4632      	mov	r2, r6
 80270ca:	463b      	mov	r3, r7
 80270cc:	2000      	movs	r0, #0
 80270ce:	f7e9 fb47 	bl	8010760 <__aeabi_ddiv>
 80270d2:	e7dd      	b.n	8027090 <__ieee754_pow+0xc0>
 80270d4:	f04f 0b02 	mov.w	fp, #2
 80270d8:	e7c4      	b.n	8027064 <__ieee754_pow+0x94>
 80270da:	f04f 0b00 	mov.w	fp, #0
 80270de:	e7c1      	b.n	8027064 <__ieee754_pow+0x94>
 80270e0:	f1b9 0f00 	cmp.w	r9, #0
 80270e4:	dad2      	bge.n	802708c <__ieee754_pow+0xbc>
 80270e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80270ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80270ee:	e7cf      	b.n	8027090 <__ieee754_pow+0xc0>
 80270f0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80270f4:	d106      	bne.n	8027104 <__ieee754_pow+0x134>
 80270f6:	4632      	mov	r2, r6
 80270f8:	463b      	mov	r3, r7
 80270fa:	4610      	mov	r0, r2
 80270fc:	4619      	mov	r1, r3
 80270fe:	f7e9 fa05 	bl	801050c <__aeabi_dmul>
 8027102:	e7c5      	b.n	8027090 <__ieee754_pow+0xc0>
 8027104:	4b39      	ldr	r3, [pc, #228]	; (80271ec <__ieee754_pow+0x21c>)
 8027106:	4599      	cmp	r9, r3
 8027108:	d10a      	bne.n	8027120 <__ieee754_pow+0x150>
 802710a:	2d00      	cmp	r5, #0
 802710c:	db08      	blt.n	8027120 <__ieee754_pow+0x150>
 802710e:	ec47 6b10 	vmov	d0, r6, r7
 8027112:	b011      	add	sp, #68	; 0x44
 8027114:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027118:	f000 bc68 	b.w	80279ec <__ieee754_sqrt>
 802711c:	f04f 0b00 	mov.w	fp, #0
 8027120:	ec47 6b10 	vmov	d0, r6, r7
 8027124:	f000 fd15 	bl	8027b52 <fabs>
 8027128:	ec51 0b10 	vmov	r0, r1, d0
 802712c:	f1ba 0f00 	cmp.w	sl, #0
 8027130:	d127      	bne.n	8027182 <__ieee754_pow+0x1b2>
 8027132:	b124      	cbz	r4, 802713e <__ieee754_pow+0x16e>
 8027134:	4b2c      	ldr	r3, [pc, #176]	; (80271e8 <__ieee754_pow+0x218>)
 8027136:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 802713a:	429a      	cmp	r2, r3
 802713c:	d121      	bne.n	8027182 <__ieee754_pow+0x1b2>
 802713e:	f1b9 0f00 	cmp.w	r9, #0
 8027142:	da05      	bge.n	8027150 <__ieee754_pow+0x180>
 8027144:	4602      	mov	r2, r0
 8027146:	460b      	mov	r3, r1
 8027148:	2000      	movs	r0, #0
 802714a:	4927      	ldr	r1, [pc, #156]	; (80271e8 <__ieee754_pow+0x218>)
 802714c:	f7e9 fb08 	bl	8010760 <__aeabi_ddiv>
 8027150:	2d00      	cmp	r5, #0
 8027152:	da9d      	bge.n	8027090 <__ieee754_pow+0xc0>
 8027154:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8027158:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802715c:	ea54 030b 	orrs.w	r3, r4, fp
 8027160:	d108      	bne.n	8027174 <__ieee754_pow+0x1a4>
 8027162:	4602      	mov	r2, r0
 8027164:	460b      	mov	r3, r1
 8027166:	4610      	mov	r0, r2
 8027168:	4619      	mov	r1, r3
 802716a:	f7e9 f817 	bl	801019c <__aeabi_dsub>
 802716e:	4602      	mov	r2, r0
 8027170:	460b      	mov	r3, r1
 8027172:	e7ac      	b.n	80270ce <__ieee754_pow+0xfe>
 8027174:	f1bb 0f01 	cmp.w	fp, #1
 8027178:	d18a      	bne.n	8027090 <__ieee754_pow+0xc0>
 802717a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802717e:	4619      	mov	r1, r3
 8027180:	e786      	b.n	8027090 <__ieee754_pow+0xc0>
 8027182:	0fed      	lsrs	r5, r5, #31
 8027184:	1e6b      	subs	r3, r5, #1
 8027186:	930d      	str	r3, [sp, #52]	; 0x34
 8027188:	ea5b 0303 	orrs.w	r3, fp, r3
 802718c:	d102      	bne.n	8027194 <__ieee754_pow+0x1c4>
 802718e:	4632      	mov	r2, r6
 8027190:	463b      	mov	r3, r7
 8027192:	e7e8      	b.n	8027166 <__ieee754_pow+0x196>
 8027194:	4b16      	ldr	r3, [pc, #88]	; (80271f0 <__ieee754_pow+0x220>)
 8027196:	4598      	cmp	r8, r3
 8027198:	f340 80fe 	ble.w	8027398 <__ieee754_pow+0x3c8>
 802719c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80271a0:	4598      	cmp	r8, r3
 80271a2:	dd0a      	ble.n	80271ba <__ieee754_pow+0x1ea>
 80271a4:	4b0f      	ldr	r3, [pc, #60]	; (80271e4 <__ieee754_pow+0x214>)
 80271a6:	429c      	cmp	r4, r3
 80271a8:	dc0d      	bgt.n	80271c6 <__ieee754_pow+0x1f6>
 80271aa:	f1b9 0f00 	cmp.w	r9, #0
 80271ae:	f6bf af6d 	bge.w	802708c <__ieee754_pow+0xbc>
 80271b2:	a307      	add	r3, pc, #28	; (adr r3, 80271d0 <__ieee754_pow+0x200>)
 80271b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271b8:	e79f      	b.n	80270fa <__ieee754_pow+0x12a>
 80271ba:	4b0e      	ldr	r3, [pc, #56]	; (80271f4 <__ieee754_pow+0x224>)
 80271bc:	429c      	cmp	r4, r3
 80271be:	ddf4      	ble.n	80271aa <__ieee754_pow+0x1da>
 80271c0:	4b09      	ldr	r3, [pc, #36]	; (80271e8 <__ieee754_pow+0x218>)
 80271c2:	429c      	cmp	r4, r3
 80271c4:	dd18      	ble.n	80271f8 <__ieee754_pow+0x228>
 80271c6:	f1b9 0f00 	cmp.w	r9, #0
 80271ca:	dcf2      	bgt.n	80271b2 <__ieee754_pow+0x1e2>
 80271cc:	e75e      	b.n	802708c <__ieee754_pow+0xbc>
 80271ce:	bf00      	nop
 80271d0:	8800759c 	.word	0x8800759c
 80271d4:	7e37e43c 	.word	0x7e37e43c
 80271d8:	7ff00000 	.word	0x7ff00000
 80271dc:	0802958d 	.word	0x0802958d
 80271e0:	433fffff 	.word	0x433fffff
 80271e4:	3fefffff 	.word	0x3fefffff
 80271e8:	3ff00000 	.word	0x3ff00000
 80271ec:	3fe00000 	.word	0x3fe00000
 80271f0:	41e00000 	.word	0x41e00000
 80271f4:	3feffffe 	.word	0x3feffffe
 80271f8:	2200      	movs	r2, #0
 80271fa:	4b63      	ldr	r3, [pc, #396]	; (8027388 <__ieee754_pow+0x3b8>)
 80271fc:	f7e8 ffce 	bl	801019c <__aeabi_dsub>
 8027200:	a355      	add	r3, pc, #340	; (adr r3, 8027358 <__ieee754_pow+0x388>)
 8027202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027206:	4604      	mov	r4, r0
 8027208:	460d      	mov	r5, r1
 802720a:	f7e9 f97f 	bl	801050c <__aeabi_dmul>
 802720e:	a354      	add	r3, pc, #336	; (adr r3, 8027360 <__ieee754_pow+0x390>)
 8027210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027214:	4606      	mov	r6, r0
 8027216:	460f      	mov	r7, r1
 8027218:	4620      	mov	r0, r4
 802721a:	4629      	mov	r1, r5
 802721c:	f7e9 f976 	bl	801050c <__aeabi_dmul>
 8027220:	2200      	movs	r2, #0
 8027222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027226:	4b59      	ldr	r3, [pc, #356]	; (802738c <__ieee754_pow+0x3bc>)
 8027228:	4620      	mov	r0, r4
 802722a:	4629      	mov	r1, r5
 802722c:	f7e9 f96e 	bl	801050c <__aeabi_dmul>
 8027230:	4602      	mov	r2, r0
 8027232:	460b      	mov	r3, r1
 8027234:	a14c      	add	r1, pc, #304	; (adr r1, 8027368 <__ieee754_pow+0x398>)
 8027236:	e9d1 0100 	ldrd	r0, r1, [r1]
 802723a:	f7e8 ffaf 	bl	801019c <__aeabi_dsub>
 802723e:	4622      	mov	r2, r4
 8027240:	462b      	mov	r3, r5
 8027242:	f7e9 f963 	bl	801050c <__aeabi_dmul>
 8027246:	4602      	mov	r2, r0
 8027248:	460b      	mov	r3, r1
 802724a:	2000      	movs	r0, #0
 802724c:	4950      	ldr	r1, [pc, #320]	; (8027390 <__ieee754_pow+0x3c0>)
 802724e:	f7e8 ffa5 	bl	801019c <__aeabi_dsub>
 8027252:	4622      	mov	r2, r4
 8027254:	462b      	mov	r3, r5
 8027256:	4680      	mov	r8, r0
 8027258:	4689      	mov	r9, r1
 802725a:	4620      	mov	r0, r4
 802725c:	4629      	mov	r1, r5
 802725e:	f7e9 f955 	bl	801050c <__aeabi_dmul>
 8027262:	4602      	mov	r2, r0
 8027264:	460b      	mov	r3, r1
 8027266:	4640      	mov	r0, r8
 8027268:	4649      	mov	r1, r9
 802726a:	f7e9 f94f 	bl	801050c <__aeabi_dmul>
 802726e:	a340      	add	r3, pc, #256	; (adr r3, 8027370 <__ieee754_pow+0x3a0>)
 8027270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027274:	f7e9 f94a 	bl	801050c <__aeabi_dmul>
 8027278:	4602      	mov	r2, r0
 802727a:	460b      	mov	r3, r1
 802727c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027280:	f7e8 ff8c 	bl	801019c <__aeabi_dsub>
 8027284:	4602      	mov	r2, r0
 8027286:	460b      	mov	r3, r1
 8027288:	4604      	mov	r4, r0
 802728a:	460d      	mov	r5, r1
 802728c:	4630      	mov	r0, r6
 802728e:	4639      	mov	r1, r7
 8027290:	f7e8 ff86 	bl	80101a0 <__adddf3>
 8027294:	2000      	movs	r0, #0
 8027296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802729a:	4632      	mov	r2, r6
 802729c:	463b      	mov	r3, r7
 802729e:	f7e8 ff7d 	bl	801019c <__aeabi_dsub>
 80272a2:	4602      	mov	r2, r0
 80272a4:	460b      	mov	r3, r1
 80272a6:	4620      	mov	r0, r4
 80272a8:	4629      	mov	r1, r5
 80272aa:	f7e8 ff77 	bl	801019c <__aeabi_dsub>
 80272ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80272b0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80272b4:	4313      	orrs	r3, r2
 80272b6:	4606      	mov	r6, r0
 80272b8:	460f      	mov	r7, r1
 80272ba:	f040 81eb 	bne.w	8027694 <__ieee754_pow+0x6c4>
 80272be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8027378 <__ieee754_pow+0x3a8>
 80272c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80272c6:	2400      	movs	r4, #0
 80272c8:	4622      	mov	r2, r4
 80272ca:	462b      	mov	r3, r5
 80272cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80272d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80272d4:	f7e8 ff62 	bl	801019c <__aeabi_dsub>
 80272d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80272dc:	f7e9 f916 	bl	801050c <__aeabi_dmul>
 80272e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80272e4:	4680      	mov	r8, r0
 80272e6:	4689      	mov	r9, r1
 80272e8:	4630      	mov	r0, r6
 80272ea:	4639      	mov	r1, r7
 80272ec:	f7e9 f90e 	bl	801050c <__aeabi_dmul>
 80272f0:	4602      	mov	r2, r0
 80272f2:	460b      	mov	r3, r1
 80272f4:	4640      	mov	r0, r8
 80272f6:	4649      	mov	r1, r9
 80272f8:	f7e8 ff52 	bl	80101a0 <__adddf3>
 80272fc:	4622      	mov	r2, r4
 80272fe:	462b      	mov	r3, r5
 8027300:	4680      	mov	r8, r0
 8027302:	4689      	mov	r9, r1
 8027304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027308:	f7e9 f900 	bl	801050c <__aeabi_dmul>
 802730c:	460b      	mov	r3, r1
 802730e:	4604      	mov	r4, r0
 8027310:	460d      	mov	r5, r1
 8027312:	4602      	mov	r2, r0
 8027314:	4649      	mov	r1, r9
 8027316:	4640      	mov	r0, r8
 8027318:	e9cd 4500 	strd	r4, r5, [sp]
 802731c:	f7e8 ff40 	bl	80101a0 <__adddf3>
 8027320:	4b1c      	ldr	r3, [pc, #112]	; (8027394 <__ieee754_pow+0x3c4>)
 8027322:	4299      	cmp	r1, r3
 8027324:	4606      	mov	r6, r0
 8027326:	460f      	mov	r7, r1
 8027328:	468b      	mov	fp, r1
 802732a:	f340 82f7 	ble.w	802791c <__ieee754_pow+0x94c>
 802732e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8027332:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8027336:	4303      	orrs	r3, r0
 8027338:	f000 81ea 	beq.w	8027710 <__ieee754_pow+0x740>
 802733c:	a310      	add	r3, pc, #64	; (adr r3, 8027380 <__ieee754_pow+0x3b0>)
 802733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027346:	f7e9 f8e1 	bl	801050c <__aeabi_dmul>
 802734a:	a30d      	add	r3, pc, #52	; (adr r3, 8027380 <__ieee754_pow+0x3b0>)
 802734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027350:	e6d5      	b.n	80270fe <__ieee754_pow+0x12e>
 8027352:	bf00      	nop
 8027354:	f3af 8000 	nop.w
 8027358:	60000000 	.word	0x60000000
 802735c:	3ff71547 	.word	0x3ff71547
 8027360:	f85ddf44 	.word	0xf85ddf44
 8027364:	3e54ae0b 	.word	0x3e54ae0b
 8027368:	55555555 	.word	0x55555555
 802736c:	3fd55555 	.word	0x3fd55555
 8027370:	652b82fe 	.word	0x652b82fe
 8027374:	3ff71547 	.word	0x3ff71547
 8027378:	00000000 	.word	0x00000000
 802737c:	bff00000 	.word	0xbff00000
 8027380:	8800759c 	.word	0x8800759c
 8027384:	7e37e43c 	.word	0x7e37e43c
 8027388:	3ff00000 	.word	0x3ff00000
 802738c:	3fd00000 	.word	0x3fd00000
 8027390:	3fe00000 	.word	0x3fe00000
 8027394:	408fffff 	.word	0x408fffff
 8027398:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 802739c:	f04f 0200 	mov.w	r2, #0
 80273a0:	da05      	bge.n	80273ae <__ieee754_pow+0x3de>
 80273a2:	4bd3      	ldr	r3, [pc, #844]	; (80276f0 <__ieee754_pow+0x720>)
 80273a4:	f7e9 f8b2 	bl	801050c <__aeabi_dmul>
 80273a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80273ac:	460c      	mov	r4, r1
 80273ae:	1523      	asrs	r3, r4, #20
 80273b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80273b4:	4413      	add	r3, r2
 80273b6:	9309      	str	r3, [sp, #36]	; 0x24
 80273b8:	4bce      	ldr	r3, [pc, #824]	; (80276f4 <__ieee754_pow+0x724>)
 80273ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80273be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80273c2:	429c      	cmp	r4, r3
 80273c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80273c8:	dd08      	ble.n	80273dc <__ieee754_pow+0x40c>
 80273ca:	4bcb      	ldr	r3, [pc, #812]	; (80276f8 <__ieee754_pow+0x728>)
 80273cc:	429c      	cmp	r4, r3
 80273ce:	f340 815e 	ble.w	802768e <__ieee754_pow+0x6be>
 80273d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80273d4:	3301      	adds	r3, #1
 80273d6:	9309      	str	r3, [sp, #36]	; 0x24
 80273d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80273dc:	f04f 0a00 	mov.w	sl, #0
 80273e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80273e4:	930c      	str	r3, [sp, #48]	; 0x30
 80273e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80273e8:	4bc4      	ldr	r3, [pc, #784]	; (80276fc <__ieee754_pow+0x72c>)
 80273ea:	4413      	add	r3, r2
 80273ec:	ed93 7b00 	vldr	d7, [r3]
 80273f0:	4629      	mov	r1, r5
 80273f2:	ec53 2b17 	vmov	r2, r3, d7
 80273f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80273fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80273fe:	f7e8 fecd 	bl	801019c <__aeabi_dsub>
 8027402:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8027406:	4606      	mov	r6, r0
 8027408:	460f      	mov	r7, r1
 802740a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802740e:	f7e8 fec7 	bl	80101a0 <__adddf3>
 8027412:	4602      	mov	r2, r0
 8027414:	460b      	mov	r3, r1
 8027416:	2000      	movs	r0, #0
 8027418:	49b9      	ldr	r1, [pc, #740]	; (8027700 <__ieee754_pow+0x730>)
 802741a:	f7e9 f9a1 	bl	8010760 <__aeabi_ddiv>
 802741e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8027422:	4602      	mov	r2, r0
 8027424:	460b      	mov	r3, r1
 8027426:	4630      	mov	r0, r6
 8027428:	4639      	mov	r1, r7
 802742a:	f7e9 f86f 	bl	801050c <__aeabi_dmul>
 802742e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8027432:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8027436:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802743a:	2300      	movs	r3, #0
 802743c:	9302      	str	r3, [sp, #8]
 802743e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8027442:	106d      	asrs	r5, r5, #1
 8027444:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8027448:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 802744c:	2200      	movs	r2, #0
 802744e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8027452:	4640      	mov	r0, r8
 8027454:	4649      	mov	r1, r9
 8027456:	4614      	mov	r4, r2
 8027458:	461d      	mov	r5, r3
 802745a:	f7e9 f857 	bl	801050c <__aeabi_dmul>
 802745e:	4602      	mov	r2, r0
 8027460:	460b      	mov	r3, r1
 8027462:	4630      	mov	r0, r6
 8027464:	4639      	mov	r1, r7
 8027466:	f7e8 fe99 	bl	801019c <__aeabi_dsub>
 802746a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802746e:	4606      	mov	r6, r0
 8027470:	460f      	mov	r7, r1
 8027472:	4620      	mov	r0, r4
 8027474:	4629      	mov	r1, r5
 8027476:	f7e8 fe91 	bl	801019c <__aeabi_dsub>
 802747a:	4602      	mov	r2, r0
 802747c:	460b      	mov	r3, r1
 802747e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8027482:	f7e8 fe8b 	bl	801019c <__aeabi_dsub>
 8027486:	4642      	mov	r2, r8
 8027488:	464b      	mov	r3, r9
 802748a:	f7e9 f83f 	bl	801050c <__aeabi_dmul>
 802748e:	4602      	mov	r2, r0
 8027490:	460b      	mov	r3, r1
 8027492:	4630      	mov	r0, r6
 8027494:	4639      	mov	r1, r7
 8027496:	f7e8 fe81 	bl	801019c <__aeabi_dsub>
 802749a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802749e:	f7e9 f835 	bl	801050c <__aeabi_dmul>
 80274a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80274a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80274aa:	4610      	mov	r0, r2
 80274ac:	4619      	mov	r1, r3
 80274ae:	f7e9 f82d 	bl	801050c <__aeabi_dmul>
 80274b2:	a37b      	add	r3, pc, #492	; (adr r3, 80276a0 <__ieee754_pow+0x6d0>)
 80274b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274b8:	4604      	mov	r4, r0
 80274ba:	460d      	mov	r5, r1
 80274bc:	f7e9 f826 	bl	801050c <__aeabi_dmul>
 80274c0:	a379      	add	r3, pc, #484	; (adr r3, 80276a8 <__ieee754_pow+0x6d8>)
 80274c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274c6:	f7e8 fe6b 	bl	80101a0 <__adddf3>
 80274ca:	4622      	mov	r2, r4
 80274cc:	462b      	mov	r3, r5
 80274ce:	f7e9 f81d 	bl	801050c <__aeabi_dmul>
 80274d2:	a377      	add	r3, pc, #476	; (adr r3, 80276b0 <__ieee754_pow+0x6e0>)
 80274d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274d8:	f7e8 fe62 	bl	80101a0 <__adddf3>
 80274dc:	4622      	mov	r2, r4
 80274de:	462b      	mov	r3, r5
 80274e0:	f7e9 f814 	bl	801050c <__aeabi_dmul>
 80274e4:	a374      	add	r3, pc, #464	; (adr r3, 80276b8 <__ieee754_pow+0x6e8>)
 80274e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274ea:	f7e8 fe59 	bl	80101a0 <__adddf3>
 80274ee:	4622      	mov	r2, r4
 80274f0:	462b      	mov	r3, r5
 80274f2:	f7e9 f80b 	bl	801050c <__aeabi_dmul>
 80274f6:	a372      	add	r3, pc, #456	; (adr r3, 80276c0 <__ieee754_pow+0x6f0>)
 80274f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274fc:	f7e8 fe50 	bl	80101a0 <__adddf3>
 8027500:	4622      	mov	r2, r4
 8027502:	462b      	mov	r3, r5
 8027504:	f7e9 f802 	bl	801050c <__aeabi_dmul>
 8027508:	a36f      	add	r3, pc, #444	; (adr r3, 80276c8 <__ieee754_pow+0x6f8>)
 802750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802750e:	f7e8 fe47 	bl	80101a0 <__adddf3>
 8027512:	4622      	mov	r2, r4
 8027514:	4606      	mov	r6, r0
 8027516:	460f      	mov	r7, r1
 8027518:	462b      	mov	r3, r5
 802751a:	4620      	mov	r0, r4
 802751c:	4629      	mov	r1, r5
 802751e:	f7e8 fff5 	bl	801050c <__aeabi_dmul>
 8027522:	4602      	mov	r2, r0
 8027524:	460b      	mov	r3, r1
 8027526:	4630      	mov	r0, r6
 8027528:	4639      	mov	r1, r7
 802752a:	f7e8 ffef 	bl	801050c <__aeabi_dmul>
 802752e:	4642      	mov	r2, r8
 8027530:	4604      	mov	r4, r0
 8027532:	460d      	mov	r5, r1
 8027534:	464b      	mov	r3, r9
 8027536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802753a:	f7e8 fe31 	bl	80101a0 <__adddf3>
 802753e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8027542:	f7e8 ffe3 	bl	801050c <__aeabi_dmul>
 8027546:	4622      	mov	r2, r4
 8027548:	462b      	mov	r3, r5
 802754a:	f7e8 fe29 	bl	80101a0 <__adddf3>
 802754e:	4642      	mov	r2, r8
 8027550:	4606      	mov	r6, r0
 8027552:	460f      	mov	r7, r1
 8027554:	464b      	mov	r3, r9
 8027556:	4640      	mov	r0, r8
 8027558:	4649      	mov	r1, r9
 802755a:	f7e8 ffd7 	bl	801050c <__aeabi_dmul>
 802755e:	2200      	movs	r2, #0
 8027560:	4b68      	ldr	r3, [pc, #416]	; (8027704 <__ieee754_pow+0x734>)
 8027562:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8027566:	f7e8 fe1b 	bl	80101a0 <__adddf3>
 802756a:	4632      	mov	r2, r6
 802756c:	463b      	mov	r3, r7
 802756e:	f7e8 fe17 	bl	80101a0 <__adddf3>
 8027572:	9802      	ldr	r0, [sp, #8]
 8027574:	460d      	mov	r5, r1
 8027576:	4604      	mov	r4, r0
 8027578:	4602      	mov	r2, r0
 802757a:	460b      	mov	r3, r1
 802757c:	4640      	mov	r0, r8
 802757e:	4649      	mov	r1, r9
 8027580:	f7e8 ffc4 	bl	801050c <__aeabi_dmul>
 8027584:	2200      	movs	r2, #0
 8027586:	4680      	mov	r8, r0
 8027588:	4689      	mov	r9, r1
 802758a:	4b5e      	ldr	r3, [pc, #376]	; (8027704 <__ieee754_pow+0x734>)
 802758c:	4620      	mov	r0, r4
 802758e:	4629      	mov	r1, r5
 8027590:	f7e8 fe04 	bl	801019c <__aeabi_dsub>
 8027594:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8027598:	f7e8 fe00 	bl	801019c <__aeabi_dsub>
 802759c:	4602      	mov	r2, r0
 802759e:	460b      	mov	r3, r1
 80275a0:	4630      	mov	r0, r6
 80275a2:	4639      	mov	r1, r7
 80275a4:	f7e8 fdfa 	bl	801019c <__aeabi_dsub>
 80275a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80275ac:	f7e8 ffae 	bl	801050c <__aeabi_dmul>
 80275b0:	4622      	mov	r2, r4
 80275b2:	4606      	mov	r6, r0
 80275b4:	460f      	mov	r7, r1
 80275b6:	462b      	mov	r3, r5
 80275b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80275bc:	f7e8 ffa6 	bl	801050c <__aeabi_dmul>
 80275c0:	4602      	mov	r2, r0
 80275c2:	460b      	mov	r3, r1
 80275c4:	4630      	mov	r0, r6
 80275c6:	4639      	mov	r1, r7
 80275c8:	f7e8 fdea 	bl	80101a0 <__adddf3>
 80275cc:	4606      	mov	r6, r0
 80275ce:	460f      	mov	r7, r1
 80275d0:	4602      	mov	r2, r0
 80275d2:	460b      	mov	r3, r1
 80275d4:	4640      	mov	r0, r8
 80275d6:	4649      	mov	r1, r9
 80275d8:	f7e8 fde2 	bl	80101a0 <__adddf3>
 80275dc:	9802      	ldr	r0, [sp, #8]
 80275de:	a33c      	add	r3, pc, #240	; (adr r3, 80276d0 <__ieee754_pow+0x700>)
 80275e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275e4:	4604      	mov	r4, r0
 80275e6:	460d      	mov	r5, r1
 80275e8:	f7e8 ff90 	bl	801050c <__aeabi_dmul>
 80275ec:	4642      	mov	r2, r8
 80275ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80275f2:	464b      	mov	r3, r9
 80275f4:	4620      	mov	r0, r4
 80275f6:	4629      	mov	r1, r5
 80275f8:	f7e8 fdd0 	bl	801019c <__aeabi_dsub>
 80275fc:	4602      	mov	r2, r0
 80275fe:	460b      	mov	r3, r1
 8027600:	4630      	mov	r0, r6
 8027602:	4639      	mov	r1, r7
 8027604:	f7e8 fdca 	bl	801019c <__aeabi_dsub>
 8027608:	a333      	add	r3, pc, #204	; (adr r3, 80276d8 <__ieee754_pow+0x708>)
 802760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802760e:	f7e8 ff7d 	bl	801050c <__aeabi_dmul>
 8027612:	a333      	add	r3, pc, #204	; (adr r3, 80276e0 <__ieee754_pow+0x710>)
 8027614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027618:	4606      	mov	r6, r0
 802761a:	460f      	mov	r7, r1
 802761c:	4620      	mov	r0, r4
 802761e:	4629      	mov	r1, r5
 8027620:	f7e8 ff74 	bl	801050c <__aeabi_dmul>
 8027624:	4602      	mov	r2, r0
 8027626:	460b      	mov	r3, r1
 8027628:	4630      	mov	r0, r6
 802762a:	4639      	mov	r1, r7
 802762c:	f7e8 fdb8 	bl	80101a0 <__adddf3>
 8027630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027632:	4b35      	ldr	r3, [pc, #212]	; (8027708 <__ieee754_pow+0x738>)
 8027634:	4413      	add	r3, r2
 8027636:	e9d3 2300 	ldrd	r2, r3, [r3]
 802763a:	f7e8 fdb1 	bl	80101a0 <__adddf3>
 802763e:	4604      	mov	r4, r0
 8027640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027642:	460d      	mov	r5, r1
 8027644:	f7e8 fef8 	bl	8010438 <__aeabi_i2d>
 8027648:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802764a:	4b30      	ldr	r3, [pc, #192]	; (802770c <__ieee754_pow+0x73c>)
 802764c:	4413      	add	r3, r2
 802764e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8027652:	4606      	mov	r6, r0
 8027654:	460f      	mov	r7, r1
 8027656:	4622      	mov	r2, r4
 8027658:	462b      	mov	r3, r5
 802765a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802765e:	f7e8 fd9f 	bl	80101a0 <__adddf3>
 8027662:	4642      	mov	r2, r8
 8027664:	464b      	mov	r3, r9
 8027666:	f7e8 fd9b 	bl	80101a0 <__adddf3>
 802766a:	4632      	mov	r2, r6
 802766c:	463b      	mov	r3, r7
 802766e:	f7e8 fd97 	bl	80101a0 <__adddf3>
 8027672:	9802      	ldr	r0, [sp, #8]
 8027674:	4632      	mov	r2, r6
 8027676:	463b      	mov	r3, r7
 8027678:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802767c:	f7e8 fd8e 	bl	801019c <__aeabi_dsub>
 8027680:	4642      	mov	r2, r8
 8027682:	464b      	mov	r3, r9
 8027684:	f7e8 fd8a 	bl	801019c <__aeabi_dsub>
 8027688:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802768c:	e607      	b.n	802729e <__ieee754_pow+0x2ce>
 802768e:	f04f 0a01 	mov.w	sl, #1
 8027692:	e6a5      	b.n	80273e0 <__ieee754_pow+0x410>
 8027694:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80276e8 <__ieee754_pow+0x718>
 8027698:	e613      	b.n	80272c2 <__ieee754_pow+0x2f2>
 802769a:	bf00      	nop
 802769c:	f3af 8000 	nop.w
 80276a0:	4a454eef 	.word	0x4a454eef
 80276a4:	3fca7e28 	.word	0x3fca7e28
 80276a8:	93c9db65 	.word	0x93c9db65
 80276ac:	3fcd864a 	.word	0x3fcd864a
 80276b0:	a91d4101 	.word	0xa91d4101
 80276b4:	3fd17460 	.word	0x3fd17460
 80276b8:	518f264d 	.word	0x518f264d
 80276bc:	3fd55555 	.word	0x3fd55555
 80276c0:	db6fabff 	.word	0xdb6fabff
 80276c4:	3fdb6db6 	.word	0x3fdb6db6
 80276c8:	33333303 	.word	0x33333303
 80276cc:	3fe33333 	.word	0x3fe33333
 80276d0:	e0000000 	.word	0xe0000000
 80276d4:	3feec709 	.word	0x3feec709
 80276d8:	dc3a03fd 	.word	0xdc3a03fd
 80276dc:	3feec709 	.word	0x3feec709
 80276e0:	145b01f5 	.word	0x145b01f5
 80276e4:	be3e2fe0 	.word	0xbe3e2fe0
 80276e8:	00000000 	.word	0x00000000
 80276ec:	3ff00000 	.word	0x3ff00000
 80276f0:	43400000 	.word	0x43400000
 80276f4:	0003988e 	.word	0x0003988e
 80276f8:	000bb679 	.word	0x000bb679
 80276fc:	08029590 	.word	0x08029590
 8027700:	3ff00000 	.word	0x3ff00000
 8027704:	40080000 	.word	0x40080000
 8027708:	080295b0 	.word	0x080295b0
 802770c:	080295a0 	.word	0x080295a0
 8027710:	a3b4      	add	r3, pc, #720	; (adr r3, 80279e4 <__ieee754_pow+0xa14>)
 8027712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027716:	4640      	mov	r0, r8
 8027718:	4649      	mov	r1, r9
 802771a:	f7e8 fd41 	bl	80101a0 <__adddf3>
 802771e:	4622      	mov	r2, r4
 8027720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8027724:	462b      	mov	r3, r5
 8027726:	4630      	mov	r0, r6
 8027728:	4639      	mov	r1, r7
 802772a:	f7e8 fd37 	bl	801019c <__aeabi_dsub>
 802772e:	4602      	mov	r2, r0
 8027730:	460b      	mov	r3, r1
 8027732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027736:	f7e9 f979 	bl	8010a2c <__aeabi_dcmpgt>
 802773a:	2800      	cmp	r0, #0
 802773c:	f47f adfe 	bne.w	802733c <__ieee754_pow+0x36c>
 8027740:	4aa3      	ldr	r2, [pc, #652]	; (80279d0 <__ieee754_pow+0xa00>)
 8027742:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8027746:	4293      	cmp	r3, r2
 8027748:	f340 810a 	ble.w	8027960 <__ieee754_pow+0x990>
 802774c:	151b      	asrs	r3, r3, #20
 802774e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8027752:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8027756:	fa4a f303 	asr.w	r3, sl, r3
 802775a:	445b      	add	r3, fp
 802775c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8027760:	4e9c      	ldr	r6, [pc, #624]	; (80279d4 <__ieee754_pow+0xa04>)
 8027762:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8027766:	4116      	asrs	r6, r2
 8027768:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 802776c:	2000      	movs	r0, #0
 802776e:	ea23 0106 	bic.w	r1, r3, r6
 8027772:	f1c2 0214 	rsb	r2, r2, #20
 8027776:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802777a:	fa4a fa02 	asr.w	sl, sl, r2
 802777e:	f1bb 0f00 	cmp.w	fp, #0
 8027782:	4602      	mov	r2, r0
 8027784:	460b      	mov	r3, r1
 8027786:	4620      	mov	r0, r4
 8027788:	4629      	mov	r1, r5
 802778a:	bfb8      	it	lt
 802778c:	f1ca 0a00 	rsblt	sl, sl, #0
 8027790:	f7e8 fd04 	bl	801019c <__aeabi_dsub>
 8027794:	e9cd 0100 	strd	r0, r1, [sp]
 8027798:	4642      	mov	r2, r8
 802779a:	464b      	mov	r3, r9
 802779c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80277a0:	f7e8 fcfe 	bl	80101a0 <__adddf3>
 80277a4:	2000      	movs	r0, #0
 80277a6:	a378      	add	r3, pc, #480	; (adr r3, 8027988 <__ieee754_pow+0x9b8>)
 80277a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80277ac:	4604      	mov	r4, r0
 80277ae:	460d      	mov	r5, r1
 80277b0:	f7e8 feac 	bl	801050c <__aeabi_dmul>
 80277b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80277b8:	4606      	mov	r6, r0
 80277ba:	460f      	mov	r7, r1
 80277bc:	4620      	mov	r0, r4
 80277be:	4629      	mov	r1, r5
 80277c0:	f7e8 fcec 	bl	801019c <__aeabi_dsub>
 80277c4:	4602      	mov	r2, r0
 80277c6:	460b      	mov	r3, r1
 80277c8:	4640      	mov	r0, r8
 80277ca:	4649      	mov	r1, r9
 80277cc:	f7e8 fce6 	bl	801019c <__aeabi_dsub>
 80277d0:	a36f      	add	r3, pc, #444	; (adr r3, 8027990 <__ieee754_pow+0x9c0>)
 80277d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80277d6:	f7e8 fe99 	bl	801050c <__aeabi_dmul>
 80277da:	a36f      	add	r3, pc, #444	; (adr r3, 8027998 <__ieee754_pow+0x9c8>)
 80277dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80277e0:	4680      	mov	r8, r0
 80277e2:	4689      	mov	r9, r1
 80277e4:	4620      	mov	r0, r4
 80277e6:	4629      	mov	r1, r5
 80277e8:	f7e8 fe90 	bl	801050c <__aeabi_dmul>
 80277ec:	4602      	mov	r2, r0
 80277ee:	460b      	mov	r3, r1
 80277f0:	4640      	mov	r0, r8
 80277f2:	4649      	mov	r1, r9
 80277f4:	f7e8 fcd4 	bl	80101a0 <__adddf3>
 80277f8:	4604      	mov	r4, r0
 80277fa:	460d      	mov	r5, r1
 80277fc:	4602      	mov	r2, r0
 80277fe:	460b      	mov	r3, r1
 8027800:	4630      	mov	r0, r6
 8027802:	4639      	mov	r1, r7
 8027804:	f7e8 fccc 	bl	80101a0 <__adddf3>
 8027808:	4632      	mov	r2, r6
 802780a:	463b      	mov	r3, r7
 802780c:	4680      	mov	r8, r0
 802780e:	4689      	mov	r9, r1
 8027810:	f7e8 fcc4 	bl	801019c <__aeabi_dsub>
 8027814:	4602      	mov	r2, r0
 8027816:	460b      	mov	r3, r1
 8027818:	4620      	mov	r0, r4
 802781a:	4629      	mov	r1, r5
 802781c:	f7e8 fcbe 	bl	801019c <__aeabi_dsub>
 8027820:	4642      	mov	r2, r8
 8027822:	4606      	mov	r6, r0
 8027824:	460f      	mov	r7, r1
 8027826:	464b      	mov	r3, r9
 8027828:	4640      	mov	r0, r8
 802782a:	4649      	mov	r1, r9
 802782c:	f7e8 fe6e 	bl	801050c <__aeabi_dmul>
 8027830:	a35b      	add	r3, pc, #364	; (adr r3, 80279a0 <__ieee754_pow+0x9d0>)
 8027832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027836:	4604      	mov	r4, r0
 8027838:	460d      	mov	r5, r1
 802783a:	f7e8 fe67 	bl	801050c <__aeabi_dmul>
 802783e:	a35a      	add	r3, pc, #360	; (adr r3, 80279a8 <__ieee754_pow+0x9d8>)
 8027840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027844:	f7e8 fcaa 	bl	801019c <__aeabi_dsub>
 8027848:	4622      	mov	r2, r4
 802784a:	462b      	mov	r3, r5
 802784c:	f7e8 fe5e 	bl	801050c <__aeabi_dmul>
 8027850:	a357      	add	r3, pc, #348	; (adr r3, 80279b0 <__ieee754_pow+0x9e0>)
 8027852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027856:	f7e8 fca3 	bl	80101a0 <__adddf3>
 802785a:	4622      	mov	r2, r4
 802785c:	462b      	mov	r3, r5
 802785e:	f7e8 fe55 	bl	801050c <__aeabi_dmul>
 8027862:	a355      	add	r3, pc, #340	; (adr r3, 80279b8 <__ieee754_pow+0x9e8>)
 8027864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027868:	f7e8 fc98 	bl	801019c <__aeabi_dsub>
 802786c:	4622      	mov	r2, r4
 802786e:	462b      	mov	r3, r5
 8027870:	f7e8 fe4c 	bl	801050c <__aeabi_dmul>
 8027874:	a352      	add	r3, pc, #328	; (adr r3, 80279c0 <__ieee754_pow+0x9f0>)
 8027876:	e9d3 2300 	ldrd	r2, r3, [r3]
 802787a:	f7e8 fc91 	bl	80101a0 <__adddf3>
 802787e:	4622      	mov	r2, r4
 8027880:	462b      	mov	r3, r5
 8027882:	f7e8 fe43 	bl	801050c <__aeabi_dmul>
 8027886:	4602      	mov	r2, r0
 8027888:	460b      	mov	r3, r1
 802788a:	4640      	mov	r0, r8
 802788c:	4649      	mov	r1, r9
 802788e:	f7e8 fc85 	bl	801019c <__aeabi_dsub>
 8027892:	4604      	mov	r4, r0
 8027894:	460d      	mov	r5, r1
 8027896:	4602      	mov	r2, r0
 8027898:	460b      	mov	r3, r1
 802789a:	4640      	mov	r0, r8
 802789c:	4649      	mov	r1, r9
 802789e:	f7e8 fe35 	bl	801050c <__aeabi_dmul>
 80278a2:	2200      	movs	r2, #0
 80278a4:	e9cd 0100 	strd	r0, r1, [sp]
 80278a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80278ac:	4620      	mov	r0, r4
 80278ae:	4629      	mov	r1, r5
 80278b0:	f7e8 fc74 	bl	801019c <__aeabi_dsub>
 80278b4:	4602      	mov	r2, r0
 80278b6:	460b      	mov	r3, r1
 80278b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80278bc:	f7e8 ff50 	bl	8010760 <__aeabi_ddiv>
 80278c0:	4632      	mov	r2, r6
 80278c2:	4604      	mov	r4, r0
 80278c4:	460d      	mov	r5, r1
 80278c6:	463b      	mov	r3, r7
 80278c8:	4640      	mov	r0, r8
 80278ca:	4649      	mov	r1, r9
 80278cc:	f7e8 fe1e 	bl	801050c <__aeabi_dmul>
 80278d0:	4632      	mov	r2, r6
 80278d2:	463b      	mov	r3, r7
 80278d4:	f7e8 fc64 	bl	80101a0 <__adddf3>
 80278d8:	4602      	mov	r2, r0
 80278da:	460b      	mov	r3, r1
 80278dc:	4620      	mov	r0, r4
 80278de:	4629      	mov	r1, r5
 80278e0:	f7e8 fc5c 	bl	801019c <__aeabi_dsub>
 80278e4:	4642      	mov	r2, r8
 80278e6:	464b      	mov	r3, r9
 80278e8:	f7e8 fc58 	bl	801019c <__aeabi_dsub>
 80278ec:	4602      	mov	r2, r0
 80278ee:	460b      	mov	r3, r1
 80278f0:	2000      	movs	r0, #0
 80278f2:	4939      	ldr	r1, [pc, #228]	; (80279d8 <__ieee754_pow+0xa08>)
 80278f4:	f7e8 fc52 	bl	801019c <__aeabi_dsub>
 80278f8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80278fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8027900:	4602      	mov	r2, r0
 8027902:	460b      	mov	r3, r1
 8027904:	da2f      	bge.n	8027966 <__ieee754_pow+0x996>
 8027906:	4650      	mov	r0, sl
 8027908:	ec43 2b10 	vmov	d0, r2, r3
 802790c:	f000 f9c0 	bl	8027c90 <scalbn>
 8027910:	ec51 0b10 	vmov	r0, r1, d0
 8027914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027918:	f7ff bbf1 	b.w	80270fe <__ieee754_pow+0x12e>
 802791c:	4b2f      	ldr	r3, [pc, #188]	; (80279dc <__ieee754_pow+0xa0c>)
 802791e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8027922:	429e      	cmp	r6, r3
 8027924:	f77f af0c 	ble.w	8027740 <__ieee754_pow+0x770>
 8027928:	4b2d      	ldr	r3, [pc, #180]	; (80279e0 <__ieee754_pow+0xa10>)
 802792a:	440b      	add	r3, r1
 802792c:	4303      	orrs	r3, r0
 802792e:	d00b      	beq.n	8027948 <__ieee754_pow+0x978>
 8027930:	a325      	add	r3, pc, #148	; (adr r3, 80279c8 <__ieee754_pow+0x9f8>)
 8027932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802793a:	f7e8 fde7 	bl	801050c <__aeabi_dmul>
 802793e:	a322      	add	r3, pc, #136	; (adr r3, 80279c8 <__ieee754_pow+0x9f8>)
 8027940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027944:	f7ff bbdb 	b.w	80270fe <__ieee754_pow+0x12e>
 8027948:	4622      	mov	r2, r4
 802794a:	462b      	mov	r3, r5
 802794c:	f7e8 fc26 	bl	801019c <__aeabi_dsub>
 8027950:	4642      	mov	r2, r8
 8027952:	464b      	mov	r3, r9
 8027954:	f7e9 f860 	bl	8010a18 <__aeabi_dcmpge>
 8027958:	2800      	cmp	r0, #0
 802795a:	f43f aef1 	beq.w	8027740 <__ieee754_pow+0x770>
 802795e:	e7e7      	b.n	8027930 <__ieee754_pow+0x960>
 8027960:	f04f 0a00 	mov.w	sl, #0
 8027964:	e718      	b.n	8027798 <__ieee754_pow+0x7c8>
 8027966:	4621      	mov	r1, r4
 8027968:	e7d4      	b.n	8027914 <__ieee754_pow+0x944>
 802796a:	2000      	movs	r0, #0
 802796c:	491a      	ldr	r1, [pc, #104]	; (80279d8 <__ieee754_pow+0xa08>)
 802796e:	f7ff bb8f 	b.w	8027090 <__ieee754_pow+0xc0>
 8027972:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027976:	f7ff bb8b 	b.w	8027090 <__ieee754_pow+0xc0>
 802797a:	4630      	mov	r0, r6
 802797c:	4639      	mov	r1, r7
 802797e:	f7ff bb87 	b.w	8027090 <__ieee754_pow+0xc0>
 8027982:	4693      	mov	fp, r2
 8027984:	f7ff bb98 	b.w	80270b8 <__ieee754_pow+0xe8>
 8027988:	00000000 	.word	0x00000000
 802798c:	3fe62e43 	.word	0x3fe62e43
 8027990:	fefa39ef 	.word	0xfefa39ef
 8027994:	3fe62e42 	.word	0x3fe62e42
 8027998:	0ca86c39 	.word	0x0ca86c39
 802799c:	be205c61 	.word	0xbe205c61
 80279a0:	72bea4d0 	.word	0x72bea4d0
 80279a4:	3e663769 	.word	0x3e663769
 80279a8:	c5d26bf1 	.word	0xc5d26bf1
 80279ac:	3ebbbd41 	.word	0x3ebbbd41
 80279b0:	af25de2c 	.word	0xaf25de2c
 80279b4:	3f11566a 	.word	0x3f11566a
 80279b8:	16bebd93 	.word	0x16bebd93
 80279bc:	3f66c16c 	.word	0x3f66c16c
 80279c0:	5555553e 	.word	0x5555553e
 80279c4:	3fc55555 	.word	0x3fc55555
 80279c8:	c2f8f359 	.word	0xc2f8f359
 80279cc:	01a56e1f 	.word	0x01a56e1f
 80279d0:	3fe00000 	.word	0x3fe00000
 80279d4:	000fffff 	.word	0x000fffff
 80279d8:	3ff00000 	.word	0x3ff00000
 80279dc:	4090cbff 	.word	0x4090cbff
 80279e0:	3f6f3400 	.word	0x3f6f3400
 80279e4:	652b82fe 	.word	0x652b82fe
 80279e8:	3c971547 	.word	0x3c971547

080279ec <__ieee754_sqrt>:
 80279ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80279f0:	4955      	ldr	r1, [pc, #340]	; (8027b48 <__ieee754_sqrt+0x15c>)
 80279f2:	ec55 4b10 	vmov	r4, r5, d0
 80279f6:	43a9      	bics	r1, r5
 80279f8:	462b      	mov	r3, r5
 80279fa:	462a      	mov	r2, r5
 80279fc:	d112      	bne.n	8027a24 <__ieee754_sqrt+0x38>
 80279fe:	ee10 2a10 	vmov	r2, s0
 8027a02:	ee10 0a10 	vmov	r0, s0
 8027a06:	4629      	mov	r1, r5
 8027a08:	f7e8 fd80 	bl	801050c <__aeabi_dmul>
 8027a0c:	4602      	mov	r2, r0
 8027a0e:	460b      	mov	r3, r1
 8027a10:	4620      	mov	r0, r4
 8027a12:	4629      	mov	r1, r5
 8027a14:	f7e8 fbc4 	bl	80101a0 <__adddf3>
 8027a18:	4604      	mov	r4, r0
 8027a1a:	460d      	mov	r5, r1
 8027a1c:	ec45 4b10 	vmov	d0, r4, r5
 8027a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027a24:	2d00      	cmp	r5, #0
 8027a26:	ee10 0a10 	vmov	r0, s0
 8027a2a:	4621      	mov	r1, r4
 8027a2c:	dc0f      	bgt.n	8027a4e <__ieee754_sqrt+0x62>
 8027a2e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8027a32:	4330      	orrs	r0, r6
 8027a34:	d0f2      	beq.n	8027a1c <__ieee754_sqrt+0x30>
 8027a36:	b155      	cbz	r5, 8027a4e <__ieee754_sqrt+0x62>
 8027a38:	ee10 2a10 	vmov	r2, s0
 8027a3c:	4620      	mov	r0, r4
 8027a3e:	4629      	mov	r1, r5
 8027a40:	f7e8 fbac 	bl	801019c <__aeabi_dsub>
 8027a44:	4602      	mov	r2, r0
 8027a46:	460b      	mov	r3, r1
 8027a48:	f7e8 fe8a 	bl	8010760 <__aeabi_ddiv>
 8027a4c:	e7e4      	b.n	8027a18 <__ieee754_sqrt+0x2c>
 8027a4e:	151b      	asrs	r3, r3, #20
 8027a50:	d073      	beq.n	8027b3a <__ieee754_sqrt+0x14e>
 8027a52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8027a56:	07dd      	lsls	r5, r3, #31
 8027a58:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8027a5c:	bf48      	it	mi
 8027a5e:	0fc8      	lsrmi	r0, r1, #31
 8027a60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8027a64:	bf44      	itt	mi
 8027a66:	0049      	lslmi	r1, r1, #1
 8027a68:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8027a6c:	2500      	movs	r5, #0
 8027a6e:	1058      	asrs	r0, r3, #1
 8027a70:	0fcb      	lsrs	r3, r1, #31
 8027a72:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8027a76:	0049      	lsls	r1, r1, #1
 8027a78:	2316      	movs	r3, #22
 8027a7a:	462c      	mov	r4, r5
 8027a7c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8027a80:	19a7      	adds	r7, r4, r6
 8027a82:	4297      	cmp	r7, r2
 8027a84:	bfde      	ittt	le
 8027a86:	19bc      	addle	r4, r7, r6
 8027a88:	1bd2      	suble	r2, r2, r7
 8027a8a:	19ad      	addle	r5, r5, r6
 8027a8c:	0fcf      	lsrs	r7, r1, #31
 8027a8e:	3b01      	subs	r3, #1
 8027a90:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8027a94:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8027a98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8027a9c:	d1f0      	bne.n	8027a80 <__ieee754_sqrt+0x94>
 8027a9e:	f04f 0c20 	mov.w	ip, #32
 8027aa2:	469e      	mov	lr, r3
 8027aa4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8027aa8:	42a2      	cmp	r2, r4
 8027aaa:	eb06 070e 	add.w	r7, r6, lr
 8027aae:	dc02      	bgt.n	8027ab6 <__ieee754_sqrt+0xca>
 8027ab0:	d112      	bne.n	8027ad8 <__ieee754_sqrt+0xec>
 8027ab2:	428f      	cmp	r7, r1
 8027ab4:	d810      	bhi.n	8027ad8 <__ieee754_sqrt+0xec>
 8027ab6:	2f00      	cmp	r7, #0
 8027ab8:	eb07 0e06 	add.w	lr, r7, r6
 8027abc:	da42      	bge.n	8027b44 <__ieee754_sqrt+0x158>
 8027abe:	f1be 0f00 	cmp.w	lr, #0
 8027ac2:	db3f      	blt.n	8027b44 <__ieee754_sqrt+0x158>
 8027ac4:	f104 0801 	add.w	r8, r4, #1
 8027ac8:	1b12      	subs	r2, r2, r4
 8027aca:	428f      	cmp	r7, r1
 8027acc:	bf88      	it	hi
 8027ace:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8027ad2:	1bc9      	subs	r1, r1, r7
 8027ad4:	4433      	add	r3, r6
 8027ad6:	4644      	mov	r4, r8
 8027ad8:	0052      	lsls	r2, r2, #1
 8027ada:	f1bc 0c01 	subs.w	ip, ip, #1
 8027ade:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8027ae2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8027ae6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8027aea:	d1dd      	bne.n	8027aa8 <__ieee754_sqrt+0xbc>
 8027aec:	430a      	orrs	r2, r1
 8027aee:	d006      	beq.n	8027afe <__ieee754_sqrt+0x112>
 8027af0:	1c5c      	adds	r4, r3, #1
 8027af2:	bf13      	iteet	ne
 8027af4:	3301      	addne	r3, #1
 8027af6:	3501      	addeq	r5, #1
 8027af8:	4663      	moveq	r3, ip
 8027afa:	f023 0301 	bicne.w	r3, r3, #1
 8027afe:	106a      	asrs	r2, r5, #1
 8027b00:	085b      	lsrs	r3, r3, #1
 8027b02:	07e9      	lsls	r1, r5, #31
 8027b04:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8027b08:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8027b0c:	bf48      	it	mi
 8027b0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8027b12:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8027b16:	461c      	mov	r4, r3
 8027b18:	e780      	b.n	8027a1c <__ieee754_sqrt+0x30>
 8027b1a:	0aca      	lsrs	r2, r1, #11
 8027b1c:	3815      	subs	r0, #21
 8027b1e:	0549      	lsls	r1, r1, #21
 8027b20:	2a00      	cmp	r2, #0
 8027b22:	d0fa      	beq.n	8027b1a <__ieee754_sqrt+0x12e>
 8027b24:	02d6      	lsls	r6, r2, #11
 8027b26:	d50a      	bpl.n	8027b3e <__ieee754_sqrt+0x152>
 8027b28:	f1c3 0420 	rsb	r4, r3, #32
 8027b2c:	fa21 f404 	lsr.w	r4, r1, r4
 8027b30:	1e5d      	subs	r5, r3, #1
 8027b32:	4099      	lsls	r1, r3
 8027b34:	4322      	orrs	r2, r4
 8027b36:	1b43      	subs	r3, r0, r5
 8027b38:	e78b      	b.n	8027a52 <__ieee754_sqrt+0x66>
 8027b3a:	4618      	mov	r0, r3
 8027b3c:	e7f0      	b.n	8027b20 <__ieee754_sqrt+0x134>
 8027b3e:	0052      	lsls	r2, r2, #1
 8027b40:	3301      	adds	r3, #1
 8027b42:	e7ef      	b.n	8027b24 <__ieee754_sqrt+0x138>
 8027b44:	46a0      	mov	r8, r4
 8027b46:	e7bf      	b.n	8027ac8 <__ieee754_sqrt+0xdc>
 8027b48:	7ff00000 	.word	0x7ff00000

08027b4c <__ieee754_sqrtf>:
 8027b4c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8027b50:	4770      	bx	lr

08027b52 <fabs>:
 8027b52:	ec51 0b10 	vmov	r0, r1, d0
 8027b56:	ee10 2a10 	vmov	r2, s0
 8027b5a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8027b5e:	ec43 2b10 	vmov	d0, r2, r3
 8027b62:	4770      	bx	lr

08027b64 <finite>:
 8027b64:	ee10 3a90 	vmov	r3, s1
 8027b68:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8027b6c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8027b70:	0fc0      	lsrs	r0, r0, #31
 8027b72:	4770      	bx	lr

08027b74 <matherr>:
 8027b74:	2000      	movs	r0, #0
 8027b76:	4770      	bx	lr

08027b78 <nan>:
 8027b78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8027b80 <nan+0x8>
 8027b7c:	4770      	bx	lr
 8027b7e:	bf00      	nop
 8027b80:	00000000 	.word	0x00000000
 8027b84:	7ff80000 	.word	0x7ff80000

08027b88 <rint>:
 8027b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027b8a:	ec51 0b10 	vmov	r0, r1, d0
 8027b8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8027b92:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8027b96:	2e13      	cmp	r6, #19
 8027b98:	460b      	mov	r3, r1
 8027b9a:	ee10 4a10 	vmov	r4, s0
 8027b9e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8027ba2:	dc56      	bgt.n	8027c52 <rint+0xca>
 8027ba4:	2e00      	cmp	r6, #0
 8027ba6:	da2b      	bge.n	8027c00 <rint+0x78>
 8027ba8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8027bac:	4302      	orrs	r2, r0
 8027bae:	d023      	beq.n	8027bf8 <rint+0x70>
 8027bb0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8027bb4:	4302      	orrs	r2, r0
 8027bb6:	4254      	negs	r4, r2
 8027bb8:	4314      	orrs	r4, r2
 8027bba:	0c4b      	lsrs	r3, r1, #17
 8027bbc:	0b24      	lsrs	r4, r4, #12
 8027bbe:	045b      	lsls	r3, r3, #17
 8027bc0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8027bc4:	ea44 0103 	orr.w	r1, r4, r3
 8027bc8:	460b      	mov	r3, r1
 8027bca:	492f      	ldr	r1, [pc, #188]	; (8027c88 <rint+0x100>)
 8027bcc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8027bd0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8027bd4:	4602      	mov	r2, r0
 8027bd6:	4639      	mov	r1, r7
 8027bd8:	4630      	mov	r0, r6
 8027bda:	f7e8 fae1 	bl	80101a0 <__adddf3>
 8027bde:	e9cd 0100 	strd	r0, r1, [sp]
 8027be2:	463b      	mov	r3, r7
 8027be4:	4632      	mov	r2, r6
 8027be6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027bea:	f7e8 fad7 	bl	801019c <__aeabi_dsub>
 8027bee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8027bf2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8027bf6:	4639      	mov	r1, r7
 8027bf8:	ec41 0b10 	vmov	d0, r0, r1
 8027bfc:	b003      	add	sp, #12
 8027bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027c00:	4a22      	ldr	r2, [pc, #136]	; (8027c8c <rint+0x104>)
 8027c02:	4132      	asrs	r2, r6
 8027c04:	ea01 0702 	and.w	r7, r1, r2
 8027c08:	4307      	orrs	r7, r0
 8027c0a:	d0f5      	beq.n	8027bf8 <rint+0x70>
 8027c0c:	0852      	lsrs	r2, r2, #1
 8027c0e:	4011      	ands	r1, r2
 8027c10:	430c      	orrs	r4, r1
 8027c12:	d00b      	beq.n	8027c2c <rint+0xa4>
 8027c14:	ea23 0202 	bic.w	r2, r3, r2
 8027c18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8027c1c:	2e13      	cmp	r6, #19
 8027c1e:	fa43 f306 	asr.w	r3, r3, r6
 8027c22:	bf0c      	ite	eq
 8027c24:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8027c28:	2400      	movne	r4, #0
 8027c2a:	4313      	orrs	r3, r2
 8027c2c:	4916      	ldr	r1, [pc, #88]	; (8027c88 <rint+0x100>)
 8027c2e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8027c32:	4622      	mov	r2, r4
 8027c34:	e9d5 4500 	ldrd	r4, r5, [r5]
 8027c38:	4620      	mov	r0, r4
 8027c3a:	4629      	mov	r1, r5
 8027c3c:	f7e8 fab0 	bl	80101a0 <__adddf3>
 8027c40:	e9cd 0100 	strd	r0, r1, [sp]
 8027c44:	4622      	mov	r2, r4
 8027c46:	462b      	mov	r3, r5
 8027c48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027c4c:	f7e8 faa6 	bl	801019c <__aeabi_dsub>
 8027c50:	e7d2      	b.n	8027bf8 <rint+0x70>
 8027c52:	2e33      	cmp	r6, #51	; 0x33
 8027c54:	dd07      	ble.n	8027c66 <rint+0xde>
 8027c56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8027c5a:	d1cd      	bne.n	8027bf8 <rint+0x70>
 8027c5c:	ee10 2a10 	vmov	r2, s0
 8027c60:	f7e8 fa9e 	bl	80101a0 <__adddf3>
 8027c64:	e7c8      	b.n	8027bf8 <rint+0x70>
 8027c66:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8027c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8027c6e:	40f2      	lsrs	r2, r6
 8027c70:	4210      	tst	r0, r2
 8027c72:	d0c1      	beq.n	8027bf8 <rint+0x70>
 8027c74:	0852      	lsrs	r2, r2, #1
 8027c76:	4210      	tst	r0, r2
 8027c78:	bf1f      	itttt	ne
 8027c7a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8027c7e:	ea20 0202 	bicne.w	r2, r0, r2
 8027c82:	4134      	asrne	r4, r6
 8027c84:	4314      	orrne	r4, r2
 8027c86:	e7d1      	b.n	8027c2c <rint+0xa4>
 8027c88:	080295c0 	.word	0x080295c0
 8027c8c:	000fffff 	.word	0x000fffff

08027c90 <scalbn>:
 8027c90:	b570      	push	{r4, r5, r6, lr}
 8027c92:	ec55 4b10 	vmov	r4, r5, d0
 8027c96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8027c9a:	4606      	mov	r6, r0
 8027c9c:	462b      	mov	r3, r5
 8027c9e:	b9aa      	cbnz	r2, 8027ccc <scalbn+0x3c>
 8027ca0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8027ca4:	4323      	orrs	r3, r4
 8027ca6:	d03b      	beq.n	8027d20 <scalbn+0x90>
 8027ca8:	4b31      	ldr	r3, [pc, #196]	; (8027d70 <scalbn+0xe0>)
 8027caa:	4629      	mov	r1, r5
 8027cac:	2200      	movs	r2, #0
 8027cae:	ee10 0a10 	vmov	r0, s0
 8027cb2:	f7e8 fc2b 	bl	801050c <__aeabi_dmul>
 8027cb6:	4b2f      	ldr	r3, [pc, #188]	; (8027d74 <scalbn+0xe4>)
 8027cb8:	429e      	cmp	r6, r3
 8027cba:	4604      	mov	r4, r0
 8027cbc:	460d      	mov	r5, r1
 8027cbe:	da12      	bge.n	8027ce6 <scalbn+0x56>
 8027cc0:	a327      	add	r3, pc, #156	; (adr r3, 8027d60 <scalbn+0xd0>)
 8027cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027cc6:	f7e8 fc21 	bl	801050c <__aeabi_dmul>
 8027cca:	e009      	b.n	8027ce0 <scalbn+0x50>
 8027ccc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8027cd0:	428a      	cmp	r2, r1
 8027cd2:	d10c      	bne.n	8027cee <scalbn+0x5e>
 8027cd4:	ee10 2a10 	vmov	r2, s0
 8027cd8:	4620      	mov	r0, r4
 8027cda:	4629      	mov	r1, r5
 8027cdc:	f7e8 fa60 	bl	80101a0 <__adddf3>
 8027ce0:	4604      	mov	r4, r0
 8027ce2:	460d      	mov	r5, r1
 8027ce4:	e01c      	b.n	8027d20 <scalbn+0x90>
 8027ce6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8027cea:	460b      	mov	r3, r1
 8027cec:	3a36      	subs	r2, #54	; 0x36
 8027cee:	4432      	add	r2, r6
 8027cf0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8027cf4:	428a      	cmp	r2, r1
 8027cf6:	dd0b      	ble.n	8027d10 <scalbn+0x80>
 8027cf8:	ec45 4b11 	vmov	d1, r4, r5
 8027cfc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8027d68 <scalbn+0xd8>
 8027d00:	f000 f83c 	bl	8027d7c <copysign>
 8027d04:	a318      	add	r3, pc, #96	; (adr r3, 8027d68 <scalbn+0xd8>)
 8027d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d0a:	ec51 0b10 	vmov	r0, r1, d0
 8027d0e:	e7da      	b.n	8027cc6 <scalbn+0x36>
 8027d10:	2a00      	cmp	r2, #0
 8027d12:	dd08      	ble.n	8027d26 <scalbn+0x96>
 8027d14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8027d18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8027d1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8027d20:	ec45 4b10 	vmov	d0, r4, r5
 8027d24:	bd70      	pop	{r4, r5, r6, pc}
 8027d26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8027d2a:	da0d      	bge.n	8027d48 <scalbn+0xb8>
 8027d2c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8027d30:	429e      	cmp	r6, r3
 8027d32:	ec45 4b11 	vmov	d1, r4, r5
 8027d36:	dce1      	bgt.n	8027cfc <scalbn+0x6c>
 8027d38:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8027d60 <scalbn+0xd0>
 8027d3c:	f000 f81e 	bl	8027d7c <copysign>
 8027d40:	a307      	add	r3, pc, #28	; (adr r3, 8027d60 <scalbn+0xd0>)
 8027d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d46:	e7e0      	b.n	8027d0a <scalbn+0x7a>
 8027d48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8027d4c:	3236      	adds	r2, #54	; 0x36
 8027d4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8027d52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8027d56:	4620      	mov	r0, r4
 8027d58:	4629      	mov	r1, r5
 8027d5a:	2200      	movs	r2, #0
 8027d5c:	4b06      	ldr	r3, [pc, #24]	; (8027d78 <scalbn+0xe8>)
 8027d5e:	e7b2      	b.n	8027cc6 <scalbn+0x36>
 8027d60:	c2f8f359 	.word	0xc2f8f359
 8027d64:	01a56e1f 	.word	0x01a56e1f
 8027d68:	8800759c 	.word	0x8800759c
 8027d6c:	7e37e43c 	.word	0x7e37e43c
 8027d70:	43500000 	.word	0x43500000
 8027d74:	ffff3cb0 	.word	0xffff3cb0
 8027d78:	3c900000 	.word	0x3c900000

08027d7c <copysign>:
 8027d7c:	ec51 0b10 	vmov	r0, r1, d0
 8027d80:	ee11 0a90 	vmov	r0, s3
 8027d84:	ee10 2a10 	vmov	r2, s0
 8027d88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8027d8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8027d90:	ea41 0300 	orr.w	r3, r1, r0
 8027d94:	ec43 2b10 	vmov	d0, r2, r3
 8027d98:	4770      	bx	lr
	...

08027d9c <_init>:
 8027d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d9e:	bf00      	nop
 8027da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027da2:	bc08      	pop	{r3}
 8027da4:	469e      	mov	lr, r3
 8027da6:	4770      	bx	lr

08027da8 <_fini>:
 8027da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027daa:	bf00      	nop
 8027dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027dae:	bc08      	pop	{r3}
 8027db0:	469e      	mov	lr, r3
 8027db2:	4770      	bx	lr

Disassembly of section .RamFunc:

08027db4 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8027db4:	b480      	push	{r7}
 8027db6:	b089      	sub	sp, #36	; 0x24
 8027db8:	af00      	add	r7, sp, #0
 8027dba:	6078      	str	r0, [r7, #4]
 8027dbc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8027dbe:	2380      	movs	r3, #128	; 0x80
 8027dc0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8027dc2:	687b      	ldr	r3, [r7, #4]
 8027dc4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8027dc6:	683b      	ldr	r3, [r7, #0]
 8027dc8:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8027dca:	4b17      	ldr	r3, [pc, #92]	; (8027e28 <_etext+0x74>)
 8027dcc:	695b      	ldr	r3, [r3, #20]
 8027dce:	4a16      	ldr	r2, [pc, #88]	; (8027e28 <_etext+0x74>)
 8027dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8027dd4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8027dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8027dda:	60fb      	str	r3, [r7, #12]
  return(result);
 8027ddc:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8027dde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8027de0:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8027de2:	697b      	ldr	r3, [r7, #20]
 8027de4:	681a      	ldr	r2, [r3, #0]
 8027de6:	69bb      	ldr	r3, [r7, #24]
 8027de8:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8027dea:	69bb      	ldr	r3, [r7, #24]
 8027dec:	3304      	adds	r3, #4
 8027dee:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8027df0:	697b      	ldr	r3, [r7, #20]
 8027df2:	3304      	adds	r3, #4
 8027df4:	617b      	str	r3, [r7, #20]
    row_index--;
 8027df6:	7ffb      	ldrb	r3, [r7, #31]
 8027df8:	3b01      	subs	r3, #1
 8027dfa:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8027dfc:	7ffb      	ldrb	r3, [r7, #31]
 8027dfe:	2b00      	cmp	r3, #0
 8027e00:	d1ef      	bne.n	8027de2 <FLASH_Program_Fast+0x2e>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8027e02:	bf00      	nop
 8027e04:	4b08      	ldr	r3, [pc, #32]	; (8027e28 <_etext+0x74>)
 8027e06:	691b      	ldr	r3, [r3, #16]
 8027e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027e10:	d0f8      	beq.n	8027e04 <FLASH_Program_Fast+0x50>
 8027e12:	693b      	ldr	r3, [r7, #16]
 8027e14:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8027e16:	68bb      	ldr	r3, [r7, #8]
 8027e18:	f383 8810 	msr	PRIMASK, r3
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8027e1c:	bf00      	nop
 8027e1e:	3724      	adds	r7, #36	; 0x24
 8027e20:	46bd      	mov	sp, r7
 8027e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e26:	4770      	bx	lr
 8027e28:	58004000 	.word	0x58004000
