
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3e4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d30  0800f528  0800f528  0001f528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010258  08010258  00020258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010260  08010260  00020260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010264  08010264  00020264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d4  20000004  08010268  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000d8  0801033c  000300d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000174  080103d5  00030174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000580c  20000188  080103e6  00030188  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005994  080103e6  00035994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030185  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a96  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   000705df  00000000  00000000  000301b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000bccf  00000000  00000000  000a0794  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00024043  00000000  00000000  000ac463  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00003170  00000000  00000000  000d04a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00003450  00000000  00000000  000d3618  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00033e95  00000000  00000000  000d6a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0003e3ac  00000000  00000000  0010a8fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0011a1d4  00000000  00000000  00148ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      000000f0  00000000  00000000  00262e7d  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000089f4  00000000  00000000  00262f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000188 	.word	0x20000188
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f50c 	.word	0x0800f50c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000018c 	.word	0x2000018c
 800017c:	0800f50c 	.word	0x0800f50c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e0c:	b500      	push	{lr}
 8000e0e:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e10:	2300      	movs	r3, #0
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	9302      	str	r3, [sp, #8]
 8000e18:	9303      	str	r3, [sp, #12]
 8000e1a:	9304      	str	r3, [sp, #16]
 8000e1c:	9305      	str	r3, [sp, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e1e:	481b      	ldr	r0, [pc, #108]	; (8000e8c <MX_ADC1_Init+0x80>)
 8000e20:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <MX_ADC1_Init+0x84>)
 8000e22:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e24:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e28:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e2a:	2210      	movs	r2, #16
 8000e2c:	6082      	str	r2, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e30:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e32:	2204      	movs	r2, #4
 8000e34:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e36:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e3c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e42:	6242      	str	r2, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e48:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e4c:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e4e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e52:	f002 ff47 	bl	8003ce4 <HAL_ADC_Init>
 8000e56:	b990      	cbnz	r0, 8000e7e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_ADC1_Init+0x88>)
 8000e5a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000e60:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e62:	237f      	movs	r3, #127	; 0x7f
 8000e64:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e66:	2304      	movs	r3, #4
 8000e68:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6e:	4669      	mov	r1, sp
 8000e70:	4806      	ldr	r0, [pc, #24]	; (8000e8c <MX_ADC1_Init+0x80>)
 8000e72:	f003 f87f 	bl	8003f74 <HAL_ADC_ConfigChannel>
 8000e76:	b928      	cbnz	r0, 8000e84 <MX_ADC1_Init+0x78>
  {
    Error_Handler();
  }

}
 8000e78:	b007      	add	sp, #28
 8000e7a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e7e:	f002 f9e3 	bl	8003248 <Error_Handler>
 8000e82:	e7e9      	b.n	8000e58 <MX_ADC1_Init+0x4c>
    Error_Handler();
 8000e84:	f002 f9e0 	bl	8003248 <Error_Handler>
}
 8000e88:	e7f6      	b.n	8000e78 <MX_ADC1_Init+0x6c>
 8000e8a:	bf00      	nop
 8000e8c:	200049e4 	.word	0x200049e4
 8000e90:	50040000 	.word	0x50040000
 8000e94:	14f00020 	.word	0x14f00020

08000e98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e98:	b510      	push	{r4, lr}
 8000e9a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9303      	str	r3, [sp, #12]
 8000ea0:	9304      	str	r3, [sp, #16]
 8000ea2:	9305      	str	r3, [sp, #20]
 8000ea4:	9306      	str	r3, [sp, #24]
 8000ea6:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000ea8:	6802      	ldr	r2, [r0, #0]
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_ADC_MspInit+0x8c>)
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d001      	beq.n	8000eb4 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000eb0:	b008      	add	sp, #32
 8000eb2:	bd10      	pop	{r4, pc}
 8000eb4:	4604      	mov	r4, r0
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ec0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ec4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000ec8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000eca:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ecc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000edc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	a903      	add	r1, sp, #12
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f003 ffc4 	bl	8004e78 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <HAL_ADC_MspInit+0x90>)
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_ADC_MspInit+0x94>)
 8000ef4:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efa:	2300      	movs	r3, #0
 8000efc:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efe:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f04:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f06:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f08:	2220      	movs	r2, #32
 8000f0a:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f0c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f0e:	f003 fe25 	bl	8004b5c <HAL_DMA_Init>
 8000f12:	b918      	cbnz	r0, 8000f1c <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_ADC_MspInit+0x90>)
 8000f16:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000f18:	629c      	str	r4, [r3, #40]	; 0x28
}
 8000f1a:	e7c9      	b.n	8000eb0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000f1c:	f002 f994 	bl	8003248 <Error_Handler>
 8000f20:	e7f8      	b.n	8000f14 <HAL_ADC_MspInit+0x7c>
 8000f22:	bf00      	nop
 8000f24:	50040000 	.word	0x50040000
 8000f28:	20004a48 	.word	0x20004a48
 8000f2c:	40020008 	.word	0x40020008

08000f30 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8000f30:	b508      	push	{r3, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f36:	6893      	ldr	r3, [r2, #8]
 8000f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3c:	6093      	str	r3, [r2, #8]
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8000f3e:	f00c ff1b 	bl	800dd78 <UTIL_LPM_Init>
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
}
 8000f42:	bd08      	pop	{r3, pc}

08000f44 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000f44:	b510      	push	{r4, lr}
 8000f46:	b088      	sub	sp, #32
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000f48:	f00c f864 	bl	800d014 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f008 fc57 	bl	8009800 <osMutexNew>
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <appe_Tl_Init+0x64>)
 8000f54:	6018      	str	r0, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000f56:	2200      	movs	r2, #0
 8000f58:	4611      	mov	r1, r2
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f008 fd28 	bl	80099b0 <osSemaphoreNew>
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <appe_Tl_Init+0x68>)
 8000f62:	6018      	str	r0, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000f64:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <appe_Tl_Init+0x6c>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <appe_Tl_Init+0x70>)
 8000f6a:	f008 fac7 	bl	80094fc <osThreadNew>
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <appe_Tl_Init+0x74>)
 8000f70:	6018      	str	r0, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000f72:	4c12      	ldr	r4, [pc, #72]	; (8000fbc <appe_Tl_Init+0x78>)
 8000f74:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <appe_Tl_Init+0x7c>)
 8000f78:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000f7a:	4669      	mov	r1, sp
 8000f7c:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <appe_Tl_Init+0x80>)
 8000f7e:	f00b febf 	bl	800cd00 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000f86:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8000f8a:	9303      	str	r3, [sp, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000f8c:	f504 7406 	add.w	r4, r4, #536	; 0x218
 8000f90:	9404      	str	r4, [sp, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000f92:	f240 533c 	movw	r3, #1340	; 0x53c
 8000f96:	9305      	str	r3, [sp, #20]
  TL_MM_Init( &tl_mm_config );
 8000f98:	a802      	add	r0, sp, #8
 8000f9a:	f00c f927 	bl	800d1ec <TL_MM_Init>

  TL_Enable();
 8000f9e:	f00c f835 	bl	800d00c <TL_Enable>

  return;
}
 8000fa2:	b008      	add	sp, #32
 8000fa4:	bd10      	pop	{r4, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20004aa8 	.word	0x20004aa8
 8000fac:	20004ac8 	.word	0x20004ac8
 8000fb0:	0800f628 	.word	0x0800f628
 8000fb4:	08001069 	.word	0x08001069
 8000fb8:	20004ab0 	.word	0x20004ab0
 8000fbc:	200300c4 	.word	0x200300c4
 8000fc0:	08001041 	.word	0x08001041
 8000fc4:	08001019 	.word	0x08001019

08000fc8 <APPE_SysEvtReadyProcessing>:
  }
  return;
}

static void APPE_SysEvtReadyProcessing( void )
{
 8000fc8:	b508      	push	{r3, lr}
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000fca:	f00c f93d 	bl	800d248 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000fce:	f00c fce3 	bl	800d998 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f00c fed9 	bl	800dd8c <UTIL_LPM_SetOffMode>
  return;
}
 8000fda:	bd08      	pop	{r3, pc}

08000fdc <APPE_SysEvtError>:
{
 8000fdc:	b508      	push	{r3, lr}
  switch(ErrorCode)
 8000fde:	287d      	cmp	r0, #125	; 0x7d
 8000fe0:	d008      	beq.n	8000ff4 <APPE_SysEvtError+0x18>
 8000fe2:	287e      	cmp	r0, #126	; 0x7e
 8000fe4:	d00c      	beq.n	8001000 <APPE_SysEvtError+0x24>
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <APPE_SysEvtError+0x30>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	2000      	movs	r0, #0
 8000fee:	f002 fc35 	bl	800385c <logApplication>
  return;
 8000ff2:	e004      	b.n	8000ffe <APPE_SysEvtError+0x22>
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <APPE_SysEvtError+0x34>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f002 fc2f 	bl	800385c <logApplication>
}
 8000ffe:	bd08      	pop	{r3, pc}
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <APPE_SysEvtError+0x38>)
 8001002:	2101      	movs	r1, #1
 8001004:	2000      	movs	r0, #0
 8001006:	f002 fc29 	bl	800385c <logApplication>
       break;
 800100a:	e7f8      	b.n	8000ffe <APPE_SysEvtError+0x22>
 800100c:	0800f608 	.word	0x0800f608
 8001010:	0800f5c4 	.word	0x0800f5c4
 8001014:	0800f5e8 	.word	0x0800f5e8

08001018 <APPE_SysUserEvtRx>:
{
 8001018:	b508      	push	{r3, lr}
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800101a:	6842      	ldr	r2, [r0, #4]
  switch(p_sys_event->subevtcode)
 800101c:	f8b2 300b 	ldrh.w	r3, [r2, #11]
 8001020:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8001024:	d004      	beq.n	8001030 <APPE_SysUserEvtRx+0x18>
 8001026:	f249 2101 	movw	r1, #37377	; 0x9201
 800102a:	428b      	cmp	r3, r1
 800102c:	d003      	beq.n	8001036 <APPE_SysUserEvtRx+0x1e>
}
 800102e:	bd08      	pop	{r3, pc}
         APPE_SysEvtReadyProcessing();
 8001030:	f7ff ffca 	bl	8000fc8 <APPE_SysEvtReadyProcessing>
         break;
 8001034:	e7fb      	b.n	800102e <APPE_SysUserEvtRx+0x16>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8001036:	7b50      	ldrb	r0, [r2, #13]
 8001038:	f7ff ffd0 	bl	8000fdc <APPE_SysEvtError>
  return;
 800103c:	e7f7      	b.n	800102e <APPE_SysUserEvtRx+0x16>
	...

08001040 <APPE_SysStatusNot>:
{
 8001040:	b508      	push	{r3, lr}
  switch (status)
 8001042:	b110      	cbz	r0, 800104a <APPE_SysStatusNot+0xa>
 8001044:	2801      	cmp	r0, #1
 8001046:	d007      	beq.n	8001058 <APPE_SysStatusNot+0x18>
}
 8001048:	bd08      	pop	{r3, pc}
      osMutexAcquire( MtxShciId, osWaitForever );
 800104a:	f04f 31ff 	mov.w	r1, #4294967295
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <APPE_SysStatusNot+0x24>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f008 fc33 	bl	80098bc <osMutexAcquire>
      break;
 8001056:	e7f7      	b.n	8001048 <APPE_SysStatusNot+0x8>
      osMutexRelease( MtxShciId );
 8001058:	4b02      	ldr	r3, [pc, #8]	; (8001064 <APPE_SysStatusNot+0x24>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	f008 fc6e 	bl	800993c <osMutexRelease>
  return;
 8001060:	e7f2      	b.n	8001048 <APPE_SysStatusNot+0x8>
 8001062:	bf00      	nop
 8001064:	20004aa8 	.word	0x20004aa8

08001068 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001068:	b508      	push	{r3, lr}
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800106a:	f04f 32ff 	mov.w	r2, #4294967295
 800106e:	2100      	movs	r1, #0
 8001070:	2001      	movs	r0, #1
 8001072:	f008 fb3d 	bl	80096f0 <osThreadFlagsWait>
     shci_user_evt_proc();
 8001076:	f00b fe55 	bl	800cd24 <shci_user_evt_proc>
 800107a:	e7f6      	b.n	800106a <ShciUserEvtProcess+0x2>

0800107c <APPE_Init>:
{
 800107c:	b508      	push	{r3, lr}
  SystemPower_Config(); /**< Configure the system Power Mode */
 800107e:	f7ff ff57 	bl	8000f30 <SystemPower_Config>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001082:	4903      	ldr	r1, [pc, #12]	; (8001090 <APPE_Init+0x14>)
 8001084:	2000      	movs	r0, #0
 8001086:	f001 facd 	bl	8002624 <HW_TS_Init>
  appe_Tl_Init();	/* Initialize all transport layers */
 800108a:	f7ff ff5b 	bl	8000f44 <appe_Tl_Init>
}
 800108e:	bd08      	pop	{r3, pc}
 8001090:	20005718 	.word	0x20005718

08001094 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8001094:	b508      	push	{r3, lr}
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 8001096:	2101      	movs	r1, #1
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <shci_notify_asynch_evt+0x10>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f008 faa2 	bl	80095e4 <osThreadFlagsSet>
  return;
}
 80010a0:	bd08      	pop	{r3, pc}
 80010a2:	bf00      	nop
 80010a4:	20004ab0 	.word	0x20004ab0

080010a8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80010a8:	b508      	push	{r3, lr}
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80010aa:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <shci_cmd_resp_release+0xc>)
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	f008 fd33 	bl	8009b18 <osSemaphoreRelease>
  return;
}
 80010b2:	bd08      	pop	{r3, pc}
 80010b4:	20004ac8 	.word	0x20004ac8

080010b8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80010b8:	b508      	push	{r3, lr}
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80010ba:	f04f 31ff 	mov.w	r1, #4294967295
 80010be:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <shci_cmd_resp_wait+0x10>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f008 fce5 	bl	8009a90 <osSemaphoreAcquire>
  return;
}
 80010c6:	bd08      	pop	{r3, pc}
 80010c8:	20004ac8 	.word	0x20004ac8

080010cc <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80010cc:	b508      	push	{r3, lr}
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 80010ce:	f00c f8ad 	bl	800d22c <TL_MM_EvtDone>
}
 80010d2:	bd08      	pop	{r3, pc}

080010d4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010d4:	b508      	push	{r3, lr}
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) temp, sizeof(temp));
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f008 fb70 	bl	80097bc <osDelay>
 80010dc:	e7fb      	b.n	80010d6 <StartDefaultTask+0x2>
	...

080010e0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	b0b6      	sub	sp, #216	; 0xd8
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010e4:	4a5c      	ldr	r2, [pc, #368]	; (8001258 <MX_FREERTOS_Init+0x178>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	485c      	ldr	r0, [pc, #368]	; (800125c <MX_FREERTOS_Init+0x17c>)
 80010ea:	f008 fa07 	bl	80094fc <osThreadNew>
 80010ee:	4b5c      	ldr	r3, [pc, #368]	; (8001260 <MX_FREERTOS_Init+0x180>)
 80010f0:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t threadFrontLightsTask_attributes = {
 80010f2:	2420      	movs	r4, #32
 80010f4:	4622      	mov	r2, r4
 80010f6:	2100      	movs	r1, #0
 80010f8:	a82e      	add	r0, sp, #184	; 0xb8
 80010fa:	f00d f958 	bl	800e3ae <memset>
 80010fe:	4b59      	ldr	r3, [pc, #356]	; (8001264 <MX_FREERTOS_Init+0x184>)
 8001100:	932d      	str	r3, [sp, #180]	; 0xb4
 8001102:	f44f 7680 	mov.w	r6, #256	; 0x100
 8001106:	9632      	str	r6, [sp, #200]	; 0xc8
 8001108:	2518      	movs	r5, #24
 800110a:	9533      	str	r5, [sp, #204]	; 0xcc
   threadFrontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &threadFrontLightsTask_attributes);
 800110c:	aa2d      	add	r2, sp, #180	; 0xb4
 800110e:	2100      	movs	r1, #0
 8001110:	4855      	ldr	r0, [pc, #340]	; (8001268 <MX_FREERTOS_Init+0x188>)
 8001112:	f008 f9f3 	bl	80094fc <osThreadNew>
 8001116:	4b55      	ldr	r3, [pc, #340]	; (800126c <MX_FREERTOS_Init+0x18c>)
 8001118:	6018      	str	r0, [r3, #0]
   const osThreadAttr_t blinkTask_attributes = {
 800111a:	4622      	mov	r2, r4
 800111c:	2100      	movs	r1, #0
 800111e:	a825      	add	r0, sp, #148	; 0x94
 8001120:	f00d f945 	bl	800e3ae <memset>
 8001124:	4b52      	ldr	r3, [pc, #328]	; (8001270 <MX_FREERTOS_Init+0x190>)
 8001126:	9324      	str	r3, [sp, #144]	; 0x90
 8001128:	9629      	str	r6, [sp, #164]	; 0xa4
 800112a:	952a      	str	r5, [sp, #168]	; 0xa8
   blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 800112c:	aa24      	add	r2, sp, #144	; 0x90
 800112e:	2100      	movs	r1, #0
 8001130:	4850      	ldr	r0, [pc, #320]	; (8001274 <MX_FREERTOS_Init+0x194>)
 8001132:	f008 f9e3 	bl	80094fc <osThreadNew>
 8001136:	4b50      	ldr	r3, [pc, #320]	; (8001278 <MX_FREERTOS_Init+0x198>)
 8001138:	6018      	str	r0, [r3, #0]
   lightsSimpleQueueHandle = osMessageQueueNew (MAX_LIGHT_SIMPLE_QUEUE_SIZE, sizeof(lightsSimpleMessage), NULL);
 800113a:	2200      	movs	r2, #0
 800113c:	2104      	movs	r1, #4
 800113e:	2005      	movs	r0, #5
 8001140:	f008 fd28 	bl	8009b94 <osMessageQueueNew>
 8001144:	4b4d      	ldr	r3, [pc, #308]	; (800127c <MX_FREERTOS_Init+0x19c>)
 8001146:	6018      	str	r0, [r3, #0]
   blinkMsgQueueHandle = osMessageQueueNew (10, sizeof(struct blinkData), NULL);
 8001148:	2200      	movs	r2, #0
 800114a:	216c      	movs	r1, #108	; 0x6c
 800114c:	200a      	movs	r0, #10
 800114e:	f008 fd21 	bl	8009b94 <osMessageQueueNew>
 8001152:	4b4b      	ldr	r3, [pc, #300]	; (8001280 <MX_FREERTOS_Init+0x1a0>)
 8001154:	6018      	str	r0, [r3, #0]
   togLoggingQueueHandle = osMessageQueueNew (4, sizeof(struct LogMessage), NULL);
 8001156:	2200      	movs	r2, #0
 8001158:	2106      	movs	r1, #6
 800115a:	2004      	movs	r0, #4
 800115c:	f008 fd1a 	bl	8009b94 <osMessageQueueNew>
 8001160:	4b48      	ldr	r3, [pc, #288]	; (8001284 <MX_FREERTOS_Init+0x1a4>)
 8001162:	6018      	str	r0, [r3, #0]
   const osThreadAttr_t masterThreadTask_attributes = {
 8001164:	4622      	mov	r2, r4
 8001166:	2100      	movs	r1, #0
 8001168:	a81c      	add	r0, sp, #112	; 0x70
 800116a:	f00d f920 	bl	800e3ae <memset>
 800116e:	4b46      	ldr	r3, [pc, #280]	; (8001288 <MX_FREERTOS_Init+0x1a8>)
 8001170:	931b      	str	r3, [sp, #108]	; 0x6c
 8001172:	9620      	str	r6, [sp, #128]	; 0x80
 8001174:	9521      	str	r5, [sp, #132]	; 0x84
    masterThreadTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterThreadTask_attributes);
 8001176:	aa1b      	add	r2, sp, #108	; 0x6c
 8001178:	2100      	movs	r1, #0
 800117a:	4844      	ldr	r0, [pc, #272]	; (800128c <MX_FREERTOS_Init+0x1ac>)
 800117c:	f008 f9be 	bl	80094fc <osThreadNew>
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <MX_FREERTOS_Init+0x1b0>)
 8001182:	6018      	str	r0, [r3, #0]
	const osThreadAttr_t inertialSensingTask_attributes = {
 8001184:	4622      	mov	r2, r4
 8001186:	2100      	movs	r1, #0
 8001188:	a813      	add	r0, sp, #76	; 0x4c
 800118a:	f00d f910 	bl	800e3ae <memset>
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <MX_FREERTOS_Init+0x1b4>)
 8001190:	9312      	str	r3, [sp, #72]	; 0x48
 8001192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001196:	9317      	str	r3, [sp, #92]	; 0x5c
 8001198:	9518      	str	r5, [sp, #96]	; 0x60
	inertialSensingTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialSensingTask_attributes);
 800119a:	aa12      	add	r2, sp, #72	; 0x48
 800119c:	2100      	movs	r1, #0
 800119e:	483e      	ldr	r0, [pc, #248]	; (8001298 <MX_FREERTOS_Init+0x1b8>)
 80011a0:	f008 f9ac 	bl	80094fc <osThreadNew>
 80011a4:	4b3d      	ldr	r3, [pc, #244]	; (800129c <MX_FREERTOS_Init+0x1bc>)
 80011a6:	6018      	str	r0, [r3, #0]
    const osThreadAttr_t interProcessorTask_attributes = {
 80011a8:	4622      	mov	r2, r4
 80011aa:	2100      	movs	r1, #0
 80011ac:	a80a      	add	r0, sp, #40	; 0x28
 80011ae:	f00d f8fe 	bl	800e3ae <memset>
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <MX_FREERTOS_Init+0x1c0>)
 80011b4:	9309      	str	r3, [sp, #36]	; 0x24
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	930e      	str	r3, [sp, #56]	; 0x38
 80011ba:	950f      	str	r5, [sp, #60]	; 0x3c
    interProcessorTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcessorTask_attributes);
 80011bc:	aa09      	add	r2, sp, #36	; 0x24
 80011be:	2100      	movs	r1, #0
 80011c0:	4838      	ldr	r0, [pc, #224]	; (80012a4 <MX_FREERTOS_Init+0x1c4>)
 80011c2:	f008 f99b 	bl	80094fc <osThreadNew>
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <MX_FREERTOS_Init+0x1c8>)
 80011c8:	6018      	str	r0, [r3, #0]
    interProcessorMsgQueueHandle = osMessageQueueNew (10, sizeof(struct parsedSecondaryProcessorPacket), NULL);
 80011ca:	2200      	movs	r2, #0
 80011cc:	4629      	mov	r1, r5
 80011ce:	200a      	movs	r0, #10
 80011d0:	f008 fce0 	bl	8009b94 <osMessageQueueNew>
 80011d4:	4b35      	ldr	r3, [pc, #212]	; (80012ac <MX_FREERTOS_Init+0x1cc>)
 80011d6:	6018      	str	r0, [r3, #0]
    inertialSensingQueueHandle = osMessageQueueNew (10, sizeof(struct inertialData), NULL);
 80011d8:	2200      	movs	r2, #0
 80011da:	2138      	movs	r1, #56	; 0x38
 80011dc:	200a      	movs	r0, #10
 80011de:	f008 fcd9 	bl	8009b94 <osMessageQueueNew>
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <MX_FREERTOS_Init+0x1d0>)
 80011e4:	6018      	str	r0, [r3, #0]
    activitySampleQueueHandle = osMessageQueueNew (10, sizeof(struct activityData), NULL);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2110      	movs	r1, #16
 80011ea:	200a      	movs	r0, #10
 80011ec:	f008 fcd2 	bl	8009b94 <osMessageQueueNew>
 80011f0:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <MX_FREERTOS_Init+0x1d4>)
 80011f2:	6018      	str	r0, [r3, #0]
    rotationSampleQueueHandle = osMessageQueueNew (3, sizeof(struct rotationData), NULL);
 80011f4:	2200      	movs	r2, #0
 80011f6:	4629      	mov	r1, r5
 80011f8:	2003      	movs	r0, #3
 80011fa:	f008 fccb 	bl	8009b94 <osMessageQueueNew>
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <MX_FREERTOS_Init+0x1d8>)
 8001200:	6018      	str	r0, [r3, #0]
    messageI2C_LockSem = osSemaphoreNew (1, 1, NULL);
 8001202:	2200      	movs	r2, #0
 8001204:	2101      	movs	r1, #1
 8001206:	4608      	mov	r0, r1
 8001208:	f008 fbd2 	bl	80099b0 <osSemaphoreNew>
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <MX_FREERTOS_Init+0x1dc>)
 800120e:	6018      	str	r0, [r3, #0]
	const osThreadAttr_t pulseHandlerTask_attributes = {
 8001210:	4622      	mov	r2, r4
 8001212:	2100      	movs	r1, #0
 8001214:	a801      	add	r0, sp, #4
 8001216:	f00d f8ca 	bl	800e3ae <memset>
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <MX_FREERTOS_Init+0x1e0>)
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001222:	9305      	str	r3, [sp, #20]
 8001224:	9406      	str	r4, [sp, #24]
	pulseHandlerTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseHandlerTask_attributes);
 8001226:	466a      	mov	r2, sp
 8001228:	2100      	movs	r1, #0
 800122a:	4826      	ldr	r0, [pc, #152]	; (80012c4 <MX_FREERTOS_Init+0x1e4>)
 800122c:	f008 f966 	bl	80094fc <osThreadNew>
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <MX_FREERTOS_Init+0x1e8>)
 8001232:	6018      	str	r0, [r3, #0]
	pulseQueue = osMessageQueueNew (10, sizeof(Pulse), NULL);
 8001234:	2200      	movs	r2, #0
 8001236:	2106      	movs	r1, #6
 8001238:	200a      	movs	r0, #10
 800123a:	f008 fcab 	bl	8009b94 <osMessageQueueNew>
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_FREERTOS_Init+0x1ec>)
 8001240:	6018      	str	r0, [r3, #0]
	viveQueue = osMessageQueueNew(10, sizeof(VIVEVars), NULL);
 8001242:	2200      	movs	r2, #0
 8001244:	2114      	movs	r1, #20
 8001246:	200a      	movs	r0, #10
 8001248:	f008 fca4 	bl	8009b94 <osMessageQueueNew>
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_FREERTOS_Init+0x1f0>)
 800124e:	6018      	str	r0, [r3, #0]
   APPE_Init();
 8001250:	f7ff ff14 	bl	800107c <APPE_Init>
}
 8001254:	b036      	add	sp, #216	; 0xd8
 8001256:	bd70      	pop	{r4, r5, r6, pc}
 8001258:	0800f6d8 	.word	0x0800f6d8
 800125c:	080010d5 	.word	0x080010d5
 8001260:	20004bc4 	.word	0x20004bc4
 8001264:	0800f664 	.word	0x0800f664
 8001268:	08003001 	.word	0x08003001
 800126c:	20004ff4 	.word	0x20004ff4
 8001270:	0800f67c 	.word	0x0800f67c
 8001274:	080012d5 	.word	0x080012d5
 8001278:	20004aac 	.word	0x20004aac
 800127c:	20004bcc 	.word	0x20004bcc
 8001280:	20004bbc 	.word	0x20004bbc
 8001284:	20004ba4 	.word	0x20004ba4
 8001288:	0800f688 	.word	0x0800f688
 800128c:	0800324d 	.word	0x0800324d
 8001290:	20004ba8 	.word	0x20004ba8
 8001294:	0800f69c 	.word	0x0800f69c
 8001298:	08002aa1 	.word	0x08002aa1
 800129c:	20004ac0 	.word	0x20004ac0
 80012a0:	0800f6b0 	.word	0x0800f6b0
 80012a4:	08002cd1 	.word	0x08002cd1
 80012a8:	20004ad4 	.word	0x20004ad4
 80012ac:	20004ad0 	.word	0x20004ad0
 80012b0:	20004acc 	.word	0x20004acc
 80012b4:	20004abc 	.word	0x20004abc
 80012b8:	20004ba0 	.word	0x20004ba0
 80012bc:	20004bb4 	.word	0x20004bb4
 80012c0:	0800f6c4 	.word	0x0800f6c4
 80012c4:	08002be1 	.word	0x08002be1
 80012c8:	20004bc8 	.word	0x20004bc8
 80012cc:	20004ff0 	.word	0x20004ff0
 80012d0:	20004bc0 	.word	0x20004bc0

080012d4 <BlinkTask>:

#define BLINK_HALF_BUFFER_SIZE	1000
#define BLINK_PACKET_SIZE		100
#define BLINK_ITERATOR_COUNT 	BLINK_HALF_BUFFER_SIZE / BLINK_PACKET_SIZE

void BlinkTask(void){
 80012d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d6:	ed2d 8b02 	vpush	{d8}
	uint32_t evt;

	uint32_t payload_ID = 0;
 80012da:	2600      	movs	r6, #0
 80012dc:	e052      	b.n	8001384 <BlinkTask+0xb0>

				if( (evt & 0x00000004U) == 0x00000004U){

					// interpolate timestamps for blink packets
					if(previousTick_ms == 0){
						previousTick_ms = HAL_GetTick();
 80012de:	f002 fce1 	bl	8003ca4 <HAL_GetTick>
 80012e2:	ee07 0a90 	vmov	s15, r0
 80012e6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80012ea:	e02e      	b.n	800134a <BlinkTask+0x76>
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){

						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator*BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80012ec:	2364      	movs	r3, #100	; 0x64
 80012ee:	4c32      	ldr	r4, [pc, #200]	; (80013b8 <BlinkTask+0xe4>)
 80012f0:	461a      	mov	r2, r3
 80012f2:	4932      	ldr	r1, [pc, #200]	; (80013bc <BlinkTask+0xe8>)
 80012f4:	fb03 1105 	mla	r1, r3, r5, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	f00d f84d 	bl	800e398 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80012fe:	ee78 7a28 	vadd.f32	s15, s16, s17
 8001302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001306:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 800130a:	66a6      	str	r6, [r4, #104]	; 0x68

						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 800130c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
						payload_ID++;
 8001310:	3601      	adds	r6, #1

						osMessageQueuePut(blinkMsgQueueHandle, (void *) &blinkMsgBuffer_1, 0U, 0);
 8001312:	2300      	movs	r3, #0
 8001314:	461a      	mov	r2, r3
 8001316:	4621      	mov	r1, r4
 8001318:	4829      	ldr	r0, [pc, #164]	; (80013c0 <BlinkTask+0xec>)
 800131a:	6800      	ldr	r0, [r0, #0]
 800131c:	f008 fc9a 	bl	8009c54 <osMessageQueuePut>
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 8001320:	3501      	adds	r5, #1
 8001322:	2d09      	cmp	r5, #9
 8001324:	d9e2      	bls.n	80012ec <BlinkTask+0x18>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if( (evt & 0x00000002U) == 0x00000002U){
 8001326:	f017 0f02 	tst.w	r7, #2
 800132a:	d11c      	bne.n	8001366 <BlinkTask+0x92>
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	2100      	movs	r1, #0
 8001332:	2006      	movs	r0, #6
 8001334:	f008 f9dc 	bl	80096f0 <osThreadFlagsWait>
 8001338:	4607      	mov	r7, r0
				if( (evt & 0x00000004U) == 0x00000004U){
 800133a:	f010 0f04 	tst.w	r0, #4
 800133e:	d0f2      	beq.n	8001326 <BlinkTask+0x52>
					if(previousTick_ms == 0){
 8001340:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	d0c9      	beq.n	80012de <BlinkTask+0xa>
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 800134a:	f002 fcab 	bl	8003ca4 <HAL_GetTick>
 800134e:	ee07 0a90 	vmov	s15, r0
 8001352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001356:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800135a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800135e:	eec7 8a87 	vdiv.f32	s17, s15, s14
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 8001362:	2500      	movs	r5, #0
 8001364:	e7dd      	b.n	8001322 <BlinkTask+0x4e>

					HAL_ADC_Stop_DMA(&hadc1);
 8001366:	4817      	ldr	r0, [pc, #92]	; (80013c4 <BlinkTask+0xf0>)
 8001368:	f003 f989 	bl	800467e <HAL_ADC_Stop_DMA>
//					while(HAL_ADC_Stop(&hadc1) != HAL_OK)
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800136c:	4c16      	ldr	r4, [pc, #88]	; (80013c8 <BlinkTask+0xf4>)
 800136e:	2104      	movs	r1, #4
 8001370:	4620      	mov	r0, r4
 8001372:	f006 fdfb 	bl	8007f6c <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8001376:	4620      	mov	r0, r4
 8001378:	f006 fb02 	bl	8007980 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <BlinkTask+0xec>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	f008 fd26 	bl	8009dd0 <osMessageQueueReset>
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	2100      	movs	r1, #0
 800138a:	2001      	movs	r0, #1
 800138c:	f008 f9b0 	bl	80096f0 <osThreadFlagsWait>
		if (evt == 0x00000001U)  {
 8001390:	2801      	cmp	r0, #1
 8001392:	d1f7      	bne.n	8001384 <BlinkTask+0xb0>
			HAL_TIM_Base_Start(&htim2);
 8001394:	4c0c      	ldr	r4, [pc, #48]	; (80013c8 <BlinkTask+0xf4>)
 8001396:	4620      	mov	r0, r4
 8001398:	f006 fada 	bl	8007950 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800139c:	2104      	movs	r1, #4
 800139e:	4620      	mov	r0, r4
 80013a0:	f006 fdba 	bl	8007f18 <HAL_TIM_PWM_Start>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 80013a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013a8:	4904      	ldr	r1, [pc, #16]	; (80013bc <BlinkTask+0xe8>)
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <BlinkTask+0xf0>)
 80013ac:	f003 f8be 	bl	800452c <HAL_ADC_Start_DMA>
 80013b0:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80013cc <BlinkTask+0xf8>
 80013b4:	e7ba      	b.n	800132c <BlinkTask+0x58>
 80013b6:	bf00      	nop
 80013b8:	200001a4 	.word	0x200001a4
 80013bc:	20000210 	.word	0x20000210
 80013c0:	20004bbc 	.word	0x20004bbc
 80013c4:	200049e4 	.word	0x200049e4
 80013c8:	2000577c 	.word	0x2000577c
 80013cc:	00000000 	.word	0x00000000

080013d0 <HAL_ADC_ErrorCallback>:
//}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
  i++;
 80013d0:	4a02      	ldr	r2, [pc, #8]	; (80013dc <HAL_ADC_ErrorCallback+0xc>)
 80013d2:	7813      	ldrb	r3, [r2, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	7013      	strb	r3, [r2, #0]
}
 80013da:	4770      	bx	lr
 80013dc:	200009e0 	.word	0x200009e0

080013e0 <HAL_ADC_ConvCpltCallback>:

//volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013e0:	b508      	push	{r3, lr}
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer[100]), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_ADC_ConvCpltCallback+0x14>)
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_ADC_ConvCpltCallback+0x18>)
 80013e6:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80013e8:	2104      	movs	r1, #4
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <HAL_ADC_ConvCpltCallback+0x1c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f008 f8f9 	bl	80095e4 <osThreadFlagsSet>

}
 80013f2:	bd08      	pop	{r3, pc}
 80013f4:	20004ffc 	.word	0x20004ffc
 80013f8:	200005f8 	.word	0x200005f8
 80013fc:	20004aac 	.word	0x20004aac

08001400 <HAL_ADC_ConvHalfCpltCallback>:

//volatile uint8_t half = 0;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001400:	b508      	push	{r3, lr}
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = &blink_buffer;
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001406:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001408:	2104      	movs	r1, #4
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	f008 f8e9 	bl	80095e4 <osThreadFlagsSet>

}
 8001412:	bd08      	pop	{r3, pc}
 8001414:	20004ffc 	.word	0x20004ffc
 8001418:	20000210 	.word	0x20000210
 800141c:	20004aac 	.word	0x20004aac

08001420 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001420:	b508      	push	{r3, lr}

  hcomp1.Instance = COMP1;
 8001422:	480b      	ldr	r0, [pc, #44]	; (8001450 <MX_COMP1_Init+0x30>)
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_COMP1_Init+0x34>)
 8001426:	6003      	str	r3, [r0, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_3_4VREFINT;
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_COMP1_Init+0x38>)
 800142a:	6103      	str	r3, [r0, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 800142c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001430:	60c3      	str	r3, [r0, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001432:	2300      	movs	r3, #0
 8001434:	6183      	str	r3, [r0, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001436:	6143      	str	r3, [r0, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001438:	61c3      	str	r3, [r0, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800143a:	6083      	str	r3, [r0, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800143c:	6043      	str	r3, [r0, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800143e:	2331      	movs	r3, #49	; 0x31
 8001440:	6203      	str	r3, [r0, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001442:	f003 f95d 	bl	8004700 <HAL_COMP_Init>
 8001446:	b900      	cbnz	r0, 800144a <MX_COMP1_Init+0x2a>
  {
    Error_Handler();
  }

}
 8001448:	bd08      	pop	{r3, pc}
    Error_Handler();
 800144a:	f001 fefd 	bl	8003248 <Error_Handler>
}
 800144e:	e7fb      	b.n	8001448 <MX_COMP1_Init+0x28>
 8001450:	20005000 	.word	0x20005000
 8001454:	40010200 	.word	0x40010200
 8001458:	00c00020 	.word	0x00c00020

0800145c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800145c:	b500      	push	{lr}
 800145e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	2300      	movs	r3, #0
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	9303      	str	r3, [sp, #12]
 8001468:	9304      	str	r3, [sp, #16]
 800146a:	9305      	str	r3, [sp, #20]
  if(compHandle->Instance==COMP1)
 800146c:	6802      	ldr	r2, [r0, #0]
 800146e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001472:	f503 3381 	add.w	r3, r3, #66048	; 0x10200
 8001476:	429a      	cmp	r2, r3
 8001478:	d002      	beq.n	8001480 <HAL_COMP_MspInit+0x24>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800147a:	b007      	add	sp, #28
 800147c:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001494:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 8001496:	2302      	movs	r3, #2
 8001498:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 800149e:	a901      	add	r1, sp, #4
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a4:	f003 fce8 	bl	8004e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2105      	movs	r1, #5
 80014ac:	2016      	movs	r0, #22
 80014ae:	f003 fa75 	bl	800499c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 80014b2:	2016      	movs	r0, #22
 80014b4:	f003 faa6 	bl	8004a04 <HAL_NVIC_EnableIRQ>
}
 80014b8:	e7df      	b.n	800147a <HAL_COMP_MspInit+0x1e>
	...

080014bc <process_pulse_lengths>:
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
	int cur_phase_id = -1;
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 80014bc:	8813      	ldrh	r3, [r2, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d032      	beq.n	8001528 <process_pulse_lengths+0x6c>
 80014c2:	8852      	ldrh	r2, [r2, #2]
 80014c4:	2a00      	cmp	r2, #0
 80014c6:	d02f      	beq.n	8001528 <process_pulse_lengths+0x6c>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 80014c8:	4293      	cmp	r3, r2
 80014ca:	bf94      	ite	ls
 80014cc:	2300      	movls	r3, #0
 80014ce:	2301      	movhi	r3, #1
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 80014d0:	6802      	ldr	r2, [r0, #0]
 80014d2:	3201      	adds	r2, #1
 80014d4:	428a      	cmp	r2, r1
 80014d6:	d002      	beq.n	80014de <process_pulse_lengths+0x22>
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 80014d8:	6043      	str	r3, [r0, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 80014da:	6001      	str	r1, [r0, #0]
 80014dc:	4770      	bx	lr
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 80014de:	6842      	ldr	r2, [r0, #4]
 80014e0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80014e4:	6043      	str	r3, [r0, #4]
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <process_pulse_lengths+0x70>)
 80014ec:	5cd2      	ldrb	r2, [r2, r3]
        self->prev_full_cycle_idx_ = cycle_idx;
 80014ee:	6001      	str	r1, [r0, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 80014f0:	6883      	ldr	r3, [r0, #8]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	dc0e      	bgt.n	8001514 <process_pulse_lengths+0x58>
        if (self->fix_level_ == kPhaseFixNone) {
 80014f6:	b173      	cbz	r3, 8001516 <process_pulse_lengths+0x5a>
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 80014f8:	b410      	push	{r4}
            self->fix_level_ = kPhaseFixCandidate;
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;

        } else {
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 80014fa:	68c4      	ldr	r4, [r0, #12]
 80014fc:	4421      	add	r1, r4
 80014fe:	f001 0103 	and.w	r1, r1, #3
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 8001502:	428a      	cmp	r2, r1
 8001504:	d00e      	beq.n	8001524 <process_pulse_lengths+0x68>
 8001506:	f04f 32ff 	mov.w	r2, #4294967295
 800150a:	4413      	add	r3, r2
 800150c:	6083      	str	r3, [r0, #8]
        }
    }
}
 800150e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	4770      	bx	lr
            self->fix_level_ = kPhaseFixCandidate;
 8001516:	2301      	movs	r3, #1
 8001518:	6083      	str	r3, [r0, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 800151a:	1a52      	subs	r2, r2, r1
 800151c:	f002 0203 	and.w	r2, r2, #3
 8001520:	60c2      	str	r2, [r0, #12]
 8001522:	4770      	bx	lr
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 8001524:	2201      	movs	r2, #1
 8001526:	e7f0      	b.n	800150a <process_pulse_lengths+0x4e>
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	0800f708 	.word	0x0800f708

08001530 <get_phase>:
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8001530:	6883      	ldr	r3, [r0, #8]
 8001532:	2b03      	cmp	r3, #3
 8001534:	dd04      	ble.n	8001540 <get_phase+0x10>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8001536:	68c0      	ldr	r0, [r0, #12]
 8001538:	4408      	add	r0, r1
 800153a:	f000 0003 	and.w	r0, r0, #3
 800153e:	4770      	bx	lr
    } else {
        return -1;
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
 8001544:	4770      	bx	lr
	...

08001548 <reset>:

void reset(CyclePhaseClassifier * self) {
    self->fix_level_ = kPhaseFixNone;
 8001548:	2300      	movs	r3, #0
 800154a:	6083      	str	r3, [r0, #8]
    self->prev_full_cycle_idx_ = -1;
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	6002      	str	r2, [r0, #0]
    self->pulse_base_len_ = 62.5f;
 8001552:	4a02      	ldr	r2, [pc, #8]	; (800155c <reset+0x14>)
 8001554:	6102      	str	r2, [r0, #16]
    self->phase_history_ = 0;
 8001556:	6043      	str	r3, [r0, #4]
}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	427a0000 	.word	0x427a0000

08001560 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001560:	b500      	push	{lr}
 8001562:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800156a:	f042 0204 	orr.w	r2, r2, #4
 800156e:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001570:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001572:	f002 0204 	and.w	r2, r2, #4
 8001576:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001578:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800157a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800157c:	f042 0201 	orr.w	r2, r2, #1
 8001580:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800158a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2105      	movs	r1, #5
 8001590:	200b      	movs	r0, #11
 8001592:	f003 fa03 	bl	800499c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001596:	200b      	movs	r0, #11
 8001598:	f003 fa34 	bl	8004a04 <HAL_NVIC_EnableIRQ>

}
 800159c:	b003      	add	sp, #12
 800159e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080015a4 <IMU_parseCommandReport>:
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <IMU_parseCommandReport+0x1c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2bf1      	cmp	r3, #241	; 0xf1
 80015aa:	d000      	beq.n	80015ae <IMU_parseCommandReport+0xa>
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80015ac:	4770      	bx	lr
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <IMU_parseCommandReport+0x1c>)
 80015b0:	789b      	ldrb	r3, [r3, #2]
		if (command == COMMAND_ME_CALIBRATE)
 80015b2:	2b07      	cmp	r3, #7
 80015b4:	d1fa      	bne.n	80015ac <IMU_parseCommandReport+0x8>
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 80015b6:	4b02      	ldr	r3, [pc, #8]	; (80015c0 <IMU_parseCommandReport+0x1c>)
 80015b8:	795a      	ldrb	r2, [r3, #5]
 80015ba:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <IMU_parseCommandReport+0x20>)
 80015bc:	701a      	strb	r2, [r3, #0]
}
 80015be:	e7f5      	b.n	80015ac <IMU_parseCommandReport+0x8>
 80015c0:	200050c4 	.word	0x200050c4
 80015c4:	20005177 	.word	0x20005177

080015c8 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	ed2d 8b02 	vpush	{d8}
	float qFloat = fixedPointValue;
 80015ce:	ee07 0a90 	vmov	s15, r0
 80015d2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
	qFloat *= pow(2, qPoint * -1);
 80015d6:	4248      	negs	r0, r1
 80015d8:	f7fe ff2e 	bl	8000438 <__aeabi_i2d>
 80015dc:	ec41 0b11 	vmov	d1, r0, r1
 80015e0:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001610 <IMU_qToFloat+0x48>
 80015e4:	f00c feec 	bl	800e3c0 <pow>
 80015e8:	ec55 4b10 	vmov	r4, r5, d0
 80015ec:	ee18 0a10 	vmov	r0, s16
 80015f0:	f7fe ff34 	bl	800045c <__aeabi_f2d>
 80015f4:	4622      	mov	r2, r4
 80015f6:	462b      	mov	r3, r5
 80015f8:	f7fe ff88 	bl	800050c <__aeabi_dmul>
 80015fc:	f7ff fa36 	bl	8000a6c <__aeabi_d2f>
	return (qFloat);
}
 8001600:	ee00 0a10 	vmov	s0, r0
 8001604:	ecbd 8b02 	vpop	{d8}
 8001608:	bd38      	pop	{r3, r4, r5, pc}
 800160a:	bf00      	nop
 800160c:	f3af 8000 	nop.w
 8001610:	00000000 	.word	0x00000000
 8001614:	40000000 	.word	0x40000000

08001618 <IMU_parseInputReport>:
{
 8001618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800161c:	b083      	sub	sp, #12
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800161e:	4a95      	ldr	r2, [pc, #596]	; (8001874 <IMU_parseInputReport+0x25c>)
 8001620:	7853      	ldrb	r3, [r2, #1]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b21b      	sxth	r3, r3
 8001626:	7812      	ldrb	r2, [r2, #0]
 8001628:	4313      	orrs	r3, r2
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 800162a:	f3c3 030e 	ubfx	r3, r3, #0, #15
	dataLength -= 4; //Remove the header bytes from the data count
 800162e:	3b04      	subs	r3, #4
 8001630:	b219      	sxth	r1, r3
	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001632:	4b91      	ldr	r3, [pc, #580]	; (8001878 <IMU_parseInputReport+0x260>)
 8001634:	7918      	ldrb	r0, [r3, #4]
 8001636:	78da      	ldrb	r2, [r3, #3]
 8001638:	0412      	lsls	r2, r2, #16
 800163a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800163e:	7898      	ldrb	r0, [r3, #2]
 8001640:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001644:	7858      	ldrb	r0, [r3, #1]
 8001646:	4302      	orrs	r2, r0
 8001648:	488c      	ldr	r0, [pc, #560]	; (800187c <IMU_parseInputReport+0x264>)
 800164a:	6002      	str	r2, [r0, #0]
	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 800164c:	79da      	ldrb	r2, [r3, #7]
 800164e:	f002 0903 	and.w	r9, r2, #3
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001652:	7a98      	ldrb	r0, [r3, #10]
 8001654:	7a5d      	ldrb	r5, [r3, #9]
 8001656:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 800165a:	b22d      	sxth	r5, r5
 800165c:	fa1f f885 	uxth.w	r8, r5
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001660:	7b1e      	ldrb	r6, [r3, #12]
 8001662:	7adc      	ldrb	r4, [r3, #11]
 8001664:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8001668:	b224      	sxth	r4, r4
 800166a:	b2a7      	uxth	r7, r4
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 800166c:	7b9e      	ldrb	r6, [r3, #14]
 800166e:	7b5b      	ldrb	r3, [r3, #13]
 8001670:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8001674:	fa0f fa83 	sxth.w	sl, r3
 8001678:	fa1f f68a 	uxth.w	r6, sl
	if (dataLength - 5 > 9)
 800167c:	1f4b      	subs	r3, r1, #5
 800167e:	2b09      	cmp	r3, #9
 8001680:	dd34      	ble.n	80016ec <IMU_parseInputReport+0xd4>
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001682:	497d      	ldr	r1, [pc, #500]	; (8001878 <IMU_parseInputReport+0x260>)
 8001684:	f891 c010 	ldrb.w	ip, [r1, #16]
 8001688:	7bc9      	ldrb	r1, [r1, #15]
 800168a:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 800168e:	9101      	str	r1, [sp, #4]
	if (dataLength - 5 > 11)
 8001690:	2b0b      	cmp	r3, #11
 8001692:	dd2e      	ble.n	80016f2 <IMU_parseInputReport+0xda>
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001694:	4b78      	ldr	r3, [pc, #480]	; (8001878 <IMU_parseInputReport+0x260>)
 8001696:	7c99      	ldrb	r1, [r3, #18]
 8001698:	7c5b      	ldrb	r3, [r3, #17]
 800169a:	ea43 2b01 	orr.w	fp, r3, r1, lsl #8
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 800169e:	4b76      	ldr	r3, [pc, #472]	; (8001878 <IMU_parseInputReport+0x260>)
 80016a0:	795b      	ldrb	r3, [r3, #5]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d028      	beq.n	80016f8 <IMU_parseInputReport+0xe0>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d033      	beq.n	8001712 <IMU_parseInputReport+0xfa>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d03c      	beq.n	8001728 <IMU_parseInputReport+0x110>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d045      	beq.n	800173e <IMU_parseInputReport+0x126>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d04e      	beq.n	8001754 <IMU_parseInputReport+0x13c>
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d04c      	beq.n	8001754 <IMU_parseInputReport+0x13c>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 80016ba:	2b11      	cmp	r3, #17
 80016bc:	f000 808a 	beq.w	80017d4 <IMU_parseInputReport+0x1bc>
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 80016c0:	2b13      	cmp	r3, #19
 80016c2:	f000 808f 	beq.w	80017e4 <IMU_parseInputReport+0x1cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 80016c6:	2b1e      	cmp	r3, #30
 80016c8:	f000 8096 	beq.w	80017f8 <IMU_parseInputReport+0x1e0>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 80016cc:	2b14      	cmp	r3, #20
 80016ce:	f000 80b9 	beq.w	8001844 <IMU_parseInputReport+0x22c>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 80016d2:	2b15      	cmp	r3, #21
 80016d4:	f000 80be 	beq.w	8001854 <IMU_parseInputReport+0x23c>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 80016d8:	2b16      	cmp	r3, #22
 80016da:	f000 80c3 	beq.w	8001864 <IMU_parseInputReport+0x24c>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 80016de:	2bf1      	cmp	r3, #241	; 0xf1
 80016e0:	d114      	bne.n	800170c <IMU_parseInputReport+0xf4>
		if (command == COMMAND_ME_CALIBRATE)
 80016e2:	2a07      	cmp	r2, #7
 80016e4:	d112      	bne.n	800170c <IMU_parseInputReport+0xf4>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80016e6:	4b66      	ldr	r3, [pc, #408]	; (8001880 <IMU_parseInputReport+0x268>)
 80016e8:	7018      	strb	r0, [r3, #0]
}
 80016ea:	e00f      	b.n	800170c <IMU_parseInputReport+0xf4>
	uint16_t data4 = 0;
 80016ec:	2100      	movs	r1, #0
 80016ee:	9101      	str	r1, [sp, #4]
 80016f0:	e7ce      	b.n	8001690 <IMU_parseInputReport+0x78>
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 80016f2:	f04f 0b00 	mov.w	fp, #0
 80016f6:	e7d2      	b.n	800169e <IMU_parseInputReport+0x86>
		accelAccuracy = status;
 80016f8:	4b62      	ldr	r3, [pc, #392]	; (8001884 <IMU_parseInputReport+0x26c>)
 80016fa:	f8a3 9000 	strh.w	r9, [r3]
		rawAccelX = data1;
 80016fe:	4b62      	ldr	r3, [pc, #392]	; (8001888 <IMU_parseInputReport+0x270>)
 8001700:	f8a3 8000 	strh.w	r8, [r3]
		rawAccelY = data2;
 8001704:	4b61      	ldr	r3, [pc, #388]	; (800188c <IMU_parseInputReport+0x274>)
 8001706:	801f      	strh	r7, [r3, #0]
		rawAccelZ = data3;
 8001708:	4b61      	ldr	r3, [pc, #388]	; (8001890 <IMU_parseInputReport+0x278>)
 800170a:	801e      	strh	r6, [r3, #0]
}
 800170c:	b003      	add	sp, #12
 800170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		accelLinAccuracy = status;
 8001712:	4b60      	ldr	r3, [pc, #384]	; (8001894 <IMU_parseInputReport+0x27c>)
 8001714:	f8a3 9000 	strh.w	r9, [r3]
		rawLinAccelX = data1;
 8001718:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <IMU_parseInputReport+0x280>)
 800171a:	f8a3 8000 	strh.w	r8, [r3]
		rawLinAccelY = data2;
 800171e:	4b5f      	ldr	r3, [pc, #380]	; (800189c <IMU_parseInputReport+0x284>)
 8001720:	801f      	strh	r7, [r3, #0]
		rawLinAccelZ = data3;
 8001722:	4b5f      	ldr	r3, [pc, #380]	; (80018a0 <IMU_parseInputReport+0x288>)
 8001724:	801e      	strh	r6, [r3, #0]
 8001726:	e7f1      	b.n	800170c <IMU_parseInputReport+0xf4>
		gyroAccuracy = status;
 8001728:	4b5e      	ldr	r3, [pc, #376]	; (80018a4 <IMU_parseInputReport+0x28c>)
 800172a:	f8a3 9000 	strh.w	r9, [r3]
		rawGyroX = data1;
 800172e:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <IMU_parseInputReport+0x290>)
 8001730:	f8a3 8000 	strh.w	r8, [r3]
		rawGyroY = data2;
 8001734:	4b5d      	ldr	r3, [pc, #372]	; (80018ac <IMU_parseInputReport+0x294>)
 8001736:	801f      	strh	r7, [r3, #0]
		rawGyroZ = data3;
 8001738:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <IMU_parseInputReport+0x298>)
 800173a:	801e      	strh	r6, [r3, #0]
 800173c:	e7e6      	b.n	800170c <IMU_parseInputReport+0xf4>
		magAccuracy = status;
 800173e:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <IMU_parseInputReport+0x29c>)
 8001740:	f8a3 9000 	strh.w	r9, [r3]
		rawMagX = data1;
 8001744:	4b5c      	ldr	r3, [pc, #368]	; (80018b8 <IMU_parseInputReport+0x2a0>)
 8001746:	f8a3 8000 	strh.w	r8, [r3]
		rawMagY = data2;
 800174a:	4b5c      	ldr	r3, [pc, #368]	; (80018bc <IMU_parseInputReport+0x2a4>)
 800174c:	801f      	strh	r7, [r3, #0]
		rawMagZ = data3;
 800174e:	4b5c      	ldr	r3, [pc, #368]	; (80018c0 <IMU_parseInputReport+0x2a8>)
 8001750:	801e      	strh	r6, [r3, #0]
 8001752:	e7db      	b.n	800170c <IMU_parseInputReport+0xf4>
		rotSample.tick_ms = HAL_GetTick();
 8001754:	f002 faa6 	bl	8003ca4 <HAL_GetTick>
 8001758:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <IMU_parseInputReport+0x2ac>)
 800175a:	6158      	str	r0, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 800175c:	4a5a      	ldr	r2, [pc, #360]	; (80018c8 <IMU_parseInputReport+0x2b0>)
 800175e:	7811      	ldrb	r1, [r2, #0]
 8001760:	4628      	mov	r0, r5
 8001762:	f7ff ff31 	bl	80015c8 <IMU_qToFloat>
 8001766:	4d57      	ldr	r5, [pc, #348]	; (80018c4 <IMU_parseInputReport+0x2ac>)
 8001768:	ed85 0a00 	vstr	s0, [r5]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 800176c:	4a56      	ldr	r2, [pc, #344]	; (80018c8 <IMU_parseInputReport+0x2b0>)
 800176e:	7811      	ldrb	r1, [r2, #0]
 8001770:	4620      	mov	r0, r4
 8001772:	f7ff ff29 	bl	80015c8 <IMU_qToFloat>
 8001776:	462c      	mov	r4, r5
 8001778:	ed85 0a01 	vstr	s0, [r5, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 800177c:	4d52      	ldr	r5, [pc, #328]	; (80018c8 <IMU_parseInputReport+0x2b0>)
 800177e:	7829      	ldrb	r1, [r5, #0]
 8001780:	4650      	mov	r0, sl
 8001782:	f7ff ff21 	bl	80015c8 <IMU_qToFloat>
 8001786:	ed84 0a02 	vstr	s0, [r4, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 800178a:	7829      	ldrb	r1, [r5, #0]
 800178c:	9d01      	ldr	r5, [sp, #4]
 800178e:	b228      	sxth	r0, r5
 8001790:	f7ff ff1a 	bl	80015c8 <IMU_qToFloat>
 8001794:	ed84 0a03 	vstr	s0, [r4, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001798:	210c      	movs	r1, #12
 800179a:	fa0f f08b 	sxth.w	r0, fp
 800179e:	f7ff ff13 	bl	80015c8 <IMU_qToFloat>
 80017a2:	ed84 0a04 	vstr	s0, [r4, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 80017a6:	2300      	movs	r3, #0
 80017a8:	461a      	mov	r2, r3
 80017aa:	4621      	mov	r1, r4
 80017ac:	4847      	ldr	r0, [pc, #284]	; (80018cc <IMU_parseInputReport+0x2b4>)
 80017ae:	6800      	ldr	r0, [r0, #0]
 80017b0:	f008 fa50 	bl	8009c54 <osMessageQueuePut>
		quatAccuracy = status;
 80017b4:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <IMU_parseInputReport+0x2b8>)
 80017b6:	f8a3 9000 	strh.w	r9, [r3]
		rawQuatI = data1;
 80017ba:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <IMU_parseInputReport+0x2bc>)
 80017bc:	f8a3 8000 	strh.w	r8, [r3]
		rawQuatJ = data2;
 80017c0:	4b45      	ldr	r3, [pc, #276]	; (80018d8 <IMU_parseInputReport+0x2c0>)
 80017c2:	801f      	strh	r7, [r3, #0]
		rawQuatK = data3;
 80017c4:	4b45      	ldr	r3, [pc, #276]	; (80018dc <IMU_parseInputReport+0x2c4>)
 80017c6:	801e      	strh	r6, [r3, #0]
		rawQuatReal = data4;
 80017c8:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <IMU_parseInputReport+0x2c8>)
 80017ca:	801d      	strh	r5, [r3, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80017cc:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <IMU_parseInputReport+0x2cc>)
 80017ce:	f8a3 b000 	strh.w	fp, [r3]
 80017d2:	e79b      	b.n	800170c <IMU_parseInputReport+0xf4>
		stepSample.tick_ms = HAL_GetTick();
 80017d4:	f002 fa66 	bl	8003ca4 <HAL_GetTick>
 80017d8:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <IMU_parseInputReport+0x2d0>)
 80017da:	6058      	str	r0, [r3, #4]
		stepSample.stepCount = data3;
 80017dc:	801e      	strh	r6, [r3, #0]
		stepCount = data3; //Bytes 8/9
 80017de:	4b43      	ldr	r3, [pc, #268]	; (80018ec <IMU_parseInputReport+0x2d4>)
 80017e0:	801e      	strh	r6, [r3, #0]
 80017e2:	e793      	b.n	800170c <IMU_parseInputReport+0xf4>
		stabilitySample.tick_ms = HAL_GetTick();
 80017e4:	f002 fa5e 	bl	8003ca4 <HAL_GetTick>
 80017e8:	4a41      	ldr	r2, [pc, #260]	; (80018f0 <IMU_parseInputReport+0x2d8>)
 80017ea:	6050      	str	r0, [r2, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <IMU_parseInputReport+0x260>)
 80017ee:	7a5b      	ldrb	r3, [r3, #9]
 80017f0:	7013      	strb	r3, [r2, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80017f2:	4a40      	ldr	r2, [pc, #256]	; (80018f4 <IMU_parseInputReport+0x2dc>)
 80017f4:	7013      	strb	r3, [r2, #0]
 80017f6:	e789      	b.n	800170c <IMU_parseInputReport+0xf4>
		activitySample.tick_ms = HAL_GetTick();
 80017f8:	f002 fa54 	bl	8003ca4 <HAL_GetTick>
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <IMU_parseInputReport+0x2e0>)
 80017fe:	60d8      	str	r0, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001800:	2300      	movs	r3, #0
 8001802:	2b08      	cmp	r3, #8
 8001804:	d809      	bhi.n	800181a <IMU_parseInputReport+0x202>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001806:	f103 010b 	add.w	r1, r3, #11
 800180a:	4a3c      	ldr	r2, [pc, #240]	; (80018fc <IMU_parseInputReport+0x2e4>)
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	481a      	ldr	r0, [pc, #104]	; (8001878 <IMU_parseInputReport+0x260>)
 8001810:	5c41      	ldrb	r1, [r0, r1]
 8001812:	54d1      	strb	r1, [r2, r3]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001814:	3301      	adds	r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	e7f3      	b.n	8001802 <IMU_parseInputReport+0x1ea>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <IMU_parseInputReport+0x260>)
 800181c:	7a9a      	ldrb	r2, [r3, #10]
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <IMU_parseInputReport+0x2e8>)
 8001820:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001822:	4c35      	ldr	r4, [pc, #212]	; (80018f8 <IMU_parseInputReport+0x2e0>)
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <IMU_parseInputReport+0x2e4>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4623      	mov	r3, r4
 800182a:	6810      	ldr	r0, [r2, #0]
 800182c:	6851      	ldr	r1, [r2, #4]
 800182e:	c303      	stmia	r3!, {r0, r1}
 8001830:	7a12      	ldrb	r2, [r2, #8]
 8001832:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001834:	2300      	movs	r3, #0
 8001836:	461a      	mov	r2, r3
 8001838:	4621      	mov	r1, r4
 800183a:	4832      	ldr	r0, [pc, #200]	; (8001904 <IMU_parseInputReport+0x2ec>)
 800183c:	6800      	ldr	r0, [r0, #0]
 800183e:	f008 fa09 	bl	8009c54 <osMessageQueuePut>
 8001842:	e763      	b.n	800170c <IMU_parseInputReport+0xf4>
		memsRawAccelX = data1;
 8001844:	4b30      	ldr	r3, [pc, #192]	; (8001908 <IMU_parseInputReport+0x2f0>)
 8001846:	f8a3 8000 	strh.w	r8, [r3]
		memsRawAccelY = data2;
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <IMU_parseInputReport+0x2f4>)
 800184c:	801f      	strh	r7, [r3, #0]
		memsRawAccelZ = data3;
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <IMU_parseInputReport+0x2f8>)
 8001850:	801e      	strh	r6, [r3, #0]
 8001852:	e75b      	b.n	800170c <IMU_parseInputReport+0xf4>
		memsRawGyroX = data1;
 8001854:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <IMU_parseInputReport+0x2fc>)
 8001856:	f8a3 8000 	strh.w	r8, [r3]
		memsRawGyroY = data2;
 800185a:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <IMU_parseInputReport+0x300>)
 800185c:	801f      	strh	r7, [r3, #0]
		memsRawGyroZ = data3;
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <IMU_parseInputReport+0x304>)
 8001860:	801e      	strh	r6, [r3, #0]
 8001862:	e753      	b.n	800170c <IMU_parseInputReport+0xf4>
		memsRawMagX = data1;
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <IMU_parseInputReport+0x308>)
 8001866:	f8a3 8000 	strh.w	r8, [r3]
		memsRawMagY = data2;
 800186a:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <IMU_parseInputReport+0x30c>)
 800186c:	801f      	strh	r7, [r3, #0]
		memsRawMagZ = data3;
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <IMU_parseInputReport+0x310>)
 8001870:	801e      	strh	r6, [r3, #0]
 8001872:	e74b      	b.n	800170c <IMU_parseInputReport+0xf4>
 8001874:	20005030 	.word	0x20005030
 8001878:	200050c4 	.word	0x200050c4
 800187c:	2000504c 	.word	0x2000504c
 8001880:	20005177 	.word	0x20005177
 8001884:	2000518c 	.word	0x2000518c
 8001888:	20005174 	.word	0x20005174
 800188c:	20005190 	.word	0x20005190
 8001890:	2000508a 	.word	0x2000508a
 8001894:	20005086 	.word	0x20005086
 8001898:	2000507c 	.word	0x2000507c
 800189c:	20005178 	.word	0x20005178
 80018a0:	200050b6 	.word	0x200050b6
 80018a4:	200050b8 	.word	0x200050b8
 80018a8:	200050ba 	.word	0x200050ba
 80018ac:	20005080 	.word	0x20005080
 80018b0:	2000507e 	.word	0x2000507e
 80018b4:	20005034 	.word	0x20005034
 80018b8:	20005082 	.word	0x20005082
 80018bc:	2000517a 	.word	0x2000517a
 80018c0:	20005088 	.word	0x20005088
 80018c4:	2000509c 	.word	0x2000509c
 80018c8:	20000006 	.word	0x20000006
 80018cc:	20004ba0 	.word	0x20004ba0
 80018d0:	20005052 	.word	0x20005052
 80018d4:	2000518e 	.word	0x2000518e
 80018d8:	200050b4 	.word	0x200050b4
 80018dc:	2000502c 	.word	0x2000502c
 80018e0:	20005048 	.word	0x20005048
 80018e4:	2000508c 	.word	0x2000508c
 80018e8:	20005038 	.word	0x20005038
 80018ec:	20005192 	.word	0x20005192
 80018f0:	20005040 	.word	0x20005040
 80018f4:	200050be 	.word	0x200050be
 80018f8:	2000517c 	.word	0x2000517c
 80018fc:	20005098 	.word	0x20005098
 8001900:	20005176 	.word	0x20005176
 8001904:	20004abc 	.word	0x20004abc
 8001908:	200050bc 	.word	0x200050bc
 800190c:	20005094 	.word	0x20005094
 8001910:	20005146 	.word	0x20005146
 8001914:	20005036 	.word	0x20005036
 8001918:	200050c0 	.word	0x200050c0
 800191c:	2000508e 	.word	0x2000508e
 8001920:	20005092 	.word	0x20005092
 8001924:	20005090 	.word	0x20005090
 8001928:	20005054 	.word	0x20005054

0800192c <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	b083      	sub	sp, #12
 8001930:	4607      	mov	r7, r0
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 8001932:	2500      	movs	r5, #0
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 8001934:	e01a      	b.n	800196c <IMU_getData+0x40>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 8001936:	241c      	movs	r4, #28

		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8001938:	4e14      	ldr	r6, [pc, #80]	; (800198c <IMU_getData+0x60>)
 800193a:	f04f 31ff 	mov.w	r1, #4294967295
 800193e:	6830      	ldr	r0, [r6, #0]
 8001940:	f008 f8a6 	bl	8009a90 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 8001944:	1d23      	adds	r3, r4, #4
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <IMU_getData+0x64>)
 8001948:	7811      	ldrb	r1, [r2, #0]
 800194a:	2264      	movs	r2, #100	; 0x64
 800194c:	9200      	str	r2, [sp, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	4a10      	ldr	r2, [pc, #64]	; (8001994 <IMU_getData+0x68>)
 8001952:	4811      	ldr	r0, [pc, #68]	; (8001998 <IMU_getData+0x6c>)
 8001954:	f003 fe92 	bl	800567c <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockSem);
 8001958:	6830      	ldr	r0, [r6, #0]
 800195a:	f008 f8dd 	bl	8009b18 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 800195e:	1963      	adds	r3, r4, r5
 8001960:	2b7f      	cmp	r3, #127	; 0x7f
 8001962:	dd08      	ble.n	8001976 <IMU_getData+0x4a>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 8001964:	4425      	add	r5, r4
 8001966:	b2ad      	uxth	r5, r5

		bytesRemaining -= numberOfBytesToRead;
 8001968:	1b3c      	subs	r4, r7, r4
 800196a:	b2a7      	uxth	r7, r4
	while (bytesRemaining > 0)
 800196c:	b157      	cbz	r7, 8001984 <IMU_getData+0x58>
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 800196e:	2f1c      	cmp	r7, #28
 8001970:	d8e1      	bhi.n	8001936 <IMU_getData+0xa>
		uint16_t numberOfBytesToRead = bytesRemaining;
 8001972:	463c      	mov	r4, r7
 8001974:	e7e0      	b.n	8001938 <IMU_getData+0xc>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 8001976:	4622      	mov	r2, r4
 8001978:	4908      	ldr	r1, [pc, #32]	; (800199c <IMU_getData+0x70>)
 800197a:	4809      	ldr	r0, [pc, #36]	; (80019a0 <IMU_getData+0x74>)
 800197c:	4428      	add	r0, r5
 800197e:	f00c fd0b 	bl	800e398 <memcpy>
 8001982:	e7ef      	b.n	8001964 <IMU_getData+0x38>
	}
	return (true); //Done!
}
 8001984:	2001      	movs	r0, #1
 8001986:	b003      	add	sp, #12
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198a:	bf00      	nop
 800198c:	20004bb4 	.word	0x20004bb4
 8001990:	20000004 	.word	0x20000004
 8001994:	200009e4 	.word	0x200009e4
 8001998:	2000519c 	.word	0x2000519c
 800199c:	200009e8 	.word	0x200009e8
 80019a0:	200050c4 	.word	0x200050c4

080019a4 <IMU_receivePacket>:
{
 80019a4:	b530      	push	{r4, r5, lr}
 80019a6:	b083      	sub	sp, #12
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <IMU_receivePacket+0x60>)
 80019aa:	7819      	ldrb	r1, [r3, #0]
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <IMU_receivePacket+0x64>)
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	f003 fb22 	bl	8004ff8 <HAL_GPIO_ReadPin>
 80019b4:	2801      	cmp	r0, #1
 80019b6:	d022      	beq.n	80019fe <IMU_receivePacket+0x5a>
	osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 80019b8:	4d14      	ldr	r5, [pc, #80]	; (8001a0c <IMU_receivePacket+0x68>)
 80019ba:	f04f 31ff 	mov.w	r1, #4294967295
 80019be:	6828      	ldr	r0, [r5, #0]
 80019c0:	f008 f866 	bl	8009a90 <osSemaphoreAcquire>
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 80019c4:	4c12      	ldr	r4, [pc, #72]	; (8001a10 <IMU_receivePacket+0x6c>)
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <IMU_receivePacket+0x70>)
 80019c8:	7819      	ldrb	r1, [r3, #0]
 80019ca:	2364      	movs	r3, #100	; 0x64
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2304      	movs	r3, #4
 80019d0:	4622      	mov	r2, r4
 80019d2:	4811      	ldr	r0, [pc, #68]	; (8001a18 <IMU_receivePacket+0x74>)
 80019d4:	f003 fe52 	bl	800567c <HAL_I2C_Master_Receive>
	osSemaphoreRelease(messageI2C_LockSem);
 80019d8:	6828      	ldr	r0, [r5, #0]
 80019da:	f008 f89d 	bl	8009b18 <osSemaphoreRelease>
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 80019de:	7860      	ldrb	r0, [r4, #1]
 80019e0:	0200      	lsls	r0, r0, #8
 80019e2:	b200      	sxth	r0, r0
 80019e4:	7823      	ldrb	r3, [r4, #0]
 80019e6:	4318      	orrs	r0, r3
	dataLength &= ~(1 << 15); //Clear the MSbit.
 80019e8:	f3c0 000e 	ubfx	r0, r0, #0, #15
	if (dataLength == 0)
 80019ec:	b908      	cbnz	r0, 80019f2 <IMU_receivePacket+0x4e>
		return (false); //All done
 80019ee:	2000      	movs	r0, #0
 80019f0:	e006      	b.n	8001a00 <IMU_receivePacket+0x5c>
	dataLength -= 4; //Remove the header bytes from the data count
 80019f2:	3804      	subs	r0, #4
	IMU_getData(dataLength);
 80019f4:	b280      	uxth	r0, r0
 80019f6:	f7ff ff99 	bl	800192c <IMU_getData>
	return (true); //We're done!
 80019fa:	2001      	movs	r0, #1
 80019fc:	e000      	b.n	8001a00 <IMU_receivePacket+0x5c>
		return (false);
 80019fe:	2000      	movs	r0, #0
}
 8001a00:	b003      	add	sp, #12
 8001a02:	bd30      	pop	{r4, r5, pc}
 8001a04:	20005084 	.word	0x20005084
 8001a08:	2000514c 	.word	0x2000514c
 8001a0c:	20004bb4 	.word	0x20004bb4
 8001a10:	20005030 	.word	0x20005030
 8001a14:	20000004 	.word	0x20000004
 8001a18:	2000519c 	.word	0x2000519c

08001a1c <IMU_dataAvailable>:
{
 8001a1c:	b510      	push	{r4, lr}
	if (_int != 255)
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <IMU_dataAvailable+0x48>)
 8001a20:	7819      	ldrb	r1, [r3, #0]
 8001a22:	29ff      	cmp	r1, #255	; 0xff
 8001a24:	d005      	beq.n	8001a32 <IMU_dataAvailable+0x16>
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <IMU_dataAvailable+0x4c>)
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	f003 fae5 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8001a2e:	2801      	cmp	r0, #1
 8001a30:	d016      	beq.n	8001a60 <IMU_dataAvailable+0x44>
	if (IMU_receivePacket() == true)
 8001a32:	f7ff ffb7 	bl	80019a4 <IMU_receivePacket>
 8001a36:	4604      	mov	r4, r0
 8001a38:	b130      	cbz	r0, 8001a48 <IMU_dataAvailable+0x2c>
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <IMU_dataAvailable+0x50>)
 8001a3c:	789b      	ldrb	r3, [r3, #2]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d004      	beq.n	8001a4c <IMU_dataAvailable+0x30>
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d009      	beq.n	8001a5a <IMU_dataAvailable+0x3e>
	return (false);
 8001a46:	2400      	movs	r4, #0
}
 8001a48:	4620      	mov	r0, r4
 8001a4a:	bd10      	pop	{r4, pc}
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001a4c:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <IMU_dataAvailable+0x54>)
 8001a4e:	7812      	ldrb	r2, [r2, #0]
 8001a50:	2afb      	cmp	r2, #251	; 0xfb
 8001a52:	d1f6      	bne.n	8001a42 <IMU_dataAvailable+0x26>
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001a54:	f7ff fde0 	bl	8001618 <IMU_parseInputReport>
			return (true);
 8001a58:	e7f6      	b.n	8001a48 <IMU_dataAvailable+0x2c>
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001a5a:	f7ff fda3 	bl	80015a4 <IMU_parseCommandReport>
			return (true);
 8001a5e:	e7f3      	b.n	8001a48 <IMU_dataAvailable+0x2c>
			return (false);
 8001a60:	2400      	movs	r4, #0
 8001a62:	e7f1      	b.n	8001a48 <IMU_dataAvailable+0x2c>
 8001a64:	20005084 	.word	0x20005084
 8001a68:	2000514c 	.word	0x2000514c
 8001a6c:	20005030 	.word	0x20005030
 8001a70:	200050c4 	.word	0x200050c4

08001a74 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001a74:	b570      	push	{r4, r5, r6, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	460a      	mov	r2, r1
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001a7a:	1d0d      	adds	r5, r1, #4
 8001a7c:	b2ed      	uxtb	r5, r5

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 8001a7e:	4c11      	ldr	r4, [pc, #68]	; (8001ac4 <IMU_sendPacket+0x50>)
 8001a80:	7025      	strb	r5, [r4, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 8001a82:	122b      	asrs	r3, r5, #8
 8001a84:	7063      	strb	r3, [r4, #1]
	outPacket[2] = channelNumber; 						//Channel number
 8001a86:	70a0      	strb	r0, [r4, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001a88:	490f      	ldr	r1, [pc, #60]	; (8001ac8 <IMU_sendPacket+0x54>)
 8001a8a:	5c0b      	ldrb	r3, [r1, r0]
 8001a8c:	1c5e      	adds	r6, r3, #1
 8001a8e:	540e      	strb	r6, [r1, r0]
 8001a90:	70e3      	strb	r3, [r4, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 8001a92:	490e      	ldr	r1, [pc, #56]	; (8001acc <IMU_sendPacket+0x58>)
 8001a94:	1d20      	adds	r0, r4, #4
 8001a96:	f00c fc7f 	bl	800e398 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8001a9a:	4e0d      	ldr	r6, [pc, #52]	; (8001ad0 <IMU_sendPacket+0x5c>)
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	6830      	ldr	r0, [r6, #0]
 8001aa2:	f007 fff5 	bl	8009a90 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <IMU_sendPacket+0x60>)
 8001aa8:	7819      	ldrb	r1, [r3, #0]
 8001aaa:	2364      	movs	r3, #100	; 0x64
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	462b      	mov	r3, r5
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <IMU_sendPacket+0x64>)
 8001ab4:	f003 fd24 	bl	8005500 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockSem);
 8001ab8:	6830      	ldr	r0, [r6, #0]
 8001aba:	f008 f82d 	bl	8009b18 <osSemaphoreRelease>

	return (true);
}
 8001abe:	2001      	movs	r0, #1
 8001ac0:	b002      	add	sp, #8
 8001ac2:	bd70      	pop	{r4, r5, r6, pc}
 8001ac4:	20005150 	.word	0x20005150
 8001ac8:	20000a04 	.word	0x20000a04
 8001acc:	200050c4 	.word	0x200050c4
 8001ad0:	20004bb4 	.word	0x20004bb4
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	2000519c 	.word	0x2000519c

08001adc <IMU_softReset>:
{
 8001adc:	b508      	push	{r3, lr}
	shtpData[0] = 1; //Reset
 8001ade:	2001      	movs	r0, #1
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <IMU_softReset+0x2c>)
 8001ae2:	7018      	strb	r0, [r3, #0]
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001ae4:	4601      	mov	r1, r0
 8001ae6:	f7ff ffc5 	bl	8001a74 <IMU_sendPacket>
	HAL_Delay(200);
 8001aea:	20c8      	movs	r0, #200	; 0xc8
 8001aec:	f002 f8e6 	bl	8003cbc <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001af0:	f7ff ff58 	bl	80019a4 <IMU_receivePacket>
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d1fb      	bne.n	8001af0 <IMU_softReset+0x14>
	HAL_Delay(200);
 8001af8:	20c8      	movs	r0, #200	; 0xc8
 8001afa:	f002 f8df 	bl	8003cbc <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001afe:	f7ff ff51 	bl	80019a4 <IMU_receivePacket>
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d1fb      	bne.n	8001afe <IMU_softReset+0x22>
}
 8001b06:	bd08      	pop	{r3, pc}
 8001b08:	200050c4 	.word	0x200050c4

08001b0c <IMU_begin>:
{
 8001b0c:	b508      	push	{r3, lr}
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 8001b0e:	0040      	lsls	r0, r0, #1
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <IMU_begin+0x40>)
 8001b12:	7018      	strb	r0, [r3, #0]
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <IMU_begin+0x44>)
 8001b16:	7019      	strb	r1, [r3, #0]
	_intPort = intPort;
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <IMU_begin+0x48>)
 8001b1a:	601a      	str	r2, [r3, #0]
	IMU_softReset();
 8001b1c:	f7ff ffde 	bl	8001adc <IMU_softReset>
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <IMU_begin+0x4c>)
 8001b22:	22f9      	movs	r2, #249	; 0xf9
 8001b24:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001b26:	2200      	movs	r2, #0
 8001b28:	705a      	strb	r2, [r3, #1]
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	f7ff ffa1 	bl	8001a74 <IMU_sendPacket>
	if (IMU_receivePacket() == true)
 8001b32:	f7ff ff37 	bl	80019a4 <IMU_receivePacket>
 8001b36:	b130      	cbz	r0, 8001b46 <IMU_begin+0x3a>
 8001b38:	4603      	mov	r3, r0
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001b3a:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <IMU_begin+0x4c>)
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	2af8      	cmp	r2, #248	; 0xf8
 8001b40:	d002      	beq.n	8001b48 <IMU_begin+0x3c>
	return (false); //Something went wrong
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <IMU_begin+0x3c>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd08      	pop	{r3, pc}
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	20005084 	.word	0x20005084
 8001b54:	2000514c 	.word	0x2000514c
 8001b58:	200050c4 	.word	0x200050c4

08001b5c <IMU_setFeatureCommand_3>:
{
 8001b5c:	b510      	push	{r4, lr}
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	fb03 f101 	mul.w	r1, r3, r1
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <IMU_setFeatureCommand_3+0x48>)
 8001b68:	24fd      	movs	r4, #253	; 0xfd
 8001b6a:	701c      	strb	r4, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001b6c:	7058      	strb	r0, [r3, #1]
	shtpData[2] = 0;								   //Feature flags
 8001b6e:	2000      	movs	r0, #0
 8001b70:	7098      	strb	r0, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8001b72:	70d8      	strb	r0, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8001b74:	7118      	strb	r0, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001b76:	7159      	strb	r1, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001b78:	120c      	asrs	r4, r1, #8
 8001b7a:	719c      	strb	r4, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001b7c:	140c      	asrs	r4, r1, #16
 8001b7e:	71dc      	strb	r4, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001b80:	0e09      	lsrs	r1, r1, #24
 8001b82:	7219      	strb	r1, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 8001b84:	7258      	strb	r0, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 8001b86:	7298      	strb	r0, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 8001b88:	72d8      	strb	r0, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 8001b8a:	7318      	strb	r0, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 8001b8c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 8001b8e:	0a11      	lsrs	r1, r2, #8
 8001b90:	7399      	strb	r1, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 8001b92:	0c11      	lsrs	r1, r2, #16
 8001b94:	73d9      	strb	r1, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8001b96:	0e12      	lsrs	r2, r2, #24
 8001b98:	741a      	strb	r2, [r3, #16]
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 8001b9a:	2111      	movs	r1, #17
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f7ff ff69 	bl	8001a74 <IMU_sendPacket>
}
 8001ba2:	bd10      	pop	{r4, pc}
 8001ba4:	200050c4 	.word	0x200050c4

08001ba8 <IMU_enableActivityClassifier>:
{
 8001ba8:	b508      	push	{r3, lr}
	_activityConfidences = activityConfidences; //Store pointer to array
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <IMU_enableActivityClassifier+0x14>)
 8001bac:	601a      	str	r2, [r3, #0]
	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8001bae:	460a      	mov	r2, r1
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	201e      	movs	r0, #30
 8001bb4:	f7ff ffd2 	bl	8001b5c <IMU_setFeatureCommand_3>
}
 8001bb8:	bd08      	pop	{r3, pc}
 8001bba:	bf00      	nop
 8001bbc:	20005098 	.word	0x20005098

08001bc0 <IMU_setFeatureCommand_2>:
{
 8001bc0:	b508      	push	{r3, lr}
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f7ff ffca 	bl	8001b5c <IMU_setFeatureCommand_3>
}
 8001bc8:	bd08      	pop	{r3, pc}

08001bca <IMU_enableRotationVector>:
{
 8001bca:	b508      	push	{r3, lr}
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8001bcc:	4601      	mov	r1, r0
 8001bce:	2005      	movs	r0, #5
 8001bd0:	f7ff fff6 	bl	8001bc0 <IMU_setFeatureCommand_2>
}
 8001bd4:	bd08      	pop	{r3, pc}

08001bd6 <LpTimerCb>:
  /**
   * Nothing to be done
   */

  return;
}
 8001bd6:	4770      	bx	lr

08001bd8 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 8001bd8:	b510      	push	{r4, lr}
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 8001bda:	f241 03c6 	movw	r3, #4294	; 0x10c6
 8001bde:	4298      	cmp	r0, r3
 8001be0:	d90f      	bls.n	8001c02 <LpTimerStart+0x2a>
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
  }
  else if(time_to_sleep <= 0x418937)
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <LpTimerStart+0x68>)
 8001be4:	4298      	cmp	r0, r3
 8001be6:	d91c      	bls.n	8001c22 <LpTimerStart+0x4a>
      time_to_sleep = (~0); /* Max value */
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8001be8:	0981      	lsrs	r1, r0, #6
 8001bea:	4816      	ldr	r0, [pc, #88]	; (8001c44 <LpTimerStart+0x6c>)
 8001bec:	fba0 3101 	umull	r3, r1, r0, r1
 8001bf0:	0949      	lsrs	r1, r1, #5
    if(time_to_sleep <= 0x10C6)
 8001bf2:	f241 03c6 	movw	r3, #4294	; 0x10c6
 8001bf6:	4299      	cmp	r1, r3
 8001bf8:	d81f      	bhi.n	8001c3a <LpTimerStart+0x62>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <LpTimerStart+0x70>)
 8001bfc:	fb03 f101 	mul.w	r1, r3, r1
 8001c00:	e007      	b.n	8001c12 <LpTimerStart+0x3a>
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8001c02:	4911      	ldr	r1, [pc, #68]	; (8001c48 <LpTimerStart+0x70>)
 8001c04:	fb01 f100 	mul.w	r1, r1, r0
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8001c08:	0989      	lsrs	r1, r1, #6
 8001c0a:	480e      	ldr	r0, [pc, #56]	; (8001c44 <LpTimerStart+0x6c>)
 8001c0c:	fba0 3101 	umull	r3, r1, r0, r1
 8001c10:	0949      	lsrs	r1, r1, #5
    {
      time_to_sleep = (~0); /* Max value */
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 8001c12:	4c0e      	ldr	r4, [pc, #56]	; (8001c4c <LpTimerStart+0x74>)
 8001c14:	7920      	ldrb	r0, [r4, #4]
 8001c16:	f000 fe41 	bl	800289c <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 8001c1a:	f000 fe8d 	bl	8002938 <HW_TS_RTC_ReadLeftTicksToCount>
 8001c1e:	6020      	str	r0, [r4, #0]

  return;
}
 8001c20:	bd10      	pop	{r4, pc}
    time_to_sleep = (time_to_sleep * 1000);
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fb03 f100 	mul.w	r1, r3, r0
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8001c2a:	0989      	lsrs	r1, r1, #6
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <LpTimerStart+0x6c>)
 8001c2e:	fba0 2101 	umull	r2, r1, r0, r1
 8001c32:	0949      	lsrs	r1, r1, #5
      time_to_sleep = (time_to_sleep * 1000);
 8001c34:	fb03 f101 	mul.w	r1, r3, r1
 8001c38:	e7eb      	b.n	8001c12 <LpTimerStart+0x3a>
      time_to_sleep = (~0); /* Max value */
 8001c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3e:	e7e8      	b.n	8001c12 <LpTimerStart+0x3a>
 8001c40:	00418937 	.word	0x00418937
 8001c44:	0113094d 	.word	0x0113094d
 8001c48:	000f4240 	.word	0x000f4240
 8001c4c:	20000a0c 	.word	0x20000a0c

08001c50 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 8001c50:	b538      	push	{r3, r4, r5, lr}
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 8001c52:	4d09      	ldr	r5, [pc, #36]	; (8001c78 <LpGetElapsedTime+0x28>)
 8001c54:	682c      	ldr	r4, [r5, #0]
 8001c56:	f000 fe6f 	bl	8002938 <HW_TS_RTC_ReadLeftTicksToCount>
 8001c5a:	1a20      	subs	r0, r4, r0
  return_value = return_value / (1000 * 1000);
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <LpGetElapsedTime+0x2c>)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	4907      	ldr	r1, [pc, #28]	; (8001c80 <LpGetElapsedTime+0x30>)
 8001c62:	fba0 0101 	umull	r0, r1, r0, r1
 8001c66:	f7fe ff51 	bl	8000b0c <__aeabi_uldivmod>
 8001c6a:	4604      	mov	r4, r0
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 8001c6c:	7928      	ldrb	r0, [r5, #4]
 8001c6e:	f000 fdb1 	bl	80027d4 <HW_TS_Stop>

  return (uint32_t)return_value;
}
 8001c72:	4620      	mov	r0, r4
 8001c74:	bd38      	pop	{r3, r4, r5, pc}
 8001c76:	bf00      	nop
 8001c78:	20000a0c 	.word	0x20000a0c
 8001c7c:	000f4240 	.word	0x000f4240
 8001c80:	00077240 	.word	0x00077240

08001c84 <LpTimerInit>:
{
 8001c84:	b508      	push	{r3, lr}
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8001c86:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <LpTimerInit+0x10>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4903      	ldr	r1, [pc, #12]	; (8001c98 <LpTimerInit+0x14>)
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	f000 fd6f 	bl	8002770 <HW_TS_Create>
}
 8001c92:	bd08      	pop	{r3, pc}
 8001c94:	08001bd7 	.word	0x08001bd7
 8001c98:	20000a10 	.word	0x20000a10

08001c9c <vPortSuppressTicksAndSleep>:
{
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	4604      	mov	r4, r0
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8001ca0:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <vPortSuppressTicksAndSleep+0x68>)
 8001ca2:	6813      	ldr	r3, [r2, #0]
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001caa:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8001cb4:	f009 feac 	bl	800ba10 <eTaskConfirmSleepModeStatus>
 8001cb8:	b1a0      	cbz	r0, 8001ce4 <vPortSuppressTicksAndSleep+0x48>
    if (xExpectedIdleTime != (~0))
 8001cba:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001cbe:	d118      	bne.n	8001cf2 <vPortSuppressTicksAndSleep+0x56>
    if (xExpectedIdleTime != (~0))
 8001cc0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001cc4:	d119      	bne.n	8001cfa <vPortSuppressTicksAndSleep+0x5e>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <vPortSuppressTicksAndSleep+0x6c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <vPortSuppressTicksAndSleep+0x68>)
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <vPortSuppressTicksAndSleep+0x70>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	3204      	adds	r2, #4
 8001cde:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ce0:	b662      	cpsie	i
}
 8001ce2:	bd10      	pop	{r4, pc}
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <vPortSuppressTicksAndSleep+0x68>)
 8001ce6:	6813      	ldr	r3, [r2, #0]
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	b662      	cpsie	i
 8001cf0:	e7f7      	b.n	8001ce2 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f7ff ff70 	bl	8001bd8 <LpTimerStart>
 8001cf8:	e7e2      	b.n	8001cc0 <vPortSuppressTicksAndSleep+0x24>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8001cfa:	f7ff ffa9 	bl	8001c50 <LpGetElapsedTime>
      vTaskStepTick( ulCompleteTickPeriods );
 8001cfe:	f009 fbef 	bl	800b4e0 <vTaskStepTick>
 8001d02:	e7e0      	b.n	8001cc6 <vPortSuppressTicksAndSleep+0x2a>
 8001d04:	e000e010 	.word	0xe000e010
 8001d08:	e000e018 	.word	0xe000e018
 8001d0c:	20000a14 	.word	0x20000a14

08001d10 <vPortSetupTimerInterrupt>:
{
 8001d10:	b510      	push	{r4, lr}
  LpTimerInit( );
 8001d12:	f7ff ffb7 	bl	8001c84 <LpTimerInit>
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <vPortSetupTimerInterrupt+0x34>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	490b      	ldr	r1, [pc, #44]	; (8001d48 <vPortSetupTimerInterrupt+0x38>)
 8001d1c:	fba1 0202 	umull	r0, r2, r1, r2
 8001d20:	0992      	lsrs	r2, r2, #6
 8001d22:	480a      	ldr	r0, [pc, #40]	; (8001d4c <vPortSetupTimerInterrupt+0x3c>)
 8001d24:	6002      	str	r2, [r0, #0]
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <vPortSetupTimerInterrupt+0x40>)
 8001d28:	2000      	movs	r0, #0
 8001d2a:	6010      	str	r0, [r2, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001d2c:	4c09      	ldr	r4, [pc, #36]	; (8001d54 <vPortSetupTimerInterrupt+0x44>)
 8001d2e:	6020      	str	r0, [r4, #0]
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	fba1 1303 	umull	r1, r3, r1, r3
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	4907      	ldr	r1, [pc, #28]	; (8001d58 <vPortSetupTimerInterrupt+0x48>)
 8001d3c:	600b      	str	r3, [r1, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001d3e:	2307      	movs	r3, #7
 8001d40:	6013      	str	r3, [r2, #0]
}
 8001d42:	bd10      	pop	{r4, pc}
 8001d44:	20000018 	.word	0x20000018
 8001d48:	10624dd3 	.word	0x10624dd3
 8001d4c:	20000a14 	.word	0x20000a14
 8001d50:	e000e010 	.word	0xe000e010
 8001d54:	e000e018 	.word	0xe000e018
 8001d58:	e000e014 	.word	0xe000e014

08001d5c <_GeometryBuilder>:
#include <math.h>
#include <assert.h>
#include <arm_math.h>
//#include "UART_Print.h"

void _GeometryBuilder(GeometryBuilder *self){
 8001d5c:	b4f0      	push	{r4, r5, r6, r7}
 8001d5e:	b09c      	sub	sp, #112	; 0x70
 8001d60:	4607      	mov	r7, r0
	BaseStationGeometryDef bs_0 = {{0.682646, 1.712605, 0.298152},
 8001d62:	4c1c      	ldr	r4, [pc, #112]	; (8001dd4 <_GeometryBuilder+0x78>)
 8001d64:	ad10      	add	r5, sp, #64	; 0x40
 8001d66:	4626      	mov	r6, r4
 8001d68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d70:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d74:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			  	  	  	  	  	  {0.356806, -0.017381, 0.934017, 0.001791, 0.999838, 0.017922, -0.934177, -0.004722, 0.356779}};

	BaseStationGeometryDef bs_1 = {{0.780941, 2.300994, -0.204002},
 8001d78:	ad04      	add	r5, sp, #16
 8001d7a:	3430      	adds	r4, #48	; 0x30
 8001d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d88:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  	  	  	  	  	  	  	  {-0.184830, -0.411017, 0.892694, 0.104180, 0.895032, 0.433664, -0.977233, 0.173155, -0.122609}};
	SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};
 8001d8c:	466e      	mov	r6, sp
 8001d8e:	2300      	movs	r3, #0
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	6073      	str	r3, [r6, #4]
 8001d94:	60b3      	str	r3, [r6, #8]
 8001d96:	60f3      	str	r3, [r6, #12]

	self->base_stations_[0] = bs_0;
 8001d98:	463c      	mov	r4, r7
 8001d9a:	ad10      	add	r5, sp, #64	; 0x40
 8001d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 8001dac:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001db0:	ad04      	add	r5, sp, #16
 8001db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 8001dc2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001dc6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001dce:	b01c      	add	sp, #112	; 0x70
 8001dd0:	bcf0      	pop	{r4, r5, r6, r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	0800f528 	.word	0x0800f528

08001dd8 <vec_cross_product>:
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
    res[0] = a[1] * b[2] - a[2] * b[1];
 8001dd8:	edd0 7a01 	vldr	s15, [r0, #4]
 8001ddc:	ed91 7a02 	vldr	s14, [r1, #8]
 8001de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de4:	ed90 7a02 	vldr	s14, [r0, #8]
 8001de8:	edd1 6a01 	vldr	s13, [r1, #4]
 8001dec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001df0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001df4:	edc2 7a00 	vstr	s15, [r2]
    res[1] = a[2] * b[0] - a[0] * b[2];
 8001df8:	edd0 7a02 	vldr	s15, [r0, #8]
 8001dfc:	ed91 7a00 	vldr	s14, [r1]
 8001e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e04:	ed90 7a00 	vldr	s14, [r0]
 8001e08:	edd1 6a02 	vldr	s13, [r1, #8]
 8001e0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001e10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e14:	edc2 7a01 	vstr	s15, [r2, #4]
    res[2] = a[0] * b[1] - a[1] * b[0];
 8001e18:	edd0 7a00 	vldr	s15, [r0]
 8001e1c:	ed91 7a01 	vldr	s14, [r1, #4]
 8001e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e24:	ed90 7a01 	vldr	s14, [r0, #4]
 8001e28:	edd1 6a00 	vldr	s13, [r1]
 8001e2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001e30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e34:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8001e38:	4770      	bx	lr
	...

08001e3c <vec_length>:

float vec_length(float *vec) {
 8001e3c:	b500      	push	{lr}
 8001e3e:	b083      	sub	sp, #12
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 8001e40:	aa01      	add	r2, sp, #4
 8001e42:	2103      	movs	r1, #3
 8001e44:	f00b ffb8 	bl	800ddb8 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 8001e48:	ed9d 0a01 	vldr	s0, [sp, #4]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001e4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	db04      	blt.n	8001e60 <vec_length+0x24>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001e56:	f00c fc23 	bl	800e6a0 <sqrtf>

    return res;
}
 8001e5a:	b003      	add	sp, #12
 8001e5c:	f85d fb04 	ldr.w	pc, [sp], #4

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001e60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8001e68 <vec_length+0x2c>
    return res;
 8001e64:	e7f9      	b.n	8001e5a <vec_length+0x1e>
 8001e66:	bf00      	nop
 8001e68:	00000000 	.word	0x00000000

08001e6c <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 8001e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e70:	ed2d 8b02 	vpush	{d8}
 8001e74:	b093      	sub	sp, #76	; 0x4c
 8001e76:	4607      	mov	r7, r0
 8001e78:	eef0 8a40 	vmov.f32	s17, s0
 8001e7c:	eeb0 8a60 	vmov.f32	s16, s1
 8001e80:	4689      	mov	r9, r1
 8001e82:	4690      	mov	r8, r2
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 8001e84:	f00c f8c4 	bl	800e010 <arm_cos_f32>
 8001e88:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
 8001e8c:	2400      	movs	r4, #0
 8001e8e:	9410      	str	r4, [sp, #64]	; 0x40
 8001e90:	eeb0 0a68 	vmov.f32	s0, s17
 8001e94:	f00c f876 	bl	800df84 <arm_sin_f32>
 8001e98:	eeb1 0a40 	vneg.f32	s0, s0
 8001e9c:	ed8d 0a11 	vstr	s0, [sp, #68]	; 0x44
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 8001ea0:	940c      	str	r4, [sp, #48]	; 0x30
 8001ea2:	eeb0 0a48 	vmov.f32	s0, s16
 8001ea6:	f00c f8b3 	bl	800e010 <arm_cos_f32>
 8001eaa:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8001eae:	eeb0 0a48 	vmov.f32	s0, s16
 8001eb2:	f00c f867 	bl	800df84 <arm_sin_f32>
 8001eb6:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38

    float ray[VEC3D_SIZE] = {};
 8001eba:	ac09      	add	r4, sp, #36	; 0x24
 8001ebc:	2500      	movs	r5, #0
 8001ebe:	9509      	str	r5, [sp, #36]	; 0x24
 8001ec0:	950a      	str	r5, [sp, #40]	; 0x28
 8001ec2:	950b      	str	r5, [sp, #44]	; 0x2c
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 8001ec4:	4622      	mov	r2, r4
 8001ec6:	a90f      	add	r1, sp, #60	; 0x3c
 8001ec8:	a80c      	add	r0, sp, #48	; 0x30
 8001eca:	f7ff ff85 	bl	8001dd8 <vec_cross_product>
    float len = vec_length(ray);
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f7ff ffb4 	bl	8001e3c <vec_length>
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001edc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f00c f939 	bl	800e158 <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 8001ee6:	2603      	movs	r6, #3
 8001ee8:	f8ad 601c 	strh.w	r6, [sp, #28]
 8001eec:	f8ad 601e 	strh.w	r6, [sp, #30]
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	9308      	str	r3, [sp, #32]
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 8001ef6:	f8ad 6014 	strh.w	r6, [sp, #20]
 8001efa:	2301      	movs	r3, #1
 8001efc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001f00:	9406      	str	r4, [sp, #24]
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 8001f02:	f8ad 600c 	strh.w	r6, [sp, #12]
 8001f06:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001f0a:	f8cd 9010 	str.w	r9, [sp, #16]
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 8001f0e:	aa03      	add	r2, sp, #12
 8001f10:	a905      	add	r1, sp, #20
 8001f12:	a807      	add	r0, sp, #28
 8001f14:	f00b ff96 	bl	800de44 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 8001f18:	9500      	str	r5, [sp, #0]
 8001f1a:	9501      	str	r5, [sp, #4]
 8001f1c:	9502      	str	r5, [sp, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 8001f1e:	4633      	mov	r3, r6
 8001f20:	4642      	mov	r2, r8
 8001f22:	4669      	mov	r1, sp
 8001f24:	4638      	mov	r0, r7
 8001f26:	f00c f9b3 	bl	800e290 <arm_add_f32>
}
 8001f2a:	b013      	add	sp, #76	; 0x4c
 8001f2c:	ecbd 8b02 	vpop	{d8}
 8001f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001f34 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 8001f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f38:	ed2d 8b02 	vpush	{d8}
 8001f3c:	b092      	sub	sp, #72	; 0x48
 8001f3e:	4680      	mov	r8, r0
 8001f40:	460d      	mov	r5, r1
 8001f42:	4617      	mov	r7, r2
 8001f44:	461c      	mov	r4, r3
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 8001f46:	2300      	movs	r3, #0
 8001f48:	930f      	str	r3, [sp, #60]	; 0x3c
 8001f4a:	9310      	str	r3, [sp, #64]	; 0x40
 8001f4c:	9311      	str	r3, [sp, #68]	; 0x44
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 8001f4e:	2303      	movs	r3, #3
 8001f50:	aa0f      	add	r2, sp, #60	; 0x3c
 8001f52:	4639      	mov	r1, r7
 8001f54:	f00c f8a6 	bl	800e0a4 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8001f58:	ab0e      	add	r3, sp, #56	; 0x38
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f00c f93e 	bl	800e1e0 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 8001f64:	ab0d      	add	r3, sp, #52	; 0x34
 8001f66:	2203      	movs	r2, #3
 8001f68:	4621      	mov	r1, r4
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f00c f938 	bl	800e1e0 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 8001f70:	ab0c      	add	r3, sp, #48	; 0x30
 8001f72:	2203      	movs	r2, #3
 8001f74:	4621      	mov	r1, r4
 8001f76:	4620      	mov	r0, r4
 8001f78:	f00c f932 	bl	800e1e0 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 8001f7c:	ab0b      	add	r3, sp, #44	; 0x2c
 8001f7e:	2203      	movs	r2, #3
 8001f80:	a90f      	add	r1, sp, #60	; 0x3c
 8001f82:	4628      	mov	r0, r5
 8001f84:	f00c f92c 	bl	800e1e0 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 8001f88:	ab0a      	add	r3, sp, #40	; 0x28
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	a90f      	add	r1, sp, #60	; 0x3c
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f00c f926 	bl	800e1e0 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 8001f94:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8001f98:	ed9d 8a0e 	vldr	s16, [sp, #56]	; 0x38
 8001f9c:	ee27 8a88 	vmul.f32	s16, s15, s16
 8001fa0:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8001fa4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8001fa8:	ee38 8a47 	vsub.f32	s16, s16, s14
    if (fabs(denom) < 1e-5f)
 8001fac:	eef0 6ac8 	vabs.f32	s13, s16
 8001fb0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002078 <intersect_lines+0x144>
 8001fb4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	d505      	bpl.n	8001fca <intersect_lines+0x96>
        return 0;
 8001fbe:	2000      	movs	r0, #0
    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
    *dist = vec_length(tmp);

    return 1;
}
 8001fc0:	b012      	add	sp, #72	; 0x48
 8001fc2:	ecbd 8b02 	vpop	{d8}
 8001fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    float t1 = (b * e - c * d) / denom;
 8001fca:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8001fce:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001fd2:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8001fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fda:	ee30 0a67 	vsub.f32	s0, s0, s15
    float pt1[VEC3D_SIZE] = {};
 8001fde:	2600      	movs	r6, #0
 8001fe0:	9607      	str	r6, [sp, #28]
 8001fe2:	9608      	str	r6, [sp, #32]
 8001fe4:	9609      	str	r6, [sp, #36]	; 0x24
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	a907      	add	r1, sp, #28
 8001fea:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8001fee:	4628      	mov	r0, r5
 8001ff0:	f00c f8b2 	bl	800e158 <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	aa07      	add	r2, sp, #28
 8001ff8:	4641      	mov	r1, r8
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f00c f948 	bl	800e290 <arm_add_f32>
    float t2 = (a * e - b * d) / denom;
 8002000:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
 8002004:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8002008:	ee20 0a27 	vmul.f32	s0, s0, s15
 800200c:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8002010:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8002014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002018:	ee30 0a67 	vsub.f32	s0, s0, s15
    float pt2[VEC3D_SIZE] = {};
 800201c:	9604      	str	r6, [sp, #16]
 800201e:	9605      	str	r6, [sp, #20]
 8002020:	9606      	str	r6, [sp, #24]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8002022:	2203      	movs	r2, #3
 8002024:	a904      	add	r1, sp, #16
 8002026:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800202a:	4620      	mov	r0, r4
 800202c:	f00c f894 	bl	800e158 <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002030:	2303      	movs	r3, #3
 8002032:	aa04      	add	r2, sp, #16
 8002034:	4639      	mov	r1, r7
 8002036:	4610      	mov	r0, r2
 8002038:	f00c f92a 	bl	800e290 <arm_add_f32>
    float tmp[VEC3D_SIZE] = {};
 800203c:	9601      	str	r6, [sp, #4]
 800203e:	9602      	str	r6, [sp, #8]
 8002040:	9603      	str	r6, [sp, #12]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002042:	2303      	movs	r3, #3
 8002044:	aa01      	add	r2, sp, #4
 8002046:	a904      	add	r1, sp, #16
 8002048:	a807      	add	r0, sp, #28
 800204a:	f00c f921 	bl	800e290 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 800204e:	2203      	movs	r2, #3
 8002050:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002052:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002056:	a801      	add	r0, sp, #4
 8002058:	f00c f87e 	bl	800e158 <arm_scale_f32>
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 800205c:	2303      	movs	r3, #3
 800205e:	aa01      	add	r2, sp, #4
 8002060:	a904      	add	r1, sp, #16
 8002062:	a807      	add	r0, sp, #28
 8002064:	f00c f81e 	bl	800e0a4 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002068:	a801      	add	r0, sp, #4
 800206a:	f7ff fee7 	bl	8001e3c <vec_length>
 800206e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002070:	ed83 0a00 	vstr	s0, [r3]
    return 1;
 8002074:	2001      	movs	r0, #1
 8002076:	e7a3      	b.n	8001fc0 <intersect_lines+0x8c>
 8002078:	3727c5ac 	.word	0x3727c5ac

0800207c <consume_angles>:
    if (f->fix_level >= kCycleSynced) {
 800207c:	684b      	ldr	r3, [r1, #4]
 800207e:	2bc7      	cmp	r3, #199	; 0xc7
 8002080:	dd4f      	ble.n	8002122 <consume_angles+0xa6>
void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 8002082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002084:	b08f      	sub	sp, #60	; 0x3c
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 8002086:	6e07      	ldr	r7, [r0, #96]	; 0x60
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8002088:	2300      	movs	r3, #0
        uint32_t max_stale = 0;
 800208a:	461d      	mov	r5, r3
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 800208c:	e00a      	b.n	80020a4 <consume_angles+0x28>
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 800208e:	688a      	ldr	r2, [r1, #8]
 8002090:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
 8002094:	3408      	adds	r4, #8
 8002096:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
 800209a:	1b92      	subs	r2, r2, r6
        	max_stale = (stale > max_stale) ? stale : max_stale;
 800209c:	4295      	cmp	r5, r2
 800209e:	bf38      	it	cc
 80020a0:	4615      	movcc	r5, r2
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80020a2:	3301      	adds	r3, #1
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	ddf2      	ble.n	800208e <consume_angles+0x12>
        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 80020a8:	2d0b      	cmp	r5, #11
 80020aa:	d901      	bls.n	80020b0 <consume_angles+0x34>
}
 80020ac:	b00f      	add	sp, #60	; 0x3c
 80020ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b0:	4605      	mov	r5, r0
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 80020b2:	eb01 1747 	add.w	r7, r1, r7, lsl #5
 80020b6:	aa08      	add	r2, sp, #32
 80020b8:	a902      	add	r1, sp, #8
 80020ba:	edd7 0a05 	vldr	s1, [r7, #20]
 80020be:	ed97 0a04 	vldr	s0, [r7, #16]
 80020c2:	f7ff fed3 	bl	8001e6c <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 80020c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80020c8:	a905      	add	r1, sp, #20
 80020ca:	edd7 0a07 	vldr	s1, [r7, #28]
 80020ce:	ed97 0a06 	vldr	s0, [r7, #24]
 80020d2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80020d6:	f7ff fec9 	bl	8001e6c <calc_ray_vec>
            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 80020da:	f105 0370 	add.w	r3, r5, #112	; 0x70
 80020de:	f105 027c 	add.w	r2, r5, #124	; 0x7c
 80020e2:	9201      	str	r2, [sp, #4]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	ab05      	add	r3, sp, #20
 80020e8:	aa0b      	add	r2, sp, #44	; 0x2c
 80020ea:	a902      	add	r1, sp, #8
 80020ec:	a808      	add	r0, sp, #32
 80020ee:	f7ff ff21 	bl	8001f34 <intersect_lines>
            for (int i = 0; i < VEC3D_SIZE; i++){
 80020f2:	2300      	movs	r3, #0
 80020f4:	e00e      	b.n	8002114 <consume_angles+0x98>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 80020f6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80020fa:	ed92 7a19 	vldr	s14, [r2, #100]	; 0x64
 80020fe:	f103 021c 	add.w	r2, r3, #28
 8002102:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002106:	edd2 7a00 	vldr	s15, [r2]
 800210a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800210e:	edc2 7a00 	vstr	s15, [r2]
            for (int i = 0; i < VEC3D_SIZE; i++){
 8002112:	3301      	adds	r3, #1
 8002114:	2b02      	cmp	r3, #2
 8002116:	ddee      	ble.n	80020f6 <consume_angles+0x7a>
            self->vive_vars_.time_ms = HAL_GetTick();
 8002118:	f001 fdc4 	bl	8003ca4 <HAL_GetTick>
 800211c:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
}
 8002120:	e7c4      	b.n	80020ac <consume_angles+0x30>
 8002122:	4770      	bx	lr

08002124 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002126:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	2400      	movs	r4, #0
 800212a:	9407      	str	r4, [sp, #28]
 800212c:	9408      	str	r4, [sp, #32]
 800212e:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002134:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002136:	f042 0204 	orr.w	r2, r2, #4
 800213a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800213c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800213e:	f002 0204 	and.w	r2, r2, #4
 8002142:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8002144:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002148:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800214c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800214e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002150:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002154:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8002156:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002158:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800215a:	f042 0202 	orr.w	r2, r2, #2
 800215e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002162:	f002 0202 	and.w	r2, r2, #2
 8002166:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002168:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800216a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002174:	f002 0201 	and.w	r2, r2, #1
 8002178:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800217a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800217c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800217e:	f042 0210 	orr.w	r2, r2, #16
 8002182:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800218c:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800218e:	2608      	movs	r6, #8
 8002190:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002192:	2503      	movs	r5, #3
 8002194:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002196:	a905      	add	r1, sp, #20
 8002198:	4822      	ldr	r0, [pc, #136]	; (8002224 <MX_GPIO_Init+0x100>)
 800219a:	f002 fe6d 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 800219e:	f240 3333 	movw	r3, #819	; 0x333
 80021a2:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	4f1f      	ldr	r7, [pc, #124]	; (8002228 <MX_GPIO_Init+0x104>)
 80021aa:	a905      	add	r1, sp, #20
 80021ac:	4638      	mov	r0, r7
 80021ae:	f002 fe63 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 80021b2:	f649 13dc 	movw	r3, #39388	; 0x99dc
 80021b6:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	a905      	add	r1, sp, #20
 80021be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c2:	f002 fe59 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80021c6:	2320      	movs	r3, #32
 80021c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <MX_GPIO_Init+0x108>)
 80021cc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ce:	2301      	movs	r3, #1
 80021d0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80021d2:	a905      	add	r1, sp, #20
 80021d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d8:	f002 fe4e 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 80021dc:	2304      	movs	r3, #4
 80021de:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <MX_GPIO_Init+0x10c>)
 80021e2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 80021e6:	a905      	add	r1, sp, #20
 80021e8:	4638      	mov	r0, r7
 80021ea:	f002 fe45 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021ee:	2310      	movs	r3, #16
 80021f0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f6:	a905      	add	r1, sp, #20
 80021f8:	480e      	ldr	r0, [pc, #56]	; (8002234 <MX_GPIO_Init+0x110>)
 80021fa:	f002 fe3d 	bl	8004e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80021fe:	4622      	mov	r2, r4
 8002200:	2105      	movs	r1, #5
 8002202:	4630      	mov	r0, r6
 8002204:	f002 fbca 	bl	800499c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002208:	4630      	mov	r0, r6
 800220a:	f002 fbfb 	bl	8004a04 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800220e:	4622      	mov	r2, r4
 8002210:	2105      	movs	r1, #5
 8002212:	2017      	movs	r0, #23
 8002214:	f002 fbc2 	bl	800499c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002218:	2017      	movs	r0, #23
 800221a:	f002 fbf3 	bl	8004a04 <HAL_NVIC_EnableIRQ>

}
 800221e:	b00b      	add	sp, #44	; 0x2c
 8002220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002222:	bf00      	nop
 8002224:	48001c00 	.word	0x48001c00
 8002228:	48000400 	.word	0x48000400
 800222c:	10210000 	.word	0x10210000
 8002230:	10110000 	.word	0x10110000
 8002234:	48001000 	.word	0x48001000

08002238 <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002238:	4a06      	ldr	r2, [pc, #24]	; (8002254 <ReadRtcSsrValue+0x1c>)
 800223a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800223c:	b29b      	uxth	r3, r3

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800223e:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002240:	b280      	uxth	r0, r0

  while(first_read != second_read)
 8002242:	e003      	b.n	800224c <ReadRtcSsrValue+0x14>
  {
    first_read = second_read;

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <ReadRtcSsrValue+0x1c>)
 8002246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    first_read = second_read;
 8002248:	4603      	mov	r3, r0
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800224a:	b290      	uxth	r0, r2
  while(first_read != second_read)
 800224c:	4283      	cmp	r3, r0
 800224e:	d1f9      	bne.n	8002244 <ReadRtcSsrValue+0xc>
  }

  return second_read;
}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40002800 	.word	0x40002800

08002258 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002258:	b470      	push	{r4, r5, r6}
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800225a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800225e:	00da      	lsls	r2, r3, #3
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <LinkTimerAfter+0x3c>)
 8002262:	4413      	add	r3, r2
 8002264:	7d5b      	ldrb	r3, [r3, #21]
 8002266:	b2db      	uxtb	r3, r3

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002268:	2b06      	cmp	r3, #6
 800226a:	d005      	beq.n	8002278 <LinkTimerAfter+0x20>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800226c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002270:	00d4      	lsls	r4, r2, #3
 8002272:	4a08      	ldr	r2, [pc, #32]	; (8002294 <LinkTimerAfter+0x3c>)
 8002274:	4422      	add	r2, r4
 8002276:	7510      	strb	r0, [r2, #20]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002278:	4a06      	ldr	r2, [pc, #24]	; (8002294 <LinkTimerAfter+0x3c>)
 800227a:	0044      	lsls	r4, r0, #1
 800227c:	1826      	adds	r6, r4, r0
 800227e:	00f5      	lsls	r5, r6, #3
 8002280:	4415      	add	r5, r2
 8002282:	756b      	strb	r3, [r5, #21]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002284:	7529      	strb	r1, [r5, #20]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002286:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800228a:	00cb      	lsls	r3, r1, #3
 800228c:	441a      	add	r2, r3
 800228e:	7550      	strb	r0, [r2, #21]

  return;
}
 8002290:	bc70      	pop	{r4, r5, r6}
 8002292:	4770      	bx	lr
 8002294:	200000d8 	.word	0x200000d8

08002298 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002298:	b4f0      	push	{r4, r5, r6, r7}
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <LinkTimerBefore+0x5c>)
 800229c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	428b      	cmp	r3, r1
 80022a4:	d01a      	beq.n	80022dc <LinkTimerBefore+0x44>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <LinkTimerBefore+0x5c>)
 80022a8:	004a      	lsls	r2, r1, #1
 80022aa:	1855      	adds	r5, r2, r1
 80022ac:	00ec      	lsls	r4, r5, #3
 80022ae:	441c      	add	r4, r3
 80022b0:	7d24      	ldrb	r4, [r4, #20]
 80022b2:	b2e4      	uxtb	r4, r4

    aTimerContext[previous_id].NextID = TimerID;
 80022b4:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80022b8:	00f5      	lsls	r5, r6, #3
 80022ba:	441d      	add	r5, r3
 80022bc:	7568      	strb	r0, [r5, #21]
    aTimerContext[TimerID].NextID = RefTimerID;
 80022be:	0045      	lsls	r5, r0, #1
 80022c0:	182f      	adds	r7, r5, r0
 80022c2:	00fe      	lsls	r6, r7, #3
 80022c4:	4637      	mov	r7, r6
 80022c6:	441e      	add	r6, r3
 80022c8:	7571      	strb	r1, [r6, #21]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80022ca:	463e      	mov	r6, r7
 80022cc:	441e      	add	r6, r3
 80022ce:	7534      	strb	r4, [r6, #20]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80022d0:	4411      	add	r1, r2
 80022d2:	00ca      	lsls	r2, r1, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	7518      	strb	r0, [r3, #20]
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
}
 80022d8:	bcf0      	pop	{r4, r5, r6, r7}
 80022da:	4770      	bx	lr
    aTimerContext[TimerID].NextID = RefTimerID;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <LinkTimerBefore+0x5c>)
 80022de:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 80022e2:	00e2      	lsls	r2, r4, #3
 80022e4:	441a      	add	r2, r3
 80022e6:	7551      	strb	r1, [r2, #21]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80022e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80022ec:	00ca      	lsls	r2, r1, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	7518      	strb	r0, [r3, #20]
  return;
 80022f2:	e7f1      	b.n	80022d8 <LinkTimerBefore+0x40>
 80022f4:	200000d8 	.word	0x200000d8

080022f8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80022f8:	b470      	push	{r4, r5, r6}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <UnlinkTimer+0x94>)
 80022fc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4283      	cmp	r3, r0
 8002304:	d02a      	beq.n	800235c <UnlinkTimer+0x64>
    PreviousRunningTimerID = CurrentRunningTimerID;
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002306:	4d21      	ldr	r5, [pc, #132]	; (800238c <UnlinkTimer+0x94>)
 8002308:	0043      	lsls	r3, r0, #1
 800230a:	4403      	add	r3, r0
 800230c:	00da      	lsls	r2, r3, #3
 800230e:	442a      	add	r2, r5
 8002310:	7d14      	ldrb	r4, [r2, #20]
    next_id = aTimerContext[TimerID].NextID;
 8002312:	7d53      	ldrb	r3, [r2, #21]
 8002314:	b2db      	uxtb	r3, r3

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002316:	7d56      	ldrb	r6, [r2, #21]
 8002318:	b2f6      	uxtb	r6, r6
 800231a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800231e:	00d4      	lsls	r4, r2, #3
 8002320:	4425      	add	r5, r4
 8002322:	756e      	strb	r6, [r5, #21]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002324:	2b06      	cmp	r3, #6
 8002326:	d00b      	beq.n	8002340 <UnlinkTimer+0x48>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002328:	4a18      	ldr	r2, [pc, #96]	; (800238c <UnlinkTimer+0x94>)
 800232a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 800232e:	00ec      	lsls	r4, r5, #3
 8002330:	4414      	add	r4, r2
 8002332:	7d24      	ldrb	r4, [r4, #20]
 8002334:	b2e4      	uxtb	r4, r4
 8002336:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800233a:	00dd      	lsls	r5, r3, #3
 800233c:	442a      	add	r2, r5
 800233e:	7514      	strb	r4, [r2, #20]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002340:	4a12      	ldr	r2, [pc, #72]	; (800238c <UnlinkTimer+0x94>)
 8002342:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002346:	00c3      	lsls	r3, r0, #3
 8002348:	4413      	add	r3, r2
 800234a:	2001      	movs	r0, #1
 800234c:	7318      	strb	r0, [r3, #12]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800234e:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b06      	cmp	r3, #6
 8002356:	d010      	beq.n	800237a <UnlinkTimer+0x82>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
  }

  return;
}
 8002358:	bc70      	pop	{r4, r5, r6}
 800235a:	4770      	bx	lr
    PreviousRunningTimerID = CurrentRunningTimerID;
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <UnlinkTimer+0x94>)
 800235e:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002368:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 800236c:	00e2      	lsls	r2, r4, #3
 800236e:	441a      	add	r2, r3
 8002370:	7d52      	ldrb	r2, [r2, #21]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8002378:	e7e2      	b.n	8002340 <UnlinkTimer+0x48>
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800237a:	2900      	cmp	r1, #0
 800237c:	d1ec      	bne.n	8002358 <UnlinkTimer+0x60>
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800237e:	4613      	mov	r3, r2
 8002380:	f04f 32ff 	mov.w	r2, #4294967295
 8002384:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return;
 8002388:	e7e6      	b.n	8002358 <UnlinkTimer+0x60>
 800238a:	bf00      	nop
 800238c:	200000d8 	.word	0x200000d8

08002390 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002390:	b508      	push	{r3, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <ReturnTimeElapsed+0x4c>)
 8002394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d01b      	beq.n	80023d6 <ReturnTimeElapsed+0x46>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800239e:	f7ff ff4b 	bl	8002238 <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <ReturnTimeElapsed+0x4c>)
 80023a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a8:	4283      	cmp	r3, r0
 80023aa:	d30c      	bcc.n	80023c6 <ReturnTimeElapsed+0x36>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <ReturnTimeElapsed+0x4c>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b2:	1a18      	subs	r0, r3, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <ReturnTimeElapsed+0x50>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	fb00 f003 	mul.w	r0, r0, r3
    return_value = return_value >> WakeupTimerDivider;
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <ReturnTimeElapsed+0x54>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 80023c2:	b280      	uxth	r0, r0
 80023c4:	bd08      	pop	{r3, pc}
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <ReturnTimeElapsed+0x58>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	1a1b      	subs	r3, r3, r0
      return_value = SSRValueOnLastSetup + wrap_counter;
 80023cc:	4a03      	ldr	r2, [pc, #12]	; (80023dc <ReturnTimeElapsed+0x4c>)
 80023ce:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
 80023d2:	4418      	add	r0, r3
 80023d4:	e7ee      	b.n	80023b4 <ReturnTimeElapsed+0x24>
    return_value = 0;
 80023d6:	2000      	movs	r0, #0
 80023d8:	e7f3      	b.n	80023c2 <ReturnTimeElapsed+0x32>
 80023da:	bf00      	nop
 80023dc:	200000d8 	.word	0x200000d8
 80023e0:	20000a18 	.word	0x20000a18
 80023e4:	20000a1e 	.word	0x20000a1e
 80023e8:	20000a1c 	.word	0x20000a1c

080023ec <linkTimer>:
{
 80023ec:	b570      	push	{r4, r5, r6, lr}
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80023ee:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <linkTimer+0xd4>)
 80023f0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d023      	beq.n	8002442 <linkTimer+0x56>
 80023fa:	4604      	mov	r4, r0
    time_elapsed = ReturnTimeElapsed();
 80023fc:	f7ff ffc8 	bl	8002390 <ReturnTimeElapsed>
 8002400:	4605      	mov	r5, r0
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002402:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <linkTimer+0xd4>)
 8002404:	0062      	lsls	r2, r4, #1
 8002406:	1910      	adds	r0, r2, r4
 8002408:	00c1      	lsls	r1, r0, #3
 800240a:	4419      	add	r1, r3
 800240c:	6888      	ldr	r0, [r1, #8]
 800240e:	4428      	add	r0, r5
 8002410:	6088      	str	r0, [r1, #8]
    time_left = aTimerContext[TimerID].CountLeft;
 8002412:	4422      	add	r2, r4
 8002414:	00d1      	lsls	r1, r2, #3
 8002416:	4419      	add	r1, r3
 8002418:	6888      	ldr	r0, [r1, #8]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800241a:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800241e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002422:	00d1      	lsls	r1, r2, #3
 8002424:	440b      	add	r3, r1
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4283      	cmp	r3, r0
 800242a:	d83a      	bhi.n	80024a2 <linkTimer+0xb6>
      timer_id_lookup = CurrentRunningTimerID;
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <linkTimer+0xd4>)
 800242e:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 8002432:	b2c9      	uxtb	r1, r1
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002434:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8002438:	00f2      	lsls	r2, r6, #3
 800243a:	4413      	add	r3, r2
 800243c:	7d5b      	ldrb	r3, [r3, #21]
 800243e:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002440:	e021      	b.n	8002486 <linkTimer+0x9a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002442:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <linkTimer+0xd4>)
 8002444:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    CurrentRunningTimerID = TimerID;
 800244e:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002452:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002456:	00c2      	lsls	r2, r0, #3
 8002458:	441a      	add	r2, r3
 800245a:	2106      	movs	r1, #6
 800245c:	7551      	strb	r1, [r2, #21]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800245e:	f04f 32ff 	mov.w	r2, #4294967295
 8002462:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    time_elapsed = 0;
 8002466:	2500      	movs	r5, #0
}
 8002468:	4628      	mov	r0, r5
 800246a:	bd70      	pop	{r4, r5, r6, pc}
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <linkTimer+0xd4>)
 800246e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002472:	00ca      	lsls	r2, r1, #3
 8002474:	441a      	add	r2, r3
 8002476:	7d51      	ldrb	r1, [r2, #21]
 8002478:	b2c9      	uxtb	r1, r1
        next_id = aTimerContext[timer_id_lookup].NextID;
 800247a:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 800247e:	00f2      	lsls	r2, r6, #3
 8002480:	4413      	add	r3, r2
 8002482:	7d5b      	ldrb	r3, [r3, #21]
 8002484:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002486:	2b06      	cmp	r3, #6
 8002488:	d007      	beq.n	800249a <linkTimer+0xae>
 800248a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800248e:	00da      	lsls	r2, r3, #3
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <linkTimer+0xd4>)
 8002492:	4413      	add	r3, r2
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	4283      	cmp	r3, r0
 8002498:	d9e8      	bls.n	800246c <linkTimer+0x80>
      LinkTimerAfter(TimerID, timer_id_lookup);
 800249a:	4620      	mov	r0, r4
 800249c:	f7ff fedc 	bl	8002258 <LinkTimerAfter>
 80024a0:	e7e2      	b.n	8002468 <linkTimer+0x7c>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80024a2:	4e07      	ldr	r6, [pc, #28]	; (80024c0 <linkTimer+0xd4>)
 80024a4:	f896 1090 	ldrb.w	r1, [r6, #144]	; 0x90
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7ff fef5 	bl	8002298 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80024ae:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
      CurrentRunningTimerID = TimerID;
 80024b8:	f886 4090 	strb.w	r4, [r6, #144]	; 0x90
 80024bc:	e7d4      	b.n	8002468 <linkTimer+0x7c>
 80024be:	bf00      	nop
 80024c0:	200000d8 	.word	0x200000d8

080024c4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80024c4:	b510      	push	{r4, lr}
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80024c6:	b360      	cbz	r0, 8002522 <RestartWakeupCounter+0x5e>
 80024c8:	4604      	mov	r4, r0
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
  }
  else
  {
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80024ca:	2801      	cmp	r0, #1
 80024cc:	d932      	bls.n	8002534 <RestartWakeupCounter+0x70>
    {
      Value -= 1;
 80024ce:	3c01      	subs	r4, #1
 80024d0:	b2a4      	uxth	r4, r4
    }

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <RestartWakeupCounter+0x7c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	f012 0f04 	tst.w	r2, #4
 80024de:	d0f8      	beq.n	80024d2 <RestartWakeupCounter+0xe>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024e8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <RestartWakeupCounter+0x80>)
 80024ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024f0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80024f2:	2003      	movs	r0, #3
 80024f4:	f002 fac6 	bl	8004a84 <HAL_NVIC_ClearPendingIRQ>

    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80024f8:	4a13      	ldr	r2, [pc, #76]	; (8002548 <RestartWakeupCounter+0x84>)
 80024fa:	6953      	ldr	r3, [r2, #20]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	431c      	orrs	r4, r3
 8002502:	6154      	str	r4, [r2, #20]

    /**
     * Update the value here after the WUTWF polling that may take some time
     */
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002504:	f7ff fe98 	bl	8002238 <ReadRtcSsrValue>
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <RestartWakeupCounter+0x88>)
 800250a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <RestartWakeupCounter+0x7c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	6893      	ldr	r3, [r2, #8]
 8002516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251a:	6093      	str	r3, [r2, #8]

    HW_TS_RTC_CountUpdated_AppNot();
 800251c:	f3af 8000 	nop.w
  }

  return ;
}
 8002520:	bd10      	pop	{r4, pc}
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002522:	f7ff fe89 	bl	8002238 <ReadRtcSsrValue>
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <RestartWakeupCounter+0x88>)
 8002528:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800252c:	2003      	movs	r0, #3
 800252e:	f002 fa9b 	bl	8004a68 <HAL_NVIC_SetPendingIRQ>
 8002532:	e7f5      	b.n	8002520 <RestartWakeupCounter+0x5c>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <RestartWakeupCounter+0x8c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d1c8      	bne.n	80024ce <RestartWakeupCounter+0xa>
 800253c:	e7c9      	b.n	80024d2 <RestartWakeupCounter+0xe>
 800253e:	bf00      	nop
 8002540:	20000a20 	.word	0x20000a20
 8002544:	58000800 	.word	0x58000800
 8002548:	40002800 	.word	0x40002800
 800254c:	200000d8 	.word	0x200000d8
 8002550:	20000a1e 	.word	0x20000a1e

08002554 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002554:	b570      	push	{r4, r5, r6, lr}

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002556:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <RescheduleTimerList+0xc0>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800255e:	d006      	beq.n	800256e <RescheduleTimerList+0x1a>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <RescheduleTimerList+0xc4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f013 0f04 	tst.w	r3, #4
 800256c:	d1f8      	bne.n	8002560 <RescheduleTimerList+0xc>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <RescheduleTimerList+0xc4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	6893      	ldr	r3, [r2, #8]
 8002576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800257a:	6093      	str	r3, [r2, #8]

  localTimerID = CurrentRunningTimerID;
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <RescheduleTimerList+0xc8>)
 800257e:	f893 4090 	ldrb.w	r4, [r3, #144]	; 0x90
 8002582:	b2e4      	uxtb	r4, r4

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002584:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8002588:	00ca      	lsls	r2, r1, #3
 800258a:	4413      	add	r3, r2
 800258c:	689e      	ldr	r6, [r3, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800258e:	f7ff feff 	bl	8002390 <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 8002592:	4605      	mov	r5, r0
 8002594:	42b0      	cmp	r0, r6
 8002596:	d905      	bls.n	80025a4 <RescheduleTimerList+0x50>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <RescheduleTimerList+0xc8>)
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    wakeup_timer_value = 0;
 80025a0:	2000      	movs	r0, #0
 80025a2:	e023      	b.n	80025ec <RescheduleTimerList+0x98>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <RescheduleTimerList+0xcc>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	4403      	add	r3, r0
 80025aa:	42b3      	cmp	r3, r6
 80025ac:	d207      	bcs.n	80025be <RescheduleTimerList+0x6a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80025ae:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <RescheduleTimerList+0xcc>)
 80025b0:	8818      	ldrh	r0, [r3, #0]
 80025b2:	b280      	uxth	r0, r0

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80025b4:	4b19      	ldr	r3, [pc, #100]	; (800261c <RescheduleTimerList+0xc8>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80025bc:	e016      	b.n	80025ec <RescheduleTimerList+0x98>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80025be:	b2b6      	uxth	r6, r6
 80025c0:	1a30      	subs	r0, r6, r0
 80025c2:	b280      	uxth	r0, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <RescheduleTimerList+0xc8>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80025cc:	e00e      	b.n	80025ec <RescheduleTimerList+0x98>
    {
      aTimerContext[localTimerID].CountLeft = 0;
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80025ce:	0062      	lsls	r2, r4, #1
 80025d0:	4414      	add	r4, r2
 80025d2:	00e1      	lsls	r1, r4, #3
 80025d4:	4a11      	ldr	r2, [pc, #68]	; (800261c <RescheduleTimerList+0xc8>)
 80025d6:	440a      	add	r2, r1
 80025d8:	6891      	ldr	r1, [r2, #8]
 80025da:	1b49      	subs	r1, r1, r5
 80025dc:	6091      	str	r1, [r2, #8]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80025de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025e2:	00da      	lsls	r2, r3, #3
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <RescheduleTimerList+0xc8>)
 80025e6:	4413      	add	r3, r2
 80025e8:	7d5c      	ldrb	r4, [r3, #21]
 80025ea:	b2e4      	uxtb	r4, r4
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80025ec:	2c06      	cmp	r4, #6
 80025ee:	d00d      	beq.n	800260c <RescheduleTimerList+0xb8>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80025f0:	4623      	mov	r3, r4
 80025f2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80025f6:	00d1      	lsls	r1, r2, #3
 80025f8:	4a08      	ldr	r2, [pc, #32]	; (800261c <RescheduleTimerList+0xc8>)
 80025fa:	440a      	add	r2, r1
 80025fc:	6892      	ldr	r2, [r2, #8]
 80025fe:	4295      	cmp	r5, r2
 8002600:	d9e5      	bls.n	80025ce <RescheduleTimerList+0x7a>
      aTimerContext[localTimerID].CountLeft = 0;
 8002602:	4a06      	ldr	r2, [pc, #24]	; (800261c <RescheduleTimerList+0xc8>)
 8002604:	440a      	add	r2, r1
 8002606:	2100      	movs	r1, #0
 8002608:	6091      	str	r1, [r2, #8]
 800260a:	e7e8      	b.n	80025de <RescheduleTimerList+0x8a>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800260c:	f7ff ff5a 	bl	80024c4 <RestartWakeupCounter>

  return ;
}
 8002610:	bd70      	pop	{r4, r5, r6, pc}
 8002612:	bf00      	nop
 8002614:	40002800 	.word	0x40002800
 8002618:	20000a20 	.word	0x20000a20
 800261c:	200000d8 	.word	0x200000d8
 8002620:	20000a1a 	.word	0x20000a1a

08002624 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8002624:	b510      	push	{r4, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8002626:	4b4a      	ldr	r3, [pc, #296]	; (8002750 <HW_TS_Init+0x12c>)
 8002628:	6019      	str	r1, [r3, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800262a:	680b      	ldr	r3, [r1, #0]
 800262c:	22ca      	movs	r2, #202	; 0xca
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
 8002630:	680b      	ldr	r3, [r1, #0]
 8002632:	2253      	movs	r2, #83	; 0x53
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002636:	4c47      	ldr	r4, [pc, #284]	; (8002754 <HW_TS_Init+0x130>)
 8002638:	68a3      	ldr	r3, [r4, #8]
 800263a:	f043 0320 	orr.w	r3, r3, #32
 800263e:	60a3      	str	r3, [r4, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002640:	68a3      	ldr	r3, [r4, #8]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	f1c3 0304 	rsb	r3, r3, #4
 800264a:	b2d9      	uxtb	r1, r3
 800264c:	4b42      	ldr	r3, [pc, #264]	; (8002758 <HW_TS_Init+0x134>)
 800264e:	7019      	strb	r1, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002650:	6923      	ldr	r3, [r4, #16]
 8002652:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800265a:	fa92 f2a2 	rbit	r2, r2
 800265e:	fab2 f282 	clz	r2, r2
 8002662:	40d3      	lsrs	r3, r2
 8002664:	b2db      	uxtb	r3, r3
 8002666:	3301      	adds	r3, #1
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b3c      	ldr	r3, [pc, #240]	; (800275c <HW_TS_Init+0x138>)
 800266c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800266e:	6923      	ldr	r3, [r4, #16]
 8002670:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002674:	3301      	adds	r3, #1
 8002676:	4c3a      	ldr	r4, [pc, #232]	; (8002760 <HW_TS_Init+0x13c>)
 8002678:	8023      	strh	r3, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800267a:	3b01      	subs	r3, #1
 800267c:	fb03 f302 	mul.w	r3, r3, r2
 8002680:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002684:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002686:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800268a:	4293      	cmp	r3, r2
 800268c:	d91a      	bls.n	80026c4 <HW_TS_Init+0xa0>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800268e:	4b35      	ldr	r3, [pc, #212]	; (8002764 <HW_TS_Init+0x140>)
 8002690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002694:	801a      	strh	r2, [r3, #0]
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002696:	4b34      	ldr	r3, [pc, #208]	; (8002768 <HW_TS_Init+0x144>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800269e:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80026a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80026a4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80026a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d144      	bne.n	800273a <HW_TS_Init+0x116>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80026b0:	4b2e      	ldr	r3, [pc, #184]	; (800276c <HW_TS_Init+0x148>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	e00c      	b.n	80026de <HW_TS_Init+0xba>
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	4a27      	ldr	r2, [pc, #156]	; (8002764 <HW_TS_Init+0x140>)
 80026c8:	8013      	strh	r3, [r2, #0]
 80026ca:	e7e4      	b.n	8002696 <HW_TS_Init+0x72>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80026cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80026d0:	00d1      	lsls	r1, r2, #3
 80026d2:	4a26      	ldr	r2, [pc, #152]	; (800276c <HW_TS_Init+0x148>)
 80026d4:	440a      	add	r2, r1
 80026d6:	2100      	movs	r1, #0
 80026d8:	7311      	strb	r1, [r2, #12]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80026da:	3301      	adds	r3, #1
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d9f4      	bls.n	80026cc <HW_TS_Init+0xa8>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80026e2:	4b22      	ldr	r3, [pc, #136]	; (800276c <HW_TS_Init+0x148>)
 80026e4:	2206      	movs	r2, #6
 80026e6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80026ea:	4c19      	ldr	r4, [pc, #100]	; (8002750 <HW_TS_Init+0x12c>)
 80026ec:	6822      	ldr	r2, [r4, #0]
 80026ee:	6811      	ldr	r1, [r2, #0]
 80026f0:	688b      	ldr	r3, [r1, #8]
 80026f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026f6:	608b      	str	r3, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	68d3      	ldr	r3, [r2, #12]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002702:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HW_TS_Init+0x144>)
 8002706:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800270a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800270c:	2003      	movs	r0, #3
 800270e:	f002 f9b9 	bl	8004a84 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	6893      	ldr	r3, [r2, #8]
 8002718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271c:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HW_TS_Init+0x12c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	22ff      	movs	r2, #255	; 0xff
 8002726:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002728:	2200      	movs	r2, #0
 800272a:	2106      	movs	r1, #6
 800272c:	2003      	movs	r0, #3
 800272e:	f002 f935 	bl	800499c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002732:	2003      	movs	r0, #3
 8002734:	f002 f966 	bl	8004a04 <HAL_NVIC_EnableIRQ>

  return;
}
 8002738:	bd10      	pop	{r4, pc}
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HW_TS_Init+0x12c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002746:	d0ea      	beq.n	800271e <HW_TS_Init+0xfa>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002748:	2003      	movs	r0, #3
 800274a:	f002 f98d 	bl	8004a68 <HAL_NVIC_SetPendingIRQ>
 800274e:	e7e6      	b.n	800271e <HW_TS_Init+0xfa>
 8002750:	20000a20 	.word	0x20000a20
 8002754:	40002800 	.word	0x40002800
 8002758:	20000a1e 	.word	0x20000a1e
 800275c:	20000a18 	.word	0x20000a18
 8002760:	20000a1c 	.word	0x20000a1c
 8002764:	20000a1a 	.word	0x20000a1a
 8002768:	58000800 	.word	0x58000800
 800276c:	200000d8 	.word	0x200000d8

08002770 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002770:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002772:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002776:	b672      	cpsid	i
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002778:	2400      	movs	r4, #0
 800277a:	e001      	b.n	8002780 <HW_TS_Create+0x10>
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
  {
    loop++;
 800277c:	3401      	adds	r4, #1
 800277e:	b2e4      	uxtb	r4, r4
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002780:	2c05      	cmp	r4, #5
 8002782:	d807      	bhi.n	8002794 <HW_TS_Create+0x24>
 8002784:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8002788:	00ee      	lsls	r6, r5, #3
 800278a:	4d11      	ldr	r5, [pc, #68]	; (80027d0 <HW_TS_Create+0x60>)
 800278c:	4435      	add	r5, r6
 800278e:	7b2d      	ldrb	r5, [r5, #12]
 8002790:	2d00      	cmp	r5, #0
 8002792:	d1f3      	bne.n	800277c <HW_TS_Create+0xc>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002794:	2c06      	cmp	r4, #6
 8002796:	d016      	beq.n	80027c6 <HW_TS_Create+0x56>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002798:	f8df c034 	ldr.w	ip, [pc, #52]	; 80027d0 <HW_TS_Create+0x60>
 800279c:	0066      	lsls	r6, r4, #1
 800279e:	eb06 0e04 	add.w	lr, r6, r4
 80027a2:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 80027a6:	4465      	add	r5, ip
 80027a8:	f04f 0e01 	mov.w	lr, #1
 80027ac:	f885 e00c 	strb.w	lr, [r5, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b0:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80027b4:	6128      	str	r0, [r5, #16]
    aTimerContext[loop].TimerMode = TimerMode;
 80027b6:	736a      	strb	r2, [r5, #13]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80027b8:	1932      	adds	r2, r6, r4
 80027ba:	00d0      	lsls	r0, r2, #3
 80027bc:	f84c 3000 	str.w	r3, [ip, r0]
    *pTimerId = loop;
 80027c0:	700c      	strb	r4, [r1, #0]

    localreturnstatus = hw_ts_Successful;
 80027c2:	2000      	movs	r0, #0

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 80027c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c6:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 80027ca:	2001      	movs	r0, #1
 80027cc:	e7fa      	b.n	80027c4 <HW_TS_Create+0x54>
 80027ce:	bf00      	nop
 80027d0:	200000d8 	.word	0x200000d8

080027d4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80027d4:	b538      	push	{r3, r4, r5, lr}
 80027d6:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80027dc:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80027de:	2003      	movs	r0, #3
 80027e0:	f002 f91e 	bl	8004a20 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <HW_TS_Stop+0xb8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	21ca      	movs	r1, #202	; 0xca
 80027ec:	6251      	str	r1, [r2, #36]	; 0x24
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2253      	movs	r2, #83	; 0x53
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80027f4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80027f8:	00da      	lsls	r2, r3, #3
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HW_TS_Stop+0xbc>)
 80027fc:	4413      	add	r3, r2
 80027fe:	7b1b      	ldrb	r3, [r3, #12]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d00a      	beq.n	800281c <HW_TS_Stop+0x48>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <HW_TS_Stop+0xb8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	22ff      	movs	r2, #255	; 0xff
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002810:	2003      	movs	r0, #3
 8002812:	f002 f8f7 	bl	8004a04 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002816:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 800281a:	bd38      	pop	{r3, r4, r5, pc}
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800281c:	2100      	movs	r1, #0
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff fd6a 	bl	80022f8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002824:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HW_TS_Stop+0xbc>)
 8002826:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800282a:	b2db      	uxtb	r3, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800282c:	2b06      	cmp	r3, #6
 800282e:	d008      	beq.n	8002842 <HW_TS_Stop+0x6e>
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002830:	4a17      	ldr	r2, [pc, #92]	; (8002890 <HW_TS_Stop+0xbc>)
 8002832:	f892 2091 	ldrb.w	r2, [r2, #145]	; 0x91
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	429a      	cmp	r2, r3
 800283a:	d0e4      	beq.n	8002806 <HW_TS_Stop+0x32>
      RescheduleTimerList();
 800283c:	f7ff fe8a 	bl	8002554 <RescheduleTimerList>
 8002840:	e7e1      	b.n	8002806 <HW_TS_Stop+0x32>
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HW_TS_Stop+0xc0>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800284a:	d006      	beq.n	800285a <HW_TS_Stop+0x86>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HW_TS_Stop+0xb8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f013 0f04 	tst.w	r3, #4
 8002858:	d1f8      	bne.n	800284c <HW_TS_Stop+0x78>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HW_TS_Stop+0xb8>)
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	680a      	ldr	r2, [r1, #0]
 8002860:	6893      	ldr	r3, [r2, #8]
 8002862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002866:	6093      	str	r3, [r2, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002868:	680b      	ldr	r3, [r1, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	f012 0f04 	tst.w	r2, #4
 8002870:	d0fa      	beq.n	8002868 <HW_TS_Stop+0x94>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800287a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HW_TS_Stop+0xc4>)
 800287e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002882:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002884:	2003      	movs	r0, #3
 8002886:	f002 f8fd 	bl	8004a84 <HAL_NVIC_ClearPendingIRQ>
 800288a:	e7bc      	b.n	8002806 <HW_TS_Stop+0x32>
 800288c:	20000a20 	.word	0x20000a20
 8002890:	200000d8 	.word	0x200000d8
 8002894:	40002800 	.word	0x40002800
 8002898:	58000800 	.word	0x58000800

0800289c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289e:	4604      	mov	r4, r0
 80028a0:	460f      	mov	r7, r1

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80028a2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80028a6:	00da      	lsls	r2, r3, #3
 80028a8:	4b21      	ldr	r3, [pc, #132]	; (8002930 <HW_TS_Start+0x94>)
 80028aa:	4413      	add	r3, r2
 80028ac:	7b1b      	ldrb	r3, [r3, #12]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d036      	beq.n	8002922 <HW_TS_Start+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80028b8:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80028ba:	2003      	movs	r0, #3
 80028bc:	f002 f8b0 	bl	8004a20 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80028c0:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <HW_TS_Start+0x98>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	21ca      	movs	r1, #202	; 0xca
 80028c8:	6251      	str	r1, [r2, #36]	; 0x24
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2253      	movs	r2, #83	; 0x53
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80028d0:	4d17      	ldr	r5, [pc, #92]	; (8002930 <HW_TS_Start+0x94>)
 80028d2:	0062      	lsls	r2, r4, #1
 80028d4:	4422      	add	r2, r4
 80028d6:	00d3      	lsls	r3, r2, #3
 80028d8:	442b      	add	r3, r5
 80028da:	2202      	movs	r2, #2
 80028dc:	731a      	strb	r2, [r3, #12]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80028de:	609f      	str	r7, [r3, #8]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80028e0:	605f      	str	r7, [r3, #4]

  time_elapsed =  linkTimer(timer_id);
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7ff fd82 	bl	80023ec <linkTimer>

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80028e8:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 80028ec:	b2db      	uxtb	r3, r3

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80028ee:	f895 2091 	ldrb.w	r2, [r5, #145]	; 0x91
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d117      	bne.n	8002928 <HW_TS_Start+0x8c>
  {
    RescheduleTimerList();
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80028f8:	4a0d      	ldr	r2, [pc, #52]	; (8002930 <HW_TS_Start+0x94>)
 80028fa:	0063      	lsls	r3, r4, #1
 80028fc:	191d      	adds	r5, r3, r4
 80028fe:	00e9      	lsls	r1, r5, #3
 8002900:	460d      	mov	r5, r1
 8002902:	4411      	add	r1, r2
 8002904:	6889      	ldr	r1, [r1, #8]
 8002906:	1a08      	subs	r0, r1, r0
 8002908:	442a      	add	r2, r5
 800290a:	6090      	str	r0, [r2, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HW_TS_Start+0x98>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	22ff      	movs	r2, #255	; 0xff
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002916:	2003      	movs	r0, #3
 8002918:	f002 f874 	bl	8004a04 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291c:	f386 8810 	msr	PRIMASK, r6
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8002920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HW_TS_Stop( timer_id );
 8002922:	f7ff ff57 	bl	80027d4 <HW_TS_Stop>
 8002926:	e7c5      	b.n	80028b4 <HW_TS_Start+0x18>
    RescheduleTimerList();
 8002928:	f7ff fe14 	bl	8002554 <RescheduleTimerList>
 800292c:	e7ee      	b.n	800290c <HW_TS_Start+0x70>
 800292e:	bf00      	nop
 8002930:	200000d8 	.word	0x200000d8
 8002934:	20000a20 	.word	0x20000a20

08002938 <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 8002938:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800293e:	b672      	cpsid	i
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HW_TS_RTC_ReadLeftTicksToCount+0x34>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002948:	d009      	beq.n	800295e <HW_TS_RTC_ReadLeftTicksToCount+0x26>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <HW_TS_RTC_ReadLeftTicksToCount+0x34>)
 800294c:	695c      	ldr	r4, [r3, #20]
 800294e:	b2a4      	uxth	r4, r4

    elapsed_time_value = ReturnTimeElapsed();
 8002950:	f7ff fd1e 	bl	8002390 <ReturnTimeElapsed>

    if(auro_reload_value > elapsed_time_value)
 8002954:	4284      	cmp	r4, r0
 8002956:	d907      	bls.n	8002968 <HW_TS_RTC_ReadLeftTicksToCount+0x30>
    {
      return_value = auro_reload_value - elapsed_time_value;
 8002958:	1a20      	subs	r0, r4, r0
 800295a:	b280      	uxth	r0, r0
 800295c:	e001      	b.n	8002962 <HW_TS_RTC_ReadLeftTicksToCount+0x2a>
      return_value = 0;
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 800295e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002962:	f385 8810 	msr	PRIMASK, r5
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
}
 8002966:	bd38      	pop	{r3, r4, r5, pc}
      return_value = 0;
 8002968:	2000      	movs	r0, #0
 800296a:	e7fa      	b.n	8002962 <HW_TS_RTC_ReadLeftTicksToCount+0x2a>
 800296c:	40002800 	.word	0x40002800

08002970 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
    switch (hw_uart_id)
 8002970:	b100      	cbz	r0, 8002974 <HW_UART_Receive_IT+0x4>
 8002972:	4770      	bx	lr
{
 8002974:	b508      	push	{r3, lr}
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8002976:	4804      	ldr	r0, [pc, #16]	; (8002988 <HW_UART_Receive_IT+0x18>)
 8002978:	6003      	str	r3, [r0, #0]
 800297a:	4804      	ldr	r0, [pc, #16]	; (800298c <HW_UART_Receive_IT+0x1c>)
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <HW_UART_Receive_IT+0x20>)
 800297e:	6003      	str	r3, [r0, #0]
 8002980:	f005 fc64 	bl	800824c <HAL_UART_Receive_IT>
        default:
            break;
    }

    return;
}
 8002984:	bd08      	pop	{r3, pc}
 8002986:	bf00      	nop
 8002988:	20005194 	.word	0x20005194
 800298c:	200057fc 	.word	0x200057fc
 8002990:	40013800 	.word	0x40013800

08002994 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
    switch (hw_uart_id)
 8002994:	b100      	cbz	r0, 8002998 <HW_UART_Transmit_IT+0x4>
 8002996:	4770      	bx	lr
{
 8002998:	b508      	push	{r3, lr}
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_TX_IT(huart1, USART1);
 800299a:	4804      	ldr	r0, [pc, #16]	; (80029ac <HW_UART_Transmit_IT+0x18>)
 800299c:	6003      	str	r3, [r0, #0]
 800299e:	4804      	ldr	r0, [pc, #16]	; (80029b0 <HW_UART_Transmit_IT+0x1c>)
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <HW_UART_Transmit_IT+0x20>)
 80029a2:	6003      	str	r3, [r0, #0]
 80029a4:	f005 fbf6 	bl	8008194 <HAL_UART_Transmit_IT>
        default:
            break;
    }

    return;
}
 80029a8:	bd08      	pop	{r3, pc}
 80029aa:	bf00      	nop
 80029ac:	20005198 	.word	0x20005198
 80029b0:	200057fc 	.word	0x200057fc
 80029b4:	40013800 	.word	0x40013800

080029b8 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029b8:	b508      	push	{r3, lr}
    switch ((uint32_t)huart->Instance)
 80029ba:	6802      	ldr	r2, [r0, #0]
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_UART_RxCpltCallback+0x14>)
 80029be:	429a      	cmp	r2, r3
 80029c0:	d103      	bne.n	80029ca <HAL_UART_RxCpltCallback+0x12>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80029c2:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_UART_RxCpltCallback+0x18>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	b103      	cbz	r3, 80029ca <HAL_UART_RxCpltCallback+0x12>
            {
                HW_huart1RxCb();
 80029c8:	4798      	blx	r3
        default:
            break;
    }

    return;
}
 80029ca:	bd08      	pop	{r3, pc}
 80029cc:	40013800 	.word	0x40013800
 80029d0:	20005194 	.word	0x20005194

080029d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029d4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80029d6:	4812      	ldr	r0, [pc, #72]	; (8002a20 <MX_I2C1_Init+0x4c>)
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029da:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <MX_I2C1_Init+0x54>)
 80029de:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029e4:	2201      	movs	r2, #1
 80029e6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029e8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029ea:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029ec:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029ee:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029f0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029f2:	f002 fd27 	bl	8005444 <HAL_I2C_Init>
 80029f6:	b950      	cbnz	r0, 8002a0e <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029f8:	2100      	movs	r1, #0
 80029fa:	4809      	ldr	r0, [pc, #36]	; (8002a20 <MX_I2C1_Init+0x4c>)
 80029fc:	f003 fd14 	bl	8006428 <HAL_I2CEx_ConfigAnalogFilter>
 8002a00:	b940      	cbnz	r0, 8002a14 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a02:	2100      	movs	r1, #0
 8002a04:	4806      	ldr	r0, [pc, #24]	; (8002a20 <MX_I2C1_Init+0x4c>)
 8002a06:	f003 fd3d 	bl	8006484 <HAL_I2CEx_ConfigDigitalFilter>
 8002a0a:	b930      	cbnz	r0, 8002a1a <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }

}
 8002a0c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a0e:	f000 fc1b 	bl	8003248 <Error_Handler>
 8002a12:	e7f1      	b.n	80029f8 <MX_I2C1_Init+0x24>
    Error_Handler();
 8002a14:	f000 fc18 	bl	8003248 <Error_Handler>
 8002a18:	e7f3      	b.n	8002a02 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8002a1a:	f000 fc15 	bl	8003248 <Error_Handler>
}
 8002a1e:	e7f5      	b.n	8002a0c <MX_I2C1_Init+0x38>
 8002a20:	2000519c 	.word	0x2000519c
 8002a24:	40005400 	.word	0x40005400
 8002a28:	00e27cae 	.word	0x00e27cae

08002a2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	2300      	movs	r3, #0
 8002a32:	9303      	str	r3, [sp, #12]
 8002a34:	9304      	str	r3, [sp, #16]
 8002a36:	9305      	str	r3, [sp, #20]
 8002a38:	9306      	str	r3, [sp, #24]
 8002a3a:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8002a3c:	6802      	ldr	r2, [r0, #0]
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_I2C_MspInit+0x70>)
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a44:	b008      	add	sp, #32
 8002a46:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a48:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8002a4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8002a5c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a64:	2312      	movs	r3, #18
 8002a66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a68:	2304      	movs	r3, #4
 8002a6a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6c:	a903      	add	r1, sp, #12
 8002a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a72:	f002 fa01 	bl	8004e78 <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a7c:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a84:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002a86:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2105      	movs	r1, #5
 8002a8c:	201e      	movs	r0, #30
 8002a8e:	f001 ff85 	bl	800499c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a92:	201e      	movs	r0, #30
 8002a94:	f001 ffb6 	bl	8004a04 <HAL_NVIC_EnableIRQ>
}
 8002a98:	e7d4      	b.n	8002a44 <HAL_I2C_MspInit+0x18>
 8002a9a:	bf00      	nop
 8002a9c:	40005400 	.word	0x40005400

08002aa0 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8002aa0:	b510      	push	{r4, lr}
	inertialEnabled = 1;
 8002aa2:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <InertialSensingTask+0xd8>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 8002aa8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002aac:	2120      	movs	r1, #32
 8002aae:	204a      	movs	r0, #74	; 0x4a
 8002ab0:	f7ff f82c 	bl	8001b0c <IMU_begin>
 8002ab4:	e043      	b.n	8002b3e <InertialSensingTask+0x9e>
//					osMessageQueueGet(stepSampleQueueHandle, &inertialPacket.stability, 0U, WAIT_TOLERANCE);
//					osMessageQueueGet(stabilitySampleQueueHandle, &inertialPacket.step, 0U, WAIT_TOLERANCE);


				// check for break condition
				evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	4611      	mov	r1, r2
 8002aba:	2002      	movs	r0, #2
 8002abc:	f006 fe18 	bl	80096f0 <osThreadFlagsWait>

				// stop timer and put thread in idle if signal was reset
				if( (evt & 0x00000002U) == 0x00000002U){
 8002ac0:	f010 0f02 	tst.w	r0, #2
 8002ac4:	d123      	bne.n	8002b0e <InertialSensingTask+0x6e>
				osDelay(100);
 8002ac6:	2064      	movs	r0, #100	; 0x64
 8002ac8:	f006 fe78 	bl	80097bc <osDelay>
				osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8002acc:	4c2b      	ldr	r4, [pc, #172]	; (8002b7c <InertialSensingTask+0xdc>)
 8002ace:	2364      	movs	r3, #100	; 0x64
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	482a      	ldr	r0, [pc, #168]	; (8002b80 <InertialSensingTask+0xe0>)
 8002ad6:	6800      	ldr	r0, [r0, #0]
 8002ad8:	f007 f90e 	bl	8009cf8 <osMessageQueueGet>
				osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 8002adc:	2300      	movs	r3, #0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f104 0118 	add.w	r1, r4, #24
 8002ae4:	4827      	ldr	r0, [pc, #156]	; (8002b84 <InertialSensingTask+0xe4>)
 8002ae6:	6800      	ldr	r0, [r0, #0]
 8002ae8:	f007 f906 	bl	8009cf8 <osMessageQueueGet>
				osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 8002aec:	2300      	movs	r3, #0
 8002aee:	461a      	mov	r2, r3
 8002af0:	4621      	mov	r1, r4
 8002af2:	4825      	ldr	r0, [pc, #148]	; (8002b88 <InertialSensingTask+0xe8>)
 8002af4:	6800      	ldr	r0, [r0, #0]
 8002af6:	f007 f8ad 	bl	8009c54 <osMessageQueuePut>
				if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 8002afa:	2120      	movs	r1, #32
 8002afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b00:	f002 fa7a 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8002b04:	2800      	cmp	r0, #0
 8002b06:	d1d6      	bne.n	8002ab6 <InertialSensingTask+0x16>
 8002b08:	f7fe ff88 	bl	8001a1c <IMU_dataAvailable>
 8002b0c:	e7d3      	b.n	8002ab6 <InertialSensingTask+0x16>

					// reset IMU
					IMU_softReset();
 8002b0e:	f7fe ffe5 	bl	8001adc <IMU_softReset>

					// give some time to ensure no interrupts are handled
					osDelay(500);
 8002b12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b16:	f006 fe51 	bl	80097bc <osDelay>

					inertialEnabled = 0;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <InertialSensingTask+0xd8>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]

					// empty queues
					osMessageQueueReset(inertialSensingQueueHandle);
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <InertialSensingTask+0xe8>)
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	f007 f954 	bl	8009dd0 <osMessageQueueReset>
					osMessageQueueReset(activitySampleQueueHandle);
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <InertialSensingTask+0xe4>)
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	f007 f950 	bl	8009dd0 <osMessageQueueReset>
					osMessageQueueReset(rotationSampleQueueHandle);
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <InertialSensingTask+0xe0>)
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	f007 f94c 	bl	8009dd0 <osMessageQueueReset>
//					osMessageQueueReset(stepSampleQueueHandle);
//					osMessageQueueReset(stabilitySampleQueueHandle);

					// clear any flags
					osThreadFlagsClear(0x0000000EU);
 8002b38:	200e      	movs	r0, #14
 8002b3a:	f006 fd9b 	bl	8009674 <osThreadFlagsClear>
			osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8002b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b42:	2100      	movs	r1, #0
 8002b44:	2001      	movs	r0, #1
 8002b46:	f006 fdd3 	bl	80096f0 <osThreadFlagsWait>
			osDelay(500);
 8002b4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b4e:	f006 fe35 	bl	80097bc <osDelay>
			IMU_enableRotationVector(ROT_VEC_PERIOD);
 8002b52:	2064      	movs	r0, #100	; 0x64
 8002b54:	f7ff f839 	bl	8001bca <IMU_enableRotationVector>
			osDelay(100);
 8002b58:	2064      	movs	r0, #100	; 0x64
 8002b5a:	f006 fe2f 	bl	80097bc <osDelay>
			IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <InertialSensingTask+0xec>)
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <InertialSensingTask+0xf0>)
 8002b62:	6819      	ldr	r1, [r3, #0]
 8002b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b68:	f7ff f81e 	bl	8001ba8 <IMU_enableActivityClassifier>
			osDelay(400);
 8002b6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002b70:	f006 fe24 	bl	80097bc <osDelay>
 8002b74:	e7a7      	b.n	8002ac6 <InertialSensingTask+0x26>
 8002b76:	bf00      	nop
 8002b78:	20000a24 	.word	0x20000a24
 8002b7c:	200051f0 	.word	0x200051f0
 8002b80:	20004ba0 	.word	0x20004ba0
 8002b84:	20004abc 	.word	0x20004abc
 8002b88:	20004acc 	.word	0x20004acc
 8002b8c:	2000523c 	.word	0x2000523c
 8002b90:	20000008 	.word	0x20000008

08002b94 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8002b94:	2820      	cmp	r0, #32
 8002b96:	d000      	beq.n	8002b9a <HAL_GPIO_EXTI_Callback+0x6>
 8002b98:	4770      	bx	lr
{
 8002b9a:	b508      	push	{r3, lr}
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_GPIO_EXTI_Callback+0x18>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d000      	beq.n	8002ba6 <HAL_GPIO_EXTI_Callback+0x12>
		IMU_dataAvailable();
	}
}
 8002ba4:	bd08      	pop	{r3, pc}
		IMU_dataAvailable();
 8002ba6:	f7fe ff39 	bl	8001a1c <IMU_dataAvailable>
}
 8002baa:	e7fb      	b.n	8002ba4 <HAL_GPIO_EXTI_Callback+0x10>
 8002bac:	20000a24 	.word	0x20000a24

08002bb0 <_Input>:
//#include "UART_Print.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	4605      	mov	r5, r0
 8002bb4:	460f      	mov	r7, r1
	_GeometryBuilder(&geometry_builder);
 8002bb6:	4e08      	ldr	r6, [pc, #32]	; (8002bd8 <_Input+0x28>)
 8002bb8:	4630      	mov	r0, r6
 8002bba:	f7ff f8cf 	bl	8001d5c <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8002bbe:	4c07      	ldr	r4, [pc, #28]	; (8002bdc <_Input+0x2c>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f000 fb96 	bl	80032f4 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8002bc8:	f8c4 62cc 	str.w	r6, [r4, #716]	; 0x2cc
	self->next = &pulse_processor;
 8002bcc:	f8c5 4418 	str.w	r4, [r5, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8002bd0:	f885 7408 	strb.w	r7, [r5, #1032]	; 0x408

}
 8002bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20005264 	.word	0x20005264
 8002bdc:	200052e8 	.word	0x200052e8

08002be0 <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8002be0:	b510      	push	{r4, lr}
	uint32_t evt = 0;
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8002be2:	f04f 32ff 	mov.w	r2, #4294967295
 8002be6:	2100      	movs	r1, #0
 8002be8:	2001      	movs	r0, #1
 8002bea:	f006 fd81 	bl	80096f0 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8002bee:	4816      	ldr	r0, [pc, #88]	; (8002c48 <PulseHandlerTask+0x68>)
 8002bf0:	f004 feae 	bl	8007950 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8002bf4:	4815      	ldr	r0, [pc, #84]	; (8002c4c <PulseHandlerTask+0x6c>)
 8002bf6:	f001 fe4b 	bl	8004890 <HAL_COMP_Start>
		_Input(&input0, 0);
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4814      	ldr	r0, [pc, #80]	; (8002c50 <PulseHandlerTask+0x70>)
 8002bfe:	f7ff ffd7 	bl	8002bb0 <_Input>
		while(1){
			osMessageQueueGet (pulseQueue, (void *) &p, NULL, osWaitForever);
 8002c02:	4c14      	ldr	r4, [pc, #80]	; (8002c54 <PulseHandlerTask+0x74>)
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	4812      	ldr	r0, [pc, #72]	; (8002c58 <PulseHandlerTask+0x78>)
 8002c0e:	6800      	ldr	r0, [r0, #0]
 8002c10:	f007 f872 	bl	8009cf8 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8002c14:	4621      	mov	r1, r4
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <PulseHandlerTask+0x70>)
 8002c18:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8002c1c:	f000 fd4a 	bl	80036b4 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8002c20:	2200      	movs	r2, #0
 8002c22:	4611      	mov	r1, r2
 8002c24:	2002      	movs	r0, #2
 8002c26:	f006 fd63 	bl	80096f0 <osThreadFlagsWait>
			if((evt & 0x00000002U) == 0x00000002U){
 8002c2a:	f010 0f02 	tst.w	r0, #2
 8002c2e:	d0e8      	beq.n	8002c02 <PulseHandlerTask+0x22>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8002c30:	4806      	ldr	r0, [pc, #24]	; (8002c4c <PulseHandlerTask+0x6c>)
 8002c32:	f001 fe5f 	bl	80048f4 <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8002c36:	4804      	ldr	r0, [pc, #16]	; (8002c48 <PulseHandlerTask+0x68>)
 8002c38:	f004 fea2 	bl	8007980 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueue);
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <PulseHandlerTask+0x78>)
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	f007 f8c6 	bl	8009dd0 <osMessageQueueReset>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8002c44:	e7cd      	b.n	8002be2 <PulseHandlerTask+0x2>
 8002c46:	bf00      	nop
 8002c48:	200057bc 	.word	0x200057bc
 8002c4c:	20005000 	.word	0x20005000
 8002c50:	20004bd0 	.word	0x20004bd0
 8002c54:	20005248 	.word	0x20005248
 8002c58:	20004ff0 	.word	0x20004ff0

08002c5c <get3D_location>:
//		}
//	}
//}


void get3D_location(VIVEVars *vive_vars){
 8002c5c:	b538      	push	{r3, r4, r5, lr}
 8002c5e:	4605      	mov	r5, r0
	// start VIVE thread
	osThreadFlagsSet(pulseHandlerTaskHandle, 0x00000001U);
 8002c60:	2101      	movs	r1, #1
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <get3D_location+0x34>)
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	f006 fcbd 	bl	80095e4 <osThreadFlagsSet>

	// grab 3D location estimate
	for(int i = 0; i<20; i++){
 8002c6a:	2400      	movs	r4, #0
 8002c6c:	e008      	b.n	8002c80 <get3D_location+0x24>
		osMessageQueueGet(viveQueue, (void *) vive_vars, NULL, osWaitForever);
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c72:	2200      	movs	r2, #0
 8002c74:	4629      	mov	r1, r5
 8002c76:	4807      	ldr	r0, [pc, #28]	; (8002c94 <get3D_location+0x38>)
 8002c78:	6800      	ldr	r0, [r0, #0]
 8002c7a:	f007 f83d 	bl	8009cf8 <osMessageQueueGet>
	for(int i = 0; i<20; i++){
 8002c7e:	3401      	adds	r4, #1
 8002c80:	2c13      	cmp	r4, #19
 8002c82:	ddf4      	ble.n	8002c6e <get3D_location+0x12>
	}
	// TODO : average them and/or error correction

	// turn off 3D localization
	osThreadFlagsSet(pulseHandlerTaskHandle, 0x00000002U);
 8002c84:	2102      	movs	r1, #2
 8002c86:	4b02      	ldr	r3, [pc, #8]	; (8002c90 <get3D_location+0x34>)
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	f006 fcab 	bl	80095e4 <osThreadFlagsSet>
}
 8002c8e:	bd38      	pop	{r3, r4, r5, pc}
 8002c90:	20004bc8 	.word	0x20004bc8
 8002c94:	20004bc0 	.word	0x20004bc0

08002c98 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8002c98:	b510      	push	{r4, lr}
 8002c9a:	b082      	sub	sp, #8
	Pulse p_in = {self->input_idx_, start_time, len};
 8002c9c:	f890 3408 	ldrb.w	r3, [r0, #1032]	; 0x408
 8002ca0:	f88d 3000 	strb.w	r3, [sp]
 8002ca4:	f8ad 1002 	strh.w	r1, [sp, #2]
 8002ca8:	f8ad 2004 	strh.w	r2, [sp, #4]
	osMessageQueuePut(pulseQueue, (const void *) &p_in, NULL, 0);
 8002cac:	4c06      	ldr	r4, [pc, #24]	; (8002cc8 <enqueue_pulse+0x30>)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4669      	mov	r1, sp
 8002cb4:	6820      	ldr	r0, [r4, #0]
 8002cb6:	f006 ffcd 	bl	8009c54 <osMessageQueuePut>
	count = osMessageQueueGetCount(pulseQueue);
 8002cba:	6820      	ldr	r0, [r4, #0]
 8002cbc:	f007 f86e 	bl	8009d9c <osMessageQueueGetCount>
 8002cc0:	4b02      	ldr	r3, [pc, #8]	; (8002ccc <enqueue_pulse+0x34>)
 8002cc2:	6018      	str	r0, [r3, #0]
}
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd10      	pop	{r4, pc}
 8002cc8:	20004ff0 	.word	0x20004ff0
 8002ccc:	20000a28 	.word	0x20000a28

08002cd0 <InterProcessorTask>:
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};

struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	b082      	sub	sp, #8
	uint32_t evt = 0;

	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8002cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <InterProcessorTask+0x158>)
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	f006 fed8 	bl	8009a90 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8002ce0:	2364      	movs	r3, #100	; 0x64
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2306      	movs	r3, #6
 8002ce6:	4a51      	ldr	r2, [pc, #324]	; (8002e2c <InterProcessorTask+0x15c>)
 8002ce8:	21e6      	movs	r1, #230	; 0xe6
 8002cea:	4851      	ldr	r0, [pc, #324]	; (8002e30 <InterProcessorTask+0x160>)
 8002cec:	f002 fc08 	bl	8005500 <HAL_I2C_Master_Transmit>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d1f5      	bne.n	8002ce0 <InterProcessorTask+0x10>
	osSemaphoreRelease(messageI2C_LockSem);
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <InterProcessorTask+0x158>)
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	f006 ff0e 	bl	8009b18 <osSemaphoreRelease>
 8002cfc:	e06d      	b.n	8002dda <InterProcessorTask+0x10a>
					parsedPacket.tick_ms = receivedPacket.tick_ms;
					parsedPacket.epoch = receivedPacket.epoch;

					for(int i = 0; i < 5; i++)
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8002cfe:	4a4d      	ldr	r2, [pc, #308]	; (8002e34 <InterProcessorTask+0x164>)
 8002d00:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
 8002d04:	4e4c      	ldr	r6, [pc, #304]	; (8002e38 <InterProcessorTask+0x168>)
 8002d06:	4633      	mov	r3, r6
 8002d08:	6808      	ldr	r0, [r1, #0]
 8002d0a:	6849      	ldr	r1, [r1, #4]
 8002d0c:	c303      	stmia	r3!, {r0, r1}
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8002d0e:	1d61      	adds	r1, r4, #5
 8002d10:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002d14:	6810      	ldr	r0, [r2, #0]
 8002d16:	6851      	ldr	r1, [r2, #4]
 8002d18:	c303      	stmia	r3!, {r0, r1}

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4631      	mov	r1, r6
 8002d20:	4846      	ldr	r0, [pc, #280]	; (8002e3c <InterProcessorTask+0x16c>)
 8002d22:	6800      	ldr	r0, [r0, #0]
 8002d24:	f006 ff96 	bl	8009c54 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8002d28:	3401      	adds	r4, #1
 8002d2a:	2c04      	cmp	r4, #4
 8002d2c:	dde7      	ble.n	8002cfe <InterProcessorTask+0x2e>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8002d2e:	f015 0f02 	tst.w	r5, #2
 8002d32:	d13a      	bne.n	8002daa <InterProcessorTask+0xda>
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2006      	movs	r0, #6
 8002d3c:	f006 fcd8 	bl	80096f0 <osThreadFlagsWait>
 8002d40:	4605      	mov	r5, r0
 				if( (evt & 0x00000004U) == 0x00000004U){
 8002d42:	f010 0f04 	tst.w	r0, #4
 8002d46:	d0f2      	beq.n	8002d2e <InterProcessorTask+0x5e>
 					osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <InterProcessorTask+0x158>)
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	f006 fe9e 	bl	8009a90 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8002d54:	2364      	movs	r3, #100	; 0x64
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2306      	movs	r3, #6
 8002d5a:	4a39      	ldr	r2, [pc, #228]	; (8002e40 <InterProcessorTask+0x170>)
 8002d5c:	21e6      	movs	r1, #230	; 0xe6
 8002d5e:	4834      	ldr	r0, [pc, #208]	; (8002e30 <InterProcessorTask+0x160>)
 8002d60:	f002 fbce 	bl	8005500 <HAL_I2C_Master_Transmit>
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d1f5      	bne.n	8002d54 <InterProcessorTask+0x84>
 					osThreadFlagsClear(0x00000008U);
 8002d68:	2008      	movs	r0, #8
 8002d6a:	f006 fc83 	bl	8009674 <osThreadFlagsClear>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8002d6e:	2358      	movs	r3, #88	; 0x58
 8002d70:	4a30      	ldr	r2, [pc, #192]	; (8002e34 <InterProcessorTask+0x164>)
 8002d72:	21e6      	movs	r1, #230	; 0xe6
 8002d74:	482e      	ldr	r0, [pc, #184]	; (8002e30 <InterProcessorTask+0x160>)
 8002d76:	f002 fd3f 	bl	80057f8 <HAL_I2C_Master_Receive_IT>
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	d1f7      	bne.n	8002d6e <InterProcessorTask+0x9e>
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8002d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d82:	2100      	movs	r1, #0
 8002d84:	200a      	movs	r0, #10
 8002d86:	f006 fcb3 	bl	80096f0 <osThreadFlagsWait>
 8002d8a:	4605      	mov	r5, r0
					osSemaphoreRelease(messageI2C_LockSem);
 8002d8c:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <InterProcessorTask+0x158>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	f006 fec2 	bl	8009b18 <osSemaphoreRelease>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8002d94:	f015 0f02 	tst.w	r5, #2
 8002d98:	d11f      	bne.n	8002dda <InterProcessorTask+0x10a>
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8002d9a:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <InterProcessorTask+0x164>)
 8002d9c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <InterProcessorTask+0x168>)
 8002da0:	6119      	str	r1, [r3, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8002da2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002da4:	615a      	str	r2, [r3, #20]
					for(int i = 0; i < 5; i++)
 8002da6:	2400      	movs	r4, #0
 8002da8:	e7bf      	b.n	8002d2a <InterProcessorTask+0x5a>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8002daa:	f04f 31ff 	mov.w	r1, #4294967295
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <InterProcessorTask+0x158>)
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	f006 fe6d 	bl	8009a90 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8002db6:	2364      	movs	r3, #100	; 0x64
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2306      	movs	r3, #6
 8002dbc:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <InterProcessorTask+0x15c>)
 8002dbe:	21e6      	movs	r1, #230	; 0xe6
 8002dc0:	481b      	ldr	r0, [pc, #108]	; (8002e30 <InterProcessorTask+0x160>)
 8002dc2:	f002 fb9d 	bl	8005500 <HAL_I2C_Master_Transmit>
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d1f5      	bne.n	8002db6 <InterProcessorTask+0xe6>
					osSemaphoreRelease(messageI2C_LockSem);
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <InterProcessorTask+0x158>)
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	f006 fea3 	bl	8009b18 <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <InterProcessorTask+0x16c>)
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	f006 fffb 	bl	8009dd0 <osMessageQueueReset>
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8002dda:	f04f 32ff 	mov.w	r2, #4294967295
 8002dde:	2100      	movs	r1, #0
 8002de0:	2001      	movs	r0, #1
 8002de2:	f006 fc85 	bl	80096f0 <osThreadFlagsWait>
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8002de6:	f010 0f01 	tst.w	r0, #1
 8002dea:	d0f6      	beq.n	8002dda <InterProcessorTask+0x10a>
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <InterProcessorTask+0x170>)
 8002dee:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <InterProcessorTask+0x174>)
 8002df0:	6811      	ldr	r1, [r2, #0]
 8002df2:	6019      	str	r1, [r3, #0]
 8002df4:	8892      	ldrh	r2, [r2, #4]
 8002df6:	809a      	strh	r2, [r3, #4]
			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <InterProcessorTask+0x158>)
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	f006 fe46 	bl	8009a90 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8002e04:	2364      	movs	r3, #100	; 0x64
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2306      	movs	r3, #6
 8002e0a:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <InterProcessorTask+0x170>)
 8002e0c:	21e6      	movs	r1, #230	; 0xe6
 8002e0e:	4808      	ldr	r0, [pc, #32]	; (8002e30 <InterProcessorTask+0x160>)
 8002e10:	f002 fb76 	bl	8005500 <HAL_I2C_Master_Transmit>
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d1f5      	bne.n	8002e04 <InterProcessorTask+0x134>
			osDelay(100);
 8002e18:	2064      	movs	r0, #100	; 0x64
 8002e1a:	f006 fccf 	bl	80097bc <osDelay>
			osSemaphoreRelease(messageI2C_LockSem);
 8002e1e:	4b02      	ldr	r3, [pc, #8]	; (8002e28 <InterProcessorTask+0x158>)
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	f006 fe79 	bl	8009b18 <osSemaphoreRelease>
 8002e26:	e785      	b.n	8002d34 <InterProcessorTask+0x64>
 8002e28:	20004bb4 	.word	0x20004bb4
 8002e2c:	0800f70c 	.word	0x0800f70c
 8002e30:	2000519c 	.word	0x2000519c
 8002e34:	200055b8 	.word	0x200055b8
 8002e38:	20005618 	.word	0x20005618
 8002e3c:	20004ad0 	.word	0x20004ad0
 8002e40:	20005610 	.word	0x20005610
 8002e44:	20004ab4 	.word	0x20004ab4

08002e48 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8002e48:	b508      	push	{r3, lr}
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcessorTaskHandle, 0x00000010U);
 8002e4a:	2110      	movs	r1, #16
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_I2C_MasterTxCpltCallback+0x14>)
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	f006 fbc8 	bl	80095e4 <osThreadFlagsSet>
	test_1 = 1;
 8002e54:	4b02      	ldr	r3, [pc, #8]	; (8002e60 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
}
 8002e5a:	bd08      	pop	{r3, pc}
 8002e5c:	20004ad4 	.word	0x20004ad4
 8002e60:	20000a2c 	.word	0x20000a2c

08002e64 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8002e64:	b508      	push	{r3, lr}
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
 8002e66:	2108      	movs	r1, #8
 8002e68:	4b02      	ldr	r3, [pc, #8]	; (8002e74 <HAL_I2C_MasterRxCpltCallback+0x10>)
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	f006 fbba 	bl	80095e4 <osThreadFlagsSet>
}
 8002e70:	bd08      	pop	{r3, pc}
 8002e72:	bf00      	nop
 8002e74:	20004ad4 	.word	0x20004ad4

08002e78 <setup_LP5523>:
{
   uint8_t current[9];
   uint8_t intensity[9];
};

void setup_LP5523(uint8_t ADDR){
 8002e78:	b530      	push	{r4, r5, lr}
 8002e7a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t deviceAddress = ADDR << 1;
 8002e7c:	0040      	lsls	r0, r0, #1
 8002e7e:	b2c5      	uxtb	r5, r0
	uint8_t led_PWM[9] = {0};
 8002e80:	2300      	movs	r3, #0
 8002e82:	9307      	str	r3, [sp, #28]
 8002e84:	9308      	str	r3, [sp, #32]
 8002e86:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	uint8_t packet;

	// enable chip
	osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8002e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8e:	4b38      	ldr	r3, [pc, #224]	; (8002f70 <setup_LP5523+0xf8>)
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	f006 fdfd 	bl	8009a90 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8002e96:	2340      	movs	r3, #64	; 0x40
 8002e98:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 8002e9c:	b2ac      	uxth	r4, r5
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	9302      	str	r3, [sp, #8]
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	f10d 021b 	add.w	r2, sp, #27
 8002eac:	9200      	str	r2, [sp, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	4830      	ldr	r0, [pc, #192]	; (8002f74 <setup_LP5523+0xfc>)
 8002eb4:	f002 fcec 	bl	8005890 <HAL_I2C_Mem_Write>
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	d1ef      	bne.n	8002e9c <setup_LP5523+0x24>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8002ebc:	234f      	movs	r3, #79	; 0x4f
 8002ebe:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	9302      	str	r3, [sp, #8]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	f10d 021b 	add.w	r2, sp, #27
 8002ed0:	9200      	str	r2, [sp, #0]
 8002ed2:	2236      	movs	r2, #54	; 0x36
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	4827      	ldr	r0, [pc, #156]	; (8002f74 <setup_LP5523+0xfc>)
 8002ed8:	f002 fcda 	bl	8005890 <HAL_I2C_Mem_Write>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d1f0      	bne.n	8002ec2 <setup_LP5523+0x4a>

	// set PWM level (0 to 255)
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8002ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee4:	9302      	str	r3, [sp, #8]
 8002ee6:	2309      	movs	r3, #9
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	ab07      	add	r3, sp, #28
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	2216      	movs	r2, #22
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	481f      	ldr	r0, [pc, #124]	; (8002f74 <setup_LP5523+0xfc>)
 8002ef6:	f002 fccb 	bl	8005890 <HAL_I2C_Mem_Write>
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d1f0      	bne.n	8002ee0 <setup_LP5523+0x68>

	// set current control (0 to 25.5 mA) - step size is 100uA
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	2309      	movs	r3, #9
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <setup_LP5523+0x100>)
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	2226      	movs	r2, #38	; 0x26
 8002f10:	4621      	mov	r1, r4
 8002f12:	4818      	ldr	r0, [pc, #96]	; (8002f74 <setup_LP5523+0xfc>)
 8002f14:	f002 fcbc 	bl	8005890 <HAL_I2C_Mem_Write>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d1f0      	bne.n	8002efe <setup_LP5523+0x86>

	// enable logarithmic dimming
	packet = LOG_EN;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	f88d 301b 	strb.w	r3, [sp, #27]
	uint8_t packet_array[9] = {packet,packet,packet,packet,packet,packet,packet,packet,packet};
 8002f22:	f88d 3010 	strb.w	r3, [sp, #16]
 8002f26:	f88d 3011 	strb.w	r3, [sp, #17]
 8002f2a:	f88d 3012 	strb.w	r3, [sp, #18]
 8002f2e:	f88d 3013 	strb.w	r3, [sp, #19]
 8002f32:	f88d 3014 	strb.w	r3, [sp, #20]
 8002f36:	f88d 3015 	strb.w	r3, [sp, #21]
 8002f3a:	f88d 3016 	strb.w	r3, [sp, #22]
 8002f3e:	f88d 3017 	strb.w	r3, [sp, #23]
 8002f42:	f88d 3018 	strb.w	r3, [sp, #24]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	9302      	str	r3, [sp, #8]
 8002f4c:	2309      	movs	r3, #9
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	ab04      	add	r3, sp, #16
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2301      	movs	r3, #1
 8002f56:	2206      	movs	r2, #6
 8002f58:	4621      	mov	r1, r4
 8002f5a:	4806      	ldr	r0, [pc, #24]	; (8002f74 <setup_LP5523+0xfc>)
 8002f5c:	f002 fc98 	bl	8005890 <HAL_I2C_Mem_Write>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d1f0      	bne.n	8002f46 <setup_LP5523+0xce>
	osSemaphoreRelease(messageI2C_LockSem);
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <setup_LP5523+0xf8>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	f006 fdd6 	bl	8009b18 <osSemaphoreRelease>
}
 8002f6c:	b00b      	add	sp, #44	; 0x2c
 8002f6e:	bd30      	pop	{r4, r5, pc}
 8002f70:	20004bb4 	.word	0x20004bb4
 8002f74:	2000519c 	.word	0x2000519c
 8002f78:	2000000c 	.word	0x2000000c

08002f7c <FrontLightsSet>:
//
//
//  return true;
//}

void FrontLightsSet(union ColorComplex *setColors){
 8002f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f80:	b085      	sub	sp, #20
 8002f82:	4603      	mov	r3, r0
	memcpy(led_left_PWM, setColors, 9);
 8002f84:	4f1a      	ldr	r7, [pc, #104]	; (8002ff0 <FrontLightsSet+0x74>)
 8002f86:	463a      	mov	r2, r7
 8002f88:	6800      	ldr	r0, [r0, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	c203      	stmia	r2!, {r0, r1}
 8002f8e:	7a19      	ldrb	r1, [r3, #8]
 8002f90:	7011      	strb	r1, [r2, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 8002f92:	4e18      	ldr	r6, [pc, #96]	; (8002ff4 <FrontLightsSet+0x78>)
 8002f94:	4632      	mov	r2, r6
 8002f96:	f853 0f09 	ldr.w	r0, [r3, #9]!
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	c203      	stmia	r2!, {r0, r1}
 8002f9e:	7a1b      	ldrb	r3, [r3, #8]
 8002fa0:	7013      	strb	r3, [r2, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8002fa2:	4c15      	ldr	r4, [pc, #84]	; (8002ff8 <FrontLightsSet+0x7c>)
 8002fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa8:	6820      	ldr	r0, [r4, #0]
 8002faa:	f006 fd71 	bl	8009a90 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8002fae:	4d13      	ldr	r5, [pc, #76]	; (8002ffc <FrontLightsSet+0x80>)
 8002fb0:	f04f 39ff 	mov.w	r9, #4294967295
 8002fb4:	f8cd 9008 	str.w	r9, [sp, #8]
 8002fb8:	f04f 0809 	mov.w	r8, #9
 8002fbc:	f8cd 8004 	str.w	r8, [sp, #4]
 8002fc0:	9700      	str	r7, [sp, #0]
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	2216      	movs	r2, #22
 8002fc6:	2168      	movs	r1, #104	; 0x68
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f002 fc61 	bl	8005890 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8002fce:	f8cd 9008 	str.w	r9, [sp, #8]
 8002fd2:	f8cd 8004 	str.w	r8, [sp, #4]
 8002fd6:	9600      	str	r6, [sp, #0]
 8002fd8:	2301      	movs	r3, #1
 8002fda:	2216      	movs	r2, #22
 8002fdc:	216a      	movs	r1, #106	; 0x6a
 8002fde:	4628      	mov	r0, r5
 8002fe0:	f002 fc56 	bl	8005890 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockSem);
 8002fe4:	6820      	ldr	r0, [r4, #0]
 8002fe6:	f006 fd97 	bl	8009b18 <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8002fea:	b005      	add	sp, #20
 8002fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ff0:	20000a30 	.word	0x20000a30
 8002ff4:	20000a3c 	.word	0x20000a3c
 8002ff8:	20004bb4 	.word	0x20004bb4
 8002ffc:	2000519c 	.word	0x2000519c

08003000 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 8003000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003002:	b087      	sub	sp, #28
#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8003004:	2034      	movs	r0, #52	; 0x34
 8003006:	f7ff ff37 	bl	8002e78 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 800300a:	2035      	movs	r0, #53	; 0x35
 800300c:	f7ff ff34 	bl	8002e78 <setup_LP5523>
 8003010:	e036      	b.n	8003080 <ThreadFrontLightsTask+0x80>

//		// REMOVE BELOW
//		lightsSimpleMessageReceived = 0X00005229;

		for(int i = 0; i<= 8; i++){
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8003012:	9b05      	ldr	r3, [sp, #20]
 8003014:	f343 0000 	sbfx	r0, r3, #0, #1
 8003018:	4920      	ldr	r1, [pc, #128]	; (800309c <ThreadFrontLightsTask+0x9c>)
 800301a:	5488      	strb	r0, [r1, r2]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	9305      	str	r3, [sp, #20]
		for(int i = 0; i<= 8; i++){
 8003020:	3201      	adds	r2, #1
 8003022:	2a08      	cmp	r2, #8
 8003024:	ddf5      	ble.n	8003012 <ThreadFrontLightsTask+0x12>
		}

		for(int i = 0; i<= 8; i++){
 8003026:	2200      	movs	r2, #0
 8003028:	e007      	b.n	800303a <ThreadFrontLightsTask+0x3a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800302a:	9b05      	ldr	r3, [sp, #20]
 800302c:	f343 0000 	sbfx	r0, r3, #0, #1
 8003030:	491b      	ldr	r1, [pc, #108]	; (80030a0 <ThreadFrontLightsTask+0xa0>)
 8003032:	5488      	strb	r0, [r1, r2]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8003034:	085b      	lsrs	r3, r3, #1
 8003036:	9305      	str	r3, [sp, #20]
		for(int i = 0; i<= 8; i++){
 8003038:	3201      	adds	r2, #1
 800303a:	2a08      	cmp	r2, #8
 800303c:	ddf5      	ble.n	800302a <ThreadFrontLightsTask+0x2a>
		//osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);


		//HAL_I2C_Mem_Write_IT(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_PWM, 9);
		//osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 800303e:	4c19      	ldr	r4, [pc, #100]	; (80030a4 <ThreadFrontLightsTask+0xa4>)
 8003040:	f04f 31ff 	mov.w	r1, #4294967295
 8003044:	6820      	ldr	r0, [r4, #0]
 8003046:	f006 fd23 	bl	8009a90 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 800304a:	4d17      	ldr	r5, [pc, #92]	; (80030a8 <ThreadFrontLightsTask+0xa8>)
 800304c:	f04f 37ff 	mov.w	r7, #4294967295
 8003050:	9702      	str	r7, [sp, #8]
 8003052:	2609      	movs	r6, #9
 8003054:	9601      	str	r6, [sp, #4]
 8003056:	4b11      	ldr	r3, [pc, #68]	; (800309c <ThreadFrontLightsTask+0x9c>)
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2301      	movs	r3, #1
 800305c:	2216      	movs	r2, #22
 800305e:	2168      	movs	r1, #104	; 0x68
 8003060:	4628      	mov	r0, r5
 8003062:	f002 fc15 	bl	8005890 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8003066:	9702      	str	r7, [sp, #8]
 8003068:	9601      	str	r6, [sp, #4]
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <ThreadFrontLightsTask+0xa0>)
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2301      	movs	r3, #1
 8003070:	2216      	movs	r2, #22
 8003072:	216a      	movs	r1, #106	; 0x6a
 8003074:	4628      	mov	r0, r5
 8003076:	f002 fc0b 	bl	8005890 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockSem);
 800307a:	6820      	ldr	r0, [r4, #0]
 800307c:	f006 fd4c 	bl	8009b18 <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 8003080:	2400      	movs	r4, #0
 8003082:	a906      	add	r1, sp, #24
 8003084:	f841 4d04 	str.w	r4, [r1, #-4]!
		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 8003088:	f04f 33ff 	mov.w	r3, #4294967295
 800308c:	4622      	mov	r2, r4
 800308e:	4807      	ldr	r0, [pc, #28]	; (80030ac <ThreadFrontLightsTask+0xac>)
 8003090:	6800      	ldr	r0, [r0, #0]
 8003092:	f006 fe31 	bl	8009cf8 <osMessageQueueGet>
		for(int i = 0; i<= 8; i++){
 8003096:	4622      	mov	r2, r4
 8003098:	e7c3      	b.n	8003022 <ThreadFrontLightsTask+0x22>
 800309a:	bf00      	nop
 800309c:	20000a30 	.word	0x20000a30
 80030a0:	20000a3c 	.word	0x20000a3c
 80030a4:	20004bb4 	.word	0x20004bb4
 80030a8:	2000519c 	.word	0x2000519c
 80030ac:	20004bcc 	.word	0x20004bcc

080030b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b2:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030b4:	2248      	movs	r2, #72	; 0x48
 80030b6:	2100      	movs	r1, #0
 80030b8:	a81c      	add	r0, sp, #112	; 0x70
 80030ba:	f00b f978 	bl	800e3ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030be:	2400      	movs	r4, #0
 80030c0:	9415      	str	r4, [sp, #84]	; 0x54
 80030c2:	9416      	str	r4, [sp, #88]	; 0x58
 80030c4:	9417      	str	r4, [sp, #92]	; 0x5c
 80030c6:	9418      	str	r4, [sp, #96]	; 0x60
 80030c8:	9419      	str	r4, [sp, #100]	; 0x64
 80030ca:	941a      	str	r4, [sp, #104]	; 0x68
 80030cc:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030ce:	2250      	movs	r2, #80	; 0x50
 80030d0:	4621      	mov	r1, r4
 80030d2:	a801      	add	r0, sp, #4
 80030d4:	f00b f96b 	bl	800e3ae <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030e2:	f042 0210 	orr.w	r2, r2, #16
 80030e6:	60da      	str	r2, [r3, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	f042 0203 	orr.w	r2, r2, #3
 80030ee:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80030f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80030f4:	f022 0218 	bic.w	r2, r2, #24
 80030f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030fc:	4a25      	ldr	r2, [pc, #148]	; (8003194 <SystemClock_Config+0xe4>)
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003104:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	6813      	ldr	r3, [r2, #0]
 800310c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8003114:	230f      	movs	r3, #15
 8003116:	931c      	str	r3, [sp, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003118:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800311c:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800311e:	2701      	movs	r7, #1
 8003120:	971e      	str	r7, [sp, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003122:	f44f 7680 	mov.w	r6, #256	; 0x100
 8003126:	961f      	str	r6, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003128:	2340      	movs	r3, #64	; 0x40
 800312a:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800312c:	2305      	movs	r3, #5
 800312e:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003130:	9427      	str	r4, [sp, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003132:	a81c      	add	r0, sp, #112	; 0x70
 8003134:	f003 fa66 	bl	8006604 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003138:	236f      	movs	r3, #111	; 0x6f
 800313a:	9315      	str	r3, [sp, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800313c:	2502      	movs	r5, #2
 800313e:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003140:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003142:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003144:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003146:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003148:	941b      	str	r4, [sp, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800314a:	4639      	mov	r1, r7
 800314c:	a815      	add	r0, sp, #84	; 0x54
 800314e:	f003 fde3 	bl	8006d18 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8003152:	f643 4305 	movw	r3, #15365	; 0x3c05
 8003156:	9301      	str	r3, [sp, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8003158:	2306      	movs	r3, #6
 800315a:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800315c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003160:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003166:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8003168:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800316c:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 800316e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003172:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003174:	9407      	str	r4, [sp, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003176:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800317a:	9209      	str	r2, [sp, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800317c:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800317e:	9611      	str	r6, [sp, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8003180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003184:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003186:	9513      	str	r5, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8003188:	9414      	str	r4, [sp, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800318a:	a801      	add	r0, sp, #4
 800318c:	f004 f87f 	bl	800728e <HAL_RCCEx_PeriphCLKConfig>
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003190:	b02f      	add	sp, #188	; 0xbc
 8003192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003194:	58000400 	.word	0x58000400

08003198 <main>:
{
 8003198:	b508      	push	{r3, lr}
  HAL_Init();
 800319a:	f000 fd61 	bl	8003c60 <HAL_Init>
  SystemClock_Config();
 800319e:	f7ff ff87 	bl	80030b0 <SystemClock_Config>
  MX_GPIO_Init();
 80031a2:	f7fe ffbf 	bl	8002124 <MX_GPIO_Init>
  MX_DMA_Init();
 80031a6:	f7fe f9db 	bl	8001560 <MX_DMA_Init>
  MX_ADC1_Init();
 80031aa:	f7fd fe2f 	bl	8000e0c <MX_ADC1_Init>
  MX_RTC_Init();
 80031ae:	f000 fa8f 	bl	80036d0 <MX_RTC_Init>
  MX_TIM2_Init();
 80031b2:	f000 fc5b 	bl	8003a6c <MX_TIM2_Init>
  MX_RF_Init();
 80031b6:	f000 fa8a 	bl	80036ce <MX_RF_Init>
  MX_USART1_UART_Init();
 80031ba:	f000 fcb1 	bl	8003b20 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80031be:	f7ff fc09 	bl	80029d4 <MX_I2C1_Init>
  MX_COMP1_Init();
 80031c2:	f7fe f92d 	bl	8001420 <MX_COMP1_Init>
  MX_TIM16_Init();
 80031c6:	f000 fbe1 	bl	800398c <MX_TIM16_Init>
  osKernelInitialize();
 80031ca:	f006 f94f 	bl	800946c <osKernelInitialize>
  MX_FREERTOS_Init(); 
 80031ce:	f7fd ff87 	bl	80010e0 <MX_FREERTOS_Init>
  osKernelStart();
 80031d2:	f006 f96d 	bl	80094b0 <osKernelStart>
 80031d6:	e7fe      	b.n	80031d6 <main+0x3e>

080031d8 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 80031d8:	b510      	push	{r4, lr}
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <HAL_COMP_TriggerCallback+0x4c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_COMP_TriggerCallback+0x50>)
 80031e2:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 80031e4:	f001 fb9d 	bl	8004922 <HAL_COMP_GetOutputLevel>
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 80031e8:	2801      	cmp	r0, #1
 80031ea:	d012      	beq.n	8003212 <HAL_COMP_TriggerCallback+0x3a>
		//Rising edge
		input0.rise_time_ = timestamp;
		input0.rise_valid_ = 1;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	}
	else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_COMP_TriggerCallback+0x54>)
 80031ee:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80031f2:	b1b3      	cbz	r3, 8003222 <HAL_COMP_TriggerCallback+0x4a>
 80031f4:	b9a8      	cbnz	r0, 8003222 <HAL_COMP_TriggerCallback+0x4a>
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 80031f6:	4c0d      	ldr	r4, [pc, #52]	; (800322c <HAL_COMP_TriggerCallback+0x54>)
 80031f8:	f8b4 140a 	ldrh.w	r1, [r4, #1034]	; 0x40a
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_COMP_TriggerCallback+0x50>)
 80031fe:	881a      	ldrh	r2, [r3, #0]
 8003200:	1a52      	subs	r2, r2, r1
 8003202:	b292      	uxth	r2, r2
 8003204:	4620      	mov	r0, r4
 8003206:	f7ff fd47 	bl	8002c98 <enqueue_pulse>
		input0.rise_valid_ = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	f884 340c 	strb.w	r3, [r4, #1036]	; 0x40c
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8003210:	e007      	b.n	8003222 <HAL_COMP_TriggerCallback+0x4a>
		input0.rise_time_ = timestamp;
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_COMP_TriggerCallback+0x54>)
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <HAL_COMP_TriggerCallback+0x50>)
 8003216:	8812      	ldrh	r2, [r2, #0]
 8003218:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 800321c:	2201      	movs	r2, #1
 800321e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 8003222:	bd10      	pop	{r4, pc}
 8003224:	200057bc 	.word	0x200057bc
 8003228:	20000a46 	.word	0x20000a46
 800322c:	20004bd0 	.word	0x20004bd0

08003230 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003232:	6802      	ldr	r2, [r0, #0]
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003236:	429a      	cmp	r2, r3
 8003238:	d000      	beq.n	800323c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800323a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800323c:	f000 fd26 	bl	8003c8c <HAL_IncTick>
}
 8003240:	e7fb      	b.n	800323a <HAL_TIM_PeriodElapsedCallback+0xa>
 8003242:	bf00      	nop
 8003244:	40012c00 	.word	0x40012c00

08003248 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003248:	4770      	bx	lr
	...

0800324c <MasterThreadTask>:
 */

uint8_t logEnabled = 0;

void MasterThreadTask(void *argument)
{
 800324c:	b508      	push	{r3, lr}
	while(1)
	{
		while(1){
			get3D_location(&vive_loc);
 800324e:	4804      	ldr	r0, [pc, #16]	; (8003260 <MasterThreadTask+0x14>)
 8003250:	f7ff fd04 	bl	8002c5c <get3D_location>
			osDelay(1000);
 8003254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003258:	f006 fab0 	bl	80097bc <osDelay>
 800325c:	e7f7      	b.n	800324e <MasterThreadTask+0x2>
 800325e:	bf00      	nop
 8003260:	2000569c 	.word	0x2000569c

08003264 <vector_push>:
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
    if (self->count < MAX_CAPACITY){
 8003264:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003266:	2b0f      	cmp	r3, #15
 8003268:	d80d      	bhi.n	8003286 <vector_push+0x22>
{
 800326a:	b410      	push	{r4}
    	self->items[self->count++] = *item;
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	6602      	str	r2, [r0, #96]	; 0x60
 8003270:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003274:	005a      	lsls	r2, r3, #1
 8003276:	1883      	adds	r3, r0, r2
 8003278:	680c      	ldr	r4, [r1, #0]
 800327a:	5084      	str	r4, [r0, r2]
 800327c:	888a      	ldrh	r2, [r1, #4]
 800327e:	809a      	strh	r2, [r3, #4]
    }
}
 8003280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	4770      	bx	lr

08003288 <vector_pop>:

Pulse vector_pop(vector *self){
 8003288:	4602      	mov	r2, r0
	if(self->count > 0){
 800328a:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800328c:	b92b      	cbnz	r3, 800329a <vector_pop+0x12>
		Pulse last = self->items[self->count - 1];
		self->count--;
		return last;
	}
	return self->items[0];
 800328e:	6808      	ldr	r0, [r1, #0]
 8003290:	6010      	str	r0, [r2, #0]
 8003292:	888b      	ldrh	r3, [r1, #4]
 8003294:	8093      	strh	r3, [r2, #4]
}
 8003296:	4610      	mov	r0, r2
 8003298:	4770      	bx	lr
Pulse vector_pop(vector *self){
 800329a:	b410      	push	{r4}
 800329c:	b083      	sub	sp, #12
		Pulse last = self->items[self->count - 1];
 800329e:	3b01      	subs	r3, #1
 80032a0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80032a4:	0044      	lsls	r4, r0, #1
 80032a6:	440c      	add	r4, r1
 80032a8:	6820      	ldr	r0, [r4, #0]
 80032aa:	88a4      	ldrh	r4, [r4, #4]
 80032ac:	f8ad 4004 	strh.w	r4, [sp, #4]
		self->count--;
 80032b0:	660b      	str	r3, [r1, #96]	; 0x60
		return last;
 80032b2:	6010      	str	r0, [r2, #0]
 80032b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80032b8:	8093      	strh	r3, [r2, #4]
}
 80032ba:	4610      	mov	r0, r2
 80032bc:	b003      	add	sp, #12
 80032be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <vector_get>:

Pulse vector_get(vector *self, int index)
{
 80032c4:	4603      	mov	r3, r0
    if (index >= 0 && index < self->count){
 80032c6:	2a00      	cmp	r2, #0
 80032c8:	db02      	blt.n	80032d0 <vector_get+0xc>
 80032ca:	6e08      	ldr	r0, [r1, #96]	; 0x60
 80032cc:	4290      	cmp	r0, r2
 80032ce:	d805      	bhi.n	80032dc <vector_get+0x18>
    	return self->items[index];
    }
    return self->items[0];
 80032d0:	6808      	ldr	r0, [r1, #0]
 80032d2:	6018      	str	r0, [r3, #0]
 80032d4:	888a      	ldrh	r2, [r1, #4]
 80032d6:	809a      	strh	r2, [r3, #4]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	4770      	bx	lr
    	return self->items[index];
 80032dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80032e0:	0050      	lsls	r0, r2, #1
 80032e2:	4401      	add	r1, r0
 80032e4:	680a      	ldr	r2, [r1, #0]
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	888a      	ldrh	r2, [r1, #4]
 80032ea:	809a      	strh	r2, [r3, #4]
 80032ec:	e7f4      	b.n	80032d8 <vector_get+0x14>

080032ee <vector_clear>:

void vector_clear(vector *self){
	self->count = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	6603      	str	r3, [r0, #96]	; 0x60
}
 80032f2:	4770      	bx	lr

080032f4 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	4605      	mov	r5, r0
	self->num_inputs_ = num_inputs;
 80032f8:	6001      	str	r1, [r0, #0]
	self->cycle_fix_level_ = 0;
 80032fa:	2400      	movs	r4, #0
 80032fc:	6044      	str	r4, [r0, #4]
	self->cycle_idx_ = 0;
 80032fe:	60c4      	str	r4, [r0, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8003300:	e007      	b.n	8003312 <_PulseProcessor+0x1e>
		vector_clear(&self->cycle_long_pulses_[i]);
 8003302:	2064      	movs	r0, #100	; 0x64
 8003304:	fb00 f004 	mul.w	r0, r0, r4
 8003308:	3010      	adds	r0, #16
 800330a:	4428      	add	r0, r5
 800330c:	f7ff ffef 	bl	80032ee <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8003310:	3401      	adds	r4, #1
 8003312:	2c01      	cmp	r4, #1
 8003314:	ddf5      	ble.n	8003302 <_PulseProcessor+0xe>
	}
	vector_clear(&self->cycle_short_pulses_);
 8003316:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
 800331a:	f7ff ffe8 	bl	80032ee <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 800331e:	f505 709e 	add.w	r0, r5, #316	; 0x13c
 8003322:	f7ff ffe4 	bl	80032ee <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	f8a5 32c8 	strh.w	r3, [r5, #712]	; 0x2c8
}
 800332c:	bd38      	pop	{r3, r4, r5, pc}

0800332e <reset_cycle_long_pulses>:

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
    self->cycle_idx_++;
}

void reset_cycle_long_pulses(PulseProcessor *self){
 800332e:	b538      	push	{r3, r4, r5, lr}
 8003330:	4605      	mov	r5, r0
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8003332:	2400      	movs	r4, #0
 8003334:	e007      	b.n	8003346 <reset_cycle_long_pulses+0x18>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8003336:	2064      	movs	r0, #100	; 0x64
 8003338:	fb00 f004 	mul.w	r0, r0, r4
 800333c:	3010      	adds	r0, #16
 800333e:	4428      	add	r0, r5
 8003340:	f7ff ffd5 	bl	80032ee <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8003344:	3401      	adds	r4, #1
 8003346:	2c01      	cmp	r4, #1
 8003348:	ddf5      	ble.n	8003336 <reset_cycle_long_pulses+0x8>
	}
}
 800334a:	bd38      	pop	{r3, r4, r5, pc}

0800334c <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 800334c:	b508      	push	{r3, lr}
	vector_clear(&self->unclassified_long_pulses_);
 800334e:	f500 709e 	add.w	r0, r0, #316	; 0x13c
 8003352:	f7ff ffcc 	bl	80032ee <vector_clear>
}
 8003356:	bd08      	pop	{r3, pc}

08003358 <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8003358:	b508      	push	{r3, lr}
	vector_clear(&self->cycle_short_pulses_);
 800335a:	30d8      	adds	r0, #216	; 0xd8
 800335c:	f7ff ffc7 	bl	80032ee <vector_clear>
}
 8003360:	bd08      	pop	{r3, pc}
	...

08003364 <process_long_pulse>:
void process_long_pulse(PulseProcessor *self, Pulse* p){
 8003364:	b530      	push	{r4, r5, lr}
 8003366:	b083      	sub	sp, #12
 8003368:	4604      	mov	r4, r0
 800336a:	460d      	mov	r5, r1
	if(self->cycle_fix_level_ == kCycleFixNone){
 800336c:	6843      	ldr	r3, [r0, #4]
 800336e:	b913      	cbnz	r3, 8003376 <process_long_pulse+0x12>
		if(self->unclassified_long_pulses_.count > 0){
 8003370:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
 8003374:	b9a3      	cbnz	r3, 80033a0 <process_long_pulse+0x3c>
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8003376:	6863      	ldr	r3, [r4, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d044      	beq.n	8003406 <process_long_pulse+0xa2>
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 800337c:	8869      	ldrh	r1, [r5, #2]
 800337e:	8923      	ldrh	r3, [r4, #8]
 8003380:	1ac9      	subs	r1, r1, r3
 8003382:	b289      	uxth	r1, r1
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8003384:	2200      	movs	r2, #0
 8003386:	2a01      	cmp	r2, #1
 8003388:	dc3d      	bgt.n	8003406 <process_long_pulse+0xa2>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <process_long_pulse+0xb0>)
 800338c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003390:	1acb      	subs	r3, r1, r3
 8003392:	b29b      	uxth	r3, r3
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 8003394:	331e      	adds	r3, #30
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b3b      	cmp	r3, #59	; 0x3b
 800339a:	d92a      	bls.n	80033f2 <process_long_pulse+0x8e>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 800339c:	3201      	adds	r2, #1
 800339e:	e7f2      	b.n	8003386 <process_long_pulse+0x22>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 80033a0:	f500 719e 	add.w	r1, r0, #316	; 0x13c
 80033a4:	4668      	mov	r0, sp
 80033a6:	f7ff ff6f 	bl	8003288 <vector_pop>
			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 80033aa:	886b      	ldrh	r3, [r5, #2]
 80033ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f8a4 32c8 	strh.w	r3, [r4, #712]	; 0x2c8
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 80033b8:	f5a3 53f6 	sub.w	r3, r3, #7872	; 0x1ec0
 80033bc:	3b15      	subs	r3, #21
 80033be:	2b3b      	cmp	r3, #59	; 0x3b
 80033c0:	d813      	bhi.n	80033ea <process_long_pulse+0x86>
                self->cycle_fix_level_ = kCycleFixCandidate;
 80033c2:	2301      	movs	r3, #1
 80033c4:	6063      	str	r3, [r4, #4]
                self->cycle_start_time_ = p->start_time;
 80033c6:	886b      	ldrh	r3, [r5, #2]
 80033c8:	8123      	strh	r3, [r4, #8]
                self->cycle_idx_ = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60e3      	str	r3, [r4, #12]
                reset(&self->phase_classifier_);
 80033ce:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 80033d2:	f7fe f8b9 	bl	8001548 <reset>
                reset_cycle_long_pulses(self);
 80033d6:	4620      	mov	r0, r4
 80033d8:	f7ff ffa9 	bl	800332e <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 80033dc:	4620      	mov	r0, r4
 80033de:	f7ff ffb5 	bl	800334c <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 80033e2:	4620      	mov	r0, r4
 80033e4:	f7ff ffb8 	bl	8003358 <reset_cycle_short_pulses>
 80033e8:	e7c5      	b.n	8003376 <process_long_pulse+0x12>
				reset_unclassified_long_pulses(self);
 80033ea:	4620      	mov	r0, r4
 80033ec:	f7ff ffae 	bl	800334c <reset_unclassified_long_pulses>
 80033f0:	e7c1      	b.n	8003376 <process_long_pulse+0x12>
                vector_push(&self->cycle_long_pulses_[i], p);
 80033f2:	2064      	movs	r0, #100	; 0x64
 80033f4:	fb00 f202 	mul.w	r2, r0, r2
 80033f8:	f102 0010 	add.w	r0, r2, #16
 80033fc:	4629      	mov	r1, r5
 80033fe:	4420      	add	r0, r4
 8003400:	f7ff ff30 	bl	8003264 <vector_push>
 8003404:	e004      	b.n	8003410 <process_long_pulse+0xac>
    	vector_push(&self->unclassified_long_pulses_, p);
 8003406:	4629      	mov	r1, r5
 8003408:	f504 709e 	add.w	r0, r4, #316	; 0x13c
 800340c:	f7ff ff2a 	bl	8003264 <vector_push>
}
 8003410:	b003      	add	sp, #12
 8003412:	bd30      	pop	{r4, r5, pc}
 8003414:	0800f714 	.word	0x0800f714

08003418 <process_cycle_fix>:
void process_cycle_fix(PulseProcessor *self) {
 8003418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800341c:	b092      	sub	sp, #72	; 0x48
 800341e:	4604      	mov	r4, r0
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8003420:	2300      	movs	r3, #0
 8003422:	9310      	str	r3, [sp, #64]	; 0x40
 8003424:	9311      	str	r3, [sp, #68]	; 0x44
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8003426:	930f      	str	r3, [sp, #60]	; 0x3c
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8003428:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800342a:	b91b      	cbnz	r3, 8003434 <process_cycle_fix+0x1c>
 800342c:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 8003430:	2a00      	cmp	r2, #0
 8003432:	d079      	beq.n	8003528 <process_cycle_fix+0x110>
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8003434:	6862      	ldr	r2, [r4, #4]
 8003436:	2a09      	cmp	r2, #9
 8003438:	d805      	bhi.n	8003446 <process_cycle_fix+0x2e>
 800343a:	b123      	cbz	r3, 8003446 <process_cycle_fix+0x2e>
 800343c:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003440:	b10b      	cbz	r3, 8003446 <process_cycle_fix+0x2e>
        	self->cycle_fix_level_++;
 8003442:	3201      	adds	r2, #1
 8003444:	6062      	str	r2, [r4, #4]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8003446:	2500      	movs	r5, #0
 8003448:	e014      	b.n	8003474 <process_cycle_fix+0x5c>
                if (num_pulses > 1) {
 800344a:	2f01      	cmp	r7, #1
 800344c:	d911      	bls.n	8003472 <process_cycle_fix+0x5a>
                    pulse_start_corrections[b] /= num_pulses;
 800344e:	ab12      	add	r3, sp, #72	; 0x48
 8003450:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 8003454:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8003458:	fbb3 f3f7 	udiv	r3, r3, r7
 800345c:	f842 3c08 	str.w	r3, [r2, #-8]
                    pulse_lens[b] /= num_pulses;
 8003460:	ab12      	add	r3, sp, #72	; 0x48
 8003462:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 8003466:	f832 3c0c 	ldrh.w	r3, [r2, #-12]
 800346a:	fbb3 f7f7 	udiv	r7, r3, r7
 800346e:	f822 7c0c 	strh.w	r7, [r2, #-12]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8003472:	3501      	adds	r5, #1
 8003474:	2d01      	cmp	r5, #1
 8003476:	dc31      	bgt.n	80034dc <process_cycle_fix+0xc4>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8003478:	2364      	movs	r3, #100	; 0x64
 800347a:	fb03 4305 	mla	r3, r3, r5, r4
 800347e:	6f1f      	ldr	r7, [r3, #112]	; 0x70
            if (num_pulses) {
 8003480:	2f00      	cmp	r7, #0
 8003482:	d0f6      	beq.n	8003472 <process_cycle_fix+0x5a>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8003484:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 8003488:	4b7e      	ldr	r3, [pc, #504]	; (8003684 <process_cycle_fix+0x26c>)
 800348a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800348e:	4498      	add	r8, r3
 8003490:	fa1f f888 	uxth.w	r8, r8
                for (uint32_t i = 0; i < num_pulses; i++) {
 8003494:	2600      	movs	r6, #0
 8003496:	42be      	cmp	r6, r7
 8003498:	d2d7      	bcs.n	800344a <process_cycle_fix+0x32>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	fb01 f105 	mul.w	r1, r1, r5
 80034a0:	3110      	adds	r1, #16
 80034a2:	4632      	mov	r2, r6
 80034a4:	4421      	add	r1, r4
 80034a6:	a807      	add	r0, sp, #28
 80034a8:	f7ff ff0c 	bl	80032c4 <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 80034ac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80034b0:	eba3 0208 	sub.w	r2, r3, r8
 80034b4:	ab12      	add	r3, sp, #72	; 0x48
 80034b6:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 80034ba:	f851 3c08 	ldr.w	r3, [r1, #-8]
 80034be:	4413      	add	r3, r2
 80034c0:	f841 3c08 	str.w	r3, [r1, #-8]
                    pulse_lens[b] += pulse.pulse_len;
 80034c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80034c8:	aa12      	add	r2, sp, #72	; 0x48
 80034ca:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 80034ce:	f832 1c0c 	ldrh.w	r1, [r2, #-12]
 80034d2:	440b      	add	r3, r1
 80034d4:	f822 3c0c 	strh.w	r3, [r2, #-12]
                for (uint32_t i = 0; i < num_pulses; i++) {
 80034d8:	3601      	adds	r6, #1
 80034da:	e7dc      	b.n	8003496 <process_cycle_fix+0x7e>
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 80034dc:	aa0f      	add	r2, sp, #60	; 0x3c
 80034de:	68e1      	ldr	r1, [r4, #12]
 80034e0:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 80034e4:	f7fd ffea 	bl	80014bc <process_pulse_lengths>
    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 80034e8:	68e1      	ldr	r1, [r4, #12]
 80034ea:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 80034ee:	f7fe f81f 	bl	8001530 <get_phase>
    if (cycle_phase >= 0) {
 80034f2:	1e07      	subs	r7, r0, #0
 80034f4:	db7e      	blt.n	80035f4 <process_cycle_fix+0x1dc>
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 80034f6:	2220      	movs	r2, #32
 80034f8:	2100      	movs	r1, #0
 80034fa:	a807      	add	r0, sp, #28
 80034fc:	f00a ff57 	bl	800e3ae <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8003500:	2500      	movs	r5, #0
 8003502:	9503      	str	r5, [sp, #12]
 8003504:	9504      	str	r5, [sp, #16]
 8003506:	9505      	str	r5, [sp, #20]
 8003508:	9506      	str	r5, [sp, #24]
        uint32_t emitting_base = cycle_phase >> 1;
 800350a:	107b      	asrs	r3, r7, #1
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 800350c:	8926      	ldrh	r6, [r4, #8]
 800350e:	4a5d      	ldr	r2, [pc, #372]	; (8003684 <process_cycle_fix+0x26c>)
 8003510:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003514:	4416      	add	r6, r2
 8003516:	aa12      	add	r2, sp, #72	; 0x48
 8003518:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800351c:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8003520:	fa13 f686 	uxtah	r6, r3, r6
 8003524:	b2b6      	uxth	r6, r6
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8003526:	e011      	b.n	800354c <process_cycle_fix+0x134>
    	if(self->cycle_fix_level_ > 0){
 8003528:	6843      	ldr	r3, [r0, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0dc      	beq.n	80034e8 <process_cycle_fix+0xd0>
    		self->cycle_fix_level_--;
 800352e:	3b01      	subs	r3, #1
 8003530:	6043      	str	r3, [r0, #4]
 8003532:	e7d9      	b.n	80034e8 <process_cycle_fix+0xd0>
					short_pulses[input_idx] = &p;
 8003534:	aa12      	add	r2, sp, #72	; 0x48
 8003536:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800353a:	a801      	add	r0, sp, #4
 800353c:	f842 0c2c 	str.w	r0, [r2, #-44]
					short_pulse_timings[input_idx] = pulse_timing;
 8003540:	aa12      	add	r2, sp, #72	; 0x48
 8003542:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003546:	f821 3c3c 	strh.w	r3, [r1, #-60]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 800354a:	3501      	adds	r5, #1
 800354c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8003550:	42ab      	cmp	r3, r5
 8003552:	d922      	bls.n	800359a <process_cycle_fix+0x182>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8003554:	462a      	mov	r2, r5
 8003556:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 800355a:	a801      	add	r0, sp, #4
 800355c:	f7ff feb2 	bl	80032c4 <vector_get>
            uint32_t input_idx = p.input_idx;
 8003560:	f89d 1004 	ldrb.w	r1, [sp, #4]
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8003564:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003568:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800356c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003570:	b29b      	uxth	r3, r3
 8003572:	1b9b      	subs	r3, r3, r6
 8003574:	b29b      	uxth	r3, r3
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8003576:	f5a3 6299 	sub.w	r2, r3, #1224	; 0x4c8
 800357a:	b292      	uxth	r2, r2
 800357c:	f241 5cb0 	movw	ip, #5552	; 0x15b0
 8003580:	4562      	cmp	r2, ip
 8003582:	d8e2      	bhi.n	800354a <process_cycle_fix+0x132>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8003584:	aa12      	add	r2, sp, #72	; 0x48
 8003586:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800358a:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 800358e:	2a00      	cmp	r2, #0
 8003590:	d0d0      	beq.n	8003534 <process_cycle_fix+0x11c>
 8003592:	8892      	ldrh	r2, [r2, #4]
 8003594:	4290      	cmp	r0, r2
 8003596:	d9d8      	bls.n	800354a <process_cycle_fix+0x132>
 8003598:	e7cc      	b.n	8003534 <process_cycle_fix+0x11c>
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 800359a:	2300      	movs	r3, #0
 800359c:	e000      	b.n	80035a0 <process_cycle_fix+0x188>
 800359e:	3301      	adds	r3, #1
 80035a0:	6822      	ldr	r2, [r4, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d926      	bls.n	80035f4 <process_cycle_fix+0x1dc>
            if (short_pulses[i]) {
 80035a6:	aa12      	add	r2, sp, #72	; 0x48
 80035a8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80035ac:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 80035b0:	2a00      	cmp	r2, #0
 80035b2:	d0f4      	beq.n	800359e <process_cycle_fix+0x186>
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 80035b4:	aa12      	add	r2, sp, #72	; 0x48
 80035b6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80035ba:	f832 2c3c 	ldrh.w	r2, [r2, #-60]
 80035be:	f5a2 627a 	sub.w	r2, r2, #4000	; 0xfa0
 80035c2:	ee07 2a90 	vmov	s15, r2
 80035c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ca:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003688 <process_cycle_fix+0x270>
 80035ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d2:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800368c <process_cycle_fix+0x274>
 80035d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035da:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 80035de:	f102 0172 	add.w	r1, r2, #114	; 0x72
 80035e2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80035e6:	ed81 7a00 	vstr	s14, [r1]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 80035ea:	68e1      	ldr	r1, [r4, #12]
 80035ec:	3276      	adds	r2, #118	; 0x76
 80035ee:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80035f2:	e7d4      	b.n	800359e <process_cycle_fix+0x186>
    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 80035f4:	2f00      	cmp	r7, #0
 80035f6:	db0e      	blt.n	8003616 <process_cycle_fix+0x1fe>
 80035f8:	2f03      	cmp	r7, #3
 80035fa:	bf14      	ite	ne
 80035fc:	2300      	movne	r3, #0
 80035fe:	2301      	moveq	r3, #1
 8003600:	b33b      	cbz	r3, 8003652 <process_cycle_fix+0x23a>
        self->angles_frame_.time = self->cycle_start_time_;
 8003602:	8923      	ldrh	r3, [r4, #8]
 8003604:	f8a4 31b8 	strh.w	r3, [r4, #440]	; 0x1b8
                                        ? kCycleSynced : kCycleSyncing;
 8003608:	2f00      	cmp	r7, #0
 800360a:	db0b      	blt.n	8003624 <process_cycle_fix+0x20c>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 800360c:	6863      	ldr	r3, [r4, #4]
 800360e:	2b04      	cmp	r3, #4
 8003610:	d835      	bhi.n	800367e <process_cycle_fix+0x266>
                                        ? kCycleSynced : kCycleSyncing;
 8003612:	2364      	movs	r3, #100	; 0x64
 8003614:	e007      	b.n	8003626 <process_cycle_fix+0x20e>
    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8003616:	68e3      	ldr	r3, [r4, #12]
 8003618:	f013 0f03 	tst.w	r3, #3
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	e7ed      	b.n	8003600 <process_cycle_fix+0x1e8>
                                        ? kCycleSynced : kCycleSyncing;
 8003624:	2364      	movs	r3, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8003626:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 800362a:	68e3      	ldr	r3, [r4, #12]
 800362c:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 8003630:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
        consume_angles(self->next, &self->angles_frame_);
 8003634:	f504 71dc 	add.w	r1, r4, #440	; 0x1b8
 8003638:	f8d4 02cc 	ldr.w	r0, [r4, #716]	; 0x2cc
 800363c:	f7fe fd1e 	bl	800207c <consume_angles>
        osMessageQueuePut(viveQueue, (void *) &self->next->vive_vars_, NULL, 0);
 8003640:	f8d4 12cc 	ldr.w	r1, [r4, #716]	; 0x2cc
 8003644:	2300      	movs	r3, #0
 8003646:	461a      	mov	r2, r3
 8003648:	3170      	adds	r1, #112	; 0x70
 800364a:	4811      	ldr	r0, [pc, #68]	; (8003690 <process_cycle_fix+0x278>)
 800364c:	6800      	ldr	r0, [r0, #0]
 800364e:	f006 fb01 	bl	8009c54 <osMessageQueuePut>
    reset_cycle_long_pulses(self);
 8003652:	4620      	mov	r0, r4
 8003654:	f7ff fe6b 	bl	800332e <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8003658:	4620      	mov	r0, r4
 800365a:	f7ff fe77 	bl	800334c <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 800365e:	4620      	mov	r0, r4
 8003660:	f7ff fe7a 	bl	8003358 <reset_cycle_short_pulses>
    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8003664:	8922      	ldrh	r2, [r4, #8]
 8003666:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003668:	4413      	add	r3, r2
 800366a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800366e:	330d      	adds	r3, #13
 8003670:	8123      	strh	r3, [r4, #8]
    self->cycle_idx_++;
 8003672:	68e3      	ldr	r3, [r4, #12]
 8003674:	3301      	adds	r3, #1
 8003676:	60e3      	str	r3, [r4, #12]
}
 8003678:	b012      	add	sp, #72	; 0x48
 800367a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                        ? kCycleSynced : kCycleSyncing;
 800367e:	23c8      	movs	r3, #200	; 0xc8
 8003680:	e7d1      	b.n	8003626 <process_cycle_fix+0x20e>
 8003682:	bf00      	nop
 8003684:	0800f714 	.word	0x0800f714
 8003688:	40490fdb 	.word	0x40490fdb
 800368c:	46023400 	.word	0x46023400
 8003690:	20004bc0 	.word	0x20004bc0

08003694 <process_short_pulse>:
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 8003694:	6843      	ldr	r3, [r0, #4]
 8003696:	b11b      	cbz	r3, 80036a0 <process_short_pulse+0xc>
 8003698:	780a      	ldrb	r2, [r1, #0]
 800369a:	6803      	ldr	r3, [r0, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d300      	bcc.n	80036a2 <process_short_pulse+0xe>
 80036a0:	4770      	bx	lr
void process_short_pulse(PulseProcessor *self, Pulse *p){
 80036a2:	b510      	push	{r4, lr}
 80036a4:	4604      	mov	r4, r0
		vector_push(&self->cycle_short_pulses_, p);
 80036a6:	30d8      	adds	r0, #216	; 0xd8
 80036a8:	f7ff fddc 	bl	8003264 <vector_push>
		process_cycle_fix(self);
 80036ac:	4620      	mov	r0, r4
 80036ae:	f7ff feb3 	bl	8003418 <process_cycle_fix>
}
 80036b2:	bd10      	pop	{r4, pc}

080036b4 <consume_pulse>:
void consume_pulse(PulseProcessor *self, Pulse* p){
 80036b4:	b508      	push	{r3, lr}
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 80036b6:	888b      	ldrh	r3, [r1, #4]
 80036b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80036bc:	d203      	bcs.n	80036c6 <consume_pulse+0x12>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 80036be:	2b27      	cmp	r3, #39	; 0x27
 80036c0:	d802      	bhi.n	80036c8 <consume_pulse+0x14>
		process_short_pulse(self, p);
 80036c2:	f7ff ffe7 	bl	8003694 <process_short_pulse>
}
 80036c6:	bd08      	pop	{r3, pc}
		process_long_pulse(self, p);
 80036c8:	f7ff fe4c 	bl	8003364 <process_long_pulse>
 80036cc:	e7fb      	b.n	80036c6 <consume_pulse+0x12>

080036ce <MX_RF_Init>:

/* RF init function */
void MX_RF_Init(void)
{

}
 80036ce:	4770      	bx	lr

080036d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80036d0:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80036d2:	4808      	ldr	r0, [pc, #32]	; (80036f4 <MX_RTC_Init+0x24>)
 80036d4:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <MX_RTC_Init+0x28>)
 80036d6:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036d8:	2300      	movs	r3, #0
 80036da:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80036dc:	230f      	movs	r3, #15
 80036de:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80036e0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80036e4:	60c3      	str	r3, [r0, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036e6:	f003 ff93 	bl	8007610 <HAL_RTC_Init>
 80036ea:	b900      	cbnz	r0, 80036ee <MX_RTC_Init+0x1e>
  {
    Error_Handler();
  }

}
 80036ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80036ee:	f7ff fdab 	bl	8003248 <Error_Handler>
}
 80036f2:	e7fb      	b.n	80036ec <MX_RTC_Init+0x1c>
 80036f4:	20005718 	.word	0x20005718
 80036f8:	40002800 	.word	0x40002800

080036fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80036fc:	6802      	ldr	r2, [r0, #0]
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RTC_MspInit+0x1c>)
 8003700:	429a      	cmp	r2, r3
 8003702:	d000      	beq.n	8003706 <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003704:	4770      	bx	lr
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800370a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800370e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003716:	e7f5      	b.n	8003704 <HAL_RTC_MspInit+0x8>
 8003718:	40002800 	.word	0x40002800

0800371c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800371c:	b500      	push	{lr}
 800371e:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003726:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800372a:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003732:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003734:	9b01      	ldr	r3, [sp, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003736:	2200      	movs	r2, #0
 8003738:	210f      	movs	r1, #15
 800373a:	f06f 0001 	mvn.w	r0, #1
 800373e:	f001 f92d 	bl	800499c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8003742:	2200      	movs	r2, #0
 8003744:	210f      	movs	r1, #15
 8003746:	202c      	movs	r0, #44	; 0x2c
 8003748:	f001 f928 	bl	800499c <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 800374c:	2200      	movs	r2, #0
 800374e:	210f      	movs	r1, #15
 8003750:	202d      	movs	r0, #45	; 0x2d
 8003752:	f001 f923 	bl	800499c <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8003756:	b003      	add	sp, #12
 8003758:	f85d fb04 	ldr.w	pc, [sp], #4

0800375c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800375c:	b500      	push	{lr}
 800375e:	b08b      	sub	sp, #44	; 0x2c
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8003760:	2200      	movs	r2, #0
 8003762:	4601      	mov	r1, r0
 8003764:	2019      	movs	r0, #25
 8003766:	f001 f919 	bl	800499c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800376a:	2019      	movs	r0, #25
 800376c:	f001 f94a 	bl	8004a04 <HAL_NVIC_EnableIRQ>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003774:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800377c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003782:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003784:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003786:	a902      	add	r1, sp, #8
 8003788:	a803      	add	r0, sp, #12
 800378a:	f003 fc85 	bl	8007098 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800378e:	f003 fc71 	bl	8007074 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003792:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <HAL_InitTick+0x6c>)
 8003794:	fba3 2300 	umull	r2, r3, r3, r0
 8003798:	0c9b      	lsrs	r3, r3, #18
 800379a:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800379c:	480b      	ldr	r0, [pc, #44]	; (80037cc <HAL_InitTick+0x70>)
 800379e:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <HAL_InitTick+0x74>)
 80037a0:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80037a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037a6:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80037a8:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ae:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80037b0:	f004 fa1e 	bl	8007bf0 <HAL_TIM_Base_Init>
 80037b4:	b118      	cbz	r0, 80037be <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80037b6:	2001      	movs	r0, #1
}
 80037b8:	b00b      	add	sp, #44	; 0x2c
 80037ba:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 80037be:	4803      	ldr	r0, [pc, #12]	; (80037cc <HAL_InitTick+0x70>)
 80037c0:	f004 f8f6 	bl	80079b0 <HAL_TIM_Base_Start_IT>
 80037c4:	e7f8      	b.n	80037b8 <HAL_InitTick+0x5c>
 80037c6:	bf00      	nop
 80037c8:	431bde83 	.word	0x431bde83
 80037cc:	2000573c 	.word	0x2000573c
 80037d0:	40012c00 	.word	0x40012c00

080037d4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037d4:	4770      	bx	lr

080037d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d6:	e7fe      	b.n	80037d6 <HardFault_Handler>

080037d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d8:	e7fe      	b.n	80037d8 <MemManage_Handler>

080037da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037da:	e7fe      	b.n	80037da <BusFault_Handler>

080037dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037dc:	e7fe      	b.n	80037dc <UsageFault_Handler>

080037de <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037de:	4770      	bx	lr

080037e0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80037e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80037e2:	2004      	movs	r0, #4
 80037e4:	f001 fc10 	bl	8005008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcessorTaskHandle, 0x00000004U);
 80037e8:	2104      	movs	r1, #4
 80037ea:	4b02      	ldr	r3, [pc, #8]	; (80037f4 <EXTI2_IRQHandler+0x14>)
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	f005 fef9 	bl	80095e4 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 80037f2:	bd08      	pop	{r3, pc}
 80037f4:	20004ad4 	.word	0x20004ad4

080037f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80037f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037fa:	4802      	ldr	r0, [pc, #8]	; (8003804 <DMA1_Channel1_IRQHandler+0xc>)
 80037fc:	f001 fad9 	bl	8004db2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003800:	bd08      	pop	{r3, pc}
 8003802:	bf00      	nop
 8003804:	20004a48 	.word	0x20004a48

08003808 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8003808:	b508      	push	{r3, lr}
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 800380a:	4802      	ldr	r0, [pc, #8]	; (8003814 <COMP_IRQHandler+0xc>)
 800380c:	f001 f88e 	bl	800492c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8003810:	bd08      	pop	{r3, pc}
 8003812:	bf00      	nop
 8003814:	20005000 	.word	0x20005000

08003818 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003818:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800381a:	2020      	movs	r0, #32
 800381c:	f001 fbf4 	bl	8005008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003820:	bd08      	pop	{r3, pc}
	...

08003824 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003824:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003826:	4803      	ldr	r0, [pc, #12]	; (8003834 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003828:	f004 f8dd 	bl	80079e6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800382c:	4802      	ldr	r0, [pc, #8]	; (8003838 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800382e:	f004 f8da 	bl	80079e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003832:	bd08      	pop	{r3, pc}
 8003834:	2000573c 	.word	0x2000573c
 8003838:	200057bc 	.word	0x200057bc

0800383c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800383c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800383e:	4802      	ldr	r0, [pc, #8]	; (8003848 <I2C1_EV_IRQHandler+0xc>)
 8003840:	f002 f8f8 	bl	8005a34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003844:	bd08      	pop	{r3, pc}
 8003846:	bf00      	nop
 8003848:	2000519c 	.word	0x2000519c

0800384c <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 800384c:	b508      	push	{r3, lr}
  HW_IPCC_Tx_Handler();
 800384e:	f00a f9d1 	bl	800dbf4 <HW_IPCC_Tx_Handler>

  return;
}
 8003852:	bd08      	pop	{r3, pc}

08003854 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8003854:	b508      	push	{r3, lr}
  HW_IPCC_Rx_Handler();
 8003856:	f00a fa49 	bl	800dcec <HW_IPCC_Rx_Handler>
  return;
}
 800385a:	bd08      	pop	{r3, pc}

0800385c <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 800385c:	b40c      	push	{r2, r3}
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800385e:	b002      	add	sp, #8
 8003860:	4770      	bx	lr
	...

08003864 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003864:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <SystemInit+0x5c>)
 8003866:	2100      	movs	r1, #0
 8003868:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800386a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800386e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003882:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003886:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 800388e:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8003892:	4002      	ands	r2, r0
 8003894:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003896:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800389a:	f022 0205 	bic.w	r2, r2, #5
 800389e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80038a2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80038ae:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <SystemInit+0x60>)
 80038b0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80038b2:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038ba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038bc:	6199      	str	r1, [r3, #24]
}
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00
 80038c4:	22041000 	.word	0x22041000

080038c8 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80038c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038cc:	6813      	ldr	r3, [r2, #0]
 80038ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80038d2:	4929      	ldr	r1, [pc, #164]	; (8003978 <SystemCoreClockUpdate+0xb0>)
 80038d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d8:	6893      	ldr	r3, [r2, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b0c      	cmp	r3, #12
 80038e0:	d846      	bhi.n	8003970 <SystemCoreClockUpdate+0xa8>
 80038e2:	e8df f003 	tbb	[pc, r3]
 80038e6:	4507      	.short	0x4507
 80038e8:	45174545 	.word	0x45174545
 80038ec:	451b4545 	.word	0x451b4545
 80038f0:	4545      	.short	0x4545
 80038f2:	1f          	.byte	0x1f
 80038f3:	00          	.byte	0x00
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80038f4:	4b21      	ldr	r3, [pc, #132]	; (800397c <SystemCoreClockUpdate+0xb4>)
 80038f6:	6019      	str	r1, [r3, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80038f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003902:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <SystemCoreClockUpdate+0xb8>)
 8003904:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8003908:	4a1c      	ldr	r2, [pc, #112]	; (800397c <SystemCoreClockUpdate+0xb4>)
 800390a:	6813      	ldr	r3, [r2, #0]
 800390c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003910:	6013      	str	r3, [r2, #0]

}
 8003912:	4770      	bx	lr
        SystemCoreClock = HSI_VALUE;
 8003914:	4b19      	ldr	r3, [pc, #100]	; (800397c <SystemCoreClockUpdate+0xb4>)
 8003916:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <SystemCoreClockUpdate+0xbc>)
 8003918:	601a      	str	r2, [r3, #0]
      break;
 800391a:	e7ed      	b.n	80038f8 <SystemCoreClockUpdate+0x30>
      SystemCoreClock = HSE_VALUE;
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <SystemCoreClockUpdate+0xb4>)
 800391e:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <SystemCoreClockUpdate+0xc0>)
 8003920:	601a      	str	r2, [r3, #0]
      break;
 8003922:	e7e9      	b.n	80038f8 <SystemCoreClockUpdate+0x30>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003934:	3301      	adds	r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003936:	2a02      	cmp	r2, #2
 8003938:	d012      	beq.n	8003960 <SystemCoreClockUpdate+0x98>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800393a:	2a03      	cmp	r2, #3
 800393c:	d014      	beq.n	8003968 <SystemCoreClockUpdate+0xa0>
        pllvco = (msirange / pllm);
 800393e:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003946:	68ca      	ldr	r2, [r1, #12]
 8003948:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800394c:	fb03 f302 	mul.w	r3, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003950:	68ca      	ldr	r2, [r1, #12]
 8003952:	0f52      	lsrs	r2, r2, #29
 8003954:	3201      	adds	r2, #1
      SystemCoreClock = pllvco/pllr;
 8003956:	fbb3 f3f2 	udiv	r3, r3, r2
 800395a:	4a08      	ldr	r2, [pc, #32]	; (800397c <SystemCoreClockUpdate+0xb4>)
 800395c:	6013      	str	r3, [r2, #0]
      break;
 800395e:	e7cb      	b.n	80038f8 <SystemCoreClockUpdate+0x30>
        pllvco = (HSI_VALUE / pllm);
 8003960:	4a08      	ldr	r2, [pc, #32]	; (8003984 <SystemCoreClockUpdate+0xbc>)
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	e7ec      	b.n	8003942 <SystemCoreClockUpdate+0x7a>
        pllvco = (HSE_VALUE / pllm);
 8003968:	4a07      	ldr	r2, [pc, #28]	; (8003988 <SystemCoreClockUpdate+0xc0>)
 800396a:	fbb2 f3f3 	udiv	r3, r2, r3
 800396e:	e7e8      	b.n	8003942 <SystemCoreClockUpdate+0x7a>
      SystemCoreClock = msirange;
 8003970:	4b02      	ldr	r3, [pc, #8]	; (800397c <SystemCoreClockUpdate+0xb4>)
 8003972:	6019      	str	r1, [r3, #0]
      break;
 8003974:	e7c0      	b.n	80038f8 <SystemCoreClockUpdate+0x30>
 8003976:	bf00      	nop
 8003978:	0800f778 	.word	0x0800f778
 800397c:	20000018 	.word	0x20000018
 8003980:	0800f718 	.word	0x0800f718
 8003984:	00f42400 	.word	0x00f42400
 8003988:	01e84800 	.word	0x01e84800

0800398c <MX_TIM16_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800398c:	b508      	push	{r3, lr}

  htim16.Instance = TIM16;
 800398e:	480a      	ldr	r0, [pc, #40]	; (80039b8 <MX_TIM16_Init+0x2c>)
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <MX_TIM16_Init+0x30>)
 8003992:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 31;
 8003994:	231f      	movs	r3, #31
 8003996:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003998:	2300      	movs	r3, #0
 800399a:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 65535;
 800399c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039a0:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a2:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 80039a4:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039a6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80039a8:	f004 f922 	bl	8007bf0 <HAL_TIM_Base_Init>
 80039ac:	b900      	cbnz	r0, 80039b0 <MX_TIM16_Init+0x24>
  {
    Error_Handler();
  }

}
 80039ae:	bd08      	pop	{r3, pc}
    Error_Handler();
 80039b0:	f7ff fc4a 	bl	8003248 <Error_Handler>
}
 80039b4:	e7fb      	b.n	80039ae <MX_TIM16_Init+0x22>
 80039b6:	bf00      	nop
 80039b8:	200057bc 	.word	0x200057bc
 80039bc:	40014400 	.word	0x40014400

080039c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039c0:	b500      	push	{lr}
 80039c2:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM2)
 80039c4:	6803      	ldr	r3, [r0, #0]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d005      	beq.n	80039d8 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM16)
 80039cc:	4a12      	ldr	r2, [pc, #72]	; (8003a18 <HAL_TIM_Base_MspInit+0x58>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00e      	beq.n	80039f0 <HAL_TIM_Base_MspInit+0x30>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80039d2:	b003      	add	sp, #12
 80039d4:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->APB1ENR1, Periphs);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80039ec:	9b00      	ldr	r3, [sp, #0]
 80039ee:	e7f0      	b.n	80039d2 <HAL_TIM_Base_MspInit+0x12>
  SET_BIT(RCC->APB2ENR, Periphs);
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80039fa:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003a04:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	4611      	mov	r1, r2
 8003a0a:	2019      	movs	r0, #25
 8003a0c:	f000 ffc6 	bl	800499c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a10:	2019      	movs	r0, #25
 8003a12:	f000 fff7 	bl	8004a04 <HAL_NVIC_EnableIRQ>
}
 8003a16:	e7dc      	b.n	80039d2 <HAL_TIM_Base_MspInit+0x12>
 8003a18:	40014400 	.word	0x40014400

08003a1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a1c:	b500      	push	{lr}
 8003a1e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a20:	2300      	movs	r3, #0
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	9302      	str	r3, [sp, #8]
 8003a26:	9303      	str	r3, [sp, #12]
 8003a28:	9304      	str	r3, [sp, #16]
 8003a2a:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM2)
 8003a2c:	6803      	ldr	r3, [r0, #0]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d002      	beq.n	8003a3a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003a34:	b007      	add	sp, #28
 8003a36:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a40:	f042 0202 	orr.w	r2, r2, #2
 8003a44:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003a4e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a50:	2308      	movs	r3, #8
 8003a52:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	2302      	movs	r3, #2
 8003a56:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5c:	a901      	add	r1, sp, #4
 8003a5e:	4802      	ldr	r0, [pc, #8]	; (8003a68 <HAL_TIM_MspPostInit+0x4c>)
 8003a60:	f001 fa0a 	bl	8004e78 <HAL_GPIO_Init>
}
 8003a64:	e7e6      	b.n	8003a34 <HAL_TIM_MspPostInit+0x18>
 8003a66:	bf00      	nop
 8003a68:	48000400 	.word	0x48000400

08003a6c <MX_TIM2_Init>:
{
 8003a6c:	b500      	push	{lr}
 8003a6e:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a70:	2300      	movs	r3, #0
 8003a72:	930a      	str	r3, [sp, #40]	; 0x28
 8003a74:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a76:	930c      	str	r3, [sp, #48]	; 0x30
 8003a78:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a7a:	9307      	str	r3, [sp, #28]
 8003a7c:	9308      	str	r3, [sp, #32]
 8003a7e:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	9302      	str	r3, [sp, #8]
 8003a86:	9303      	str	r3, [sp, #12]
 8003a88:	9304      	str	r3, [sp, #16]
 8003a8a:	9305      	str	r3, [sp, #20]
 8003a8c:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 8003a8e:	4823      	ldr	r0, [pc, #140]	; (8003b1c <MX_TIM2_Init+0xb0>)
 8003a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a94:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 639;
 8003a96:	f240 227f 	movw	r2, #639	; 0x27f
 8003a9a:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 9;
 8003a9e:	2209      	movs	r2, #9
 8003aa0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aa4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003aa6:	f004 f8a3 	bl	8007bf0 <HAL_TIM_Base_Init>
 8003aaa:	bb40      	cbnz	r0, 8003afe <MX_TIM2_Init+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aac:	a90e      	add	r1, sp, #56	; 0x38
 8003aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab2:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ab6:	4819      	ldr	r0, [pc, #100]	; (8003b1c <MX_TIM2_Init+0xb0>)
 8003ab8:	f004 f9ae 	bl	8007e18 <HAL_TIM_ConfigClockSource>
 8003abc:	bb10      	cbnz	r0, 8003b04 <MX_TIM2_Init+0x98>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003abe:	4817      	ldr	r0, [pc, #92]	; (8003b1c <MX_TIM2_Init+0xb0>)
 8003ac0:	f004 f8af 	bl	8007c22 <HAL_TIM_PWM_Init>
 8003ac4:	bb08      	cbnz	r0, 8003b0a <MX_TIM2_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ace:	a907      	add	r1, sp, #28
 8003ad0:	4812      	ldr	r0, [pc, #72]	; (8003b1c <MX_TIM2_Init+0xb0>)
 8003ad2:	f004 fa83 	bl	8007fdc <HAL_TIMEx_MasterConfigSynchronization>
 8003ad6:	b9d8      	cbnz	r0, 8003b10 <MX_TIM2_Init+0xa4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ad8:	2360      	movs	r3, #96	; 0x60
 8003ada:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 9;
 8003adc:	2309      	movs	r3, #9
 8003ade:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ae4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	4669      	mov	r1, sp
 8003aea:	480c      	ldr	r0, [pc, #48]	; (8003b1c <MX_TIM2_Init+0xb0>)
 8003aec:	f004 f8ee 	bl	8007ccc <HAL_TIM_PWM_ConfigChannel>
 8003af0:	b988      	cbnz	r0, 8003b16 <MX_TIM2_Init+0xaa>
  HAL_TIM_MspPostInit(&htim2);
 8003af2:	480a      	ldr	r0, [pc, #40]	; (8003b1c <MX_TIM2_Init+0xb0>)
 8003af4:	f7ff ff92 	bl	8003a1c <HAL_TIM_MspPostInit>
}
 8003af8:	b00f      	add	sp, #60	; 0x3c
 8003afa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003afe:	f7ff fba3 	bl	8003248 <Error_Handler>
 8003b02:	e7d3      	b.n	8003aac <MX_TIM2_Init+0x40>
    Error_Handler();
 8003b04:	f7ff fba0 	bl	8003248 <Error_Handler>
 8003b08:	e7d9      	b.n	8003abe <MX_TIM2_Init+0x52>
    Error_Handler();
 8003b0a:	f7ff fb9d 	bl	8003248 <Error_Handler>
 8003b0e:	e7da      	b.n	8003ac6 <MX_TIM2_Init+0x5a>
    Error_Handler();
 8003b10:	f7ff fb9a 	bl	8003248 <Error_Handler>
 8003b14:	e7e0      	b.n	8003ad8 <MX_TIM2_Init+0x6c>
    Error_Handler();
 8003b16:	f7ff fb97 	bl	8003248 <Error_Handler>
 8003b1a:	e7ea      	b.n	8003af2 <MX_TIM2_Init+0x86>
 8003b1c:	2000577c 	.word	0x2000577c

08003b20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b20:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8003b22:	4818      	ldr	r0, [pc, #96]	; (8003b84 <MX_USART1_UART_Init+0x64>)
 8003b24:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <MX_USART1_UART_Init+0x68>)
 8003b26:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003b28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003b2c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b32:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b34:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b36:	220c      	movs	r2, #12
 8003b38:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b3a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8003b3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b40:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b42:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b44:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b46:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b48:	f005 fbb9 	bl	80092be <HAL_UART_Init>
 8003b4c:	b970      	cbnz	r0, 8003b6c <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b4e:	2100      	movs	r1, #0
 8003b50:	480c      	ldr	r0, [pc, #48]	; (8003b84 <MX_USART1_UART_Init+0x64>)
 8003b52:	f005 fc40 	bl	80093d6 <HAL_UARTEx_SetTxFifoThreshold>
 8003b56:	b960      	cbnz	r0, 8003b72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b58:	2100      	movs	r1, #0
 8003b5a:	480a      	ldr	r0, [pc, #40]	; (8003b84 <MX_USART1_UART_Init+0x64>)
 8003b5c:	f005 fc60 	bl	8009420 <HAL_UARTEx_SetRxFifoThreshold>
 8003b60:	b950      	cbnz	r0, 8003b78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b62:	4808      	ldr	r0, [pc, #32]	; (8003b84 <MX_USART1_UART_Init+0x64>)
 8003b64:	f005 fc18 	bl	8009398 <HAL_UARTEx_DisableFifoMode>
 8003b68:	b948      	cbnz	r0, 8003b7e <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
  }

}
 8003b6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003b6c:	f7ff fb6c 	bl	8003248 <Error_Handler>
 8003b70:	e7ed      	b.n	8003b4e <MX_USART1_UART_Init+0x2e>
    Error_Handler();
 8003b72:	f7ff fb69 	bl	8003248 <Error_Handler>
 8003b76:	e7ef      	b.n	8003b58 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 8003b78:	f7ff fb66 	bl	8003248 <Error_Handler>
 8003b7c:	e7f1      	b.n	8003b62 <MX_USART1_UART_Init+0x42>
    Error_Handler();
 8003b7e:	f7ff fb63 	bl	8003248 <Error_Handler>
}
 8003b82:	e7f2      	b.n	8003b6a <MX_USART1_UART_Init+0x4a>
 8003b84:	200057fc 	.word	0x200057fc
 8003b88:	40013800 	.word	0x40013800

08003b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b8c:	b500      	push	{lr}
 8003b8e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	2300      	movs	r3, #0
 8003b92:	9303      	str	r3, [sp, #12]
 8003b94:	9304      	str	r3, [sp, #16]
 8003b96:	9305      	str	r3, [sp, #20]
 8003b98:	9306      	str	r3, [sp, #24]
 8003b9a:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8003b9c:	6802      	ldr	r2, [r0, #0]
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_UART_MspInit+0x5c>)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d002      	beq.n	8003baa <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003ba4:	b009      	add	sp, #36	; 0x24
 8003ba6:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->APB2ENR, Periphs);
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bb4:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003bb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bb8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003bbc:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003bbe:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003bc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bc2:	f042 0202 	orr.w	r2, r2, #2
 8003bc6:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003bd0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bd2:	23c0      	movs	r3, #192	; 0xc0
 8003bd4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bda:	2307      	movs	r3, #7
 8003bdc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bde:	a903      	add	r1, sp, #12
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <HAL_UART_MspInit+0x60>)
 8003be2:	f001 f949 	bl	8004e78 <HAL_GPIO_Init>
}
 8003be6:	e7dd      	b.n	8003ba4 <HAL_UART_MspInit+0x18>
 8003be8:	40013800 	.word	0x40013800
 8003bec:	48000400 	.word	0x48000400

08003bf0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003bf0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bf2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bf4:	3304      	adds	r3, #4

08003bf6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bf6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bf8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003bfa:	d3f9      	bcc.n	8003bf0 <CopyDataInit>
  bx lr
 8003bfc:	4770      	bx	lr

08003bfe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003bfe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003c00:	3004      	adds	r0, #4

08003c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003c02:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003c04:	d3fb      	bcc.n	8003bfe <FillZerobss>
  bx lr
 8003c06:	4770      	bx	lr

08003c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c08:	480c      	ldr	r0, [pc, #48]	; (8003c3c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003c0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003c0c:	480c      	ldr	r0, [pc, #48]	; (8003c40 <LoopForever+0x8>)
 8003c0e:	490d      	ldr	r1, [pc, #52]	; (8003c44 <LoopForever+0xc>)
 8003c10:	4a0d      	ldr	r2, [pc, #52]	; (8003c48 <LoopForever+0x10>)
 8003c12:	2300      	movs	r3, #0
 8003c14:	f7ff ffef 	bl	8003bf6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003c18:	480c      	ldr	r0, [pc, #48]	; (8003c4c <LoopForever+0x14>)
 8003c1a:	490d      	ldr	r1, [pc, #52]	; (8003c50 <LoopForever+0x18>)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f7ff fff0 	bl	8003c02 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003c22:	480c      	ldr	r0, [pc, #48]	; (8003c54 <LoopForever+0x1c>)
 8003c24:	490c      	ldr	r1, [pc, #48]	; (8003c58 <LoopForever+0x20>)
 8003c26:	2300      	movs	r3, #0
 8003c28:	f7ff ffeb 	bl	8003c02 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c2c:	f7ff fe1a 	bl	8003864 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003c30:	f00a fb8e 	bl	800e350 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003c34:	f7ff fab0 	bl	8003198 <main>

08003c38 <LoopForever>:

LoopForever:
  b LoopForever
 8003c38:	e7fe      	b.n	8003c38 <LoopForever>
 8003c3a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003c3c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003c40:	20000004 	.word	0x20000004
 8003c44:	200000d8 	.word	0x200000d8
 8003c48:	08010268 	.word	0x08010268
  INIT_BSS _sbss, _ebss
 8003c4c:	20000188 	.word	0x20000188
 8003c50:	20005994 	.word	0x20005994
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003c54:	200300c4 	.word	0x200300c4
 8003c58:	20030b5a 	.word	0x20030b5a

08003c5c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c5c:	e7fe      	b.n	8003c5c <ADC1_IRQHandler>
	...

08003c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c60:	b510      	push	{r4, lr}
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <HAL_Init+0x28>)
 8003c64:	6813      	ldr	r3, [r2, #0]
 8003c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c6c:	2003      	movs	r0, #3
 8003c6e:	f000 fe83 	bl	8004978 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c72:	2000      	movs	r0, #0
 8003c74:	f7ff fd72 	bl	800375c <HAL_InitTick>
 8003c78:	b110      	cbz	r0, 8003c80 <HAL_Init+0x20>
  {
    status = HAL_ERROR;
 8003c7a:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	bd10      	pop	{r4, pc}
 8003c80:	4604      	mov	r4, r0
    HAL_MspInit();
 8003c82:	f7ff fd4b 	bl	800371c <HAL_MspInit>
 8003c86:	e7f9      	b.n	8003c7c <HAL_Init+0x1c>
 8003c88:	58004000 	.word	0x58004000

08003c8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003c8c:	4a03      	ldr	r2, [pc, #12]	; (8003c9c <HAL_IncTick+0x10>)
 8003c8e:	6813      	ldr	r3, [r2, #0]
 8003c90:	4903      	ldr	r1, [pc, #12]	; (8003ca0 <HAL_IncTick+0x14>)
 8003c92:	6809      	ldr	r1, [r1, #0]
 8003c94:	440b      	add	r3, r1
 8003c96:	6013      	str	r3, [r2, #0]
}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20005888 	.word	0x20005888
 8003ca0:	2000001c 	.word	0x2000001c

08003ca4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ca4:	4b01      	ldr	r3, [pc, #4]	; (8003cac <HAL_GetTick+0x8>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20005888 	.word	0x20005888

08003cb0 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8003cb0:	4b01      	ldr	r3, [pc, #4]	; (8003cb8 <HAL_GetTickPrio+0x8>)
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000020 	.word	0x20000020

08003cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 8003cc0:	f7ff fff0 	bl	8003ca4 <HAL_GetTick>
 8003cc4:	4605      	mov	r5, r0
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8003cc6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003cca:	d002      	beq.n	8003cd2 <HAL_Delay+0x16>
    {
      wait += (uint32_t)(uwTickFreq);
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <HAL_Delay+0x24>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	441c      	add	r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8003cd2:	f7ff ffe7 	bl	8003ca4 <HAL_GetTick>
 8003cd6:	1b40      	subs	r0, r0, r5
 8003cd8:	42a0      	cmp	r0, r4
 8003cda:	d3fa      	bcc.n	8003cd2 <HAL_Delay+0x16>
    {
    }
  }
 8003cdc:	bd38      	pop	{r3, r4, r5, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000001c 	.word	0x2000001c

08003ce4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ce4:	b530      	push	{r4, r5, lr}
 8003ce6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003cec:	2800      	cmp	r0, #0
 8003cee:	f000 80de 	beq.w	8003eae <HAL_ADC_Init+0x1ca>
 8003cf2:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cf4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003cf6:	b303      	cbz	r3, 8003d3a <HAL_ADC_Init+0x56>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cf8:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8003d00:	d005      	beq.n	8003d0e <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8003d08:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003d0c:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d0e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d10:	6893      	ldr	r3, [r2, #8]
 8003d12:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003d16:	d11d      	bne.n	8003d54 <HAL_ADC_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8003d18:	6893      	ldr	r3, [r2, #8]
 8003d1a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d26:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003d28:	4b62      	ldr	r3, [pc, #392]	; (8003eb4 <HAL_ADC_Init+0x1d0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	4a62      	ldr	r2, [pc, #392]	; (8003eb8 <HAL_ADC_Init+0x1d4>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003d38:	e009      	b.n	8003d4e <HAL_ADC_Init+0x6a>
    HAL_ADC_MspInit(hadc);
 8003d3a:	f7fd f8ad 	bl	8000e98 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8003d42:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003d46:	e7d7      	b.n	8003cf8 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8003d48:	9b01      	ldr	r3, [sp, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003d4e:	9b01      	ldr	r3, [sp, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f9      	bne.n	8003d48 <HAL_ADC_Init+0x64>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d54:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003d5c:	d178      	bne.n	8003e50 <HAL_ADC_Init+0x16c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003d60:	f042 0210 	orr.w	r2, r2, #16
 8003d64:	6562      	str	r2, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d66:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	65a2      	str	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d6e:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	f012 0f04 	tst.w	r2, #4
 8003d76:	d06d      	beq.n	8003e54 <HAL_ADC_Init+0x170>
 8003d78:	2101      	movs	r1, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d7a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003d7c:	f012 0f10 	tst.w	r2, #16
 8003d80:	f040 808e 	bne.w	8003ea0 <HAL_ADC_Init+0x1bc>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d84:	2900      	cmp	r1, #0
 8003d86:	f040 808b 	bne.w	8003ea0 <HAL_ADC_Init+0x1bc>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d8a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003d8c:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8003d90:	f042 0202 	orr.w	r2, r2, #2
 8003d94:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f013 0f01 	tst.w	r3, #1
 8003d9c:	d10b      	bne.n	8003db6 <HAL_ADC_Init+0xd2>
 8003d9e:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_ADC_Init+0x1d8>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f013 0f01 	tst.w	r3, #1
 8003da6:	d106      	bne.n	8003db6 <HAL_ADC_Init+0xd2>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003da8:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003daa:	4945      	ldr	r1, [pc, #276]	; (8003ec0 <HAL_ADC_Init+0x1dc>)
 8003dac:	688a      	ldr	r2, [r1, #8]
 8003dae:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003db6:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8003db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dba:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8003dbe:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8003dc0:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8003dc2:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8003dc4:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dc6:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dce:	2a01      	cmp	r2, #1
 8003dd0:	d042      	beq.n	8003e58 <HAL_ADC_Init+0x174>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003dd4:	b122      	cbz	r2, 8003de0 <HAL_ADC_Init+0xfc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dd6:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003dda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003ddc:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dde:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003de0:	6821      	ldr	r1, [r4, #0]
 8003de2:	68cd      	ldr	r5, [r1, #12]
 8003de4:	4a37      	ldr	r2, [pc, #220]	; (8003ec4 <HAL_ADC_Init+0x1e0>)
 8003de6:	402a      	ands	r2, r5
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dec:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	f012 0f04 	tst.w	r2, #4
 8003df4:	d035      	beq.n	8003e62 <HAL_ADC_Init+0x17e>
 8003df6:	2101      	movs	r1, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	f012 0f08 	tst.w	r2, #8
 8003dfe:	d032      	beq.n	8003e66 <HAL_ADC_Init+0x182>
 8003e00:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e02:	b9b1      	cbnz	r1, 8003e32 <HAL_ADC_Init+0x14e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e04:	b9aa      	cbnz	r2, 8003e32 <HAL_ADC_Init+0x14e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e06:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e08:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003e0c:	0052      	lsls	r2, r2, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e0e:	ea42 3181 	orr.w	r1, r2, r1, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e18:	f022 0202 	bic.w	r2, r2, #2
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e20:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d020      	beq.n	8003e6a <HAL_ADC_Init+0x186>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e28:	6822      	ldr	r2, [r4, #0]
 8003e2a:	6913      	ldr	r3, [r2, #16]
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e32:	6923      	ldr	r3, [r4, #16]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d02a      	beq.n	8003e8e <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e38:	6822      	ldr	r2, [r4, #0]
 8003e3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e3c:	f023 030f 	bic.w	r3, r3, #15
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e44:	f023 0303 	bic.w	r3, r3, #3
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6563      	str	r3, [r4, #84]	; 0x54
 8003e4e:	e02c      	b.n	8003eaa <HAL_ADC_Init+0x1c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e50:	2000      	movs	r0, #0
 8003e52:	e78d      	b.n	8003d70 <HAL_ADC_Init+0x8c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e54:	2100      	movs	r1, #0
 8003e56:	e790      	b.n	8003d7a <HAL_ADC_Init+0x96>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e5a:	3a01      	subs	r2, #1
 8003e5c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003e60:	e7b7      	b.n	8003dd2 <HAL_ADC_Init+0xee>
 8003e62:	2100      	movs	r1, #0
 8003e64:	e7c8      	b.n	8003df8 <HAL_ADC_Init+0x114>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e66:	2200      	movs	r2, #0
 8003e68:	e7cb      	b.n	8003e02 <HAL_ADC_Init+0x11e>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e6a:	6821      	ldr	r1, [r4, #0]
 8003e6c:	690b      	ldr	r3, [r1, #16]
 8003e6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e72:	f023 0304 	bic.w	r3, r3, #4
 8003e76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003e78:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003e7a:	432a      	orrs	r2, r5
 8003e7c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8003e7e:	432a      	orrs	r2, r5
 8003e80:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003e82:	432a      	orrs	r2, r5
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	610b      	str	r3, [r1, #16]
 8003e8c:	e7d1      	b.n	8003e32 <HAL_ADC_Init+0x14e>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e8e:	6821      	ldr	r1, [r4, #0]
 8003e90:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003e92:	f023 030f 	bic.w	r3, r3, #15
 8003e96:	69e2      	ldr	r2, [r4, #28]
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	630b      	str	r3, [r1, #48]	; 0x30
 8003e9e:	e7d0      	b.n	8003e42 <HAL_ADC_Init+0x15e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ea2:	f043 0310 	orr.w	r3, r3, #16
 8003ea6:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ea8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003eaa:	b003      	add	sp, #12
 8003eac:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003eae:	2001      	movs	r0, #1
 8003eb0:	e7fb      	b.n	8003eaa <HAL_ADC_Init+0x1c6>
 8003eb2:	bf00      	nop
 8003eb4:	20000018 	.word	0x20000018
 8003eb8:	053e2d63 	.word	0x053e2d63
 8003ebc:	50040000 	.word	0x50040000
 8003ec0:	50040300 	.word	0x50040300
 8003ec4:	fff0c007 	.word	0xfff0c007

08003ec8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003eca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003ecc:	f7fd fa98 	bl	8001400 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ed0:	bd08      	pop	{r3, pc}

08003ed2 <ADC_DMAConvCplt>:
{
 8003ed2:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ed6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ed8:	f012 0f50 	tst.w	r2, #80	; 0x50
 8003edc:	d131      	bne.n	8003f42 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ede:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	6811      	ldr	r1, [r2, #0]
 8003eea:	f011 0f08 	tst.w	r1, #8
 8003eee:	d014      	beq.n	8003f1a <ADC_DMAConvCplt+0x48>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ef0:	68d1      	ldr	r1, [r2, #12]
 8003ef2:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8003ef6:	d120      	bne.n	8003f3a <ADC_DMAConvCplt+0x68>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ef8:	68d2      	ldr	r2, [r2, #12]
 8003efa:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8003efe:	d11c      	bne.n	8003f3a <ADC_DMAConvCplt+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f0a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8003f0e:	d114      	bne.n	8003f3a <ADC_DMAConvCplt+0x68>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
 8003f18:	e00f      	b.n	8003f3a <ADC_DMAConvCplt+0x68>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f1a:	68d2      	ldr	r2, [r2, #12]
 8003f1c:	f012 0f02 	tst.w	r2, #2
 8003f20:	d10b      	bne.n	8003f3a <ADC_DMAConvCplt+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f2c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8003f30:	d103      	bne.n	8003f3a <ADC_DMAConvCplt+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f34:	f042 0201 	orr.w	r2, r2, #1
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd fa50 	bl	80013e0 <HAL_ADC_ConvCpltCallback>
}
 8003f40:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f44:	f012 0f10 	tst.w	r2, #16
 8003f48:	d103      	bne.n	8003f52 <ADC_DMAConvCplt+0x80>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4e:	4798      	blx	r3
}
 8003f50:	e7f6      	b.n	8003f40 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fd fa3c 	bl	80013d0 <HAL_ADC_ErrorCallback>
 8003f58:	e7f2      	b.n	8003f40 <ADC_DMAConvCplt+0x6e>

08003f5a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f5a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f5e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f64:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f66:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003f68:	f043 0304 	orr.w	r3, r3, #4
 8003f6c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f6e:	f7fd fa2f 	bl	80013d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f72:	bd08      	pop	{r3, pc}

08003f74 <HAL_ADC_ConfigChannel>:
{
 8003f74:	b4f0      	push	{r4, r5, r6, r7}
 8003f76:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003f78:	2200      	movs	r2, #0
 8003f7a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003f7c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8003f80:	2a01      	cmp	r2, #1
 8003f82:	f000 8204 	beq.w	800438e <HAL_ADC_ConfigChannel+0x41a>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f8e:	6806      	ldr	r6, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f90:	68b0      	ldr	r0, [r6, #8]
 8003f92:	f010 0f04 	tst.w	r0, #4
 8003f96:	d00a      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f9a:	f042 0220 	orr.w	r2, r2, #32
 8003f9e:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003fa0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003fa8:	b002      	add	sp, #8
 8003faa:	bcf0      	pop	{r4, r5, r6, r7}
 8003fac:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003fae:	684d      	ldr	r5, [r1, #4]
 8003fb0:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003fb2:	3630      	adds	r6, #48	; 0x30
 8003fb4:	0a2a      	lsrs	r2, r5, #8
 8003fb6:	0092      	lsls	r2, r2, #2
 8003fb8:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8003fbc:	58b0      	ldr	r0, [r6, r2]
 8003fbe:	f005 051f 	and.w	r5, r5, #31
 8003fc2:	271f      	movs	r7, #31
 8003fc4:	40af      	lsls	r7, r5
 8003fc6:	ea20 0007 	bic.w	r0, r0, r7
 8003fca:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003fce:	40ac      	lsls	r4, r5
 8003fd0:	4320      	orrs	r0, r4
 8003fd2:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fd4:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fd6:	6890      	ldr	r0, [r2, #8]
 8003fd8:	f010 0f04 	tst.w	r0, #4
 8003fdc:	d06a      	beq.n	80040b4 <HAL_ADC_ConfigChannel+0x140>
 8003fde:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fe0:	6894      	ldr	r4, [r2, #8]
 8003fe2:	f014 0f08 	tst.w	r4, #8
 8003fe6:	d067      	beq.n	80040b8 <HAL_ADC_ConfigChannel+0x144>
 8003fe8:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fea:	bb50      	cbnz	r0, 8004042 <HAL_ADC_ConfigChannel+0xce>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fec:	bb4c      	cbnz	r4, 8004042 <HAL_ADC_ConfigChannel+0xce>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003fee:	680e      	ldr	r6, [r1, #0]
 8003ff0:	688d      	ldr	r5, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ff2:	3214      	adds	r2, #20
 8003ff4:	0e70      	lsrs	r0, r6, #25
 8003ff6:	0080      	lsls	r0, r0, #2
 8003ff8:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8003ffc:	5814      	ldr	r4, [r2, r0]
 8003ffe:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004002:	2707      	movs	r7, #7
 8004004:	40b7      	lsls	r7, r6
 8004006:	ea24 0407 	bic.w	r4, r4, r7
 800400a:	40b5      	lsls	r5, r6
 800400c:	432c      	orrs	r4, r5
 800400e:	5014      	str	r4, [r2, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004010:	694c      	ldr	r4, [r1, #20]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	68c2      	ldr	r2, [r0, #12]
 8004016:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800401a:	0052      	lsls	r2, r2, #1
 800401c:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004020:	690d      	ldr	r5, [r1, #16]
 8004022:	2d04      	cmp	r5, #4
 8004024:	d04a      	beq.n	80040bc <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004026:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004028:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 800402a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800402e:	4cb6      	ldr	r4, [pc, #728]	; (8004308 <HAL_ADC_ConfigChannel+0x394>)
 8004030:	403c      	ands	r4, r7
 8004032:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8004036:	4332      	orrs	r2, r6
 8004038:	4314      	orrs	r4, r2
 800403a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800403e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004042:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004044:	6882      	ldr	r2, [r0, #8]
 8004046:	f012 0f01 	tst.w	r2, #1
 800404a:	f040 819a 	bne.w	8004382 <HAL_ADC_ConfigChannel+0x40e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800404e:	680a      	ldr	r2, [r1, #0]
 8004050:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004052:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8004056:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800405a:	ea24 0406 	bic.w	r4, r4, r6
 800405e:	f005 0618 	and.w	r6, r5, #24
 8004062:	4daa      	ldr	r5, [pc, #680]	; (800430c <HAL_ADC_ConfigChannel+0x398>)
 8004064:	40f5      	lsrs	r5, r6
 8004066:	402a      	ands	r2, r5
 8004068:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800406c:	4322      	orrs	r2, r4
 800406e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004072:	68c8      	ldr	r0, [r1, #12]
 8004074:	4aa6      	ldr	r2, [pc, #664]	; (8004310 <HAL_ADC_ConfigChannel+0x39c>)
 8004076:	4290      	cmp	r0, r2
 8004078:	d07b      	beq.n	8004172 <HAL_ADC_ConfigChannel+0x1fe>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800407a:	680a      	ldr	r2, [r1, #0]
 800407c:	49a5      	ldr	r1, [pc, #660]	; (8004314 <HAL_ADC_ConfigChannel+0x3a0>)
 800407e:	420a      	tst	r2, r1
 8004080:	f000 8181 	beq.w	8004386 <HAL_ADC_ConfigChannel+0x412>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004084:	49a4      	ldr	r1, [pc, #656]	; (8004318 <HAL_ADC_ConfigChannel+0x3a4>)
 8004086:	6889      	ldr	r1, [r1, #8]
 8004088:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800408c:	48a3      	ldr	r0, [pc, #652]	; (800431c <HAL_ADC_ConfigChannel+0x3a8>)
 800408e:	6880      	ldr	r0, [r0, #8]
 8004090:	f010 0f01 	tst.w	r0, #1
 8004094:	f040 810b 	bne.w	80042ae <HAL_ADC_ConfigChannel+0x33a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004098:	48a1      	ldr	r0, [pc, #644]	; (8004320 <HAL_ADC_ConfigChannel+0x3ac>)
 800409a:	4282      	cmp	r2, r0
 800409c:	f000 810d 	beq.w	80042ba <HAL_ADC_ConfigChannel+0x346>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040a0:	48a0      	ldr	r0, [pc, #640]	; (8004324 <HAL_ADC_ConfigChannel+0x3b0>)
 80040a2:	4282      	cmp	r2, r0
 80040a4:	f000 8146 	beq.w	8004334 <HAL_ADC_ConfigChannel+0x3c0>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040a8:	489f      	ldr	r0, [pc, #636]	; (8004328 <HAL_ADC_ConfigChannel+0x3b4>)
 80040aa:	4282      	cmp	r2, r0
 80040ac:	f000 8156 	beq.w	800435c <HAL_ADC_ConfigChannel+0x3e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040b0:	2000      	movs	r0, #0
 80040b2:	e776      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x2e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040b4:	2000      	movs	r0, #0
 80040b6:	e793      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040b8:	2400      	movs	r4, #0
 80040ba:	e796      	b.n	8003fea <HAL_ADC_ConfigChannel+0x76>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040bc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80040be:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040c0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80040c4:	680a      	ldr	r2, [r1, #0]
 80040c6:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80040ca:	bb7d      	cbnz	r5, 800412c <HAL_ADC_ConfigChannel+0x1b8>
 80040cc:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80040d0:	4294      	cmp	r4, r2
 80040d2:	d030      	beq.n	8004136 <HAL_ADC_ConfigChannel+0x1c2>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040d4:	681c      	ldr	r4, [r3, #0]
 80040d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040d8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80040da:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80040de:	680a      	ldr	r2, [r1, #0]
 80040e0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80040e4:	bb65      	cbnz	r5, 8004140 <HAL_ADC_ConfigChannel+0x1cc>
 80040e6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80040ea:	4290      	cmp	r0, r2
 80040ec:	d02d      	beq.n	800414a <HAL_ADC_ConfigChannel+0x1d6>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040ee:	681c      	ldr	r4, [r3, #0]
 80040f0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80040f2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80040f4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80040f8:	680a      	ldr	r2, [r1, #0]
 80040fa:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80040fe:	bb4d      	cbnz	r5, 8004154 <HAL_ADC_ConfigChannel+0x1e0>
 8004100:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8004104:	4290      	cmp	r0, r2
 8004106:	d02a      	beq.n	800415e <HAL_ADC_ConfigChannel+0x1ea>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004108:	681c      	ldr	r4, [r3, #0]
 800410a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800410c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800410e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004112:	680a      	ldr	r2, [r1, #0]
 8004114:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8004118:	bb35      	cbnz	r5, 8004168 <HAL_ADC_ConfigChannel+0x1f4>
 800411a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800411e:	4290      	cmp	r0, r2
 8004120:	d18f      	bne.n	8004042 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(*preg,
 8004122:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004124:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004128:	66e2      	str	r2, [r4, #108]	; 0x6c
 800412a:	e78a      	b.n	8004042 <HAL_ADC_ConfigChannel+0xce>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412c:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004130:	fab2 f282 	clz	r2, r2
 8004134:	e7cc      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x15c>
 8004136:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004138:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800413c:	6602      	str	r2, [r0, #96]	; 0x60
 800413e:	e7c9      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x160>
 8004140:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004144:	fab2 f282 	clz	r2, r2
 8004148:	e7cf      	b.n	80040ea <HAL_ADC_ConfigChannel+0x176>
 800414a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800414c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004150:	6662      	str	r2, [r4, #100]	; 0x64
 8004152:	e7cc      	b.n	80040ee <HAL_ADC_ConfigChannel+0x17a>
 8004154:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004158:	fab2 f282 	clz	r2, r2
 800415c:	e7d2      	b.n	8004104 <HAL_ADC_ConfigChannel+0x190>
 800415e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004160:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004164:	66a2      	str	r2, [r4, #104]	; 0x68
 8004166:	e7cf      	b.n	8004108 <HAL_ADC_ConfigChannel+0x194>
 8004168:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800416c:	fab2 f282 	clz	r2, r2
 8004170:	e7d5      	b.n	800411e <HAL_ADC_ConfigChannel+0x1aa>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004172:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004174:	680a      	ldr	r2, [r1, #0]
 8004176:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800417a:	bb96      	cbnz	r6, 80041e2 <HAL_ADC_ConfigChannel+0x26e>
 800417c:	0e90      	lsrs	r0, r2, #26
 800417e:	3001      	adds	r0, #1
 8004180:	f000 001f 	and.w	r0, r0, #31
 8004184:	2809      	cmp	r0, #9
 8004186:	bf8c      	ite	hi
 8004188:	2000      	movhi	r0, #0
 800418a:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800418c:	2800      	cmp	r0, #0
 800418e:	d052      	beq.n	8004236 <HAL_ADC_ConfigChannel+0x2c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004190:	bb9e      	cbnz	r6, 80041fa <HAL_ADC_ConfigChannel+0x286>
 8004192:	0e94      	lsrs	r4, r2, #26
 8004194:	3401      	adds	r4, #1
 8004196:	06a4      	lsls	r4, r4, #26
 8004198:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800419c:	bbb6      	cbnz	r6, 800420c <HAL_ADC_ConfigChannel+0x298>
 800419e:	0e90      	lsrs	r0, r2, #26
 80041a0:	3001      	adds	r0, #1
 80041a2:	f000 071f 	and.w	r7, r0, #31
 80041a6:	2001      	movs	r0, #1
 80041a8:	40b8      	lsls	r0, r7
 80041aa:	4304      	orrs	r4, r0
 80041ac:	bbc6      	cbnz	r6, 8004220 <HAL_ADC_ConfigChannel+0x2ac>
 80041ae:	0e92      	lsrs	r2, r2, #26
 80041b0:	3201      	adds	r2, #1
 80041b2:	f002 021f 	and.w	r2, r2, #31
 80041b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80041ba:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041bc:	4322      	orrs	r2, r4
 80041be:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041c0:	3514      	adds	r5, #20
 80041c2:	0e50      	lsrs	r0, r2, #25
 80041c4:	0080      	lsls	r0, r0, #2
 80041c6:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80041ca:	582e      	ldr	r6, [r5, r0]
 80041cc:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80041d0:	2707      	movs	r7, #7
 80041d2:	4097      	lsls	r7, r2
 80041d4:	ea26 0607 	bic.w	r6, r6, r7
 80041d8:	fa04 f202 	lsl.w	r2, r4, r2
 80041dc:	4332      	orrs	r2, r6
 80041de:	502a      	str	r2, [r5, r0]
 80041e0:	e74b      	b.n	800407a <HAL_ADC_ConfigChannel+0x106>
 80041e2:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041e6:	fab0 f080 	clz	r0, r0
 80041ea:	3001      	adds	r0, #1
 80041ec:	f000 001f 	and.w	r0, r0, #31
 80041f0:	2809      	cmp	r0, #9
 80041f2:	bf8c      	ite	hi
 80041f4:	2000      	movhi	r0, #0
 80041f6:	2001      	movls	r0, #1
 80041f8:	e7c8      	b.n	800418c <HAL_ADC_ConfigChannel+0x218>
 80041fa:	fa92 f4a2 	rbit	r4, r2
 80041fe:	fab4 f484 	clz	r4, r4
 8004202:	3401      	adds	r4, #1
 8004204:	06a4      	lsls	r4, r4, #26
 8004206:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800420a:	e7c7      	b.n	800419c <HAL_ADC_ConfigChannel+0x228>
 800420c:	fa92 f0a2 	rbit	r0, r2
 8004210:	fab0 f080 	clz	r0, r0
 8004214:	3001      	adds	r0, #1
 8004216:	f000 071f 	and.w	r7, r0, #31
 800421a:	2001      	movs	r0, #1
 800421c:	40b8      	lsls	r0, r7
 800421e:	e7c4      	b.n	80041aa <HAL_ADC_ConfigChannel+0x236>
 8004220:	fa92 f2a2 	rbit	r2, r2
 8004224:	fab2 f282 	clz	r2, r2
 8004228:	3201      	adds	r2, #1
 800422a:	f002 021f 	and.w	r2, r2, #31
 800422e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004232:	0512      	lsls	r2, r2, #20
 8004234:	e7c2      	b.n	80041bc <HAL_ADC_ConfigChannel+0x248>
 8004236:	b9ce      	cbnz	r6, 800426c <HAL_ADC_ConfigChannel+0x2f8>
 8004238:	0e94      	lsrs	r4, r2, #26
 800423a:	3401      	adds	r4, #1
 800423c:	06a4      	lsls	r4, r4, #26
 800423e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004242:	b9e6      	cbnz	r6, 800427e <HAL_ADC_ConfigChannel+0x30a>
 8004244:	0e90      	lsrs	r0, r2, #26
 8004246:	3001      	adds	r0, #1
 8004248:	f000 071f 	and.w	r7, r0, #31
 800424c:	2001      	movs	r0, #1
 800424e:	40b8      	lsls	r0, r7
 8004250:	4304      	orrs	r4, r0
 8004252:	b9f6      	cbnz	r6, 8004292 <HAL_ADC_ConfigChannel+0x31e>
 8004254:	0e90      	lsrs	r0, r2, #26
 8004256:	3001      	adds	r0, #1
 8004258:	f000 001f 	and.w	r0, r0, #31
 800425c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8004260:	3a1e      	subs	r2, #30
 8004262:	0512      	lsls	r2, r2, #20
 8004264:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004268:	4322      	orrs	r2, r4
 800426a:	e7a8      	b.n	80041be <HAL_ADC_ConfigChannel+0x24a>
 800426c:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004270:	fab4 f484 	clz	r4, r4
 8004274:	3401      	adds	r4, #1
 8004276:	06a4      	lsls	r4, r4, #26
 8004278:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800427c:	e7e1      	b.n	8004242 <HAL_ADC_ConfigChannel+0x2ce>
 800427e:	fa92 f0a2 	rbit	r0, r2
 8004282:	fab0 f080 	clz	r0, r0
 8004286:	3001      	adds	r0, #1
 8004288:	f000 071f 	and.w	r7, r0, #31
 800428c:	2001      	movs	r0, #1
 800428e:	40b8      	lsls	r0, r7
 8004290:	e7de      	b.n	8004250 <HAL_ADC_ConfigChannel+0x2dc>
 8004292:	fa92 f0a2 	rbit	r0, r2
 8004296:	fab0 f080 	clz	r0, r0
 800429a:	3001      	adds	r0, #1
 800429c:	f000 001f 	and.w	r0, r0, #31
 80042a0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80042a4:	3a1e      	subs	r2, #30
 80042a6:	0512      	lsls	r2, r2, #20
 80042a8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80042ac:	e7dc      	b.n	8004268 <HAL_ADC_ConfigChannel+0x2f4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042b0:	f042 0220 	orr.w	r2, r2, #32
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80042b6:	2001      	movs	r0, #1
 80042b8:	e673      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x2e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042ba:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 80042be:	f47f aeef 	bne.w	80040a0 <HAL_ADC_ConfigChannel+0x12c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	4a15      	ldr	r2, [pc, #84]	; (800431c <HAL_ADC_ConfigChannel+0x3a8>)
 80042c6:	4291      	cmp	r1, r2
 80042c8:	d001      	beq.n	80042ce <HAL_ADC_ConfigChannel+0x35a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ca:	2000      	movs	r0, #0
 80042cc:	e669      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042ce:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042d2:	4811      	ldr	r0, [pc, #68]	; (8004318 <HAL_ADC_ConfigChannel+0x3a4>)
 80042d4:	6881      	ldr	r1, [r0, #8]
 80042d6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80042da:	430a      	orrs	r2, r1
 80042dc:	6082      	str	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80042de:	4a13      	ldr	r2, [pc, #76]	; (800432c <HAL_ADC_ConfigChannel+0x3b8>)
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	0992      	lsrs	r2, r2, #6
 80042e4:	4912      	ldr	r1, [pc, #72]	; (8004330 <HAL_ADC_ConfigChannel+0x3bc>)
 80042e6:	fba1 1202 	umull	r1, r2, r1, r2
 80042ea:	0992      	lsrs	r2, r2, #6
 80042ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80042f0:	0091      	lsls	r1, r2, #2
 80042f2:	9101      	str	r1, [sp, #4]
              while(wait_loop_index != 0UL)
 80042f4:	e002      	b.n	80042fc <HAL_ADC_ConfigChannel+0x388>
                wait_loop_index--;
 80042f6:	9a01      	ldr	r2, [sp, #4]
 80042f8:	3a01      	subs	r2, #1
 80042fa:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 80042fc:	9a01      	ldr	r2, [sp, #4]
 80042fe:	2a00      	cmp	r2, #0
 8004300:	d1f9      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x382>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004302:	2000      	movs	r0, #0
 8004304:	e64d      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x2e>
 8004306:	bf00      	nop
 8004308:	03fff000 	.word	0x03fff000
 800430c:	0007ffff 	.word	0x0007ffff
 8004310:	407f0000 	.word	0x407f0000
 8004314:	80080000 	.word	0x80080000
 8004318:	50040300 	.word	0x50040300
 800431c:	50040000 	.word	0x50040000
 8004320:	c7520000 	.word	0xc7520000
 8004324:	cb840000 	.word	0xcb840000
 8004328:	80000001 	.word	0x80000001
 800432c:	20000018 	.word	0x20000018
 8004330:	053e2d63 	.word	0x053e2d63
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004334:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8004338:	f47f aeb6 	bne.w	80040a8 <HAL_ADC_ConfigChannel+0x134>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800433c:	6819      	ldr	r1, [r3, #0]
 800433e:	4a15      	ldr	r2, [pc, #84]	; (8004394 <HAL_ADC_ConfigChannel+0x420>)
 8004340:	4291      	cmp	r1, r2
 8004342:	d001      	beq.n	8004348 <HAL_ADC_ConfigChannel+0x3d4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004344:	2000      	movs	r0, #0
 8004346:	e62c      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004348:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 800434c:	4812      	ldr	r0, [pc, #72]	; (8004398 <HAL_ADC_ConfigChannel+0x424>)
 800434e:	6881      	ldr	r1, [r0, #8]
 8004350:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004354:	430a      	orrs	r2, r1
 8004356:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004358:	2000      	movs	r0, #0
 800435a:	e622      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800435c:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8004360:	d113      	bne.n	800438a <HAL_ADC_ConfigChannel+0x416>
            if (ADC_VREFINT_INSTANCE(hadc))
 8004362:	6819      	ldr	r1, [r3, #0]
 8004364:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <HAL_ADC_ConfigChannel+0x420>)
 8004366:	4291      	cmp	r1, r2
 8004368:	d001      	beq.n	800436e <HAL_ADC_ConfigChannel+0x3fa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800436a:	2000      	movs	r0, #0
 800436c:	e619      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800436e:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
 8004372:	4809      	ldr	r0, [pc, #36]	; (8004398 <HAL_ADC_ConfigChannel+0x424>)
 8004374:	6881      	ldr	r1, [r0, #8]
 8004376:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800437a:	430a      	orrs	r2, r1
 800437c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800437e:	2000      	movs	r0, #0
 8004380:	e60f      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x2e>
 8004382:	2000      	movs	r0, #0
 8004384:	e60d      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x2e>
 8004386:	2000      	movs	r0, #0
 8004388:	e60b      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x2e>
 800438a:	2000      	movs	r0, #0
 800438c:	e609      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 800438e:	2002      	movs	r0, #2
 8004390:	e60a      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x34>
 8004392:	bf00      	nop
 8004394:	50040000 	.word	0x50040000
 8004398:	50040300 	.word	0x50040300

0800439c <ADC_ConversionStop>:
{
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043a0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	f012 0f04 	tst.w	r2, #4
 80043a8:	d052      	beq.n	8004450 <ADC_ConversionStop+0xb4>
 80043aa:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	f012 0f08 	tst.w	r2, #8
 80043b2:	d04f      	beq.n	8004454 <ADC_ConversionStop+0xb8>
 80043b4:	2201      	movs	r2, #1
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80043b6:	b908      	cbnz	r0, 80043bc <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	d06b      	beq.n	8004494 <ADC_ConversionStop+0xf8>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80043c2:	d004      	beq.n	80043ce <ADC_ConversionStop+0x32>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80043c4:	8b20      	ldrh	r0, [r4, #24]
 80043c6:	f240 1201 	movw	r2, #257	; 0x101
 80043ca:	4290      	cmp	r0, r2
 80043cc:	d04e      	beq.n	800446c <ADC_ConversionStop+0xd0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80043ce:	2902      	cmp	r1, #2
 80043d0:	d010      	beq.n	80043f4 <ADC_ConversionStop+0x58>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80043d2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	f012 0f04 	tst.w	r2, #4
 80043da:	d00b      	beq.n	80043f4 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	f012 0f02 	tst.w	r2, #2
 80043e2:	d107      	bne.n	80043f4 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043ea:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80043ee:	f042 0210 	orr.w	r2, r2, #16
 80043f2:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80043f4:	2901      	cmp	r1, #1
 80043f6:	d010      	beq.n	800441a <ADC_ConversionStop+0x7e>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80043f8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	f012 0f08 	tst.w	r2, #8
 8004400:	d00b      	beq.n	800441a <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	f012 0f02 	tst.w	r2, #2
 8004408:	d107      	bne.n	800441a <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004410:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004414:	f042 0220 	orr.w	r2, r2, #32
 8004418:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 800441a:	2902      	cmp	r1, #2
 800441c:	d036      	beq.n	800448c <ADC_ConversionStop+0xf0>
 800441e:	2903      	cmp	r1, #3
 8004420:	d132      	bne.n	8004488 <ADC_ConversionStop+0xec>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004422:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 8004424:	f7ff fc3e 	bl	8003ca4 <HAL_GetTick>
 8004428:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	422b      	tst	r3, r5
 8004430:	d02e      	beq.n	8004490 <ADC_ConversionStop+0xf4>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004432:	f7ff fc37 	bl	8003ca4 <HAL_GetTick>
 8004436:	1b80      	subs	r0, r0, r6
 8004438:	2805      	cmp	r0, #5
 800443a:	d9f6      	bls.n	800442a <ADC_ConversionStop+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800443e:	f043 0310 	orr.w	r3, r3, #16
 8004442:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004444:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800444c:	2001      	movs	r0, #1
 800444e:	e020      	b.n	8004492 <ADC_ConversionStop+0xf6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004450:	2000      	movs	r0, #0
 8004452:	e7ab      	b.n	80043ac <ADC_ConversionStop+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004454:	2200      	movs	r2, #0
 8004456:	e7ae      	b.n	80043b6 <ADC_ConversionStop+0x1a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004458:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800445a:	f043 0310 	orr.w	r3, r3, #16
 800445e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8004468:	2001      	movs	r0, #1
 800446a:	e012      	b.n	8004492 <ADC_ConversionStop+0xf6>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800446c:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004474:	d104      	bne.n	8004480 <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004476:	4908      	ldr	r1, [pc, #32]	; (8004498 <ADC_ConversionStop+0xfc>)
 8004478:	428a      	cmp	r2, r1
 800447a:	d8ed      	bhi.n	8004458 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 800447c:	3201      	adds	r2, #1
 800447e:	e7f6      	b.n	800446e <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004480:	2240      	movs	r2, #64	; 0x40
 8004482:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004484:	2101      	movs	r1, #1
 8004486:	e7a4      	b.n	80043d2 <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004488:	2504      	movs	r5, #4
        break;
 800448a:	e7cb      	b.n	8004424 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800448c:	2508      	movs	r5, #8
 800448e:	e7c9      	b.n	8004424 <ADC_ConversionStop+0x88>
  return HAL_OK;
 8004490:	2000      	movs	r0, #0
}
 8004492:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004494:	2000      	movs	r0, #0
 8004496:	e7fc      	b.n	8004492 <ADC_ConversionStop+0xf6>
 8004498:	a33fffff 	.word	0xa33fffff

0800449c <ADC_Enable>:
{
 800449c:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800449e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	f012 0f01 	tst.w	r2, #1
 80044a6:	d13d      	bne.n	8004524 <ADC_Enable+0x88>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044a8:	6899      	ldr	r1, [r3, #8]
 80044aa:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <ADC_Enable+0x8c>)
 80044ac:	4211      	tst	r1, r2
 80044ae:	d009      	beq.n	80044c4 <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80044b2:	f043 0310 	orr.w	r3, r3, #16
 80044b6:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80044c0:	2001      	movs	r0, #1
 80044c2:	e030      	b.n	8004526 <ADC_Enable+0x8a>
 80044c4:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044cc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80044d6:	f7ff fbe5 	bl	8003ca4 <HAL_GetTick>
 80044da:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044dc:	e004      	b.n	80044e8 <ADC_Enable+0x4c>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044de:	f7ff fbe1 	bl	8003ca4 <HAL_GetTick>
 80044e2:	1b40      	subs	r0, r0, r5
 80044e4:	2802      	cmp	r0, #2
 80044e6:	d811      	bhi.n	800450c <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	f012 0f01 	tst.w	r2, #1
 80044f0:	d116      	bne.n	8004520 <ADC_Enable+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	f012 0f01 	tst.w	r2, #1
 80044f8:	d1f1      	bne.n	80044de <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004500:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	609a      	str	r2, [r3, #8]
 800450a:	e7e8      	b.n	80044de <ADC_Enable+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800450e:	f043 0310 	orr.w	r3, r3, #16
 8004512:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004514:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800451c:	2001      	movs	r0, #1
 800451e:	e002      	b.n	8004526 <ADC_Enable+0x8a>
  return HAL_OK;
 8004520:	2000      	movs	r0, #0
 8004522:	e000      	b.n	8004526 <ADC_Enable+0x8a>
 8004524:	2000      	movs	r0, #0
}
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	8000003f 	.word	0x8000003f

0800452c <HAL_ADC_Start_DMA>:
{
 800452c:	b570      	push	{r4, r5, r6, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800452e:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004530:	68a4      	ldr	r4, [r4, #8]
 8004532:	f014 0f04 	tst.w	r4, #4
 8004536:	d150      	bne.n	80045da <HAL_ADC_Start_DMA+0xae>
    __HAL_LOCK(hadc);
 8004538:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800453c:	2b01      	cmp	r3, #1
 800453e:	d04f      	beq.n	80045e0 <HAL_ADC_Start_DMA+0xb4>
 8004540:	4615      	mov	r5, r2
 8004542:	460e      	mov	r6, r1
 8004544:	4604      	mov	r4, r0
 8004546:	2301      	movs	r3, #1
 8004548:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = ADC_Enable(hadc);
 800454c:	f7ff ffa6 	bl	800449c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8004550:	4603      	mov	r3, r0
 8004552:	2800      	cmp	r0, #0
 8004554:	d13d      	bne.n	80045d2 <HAL_ADC_Start_DMA+0xa6>
        ADC_STATE_CLR_SET(hadc->State,
 8004556:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004558:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004564:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004566:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004568:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800456c:	d02e      	beq.n	80045cc <HAL_ADC_Start_DMA+0xa0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800456e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004570:	f023 0306 	bic.w	r3, r3, #6
 8004574:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004576:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004578:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <HAL_ADC_Start_DMA+0xb8>)
 800457a:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800457c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800457e:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <HAL_ADC_Start_DMA+0xbc>)
 8004580:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004582:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004584:	4a19      	ldr	r2, [pc, #100]	; (80045ec <HAL_ADC_Start_DMA+0xc0>)
 8004586:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	221c      	movs	r2, #28
 800458c:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 800458e:	2300      	movs	r3, #0
 8004590:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004594:	6822      	ldr	r2, [r4, #0]
 8004596:	6853      	ldr	r3, [r2, #4]
 8004598:	f043 0310 	orr.w	r3, r3, #16
 800459c:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	68d3      	ldr	r3, [r2, #12]
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045a8:	6821      	ldr	r1, [r4, #0]
 80045aa:	462b      	mov	r3, r5
 80045ac:	4632      	mov	r2, r6
 80045ae:	3140      	adds	r1, #64	; 0x40
 80045b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80045b2:	f000 fb41 	bl	8004c38 <HAL_DMA_Start_IT>
 80045b6:	4603      	mov	r3, r0
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045b8:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80045ba:	688a      	ldr	r2, [r1, #8]
 80045bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045c0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80045c4:	f042 0204 	orr.w	r2, r2, #4
 80045c8:	608a      	str	r2, [r1, #8]
 80045ca:	e007      	b.n	80045dc <HAL_ADC_Start_DMA+0xb0>
          ADC_CLEAR_ERRORCODE(hadc);
 80045cc:	2300      	movs	r3, #0
 80045ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80045d0:	e7d1      	b.n	8004576 <HAL_ADC_Start_DMA+0x4a>
        __HAL_UNLOCK(hadc);
 80045d2:	2200      	movs	r2, #0
 80045d4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 80045d8:	e000      	b.n	80045dc <HAL_ADC_Start_DMA+0xb0>
    tmp_hal_status = HAL_BUSY;
 80045da:	2302      	movs	r3, #2
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 80045e0:	2302      	movs	r3, #2
 80045e2:	e7fb      	b.n	80045dc <HAL_ADC_Start_DMA+0xb0>
 80045e4:	08003ed3 	.word	0x08003ed3
 80045e8:	08003ec9 	.word	0x08003ec9
 80045ec:	08003f5b 	.word	0x08003f5b

080045f0 <ADC_Disable>:
{
 80045f0:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80045f2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	f012 0f02 	tst.w	r2, #2
 80045fa:	d015      	beq.n	8004628 <ADC_Disable+0x38>
 80045fc:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	f012 0f01 	tst.w	r2, #1
 8004604:	d037      	beq.n	8004676 <ADC_Disable+0x86>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004606:	2900      	cmp	r1, #0
 8004608:	d137      	bne.n	800467a <ADC_Disable+0x8a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	f002 020d 	and.w	r2, r2, #13
 8004610:	2a01      	cmp	r2, #1
 8004612:	d00b      	beq.n	800462c <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004614:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004616:	f043 0310 	orr.w	r3, r3, #16
 800461a:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800461c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8004624:	2001      	movs	r0, #1
 8004626:	e027      	b.n	8004678 <ADC_Disable+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004628:	2100      	movs	r1, #0
 800462a:	e7e8      	b.n	80045fe <ADC_Disable+0xe>
 800462c:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004634:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004638:	f042 0202 	orr.w	r2, r2, #2
 800463c:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800463e:	6803      	ldr	r3, [r0, #0]
 8004640:	2203      	movs	r2, #3
 8004642:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004644:	f7ff fb2e 	bl	8003ca4 <HAL_GetTick>
 8004648:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f013 0f01 	tst.w	r3, #1
 8004652:	d00e      	beq.n	8004672 <ADC_Disable+0x82>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004654:	f7ff fb26 	bl	8003ca4 <HAL_GetTick>
 8004658:	1b40      	subs	r0, r0, r5
 800465a:	2802      	cmp	r0, #2
 800465c:	d9f5      	bls.n	800464a <ADC_Disable+0x5a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800465e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004660:	f043 0310 	orr.w	r3, r3, #16
 8004664:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800466e:	2001      	movs	r0, #1
 8004670:	e002      	b.n	8004678 <ADC_Disable+0x88>
  return HAL_OK;
 8004672:	2000      	movs	r0, #0
 8004674:	e000      	b.n	8004678 <ADC_Disable+0x88>
 8004676:	2000      	movs	r0, #0
}
 8004678:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800467a:	2000      	movs	r0, #0
 800467c:	e7fc      	b.n	8004678 <ADC_Disable+0x88>

0800467e <HAL_ADC_Stop_DMA>:
{
 800467e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8004680:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004684:	2b01      	cmp	r3, #1
 8004686:	d039      	beq.n	80046fc <HAL_ADC_Stop_DMA+0x7e>
 8004688:	4604      	mov	r4, r0
 800468a:	2301      	movs	r3, #1
 800468c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004690:	2103      	movs	r1, #3
 8004692:	f7ff fe83 	bl	800439c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004696:	4605      	mov	r5, r0
 8004698:	b9e8      	cbnz	r0, 80046d6 <HAL_ADC_Stop_DMA+0x58>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800469a:	6822      	ldr	r2, [r4, #0]
 800469c:	68d3      	ldr	r3, [r2, #12]
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80046a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80046a6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d017      	beq.n	80046e0 <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80046b0:	6822      	ldr	r2, [r4, #0]
 80046b2:	6853      	ldr	r3, [r2, #4]
 80046b4:	f023 0310 	bic.w	r3, r3, #16
 80046b8:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 80046ba:	b9dd      	cbnz	r5, 80046f4 <HAL_ADC_Stop_DMA+0x76>
      tmp_hal_status = ADC_Disable(hadc);
 80046bc:	4620      	mov	r0, r4
 80046be:	f7ff ff97 	bl	80045f0 <ADC_Disable>
 80046c2:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 80046c4:	b93d      	cbnz	r5, 80046d6 <HAL_ADC_Stop_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 80046c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80046d6:	2300      	movs	r3, #0
 80046d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80046dc:	4628      	mov	r0, r5
 80046de:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80046e0:	f000 faf4 	bl	8004ccc <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 80046e4:	4605      	mov	r5, r0
 80046e6:	2800      	cmp	r0, #0
 80046e8:	d0e2      	beq.n	80046b0 <HAL_ADC_Stop_DMA+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f0:	6563      	str	r3, [r4, #84]	; 0x54
 80046f2:	e7dd      	b.n	80046b0 <HAL_ADC_Stop_DMA+0x32>
      (void)ADC_Disable(hadc);
 80046f4:	4620      	mov	r0, r4
 80046f6:	f7ff ff7b 	bl	80045f0 <ADC_Disable>
 80046fa:	e7e3      	b.n	80046c4 <HAL_ADC_Stop_DMA+0x46>
  __HAL_LOCK(hadc);
 80046fc:	2502      	movs	r5, #2
 80046fe:	e7ed      	b.n	80046dc <HAL_ADC_Stop_DMA+0x5e>

08004700 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004700:	b530      	push	{r4, r5, lr}
 8004702:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004704:	2300      	movs	r3, #0
 8004706:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004708:	2800      	cmp	r0, #0
 800470a:	f000 80ae 	beq.w	800486a <HAL_COMP_Init+0x16a>
 800470e:	4604      	mov	r4, r0
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004710:	6803      	ldr	r3, [r0, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f2c0 80aa 	blt.w	800486e <HAL_COMP_Init+0x16e>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800471a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02e      	beq.n	8004780 <HAL_COMP_Init+0x80>
      HAL_COMP_MspInit(hcomp);
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004722:	6821      	ldr	r1, [r4, #0]
 8004724:	6808      	ldr	r0, [r1, #0]
 8004726:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800472a:	6923      	ldr	r3, [r4, #16]
               | hcomp->Init.InputPlus
 800472c:	68e2      	ldr	r2, [r4, #12]
 800472e:	4313      	orrs	r3, r2
               | hcomp->Init.BlankingSrce
 8004730:	69e2      	ldr	r2, [r4, #28]
 8004732:	4313      	orrs	r3, r2
               | hcomp->Init.Hysteresis
 8004734:	6962      	ldr	r2, [r4, #20]
 8004736:	4313      	orrs	r3, r2
               | hcomp->Init.OutputPol
 8004738:	69a2      	ldr	r2, [r4, #24]
 800473a:	4313      	orrs	r3, r2
               | hcomp->Init.Mode
 800473c:	68a2      	ldr	r2, [r4, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 800473e:	4313      	orrs	r3, r2
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004740:	680d      	ldr	r5, [r1, #0]
 8004742:	4a4d      	ldr	r2, [pc, #308]	; (8004878 <HAL_COMP_Init+0x178>)
 8004744:	402a      	ands	r2, r5
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800474a:	6863      	ldr	r3, [r4, #4]
 800474c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004750:	d01c      	beq.n	800478c <HAL_COMP_Init+0x8c>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8004752:	4a4a      	ldr	r2, [pc, #296]	; (800487c <HAL_COMP_Init+0x17c>)
 8004754:	6813      	ldr	r3, [r2, #0]
 8004756:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800475a:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800475c:	6822      	ldr	r2, [r4, #0]
 800475e:	6813      	ldr	r3, [r2, #0]
 8004760:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004764:	d01e      	beq.n	80047a4 <HAL_COMP_Init+0xa4>
 8004766:	b9e8      	cbnz	r0, 80047a4 <HAL_COMP_Init+0xa4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004768:	4b45      	ldr	r3, [pc, #276]	; (8004880 <HAL_COMP_Init+0x180>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	099b      	lsrs	r3, r3, #6
 800476e:	4945      	ldr	r1, [pc, #276]	; (8004884 <HAL_COMP_Init+0x184>)
 8004770:	fba1 1303 	umull	r1, r3, r1, r3
 8004774:	099b      	lsrs	r3, r3, #6
 8004776:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800477a:	0099      	lsls	r1, r3, #2
 800477c:	9101      	str	r1, [sp, #4]
      while(wait_loop_index != 0UL)
 800477e:	e00e      	b.n	800479e <HAL_COMP_Init+0x9e>
      hcomp->Lock = HAL_UNLOCKED;
 8004780:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      COMP_CLEAR_ERRORCODE(hcomp);
 8004784:	6283      	str	r3, [r0, #40]	; 0x28
      HAL_COMP_MspInit(hcomp);
 8004786:	f7fc fe69 	bl	800145c <HAL_COMP_MspInit>
 800478a:	e7ca      	b.n	8004722 <HAL_COMP_Init+0x22>
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800478c:	4a3b      	ldr	r2, [pc, #236]	; (800487c <HAL_COMP_Init+0x17c>)
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e7e1      	b.n	800475c <HAL_COMP_Init+0x5c>
      {
        wait_loop_index--;
 8004798:	9b01      	ldr	r3, [sp, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800479e:	9b01      	ldr	r3, [sp, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f9      	bne.n	8004798 <HAL_COMP_Init+0x98>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80047a4:	4b38      	ldr	r3, [pc, #224]	; (8004888 <HAL_COMP_Init+0x188>)
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d02b      	beq.n	8004802 <HAL_COMP_Init+0x102>
 80047aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80047ae:	6a22      	ldr	r2, [r4, #32]
 80047b0:	f012 0f03 	tst.w	r2, #3
 80047b4:	d044      	beq.n	8004840 <HAL_COMP_Init+0x140>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80047b6:	f012 0f10 	tst.w	r2, #16
 80047ba:	d025      	beq.n	8004808 <HAL_COMP_Init+0x108>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80047bc:	4933      	ldr	r1, [pc, #204]	; (800488c <HAL_COMP_Init+0x18c>)
 80047be:	680a      	ldr	r2, [r1, #0]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	600a      	str	r2, [r1, #0]
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80047c4:	6a22      	ldr	r2, [r4, #32]
 80047c6:	f012 0f20 	tst.w	r2, #32
 80047ca:	d023      	beq.n	8004814 <HAL_COMP_Init+0x114>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80047cc:	492f      	ldr	r1, [pc, #188]	; (800488c <HAL_COMP_Init+0x18c>)
 80047ce:	684a      	ldr	r2, [r1, #4]
 80047d0:	431a      	orrs	r2, r3
 80047d2:	604a      	str	r2, [r1, #4]
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80047d4:	4a2d      	ldr	r2, [pc, #180]	; (800488c <HAL_COMP_Init+0x18c>)
 80047d6:	60d3      	str	r3, [r2, #12]

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80047d8:	6a22      	ldr	r2, [r4, #32]
 80047da:	f012 0f02 	tst.w	r2, #2
 80047de:	d01f      	beq.n	8004820 <HAL_COMP_Init+0x120>
  SET_BIT(EXTI->EMR1, ExtiLine);
 80047e0:	492a      	ldr	r1, [pc, #168]	; (800488c <HAL_COMP_Init+0x18c>)
 80047e2:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
 80047e6:	431a      	orrs	r2, r3
 80047e8:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80047ec:	6a22      	ldr	r2, [r4, #32]
 80047ee:	f012 0f01 	tst.w	r2, #1
 80047f2:	d01d      	beq.n	8004830 <HAL_COMP_Init+0x130>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80047f4:	4925      	ldr	r1, [pc, #148]	; (800488c <HAL_COMP_Init+0x18c>)
 80047f6:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8004800:	e02a      	b.n	8004858 <HAL_COMP_Init+0x158>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004802:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004806:	e7d2      	b.n	80047ae <HAL_COMP_Init+0xae>
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004808:	4920      	ldr	r1, [pc, #128]	; (800488c <HAL_COMP_Init+0x18c>)
 800480a:	680a      	ldr	r2, [r1, #0]
 800480c:	ea22 0203 	bic.w	r2, r2, r3
 8004810:	600a      	str	r2, [r1, #0]
 8004812:	e7d7      	b.n	80047c4 <HAL_COMP_Init+0xc4>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004814:	491d      	ldr	r1, [pc, #116]	; (800488c <HAL_COMP_Init+0x18c>)
 8004816:	684a      	ldr	r2, [r1, #4]
 8004818:	ea22 0203 	bic.w	r2, r2, r3
 800481c:	604a      	str	r2, [r1, #4]
 800481e:	e7d9      	b.n	80047d4 <HAL_COMP_Init+0xd4>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004820:	491a      	ldr	r1, [pc, #104]	; (800488c <HAL_COMP_Init+0x18c>)
 8004822:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
 8004826:	ea22 0203 	bic.w	r2, r2, r3
 800482a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 800482e:	e7dd      	b.n	80047ec <HAL_COMP_Init+0xec>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004830:	4916      	ldr	r1, [pc, #88]	; (800488c <HAL_COMP_Init+0x18c>)
 8004832:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8004836:	ea22 0303 	bic.w	r3, r2, r3
 800483a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800483e:	e00b      	b.n	8004858 <HAL_COMP_Init+0x158>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004840:	4a12      	ldr	r2, [pc, #72]	; (800488c <HAL_COMP_Init+0x18c>)
 8004842:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8004846:	43db      	mvns	r3, r3
 8004848:	4019      	ands	r1, r3
 800484a:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800484e:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 8004852:	400b      	ands	r3, r1
 8004854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004858:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800485c:	b94b      	cbnz	r3, 8004872 <HAL_COMP_Init+0x172>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800485e:	2301      	movs	r3, #1
 8004860:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  HAL_StatusTypeDef status = HAL_OK;
 8004864:	2000      	movs	r0, #0
    }
  }

  return status;
}
 8004866:	b003      	add	sp, #12
 8004868:	bd30      	pop	{r4, r5, pc}
    status = HAL_ERROR;
 800486a:	2001      	movs	r0, #1
 800486c:	e7fb      	b.n	8004866 <HAL_COMP_Init+0x166>
    status = HAL_ERROR;
 800486e:	2001      	movs	r0, #1
 8004870:	e7f9      	b.n	8004866 <HAL_COMP_Init+0x166>
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2000      	movs	r0, #0
 8004874:	e7f7      	b.n	8004866 <HAL_COMP_Init+0x166>
 8004876:	bf00      	nop
 8004878:	f9207c03 	.word	0xf9207c03
 800487c:	40010204 	.word	0x40010204
 8004880:	20000018 	.word	0x20000018
 8004884:	053e2d63 	.word	0x053e2d63
 8004888:	40010200 	.word	0x40010200
 800488c:	58000800 	.word	0x58000800

08004890 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8004890:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8004892:	2300      	movs	r3, #0
 8004894:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004896:	b320      	cbz	r0, 80048e2 <HAL_COMP_Start+0x52>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004898:	6801      	ldr	r1, [r0, #0]
 800489a:	680a      	ldr	r2, [r1, #0]
 800489c:	2a00      	cmp	r2, #0
 800489e:	db22      	blt.n	80048e6 <HAL_COMP_Start+0x56>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80048a0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	2a01      	cmp	r2, #1
 80048a8:	d002      	beq.n	80048b0 <HAL_COMP_Start+0x20>
        wait_loop_index--;
      }
    }
    else
    {
      status = HAL_ERROR;
 80048aa:	2001      	movs	r0, #1
    }
  }

  return status;
}
 80048ac:	b002      	add	sp, #8
 80048ae:	4770      	bx	lr
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80048b0:	680a      	ldr	r2, [r1, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	600a      	str	r2, [r1, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 80048b8:	2202      	movs	r2, #2
 80048ba:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_COMP_Start+0x5c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	099b      	lsrs	r3, r3, #6
 80048c4:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <HAL_COMP_Start+0x60>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	099b      	lsrs	r3, r3, #6
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80048d0:	e002      	b.n	80048d8 <HAL_COMP_Start+0x48>
        wait_loop_index--;
 80048d2:	9b01      	ldr	r3, [sp, #4]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80048d8:	9b01      	ldr	r3, [sp, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f9      	bne.n	80048d2 <HAL_COMP_Start+0x42>
  HAL_StatusTypeDef status = HAL_OK;
 80048de:	2000      	movs	r0, #0
 80048e0:	e7e4      	b.n	80048ac <HAL_COMP_Start+0x1c>
    status = HAL_ERROR;
 80048e2:	2001      	movs	r0, #1
 80048e4:	e7e2      	b.n	80048ac <HAL_COMP_Start+0x1c>
    status = HAL_ERROR;
 80048e6:	2001      	movs	r0, #1
 80048e8:	e7e0      	b.n	80048ac <HAL_COMP_Start+0x1c>
 80048ea:	bf00      	nop
 80048ec:	20000018 	.word	0x20000018
 80048f0:	053e2d63 	.word	0x053e2d63

080048f4 <HAL_COMP_Stop>:
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80048f4:	b178      	cbz	r0, 8004916 <HAL_COMP_Stop+0x22>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80048f6:	6802      	ldr	r2, [r0, #0]
 80048f8:	6811      	ldr	r1, [r2, #0]
 80048fa:	2900      	cmp	r1, #0
 80048fc:	db0d      	blt.n	800491a <HAL_COMP_Stop+0x26>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 80048fe:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
 8004902:	b161      	cbz	r1, 800491e <HAL_COMP_Stop+0x2a>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8004904:	6811      	ldr	r1, [r2, #0]
 8004906:	f021 0101 	bic.w	r1, r1, #1
 800490a:	6011      	str	r1, [r2, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800490c:	2201      	movs	r2, #1
 800490e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  HAL_StatusTypeDef status = HAL_OK;
 8004912:	2000      	movs	r0, #0
 8004914:	4770      	bx	lr
    status = HAL_ERROR;
 8004916:	2001      	movs	r0, #1
 8004918:	4770      	bx	lr
    status = HAL_ERROR;
 800491a:	2001      	movs	r0, #1
 800491c:	4770      	bx	lr
    }
    else
    {
      status = HAL_ERROR;
 800491e:	2001      	movs	r0, #1
    }
  }

  return status;
}
 8004920:	4770      	bx	lr

08004922 <HAL_COMP_GetOutputLevel>:
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8004922:	6803      	ldr	r3, [r0, #0]
 8004924:	6818      	ldr	r0, [r3, #0]
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8004926:	f3c0 7080 	ubfx	r0, r0, #30, #1
 800492a:	4770      	bx	lr

0800492c <HAL_COMP_IRQHandler>:
{
 800492c:	b508      	push	{r3, lr}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800492e:	6802      	ldr	r2, [r0, #0]
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <HAL_COMP_IRQHandler+0x40>)
 8004932:	429a      	cmp	r2, r3
 8004934:	d007      	beq.n	8004946 <HAL_COMP_IRQHandler+0x1a>
 8004936:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800493a:	4a0d      	ldr	r2, [pc, #52]	; (8004970 <HAL_COMP_IRQHandler+0x44>)
 800493c:	68d2      	ldr	r2, [r2, #12]
 800493e:	ea33 0202 	bics.w	r2, r3, r2
 8004942:	d003      	beq.n	800494c <HAL_COMP_IRQHandler+0x20>
}
 8004944:	bd08      	pop	{r3, pc}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004946:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800494a:	e7f6      	b.n	800493a <HAL_COMP_IRQHandler+0xe>
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 800494c:	4a09      	ldr	r2, [pc, #36]	; (8004974 <HAL_COMP_IRQHandler+0x48>)
 800494e:	6812      	ldr	r2, [r2, #0]
 8004950:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004954:	d006      	beq.n	8004964 <HAL_COMP_IRQHandler+0x38>
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <HAL_COMP_IRQHandler+0x44>)
 8004958:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800495c:	60da      	str	r2, [r3, #12]
    HAL_COMP_TriggerCallback(hcomp);
 800495e:	f7fe fc3b 	bl	80031d8 <HAL_COMP_TriggerCallback>
}
 8004962:	e7ef      	b.n	8004944 <HAL_COMP_IRQHandler+0x18>
 8004964:	4a02      	ldr	r2, [pc, #8]	; (8004970 <HAL_COMP_IRQHandler+0x44>)
 8004966:	60d3      	str	r3, [r2, #12]
 8004968:	e7f9      	b.n	800495e <HAL_COMP_IRQHandler+0x32>
 800496a:	bf00      	nop
 800496c:	40010200 	.word	0x40010200
 8004970:	58000800 	.word	0x58000800
 8004974:	40010204 	.word	0x40010204

08004978 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004978:	4a07      	ldr	r2, [pc, #28]	; (8004998 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800497a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004984:	0200      	lsls	r0, r0, #8
 8004986:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800498a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800498c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8004990:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004994:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800499e:	4b17      	ldr	r3, [pc, #92]	; (80049fc <HAL_NVIC_SetPriority+0x60>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a6:	f1c3 0407 	rsb	r4, r3, #7
 80049aa:	2c04      	cmp	r4, #4
 80049ac:	bf28      	it	cs
 80049ae:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049b0:	1d1d      	adds	r5, r3, #4
 80049b2:	2d06      	cmp	r5, #6
 80049b4:	d918      	bls.n	80049e8 <HAL_NVIC_SetPriority+0x4c>
 80049b6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b8:	f04f 35ff 	mov.w	r5, #4294967295
 80049bc:	fa05 f404 	lsl.w	r4, r5, r4
 80049c0:	ea21 0104 	bic.w	r1, r1, r4
 80049c4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049c6:	fa05 f303 	lsl.w	r3, r5, r3
 80049ca:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049ce:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80049d0:	2800      	cmp	r0, #0
 80049d2:	db0b      	blt.n	80049ec <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d4:	0109      	lsls	r1, r1, #4
 80049d6:	b2c9      	uxtb	r1, r1
 80049d8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80049dc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80049e0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80049e4:	bc30      	pop	{r4, r5}
 80049e6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e8:	2300      	movs	r3, #0
 80049ea:	e7e5      	b.n	80049b8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ec:	f000 000f 	and.w	r0, r0, #15
 80049f0:	0109      	lsls	r1, r1, #4
 80049f2:	b2c9      	uxtb	r1, r1
 80049f4:	4b02      	ldr	r3, [pc, #8]	; (8004a00 <HAL_NVIC_SetPriority+0x64>)
 80049f6:	5419      	strb	r1, [r3, r0]
 80049f8:	e7f4      	b.n	80049e4 <HAL_NVIC_SetPriority+0x48>
 80049fa:	bf00      	nop
 80049fc:	e000ed00 	.word	0xe000ed00
 8004a00:	e000ed14 	.word	0xe000ed14

08004a04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a04:	2800      	cmp	r0, #0
 8004a06:	db07      	blt.n	8004a18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a08:	f000 021f 	and.w	r2, r0, #31
 8004a0c:	0940      	lsrs	r0, r0, #5
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4093      	lsls	r3, r2
 8004a12:	4a02      	ldr	r2, [pc, #8]	; (8004a1c <HAL_NVIC_EnableIRQ+0x18>)
 8004a14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e100 	.word	0xe000e100

08004a20 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a20:	2800      	cmp	r0, #0
 8004a22:	db0c      	blt.n	8004a3e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a24:	f000 021f 	and.w	r2, r0, #31
 8004a28:	0940      	lsrs	r0, r0, #5
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	4093      	lsls	r3, r2
 8004a2e:	3020      	adds	r0, #32
 8004a30:	4a03      	ldr	r2, [pc, #12]	; (8004a40 <HAL_NVIC_DisableIRQ+0x20>)
 8004a32:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a3a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004a3e:	4770      	bx	lr
 8004a40:	e000e100 	.word	0xe000e100

08004a44 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8004a44:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004a48:	4905      	ldr	r1, [pc, #20]	; (8004a60 <HAL_NVIC_SystemReset+0x1c>)
 8004a4a:	68ca      	ldr	r2, [r1, #12]
 8004a4c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <HAL_NVIC_SystemReset+0x20>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60cb      	str	r3, [r1, #12]
 8004a56:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004a5a:	bf00      	nop
 8004a5c:	e7fd      	b.n	8004a5a <HAL_NVIC_SystemReset+0x16>
 8004a5e:	bf00      	nop
 8004a60:	e000ed00 	.word	0xe000ed00
 8004a64:	05fa0004 	.word	0x05fa0004

08004a68 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	db08      	blt.n	8004a7e <HAL_NVIC_SetPendingIRQ+0x16>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a6c:	f000 021f 	and.w	r2, r0, #31
 8004a70:	0940      	lsrs	r0, r0, #5
 8004a72:	2301      	movs	r3, #1
 8004a74:	4093      	lsls	r3, r2
 8004a76:	3040      	adds	r0, #64	; 0x40
 8004a78:	4a01      	ldr	r2, [pc, #4]	; (8004a80 <HAL_NVIC_SetPendingIRQ+0x18>)
 8004a7a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8004a7e:	4770      	bx	lr
 8004a80:	e000e100 	.word	0xe000e100

08004a84 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a84:	2800      	cmp	r0, #0
 8004a86:	db08      	blt.n	8004a9a <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a88:	f000 021f 	and.w	r2, r0, #31
 8004a8c:	0940      	lsrs	r0, r0, #5
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4093      	lsls	r3, r2
 8004a92:	3060      	adds	r0, #96	; 0x60
 8004a94:	4a01      	ldr	r2, [pc, #4]	; (8004a9c <HAL_NVIC_ClearPendingIRQ+0x18>)
 8004a96:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8004a9a:	4770      	bx	lr
 8004a9c:	e000e100 	.word	0xe000e100

08004aa0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa0:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aa2:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004aa4:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8004aa6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004aa8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004aaa:	b114      	cbz	r4, 8004ab2 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aac:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8004aae:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004ab0:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ab2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004ab4:	f004 051c 	and.w	r5, r4, #28
 8004ab8:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8004aba:	2401      	movs	r4, #1
 8004abc:	40ac      	lsls	r4, r5
 8004abe:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ac0:	6804      	ldr	r4, [r0, #0]
 8004ac2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ac4:	6883      	ldr	r3, [r0, #8]
 8004ac6:	2b10      	cmp	r3, #16
 8004ac8:	d005      	beq.n	8004ad6 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004aca:	6803      	ldr	r3, [r0, #0]
 8004acc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004ace:	6803      	ldr	r3, [r0, #0]
 8004ad0:	60da      	str	r2, [r3, #12]
  }
}
 8004ad2:	bc70      	pop	{r4, r5, r6}
 8004ad4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004ad6:	6803      	ldr	r3, [r0, #0]
 8004ad8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004ada:	6803      	ldr	r3, [r0, #0]
 8004adc:	60d9      	str	r1, [r3, #12]
 8004ade:	e7f8      	b.n	8004ad2 <DMA_SetConfig+0x32>

08004ae0 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ae0:	6803      	ldr	r3, [r0, #0]
 8004ae2:	4a10      	ldr	r2, [pc, #64]	; (8004b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d914      	bls.n	8004b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x32>
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004ae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004aea:	f022 0103 	bic.w	r1, r2, #3
 8004aee:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8004af0:	440a      	add	r2, r1
 8004af2:	6482      	str	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	3b08      	subs	r3, #8
 8004af8:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	091b      	lsrs	r3, r3, #4
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b00:	4a0b      	ldr	r2, [pc, #44]	; (8004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004b02:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8004b04:	f003 031c 	and.w	r3, r3, #28
 8004b08:	2201      	movs	r2, #1
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004b10:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004b12:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b14:	f022 0203 	bic.w	r2, r2, #3
 8004b18:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004b1c:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8004b20:	6482      	str	r2, [r0, #72]	; 0x48
 8004b22:	e7e7      	b.n	8004af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x14>
 8004b24:	40020407 	.word	0x40020407
 8004b28:	4002081c 	.word	0x4002081c
 8004b2c:	cccccccd 	.word	0xcccccccd
 8004b30:	40020880 	.word	0x40020880

08004b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b34:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b36:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8004b38:	441a      	add	r2, r3
 8004b3a:	0092      	lsls	r2, r2, #2
 8004b3c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b3e:	4a06      	ldr	r2, [pc, #24]	; (8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004b40:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b42:	3b01      	subs	r3, #1
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	2201      	movs	r2, #1
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	1000823f 	.word	0x1000823f
 8004b58:	40020940 	.word	0x40020940

08004b5c <HAL_DMA_Init>:
  if (hdma == NULL)
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d05c      	beq.n	8004c1a <HAL_DMA_Init+0xbe>
{
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b64:	6802      	ldr	r2, [r0, #0]
 8004b66:	4b2e      	ldr	r3, [pc, #184]	; (8004c20 <HAL_DMA_Init+0xc4>)
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d83e      	bhi.n	8004bea <HAL_DMA_Init+0x8e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b6c:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <HAL_DMA_Init+0xc8>)
 8004b6e:	4413      	add	r3, r2
 8004b70:	4a2d      	ldr	r2, [pc, #180]	; (8004c28 <HAL_DMA_Init+0xcc>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <HAL_DMA_Init+0xd0>)
 8004b7e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b80:	2302      	movs	r3, #2
 8004b82:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8004b86:	6821      	ldr	r1, [r4, #0]
 8004b88:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b8a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8004b8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8004b92:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b94:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8004b96:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b98:	6920      	ldr	r0, [r4, #16]
 8004b9a:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b9c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b9e:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ba0:	69a0      	ldr	r0, [r4, #24]
 8004ba2:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ba4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ba6:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ba8:	6a20      	ldr	r0, [r4, #32]
 8004baa:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8004bac:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8004bae:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7ff ff95 	bl	8004ae0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bb6:	68a3      	ldr	r3, [r4, #8]
 8004bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bbc:	d020      	beq.n	8004c00 <HAL_DMA_Init+0xa4>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bbe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004bc0:	7922      	ldrb	r2, [r4, #4]
 8004bc2:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004bc6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004bc8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004bca:	6863      	ldr	r3, [r4, #4]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d919      	bls.n	8004c06 <HAL_DMA_Init+0xaa>
    hdma->DMAmuxRequestGen = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004bd6:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004bd8:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bda:	2000      	movs	r0, #0
 8004bdc:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8004be4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004be8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004bea:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <HAL_DMA_Init+0xd4>)
 8004bec:	4413      	add	r3, r2
 8004bee:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <HAL_DMA_Init+0xcc>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	091b      	lsrs	r3, r3, #4
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <HAL_DMA_Init+0xd8>)
 8004bfc:	6403      	str	r3, [r0, #64]	; 0x40
 8004bfe:	e7bf      	b.n	8004b80 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c00:	2300      	movs	r3, #0
 8004c02:	6063      	str	r3, [r4, #4]
 8004c04:	e7db      	b.n	8004bbe <HAL_DMA_Init+0x62>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c06:	4620      	mov	r0, r4
 8004c08:	f7ff ff94 	bl	8004b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c14:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004c16:	605a      	str	r2, [r3, #4]
 8004c18:	e7df      	b.n	8004bda <HAL_DMA_Init+0x7e>
    return HAL_ERROR;
 8004c1a:	2001      	movs	r0, #1
}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40020407 	.word	0x40020407
 8004c24:	bffdfff8 	.word	0xbffdfff8
 8004c28:	cccccccd 	.word	0xcccccccd
 8004c2c:	40020000 	.word	0x40020000
 8004c30:	bffdfbf8 	.word	0xbffdfbf8
 8004c34:	40020400 	.word	0x40020400

08004c38 <HAL_DMA_Start_IT>:
{
 8004c38:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8004c3a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8004c3e:	2c01      	cmp	r4, #1
 8004c40:	d042      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x90>
 8004c42:	2401      	movs	r4, #1
 8004c44:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8004c48:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8004c4c:	b2e4      	uxtb	r4, r4
 8004c4e:	2c01      	cmp	r4, #1
 8004c50:	d004      	beq.n	8004c5c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8004c52:	2300      	movs	r3, #0
 8004c54:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8004c58:	2002      	movs	r0, #2
}
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c5e:	2002      	movs	r0, #2
 8004c60:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c64:	2000      	movs	r0, #0
 8004c66:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004c68:	6825      	ldr	r5, [r4, #0]
 8004c6a:	6828      	ldr	r0, [r5, #0]
 8004c6c:	f020 0001 	bic.w	r0, r0, #1
 8004c70:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c72:	4620      	mov	r0, r4
 8004c74:	f7ff ff14 	bl	8004aa0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004c78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c7a:	b1d3      	cbz	r3, 8004cb2 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c7c:	6822      	ldr	r2, [r4, #0]
 8004c7e:	6813      	ldr	r3, [r2, #0]
 8004c80:	f043 030e 	orr.w	r3, r3, #14
 8004c84:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004c8e:	d003      	beq.n	8004c98 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c96:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004c98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c9a:	b11b      	cbz	r3, 8004ca4 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004ca4:	6822      	ldr	r2, [r4, #0]
 8004ca6:	6813      	ldr	r3, [r2, #0]
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e7d3      	b.n	8004c5a <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cb2:	6822      	ldr	r2, [r4, #0]
 8004cb4:	6813      	ldr	r3, [r2, #0]
 8004cb6:	f023 0304 	bic.w	r3, r3, #4
 8004cba:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cbc:	6822      	ldr	r2, [r4, #0]
 8004cbe:	6813      	ldr	r3, [r2, #0]
 8004cc0:	f043 030a 	orr.w	r3, r3, #10
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e7de      	b.n	8004c86 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8004cc8:	2002      	movs	r0, #2
 8004cca:	e7c6      	b.n	8004c5a <HAL_DMA_Start_IT+0x22>

08004ccc <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d034      	beq.n	8004d3c <HAL_DMA_Abort+0x70>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cd2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	2a02      	cmp	r2, #2
 8004cda:	d006      	beq.n	8004cea <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cdc:	2204      	movs	r2, #4
 8004cde:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cea:	6801      	ldr	r1, [r0, #0]
 8004cec:	680a      	ldr	r2, [r1, #0]
 8004cee:	f022 020e 	bic.w	r2, r2, #14
 8004cf2:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cf4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004cf6:	680a      	ldr	r2, [r1, #0]
 8004cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cfc:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004cfe:	6801      	ldr	r1, [r0, #0]
 8004d00:	680a      	ldr	r2, [r1, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d0a:	f002 011c 	and.w	r1, r2, #28
 8004d0e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004d10:	2201      	movs	r2, #1
 8004d12:	408a      	lsls	r2, r1
 8004d14:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d1a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d1e:	b132      	cbz	r2, 8004d2e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d20:	6811      	ldr	r1, [r2, #0]
 8004d22:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004d26:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d2a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004d2c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004d34:	2000      	movs	r0, #0
 8004d36:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8004d3a:	4770      	bx	lr
    return HAL_ERROR;
 8004d3c:	2001      	movs	r0, #1
}
 8004d3e:	4770      	bx	lr

08004d40 <HAL_DMA_Abort_IT>:
{
 8004d40:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004d42:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d003      	beq.n	8004d54 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004d50:	2001      	movs	r0, #1
}
 8004d52:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d54:	6802      	ldr	r2, [r0, #0]
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	f023 030e 	bic.w	r3, r3, #14
 8004d5c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004d5e:	6802      	ldr	r2, [r0, #0]
 8004d60:	6813      	ldr	r3, [r2, #0]
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d68:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004d6a:	6813      	ldr	r3, [r2, #0]
 8004d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d70:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d72:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d74:	f003 021c 	and.w	r2, r3, #28
 8004d78:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4093      	lsls	r3, r2
 8004d7e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d80:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004d82:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004d84:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004d86:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004d88:	b133      	cbz	r3, 8004d98 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d90:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d92:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004d94:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004d96:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004da4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004da6:	b113      	cbz	r3, 8004dae <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004da8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2000      	movs	r0, #0
 8004dac:	e7d1      	b.n	8004d52 <HAL_DMA_Abort_IT+0x12>
 8004dae:	2000      	movs	r0, #0
 8004db0:	e7cf      	b.n	8004d52 <HAL_DMA_Abort_IT+0x12>

08004db2 <HAL_DMA_IRQHandler>:
{
 8004db2:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004db4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004db6:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004db8:	6804      	ldr	r4, [r0, #0]
 8004dba:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004dbc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004dbe:	f003 031c 	and.w	r3, r3, #28
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	420a      	tst	r2, r1
 8004dc8:	d015      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x44>
 8004dca:	f015 0f04 	tst.w	r5, #4
 8004dce:	d012      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	f013 0f20 	tst.w	r3, #32
 8004dd6:	d103      	bne.n	8004de0 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	f023 0304 	bic.w	r3, r3, #4
 8004dde:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004de0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004de2:	f003 021c 	and.w	r2, r3, #28
 8004de6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004de8:	2304      	movs	r3, #4
 8004dea:	4093      	lsls	r3, r2
 8004dec:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004dee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004df0:	b103      	cbz	r3, 8004df4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8004df2:	4798      	blx	r3
}
 8004df4:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004df6:	2202      	movs	r2, #2
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	420a      	tst	r2, r1
 8004dfc:	d01c      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x86>
 8004dfe:	f015 0f02 	tst.w	r5, #2
 8004e02:	d019      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	f013 0f20 	tst.w	r3, #32
 8004e0a:	d106      	bne.n	8004e1a <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	f023 030a 	bic.w	r3, r3, #10
 8004e12:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004e1c:	f003 021c 	and.w	r2, r3, #28
 8004e20:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004e22:	2302      	movs	r3, #2
 8004e24:	4093      	lsls	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8004e2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0df      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8004e34:	4798      	blx	r3
 8004e36:	e7dd      	b.n	8004df4 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004e38:	2208      	movs	r2, #8
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	420b      	tst	r3, r1
 8004e40:	d0d8      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x42>
 8004e42:	f015 0f08 	tst.w	r5, #8
 8004e46:	d0d5      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	f023 030e 	bic.w	r3, r3, #14
 8004e4e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004e52:	f003 031c 	and.w	r3, r3, #28
 8004e56:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004e58:	2201      	movs	r2, #1
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e60:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004e62:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004e66:	2300      	movs	r3, #0
 8004e68:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004e6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0c0      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004e72:	4798      	blx	r3
  return;
 8004e74:	e7be      	b.n	8004df4 <HAL_DMA_IRQHandler+0x42>
	...

08004e78 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e78:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 8004e7a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e7c:	e03a      	b.n	8004ef4 <HAL_GPIO_Init+0x7c>
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e7e:	2404      	movs	r4, #4
 8004e80:	e000      	b.n	8004e84 <HAL_GPIO_Init+0xc>
 8004e82:	2400      	movs	r4, #0
 8004e84:	40b4      	lsls	r4, r6
 8004e86:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e88:	3502      	adds	r5, #2
 8004e8a:	4e58      	ldr	r6, [pc, #352]	; (8004fec <HAL_GPIO_Init+0x174>)
 8004e8c:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e90:	4c57      	ldr	r4, [pc, #348]	; (8004ff0 <HAL_GPIO_Init+0x178>)
 8004e92:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8004e96:	43d4      	mvns	r4, r2
 8004e98:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e9c:	684f      	ldr	r7, [r1, #4]
 8004e9e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8004ea2:	d001      	beq.n	8004ea8 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8004ea4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8004ea8:	4d51      	ldr	r5, [pc, #324]	; (8004ff0 <HAL_GPIO_Init+0x178>)
 8004eaa:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80

        temp = EXTI->EMR1;
 8004eae:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8004eb2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004eb6:	684f      	ldr	r7, [r1, #4]
 8004eb8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004ebc:	d001      	beq.n	8004ec2 <HAL_GPIO_Init+0x4a>
        {
          temp |= iocurrent;
 8004ebe:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8004ec2:	4d4b      	ldr	r5, [pc, #300]	; (8004ff0 <HAL_GPIO_Init+0x178>)
 8004ec4:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ec8:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8004eca:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ece:	684f      	ldr	r7, [r1, #4]
 8004ed0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004ed4:	d001      	beq.n	8004eda <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8004ed6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004eda:	4d45      	ldr	r5, [pc, #276]	; (8004ff0 <HAL_GPIO_Init+0x178>)
 8004edc:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004ede:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004ee0:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ee2:	684e      	ldr	r6, [r1, #4]
 8004ee4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8004ee8:	d001      	beq.n	8004eee <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8004eea:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004eee:	4a40      	ldr	r2, [pc, #256]	; (8004ff0 <HAL_GPIO_Init+0x178>)
 8004ef0:	6054      	str	r4, [r2, #4]
      }
    }
    
    position++;
 8004ef2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ef4:	680a      	ldr	r2, [r1, #0]
 8004ef6:	fa32 f403 	lsrs.w	r4, r2, r3
 8004efa:	d074      	beq.n	8004fe6 <HAL_GPIO_Init+0x16e>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004efc:	2401      	movs	r4, #1
 8004efe:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8004f00:	4022      	ands	r2, r4
 8004f02:	d0f6      	beq.n	8004ef2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f04:	684d      	ldr	r5, [r1, #4]
 8004f06:	2d02      	cmp	r5, #2
 8004f08:	d001      	beq.n	8004f0e <HAL_GPIO_Init+0x96>
 8004f0a:	2d12      	cmp	r5, #18
 8004f0c:	d110      	bne.n	8004f30 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3u];
 8004f0e:	08de      	lsrs	r6, r3, #3
 8004f10:	3608      	adds	r6, #8
 8004f12:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f16:	f003 0507 	and.w	r5, r3, #7
 8004f1a:	00af      	lsls	r7, r5, #2
 8004f1c:	250f      	movs	r5, #15
 8004f1e:	40bd      	lsls	r5, r7
 8004f20:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f24:	690d      	ldr	r5, [r1, #16]
 8004f26:	40bd      	lsls	r5, r7
 8004f28:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8004f2c:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8004f30:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f32:	005f      	lsls	r7, r3, #1
 8004f34:	2503      	movs	r5, #3
 8004f36:	40bd      	lsls	r5, r7
 8004f38:	43ed      	mvns	r5, r5
 8004f3a:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f3e:	684e      	ldr	r6, [r1, #4]
 8004f40:	f006 0603 	and.w	r6, r6, #3
 8004f44:	40be      	lsls	r6, r7
 8004f46:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8004f4a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f4c:	684e      	ldr	r6, [r1, #4]
 8004f4e:	f106 3cff 	add.w	ip, r6, #4294967295
 8004f52:	f1bc 0f01 	cmp.w	ip, #1
 8004f56:	d903      	bls.n	8004f60 <HAL_GPIO_Init+0xe8>
 8004f58:	2e11      	cmp	r6, #17
 8004f5a:	d001      	beq.n	8004f60 <HAL_GPIO_Init+0xe8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f5c:	2e12      	cmp	r6, #18
 8004f5e:	d110      	bne.n	8004f82 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR;
 8004f60:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f62:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f66:	68ce      	ldr	r6, [r1, #12]
 8004f68:	40be      	lsls	r6, r7
 8004f6a:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8004f6e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8004f70:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f72:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004f76:	684e      	ldr	r6, [r1, #4]
 8004f78:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8004f7c:	409e      	lsls	r6, r3
 8004f7e:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8004f80:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8004f82:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004f84:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004f86:	688c      	ldr	r4, [r1, #8]
 8004f88:	40bc      	lsls	r4, r7
 8004f8a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8004f8c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f8e:	684c      	ldr	r4, [r1, #4]
 8004f90:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8004f94:	d0ad      	beq.n	8004ef2 <HAL_GPIO_Init+0x7a>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004f96:	089d      	lsrs	r5, r3, #2
 8004f98:	1cae      	adds	r6, r5, #2
 8004f9a:	4c14      	ldr	r4, [pc, #80]	; (8004fec <HAL_GPIO_Init+0x174>)
 8004f9c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fa0:	f003 0403 	and.w	r4, r3, #3
 8004fa4:	00a6      	lsls	r6, r4, #2
 8004fa6:	240f      	movs	r4, #15
 8004fa8:	40b4      	lsls	r4, r6
 8004faa:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fae:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004fb2:	f43f af66 	beq.w	8004e82 <HAL_GPIO_Init+0xa>
 8004fb6:	4c0f      	ldr	r4, [pc, #60]	; (8004ff4 <HAL_GPIO_Init+0x17c>)
 8004fb8:	42a0      	cmp	r0, r4
 8004fba:	d00e      	beq.n	8004fda <HAL_GPIO_Init+0x162>
 8004fbc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004fc0:	42a0      	cmp	r0, r4
 8004fc2:	d00c      	beq.n	8004fde <HAL_GPIO_Init+0x166>
 8004fc4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004fc8:	42a0      	cmp	r0, r4
 8004fca:	d00a      	beq.n	8004fe2 <HAL_GPIO_Init+0x16a>
 8004fcc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004fd0:	42a0      	cmp	r0, r4
 8004fd2:	f43f af54 	beq.w	8004e7e <HAL_GPIO_Init+0x6>
 8004fd6:	2407      	movs	r4, #7
 8004fd8:	e754      	b.n	8004e84 <HAL_GPIO_Init+0xc>
 8004fda:	2401      	movs	r4, #1
 8004fdc:	e752      	b.n	8004e84 <HAL_GPIO_Init+0xc>
 8004fde:	2402      	movs	r4, #2
 8004fe0:	e750      	b.n	8004e84 <HAL_GPIO_Init+0xc>
 8004fe2:	2403      	movs	r4, #3
 8004fe4:	e74e      	b.n	8004e84 <HAL_GPIO_Init+0xc>
  }
}
 8004fe6:	bcf0      	pop	{r4, r5, r6, r7}
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	58000800 	.word	0x58000800
 8004ff4:	48000400 	.word	0x48000400

08004ff8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004ff8:	6903      	ldr	r3, [r0, #16]
 8004ffa:	4219      	tst	r1, r3
 8004ffc:	d101      	bne.n	8005002 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ffe:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005000:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8005002:	2001      	movs	r0, #1
 8005004:	4770      	bx	lr
	...

08005008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005008:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	4203      	tst	r3, r0
 8005010:	d100      	bne.n	8005014 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8005012:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005014:	4b02      	ldr	r3, [pc, #8]	; (8005020 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005016:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005018:	f7fd fdbc 	bl	8002b94 <HAL_GPIO_EXTI_Callback>
}
 800501c:	e7f9      	b.n	8005012 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800501e:	bf00      	nop
 8005020:	58000800 	.word	0x58000800

08005024 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005024:	6803      	ldr	r3, [r0, #0]
 8005026:	699a      	ldr	r2, [r3, #24]
 8005028:	f012 0f02 	tst.w	r2, #2
 800502c:	d001      	beq.n	8005032 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800502e:	2200      	movs	r2, #0
 8005030:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005032:	6803      	ldr	r3, [r0, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	f012 0f01 	tst.w	r2, #1
 800503a:	d103      	bne.n	8005044 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	619a      	str	r2, [r3, #24]
  }
}
 8005044:	4770      	bx	lr

08005046 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005046:	b470      	push	{r4, r5, r6}
 8005048:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800504a:	6805      	ldr	r5, [r0, #0]
 800504c:	6868      	ldr	r0, [r5, #4]
 800504e:	0d74      	lsrs	r4, r6, #21
 8005050:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005054:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8005058:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800505c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005060:	f044 0403 	orr.w	r4, r4, #3
 8005064:	ea20 0004 	bic.w	r0, r0, r4
 8005068:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800506c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005070:	4319      	orrs	r1, r3
 8005072:	4331      	orrs	r1, r6
 8005074:	4301      	orrs	r1, r0
 8005076:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005078:	bc70      	pop	{r4, r5, r6}
 800507a:	4770      	bx	lr

0800507c <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800507c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800507e:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <I2C_Enable_IRQ+0x78>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d017      	beq.n	80050b4 <I2C_Enable_IRQ+0x38>
 8005084:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <I2C_Enable_IRQ+0x7c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d014      	beq.n	80050b4 <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800508a:	f011 0f04 	tst.w	r1, #4
 800508e:	d12f      	bne.n	80050f0 <I2C_Enable_IRQ+0x74>
  uint32_t tmpisr = 0U;
 8005090:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005092:	f011 0f01 	tst.w	r1, #1
 8005096:	d001      	beq.n	800509c <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005098:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800509c:	f011 0f02 	tst.w	r1, #2
 80050a0:	d001      	beq.n	80050a6 <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80050a2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80050a6:	f001 0112 	and.w	r1, r1, #18
 80050aa:	2912      	cmp	r1, #18
 80050ac:	d110      	bne.n	80050d0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80050ae:	f043 0320 	orr.w	r3, r3, #32
 80050b2:	e00d      	b.n	80050d0 <I2C_Enable_IRQ+0x54>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80050b4:	f011 0f04 	tst.w	r1, #4
 80050b8:	d10f      	bne.n	80050da <I2C_Enable_IRQ+0x5e>
  uint32_t tmpisr = 0U;
 80050ba:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80050bc:	f001 0211 	and.w	r2, r1, #17
 80050c0:	2a11      	cmp	r2, #17
 80050c2:	d00c      	beq.n	80050de <I2C_Enable_IRQ+0x62>
 80050c4:	f001 0112 	and.w	r1, r1, #18
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80050c8:	2912      	cmp	r1, #18
 80050ca:	d00b      	beq.n	80050e4 <I2C_Enable_IRQ+0x68>
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80050cc:	2912      	cmp	r1, #18
 80050ce:	d00c      	beq.n	80050ea <I2C_Enable_IRQ+0x6e>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80050d0:	6801      	ldr	r1, [r0, #0]
 80050d2:	680a      	ldr	r2, [r1, #0]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	600b      	str	r3, [r1, #0]
}
 80050d8:	4770      	bx	lr
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050da:	23b8      	movs	r3, #184	; 0xb8
 80050dc:	e7ee      	b.n	80050bc <I2C_Enable_IRQ+0x40>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80050de:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80050e2:	e7ef      	b.n	80050c4 <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_STOPI;
 80050e4:	f043 0320 	orr.w	r3, r3, #32
 80050e8:	e7f0      	b.n	80050cc <I2C_Enable_IRQ+0x50>
      tmpisr |= I2C_IT_TCI;
 80050ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ee:	e7ef      	b.n	80050d0 <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050f0:	23b8      	movs	r3, #184	; 0xb8
 80050f2:	e7ce      	b.n	8005092 <I2C_Enable_IRQ+0x16>
 80050f4:	080062bf 	.word	0x080062bf
 80050f8:	080061c1 	.word	0x080061c1

080050fc <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050fc:	f011 0f01 	tst.w	r1, #1
 8005100:	d009      	beq.n	8005116 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005102:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005106:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800510a:	2b28      	cmp	r3, #40	; 0x28
 800510c:	d001      	beq.n	8005112 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800510e:	23f2      	movs	r3, #242	; 0xf2
 8005110:	e002      	b.n	8005118 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005112:	2342      	movs	r3, #66	; 0x42
 8005114:	e000      	b.n	8005118 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8005116:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005118:	f011 0f02 	tst.w	r1, #2
 800511c:	d02c      	beq.n	8005178 <I2C_Disable_IRQ+0x7c>
{
 800511e:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005120:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005124:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005128:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800512c:	2a28      	cmp	r2, #40	; 0x28
 800512e:	d018      	beq.n	8005162 <I2C_Disable_IRQ+0x66>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005130:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005134:	f011 0f04 	tst.w	r1, #4
 8005138:	d001      	beq.n	800513e <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800513a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800513e:	f001 0211 	and.w	r2, r1, #17
 8005142:	2a11      	cmp	r2, #17
 8005144:	d00f      	beq.n	8005166 <I2C_Disable_IRQ+0x6a>
 8005146:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800514a:	2912      	cmp	r1, #18
 800514c:	d00e      	beq.n	800516c <I2C_Disable_IRQ+0x70>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800514e:	2912      	cmp	r1, #18
 8005150:	d00f      	beq.n	8005172 <I2C_Disable_IRQ+0x76>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005152:	6801      	ldr	r1, [r0, #0]
 8005154:	680a      	ldr	r2, [r1, #0]
 8005156:	ea22 0303 	bic.w	r3, r2, r3
 800515a:	600b      	str	r3, [r1, #0]
}
 800515c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005160:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005162:	4623      	mov	r3, r4
 8005164:	e7e6      	b.n	8005134 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005166:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800516a:	e7ec      	b.n	8005146 <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 800516c:	f043 0320 	orr.w	r3, r3, #32
 8005170:	e7ed      	b.n	800514e <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 8005172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005176:	e7ec      	b.n	8005152 <I2C_Disable_IRQ+0x56>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005178:	f011 0f04 	tst.w	r1, #4
 800517c:	d001      	beq.n	8005182 <I2C_Disable_IRQ+0x86>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800517e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8005182:	f001 0211 	and.w	r2, r1, #17
 8005186:	2a11      	cmp	r2, #17
 8005188:	d00b      	beq.n	80051a2 <I2C_Disable_IRQ+0xa6>
 800518a:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800518e:	2912      	cmp	r1, #18
 8005190:	d00a      	beq.n	80051a8 <I2C_Disable_IRQ+0xac>
  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005192:	2912      	cmp	r1, #18
 8005194:	d00b      	beq.n	80051ae <I2C_Disable_IRQ+0xb2>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005196:	6801      	ldr	r1, [r0, #0]
 8005198:	680a      	ldr	r2, [r1, #0]
 800519a:	ea22 0303 	bic.w	r3, r2, r3
 800519e:	600b      	str	r3, [r1, #0]
 80051a0:	4770      	bx	lr
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80051a2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80051a6:	e7f0      	b.n	800518a <I2C_Disable_IRQ+0x8e>
    tmpisr |= I2C_IT_STOPI;
 80051a8:	f043 0320 	orr.w	r3, r3, #32
 80051ac:	e7f1      	b.n	8005192 <I2C_Disable_IRQ+0x96>
    tmpisr |= I2C_IT_TCI;
 80051ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b2:	e7f0      	b.n	8005196 <I2C_Disable_IRQ+0x9a>

080051b4 <I2C_IsAcknowledgeFailed>:
{
 80051b4:	b570      	push	{r4, r5, r6, lr}
 80051b6:	4604      	mov	r4, r0
 80051b8:	460d      	mov	r5, r1
 80051ba:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051bc:	6803      	ldr	r3, [r0, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	f013 0f10 	tst.w	r3, #16
 80051c4:	d01c      	beq.n	8005200 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	f012 0f20 	tst.w	r2, #32
 80051ce:	d119      	bne.n	8005204 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80051d0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80051d4:	d0f7      	beq.n	80051c6 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fe fd65 	bl	8003ca4 <HAL_GetTick>
 80051da:	1b80      	subs	r0, r0, r6
 80051dc:	42a8      	cmp	r0, r5
 80051de:	d801      	bhi.n	80051e4 <I2C_IsAcknowledgeFailed+0x30>
 80051e0:	2d00      	cmp	r5, #0
 80051e2:	d1f0      	bne.n	80051c6 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051e6:	f043 0320 	orr.w	r3, r3, #32
 80051ea:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051ec:	2320      	movs	r3, #32
 80051ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80051f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80051fc:	2001      	movs	r0, #1
 80051fe:	e020      	b.n	8005242 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8005200:	2000      	movs	r0, #0
 8005202:	e01e      	b.n	8005242 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005204:	2210      	movs	r2, #16
 8005206:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	2520      	movs	r5, #32
 800520c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800520e:	4620      	mov	r0, r4
 8005210:	f7ff ff08 	bl	8005024 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005214:	6822      	ldr	r2, [r4, #0]
 8005216:	6853      	ldr	r3, [r2, #4]
 8005218:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800521c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005220:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800522a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005232:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005236:	2300      	movs	r3, #0
 8005238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800523c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8005240:	2001      	movs	r0, #1
}
 8005242:	bd70      	pop	{r4, r5, r6, pc}

08005244 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4604      	mov	r4, r0
 8005248:	460d      	mov	r5, r1
 800524a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f013 0f02 	tst.w	r3, #2
 8005254:	d11d      	bne.n	8005292 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005256:	4632      	mov	r2, r6
 8005258:	4629      	mov	r1, r5
 800525a:	4620      	mov	r0, r4
 800525c:	f7ff ffaa 	bl	80051b4 <I2C_IsAcknowledgeFailed>
 8005260:	b9c8      	cbnz	r0, 8005296 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8005262:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005266:	d0f1      	beq.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005268:	f7fe fd1c 	bl	8003ca4 <HAL_GetTick>
 800526c:	1b80      	subs	r0, r0, r6
 800526e:	42a8      	cmp	r0, r5
 8005270:	d801      	bhi.n	8005276 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005272:	2d00      	cmp	r5, #0
 8005274:	d1ea      	bne.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005276:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005278:	f043 0320 	orr.w	r3, r3, #32
 800527c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800527e:	2320      	movs	r3, #32
 8005280:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005284:	2300      	movs	r3, #0
 8005286:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800528a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800528e:	2001      	movs	r0, #1
 8005290:	e000      	b.n	8005294 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8005292:	2000      	movs	r0, #0
}
 8005294:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005296:	2001      	movs	r0, #1
 8005298:	e7fc      	b.n	8005294 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800529a <I2C_WaitOnFlagUntilTimeout>:
{
 800529a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529c:	4605      	mov	r5, r0
 800529e:	460f      	mov	r7, r1
 80052a0:	4616      	mov	r6, r2
 80052a2:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	ea37 0303 	bics.w	r3, r7, r3
 80052ac:	bf0c      	ite	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	2300      	movne	r3, #0
 80052b2:	42b3      	cmp	r3, r6
 80052b4:	d118      	bne.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80052ba:	d0f3      	beq.n	80052a4 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052bc:	f7fe fcf2 	bl	8003ca4 <HAL_GetTick>
 80052c0:	9b06      	ldr	r3, [sp, #24]
 80052c2:	1ac0      	subs	r0, r0, r3
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d801      	bhi.n	80052cc <I2C_WaitOnFlagUntilTimeout+0x32>
 80052c8:	2c00      	cmp	r4, #0
 80052ca:	d1eb      	bne.n	80052a4 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052cc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80052ce:	f043 0320 	orr.w	r3, r3, #32
 80052d2:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052d4:	2320      	movs	r3, #32
 80052d6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052da:	2300      	movs	r3, #0
 80052dc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80052e0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80052e4:	2001      	movs	r0, #1
 80052e6:	e000      	b.n	80052ea <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80052e8:	2000      	movs	r0, #0
}
 80052ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080052ec <I2C_RequestMemoryWrite>:
{
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	4604      	mov	r4, r0
 80052f2:	4616      	mov	r6, r2
 80052f4:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80052f6:	4b18      	ldr	r3, [pc, #96]	; (8005358 <I2C_RequestMemoryWrite+0x6c>)
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052fe:	b2ea      	uxtb	r2, r5
 8005300:	f7ff fea1 	bl	8005046 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005304:	9a07      	ldr	r2, [sp, #28]
 8005306:	9906      	ldr	r1, [sp, #24]
 8005308:	4620      	mov	r0, r4
 800530a:	f7ff ff9b 	bl	8005244 <I2C_WaitOnTXISFlagUntilTimeout>
 800530e:	b9e8      	cbnz	r0, 800534c <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005310:	2d01      	cmp	r5, #1
 8005312:	d10e      	bne.n	8005332 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	b2f6      	uxtb	r6, r6
 8005318:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800531a:	9b07      	ldr	r3, [sp, #28]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	9b06      	ldr	r3, [sp, #24]
 8005320:	2200      	movs	r2, #0
 8005322:	2180      	movs	r1, #128	; 0x80
 8005324:	4620      	mov	r0, r4
 8005326:	f7ff ffb8 	bl	800529a <I2C_WaitOnFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	b178      	cbz	r0, 800534e <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e00d      	b.n	800534e <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	0a32      	lsrs	r2, r6, #8
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005338:	9a07      	ldr	r2, [sp, #28]
 800533a:	9906      	ldr	r1, [sp, #24]
 800533c:	4620      	mov	r0, r4
 800533e:	f7ff ff81 	bl	8005244 <I2C_WaitOnTXISFlagUntilTimeout>
 8005342:	b938      	cbnz	r0, 8005354 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	b2f6      	uxtb	r6, r6
 8005348:	629e      	str	r6, [r3, #40]	; 0x28
 800534a:	e7e6      	b.n	800531a <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
}
 800534e:	4618      	mov	r0, r3
 8005350:	b002      	add	sp, #8
 8005352:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e7fa      	b.n	800534e <I2C_RequestMemoryWrite+0x62>
 8005358:	80002000 	.word	0x80002000

0800535c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4605      	mov	r5, r0
 8005360:	460c      	mov	r4, r1
 8005362:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f013 0f20 	tst.w	r3, #32
 800536c:	d11a      	bne.n	80053a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	4632      	mov	r2, r6
 8005370:	4621      	mov	r1, r4
 8005372:	4628      	mov	r0, r5
 8005374:	f7ff ff1e 	bl	80051b4 <I2C_IsAcknowledgeFailed>
 8005378:	b9b0      	cbnz	r0, 80053a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537a:	f7fe fc93 	bl	8003ca4 <HAL_GetTick>
 800537e:	1b80      	subs	r0, r0, r6
 8005380:	42a0      	cmp	r0, r4
 8005382:	d801      	bhi.n	8005388 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005384:	2c00      	cmp	r4, #0
 8005386:	d1ed      	bne.n	8005364 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005388:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800538a:	f043 0320 	orr.w	r3, r3, #32
 800538e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005390:	2320      	movs	r3, #32
 8005392:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005396:	2300      	movs	r3, #0
 8005398:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800539c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80053a0:	2001      	movs	r0, #1
}
 80053a2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80053a4:	2000      	movs	r0, #0
 80053a6:	e7fc      	b.n	80053a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80053a8:	2001      	movs	r0, #1
 80053aa:	e7fa      	b.n	80053a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080053ac <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80053ac:	b570      	push	{r4, r5, r6, lr}
 80053ae:	4604      	mov	r4, r0
 80053b0:	460d      	mov	r5, r1
 80053b2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f013 0f04 	tst.w	r3, #4
 80053bc:	d13e      	bne.n	800543c <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053be:	4632      	mov	r2, r6
 80053c0:	4629      	mov	r1, r5
 80053c2:	4620      	mov	r0, r4
 80053c4:	f7ff fef6 	bl	80051b4 <I2C_IsAcknowledgeFailed>
 80053c8:	4601      	mov	r1, r0
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d138      	bne.n	8005440 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	f012 0f20 	tst.w	r2, #32
 80053d6:	d113      	bne.n	8005400 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d8:	f7fe fc64 	bl	8003ca4 <HAL_GetTick>
 80053dc:	1b80      	subs	r0, r0, r6
 80053de:	42a8      	cmp	r0, r5
 80053e0:	d801      	bhi.n	80053e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	d1e6      	bne.n	80053b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80053e8:	f043 0320 	orr.w	r3, r3, #32
 80053ec:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053ee:	2320      	movs	r3, #32
 80053f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80053f4:	2300      	movs	r3, #0
 80053f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80053fa:	2101      	movs	r1, #1
}
 80053fc:	4608      	mov	r0, r1
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	f012 0f04 	tst.w	r2, #4
 8005406:	d002      	beq.n	800540e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8005408:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800540a:	2a00      	cmp	r2, #0
 800540c:	d1f6      	bne.n	80053fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800540e:	2220      	movs	r2, #32
 8005410:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8005412:	6821      	ldr	r1, [r4, #0]
 8005414:	684b      	ldr	r3, [r1, #4]
 8005416:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800541a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800541e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005422:	f023 0301 	bic.w	r3, r3, #1
 8005426:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005428:	2300      	movs	r3, #0
 800542a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800542c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005434:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005438:	2101      	movs	r1, #1
 800543a:	e7df      	b.n	80053fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 800543c:	2100      	movs	r1, #0
 800543e:	e7dd      	b.n	80053fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8005440:	2101      	movs	r1, #1
 8005442:	e7db      	b.n	80053fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08005444 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005444:	2800      	cmp	r0, #0
 8005446:	d059      	beq.n	80054fc <HAL_I2C_Init+0xb8>
{
 8005448:	b510      	push	{r4, lr}
 800544a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800544c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005450:	2b00      	cmp	r3, #0
 8005452:	d043      	beq.n	80054dc <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005454:	2324      	movs	r3, #36	; 0x24
 8005456:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	6813      	ldr	r3, [r2, #0]
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005464:	6863      	ldr	r3, [r4, #4]
 8005466:	6822      	ldr	r2, [r4, #0]
 8005468:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800546c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	6893      	ldr	r3, [r2, #8]
 8005472:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005476:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005478:	68e3      	ldr	r3, [r4, #12]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d033      	beq.n	80054e6 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800547e:	68a3      	ldr	r3, [r4, #8]
 8005480:	6822      	ldr	r2, [r4, #0]
 8005482:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005486:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005488:	68e3      	ldr	r3, [r4, #12]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d031      	beq.n	80054f2 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800548e:	6822      	ldr	r2, [r4, #0]
 8005490:	6853      	ldr	r3, [r2, #4]
 8005492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800549c:	6822      	ldr	r2, [r4, #0]
 800549e:	68d3      	ldr	r3, [r2, #12]
 80054a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054a4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	6962      	ldr	r2, [r4, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	69a1      	ldr	r1, [r4, #24]
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80054b4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054b6:	69e3      	ldr	r3, [r4, #28]
 80054b8:	6a21      	ldr	r1, [r4, #32]
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	430b      	orrs	r3, r1
 80054be:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80054c0:	6822      	ldr	r2, [r4, #0]
 80054c2:	6813      	ldr	r3, [r2, #0]
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ca:	2000      	movs	r0, #0
 80054cc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	2320      	movs	r3, #32
 80054d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054d4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80054da:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80054dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80054e0:	f7fd faa4 	bl	8002a2c <HAL_I2C_MspInit>
 80054e4:	e7b6      	b.n	8005454 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054e6:	68a3      	ldr	r3, [r4, #8]
 80054e8:	6822      	ldr	r2, [r4, #0]
 80054ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ee:	6093      	str	r3, [r2, #8]
 80054f0:	e7ca      	b.n	8005488 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	e7c8      	b.n	800548e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80054fc:	2001      	movs	r0, #1
}
 80054fe:	4770      	bx	lr

08005500 <HAL_I2C_Master_Transmit>:
{
 8005500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005504:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005506:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800550a:	b2ed      	uxtb	r5, r5
 800550c:	2d20      	cmp	r5, #32
 800550e:	f040 80a4 	bne.w	800565a <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8005512:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005516:	2c01      	cmp	r4, #1
 8005518:	f000 80a4 	beq.w	8005664 <HAL_I2C_Master_Transmit+0x164>
 800551c:	4698      	mov	r8, r3
 800551e:	4617      	mov	r7, r2
 8005520:	460e      	mov	r6, r1
 8005522:	4604      	mov	r4, r0
 8005524:	f04f 0901 	mov.w	r9, #1
 8005528:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800552c:	f7fe fbba 	bl	8003ca4 <HAL_GetTick>
 8005530:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005532:	9000      	str	r0, [sp, #0]
 8005534:	2319      	movs	r3, #25
 8005536:	464a      	mov	r2, r9
 8005538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800553c:	4620      	mov	r0, r4
 800553e:	f7ff feac 	bl	800529a <I2C_WaitOnFlagUntilTimeout>
 8005542:	2800      	cmp	r0, #0
 8005544:	f040 8090 	bne.w	8005668 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005548:	2321      	movs	r3, #33	; 0x21
 800554a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800554e:	2310      	movs	r3, #16
 8005550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005554:	2300      	movs	r3, #0
 8005556:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005558:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800555a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800555e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005560:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	2bff      	cmp	r3, #255	; 0xff
 8005566:	d90a      	bls.n	800557e <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005568:	22ff      	movs	r2, #255	; 0xff
 800556a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800556c:	4b42      	ldr	r3, [pc, #264]	; (8005678 <HAL_I2C_Master_Transmit+0x178>)
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005574:	4631      	mov	r1, r6
 8005576:	4620      	mov	r0, r4
 8005578:	f7ff fd65 	bl	8005046 <I2C_TransferConfig>
 800557c:	e018      	b.n	80055b0 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 800557e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005580:	b292      	uxth	r2, r2
 8005582:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005584:	4b3c      	ldr	r3, [pc, #240]	; (8005678 <HAL_I2C_Master_Transmit+0x178>)
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	4631      	mov	r1, r6
 8005590:	4620      	mov	r0, r4
 8005592:	f7ff fd58 	bl	8005046 <I2C_TransferConfig>
 8005596:	e00b      	b.n	80055b0 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8005598:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800559a:	b292      	uxth	r2, r2
 800559c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800559e:	2300      	movs	r3, #0
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	4631      	mov	r1, r6
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7ff fd4b 	bl	8005046 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d033      	beq.n	8005620 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b8:	462a      	mov	r2, r5
 80055ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055bc:	4620      	mov	r0, r4
 80055be:	f7ff fe41 	bl	8005244 <I2C_WaitOnTXISFlagUntilTimeout>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d152      	bne.n	800566c <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	7812      	ldrb	r2, [r2, #0]
 80055cc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80055ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d0:	3301      	adds	r3, #1
 80055d2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80055d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29b      	uxth	r3, r3
 80055da:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80055dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80055e6:	b292      	uxth	r2, r2
 80055e8:	2a00      	cmp	r2, #0
 80055ea:	d0e1      	beq.n	80055b0 <HAL_I2C_Master_Transmit+0xb0>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1df      	bne.n	80055b0 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055f0:	9500      	str	r5, [sp, #0]
 80055f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f4:	2200      	movs	r2, #0
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	4620      	mov	r0, r4
 80055fa:	f7ff fe4e 	bl	800529a <I2C_WaitOnFlagUntilTimeout>
 80055fe:	2800      	cmp	r0, #0
 8005600:	d136      	bne.n	8005670 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005602:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	2bff      	cmp	r3, #255	; 0xff
 8005608:	d9c6      	bls.n	8005598 <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800560a:	22ff      	movs	r2, #255	; 0xff
 800560c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800560e:	2300      	movs	r3, #0
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005616:	4631      	mov	r1, r6
 8005618:	4620      	mov	r0, r4
 800561a:	f7ff fd14 	bl	8005046 <I2C_TransferConfig>
 800561e:	e7c7      	b.n	80055b0 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005620:	462a      	mov	r2, r5
 8005622:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005624:	4620      	mov	r0, r4
 8005626:	f7ff fe99 	bl	800535c <I2C_WaitOnSTOPFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	bb10      	cbnz	r0, 8005674 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800562e:	6822      	ldr	r2, [r4, #0]
 8005630:	2120      	movs	r1, #32
 8005632:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8005634:	6820      	ldr	r0, [r4, #0]
 8005636:	6842      	ldr	r2, [r0, #4]
 8005638:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800563c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005640:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005644:	f022 0201 	bic.w	r2, r2, #1
 8005648:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800564a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800564e:	2200      	movs	r2, #0
 8005650:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005654:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8005658:	e000      	b.n	800565c <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 800565a:	2302      	movs	r3, #2
}
 800565c:	4618      	mov	r0, r3
 800565e:	b003      	add	sp, #12
 8005660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8005664:	2302      	movs	r3, #2
 8005666:	e7f9      	b.n	800565c <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e7f7      	b.n	800565c <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e7f5      	b.n	800565c <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e7f3      	b.n	800565c <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e7f1      	b.n	800565c <HAL_I2C_Master_Transmit+0x15c>
 8005678:	80002000 	.word	0x80002000

0800567c <HAL_I2C_Master_Receive>:
{
 800567c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005680:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005682:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8005686:	b2ed      	uxtb	r5, r5
 8005688:	2d20      	cmp	r5, #32
 800568a:	f040 80a4 	bne.w	80057d6 <HAL_I2C_Master_Receive+0x15a>
    __HAL_LOCK(hi2c);
 800568e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005692:	2c01      	cmp	r4, #1
 8005694:	f000 80a4 	beq.w	80057e0 <HAL_I2C_Master_Receive+0x164>
 8005698:	4698      	mov	r8, r3
 800569a:	4617      	mov	r7, r2
 800569c:	460e      	mov	r6, r1
 800569e:	4604      	mov	r4, r0
 80056a0:	f04f 0901 	mov.w	r9, #1
 80056a4:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80056a8:	f7fe fafc 	bl	8003ca4 <HAL_GetTick>
 80056ac:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056ae:	9000      	str	r0, [sp, #0]
 80056b0:	2319      	movs	r3, #25
 80056b2:	464a      	mov	r2, r9
 80056b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056b8:	4620      	mov	r0, r4
 80056ba:	f7ff fdee 	bl	800529a <I2C_WaitOnFlagUntilTimeout>
 80056be:	2800      	cmp	r0, #0
 80056c0:	f040 8090 	bne.w	80057e4 <HAL_I2C_Master_Receive+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056c4:	2322      	movs	r3, #34	; 0x22
 80056c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80056ca:	2310      	movs	r3, #16
 80056cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80056d4:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80056d6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056da:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2bff      	cmp	r3, #255	; 0xff
 80056e2:	d90a      	bls.n	80056fa <HAL_I2C_Master_Receive+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056e4:	22ff      	movs	r2, #255	; 0xff
 80056e6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80056e8:	4b42      	ldr	r3, [pc, #264]	; (80057f4 <HAL_I2C_Master_Receive+0x178>)
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056f0:	4631      	mov	r1, r6
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7ff fca7 	bl	8005046 <I2C_TransferConfig>
 80056f8:	e018      	b.n	800572c <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 80056fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80056fc:	b292      	uxth	r2, r2
 80056fe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005700:	4b3c      	ldr	r3, [pc, #240]	; (80057f4 <HAL_I2C_Master_Receive+0x178>)
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	4631      	mov	r1, r6
 800570c:	4620      	mov	r0, r4
 800570e:	f7ff fc9a 	bl	8005046 <I2C_TransferConfig>
 8005712:	e00b      	b.n	800572c <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8005714:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005716:	b292      	uxth	r2, r2
 8005718:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800571a:	2300      	movs	r3, #0
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	4631      	mov	r1, r6
 8005726:	4620      	mov	r0, r4
 8005728:	f7ff fc8d 	bl	8005046 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800572c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d033      	beq.n	800579c <HAL_I2C_Master_Receive+0x120>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005734:	462a      	mov	r2, r5
 8005736:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005738:	4620      	mov	r0, r4
 800573a:	f7ff fe37 	bl	80053ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800573e:	2800      	cmp	r0, #0
 8005740:	d152      	bne.n	80057e8 <HAL_I2C_Master_Receive+0x16c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005748:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800574a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800574c:	3301      	adds	r3, #1
 800574e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005750:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005752:	3b01      	subs	r3, #1
 8005754:	b29b      	uxth	r3, r3
 8005756:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005758:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800575a:	3a01      	subs	r2, #1
 800575c:	b292      	uxth	r2, r2
 800575e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005760:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005762:	b292      	uxth	r2, r2
 8005764:	2a00      	cmp	r2, #0
 8005766:	d0e1      	beq.n	800572c <HAL_I2C_Master_Receive+0xb0>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1df      	bne.n	800572c <HAL_I2C_Master_Receive+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800576c:	9500      	str	r5, [sp, #0]
 800576e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005770:	2200      	movs	r2, #0
 8005772:	2180      	movs	r1, #128	; 0x80
 8005774:	4620      	mov	r0, r4
 8005776:	f7ff fd90 	bl	800529a <I2C_WaitOnFlagUntilTimeout>
 800577a:	2800      	cmp	r0, #0
 800577c:	d136      	bne.n	80057ec <HAL_I2C_Master_Receive+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800577e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	2bff      	cmp	r3, #255	; 0xff
 8005784:	d9c6      	bls.n	8005714 <HAL_I2C_Master_Receive+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005786:	22ff      	movs	r2, #255	; 0xff
 8005788:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800578a:	2300      	movs	r3, #0
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005792:	4631      	mov	r1, r6
 8005794:	4620      	mov	r0, r4
 8005796:	f7ff fc56 	bl	8005046 <I2C_TransferConfig>
 800579a:	e7c7      	b.n	800572c <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800579c:	462a      	mov	r2, r5
 800579e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057a0:	4620      	mov	r0, r4
 80057a2:	f7ff fddb 	bl	800535c <I2C_WaitOnSTOPFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	bb10      	cbnz	r0, 80057f0 <HAL_I2C_Master_Receive+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	2120      	movs	r1, #32
 80057ae:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80057b0:	6820      	ldr	r0, [r4, #0]
 80057b2:	6842      	ldr	r2, [r0, #4]
 80057b4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80057b8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80057bc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80057c6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057ca:	2200      	movs	r2, #0
 80057cc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80057d0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 80057d4:	e000      	b.n	80057d8 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
}
 80057d8:	4618      	mov	r0, r3
 80057da:	b003      	add	sp, #12
 80057dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 80057e0:	2302      	movs	r3, #2
 80057e2:	e7f9      	b.n	80057d8 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e7f7      	b.n	80057d8 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e7f5      	b.n	80057d8 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e7f3      	b.n	80057d8 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e7f1      	b.n	80057d8 <HAL_I2C_Master_Receive+0x15c>
 80057f4:	80002400 	.word	0x80002400

080057f8 <HAL_I2C_Master_Receive_IT>:
{
 80057f8:	b530      	push	{r4, r5, lr}
 80057fa:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057fc:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005800:	b2e4      	uxtb	r4, r4
 8005802:	2c20      	cmp	r4, #32
 8005804:	d137      	bne.n	8005876 <HAL_I2C_Master_Receive_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005806:	6804      	ldr	r4, [r0, #0]
 8005808:	69a4      	ldr	r4, [r4, #24]
 800580a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800580e:	d135      	bne.n	800587c <HAL_I2C_Master_Receive_IT+0x84>
    __HAL_LOCK(hi2c);
 8005810:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005814:	2c01      	cmp	r4, #1
 8005816:	d033      	beq.n	8005880 <HAL_I2C_Master_Receive_IT+0x88>
 8005818:	2401      	movs	r4, #1
 800581a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800581e:	2422      	movs	r4, #34	; 0x22
 8005820:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005824:	2410      	movs	r4, #16
 8005826:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800582a:	2400      	movs	r4, #0
 800582c:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 800582e:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005830:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005832:	4b14      	ldr	r3, [pc, #80]	; (8005884 <HAL_I2C_Master_Receive_IT+0x8c>)
 8005834:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <HAL_I2C_Master_Receive_IT+0x90>)
 8005838:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800583a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	2bff      	cmp	r3, #255	; 0xff
 8005840:	d914      	bls.n	800586c <HAL_I2C_Master_Receive_IT+0x74>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005842:	23ff      	movs	r3, #255	; 0xff
 8005844:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005846:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800584a:	4604      	mov	r4, r0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800584c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8005850:	480e      	ldr	r0, [pc, #56]	; (800588c <HAL_I2C_Master_Receive_IT+0x94>)
 8005852:	9000      	str	r0, [sp, #0]
 8005854:	4620      	mov	r0, r4
 8005856:	f7ff fbf6 	bl	8005046 <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 800585a:	2500      	movs	r5, #0
 800585c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005860:	2102      	movs	r1, #2
 8005862:	4620      	mov	r0, r4
 8005864:	f7ff fc0a 	bl	800507c <I2C_Enable_IRQ>
    return HAL_OK;
 8005868:	4628      	mov	r0, r5
 800586a:	e005      	b.n	8005878 <HAL_I2C_Master_Receive_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
 800586c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800586e:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005874:	e7e9      	b.n	800584a <HAL_I2C_Master_Receive_IT+0x52>
    return HAL_BUSY;
 8005876:	2002      	movs	r0, #2
}
 8005878:	b003      	add	sp, #12
 800587a:	bd30      	pop	{r4, r5, pc}
      return HAL_BUSY;
 800587c:	2002      	movs	r0, #2
 800587e:	e7fb      	b.n	8005878 <HAL_I2C_Master_Receive_IT+0x80>
    __HAL_LOCK(hi2c);
 8005880:	2002      	movs	r0, #2
 8005882:	e7f9      	b.n	8005878 <HAL_I2C_Master_Receive_IT+0x80>
 8005884:	ffff0000 	.word	0xffff0000
 8005888:	08006045 	.word	0x08006045
 800588c:	80002400 	.word	0x80002400

08005890 <HAL_I2C_Mem_Write>:
{
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800589a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800589e:	b2ed      	uxtb	r5, r5
 80058a0:	2d20      	cmp	r5, #32
 80058a2:	f040 80ba 	bne.w	8005a1a <HAL_I2C_Mem_Write+0x18a>
    if ((pData == NULL) || (Size == 0U))
 80058a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058a8:	b1dc      	cbz	r4, 80058e2 <HAL_I2C_Mem_Write+0x52>
 80058aa:	b1d7      	cbz	r7, 80058e2 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 80058ac:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80058b0:	2c01      	cmp	r4, #1
 80058b2:	f000 80b7 	beq.w	8005a24 <HAL_I2C_Mem_Write+0x194>
 80058b6:	4698      	mov	r8, r3
 80058b8:	4691      	mov	r9, r2
 80058ba:	460d      	mov	r5, r1
 80058bc:	4604      	mov	r4, r0
 80058be:	f04f 0a01 	mov.w	sl, #1
 80058c2:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80058c6:	f7fe f9ed 	bl	8003ca4 <HAL_GetTick>
 80058ca:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058cc:	9000      	str	r0, [sp, #0]
 80058ce:	2319      	movs	r3, #25
 80058d0:	4652      	mov	r2, sl
 80058d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058d6:	4620      	mov	r0, r4
 80058d8:	f7ff fcdf 	bl	800529a <I2C_WaitOnFlagUntilTimeout>
 80058dc:	b130      	cbz	r0, 80058ec <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e09c      	b.n	8005a1c <HAL_I2C_Mem_Write+0x18c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058e6:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e097      	b.n	8005a1c <HAL_I2C_Mem_Write+0x18c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058ec:	2321      	movs	r3, #33	; 0x21
 80058ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058f2:	2340      	movs	r3, #64	; 0x40
 80058f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80058fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058fe:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005900:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005902:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005904:	9601      	str	r6, [sp, #4]
 8005906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	4643      	mov	r3, r8
 800590c:	464a      	mov	r2, r9
 800590e:	4629      	mov	r1, r5
 8005910:	4620      	mov	r0, r4
 8005912:	f7ff fceb 	bl	80052ec <I2C_RequestMemoryWrite>
 8005916:	b970      	cbnz	r0, 8005936 <HAL_I2C_Mem_Write+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005918:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800591a:	b29b      	uxth	r3, r3
 800591c:	2bff      	cmp	r3, #255	; 0xff
 800591e:	d90f      	bls.n	8005940 <HAL_I2C_Mem_Write+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005920:	22ff      	movs	r2, #255	; 0xff
 8005922:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005924:	2300      	movs	r3, #0
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800592c:	4629      	mov	r1, r5
 800592e:	4620      	mov	r0, r4
 8005930:	f7ff fb89 	bl	8005046 <I2C_TransferConfig>
 8005934:	e021      	b.n	800597a <HAL_I2C_Mem_Write+0xea>
      __HAL_UNLOCK(hi2c);
 8005936:	2300      	movs	r3, #0
 8005938:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800593c:	4653      	mov	r3, sl
 800593e:	e06d      	b.n	8005a1c <HAL_I2C_Mem_Write+0x18c>
      hi2c->XferSize = hi2c->XferCount;
 8005940:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005942:	b292      	uxth	r2, r2
 8005944:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005946:	2300      	movs	r3, #0
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	4629      	mov	r1, r5
 8005952:	4620      	mov	r0, r4
 8005954:	f7ff fb77 	bl	8005046 <I2C_TransferConfig>
 8005958:	e00f      	b.n	800597a <HAL_I2C_Mem_Write+0xea>
          hi2c->XferSize = hi2c->XferCount;
 800595a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800595c:	b292      	uxth	r2, r2
 800595e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005960:	2300      	movs	r3, #0
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	4629      	mov	r1, r5
 800596c:	4620      	mov	r0, r4
 800596e:	f7ff fb6a 	bl	8005046 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8005972:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d032      	beq.n	80059e0 <HAL_I2C_Mem_Write+0x150>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800597a:	4632      	mov	r2, r6
 800597c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800597e:	4620      	mov	r0, r4
 8005980:	f7ff fc60 	bl	8005244 <I2C_WaitOnTXISFlagUntilTimeout>
 8005984:	2800      	cmp	r0, #0
 8005986:	d14f      	bne.n	8005a28 <HAL_I2C_Mem_Write+0x198>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005988:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	7812      	ldrb	r2, [r2, #0]
 800598e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005992:	3301      	adds	r3, #1
 8005994:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005996:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005998:	3b01      	subs	r3, #1
 800599a:	b29b      	uxth	r3, r3
 800599c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800599e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80059a8:	b292      	uxth	r2, r2
 80059aa:	2a00      	cmp	r2, #0
 80059ac:	d0e1      	beq.n	8005972 <HAL_I2C_Mem_Write+0xe2>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1df      	bne.n	8005972 <HAL_I2C_Mem_Write+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059b2:	9600      	str	r6, [sp, #0]
 80059b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059b6:	2200      	movs	r2, #0
 80059b8:	2180      	movs	r1, #128	; 0x80
 80059ba:	4620      	mov	r0, r4
 80059bc:	f7ff fc6d 	bl	800529a <I2C_WaitOnFlagUntilTimeout>
 80059c0:	bba0      	cbnz	r0, 8005a2c <HAL_I2C_Mem_Write+0x19c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2bff      	cmp	r3, #255	; 0xff
 80059c8:	d9c7      	bls.n	800595a <HAL_I2C_Mem_Write+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ca:	22ff      	movs	r2, #255	; 0xff
 80059cc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059ce:	2300      	movs	r3, #0
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059d6:	4629      	mov	r1, r5
 80059d8:	4620      	mov	r0, r4
 80059da:	f7ff fb34 	bl	8005046 <I2C_TransferConfig>
 80059de:	e7c8      	b.n	8005972 <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e0:	4632      	mov	r2, r6
 80059e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7ff fcb9 	bl	800535c <I2C_WaitOnSTOPFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	bb00      	cbnz	r0, 8005a30 <HAL_I2C_Mem_Write+0x1a0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ee:	6822      	ldr	r2, [r4, #0]
 80059f0:	2120      	movs	r1, #32
 80059f2:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80059f4:	6820      	ldr	r0, [r4, #0]
 80059f6:	6842      	ldr	r2, [r0, #4]
 80059f8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80059fc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005a00:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a0a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005a14:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8005a18:	e000      	b.n	8005a1c <HAL_I2C_Mem_Write+0x18c>
    return HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	b002      	add	sp, #8
 8005a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005a24:	2302      	movs	r3, #2
 8005a26:	e7f9      	b.n	8005a1c <HAL_I2C_Mem_Write+0x18c>
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e7f7      	b.n	8005a1c <HAL_I2C_Mem_Write+0x18c>
          return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e7f5      	b.n	8005a1c <HAL_I2C_Mem_Write+0x18c>
      return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e7f3      	b.n	8005a1c <HAL_I2C_Mem_Write+0x18c>

08005a34 <HAL_I2C_EV_IRQHandler>:
{
 8005a34:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a36:	6803      	ldr	r3, [r0, #0]
 8005a38:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a3a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8005a3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a3e:	b103      	cbz	r3, 8005a42 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8005a40:	4798      	blx	r3
}
 8005a42:	bd08      	pop	{r3, pc}

08005a44 <I2C_ITMasterSeqCplt>:
{
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a4e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b21      	cmp	r3, #33	; 0x21
 8005a56:	d00f      	beq.n	8005a78 <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a58:	2320      	movs	r3, #32
 8005a5a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a5e:	2312      	movs	r3, #18
 8005a60:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005a62:	2500      	movs	r5, #0
 8005a64:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a66:	2102      	movs	r1, #2
 8005a68:	f7ff fb48 	bl	80050fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005a6c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a70:	4620      	mov	r0, r4
 8005a72:	f7fd f9f7 	bl	8002e64 <HAL_I2C_MasterRxCpltCallback>
}
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a78:	2320      	movs	r3, #32
 8005a7a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a7e:	2311      	movs	r3, #17
 8005a80:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005a82:	2500      	movs	r5, #0
 8005a84:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a86:	2101      	movs	r1, #1
 8005a88:	f7ff fb38 	bl	80050fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005a8c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a90:	4620      	mov	r0, r4
 8005a92:	f7fd f9d9 	bl	8002e48 <HAL_I2C_MasterTxCpltCallback>
 8005a96:	e7ee      	b.n	8005a76 <I2C_ITMasterSeqCplt+0x32>

08005a98 <HAL_I2C_SlaveTxCpltCallback>:
}
 8005a98:	4770      	bx	lr

08005a9a <HAL_I2C_SlaveRxCpltCallback>:
}
 8005a9a:	4770      	bx	lr

08005a9c <I2C_ITSlaveSeqCplt>:
{
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005aa6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b29      	cmp	r3, #41	; 0x29
 8005aae:	d005      	beq.n	8005abc <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ab0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab8:	d00f      	beq.n	8005ada <I2C_ITSlaveSeqCplt+0x3e>
}
 8005aba:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005abc:	2328      	movs	r3, #40	; 0x28
 8005abe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ac2:	2321      	movs	r3, #33	; 0x21
 8005ac4:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	f7ff fb18 	bl	80050fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005acc:	2300      	movs	r3, #0
 8005ace:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f7ff ffe0 	bl	8005a98 <HAL_I2C_SlaveTxCpltCallback>
 8005ad8:	e7ef      	b.n	8005aba <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ada:	2328      	movs	r3, #40	; 0x28
 8005adc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ae0:	2322      	movs	r3, #34	; 0x22
 8005ae2:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005ae4:	2102      	movs	r1, #2
 8005ae6:	f7ff fb09 	bl	80050fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005aea:	2300      	movs	r3, #0
 8005aec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005af0:	4620      	mov	r0, r4
 8005af2:	f7ff ffd2 	bl	8005a9a <HAL_I2C_SlaveRxCpltCallback>
}
 8005af6:	e7e0      	b.n	8005aba <I2C_ITSlaveSeqCplt+0x1e>

08005af8 <HAL_I2C_AddrCallback>:
}
 8005af8:	4770      	bx	lr

08005afa <I2C_ITAddrCplt>:
{
 8005afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005afc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b04:	2b28      	cmp	r3, #40	; 0x28
 8005b06:	d006      	beq.n	8005b16 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b08:	6803      	ldr	r3, [r0, #0]
 8005b0a:	2208      	movs	r2, #8
 8005b0c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8005b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b16:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8005b18:	6803      	ldr	r3, [r0, #0]
 8005b1a:	699e      	ldr	r6, [r3, #24]
 8005b1c:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	0c12      	lsrs	r2, r2, #16
 8005b24:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005b2e:	68df      	ldr	r7, [r3, #12]
 8005b30:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b34:	68c1      	ldr	r1, [r0, #12]
 8005b36:	2902      	cmp	r1, #2
 8005b38:	d121      	bne.n	8005b7e <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8005b3a:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8005b3e:	f015 0f06 	tst.w	r5, #6
 8005b42:	d110      	bne.n	8005b66 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8005b44:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005b46:	3101      	adds	r1, #1
 8005b48:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005b4a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005b4c:	2902      	cmp	r1, #2
 8005b4e:	d1e1      	bne.n	8005b14 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 8005b50:	2100      	movs	r1, #0
 8005b52:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b54:	2008      	movs	r0, #8
 8005b56:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8005b58:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7ff ffca 	bl	8005af8 <HAL_I2C_AddrCallback>
 8005b64:	e7d6      	b.n	8005b14 <I2C_ITAddrCplt+0x1a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b66:	2104      	movs	r1, #4
 8005b68:	f7ff fac8 	bl	80050fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b72:	463a      	mov	r2, r7
 8005b74:	4631      	mov	r1, r6
 8005b76:	4620      	mov	r0, r4
 8005b78:	f7ff ffbe 	bl	8005af8 <HAL_I2C_AddrCallback>
 8005b7c:	e7ca      	b.n	8005b14 <I2C_ITAddrCplt+0x1a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b7e:	2104      	movs	r1, #4
 8005b80:	f7ff fabc 	bl	80050fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005b84:	2300      	movs	r3, #0
 8005b86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b8a:	462a      	mov	r2, r5
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f7ff ffb2 	bl	8005af8 <HAL_I2C_AddrCallback>
 8005b94:	e7be      	b.n	8005b14 <I2C_ITAddrCplt+0x1a>

08005b96 <HAL_I2C_ListenCpltCallback>:
}
 8005b96:	4770      	bx	lr

08005b98 <I2C_ITListenCplt>:
{
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b9c:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <I2C_ITListenCplt+0x60>)
 8005b9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005baa:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005bae:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005bb0:	f011 0f04 	tst.w	r1, #4
 8005bb4:	d012      	beq.n	8005bdc <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bb6:	6803      	ldr	r3, [r0, #0]
 8005bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005bbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8005bc4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8005bc6:	b14b      	cbz	r3, 8005bdc <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8005bcc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bd4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005bd6:	f043 0304 	orr.w	r3, r3, #4
 8005bda:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005bdc:	2107      	movs	r1, #7
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff fa8c 	bl	80050fc <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	2210      	movs	r2, #16
 8005be8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8005bea:	2300      	movs	r3, #0
 8005bec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f7ff ffd0 	bl	8005b96 <HAL_I2C_ListenCpltCallback>
}
 8005bf6:	bd10      	pop	{r4, pc}
 8005bf8:	ffff0000 	.word	0xffff0000

08005bfc <HAL_I2C_MemTxCpltCallback>:
}
 8005bfc:	4770      	bx	lr

08005bfe <HAL_I2C_MemRxCpltCallback>:
}
 8005bfe:	4770      	bx	lr

08005c00 <HAL_I2C_ErrorCallback>:
}
 8005c00:	4770      	bx	lr

08005c02 <HAL_I2C_AbortCpltCallback>:
}
 8005c02:	4770      	bx	lr

08005c04 <I2C_ITError>:
{
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005c08:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c12:	4836      	ldr	r0, [pc, #216]	; (8005cec <I2C_ITError+0xe8>)
 8005c14:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005c16:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8005c18:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005c1a:	4311      	orrs	r1, r2
 8005c1c:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005c1e:	3b28      	subs	r3, #40	; 0x28
 8005c20:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d822      	bhi.n	8005c6c <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c26:	2103      	movs	r1, #3
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7ff fa67 	bl	80050fc <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c2e:	2328      	movs	r3, #40	; 0x28
 8005c30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005c38:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <I2C_ITError+0xec>)
 8005c3a:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005c44:	d022      	beq.n	8005c8c <I2C_ITError+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c4c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8005c4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c50:	b15b      	cbz	r3, 8005c6a <I2C_ITError+0x66>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c52:	4a28      	ldr	r2, [pc, #160]	; (8005cf4 <I2C_ITError+0xf0>)
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8005c56:	2300      	movs	r3, #0
 8005c58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005c5e:	f7ff f86f 	bl	8004d40 <HAL_DMA_Abort_IT>
 8005c62:	b110      	cbz	r0, 8005c6a <I2C_ITError+0x66>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c64:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005c66:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005c68:	4798      	blx	r3
}
 8005c6a:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c6c:	2107      	movs	r1, #7
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f7ff fa44 	bl	80050fc <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005c74:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b60      	cmp	r3, #96	; 0x60
 8005c7c:	d002      	beq.n	8005c84 <I2C_ITError+0x80>
      hi2c->State         = HAL_I2C_STATE_READY;
 8005c7e:	2320      	movs	r3, #32
 8005c80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c84:	2300      	movs	r3, #0
 8005c86:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005c88:	6363      	str	r3, [r4, #52]	; 0x34
 8005c8a:	e7d7      	b.n	8005c3c <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005c92:	d014      	beq.n	8005cbe <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c9a:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8005c9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0e3      	beq.n	8005c6a <I2C_ITError+0x66>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ca2:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <I2C_ITError+0xf0>)
 8005ca4:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005cae:	f7ff f847 	bl	8004d40 <HAL_DMA_Abort_IT>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d0d9      	beq.n	8005c6a <I2C_ITError+0x66>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cb6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005cb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005cba:	4798      	blx	r3
 8005cbc:	e7d5      	b.n	8005c6a <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005cbe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b60      	cmp	r3, #96	; 0x60
 8005cc6:	d006      	beq.n	8005cd6 <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f7ff ff96 	bl	8005c00 <HAL_I2C_ErrorCallback>
}
 8005cd4:	e7c9      	b.n	8005c6a <I2C_ITError+0x66>
    hi2c->State = HAL_I2C_STATE_READY;
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f7ff ff8d 	bl	8005c02 <HAL_I2C_AbortCpltCallback>
 8005ce8:	e7bf      	b.n	8005c6a <I2C_ITError+0x66>
 8005cea:	bf00      	nop
 8005cec:	ffff0000 	.word	0xffff0000
 8005cf0:	08005e19 	.word	0x08005e19
 8005cf4:	080063ff 	.word	0x080063ff

08005cf8 <I2C_ITSlaveCplt>:
{
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005cfe:	6803      	ldr	r3, [r0, #0]
 8005d00:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d02:	2220      	movs	r2, #32
 8005d04:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005d06:	2107      	movs	r1, #7
 8005d08:	f7ff f9f8 	bl	80050fc <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	6853      	ldr	r3, [r2, #4]
 8005d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d14:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	6853      	ldr	r3, [r2, #4]
 8005d1a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005d1e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005d22:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7ff f979 	bl	8005024 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d32:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005d36:	d03a      	beq.n	8005dae <I2C_ITSlaveCplt+0xb6>
    if (hi2c->hdmatx != NULL)
 8005d38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d3a:	b11b      	cbz	r3, 8005d44 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005d44:	f015 0f04 	tst.w	r5, #4
 8005d48:	d010      	beq.n	8005d6c <I2C_ITSlaveCplt+0x74>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005d4a:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d58:	3301      	adds	r3, #1
 8005d5a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8005d5c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d5e:	b12b      	cbz	r3, 8005d6c <I2C_ITSlaveCplt+0x74>
      hi2c->XferSize--;
 8005d60:	3b01      	subs	r3, #1
 8005d62:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005d64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8005d6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	b11b      	cbz	r3, 8005d7a <I2C_ITSlaveCplt+0x82>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005d74:	f043 0304 	orr.w	r3, r3, #4
 8005d78:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005d82:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005d86:	b9eb      	cbnz	r3, 8005dc4 <I2C_ITSlaveCplt+0xcc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d8e:	d127      	bne.n	8005de0 <I2C_ITSlaveCplt+0xe8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d90:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b22      	cmp	r3, #34	; 0x22
 8005d98:	d031      	beq.n	8005dfe <I2C_ITSlaveCplt+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d9a:	2320      	movs	r3, #32
 8005d9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005da0:	2300      	movs	r3, #0
 8005da2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005da6:	4620      	mov	r0, r4
 8005da8:	f7ff fe76 	bl	8005a98 <HAL_I2C_SlaveTxCpltCallback>
}
 8005dac:	e026      	b.n	8005dfc <I2C_ITSlaveCplt+0x104>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005dae:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8005db2:	d0c7      	beq.n	8005d44 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 8005db4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0c4      	beq.n	8005d44 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005dc2:	e7bf      	b.n	8005d44 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005dc4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f7ff ff1c 	bl	8005c04 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005dcc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b28      	cmp	r3, #40	; 0x28
 8005dd4:	d112      	bne.n	8005dfc <I2C_ITSlaveCplt+0x104>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f7ff fedd 	bl	8005b98 <I2C_ITListenCplt>
 8005dde:	e00d      	b.n	8005dfc <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 8005de0:	4620      	mov	r0, r4
 8005de2:	f7ff fe5b 	bl	8005a9c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <I2C_ITSlaveCplt+0x11c>)
 8005de8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005dea:	2320      	movs	r3, #32
 8005dec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005df0:	2300      	movs	r3, #0
 8005df2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005df6:	4620      	mov	r0, r4
 8005df8:	f7ff fecd 	bl	8005b96 <HAL_I2C_ListenCpltCallback>
}
 8005dfc:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8005dfe:	2320      	movs	r3, #32
 8005e00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005e04:	2300      	movs	r3, #0
 8005e06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7ff fe45 	bl	8005a9a <HAL_I2C_SlaveRxCpltCallback>
 8005e10:	e7f4      	b.n	8005dfc <I2C_ITSlaveCplt+0x104>
 8005e12:	bf00      	nop
 8005e14:	ffff0000 	.word	0xffff0000

08005e18 <I2C_Slave_ISR_IT>:
{
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e1a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8005e1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	f000 809c 	beq.w	8005f5e <I2C_Slave_ISR_IT+0x146>
 8005e26:	4616      	mov	r6, r2
 8005e28:	460d      	mov	r5, r1
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e32:	f011 0f20 	tst.w	r1, #32
 8005e36:	d002      	beq.n	8005e3e <I2C_Slave_ISR_IT+0x26>
 8005e38:	f012 0f20 	tst.w	r2, #32
 8005e3c:	d119      	bne.n	8005e72 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e3e:	f015 0f10 	tst.w	r5, #16
 8005e42:	d03e      	beq.n	8005ec2 <I2C_Slave_ISR_IT+0xaa>
 8005e44:	f016 0f10 	tst.w	r6, #16
 8005e48:	d03b      	beq.n	8005ec2 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8005e4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	bb43      	cbnz	r3, 8005ea2 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8005e50:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b28      	cmp	r3, #40	; 0x28
 8005e58:	d00e      	beq.n	8005e78 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005e5a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b29      	cmp	r3, #41	; 0x29
 8005e62:	d011      	beq.n	8005e88 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	2210      	movs	r2, #16
 8005e68:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005e72:	f7ff ff41 	bl	8005cf8 <I2C_ITSlaveCplt>
 8005e76:	e7e2      	b.n	8005e3e <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8005e78:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8005e7c:	d1ed      	bne.n	8005e5a <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4620      	mov	r0, r4
 8005e82:	f7ff fe89 	bl	8005b98 <I2C_ITListenCplt>
 8005e86:	e7f0      	b.n	8005e6a <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005e88:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8005e8c:	d0ea      	beq.n	8005e64 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	2210      	movs	r2, #16
 8005e92:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8005e94:	4620      	mov	r0, r4
 8005e96:	f7ff f8c5 	bl	8005024 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff fdfe 	bl	8005a9c <I2C_ITSlaveSeqCplt>
 8005ea0:	e7e3      	b.n	8005e6a <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ea8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005eaa:	f043 0304 	orr.w	r3, r3, #4
 8005eae:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005eb0:	b117      	cbz	r7, 8005eb8 <I2C_Slave_ISR_IT+0xa0>
 8005eb2:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005eb6:	d1d8      	bne.n	8005e6a <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005eb8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f7ff fea2 	bl	8005c04 <I2C_ITError>
 8005ec0:	e7d3      	b.n	8005e6a <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005ec2:	f015 0f04 	tst.w	r5, #4
 8005ec6:	d01e      	beq.n	8005f06 <I2C_Slave_ISR_IT+0xee>
 8005ec8:	f016 0f04 	tst.w	r6, #4
 8005ecc:	d01b      	beq.n	8005f06 <I2C_Slave_ISR_IT+0xee>
    if (hi2c->XferCount > 0U)
 8005ece:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	b16b      	cbz	r3, 8005ef0 <I2C_Slave_ISR_IT+0xd8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eda:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ede:	3301      	adds	r3, #1
 8005ee0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005ee2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005ee8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8005ef0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1b8      	bne.n	8005e6a <I2C_Slave_ISR_IT+0x52>
 8005ef8:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8005efc:	d0b5      	beq.n	8005e6a <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7ff fdcc 	bl	8005a9c <I2C_ITSlaveSeqCplt>
 8005f04:	e7b1      	b.n	8005e6a <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005f06:	f015 0f08 	tst.w	r5, #8
 8005f0a:	d002      	beq.n	8005f12 <I2C_Slave_ISR_IT+0xfa>
 8005f0c:	f016 0f08 	tst.w	r6, #8
 8005f10:	d117      	bne.n	8005f42 <I2C_Slave_ISR_IT+0x12a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005f12:	f015 0f02 	tst.w	r5, #2
 8005f16:	d0a8      	beq.n	8005e6a <I2C_Slave_ISR_IT+0x52>
 8005f18:	f016 0f02 	tst.w	r6, #2
 8005f1c:	d0a5      	beq.n	8005e6a <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8005f1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	b19b      	cbz	r3, 8005f4c <I2C_Slave_ISR_IT+0x134>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f2e:	3301      	adds	r3, #1
 8005f30:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005f32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005f3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	8523      	strh	r3, [r4, #40]	; 0x28
 8005f40:	e793      	b.n	8005e6a <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005f42:	4629      	mov	r1, r5
 8005f44:	4620      	mov	r0, r4
 8005f46:	f7ff fdd8 	bl	8005afa <I2C_ITAddrCplt>
 8005f4a:	e78e      	b.n	8005e6a <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005f4c:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005f50:	d001      	beq.n	8005f56 <I2C_Slave_ISR_IT+0x13e>
 8005f52:	2f00      	cmp	r7, #0
 8005f54:	d189      	bne.n	8005e6a <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff fda0 	bl	8005a9c <I2C_ITSlaveSeqCplt>
 8005f5c:	e785      	b.n	8005e6a <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8005f5e:	2002      	movs	r0, #2
 8005f60:	e786      	b.n	8005e70 <I2C_Slave_ISR_IT+0x58>

08005f62 <I2C_ITMasterCplt>:
{
 8005f62:	b510      	push	{r4, lr}
 8005f64:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f66:	6803      	ldr	r3, [r0, #0]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 8005f6c:	6802      	ldr	r2, [r0, #0]
 8005f6e:	6853      	ldr	r3, [r2, #4]
 8005f70:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005f74:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005f78:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	6053      	str	r3, [r2, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f82:	2300      	movs	r3, #0
 8005f84:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8005f86:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f88:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8005f8c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8005f8e:	f011 0f10 	tst.w	r1, #16
 8005f92:	d006      	beq.n	8005fa2 <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f94:	6803      	ldr	r3, [r0, #0]
 8005f96:	2210      	movs	r2, #16
 8005f98:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005f9c:	f043 0304 	orr.w	r3, r3, #4
 8005fa0:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f7ff f83e 	bl	8005024 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005fa8:	2103      	movs	r1, #3
 8005faa:	4620      	mov	r0, r4
 8005fac:	f7ff f8a6 	bl	80050fc <I2C_Disable_IRQ>
  tmperror = hi2c->ErrorCode;
 8005fb0:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005fb2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b60      	cmp	r3, #96	; 0x60
 8005fba:	d01b      	beq.n	8005ff4 <I2C_ITMasterCplt+0x92>
 8005fbc:	b9d2      	cbnz	r2, 8005ff4 <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005fbe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b21      	cmp	r3, #33	; 0x21
 8005fc6:	d01a      	beq.n	8005ffe <I2C_ITMasterCplt+0x9c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005fc8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b22      	cmp	r3, #34	; 0x22
 8005fd0:	d114      	bne.n	8005ffc <I2C_ITMasterCplt+0x9a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005fd2:	2320      	movs	r3, #32
 8005fd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fd8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d027      	beq.n	8006032 <I2C_ITMasterCplt+0xd0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005fe8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fec:	4620      	mov	r0, r4
 8005fee:	f7fc ff39 	bl	8002e64 <HAL_I2C_MasterRxCpltCallback>
}
 8005ff2:	e003      	b.n	8005ffc <I2C_ITMasterCplt+0x9a>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ff4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f7ff fe04 	bl	8005c04 <I2C_ITError>
}
 8005ffc:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8005ffe:	2320      	movs	r3, #32
 8006000:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006004:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	d008      	beq.n	8006020 <I2C_ITMasterCplt+0xbe>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800600e:	2300      	movs	r3, #0
 8006010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006014:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006018:	4620      	mov	r0, r4
 800601a:	f7fc ff15 	bl	8002e48 <HAL_I2C_MasterTxCpltCallback>
 800601e:	e7ed      	b.n	8005ffc <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006020:	2300      	movs	r3, #0
 8006022:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006026:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800602a:	4620      	mov	r0, r4
 800602c:	f7ff fde6 	bl	8005bfc <HAL_I2C_MemTxCpltCallback>
 8006030:	e7e4      	b.n	8005ffc <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006032:	2300      	movs	r3, #0
 8006034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006038:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800603c:	4620      	mov	r0, r4
 800603e:	f7ff fdde 	bl	8005bfe <HAL_I2C_MemRxCpltCallback>
 8006042:	e7db      	b.n	8005ffc <I2C_ITMasterCplt+0x9a>

08006044 <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 8006044:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006048:	2b01      	cmp	r3, #1
 800604a:	f000 80b7 	beq.w	80061bc <I2C_Master_ISR_IT+0x178>
{
 800604e:	b570      	push	{r4, r5, r6, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	4604      	mov	r4, r0
 8006054:	460d      	mov	r5, r1
 8006056:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8006058:	2301      	movs	r3, #1
 800605a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800605e:	f011 0f10 	tst.w	r1, #16
 8006062:	d002      	beq.n	800606a <I2C_Master_ISR_IT+0x26>
 8006064:	f012 0f10 	tst.w	r2, #16
 8006068:	d121      	bne.n	80060ae <I2C_Master_ISR_IT+0x6a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800606a:	f015 0f04 	tst.w	r5, #4
 800606e:	d028      	beq.n	80060c2 <I2C_Master_ISR_IT+0x7e>
 8006070:	f016 0f04 	tst.w	r6, #4
 8006074:	d025      	beq.n	80060c2 <I2C_Master_ISR_IT+0x7e>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006076:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800607e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006080:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006084:	3301      	adds	r3, #1
 8006086:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8006088:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800608a:	3b01      	subs	r3, #1
 800608c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 800608e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006090:	3b01      	subs	r3, #1
 8006092:	b29b      	uxth	r3, r3
 8006094:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006096:	f015 0f20 	tst.w	r5, #32
 800609a:	d003      	beq.n	80060a4 <I2C_Master_ISR_IT+0x60>
 800609c:	f016 0f20 	tst.w	r6, #32
 80060a0:	f040 8087 	bne.w	80061b2 <I2C_Master_ISR_IT+0x16e>
  __HAL_UNLOCK(hi2c);
 80060a4:	2000      	movs	r0, #0
 80060a6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80060aa:	b002      	add	sp, #8
 80060ac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ae:	6803      	ldr	r3, [r0, #0]
 80060b0:	2210      	movs	r2, #16
 80060b2:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80060b6:	f043 0304 	orr.w	r3, r3, #4
 80060ba:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 80060bc:	f7fe ffb2 	bl	8005024 <I2C_Flush_TXDR>
 80060c0:	e7e9      	b.n	8006096 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80060c2:	f015 0f02 	tst.w	r5, #2
 80060c6:	d011      	beq.n	80060ec <I2C_Master_ISR_IT+0xa8>
 80060c8:	f016 0f02 	tst.w	r6, #2
 80060cc:	d00e      	beq.n	80060ec <I2C_Master_ISR_IT+0xa8>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	7812      	ldrb	r2, [r2, #0]
 80060d4:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr++;
 80060d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060d8:	3301      	adds	r3, #1
 80060da:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 80060dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80060de:	3b01      	subs	r3, #1
 80060e0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80060e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80060ea:	e7d4      	b.n	8006096 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80060ec:	f015 0f80 	tst.w	r5, #128	; 0x80
 80060f0:	d03f      	beq.n	8006172 <I2C_Master_ISR_IT+0x12e>
 80060f2:	f016 0f40 	tst.w	r6, #64	; 0x40
 80060f6:	d03c      	beq.n	8006172 <I2C_Master_ISR_IT+0x12e>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	b35b      	cbz	r3, 8006156 <I2C_Master_ISR_IT+0x112>
 80060fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006100:	bb4b      	cbnz	r3, 8006156 <I2C_Master_ISR_IT+0x112>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	6859      	ldr	r1, [r3, #4]
 8006106:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800610a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	2bff      	cmp	r3, #255	; 0xff
 8006110:	d80e      	bhi.n	8006130 <I2C_Master_ISR_IT+0xec>
        hi2c->XferSize = hi2c->XferCount;
 8006112:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006114:	b292      	uxth	r2, r2
 8006116:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006118:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800611a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800611e:	d011      	beq.n	8006144 <I2C_Master_ISR_IT+0x100>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006120:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006122:	2000      	movs	r0, #0
 8006124:	9000      	str	r0, [sp, #0]
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	4620      	mov	r0, r4
 800612a:	f7fe ff8c 	bl	8005046 <I2C_TransferConfig>
 800612e:	e7b2      	b.n	8006096 <I2C_Master_ISR_IT+0x52>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006130:	22ff      	movs	r2, #255	; 0xff
 8006132:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006134:	2300      	movs	r3, #0
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800613c:	4620      	mov	r0, r4
 800613e:	f7fe ff82 	bl	8005046 <I2C_TransferConfig>
 8006142:	e7a8      	b.n	8006096 <I2C_Master_ISR_IT+0x52>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006144:	2300      	movs	r3, #0
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	4620      	mov	r0, r4
 8006150:	f7fe ff79 	bl	8005046 <I2C_TransferConfig>
 8006154:	e79f      	b.n	8006096 <I2C_Master_ISR_IT+0x52>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800615e:	d103      	bne.n	8006168 <I2C_Master_ISR_IT+0x124>
        I2C_ITMasterSeqCplt(hi2c);
 8006160:	4620      	mov	r0, r4
 8006162:	f7ff fc6f 	bl	8005a44 <I2C_ITMasterSeqCplt>
 8006166:	e796      	b.n	8006096 <I2C_Master_ISR_IT+0x52>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006168:	2140      	movs	r1, #64	; 0x40
 800616a:	4620      	mov	r0, r4
 800616c:	f7ff fd4a 	bl	8005c04 <I2C_ITError>
 8006170:	e791      	b.n	8006096 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006172:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006176:	d08e      	beq.n	8006096 <I2C_Master_ISR_IT+0x52>
 8006178:	f016 0f40 	tst.w	r6, #64	; 0x40
 800617c:	d08b      	beq.n	8006096 <I2C_Master_ISR_IT+0x52>
    if (hi2c->XferCount == 0U)
 800617e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	b98b      	cbnz	r3, 80061a8 <I2C_Master_ISR_IT+0x164>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800618c:	d183      	bne.n	8006096 <I2C_Master_ISR_IT+0x52>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800618e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006190:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8006194:	d104      	bne.n	80061a0 <I2C_Master_ISR_IT+0x15c>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800619c:	605a      	str	r2, [r3, #4]
 800619e:	e77a      	b.n	8006096 <I2C_Master_ISR_IT+0x52>
          I2C_ITMasterSeqCplt(hi2c);
 80061a0:	4620      	mov	r0, r4
 80061a2:	f7ff fc4f 	bl	8005a44 <I2C_ITMasterSeqCplt>
 80061a6:	e776      	b.n	8006096 <I2C_Master_ISR_IT+0x52>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80061a8:	2140      	movs	r1, #64	; 0x40
 80061aa:	4620      	mov	r0, r4
 80061ac:	f7ff fd2a 	bl	8005c04 <I2C_ITError>
 80061b0:	e771      	b.n	8006096 <I2C_Master_ISR_IT+0x52>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80061b2:	4629      	mov	r1, r5
 80061b4:	4620      	mov	r0, r4
 80061b6:	f7ff fed4 	bl	8005f62 <I2C_ITMasterCplt>
 80061ba:	e773      	b.n	80060a4 <I2C_Master_ISR_IT+0x60>
  __HAL_LOCK(hi2c);
 80061bc:	2002      	movs	r0, #2
}
 80061be:	4770      	bx	lr

080061c0 <I2C_Slave_ISR_DMA>:
{
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 80061c2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80061c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d076      	beq.n	80062ba <I2C_Slave_ISR_DMA+0xfa>
 80061cc:	4616      	mov	r6, r2
 80061ce:	460d      	mov	r5, r1
 80061d0:	4604      	mov	r4, r0
 80061d2:	2301      	movs	r3, #1
 80061d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80061d8:	f011 0f20 	tst.w	r1, #32
 80061dc:	d002      	beq.n	80061e4 <I2C_Slave_ISR_DMA+0x24>
 80061de:	f012 0f20 	tst.w	r2, #32
 80061e2:	d115      	bne.n	8006210 <I2C_Slave_ISR_DMA+0x50>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80061e4:	f015 0f10 	tst.w	r5, #16
 80061e8:	d058      	beq.n	800629c <I2C_Slave_ISR_DMA+0xdc>
 80061ea:	f016 0f10 	tst.w	r6, #16
 80061ee:	d055      	beq.n	800629c <I2C_Slave_ISR_DMA+0xdc>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80061f0:	f3c6 3380 	ubfx	r3, r6, #14, #1
 80061f4:	b913      	cbnz	r3, 80061fc <I2C_Slave_ISR_DMA+0x3c>
 80061f6:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80061fa:	d04b      	beq.n	8006294 <I2C_Slave_ISR_DMA+0xd4>
      if (hi2c->hdmarx != NULL)
 80061fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80061fe:	b152      	cbz	r2, 8006216 <I2C_Slave_ISR_DMA+0x56>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006200:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8006204:	d009      	beq.n	800621a <I2C_Slave_ISR_DMA+0x5a>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	6852      	ldr	r2, [r2, #4]
 800620a:	b1f2      	cbz	r2, 800624a <I2C_Slave_ISR_DMA+0x8a>
  uint32_t treatdmanack = 0U;
 800620c:	2100      	movs	r1, #0
 800620e:	e005      	b.n	800621c <I2C_Slave_ISR_DMA+0x5c>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006210:	f7ff fd72 	bl	8005cf8 <I2C_ITSlaveCplt>
 8006214:	e7e6      	b.n	80061e4 <I2C_Slave_ISR_DMA+0x24>
  uint32_t treatdmanack = 0U;
 8006216:	2100      	movs	r1, #0
 8006218:	e000      	b.n	800621c <I2C_Slave_ISR_DMA+0x5c>
 800621a:	2100      	movs	r1, #0
      if (hi2c->hdmatx != NULL)
 800621c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800621e:	b11a      	cbz	r2, 8006228 <I2C_Slave_ISR_DMA+0x68>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006220:	b113      	cbz	r3, 8006228 <I2C_Slave_ISR_DMA+0x68>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006222:	6813      	ldr	r3, [r2, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	b193      	cbz	r3, 800624e <I2C_Slave_ISR_DMA+0x8e>
      if (treatdmanack == 1U)
 8006228:	b989      	cbnz	r1, 800624e <I2C_Slave_ISR_DMA+0x8e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	2210      	movs	r2, #16
 800622e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006230:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006232:	f043 0304 	orr.w	r3, r3, #4
 8006236:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006238:	b117      	cbz	r7, 8006240 <I2C_Slave_ISR_DMA+0x80>
 800623a:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 800623e:	d133      	bne.n	80062a8 <I2C_Slave_ISR_DMA+0xe8>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006240:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006242:	4620      	mov	r0, r4
 8006244:	f7ff fcde 	bl	8005c04 <I2C_ITError>
 8006248:	e02e      	b.n	80062a8 <I2C_Slave_ISR_DMA+0xe8>
            treatdmanack = 1U;
 800624a:	2101      	movs	r1, #1
 800624c:	e7e6      	b.n	800621c <I2C_Slave_ISR_DMA+0x5c>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800624e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b28      	cmp	r3, #40	; 0x28
 8006256:	d008      	beq.n	800626a <I2C_Slave_ISR_DMA+0xaa>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006258:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b29      	cmp	r3, #41	; 0x29
 8006260:	d00b      	beq.n	800627a <I2C_Slave_ISR_DMA+0xba>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	2210      	movs	r2, #16
 8006266:	61da      	str	r2, [r3, #28]
 8006268:	e01e      	b.n	80062a8 <I2C_Slave_ISR_DMA+0xe8>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800626a:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 800626e:	d1f3      	bne.n	8006258 <I2C_Slave_ISR_DMA+0x98>
          I2C_ITListenCplt(hi2c, ITFlags);
 8006270:	4629      	mov	r1, r5
 8006272:	4620      	mov	r0, r4
 8006274:	f7ff fc90 	bl	8005b98 <I2C_ITListenCplt>
 8006278:	e016      	b.n	80062a8 <I2C_Slave_ISR_DMA+0xe8>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800627a:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800627e:	d0f0      	beq.n	8006262 <I2C_Slave_ISR_DMA+0xa2>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	2210      	movs	r2, #16
 8006284:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 8006286:	4620      	mov	r0, r4
 8006288:	f7fe fecc 	bl	8005024 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 800628c:	4620      	mov	r0, r4
 800628e:	f7ff fc05 	bl	8005a9c <I2C_ITSlaveSeqCplt>
 8006292:	e009      	b.n	80062a8 <I2C_Slave_ISR_DMA+0xe8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	2210      	movs	r2, #16
 8006298:	61da      	str	r2, [r3, #28]
 800629a:	e005      	b.n	80062a8 <I2C_Slave_ISR_DMA+0xe8>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800629c:	f015 0f08 	tst.w	r5, #8
 80062a0:	d002      	beq.n	80062a8 <I2C_Slave_ISR_DMA+0xe8>
 80062a2:	f016 0f08 	tst.w	r6, #8
 80062a6:	d103      	bne.n	80062b0 <I2C_Slave_ISR_DMA+0xf0>
  __HAL_UNLOCK(hi2c);
 80062a8:	2000      	movs	r0, #0
 80062aa:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80062ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 80062b0:	4629      	mov	r1, r5
 80062b2:	4620      	mov	r0, r4
 80062b4:	f7ff fc21 	bl	8005afa <I2C_ITAddrCplt>
 80062b8:	e7f6      	b.n	80062a8 <I2C_Slave_ISR_DMA+0xe8>
  __HAL_LOCK(hi2c);
 80062ba:	2002      	movs	r0, #2
 80062bc:	e7f7      	b.n	80062ae <I2C_Slave_ISR_DMA+0xee>

080062be <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 80062be:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	f000 8099 	beq.w	80063fa <I2C_Master_ISR_DMA+0x13c>
{
 80062c8:	b510      	push	{r4, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 80062ce:	2301      	movs	r3, #1
 80062d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062d4:	f011 0f10 	tst.w	r1, #16
 80062d8:	d002      	beq.n	80062e0 <I2C_Master_ISR_DMA+0x22>
 80062da:	f012 0f10 	tst.w	r2, #16
 80062de:	d131      	bne.n	8006344 <I2C_Master_ISR_DMA+0x86>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80062e0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80062e4:	d05f      	beq.n	80063a6 <I2C_Master_ISR_DMA+0xe8>
 80062e6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80062ea:	d05c      	beq.n	80063a6 <I2C_Master_ISR_DMA+0xe8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80062ec:	6822      	ldr	r2, [r4, #0]
 80062ee:	6813      	ldr	r3, [r2, #0]
 80062f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f4:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 80062f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d045      	beq.n	800638a <I2C_Master_ISR_DMA+0xcc>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	6859      	ldr	r1, [r3, #4]
 8006302:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006306:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	2bff      	cmp	r3, #255	; 0xff
 800630c:	d92c      	bls.n	8006368 <I2C_Master_ISR_DMA+0xaa>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800630e:	23ff      	movs	r3, #255	; 0xff
 8006310:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006316:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800631a:	2000      	movs	r0, #0
 800631c:	9000      	str	r0, [sp, #0]
 800631e:	4620      	mov	r0, r4
 8006320:	f7fe fe91 	bl	8005046 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8006324:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006326:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006328:	1a9b      	subs	r3, r3, r2
 800632a:	b29b      	uxth	r3, r3
 800632c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800632e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b22      	cmp	r3, #34	; 0x22
 8006336:	d022      	beq.n	800637e <I2C_Master_ISR_DMA+0xc0>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006338:	6822      	ldr	r2, [r4, #0]
 800633a:	6813      	ldr	r3, [r2, #0]
 800633c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e00c      	b.n	800635e <I2C_Master_ISR_DMA+0xa0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006344:	6803      	ldr	r3, [r0, #0]
 8006346:	2210      	movs	r2, #16
 8006348:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800634a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800634c:	f043 0304 	orr.w	r3, r3, #4
 8006350:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006352:	2112      	movs	r1, #18
 8006354:	f7fe fe92 	bl	800507c <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8006358:	4620      	mov	r0, r4
 800635a:	f7fe fe63 	bl	8005024 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 800635e:	2000      	movs	r0, #0
 8006360:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006364:	b002      	add	sp, #8
 8006366:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 8006368:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800636a:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800636c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800636e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006372:	d001      	beq.n	8006378 <I2C_Master_ISR_DMA+0xba>
          xfermode = hi2c->XferOptions;
 8006374:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006376:	e7ce      	b.n	8006316 <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 8006378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800637c:	e7cb      	b.n	8006316 <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800637e:	6822      	ldr	r2, [r4, #0]
 8006380:	6813      	ldr	r3, [r2, #0]
 8006382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	e7e9      	b.n	800635e <I2C_Master_ISR_DMA+0xa0>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006392:	d103      	bne.n	800639c <I2C_Master_ISR_DMA+0xde>
        I2C_ITMasterSeqCplt(hi2c);
 8006394:	4620      	mov	r0, r4
 8006396:	f7ff fb55 	bl	8005a44 <I2C_ITMasterSeqCplt>
 800639a:	e7e0      	b.n	800635e <I2C_Master_ISR_DMA+0xa0>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800639c:	2140      	movs	r1, #64	; 0x40
 800639e:	4620      	mov	r0, r4
 80063a0:	f7ff fc30 	bl	8005c04 <I2C_ITError>
 80063a4:	e7db      	b.n	800635e <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80063a6:	f011 0f40 	tst.w	r1, #64	; 0x40
 80063aa:	d01c      	beq.n	80063e6 <I2C_Master_ISR_DMA+0x128>
 80063ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80063b0:	d019      	beq.n	80063e6 <I2C_Master_ISR_DMA+0x128>
    if (hi2c->XferCount == 0U)
 80063b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	b98b      	cbnz	r3, 80063dc <I2C_Master_ISR_DMA+0x11e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80063c0:	d1cd      	bne.n	800635e <I2C_Master_ISR_DMA+0xa0>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80063c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80063c4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80063c8:	d104      	bne.n	80063d4 <I2C_Master_ISR_DMA+0x116>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e7c4      	b.n	800635e <I2C_Master_ISR_DMA+0xa0>
          I2C_ITMasterSeqCplt(hi2c);
 80063d4:	4620      	mov	r0, r4
 80063d6:	f7ff fb35 	bl	8005a44 <I2C_ITMasterSeqCplt>
 80063da:	e7c0      	b.n	800635e <I2C_Master_ISR_DMA+0xa0>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063dc:	2140      	movs	r1, #64	; 0x40
 80063de:	4620      	mov	r0, r4
 80063e0:	f7ff fc10 	bl	8005c04 <I2C_ITError>
 80063e4:	e7bb      	b.n	800635e <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80063e6:	f011 0f20 	tst.w	r1, #32
 80063ea:	d0b8      	beq.n	800635e <I2C_Master_ISR_DMA+0xa0>
 80063ec:	f012 0f20 	tst.w	r2, #32
 80063f0:	d0b5      	beq.n	800635e <I2C_Master_ISR_DMA+0xa0>
    I2C_ITMasterCplt(hi2c, ITFlags);
 80063f2:	4620      	mov	r0, r4
 80063f4:	f7ff fdb5 	bl	8005f62 <I2C_ITMasterCplt>
 80063f8:	e7b1      	b.n	800635e <I2C_Master_ISR_DMA+0xa0>
  __HAL_LOCK(hi2c);
 80063fa:	2002      	movs	r0, #2
}
 80063fc:	4770      	bx	lr

080063fe <I2C_DMAAbort>:
{
 80063fe:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006400:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 8006402:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006404:	2300      	movs	r3, #0
 8006406:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8006408:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800640a:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800640c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b60      	cmp	r3, #96	; 0x60
 8006414:	d002      	beq.n	800641c <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 8006416:	f7ff fbf3 	bl	8005c00 <HAL_I2C_ErrorCallback>
}
 800641a:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800641c:	2320      	movs	r3, #32
 800641e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8006422:	f7ff fbee 	bl	8005c02 <HAL_I2C_AbortCpltCallback>
 8006426:	e7f8      	b.n	800641a <I2C_DMAAbort+0x1c>

08006428 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006428:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b20      	cmp	r3, #32
 8006430:	d124      	bne.n	800647c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006432:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006436:	2b01      	cmp	r3, #1
 8006438:	d022      	beq.n	8006480 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800643a:	2301      	movs	r3, #1
 800643c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006440:	2324      	movs	r3, #36	; 0x24
 8006442:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006446:	6802      	ldr	r2, [r0, #0]
 8006448:	6813      	ldr	r3, [r2, #0]
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006450:	6802      	ldr	r2, [r0, #0]
 8006452:	6813      	ldr	r3, [r2, #0]
 8006454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006458:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800645a:	6802      	ldr	r2, [r0, #0]
 800645c:	6813      	ldr	r3, [r2, #0]
 800645e:	4319      	orrs	r1, r3
 8006460:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006462:	6802      	ldr	r2, [r0, #0]
 8006464:	6813      	ldr	r3, [r2, #0]
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800646c:	2320      	movs	r3, #32
 800646e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006472:	2300      	movs	r3, #0
 8006474:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006478:	4618      	mov	r0, r3
 800647a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800647c:	2002      	movs	r0, #2
 800647e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006480:	2002      	movs	r0, #2
  }
}
 8006482:	4770      	bx	lr

08006484 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006484:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b20      	cmp	r3, #32
 800648c:	d122      	bne.n	80064d4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800648e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006492:	2b01      	cmp	r3, #1
 8006494:	d020      	beq.n	80064d8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8006496:	2301      	movs	r3, #1
 8006498:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800649c:	2324      	movs	r3, #36	; 0x24
 800649e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064a2:	6802      	ldr	r2, [r0, #0]
 80064a4:	6813      	ldr	r3, [r2, #0]
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80064ac:	6802      	ldr	r2, [r0, #0]
 80064ae:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80064b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80064b4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80064b8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064ba:	6802      	ldr	r2, [r0, #0]
 80064bc:	6813      	ldr	r3, [r2, #0]
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064c4:	2320      	movs	r3, #32
 80064c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ca:	2300      	movs	r3, #0
 80064cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80064d0:	4618      	mov	r0, r3
 80064d2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80064d4:	2002      	movs	r0, #2
 80064d6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80064d8:	2002      	movs	r0, #2
  }
}
 80064da:	4770      	bx	lr

080064dc <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064dc:	4a02      	ldr	r2, [pc, #8]	; (80064e8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80064de:	6813      	ldr	r3, [r2, #0]
 80064e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e4:	6013      	str	r3, [r2, #0]
}
 80064e6:	4770      	bx	lr
 80064e8:	58000400 	.word	0x58000400

080064ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80064ec:	4b02      	ldr	r3, [pc, #8]	; (80064f8 <HAL_PWREx_GetVoltageRange+0xc>)
 80064ee:	6818      	ldr	r0, [r3, #0]
}
 80064f0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	58000400 	.word	0x58000400

080064fc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80064fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064fe:	b08d      	sub	sp, #52	; 0x34
 8006500:	4606      	mov	r6, r0
 8006502:	460f      	mov	r7, r1
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006504:	4c2a      	ldr	r4, [pc, #168]	; (80065b0 <RCC_SetFlashLatency+0xb4>)
 8006506:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800650a:	ad0c      	add	r5, sp, #48	; 0x30
 800650c:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006510:	ab05      	add	r3, sp, #20
 8006512:	f104 0210 	add.w	r2, r4, #16
 8006516:	ca07      	ldmia	r2, {r0, r1, r2}
 8006518:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800651c:	ad01      	add	r5, sp, #4
 800651e:	341c      	adds	r4, #28
 8006520:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006524:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006528:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800652c:	d011      	beq.n	8006552 <RCC_SetFlashLatency+0x56>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800652e:	2300      	movs	r3, #0
 8006530:	2b02      	cmp	r3, #2
 8006532:	d822      	bhi.n	800657a <RCC_SetFlashLatency+0x7e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006534:	aa0c      	add	r2, sp, #48	; 0x30
 8006536:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800653a:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 800653e:	42b2      	cmp	r2, r6
 8006540:	d215      	bcs.n	800656e <RCC_SetFlashLatency+0x72>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006542:	3301      	adds	r3, #1
 8006544:	e7f4      	b.n	8006530 <RCC_SetFlashLatency+0x34>
        latency = FLASH_LATENCY_RANGE[index];
 8006546:	aa0c      	add	r2, sp, #48	; 0x30
 8006548:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800654c:	f853 4c2c 	ldr.w	r4, [r3, #-44]
        break;
 8006550:	e014      	b.n	800657c <RCC_SetFlashLatency+0x80>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006552:	2300      	movs	r3, #0
 8006554:	2b03      	cmp	r3, #3
 8006556:	d808      	bhi.n	800656a <RCC_SetFlashLatency+0x6e>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006558:	aa0c      	add	r2, sp, #48	; 0x30
 800655a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800655e:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8006562:	42b2      	cmp	r2, r6
 8006564:	d2ef      	bcs.n	8006546 <RCC_SetFlashLatency+0x4a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006566:	3301      	adds	r3, #1
 8006568:	e7f4      	b.n	8006554 <RCC_SetFlashLatency+0x58>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800656a:	2400      	movs	r4, #0
 800656c:	e006      	b.n	800657c <RCC_SetFlashLatency+0x80>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800656e:	aa0c      	add	r2, sp, #48	; 0x30
 8006570:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006574:	f853 4c2c 	ldr.w	r4, [r3, #-44]
        break;
 8006578:	e000      	b.n	800657c <RCC_SetFlashLatency+0x80>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800657a:	2400      	movs	r4, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800657c:	4a0d      	ldr	r2, [pc, #52]	; (80065b4 <RCC_SetFlashLatency+0xb8>)
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	f023 0307 	bic.w	r3, r3, #7
 8006584:	4323      	orrs	r3, r4
 8006586:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006588:	f7fd fb8c 	bl	8003ca4 <HAL_GetTick>
 800658c:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <RCC_SetFlashLatency+0xb8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	42a3      	cmp	r3, r4
 8006598:	d006      	beq.n	80065a8 <RCC_SetFlashLatency+0xac>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800659a:	f7fd fb83 	bl	8003ca4 <HAL_GetTick>
 800659e:	1b40      	subs	r0, r0, r5
 80065a0:	2802      	cmp	r0, #2
 80065a2:	d9f4      	bls.n	800658e <RCC_SetFlashLatency+0x92>
    {
      return HAL_TIMEOUT;
 80065a4:	2003      	movs	r0, #3
 80065a6:	e000      	b.n	80065aa <RCC_SetFlashLatency+0xae>
    }
  }
  return HAL_OK;
 80065a8:	2000      	movs	r0, #0
}
 80065aa:	b00d      	add	sp, #52	; 0x34
 80065ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ae:	bf00      	nop
 80065b0:	0800f588 	.word	0x0800f588
 80065b4:	58004000 	.word	0x58004000

080065b8 <RCC_SetFlashLatencyFromMSIRange>:
{
 80065b8:	b510      	push	{r4, lr}
  if (MSI_Range > RCC_MSIRANGE_11)
 80065ba:	28b0      	cmp	r0, #176	; 0xb0
 80065bc:	d819      	bhi.n	80065f2 <RCC_SetFlashLatencyFromMSIRange+0x3a>
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80065be:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80065c2:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80065c4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80065c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80065d0:	f003 030f 	and.w	r3, r3, #15
 80065d4:	4a09      	ldr	r2, [pc, #36]	; (80065fc <RCC_SetFlashLatencyFromMSIRange+0x44>)
 80065d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065da:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80065de:	f7ff ff85 	bl	80064ec <HAL_PWREx_GetVoltageRange>
 80065e2:	4b07      	ldr	r3, [pc, #28]	; (8006600 <RCC_SetFlashLatencyFromMSIRange+0x48>)
 80065e4:	fba3 3404 	umull	r3, r4, r3, r4
 80065e8:	4601      	mov	r1, r0
 80065ea:	0ca0      	lsrs	r0, r4, #18
 80065ec:	f7ff ff86 	bl	80064fc <RCC_SetFlashLatency>
}
 80065f0:	bd10      	pop	{r4, pc}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80065f2:	4b01      	ldr	r3, [pc, #4]	; (80065f8 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80065f4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80065f6:	e7e7      	b.n	80065c8 <RCC_SetFlashLatencyFromMSIRange+0x10>
 80065f8:	0800f778 	.word	0x0800f778
 80065fc:	0800f718 	.word	0x0800f718
 8006600:	431bde83 	.word	0x431bde83

08006604 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8006604:	2800      	cmp	r0, #0
 8006606:	f000 836c 	beq.w	8006ce2 <HAL_RCC_OscConfig+0x6de>
{
 800660a:	b538      	push	{r3, r4, r5, lr}
 800660c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800660e:	6803      	ldr	r3, [r0, #0]
 8006610:	f013 0f20 	tst.w	r3, #32
 8006614:	d059      	beq.n	80066ca <HAL_RCC_OscConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800661a:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800661c:	68d2      	ldr	r2, [r2, #12]
 800661e:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006622:	f013 030c 	ands.w	r3, r3, #12
 8006626:	d01e      	beq.n	8006666 <HAL_RCC_OscConfig+0x62>
 8006628:	2b0c      	cmp	r3, #12
 800662a:	d01a      	beq.n	8006662 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800662c:	69e3      	ldr	r3, [r4, #28]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80a7 	beq.w	8006782 <HAL_RCC_OscConfig+0x17e>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006638:	6813      	ldr	r3, [r2, #0]
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006640:	f7fd fb30 	bl	8003ca4 <HAL_GetTick>
 8006644:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f013 0f02 	tst.w	r3, #2
 8006650:	f040 8087 	bne.w	8006762 <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006654:	f7fd fb26 	bl	8003ca4 <HAL_GetTick>
 8006658:	1b40      	subs	r0, r0, r5
 800665a:	2802      	cmp	r0, #2
 800665c:	d9f3      	bls.n	8006646 <HAL_RCC_OscConfig+0x42>
            return HAL_TIMEOUT;
 800665e:	2003      	movs	r0, #3
 8006660:	e34c      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006662:	2a01      	cmp	r2, #1
 8006664:	d1e2      	bne.n	800662c <HAL_RCC_OscConfig+0x28>
 8006666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f013 0f02 	tst.w	r3, #2
 8006670:	d003      	beq.n	800667a <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006672:	69e3      	ldr	r3, [r4, #28]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8336 	beq.w	8006ce6 <HAL_RCC_OscConfig+0x6e2>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800667a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800667c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006686:	2bb0      	cmp	r3, #176	; 0xb0
 8006688:	d900      	bls.n	800668c <HAL_RCC_OscConfig+0x88>
    msiRange = LL_RCC_MSIRANGE_11;
 800668a:	23b0      	movs	r3, #176	; 0xb0
 800668c:	4298      	cmp	r0, r3
 800668e:	d953      	bls.n	8006738 <HAL_RCC_OscConfig+0x134>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006690:	f7ff ff92 	bl	80065b8 <RCC_SetFlashLatencyFromMSIRange>
 8006694:	2800      	cmp	r0, #0
 8006696:	f040 8328 	bne.w	8006cea <HAL_RCC_OscConfig+0x6e6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800669a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800669c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066a0:	6811      	ldr	r1, [r2, #0]
 80066a2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80066a6:	430b      	orrs	r3, r1
 80066a8:	6013      	str	r3, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066aa:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80066ac:	6853      	ldr	r3, [r2, #4]
 80066ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80066b6:	6053      	str	r3, [r2, #4]
        SystemCoreClockUpdate();
 80066b8:	f7fd f906 	bl	80038c8 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80066bc:	4bc2      	ldr	r3, [pc, #776]	; (80069c8 <HAL_RCC_OscConfig+0x3c4>)
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	f7fd f84c 	bl	800375c <HAL_InitTick>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f040 8312 	bne.w	8006cee <HAL_RCC_OscConfig+0x6ea>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	f013 0f01 	tst.w	r3, #1
 80066d0:	d079      	beq.n	80067c6 <HAL_RCC_OscConfig+0x1c2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80066d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066d6:	6893      	ldr	r3, [r2, #8]
 80066d8:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80066dc:	68d2      	ldr	r2, [r2, #12]
 80066de:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	d065      	beq.n	80067b2 <HAL_RCC_OscConfig+0x1ae>
 80066e6:	2b0c      	cmp	r3, #12
 80066e8:	d061      	beq.n	80067ae <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066ea:	6863      	ldr	r3, [r4, #4]
 80066ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f0:	f000 8093 	beq.w	800681a <HAL_RCC_OscConfig+0x216>
 80066f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066f8:	f000 8096 	beq.w	8006828 <HAL_RCC_OscConfig+0x224>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80066fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006706:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800670e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006710:	6863      	ldr	r3, [r4, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8093 	beq.w	800683e <HAL_RCC_OscConfig+0x23a>
        tickstart = HAL_GetTick();
 8006718:	f7fd fac4 	bl	8003ca4 <HAL_GetTick>
 800671c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800671e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006728:	d14d      	bne.n	80067c6 <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800672a:	f7fd fabb 	bl	8003ca4 <HAL_GetTick>
 800672e:	1b40      	subs	r0, r0, r5
 8006730:	2864      	cmp	r0, #100	; 0x64
 8006732:	d9f4      	bls.n	800671e <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 8006734:	2003      	movs	r0, #3
 8006736:	e2e1      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006738:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800673c:	6813      	ldr	r3, [r2, #0]
 800673e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006742:	4318      	orrs	r0, r3
 8006744:	6010      	str	r0, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006746:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006748:	6853      	ldr	r3, [r2, #4]
 800674a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800674e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006752:	6053      	str	r3, [r2, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006754:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006756:	f7ff ff2f 	bl	80065b8 <RCC_SetFlashLatencyFromMSIRange>
 800675a:	2800      	cmp	r0, #0
 800675c:	d0ac      	beq.n	80066b8 <HAL_RCC_OscConfig+0xb4>
            return HAL_ERROR;
 800675e:	2001      	movs	r0, #1
 8006760:	e2cc      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006762:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006768:	6811      	ldr	r1, [r2, #0]
 800676a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800676e:	430b      	orrs	r3, r1
 8006770:	6013      	str	r3, [r2, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006772:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006774:	6853      	ldr	r3, [r2, #4]
 8006776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800677a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800677e:	6053      	str	r3, [r2, #4]
 8006780:	e7a3      	b.n	80066ca <HAL_RCC_OscConfig+0xc6>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006786:	6813      	ldr	r3, [r2, #0]
 8006788:	f023 0301 	bic.w	r3, r3, #1
 800678c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800678e:	f7fd fa89 	bl	8003ca4 <HAL_GetTick>
 8006792:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f013 0f02 	tst.w	r3, #2
 800679e:	d094      	beq.n	80066ca <HAL_RCC_OscConfig+0xc6>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067a0:	f7fd fa80 	bl	8003ca4 <HAL_GetTick>
 80067a4:	1b40      	subs	r0, r0, r5
 80067a6:	2802      	cmp	r0, #2
 80067a8:	d9f4      	bls.n	8006794 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80067aa:	2003      	movs	r0, #3
 80067ac:	e2a6      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80067ae:	2a03      	cmp	r2, #3
 80067b0:	d19b      	bne.n	80066ea <HAL_RCC_OscConfig+0xe6>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80067b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80067bc:	d003      	beq.n	80067c6 <HAL_RCC_OscConfig+0x1c2>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067be:	6863      	ldr	r3, [r4, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 8296 	beq.w	8006cf2 <HAL_RCC_OscConfig+0x6ee>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	f013 0f02 	tst.w	r3, #2
 80067cc:	d05c      	beq.n	8006888 <HAL_RCC_OscConfig+0x284>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80067ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067d2:	6893      	ldr	r3, [r2, #8]
 80067d4:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80067d8:	68d2      	ldr	r2, [r2, #12]
 80067da:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d03f      	beq.n	8006862 <HAL_RCC_OscConfig+0x25e>
 80067e2:	2b0c      	cmp	r3, #12
 80067e4:	d03b      	beq.n	800685e <HAL_RCC_OscConfig+0x25a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067e6:	68e3      	ldr	r3, [r4, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8083 	beq.w	80068f4 <HAL_RCC_OscConfig+0x2f0>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80067ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067f2:	6813      	ldr	r3, [r2, #0]
 80067f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80067fa:	f7fd fa53 	bl	8003ca4 <HAL_GetTick>
 80067fe:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800680a:	d169      	bne.n	80068e0 <HAL_RCC_OscConfig+0x2dc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800680c:	f7fd fa4a 	bl	8003ca4 <HAL_GetTick>
 8006810:	1b40      	subs	r0, r0, r5
 8006812:	2802      	cmp	r0, #2
 8006814:	d9f4      	bls.n	8006800 <HAL_RCC_OscConfig+0x1fc>
            return HAL_TIMEOUT;
 8006816:	2003      	movs	r0, #3
 8006818:	e270      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800681a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800681e:	6813      	ldr	r3, [r2, #0]
 8006820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	e773      	b.n	8006710 <HAL_RCC_OscConfig+0x10c>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006832:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	e768      	b.n	8006710 <HAL_RCC_OscConfig+0x10c>
        tickstart = HAL_GetTick();
 800683e:	f7fd fa31 	bl	8003ca4 <HAL_GetTick>
 8006842:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800684e:	d0ba      	beq.n	80067c6 <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006850:	f7fd fa28 	bl	8003ca4 <HAL_GetTick>
 8006854:	1b40      	subs	r0, r0, r5
 8006856:	2864      	cmp	r0, #100	; 0x64
 8006858:	d9f4      	bls.n	8006844 <HAL_RCC_OscConfig+0x240>
            return HAL_TIMEOUT;
 800685a:	2003      	movs	r0, #3
 800685c:	e24e      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800685e:	2a02      	cmp	r2, #2
 8006860:	d1c1      	bne.n	80067e6 <HAL_RCC_OscConfig+0x1e2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800686c:	d003      	beq.n	8006876 <HAL_RCC_OscConfig+0x272>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8240 	beq.w	8006cf6 <HAL_RCC_OscConfig+0x6f2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006876:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800687c:	6853      	ldr	r3, [r2, #4]
 800687e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006882:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006886:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	f013 0f18 	tst.w	r3, #24
 800688e:	f000 80e5 	beq.w	8006a5c <HAL_RCC_OscConfig+0x458>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006892:	6962      	ldr	r2, [r4, #20]
 8006894:	2a00      	cmp	r2, #0
 8006896:	f000 80af 	beq.w	80069f8 <HAL_RCC_OscConfig+0x3f4>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800689a:	f013 0f10 	tst.w	r3, #16
 800689e:	d07a      	beq.n	8006996 <HAL_RCC_OscConfig+0x392>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80068a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068a8:	f013 0f02 	tst.w	r3, #2
 80068ac:	d138      	bne.n	8006920 <HAL_RCC_OscConfig+0x31c>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80068ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068b2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80068b6:	f043 0301 	orr.w	r3, r3, #1
 80068ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 80068be:	f7fd f9f1 	bl	8003ca4 <HAL_GetTick>
 80068c2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80068c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068cc:	f013 0f02 	tst.w	r3, #2
 80068d0:	d126      	bne.n	8006920 <HAL_RCC_OscConfig+0x31c>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80068d2:	f7fd f9e7 	bl	8003ca4 <HAL_GetTick>
 80068d6:	1b40      	subs	r0, r0, r5
 80068d8:	2802      	cmp	r0, #2
 80068da:	d9f3      	bls.n	80068c4 <HAL_RCC_OscConfig+0x2c0>
              return HAL_TIMEOUT;
 80068dc:	2003      	movs	r0, #3
 80068de:	e20d      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e0:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80068e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068e6:	6853      	ldr	r3, [r2, #4]
 80068e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80068ec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80068f0:	6053      	str	r3, [r2, #4]
 80068f2:	e7c9      	b.n	8006888 <HAL_RCC_OscConfig+0x284>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80068f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068f8:	6813      	ldr	r3, [r2, #0]
 80068fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006900:	f7fd f9d0 	bl	8003ca4 <HAL_GetTick>
 8006904:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006910:	d0ba      	beq.n	8006888 <HAL_RCC_OscConfig+0x284>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006912:	f7fd f9c7 	bl	8003ca4 <HAL_GetTick>
 8006916:	1b40      	subs	r0, r0, r5
 8006918:	2802      	cmp	r0, #2
 800691a:	d9f4      	bls.n	8006906 <HAL_RCC_OscConfig+0x302>
            return HAL_TIMEOUT;
 800691c:	2003      	movs	r0, #3
 800691e:	e1ed      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006924:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006928:	f043 0304 	orr.w	r3, r3, #4
 800692c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8006930:	f7fd f9b8 	bl	8003ca4 <HAL_GetTick>
 8006934:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800693a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800693e:	f013 0f08 	tst.w	r3, #8
 8006942:	d106      	bne.n	8006952 <HAL_RCC_OscConfig+0x34e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006944:	f7fd f9ae 	bl	8003ca4 <HAL_GetTick>
 8006948:	1b40      	subs	r0, r0, r5
 800694a:	2803      	cmp	r0, #3
 800694c:	d9f3      	bls.n	8006936 <HAL_RCC_OscConfig+0x332>
            return HAL_TIMEOUT;
 800694e:	2003      	movs	r0, #3
 8006950:	e1d4      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006952:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006958:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800695c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006960:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006964:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006968:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8006974:	f7fd f996 	bl	8003ca4 <HAL_GetTick>
 8006978:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800697a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800697e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006982:	f013 0f02 	tst.w	r3, #2
 8006986:	d069      	beq.n	8006a5c <HAL_RCC_OscConfig+0x458>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006988:	f7fd f98c 	bl	8003ca4 <HAL_GetTick>
 800698c:	1b40      	subs	r0, r0, r5
 800698e:	2802      	cmp	r0, #2
 8006990:	d9f3      	bls.n	800697a <HAL_RCC_OscConfig+0x376>
            return HAL_TIMEOUT;
 8006992:	2003      	movs	r0, #3
 8006994:	e1b2      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800699a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 80069a6:	f7fd f97d 	bl	8003ca4 <HAL_GetTick>
 80069aa:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80069ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069b4:	f013 0f02 	tst.w	r3, #2
 80069b8:	d108      	bne.n	80069cc <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80069ba:	f7fd f973 	bl	8003ca4 <HAL_GetTick>
 80069be:	1b40      	subs	r0, r0, r5
 80069c0:	2802      	cmp	r0, #2
 80069c2:	d9f3      	bls.n	80069ac <HAL_RCC_OscConfig+0x3a8>
            return HAL_TIMEOUT;
 80069c4:	2003      	movs	r0, #3
 80069c6:	e199      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
 80069c8:	20000020 	.word	0x20000020
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80069cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069d0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80069d4:	f023 0304 	bic.w	r3, r3, #4
 80069d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80069dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069e4:	f013 0f08 	tst.w	r3, #8
 80069e8:	d038      	beq.n	8006a5c <HAL_RCC_OscConfig+0x458>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80069ea:	f7fd f95b 	bl	8003ca4 <HAL_GetTick>
 80069ee:	1b40      	subs	r0, r0, r5
 80069f0:	2803      	cmp	r0, #3
 80069f2:	d9f3      	bls.n	80069dc <HAL_RCC_OscConfig+0x3d8>
            return HAL_TIMEOUT;
 80069f4:	2003      	movs	r0, #3
 80069f6:	e181      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80069f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069fc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006a00:	f023 0304 	bic.w	r3, r3, #4
 8006a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006a08:	f7fd f94c 	bl	8003ca4 <HAL_GetTick>
 8006a0c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a16:	f013 0f08 	tst.w	r3, #8
 8006a1a:	d006      	beq.n	8006a2a <HAL_RCC_OscConfig+0x426>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006a1c:	f7fd f942 	bl	8003ca4 <HAL_GetTick>
 8006a20:	1b40      	subs	r0, r0, r5
 8006a22:	2803      	cmp	r0, #3
 8006a24:	d9f3      	bls.n	8006a0e <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8006a26:	2003      	movs	r0, #3
 8006a28:	e168      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a2e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006a32:	f023 0301 	bic.w	r3, r3, #1
 8006a36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006a3a:	f7fd f933 	bl	8003ca4 <HAL_GetTick>
 8006a3e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a48:	f013 0f02 	tst.w	r3, #2
 8006a4c:	d006      	beq.n	8006a5c <HAL_RCC_OscConfig+0x458>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a4e:	f7fd f929 	bl	8003ca4 <HAL_GetTick>
 8006a52:	1b40      	subs	r0, r0, r5
 8006a54:	2802      	cmp	r0, #2
 8006a56:	d9f3      	bls.n	8006a40 <HAL_RCC_OscConfig+0x43c>
          return HAL_TIMEOUT;
 8006a58:	2003      	movs	r0, #3
 8006a5a:	e14f      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	f013 0f04 	tst.w	r3, #4
 8006a62:	d068      	beq.n	8006b36 <HAL_RCC_OscConfig+0x532>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a64:	4baa      	ldr	r3, [pc, #680]	; (8006d10 <HAL_RCC_OscConfig+0x70c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006a6c:	d027      	beq.n	8006abe <HAL_RCC_OscConfig+0x4ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a6e:	68a3      	ldr	r3, [r4, #8]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d035      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x4dc>
 8006a74:	2b05      	cmp	r3, #5
 8006a76:	d03c      	beq.n	8006af2 <HAL_RCC_OscConfig+0x4ee>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a88:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a8c:	f022 0204 	bic.w	r2, r2, #4
 8006a90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a94:	68a3      	ldr	r3, [r4, #8]
 8006a96:	b3db      	cbz	r3, 8006b10 <HAL_RCC_OscConfig+0x50c>
      tickstart = HAL_GetTick();
 8006a98:	f7fd f904 	bl	8003ca4 <HAL_GetTick>
 8006a9c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa6:	f013 0f02 	tst.w	r3, #2
 8006aaa:	d144      	bne.n	8006b36 <HAL_RCC_OscConfig+0x532>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aac:	f7fd f8fa 	bl	8003ca4 <HAL_GetTick>
 8006ab0:	1b40      	subs	r0, r0, r5
 8006ab2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ab6:	4298      	cmp	r0, r3
 8006ab8:	d9f1      	bls.n	8006a9e <HAL_RCC_OscConfig+0x49a>
          return HAL_TIMEOUT;
 8006aba:	2003      	movs	r0, #3
 8006abc:	e11e      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
      HAL_PWR_EnableBkUpAccess();
 8006abe:	f7ff fd0d 	bl	80064dc <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8006ac2:	f7fd f8ef 	bl	8003ca4 <HAL_GetTick>
 8006ac6:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ac8:	4b91      	ldr	r3, [pc, #580]	; (8006d10 <HAL_RCC_OscConfig+0x70c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006ad0:	d1cd      	bne.n	8006a6e <HAL_RCC_OscConfig+0x46a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ad2:	f7fd f8e7 	bl	8003ca4 <HAL_GetTick>
 8006ad6:	1b40      	subs	r0, r0, r5
 8006ad8:	2802      	cmp	r0, #2
 8006ada:	d9f5      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x4c4>
          return HAL_TIMEOUT;
 8006adc:	2003      	movs	r0, #3
 8006ade:	e10d      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ae4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006af0:	e7d0      	b.n	8006a94 <HAL_RCC_OscConfig+0x490>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006af6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006afa:	f042 0204 	orr.w	r2, r2, #4
 8006afe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006b0e:	e7c1      	b.n	8006a94 <HAL_RCC_OscConfig+0x490>
      tickstart = HAL_GetTick();
 8006b10:	f7fd f8c8 	bl	8003ca4 <HAL_GetTick>
 8006b14:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1e:	f013 0f02 	tst.w	r3, #2
 8006b22:	d008      	beq.n	8006b36 <HAL_RCC_OscConfig+0x532>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b24:	f7fd f8be 	bl	8003ca4 <HAL_GetTick>
 8006b28:	1b40      	subs	r0, r0, r5
 8006b2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b2e:	4298      	cmp	r0, r3
 8006b30:	d9f1      	bls.n	8006b16 <HAL_RCC_OscConfig+0x512>
          return HAL_TIMEOUT;
 8006b32:	2003      	movs	r0, #3
 8006b34:	e0e2      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b3c:	d033      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x5a2>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b40:	b1c3      	cbz	r3, 8006b74 <HAL_RCC_OscConfig+0x570>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b46:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006b4a:	f043 0301 	orr.w	r3, r3, #1
 8006b4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006b52:	f7fd f8a7 	bl	8003ca4 <HAL_GetTick>
 8006b56:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b60:	f013 0f02 	tst.w	r3, #2
 8006b64:	d11f      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x5a2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b66:	f7fd f89d 	bl	8003ca4 <HAL_GetTick>
 8006b6a:	1b40      	subs	r0, r0, r5
 8006b6c:	2802      	cmp	r0, #2
 8006b6e:	d9f3      	bls.n	8006b58 <HAL_RCC_OscConfig+0x554>
          return HAL_TIMEOUT;
 8006b70:	2003      	movs	r0, #3
 8006b72:	e0c3      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b78:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006b84:	f7fd f88e 	bl	8003ca4 <HAL_GetTick>
 8006b88:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b92:	f013 0f02 	tst.w	r3, #2
 8006b96:	d006      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x5a2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b98:	f7fd f884 	bl	8003ca4 <HAL_GetTick>
 8006b9c:	1b40      	subs	r0, r0, r5
 8006b9e:	2802      	cmp	r0, #2
 8006ba0:	d9f3      	bls.n	8006b8a <HAL_RCC_OscConfig+0x586>
          return HAL_TIMEOUT;
 8006ba2:	2003      	movs	r0, #3
 8006ba4:	e0aa      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 80a6 	beq.w	8006cfa <HAL_RCC_OscConfig+0x6f6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bb2:	6892      	ldr	r2, [r2, #8]
 8006bb4:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bb8:	2a0c      	cmp	r2, #12
 8006bba:	d063      	beq.n	8006c84 <HAL_RCC_OscConfig+0x680>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d020      	beq.n	8006c02 <HAL_RCC_OscConfig+0x5fe>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006bca:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	f022 0203 	bic.w	r2, r2, #3
 8006bd2:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8006bda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006bde:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8006be0:	f7fd f860 	bl	8003ca4 <HAL_GetTick>
 8006be4:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006bf0:	f000 8087 	beq.w	8006d02 <HAL_RCC_OscConfig+0x6fe>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf4:	f7fd f856 	bl	8003ca4 <HAL_GetTick>
 8006bf8:	1b00      	subs	r0, r0, r4
 8006bfa:	2802      	cmp	r0, #2
 8006bfc:	d9f3      	bls.n	8006be6 <HAL_RCC_OscConfig+0x5e2>
            return HAL_TIMEOUT;
 8006bfe:	2003      	movs	r0, #3
 8006c00:	e07c      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c06:	6813      	ldr	r3, [r2, #0]
 8006c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c0c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006c0e:	f7fd f849 	bl	8003ca4 <HAL_GetTick>
 8006c12:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006c1e:	d006      	beq.n	8006c2e <HAL_RCC_OscConfig+0x62a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c20:	f7fd f840 	bl	8003ca4 <HAL_GetTick>
 8006c24:	1b40      	subs	r0, r0, r5
 8006c26:	2802      	cmp	r0, #2
 8006c28:	d9f4      	bls.n	8006c14 <HAL_RCC_OscConfig+0x610>
            return HAL_TIMEOUT;
 8006c2a:	2003      	movs	r0, #3
 8006c2c:	e066      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c32:	68d3      	ldr	r3, [r2, #12]
 8006c34:	4937      	ldr	r1, [pc, #220]	; (8006d14 <HAL_RCC_OscConfig+0x710>)
 8006c36:	4019      	ands	r1, r3
 8006c38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006c3c:	4303      	orrs	r3, r0
 8006c3e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006c40:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006c44:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006c46:	4303      	orrs	r3, r0
 8006c48:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006c4a:	4303      	orrs	r3, r0
 8006c4c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006c4e:	4303      	orrs	r3, r0
 8006c50:	430b      	orrs	r3, r1
 8006c52:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006c54:	6813      	ldr	r3, [r2, #0]
 8006c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c5a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c5c:	68d3      	ldr	r3, [r2, #12]
 8006c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c62:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006c64:	f7fd f81e 	bl	8003ca4 <HAL_GetTick>
 8006c68:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006c74:	d143      	bne.n	8006cfe <HAL_RCC_OscConfig+0x6fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c76:	f7fd f815 	bl	8003ca4 <HAL_GetTick>
 8006c7a:	1b00      	subs	r0, r0, r4
 8006c7c:	2802      	cmp	r0, #2
 8006c7e:	d9f4      	bls.n	8006c6a <HAL_RCC_OscConfig+0x666>
            return HAL_TIMEOUT;
 8006c80:	2003      	movs	r0, #3
 8006c82:	e03b      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d03e      	beq.n	8006d06 <HAL_RCC_OscConfig+0x702>
        uint32_t pllcfgr = RCC->PLLCFGR;
 8006c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c8c:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8e:	f003 0103 	and.w	r1, r3, #3
 8006c92:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c94:	4291      	cmp	r1, r2
 8006c96:	d001      	beq.n	8006c9c <HAL_RCC_OscConfig+0x698>
          return HAL_ERROR;
 8006c98:	2001      	movs	r0, #1
 8006c9a:	e02f      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca2:	428a      	cmp	r2, r1
 8006ca4:	d001      	beq.n	8006caa <HAL_RCC_OscConfig+0x6a6>
          return HAL_ERROR;
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	e028      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006caa:	f3c3 2206 	ubfx	r2, r3, #8, #7
 8006cae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cb0:	428a      	cmp	r2, r1
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x6b4>
          return HAL_ERROR;
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	e021      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cb8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006cbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006cbe:	428a      	cmp	r2, r1
 8006cc0:	d001      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x6c2>
          return HAL_ERROR;
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	e01a      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006cc6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006cca:	6c21      	ldr	r1, [r4, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ccc:	428a      	cmp	r2, r1
 8006cce:	d001      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x6d0>
          return HAL_ERROR;
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	e013      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006cd4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8006cd8:	6c62      	ldr	r2, [r4, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d015      	beq.n	8006d0a <HAL_RCC_OscConfig+0x706>
          return HAL_ERROR;
 8006cde:	2001      	movs	r0, #1
 8006ce0:	e00c      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
    return HAL_ERROR;
 8006ce2:	2001      	movs	r0, #1
}
 8006ce4:	4770      	bx	lr
        return HAL_ERROR;
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	e008      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
            return HAL_ERROR;
 8006cea:	2001      	movs	r0, #1
 8006cec:	e006      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
          return HAL_ERROR;
 8006cee:	2001      	movs	r0, #1
 8006cf0:	e004      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 8006cf2:	2001      	movs	r0, #1
 8006cf4:	e002      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	e000      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  return HAL_OK;
 8006cfa:	2000      	movs	r0, #0
}
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8006cfe:	2000      	movs	r0, #0
 8006d00:	e7fc      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
 8006d02:	2000      	movs	r0, #0
 8006d04:	e7fa      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 8006d06:	2001      	movs	r0, #1
 8006d08:	e7f8      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
  return HAL_OK;
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	e7f6      	b.n	8006cfc <HAL_RCC_OscConfig+0x6f8>
 8006d0e:	bf00      	nop
 8006d10:	58000400 	.word	0x58000400
 8006d14:	11c1808c 	.word	0x11c1808c

08006d18 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	f000 8127 	beq.w	8006f6c <HAL_RCC_ClockConfig+0x254>
{
 8006d1e:	b570      	push	{r4, r5, r6, lr}
 8006d20:	4604      	mov	r4, r0
 8006d22:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d24:	4b92      	ldr	r3, [pc, #584]	; (8006f70 <HAL_RCC_ClockConfig+0x258>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	428b      	cmp	r3, r1
 8006d2e:	d32d      	bcc.n	8006d8c <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	f013 0f02 	tst.w	r3, #2
 8006d36:	d13f      	bne.n	8006db8 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	f013 0f20 	tst.w	r3, #32
 8006d3e:	d153      	bne.n	8006de8 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d46:	d16a      	bne.n	8006e1e <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	f013 0f04 	tst.w	r3, #4
 8006d4e:	f040 8083 	bne.w	8006e58 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	f013 0f08 	tst.w	r3, #8
 8006d58:	f040 8097 	bne.w	8006e8a <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	f013 0f01 	tst.w	r3, #1
 8006d62:	f000 80e0 	beq.w	8006f26 <HAL_RCC_ClockConfig+0x20e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d66:	6863      	ldr	r3, [r4, #4]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	f000 80a8 	beq.w	8006ebe <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	f000 80c9 	beq.w	8006f06 <HAL_RCC_ClockConfig+0x1ee>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 80ce 	bne.w	8006f16 <HAL_RCC_ClockConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	f012 0f02 	tst.w	r2, #2
 8006d84:	f040 80a1 	bne.w	8006eca <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8006d88:	2001      	movs	r0, #1
 8006d8a:	e0ee      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d8c:	4a78      	ldr	r2, [pc, #480]	; (8006f70 <HAL_RCC_ClockConfig+0x258>)
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	f023 0307 	bic.w	r3, r3, #7
 8006d94:	430b      	orrs	r3, r1
 8006d96:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006d98:	f7fc ff84 	bl	8003ca4 <HAL_GetTick>
 8006d9c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d9e:	4b74      	ldr	r3, [pc, #464]	; (8006f70 <HAL_RCC_ClockConfig+0x258>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	42ab      	cmp	r3, r5
 8006da8:	d0c2      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006daa:	f7fc ff7b 	bl	8003ca4 <HAL_GetTick>
 8006dae:	1b80      	subs	r0, r0, r6
 8006db0:	2802      	cmp	r0, #2
 8006db2:	d9f4      	bls.n	8006d9e <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8006db4:	2003      	movs	r0, #3
 8006db6:	e0d8      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006db8:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dbe:	688a      	ldr	r2, [r1, #8]
 8006dc0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006dc8:	f7fc ff6c 	bl	8003ca4 <HAL_GetTick>
 8006dcc:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006dd8:	d1ae      	bne.n	8006d38 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006dda:	f7fc ff63 	bl	8003ca4 <HAL_GetTick>
 8006dde:	1b80      	subs	r0, r0, r6
 8006de0:	2802      	cmp	r0, #2
 8006de2:	d9f4      	bls.n	8006dce <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8006de4:	2003      	movs	r0, #3
 8006de6:	e0c0      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006de8:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dee:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8006df2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8006dfc:	f7fc ff52 	bl	8003ca4 <HAL_GetTick>
 8006e00:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006e0a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006e0e:	d197      	bne.n	8006d40 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e10:	f7fc ff48 	bl	8003ca4 <HAL_GetTick>
 8006e14:	1b80      	subs	r0, r0, r6
 8006e16:	2802      	cmp	r0, #2
 8006e18:	d9f3      	bls.n	8006e02 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8006e1a:	2003      	movs	r0, #3
 8006e1c:	e0a5      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006e1e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e24:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8006e28:	f023 030f 	bic.w	r3, r3, #15
 8006e2c:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8006e30:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8006e34:	f7fc ff36 	bl	8003ca4 <HAL_GetTick>
 8006e38:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006e42:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006e46:	f47f af7f 	bne.w	8006d48 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e4a:	f7fc ff2b 	bl	8003ca4 <HAL_GetTick>
 8006e4e:	1b80      	subs	r0, r0, r6
 8006e50:	2802      	cmp	r0, #2
 8006e52:	d9f2      	bls.n	8006e3a <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8006e54:	2003      	movs	r0, #3
 8006e56:	e088      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006e58:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e5e:	688a      	ldr	r2, [r1, #8]
 8006e60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e64:	4313      	orrs	r3, r2
 8006e66:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006e68:	f7fc ff1c 	bl	8003ca4 <HAL_GetTick>
 8006e6c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006e78:	f47f af6b 	bne.w	8006d52 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e7c:	f7fc ff12 	bl	8003ca4 <HAL_GetTick>
 8006e80:	1b80      	subs	r0, r0, r6
 8006e82:	2802      	cmp	r0, #2
 8006e84:	d9f3      	bls.n	8006e6e <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8006e86:	2003      	movs	r0, #3
 8006e88:	e06f      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006e8a:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e90:	6893      	ldr	r3, [r2, #8]
 8006e92:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006e96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006e9a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006e9c:	f7fc ff02 	bl	8003ca4 <HAL_GetTick>
 8006ea0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006eac:	f47f af56 	bne.w	8006d5c <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006eb0:	f7fc fef8 	bl	8003ca4 <HAL_GetTick>
 8006eb4:	1b80      	subs	r0, r0, r6
 8006eb6:	2802      	cmp	r0, #2
 8006eb8:	d9f3      	bls.n	8006ea2 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8006eba:	2003      	movs	r0, #3
 8006ebc:	e055      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ec2:	6812      	ldr	r2, [r2, #0]
 8006ec4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006ec8:	d01b      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x1ea>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ece:	688a      	ldr	r2, [r1, #8]
 8006ed0:	f022 0203 	bic.w	r2, r2, #3
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006ed8:	f7fc fee4 	bl	8003ca4 <HAL_GetTick>
 8006edc:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee8:	6862      	ldr	r2, [r4, #4]
 8006eea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006eee:	d01a      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x20e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ef0:	f7fc fed8 	bl	8003ca4 <HAL_GetTick>
 8006ef4:	1b80      	subs	r0, r0, r6
 8006ef6:	f241 3388 	movw	r3, #5000	; 0x1388
 8006efa:	4298      	cmp	r0, r3
 8006efc:	d9ef      	bls.n	8006ede <HAL_RCC_ClockConfig+0x1c6>
        return HAL_TIMEOUT;
 8006efe:	2003      	movs	r0, #3
 8006f00:	e033      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
        return HAL_ERROR;
 8006f02:	2001      	movs	r0, #1
 8006f04:	e031      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f0a:	6812      	ldr	r2, [r2, #0]
 8006f0c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006f10:	d1db      	bne.n	8006eca <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8006f12:	2001      	movs	r0, #1
 8006f14:	e029      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f1a:	6812      	ldr	r2, [r2, #0]
 8006f1c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006f20:	d1d3      	bne.n	8006eca <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8006f22:	2001      	movs	r0, #1
 8006f24:	e021      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f26:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <HAL_RCC_ClockConfig+0x258>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	42ab      	cmp	r3, r5
 8006f30:	d915      	bls.n	8006f5e <HAL_RCC_ClockConfig+0x246>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f32:	4a0f      	ldr	r2, [pc, #60]	; (8006f70 <HAL_RCC_ClockConfig+0x258>)
 8006f34:	6813      	ldr	r3, [r2, #0]
 8006f36:	f023 0307 	bic.w	r3, r3, #7
 8006f3a:	432b      	orrs	r3, r5
 8006f3c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006f3e:	f7fc feb1 	bl	8003ca4 <HAL_GetTick>
 8006f42:	4604      	mov	r4, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f44:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <HAL_RCC_ClockConfig+0x258>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	42ab      	cmp	r3, r5
 8006f4e:	d006      	beq.n	8006f5e <HAL_RCC_ClockConfig+0x246>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006f50:	f7fc fea8 	bl	8003ca4 <HAL_GetTick>
 8006f54:	1b00      	subs	r0, r0, r4
 8006f56:	2802      	cmp	r0, #2
 8006f58:	d9f4      	bls.n	8006f44 <HAL_RCC_ClockConfig+0x22c>
        return HAL_TIMEOUT;
 8006f5a:	2003      	movs	r0, #3
 8006f5c:	e005      	b.n	8006f6a <HAL_RCC_ClockConfig+0x252>
  SystemCoreClockUpdate();
 8006f5e:	f7fc fcb3 	bl	80038c8 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8006f62:	f7fc fea5 	bl	8003cb0 <HAL_GetTickPrio>
 8006f66:	f7fc fbf9 	bl	800375c <HAL_InitTick>
}
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006f6c:	2001      	movs	r0, #1
}
 8006f6e:	4770      	bx	lr
 8006f70:	58004000 	.word	0x58004000

08006f74 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f78:	689b      	ldr	r3, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f7a:	f013 030c 	ands.w	r3, r3, #12
 8006f7e:	d10c      	bne.n	8006f9a <HAL_RCC_GetSysClockFreq+0x26>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006f8a:	2bb0      	cmp	r3, #176	; 0xb0
 8006f8c:	d900      	bls.n	8006f90 <HAL_RCC_GetSysClockFreq+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006f8e:	23b0      	movs	r3, #176	; 0xb0
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006f90:	091b      	lsrs	r3, r3, #4
 8006f92:	4a24      	ldr	r2, [pc, #144]	; (8007024 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006f98:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d03d      	beq.n	800701a <HAL_RCC_GetSysClockFreq+0xa6>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d010      	beq.n	8006fc4 <HAL_RCC_GetSysClockFreq+0x50>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d030      	beq.n	8007012 <HAL_RCC_GetSysClockFreq+0x9e>
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d10f      	bne.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x60>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006fbe:	d12a      	bne.n	8007016 <HAL_RCC_GetSysClockFreq+0xa2>
          pllinputfreq = HSE_VALUE;
 8006fc0:	4b19      	ldr	r3, [pc, #100]	; (8007028 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006fc2:	e013      	b.n	8006fec <HAL_RCC_GetSysClockFreq+0x78>
 8006fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006fce:	d026      	beq.n	800701e <HAL_RCC_GetSysClockFreq+0xaa>
      sysclockfreq = HSE_VALUE / 2U;
 8006fd0:	4816      	ldr	r0, [pc, #88]	; (800702c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fd2:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006fde:	2bb0      	cmp	r3, #176	; 0xb0
 8006fe0:	d900      	bls.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x70>
    msiRange = LL_RCC_MSIRANGE_11;
 8006fe2:	23b0      	movs	r3, #176	; 0xb0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006fe4:	091b      	lsrs	r3, r3, #4
 8006fe6:	4a0f      	ldr	r2, [pc, #60]	; (8007024 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ff0:	68d0      	ldr	r0, [r2, #12]
 8006ff2:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006ff6:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006ffa:	68d3      	ldr	r3, [r2, #12]
 8006ffc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007000:	3301      	adds	r3, #1
 8007002:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007006:	68d3      	ldr	r3, [r2, #12]
 8007008:	0f5b      	lsrs	r3, r3, #29
 800700a:	3301      	adds	r3, #1
 800700c:	fbb0 f0f3 	udiv	r0, r0, r3
 8007010:	4770      	bx	lr
        pllinputfreq = HSI_VALUE;
 8007012:	4b06      	ldr	r3, [pc, #24]	; (800702c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007014:	e7ea      	b.n	8006fec <HAL_RCC_GetSysClockFreq+0x78>
          pllinputfreq = HSE_VALUE / 2U;
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007018:	e7e8      	b.n	8006fec <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = HSI_VALUE;
 800701a:	4804      	ldr	r0, [pc, #16]	; (800702c <HAL_RCC_GetSysClockFreq+0xb8>)
 800701c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800701e:	4802      	ldr	r0, [pc, #8]	; (8007028 <HAL_RCC_GetSysClockFreq+0xb4>)
}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	0800f778 	.word	0x0800f778
 8007028:	01e84800 	.word	0x01e84800
 800702c:	00f42400 	.word	0x00f42400

08007030 <HAL_RCC_GetHCLKFreq>:
{
 8007030:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007032:	f7ff ff9f 	bl	8006f74 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007040:	4a02      	ldr	r2, [pc, #8]	; (800704c <HAL_RCC_GetHCLKFreq+0x1c>)
 8007042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8007046:	fbb0 f0f3 	udiv	r0, r0, r3
 800704a:	bd08      	pop	{r3, pc}
 800704c:	0800f718 	.word	0x0800f718

08007050 <HAL_RCC_GetPCLK1Freq>:
{
 8007050:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007052:	f7ff ffed 	bl	8007030 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007060:	4a03      	ldr	r2, [pc, #12]	; (8007070 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007066:	f003 031f 	and.w	r3, r3, #31
}
 800706a:	40d8      	lsrs	r0, r3
 800706c:	bd08      	pop	{r3, pc}
 800706e:	bf00      	nop
 8007070:	0800f758 	.word	0x0800f758

08007074 <HAL_RCC_GetPCLK2Freq>:
{
 8007074:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007076:	f7ff ffdb 	bl	8007030 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800707a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007084:	4a03      	ldr	r2, [pc, #12]	; (8007094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800708a:	f003 031f 	and.w	r3, r3, #31
}
 800708e:	40d8      	lsrs	r0, r3
 8007090:	bd08      	pop	{r3, pc}
 8007092:	bf00      	nop
 8007094:	0800f758 	.word	0x0800f758

08007098 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8007098:	236f      	movs	r3, #111	; 0x6f
 800709a:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800709c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	f002 020c 	and.w	r2, r2, #12
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80070a6:	6042      	str	r2, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80070ae:	6082      	str	r2, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80070b0:	689a      	ldr	r2, [r3, #8]
 80070b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80070b6:	60c2      	str	r2, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	f402 5260 	and.w	r2, r2, #14336	; 0x3800
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80070be:	6102      	str	r2, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80070c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80070c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80070c8:	6142      	str	r2, [r0, #20]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80070ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	b2db      	uxtb	r3, r3
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80070d2:	6183      	str	r3, [r0, #24]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80070d4:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <HAL_RCC_GetClockConfig+0x48>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	600b      	str	r3, [r1, #0]
}
 80070de:	4770      	bx	lr
 80070e0:	58004000 	.word	0x58004000

080070e4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80070e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070ec:	6813      	ldr	r3, [r2, #0]
 80070ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070f2:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070f4:	f7fc fdd6 	bl	8003ca4 <HAL_GetTick>
 80070f8:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80070fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007104:	d006      	beq.n	8007114 <RCCEx_PLLSAI1_ConfigNP+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007106:	f7fc fdcd 	bl	8003ca4 <HAL_GetTick>
 800710a:	1b00      	subs	r0, r0, r4
 800710c:	2802      	cmp	r0, #2
 800710e:	d9f4      	bls.n	80070fa <RCCEx_PLLSAI1_ConfigNP+0x16>
    {
      status = HAL_TIMEOUT;
 8007110:	2403      	movs	r4, #3
 8007112:	e000      	b.n	8007116 <RCCEx_PLLSAI1_ConfigNP+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8007114:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8007116:	b10c      	cbz	r4, 800711c <RCCEx_PLLSAI1_ConfigNP+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8007118:	4620      	mov	r0, r4
 800711a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800711c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007120:	691a      	ldr	r2, [r3, #16]
 8007122:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8007126:	6829      	ldr	r1, [r5, #0]
 8007128:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800712c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	f422 1278 	bic.w	r2, r2, #4063232	; 0x3e0000
 8007134:	6869      	ldr	r1, [r5, #4]
 8007136:	430a      	orrs	r2, r1
 8007138:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007140:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007142:	f7fc fdaf 	bl	8003ca4 <HAL_GetTick>
 8007146:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007152:	d105      	bne.n	8007160 <RCCEx_PLLSAI1_ConfigNP+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007154:	f7fc fda6 	bl	8003ca4 <HAL_GetTick>
 8007158:	1b80      	subs	r0, r0, r6
 800715a:	2802      	cmp	r0, #2
 800715c:	d9f4      	bls.n	8007148 <RCCEx_PLLSAI1_ConfigNP+0x64>
        status = HAL_TIMEOUT;
 800715e:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8007160:	2c00      	cmp	r4, #0
 8007162:	d1d9      	bne.n	8007118 <RCCEx_PLLSAI1_ConfigNP+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007168:	6913      	ldr	r3, [r2, #16]
 800716a:	6929      	ldr	r1, [r5, #16]
 800716c:	430b      	orrs	r3, r1
 800716e:	6113      	str	r3, [r2, #16]
 8007170:	e7d2      	b.n	8007118 <RCCEx_PLLSAI1_ConfigNP+0x34>

08007172 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007172:	b570      	push	{r4, r5, r6, lr}
 8007174:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007180:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007182:	f7fc fd8f 	bl	8003ca4 <HAL_GetTick>
 8007186:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007192:	d006      	beq.n	80071a2 <RCCEx_PLLSAI1_ConfigNQ+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007194:	f7fc fd86 	bl	8003ca4 <HAL_GetTick>
 8007198:	1b00      	subs	r0, r0, r4
 800719a:	2802      	cmp	r0, #2
 800719c:	d9f4      	bls.n	8007188 <RCCEx_PLLSAI1_ConfigNQ+0x16>
    {
      status = HAL_TIMEOUT;
 800719e:	2403      	movs	r4, #3
 80071a0:	e000      	b.n	80071a4 <RCCEx_PLLSAI1_ConfigNQ+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 80071a2:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 80071a4:	b10c      	cbz	r4, 80071aa <RCCEx_PLLSAI1_ConfigNQ+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 80071a6:	4620      	mov	r0, r4
 80071a8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80071aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80071b4:	6829      	ldr	r1, [r5, #0]
 80071b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80071ba:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80071bc:	691a      	ldr	r2, [r3, #16]
 80071be:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80071c2:	68a9      	ldr	r1, [r5, #8]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80071ce:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80071d0:	f7fc fd68 	bl	8003ca4 <HAL_GetTick>
 80071d4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80071d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80071e0:	d105      	bne.n	80071ee <RCCEx_PLLSAI1_ConfigNQ+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071e2:	f7fc fd5f 	bl	8003ca4 <HAL_GetTick>
 80071e6:	1b80      	subs	r0, r0, r6
 80071e8:	2802      	cmp	r0, #2
 80071ea:	d9f4      	bls.n	80071d6 <RCCEx_PLLSAI1_ConfigNQ+0x64>
        status = HAL_TIMEOUT;
 80071ec:	2403      	movs	r4, #3
    if (status == HAL_OK)
 80071ee:	2c00      	cmp	r4, #0
 80071f0:	d1d9      	bne.n	80071a6 <RCCEx_PLLSAI1_ConfigNQ+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80071f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071f6:	6913      	ldr	r3, [r2, #16]
 80071f8:	6929      	ldr	r1, [r5, #16]
 80071fa:	430b      	orrs	r3, r1
 80071fc:	6113      	str	r3, [r2, #16]
 80071fe:	e7d2      	b.n	80071a6 <RCCEx_PLLSAI1_ConfigNQ+0x34>

08007200 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007208:	6813      	ldr	r3, [r2, #0]
 800720a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800720e:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007210:	f7fc fd48 	bl	8003ca4 <HAL_GetTick>
 8007214:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007220:	d006      	beq.n	8007230 <RCCEx_PLLSAI1_ConfigNR+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007222:	f7fc fd3f 	bl	8003ca4 <HAL_GetTick>
 8007226:	1b00      	subs	r0, r0, r4
 8007228:	2802      	cmp	r0, #2
 800722a:	d9f4      	bls.n	8007216 <RCCEx_PLLSAI1_ConfigNR+0x16>
    {
      status = HAL_TIMEOUT;
 800722c:	2403      	movs	r4, #3
 800722e:	e000      	b.n	8007232 <RCCEx_PLLSAI1_ConfigNR+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8007230:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8007232:	b10c      	cbz	r4, 8007238 <RCCEx_PLLSAI1_ConfigNR+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8007234:	4620      	mov	r0, r4
 8007236:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8007242:	6829      	ldr	r1, [r5, #0]
 8007244:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007248:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800724a:	691a      	ldr	r2, [r3, #16]
 800724c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8007250:	68e9      	ldr	r1, [r5, #12]
 8007252:	430a      	orrs	r2, r1
 8007254:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800725c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800725e:	f7fc fd21 	bl	8003ca4 <HAL_GetTick>
 8007262:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800726e:	d105      	bne.n	800727c <RCCEx_PLLSAI1_ConfigNR+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007270:	f7fc fd18 	bl	8003ca4 <HAL_GetTick>
 8007274:	1b80      	subs	r0, r0, r6
 8007276:	2802      	cmp	r0, #2
 8007278:	d9f4      	bls.n	8007264 <RCCEx_PLLSAI1_ConfigNR+0x64>
        status = HAL_TIMEOUT;
 800727a:	2403      	movs	r4, #3
    if (status == HAL_OK)
 800727c:	2c00      	cmp	r4, #0
 800727e:	d1d9      	bne.n	8007234 <RCCEx_PLLSAI1_ConfigNR+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007284:	6913      	ldr	r3, [r2, #16]
 8007286:	6929      	ldr	r1, [r5, #16]
 8007288:	430b      	orrs	r3, r1
 800728a:	6113      	str	r3, [r2, #16]
 800728c:	e7d2      	b.n	8007234 <RCCEx_PLLSAI1_ConfigNR+0x34>

0800728e <HAL_RCCEx_PeriphCLKConfig>:
{
 800728e:	b570      	push	{r4, r5, r6, lr}
 8007290:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007292:	6803      	ldr	r3, [r0, #0]
 8007294:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007298:	d02a      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch (PeriphClkInit->Sai1ClockSelection)
 800729a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800729c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072a0:	d011      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x38>
 80072a2:	d807      	bhi.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80072a4:	b963      	cbnz	r3, 80072c0 <HAL_RCCEx_PeriphCLKConfig+0x32>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80072a6:	3004      	adds	r0, #4
 80072a8:	f7ff ff1c 	bl	80070e4 <RCCEx_PLLSAI1_ConfigNP>
    if (ret == HAL_OK)
 80072ac:	4606      	mov	r6, r0
 80072ae:	b188      	cbz	r0, 80072d4 <HAL_RCCEx_PeriphCLKConfig+0x46>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80072b0:	4605      	mov	r5, r0
 80072b2:	e01f      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch (PeriphClkInit->Sai1ClockSelection)
 80072b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072b8:	d018      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80072ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072be:	d015      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5e>
        ret = HAL_ERROR;
 80072c0:	2501      	movs	r5, #1
 80072c2:	462e      	mov	r6, r5
 80072c4:	e016      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x66>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80072c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072ca:	68d3      	ldr	r3, [r2, #12]
 80072cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d0:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80072d2:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80072d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80072de:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80072e8:	2500      	movs	r5, #0
 80072ea:	e003      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x66>
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80072ec:	2600      	movs	r6, #0
 80072ee:	e7f1      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x46>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80072f0:	2500      	movs	r5, #0
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80072f2:	462e      	mov	r6, r5
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80072fa:	d00a      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x84>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80072fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007300:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8007304:	f405 7540 	and.w	r5, r5, #768	; 0x300
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007308:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800730a:	42ab      	cmp	r3, r5
 800730c:	f040 80d5 	bne.w	80074ba <HAL_RCCEx_PeriphCLKConfig+0x22c>
      status = ret;
 8007310:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	f013 0f01 	tst.w	r3, #1
 8007318:	d009      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xa0>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800731a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800731c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007320:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007324:	f022 0203 	bic.w	r2, r2, #3
 8007328:	4313      	orrs	r3, r2
 800732a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	f013 0f02 	tst.w	r3, #2
 8007334:	d009      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xbc>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007336:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007338:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800733c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007340:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007344:	4313      	orrs	r3, r2
 8007346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	f013 0f10 	tst.w	r3, #16
 8007350:	d00c      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007352:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007358:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800735c:	0c02      	lsrs	r2, r0, #16
 800735e:	0412      	lsls	r2, r2, #16
 8007360:	ea23 0302 	bic.w	r3, r3, r2
 8007364:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	f013 0f20 	tst.w	r3, #32
 8007372:	d00c      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x100>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007374:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800737a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800737e:	0c02      	lsrs	r2, r0, #16
 8007380:	0412      	lsls	r2, r2, #16
 8007382:	ea23 0302 	bic.w	r3, r3, r2
 8007386:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800738a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	f013 0f04 	tst.w	r3, #4
 8007394:	d00f      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007396:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007398:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800739c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80073a0:	0919      	lsrs	r1, r3, #4
 80073a2:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80073a6:	ea22 0201 	bic.w	r2, r2, r1
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	f013 0f08 	tst.w	r3, #8
 80073bc:	d00f      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073c0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80073c4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80073c8:	0919      	lsrs	r1, r3, #4
 80073ca:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80073ce:	ea22 0201 	bic.w	r2, r2, r1
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80073d8:	4313      	orrs	r3, r2
 80073da:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80073e4:	d013      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80073e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80073f0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007400:	f000 809c 	beq.w	800753c <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007404:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800740a:	f000 809c 	beq.w	8007546 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007414:	d017      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007416:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741c:	d005      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800741e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007422:	d002      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007424:	2b00      	cmp	r3, #0
 8007426:	f040 8096 	bne.w	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800742a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800742e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007432:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800743c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800743e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007442:	f000 809a 	beq.w	800757a <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800744c:	d013      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800744e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007454:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800745c:	4313      	orrs	r3, r2
 800745e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007462:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007468:	f000 808e 	beq.w	8007588 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800746c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800746e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007472:	f000 808e 	beq.w	8007592 <HAL_RCCEx_PeriphCLKConfig+0x304>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800747c:	d009      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x204>
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800747e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007484:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8007488:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800748c:	4313      	orrs	r3, r2
 800748e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007498:	d00d      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800749a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800749c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80074a2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80074a6:	430a      	orrs	r2, r1
 80074a8:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80074aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80074ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80074ae:	f021 0103 	bic.w	r1, r1, #3
 80074b2:	430a      	orrs	r2, r1
 80074b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80074b6:	4628      	mov	r0, r5
 80074b8:	bd70      	pop	{r4, r5, r6, pc}
      HAL_PWR_EnableBkUpAccess();
 80074ba:	f7ff f80f 	bl	80064dc <HAL_PWR_EnableBkUpAccess>
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80074be:	b95d      	cbnz	r5, 80074d8 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80074c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80074c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80074ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80074d4:	4635      	mov	r5, r6
 80074d6:	e71c      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x84>
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80074d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074e0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80074e4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80074e8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074ec:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80074f0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80074f4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80074f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80074fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80074fe:	430a      	orrs	r2, r1
        LL_RCC_WriteReg(BDCR, bdcr);
 8007500:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007508:	f013 0f01 	tst.w	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800750e:	4635      	mov	r5, r6
 8007510:	e6ff      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x84>
          tickstart = HAL_GetTick();
 8007512:	f7fc fbc7 	bl	8003ca4 <HAL_GetTick>
 8007516:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800751c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007520:	f013 0f02 	tst.w	r3, #2
 8007524:	d108      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007526:	f7fc fbbd 	bl	8003ca4 <HAL_GetTick>
 800752a:	1b40      	subs	r0, r0, r5
 800752c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007530:	4298      	cmp	r0, r3
 8007532:	d9f1      	bls.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x28a>
              ret = HAL_TIMEOUT;
 8007534:	2503      	movs	r5, #3
 8007536:	e6ec      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8007538:	4635      	mov	r5, r6
 800753a:	e6ea      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800753c:	68cb      	ldr	r3, [r1, #12]
 800753e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007542:	60cb      	str	r3, [r1, #12]
 8007544:	e75e      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007546:	1d20      	adds	r0, r4, #4
 8007548:	f7ff fe13 	bl	8007172 <RCCEx_PLLSAI1_ConfigNQ>
      if (ret != HAL_OK)
 800754c:	2800      	cmp	r0, #0
 800754e:	f43f af5e 	beq.w	800740e <HAL_RCCEx_PeriphCLKConfig+0x180>
        status = ret;
 8007552:	4605      	mov	r5, r0
 8007554:	e75b      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800755a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800755e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8007562:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8007566:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800756a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800756e:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8007572:	430b      	orrs	r3, r1
 8007574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8007578:	e760      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800757a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800757e:	68d3      	ldr	r3, [r2, #12]
 8007580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007584:	60d3      	str	r3, [r2, #12]
 8007586:	e75e      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007588:	68cb      	ldr	r3, [r1, #12]
 800758a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800758e:	60cb      	str	r3, [r1, #12]
 8007590:	e76c      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007592:	1d20      	adds	r0, r4, #4
 8007594:	f7ff fe34 	bl	8007200 <RCCEx_PLLSAI1_ConfigNR>
      if (ret != HAL_OK)
 8007598:	2800      	cmp	r0, #0
 800759a:	f43f af6c 	beq.w	8007476 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        status = ret;
 800759e:	4605      	mov	r5, r0
 80075a0:	e769      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x1e8>

080075a2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80075a2:	b538      	push	{r3, r4, r5, lr}
 80075a4:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80075a6:	6802      	ldr	r2, [r0, #0]
 80075a8:	68d3      	ldr	r3, [r2, #12]
 80075aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075ae:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80075b0:	f7fc fb78 	bl	8003ca4 <HAL_GetTick>
 80075b4:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f013 0f20 	tst.w	r3, #32
 80075be:	d107      	bne.n	80075d0 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80075c0:	f7fc fb70 	bl	8003ca4 <HAL_GetTick>
 80075c4:	1b40      	subs	r0, r0, r5
 80075c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80075ca:	d9f4      	bls.n	80075b6 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80075cc:	2003      	movs	r0, #3
 80075ce:	e000      	b.n	80075d2 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 80075d0:	2000      	movs	r0, #0
}
 80075d2:	bd38      	pop	{r3, r4, r5, pc}

080075d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80075d4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80075d6:	6803      	ldr	r3, [r0, #0]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80075de:	d001      	beq.n	80075e4 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80075e0:	2000      	movs	r0, #0
}
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80075e6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ea:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80075ec:	f7fc fb5a 	bl	8003ca4 <HAL_GetTick>
 80075f0:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80075fa:	d107      	bne.n	800760c <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80075fc:	f7fc fb52 	bl	8003ca4 <HAL_GetTick>
 8007600:	1b40      	subs	r0, r0, r5
 8007602:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007606:	d9f4      	bls.n	80075f2 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8007608:	2003      	movs	r0, #3
 800760a:	e7ea      	b.n	80075e2 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800760c:	2000      	movs	r0, #0
 800760e:	e7e8      	b.n	80075e2 <RTC_EnterInitMode+0xe>

08007610 <HAL_RTC_Init>:
{
 8007610:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8007612:	2800      	cmp	r0, #0
 8007614:	d067      	beq.n	80076e6 <HAL_RTC_Init+0xd6>
 8007616:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007618:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800761c:	2b00      	cmp	r3, #0
 800761e:	d044      	beq.n	80076aa <HAL_RTC_Init+0x9a>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007620:	2302      	movs	r3, #2
 8007622:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	22ca      	movs	r2, #202	; 0xca
 800762a:	625a      	str	r2, [r3, #36]	; 0x24
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	2253      	movs	r2, #83	; 0x53
 8007630:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007632:	4620      	mov	r0, r4
 8007634:	f7ff ffce 	bl	80075d4 <RTC_EnterInitMode>
 8007638:	4605      	mov	r5, r0
 800763a:	2800      	cmp	r0, #0
 800763c:	d13a      	bne.n	80076b4 <HAL_RTC_Init+0xa4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800763e:	6822      	ldr	r2, [r4, #0]
 8007640:	6893      	ldr	r3, [r2, #8]
 8007642:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800764a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800764c:	6821      	ldr	r1, [r4, #0]
 800764e:	688a      	ldr	r2, [r1, #8]
 8007650:	6863      	ldr	r3, [r4, #4]
 8007652:	6920      	ldr	r0, [r4, #16]
 8007654:	4303      	orrs	r3, r0
 8007656:	69a0      	ldr	r0, [r4, #24]
 8007658:	4303      	orrs	r3, r0
 800765a:	4313      	orrs	r3, r2
 800765c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	68e2      	ldr	r2, [r4, #12]
 8007662:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007664:	6822      	ldr	r2, [r4, #0]
 8007666:	6913      	ldr	r3, [r2, #16]
 8007668:	68a1      	ldr	r1, [r4, #8]
 800766a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800766e:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	68d3      	ldr	r3, [r2, #12]
 8007674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007678:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800767a:	6822      	ldr	r2, [r4, #0]
 800767c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800767e:	f023 0303 	bic.w	r3, r3, #3
 8007682:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007684:	6821      	ldr	r1, [r4, #0]
 8007686:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8007688:	69e2      	ldr	r2, [r4, #28]
 800768a:	6960      	ldr	r0, [r4, #20]
 800768c:	4302      	orrs	r2, r0
 800768e:	4313      	orrs	r3, r2
 8007690:	64cb      	str	r3, [r1, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f013 0f20 	tst.w	r3, #32
 800769a:	d014      	beq.n	80076c6 <HAL_RTC_Init+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	22ff      	movs	r2, #255	; 0xff
 80076a0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_OK;
 80076a8:	e00b      	b.n	80076c2 <HAL_RTC_Init+0xb2>
    hrtc->Lock = HAL_UNLOCKED;
 80076aa:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 80076ae:	f7fc f825 	bl	80036fc <HAL_RTC_MspInit>
 80076b2:	e7b5      	b.n	8007620 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	22ff      	movs	r2, #255	; 0xff
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80076ba:	2304      	movs	r3, #4
 80076bc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 80076c0:	2501      	movs	r5, #1
}
 80076c2:	4628      	mov	r0, r5
 80076c4:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076c6:	4620      	mov	r0, r4
 80076c8:	f7ff ff6b 	bl	80075a2 <HAL_RTC_WaitForSynchro>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d0e5      	beq.n	800769c <HAL_RTC_Init+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	22ff      	movs	r2, #255	; 0xff
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80076d6:	2304      	movs	r3, #4
 80076d8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80076dc:	2300      	movs	r3, #0
 80076de:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80076e2:	2501      	movs	r5, #1
 80076e4:	e7ed      	b.n	80076c2 <HAL_RTC_Init+0xb2>
     return HAL_ERROR;
 80076e6:	2501      	movs	r5, #1
 80076e8:	e7eb      	b.n	80076c2 <HAL_RTC_Init+0xb2>
	...

080076ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ee:	6a03      	ldr	r3, [r0, #32]
 80076f0:	f023 0301 	bic.w	r3, r3, #1
 80076f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076fa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007700:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007704:	680d      	ldr	r5, [r1, #0]
 8007706:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007708:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800770c:	688d      	ldr	r5, [r1, #8]
 800770e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007710:	4d14      	ldr	r5, [pc, #80]	; (8007764 <TIM_OC1_SetConfig+0x78>)
 8007712:	42a8      	cmp	r0, r5
 8007714:	d007      	beq.n	8007726 <TIM_OC1_SetConfig+0x3a>
 8007716:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800771a:	42a8      	cmp	r0, r5
 800771c:	d003      	beq.n	8007726 <TIM_OC1_SetConfig+0x3a>
 800771e:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 8007722:	42a8      	cmp	r0, r5
 8007724:	d105      	bne.n	8007732 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007726:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800772a:	68cd      	ldr	r5, [r1, #12]
 800772c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800772e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007732:	4d0c      	ldr	r5, [pc, #48]	; (8007764 <TIM_OC1_SetConfig+0x78>)
 8007734:	42a8      	cmp	r0, r5
 8007736:	d007      	beq.n	8007748 <TIM_OC1_SetConfig+0x5c>
 8007738:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 800773c:	42a8      	cmp	r0, r5
 800773e:	d003      	beq.n	8007748 <TIM_OC1_SetConfig+0x5c>
 8007740:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007744:	42a8      	cmp	r0, r5
 8007746:	d105      	bne.n	8007754 <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007748:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800774c:	694c      	ldr	r4, [r1, #20]
 800774e:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007750:	698d      	ldr	r5, [r1, #24]
 8007752:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007754:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007756:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007758:	684a      	ldr	r2, [r1, #4]
 800775a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800775c:	6203      	str	r3, [r0, #32]
}
 800775e:	bc30      	pop	{r4, r5}
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	40012c00 	.word	0x40012c00

08007768 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007768:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800776a:	6a03      	ldr	r3, [r0, #32]
 800776c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007770:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007772:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007774:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007776:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007778:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800777c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007780:	680d      	ldr	r5, [r1, #0]
 8007782:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007788:	688d      	ldr	r5, [r1, #8]
 800778a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800778e:	4d12      	ldr	r5, [pc, #72]	; (80077d8 <TIM_OC3_SetConfig+0x70>)
 8007790:	42a8      	cmp	r0, r5
 8007792:	d019      	beq.n	80077c8 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007794:	4d10      	ldr	r5, [pc, #64]	; (80077d8 <TIM_OC3_SetConfig+0x70>)
 8007796:	42a8      	cmp	r0, r5
 8007798:	d007      	beq.n	80077aa <TIM_OC3_SetConfig+0x42>
 800779a:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 800779e:	42a8      	cmp	r0, r5
 80077a0:	d003      	beq.n	80077aa <TIM_OC3_SetConfig+0x42>
 80077a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80077a6:	42a8      	cmp	r0, r5
 80077a8:	d107      	bne.n	80077ba <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077ae:	694d      	ldr	r5, [r1, #20]
 80077b0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077b4:	698d      	ldr	r5, [r1, #24]
 80077b6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ba:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077bc:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077be:	684a      	ldr	r2, [r1, #4]
 80077c0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c2:	6203      	str	r3, [r0, #32]
}
 80077c4:	bc30      	pop	{r4, r5}
 80077c6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80077c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077cc:	68cd      	ldr	r5, [r1, #12]
 80077ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80077d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077d6:	e7dd      	b.n	8007794 <TIM_OC3_SetConfig+0x2c>
 80077d8:	40012c00 	.word	0x40012c00

080077dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077de:	6a03      	ldr	r3, [r0, #32]
 80077e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ea:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077f0:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077f4:	680d      	ldr	r5, [r1, #0]
 80077f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077fe:	688d      	ldr	r5, [r1, #8]
 8007800:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007804:	4d0b      	ldr	r5, [pc, #44]	; (8007834 <TIM_OC4_SetConfig+0x58>)
 8007806:	42a8      	cmp	r0, r5
 8007808:	d007      	beq.n	800781a <TIM_OC4_SetConfig+0x3e>
 800780a:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 800780e:	42a8      	cmp	r0, r5
 8007810:	d003      	beq.n	800781a <TIM_OC4_SetConfig+0x3e>
 8007812:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007816:	42a8      	cmp	r0, r5
 8007818:	d104      	bne.n	8007824 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800781a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800781e:	694d      	ldr	r5, [r1, #20]
 8007820:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007824:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007826:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007828:	684b      	ldr	r3, [r1, #4]
 800782a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782c:	6202      	str	r2, [r0, #32]
}
 800782e:	bc30      	pop	{r4, r5}
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	40012c00 	.word	0x40012c00

08007838 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007838:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800783a:	6a03      	ldr	r3, [r0, #32]
 800783c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007840:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007842:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007844:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007846:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007848:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800784c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007850:	680d      	ldr	r5, [r1, #0]
 8007852:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007854:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007858:	688d      	ldr	r5, [r1, #8]
 800785a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785e:	4d0b      	ldr	r5, [pc, #44]	; (800788c <TIM_OC5_SetConfig+0x54>)
 8007860:	42a8      	cmp	r0, r5
 8007862:	d007      	beq.n	8007874 <TIM_OC5_SetConfig+0x3c>
 8007864:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8007868:	42a8      	cmp	r0, r5
 800786a:	d003      	beq.n	8007874 <TIM_OC5_SetConfig+0x3c>
 800786c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007870:	42a8      	cmp	r0, r5
 8007872:	d104      	bne.n	800787e <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007874:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007878:	694d      	ldr	r5, [r1, #20]
 800787a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800787e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007880:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007882:	684a      	ldr	r2, [r1, #4]
 8007884:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007886:	6203      	str	r3, [r0, #32]
}
 8007888:	bc30      	pop	{r4, r5}
 800788a:	4770      	bx	lr
 800788c:	40012c00 	.word	0x40012c00

08007890 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007890:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007892:	6a03      	ldr	r3, [r0, #32]
 8007894:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007898:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800789c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800789e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078a8:	680d      	ldr	r5, [r1, #0]
 80078aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078ae:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078b2:	688d      	ldr	r5, [r1, #8]
 80078b4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b8:	4d0b      	ldr	r5, [pc, #44]	; (80078e8 <TIM_OC6_SetConfig+0x58>)
 80078ba:	42a8      	cmp	r0, r5
 80078bc:	d007      	beq.n	80078ce <TIM_OC6_SetConfig+0x3e>
 80078be:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80078c2:	42a8      	cmp	r0, r5
 80078c4:	d003      	beq.n	80078ce <TIM_OC6_SetConfig+0x3e>
 80078c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80078ca:	42a8      	cmp	r0, r5
 80078cc:	d104      	bne.n	80078d8 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078ce:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078d2:	694d      	ldr	r5, [r1, #20]
 80078d4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078da:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078dc:	684b      	ldr	r3, [r1, #4]
 80078de:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e0:	6202      	str	r2, [r0, #32]
}
 80078e2:	bc30      	pop	{r4, r5}
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	40012c00 	.word	0x40012c00

080078ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078ec:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078ee:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078f0:	6a04      	ldr	r4, [r0, #32]
 80078f2:	f024 0401 	bic.w	r4, r4, #1
 80078f6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078fa:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078fe:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007902:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8007906:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007908:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800790a:	6203      	str	r3, [r0, #32]
}
 800790c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007910:	4770      	bx	lr

08007912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007912:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007914:	6a03      	ldr	r3, [r0, #32]
 8007916:	f023 0310 	bic.w	r3, r3, #16
 800791a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800791c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800791e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007920:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007924:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007928:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800792c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007930:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007932:	6203      	str	r3, [r0, #32]
}
 8007934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007938:	4770      	bx	lr

0800793a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800793a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800793c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007944:	4319      	orrs	r1, r3
 8007946:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800794a:	6081      	str	r1, [r0, #8]
}
 800794c:	4770      	bx	lr
	...

08007950 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8007950:	2302      	movs	r3, #2
 8007952:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007956:	6802      	ldr	r2, [r0, #0]
 8007958:	6891      	ldr	r1, [r2, #8]
 800795a:	4b08      	ldr	r3, [pc, #32]	; (800797c <HAL_TIM_Base_Start+0x2c>)
 800795c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795e:	2b06      	cmp	r3, #6
 8007960:	d006      	beq.n	8007970 <HAL_TIM_Base_Start+0x20>
 8007962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007966:	d003      	beq.n	8007970 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8007968:	6813      	ldr	r3, [r2, #0]
 800796a:	f043 0301 	orr.w	r3, r3, #1
 800796e:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007970:	2301      	movs	r3, #1
 8007972:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8007976:	2000      	movs	r0, #0
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	00010007 	.word	0x00010007

08007980 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 8007980:	2302      	movs	r3, #2
 8007982:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8007986:	6803      	ldr	r3, [r0, #0]
 8007988:	6a19      	ldr	r1, [r3, #32]
 800798a:	f241 1211 	movw	r2, #4369	; 0x1111
 800798e:	4211      	tst	r1, r2
 8007990:	d108      	bne.n	80079a4 <HAL_TIM_Base_Stop+0x24>
 8007992:	6a19      	ldr	r1, [r3, #32]
 8007994:	f240 4244 	movw	r2, #1092	; 0x444
 8007998:	4211      	tst	r1, r2
 800799a:	d103      	bne.n	80079a4 <HAL_TIM_Base_Stop+0x24>
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	f022 0201 	bic.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	2301      	movs	r3, #1
 80079a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80079aa:	2000      	movs	r0, #0
 80079ac:	4770      	bx	lr
	...

080079b0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079b0:	6802      	ldr	r2, [r0, #0]
 80079b2:	68d3      	ldr	r3, [r2, #12]
 80079b4:	f043 0301 	orr.w	r3, r3, #1
 80079b8:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ba:	6802      	ldr	r2, [r0, #0]
 80079bc:	6891      	ldr	r1, [r2, #8]
 80079be:	4b06      	ldr	r3, [pc, #24]	; (80079d8 <HAL_TIM_Base_Start_IT+0x28>)
 80079c0:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c2:	2b06      	cmp	r3, #6
 80079c4:	d006      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x24>
 80079c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ca:	d003      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 80079cc:	6813      	ldr	r3, [r2, #0]
 80079ce:	f043 0301 	orr.w	r3, r3, #1
 80079d2:	6013      	str	r3, [r2, #0]
}
 80079d4:	2000      	movs	r0, #0
 80079d6:	4770      	bx	lr
 80079d8:	00010007 	.word	0x00010007

080079dc <HAL_TIM_PWM_MspInit>:
}
 80079dc:	4770      	bx	lr

080079de <HAL_TIM_OC_DelayElapsedCallback>:
}
 80079de:	4770      	bx	lr

080079e0 <HAL_TIM_IC_CaptureCallback>:
}
 80079e0:	4770      	bx	lr

080079e2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80079e2:	4770      	bx	lr

080079e4 <HAL_TIM_TriggerCallback>:
}
 80079e4:	4770      	bx	lr

080079e6 <HAL_TIM_IRQHandler>:
{
 80079e6:	b510      	push	{r4, lr}
 80079e8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079ea:	6803      	ldr	r3, [r0, #0]
 80079ec:	691a      	ldr	r2, [r3, #16]
 80079ee:	f012 0f02 	tst.w	r2, #2
 80079f2:	d011      	beq.n	8007a18 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	f012 0f02 	tst.w	r2, #2
 80079fa:	d00d      	beq.n	8007a18 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079fc:	f06f 0202 	mvn.w	r2, #2
 8007a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a02:	2301      	movs	r3, #1
 8007a04:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a06:	6803      	ldr	r3, [r0, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	f013 0f03 	tst.w	r3, #3
 8007a0e:	d079      	beq.n	8007b04 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8007a10:	f7ff ffe6 	bl	80079e0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a14:	2300      	movs	r3, #0
 8007a16:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	691a      	ldr	r2, [r3, #16]
 8007a1c:	f012 0f04 	tst.w	r2, #4
 8007a20:	d012      	beq.n	8007a48 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	f012 0f04 	tst.w	r2, #4
 8007a28:	d00e      	beq.n	8007a48 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a2a:	f06f 0204 	mvn.w	r2, #4
 8007a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a30:	2302      	movs	r3, #2
 8007a32:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007a3c:	d068      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7ff ffce 	bl	80079e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a44:	2300      	movs	r3, #0
 8007a46:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	f012 0f08 	tst.w	r2, #8
 8007a50:	d012      	beq.n	8007a78 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	f012 0f08 	tst.w	r2, #8
 8007a58:	d00e      	beq.n	8007a78 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a5a:	f06f 0208 	mvn.w	r2, #8
 8007a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a60:	2304      	movs	r3, #4
 8007a62:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	f013 0f03 	tst.w	r3, #3
 8007a6c:	d057      	beq.n	8007b1e <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f7ff ffb6 	bl	80079e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a74:	2300      	movs	r3, #0
 8007a76:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	f012 0f10 	tst.w	r2, #16
 8007a80:	d012      	beq.n	8007aa8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	f012 0f10 	tst.w	r2, #16
 8007a88:	d00e      	beq.n	8007aa8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a8a:	f06f 0210 	mvn.w	r2, #16
 8007a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a90:	2308      	movs	r3, #8
 8007a92:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007a9c:	d046      	beq.n	8007b2c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f7ff ff9e 	bl	80079e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	f012 0f01 	tst.w	r2, #1
 8007ab0:	d003      	beq.n	8007aba <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	f012 0f01 	tst.w	r2, #1
 8007ab8:	d13f      	bne.n	8007b3a <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	691a      	ldr	r2, [r3, #16]
 8007abe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007ac2:	d003      	beq.n	8007acc <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007aca:	d13d      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007ad4:	d003      	beq.n	8007ade <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007adc:	d13b      	bne.n	8007b56 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007ae6:	d003      	beq.n	8007af0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007aee:	d139      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	691a      	ldr	r2, [r3, #16]
 8007af4:	f012 0f20 	tst.w	r2, #32
 8007af8:	d003      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	f012 0f20 	tst.w	r2, #32
 8007b00:	d137      	bne.n	8007b72 <HAL_TIM_IRQHandler+0x18c>
}
 8007b02:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b04:	f7ff ff6b 	bl	80079de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f7ff ff6a 	bl	80079e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8007b0e:	e781      	b.n	8007a14 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b10:	4620      	mov	r0, r4
 8007b12:	f7ff ff64 	bl	80079de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b16:	4620      	mov	r0, r4
 8007b18:	f7ff ff63 	bl	80079e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8007b1c:	e792      	b.n	8007a44 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7ff ff5d 	bl	80079de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b24:	4620      	mov	r0, r4
 8007b26:	f7ff ff5c 	bl	80079e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8007b2a:	e7a3      	b.n	8007a74 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f7ff ff56 	bl	80079de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b32:	4620      	mov	r0, r4
 8007b34:	f7ff ff55 	bl	80079e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8007b38:	e7b4      	b.n	8007aa4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b3a:	f06f 0201 	mvn.w	r2, #1
 8007b3e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b40:	4620      	mov	r0, r4
 8007b42:	f7fb fb75 	bl	8003230 <HAL_TIM_PeriodElapsedCallback>
 8007b46:	e7b8      	b.n	8007aba <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b4c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f000 fa79 	bl	8008046 <HAL_TIMEx_BreakCallback>
 8007b54:	e7ba      	b.n	8007acc <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 fa73 	bl	8008048 <HAL_TIMEx_Break2Callback>
 8007b62:	e7bc      	b.n	8007ade <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b68:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f7ff ff3a 	bl	80079e4 <HAL_TIM_TriggerCallback>
 8007b70:	e7be      	b.n	8007af0 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b72:	f06f 0220 	mvn.w	r2, #32
 8007b76:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f000 fa63 	bl	8008044 <HAL_TIMEx_CommutCallback>
}
 8007b7e:	e7c0      	b.n	8007b02 <HAL_TIM_IRQHandler+0x11c>

08007b80 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007b80:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b82:	4a1a      	ldr	r2, [pc, #104]	; (8007bec <TIM_Base_SetConfig+0x6c>)
 8007b84:	4290      	cmp	r0, r2
 8007b86:	d002      	beq.n	8007b8e <TIM_Base_SetConfig+0xe>
 8007b88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007b8c:	d103      	bne.n	8007b96 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b92:	684a      	ldr	r2, [r1, #4]
 8007b94:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b96:	4a15      	ldr	r2, [pc, #84]	; (8007bec <TIM_Base_SetConfig+0x6c>)
 8007b98:	4290      	cmp	r0, r2
 8007b9a:	d00a      	beq.n	8007bb2 <TIM_Base_SetConfig+0x32>
 8007b9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007ba0:	d007      	beq.n	8007bb2 <TIM_Base_SetConfig+0x32>
 8007ba2:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8007ba6:	4290      	cmp	r0, r2
 8007ba8:	d003      	beq.n	8007bb2 <TIM_Base_SetConfig+0x32>
 8007baa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bae:	4290      	cmp	r0, r2
 8007bb0:	d103      	bne.n	8007bba <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bb6:	68ca      	ldr	r2, [r1, #12]
 8007bb8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bbe:	694a      	ldr	r2, [r1, #20]
 8007bc0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007bc2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bc4:	688b      	ldr	r3, [r1, #8]
 8007bc6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007bc8:	680b      	ldr	r3, [r1, #0]
 8007bca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bcc:	4b07      	ldr	r3, [pc, #28]	; (8007bec <TIM_Base_SetConfig+0x6c>)
 8007bce:	4298      	cmp	r0, r3
 8007bd0:	d007      	beq.n	8007be2 <TIM_Base_SetConfig+0x62>
 8007bd2:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007bd6:	4298      	cmp	r0, r3
 8007bd8:	d003      	beq.n	8007be2 <TIM_Base_SetConfig+0x62>
 8007bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bde:	4298      	cmp	r0, r3
 8007be0:	d101      	bne.n	8007be6 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8007be2:	690b      	ldr	r3, [r1, #16]
 8007be4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007be6:	2301      	movs	r3, #1
 8007be8:	6143      	str	r3, [r0, #20]
}
 8007bea:	4770      	bx	lr
 8007bec:	40012c00 	.word	0x40012c00

08007bf0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007bf0:	b1a8      	cbz	r0, 8007c1e <HAL_TIM_Base_Init+0x2e>
{
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007bfa:	b15b      	cbz	r3, 8007c14 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c02:	1d21      	adds	r1, r4, #4
 8007c04:	6820      	ldr	r0, [r4, #0]
 8007c06:	f7ff ffbb 	bl	8007b80 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007c10:	2000      	movs	r0, #0
}
 8007c12:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007c14:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007c18:	f7fb fed2 	bl	80039c0 <HAL_TIM_Base_MspInit>
 8007c1c:	e7ee      	b.n	8007bfc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007c1e:	2001      	movs	r0, #1
}
 8007c20:	4770      	bx	lr

08007c22 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007c22:	b1a8      	cbz	r0, 8007c50 <HAL_TIM_PWM_Init+0x2e>
{
 8007c24:	b510      	push	{r4, lr}
 8007c26:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007c28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007c2c:	b15b      	cbz	r3, 8007c46 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007c2e:	2302      	movs	r3, #2
 8007c30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c34:	1d21      	adds	r1, r4, #4
 8007c36:	6820      	ldr	r0, [r4, #0]
 8007c38:	f7ff ffa2 	bl	8007b80 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007c42:	2000      	movs	r0, #0
}
 8007c44:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007c46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007c4a:	f7ff fec7 	bl	80079dc <HAL_TIM_PWM_MspInit>
 8007c4e:	e7ee      	b.n	8007c2e <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007c50:	2001      	movs	r0, #1
}
 8007c52:	4770      	bx	lr

08007c54 <TIM_OC2_SetConfig>:
{
 8007c54:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c56:	6a03      	ldr	r3, [r0, #32]
 8007c58:	f023 0310 	bic.w	r3, r3, #16
 8007c5c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007c5e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007c60:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007c62:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c64:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007c68:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c6c:	680d      	ldr	r5, [r1, #0]
 8007c6e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007c72:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c76:	688d      	ldr	r5, [r1, #8]
 8007c78:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c7c:	4d12      	ldr	r5, [pc, #72]	; (8007cc8 <TIM_OC2_SetConfig+0x74>)
 8007c7e:	42a8      	cmp	r0, r5
 8007c80:	d019      	beq.n	8007cb6 <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c82:	4d11      	ldr	r5, [pc, #68]	; (8007cc8 <TIM_OC2_SetConfig+0x74>)
 8007c84:	42a8      	cmp	r0, r5
 8007c86:	d007      	beq.n	8007c98 <TIM_OC2_SetConfig+0x44>
 8007c88:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8007c8c:	42a8      	cmp	r0, r5
 8007c8e:	d003      	beq.n	8007c98 <TIM_OC2_SetConfig+0x44>
 8007c90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007c94:	42a8      	cmp	r0, r5
 8007c96:	d107      	bne.n	8007ca8 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c98:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c9c:	694d      	ldr	r5, [r1, #20]
 8007c9e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ca2:	698d      	ldr	r5, [r1, #24]
 8007ca4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8007ca8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007caa:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007cac:	684a      	ldr	r2, [r1, #4]
 8007cae:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007cb0:	6203      	str	r3, [r0, #32]
}
 8007cb2:	bc30      	pop	{r4, r5}
 8007cb4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cba:	68cd      	ldr	r5, [r1, #12]
 8007cbc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cc4:	e7dd      	b.n	8007c82 <TIM_OC2_SetConfig+0x2e>
 8007cc6:	bf00      	nop
 8007cc8:	40012c00 	.word	0x40012c00

08007ccc <HAL_TIM_PWM_ConfigChannel>:
{
 8007ccc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007cce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	f000 8092 	beq.w	8007dfc <HAL_TIM_PWM_ConfigChannel+0x130>
 8007cd8:	460d      	mov	r5, r1
 8007cda:	4604      	mov	r4, r0
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8007ce8:	2a14      	cmp	r2, #20
 8007cea:	d81e      	bhi.n	8007d2a <HAL_TIM_PWM_ConfigChannel+0x5e>
 8007cec:	e8df f002 	tbb	[pc, r2]
 8007cf0:	1d1d1d0b 	.word	0x1d1d1d0b
 8007cf4:	1d1d1d24 	.word	0x1d1d1d24
 8007cf8:	1d1d1d38 	.word	0x1d1d1d38
 8007cfc:	1d1d1d4b 	.word	0x1d1d1d4b
 8007d00:	1d1d1d5f 	.word	0x1d1d1d5f
 8007d04:	72          	.byte	0x72
 8007d05:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d06:	6800      	ldr	r0, [r0, #0]
 8007d08:	f7ff fcf0 	bl	80076ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d0c:	6822      	ldr	r2, [r4, #0]
 8007d0e:	6993      	ldr	r3, [r2, #24]
 8007d10:	f043 0308 	orr.w	r3, r3, #8
 8007d14:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d16:	6822      	ldr	r2, [r4, #0]
 8007d18:	6993      	ldr	r3, [r2, #24]
 8007d1a:	f023 0304 	bic.w	r3, r3, #4
 8007d1e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d20:	6822      	ldr	r2, [r4, #0]
 8007d22:	6993      	ldr	r3, [r2, #24]
 8007d24:	6929      	ldr	r1, [r5, #16]
 8007d26:	430b      	orrs	r3, r1
 8007d28:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007d30:	2000      	movs	r0, #0
 8007d32:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d38:	6800      	ldr	r0, [r0, #0]
 8007d3a:	f7ff ff8b 	bl	8007c54 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d3e:	6822      	ldr	r2, [r4, #0]
 8007d40:	6993      	ldr	r3, [r2, #24]
 8007d42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d46:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d48:	6822      	ldr	r2, [r4, #0]
 8007d4a:	6993      	ldr	r3, [r2, #24]
 8007d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d50:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d52:	6822      	ldr	r2, [r4, #0]
 8007d54:	6993      	ldr	r3, [r2, #24]
 8007d56:	6929      	ldr	r1, [r5, #16]
 8007d58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007d5c:	6193      	str	r3, [r2, #24]
      break;
 8007d5e:	e7e4      	b.n	8007d2a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d60:	6800      	ldr	r0, [r0, #0]
 8007d62:	f7ff fd01 	bl	8007768 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	69d3      	ldr	r3, [r2, #28]
 8007d6a:	f043 0308 	orr.w	r3, r3, #8
 8007d6e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d70:	6822      	ldr	r2, [r4, #0]
 8007d72:	69d3      	ldr	r3, [r2, #28]
 8007d74:	f023 0304 	bic.w	r3, r3, #4
 8007d78:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	69d3      	ldr	r3, [r2, #28]
 8007d7e:	6929      	ldr	r1, [r5, #16]
 8007d80:	430b      	orrs	r3, r1
 8007d82:	61d3      	str	r3, [r2, #28]
      break;
 8007d84:	e7d1      	b.n	8007d2a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d86:	6800      	ldr	r0, [r0, #0]
 8007d88:	f7ff fd28 	bl	80077dc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d8c:	6822      	ldr	r2, [r4, #0]
 8007d8e:	69d3      	ldr	r3, [r2, #28]
 8007d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d94:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d96:	6822      	ldr	r2, [r4, #0]
 8007d98:	69d3      	ldr	r3, [r2, #28]
 8007d9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d9e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007da0:	6822      	ldr	r2, [r4, #0]
 8007da2:	69d3      	ldr	r3, [r2, #28]
 8007da4:	6929      	ldr	r1, [r5, #16]
 8007da6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007daa:	61d3      	str	r3, [r2, #28]
      break;
 8007dac:	e7bd      	b.n	8007d2a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007dae:	6800      	ldr	r0, [r0, #0]
 8007db0:	f7ff fd42 	bl	8007838 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007db4:	6822      	ldr	r2, [r4, #0]
 8007db6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007db8:	f043 0308 	orr.w	r3, r3, #8
 8007dbc:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007dbe:	6822      	ldr	r2, [r4, #0]
 8007dc0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007dc2:	f023 0304 	bic.w	r3, r3, #4
 8007dc6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007dc8:	6822      	ldr	r2, [r4, #0]
 8007dca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007dcc:	6929      	ldr	r1, [r5, #16]
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8007dd2:	e7aa      	b.n	8007d2a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dd4:	6800      	ldr	r0, [r0, #0]
 8007dd6:	f7ff fd5b 	bl	8007890 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007dda:	6822      	ldr	r2, [r4, #0]
 8007ddc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007dde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007de2:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007de4:	6822      	ldr	r2, [r4, #0]
 8007de6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dec:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007df2:	6929      	ldr	r1, [r5, #16]
 8007df4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007df8:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8007dfa:	e796      	b.n	8007d2a <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8007dfc:	2002      	movs	r0, #2
 8007dfe:	e79a      	b.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x6a>

08007e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e00:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e02:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e04:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e08:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e10:	6083      	str	r3, [r0, #8]
}
 8007e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007e18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d064      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0xd2>
{
 8007e20:	b510      	push	{r4, lr}
 8007e22:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007e24:	2301      	movs	r3, #1
 8007e26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007e30:	6802      	ldr	r2, [r0, #0]
 8007e32:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e34:	4b2e      	ldr	r3, [pc, #184]	; (8007ef0 <HAL_TIM_ConfigClockSource+0xd8>)
 8007e36:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8007e38:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007e3a:	680b      	ldr	r3, [r1, #0]
 8007e3c:	2b40      	cmp	r3, #64	; 0x40
 8007e3e:	d04a      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0xbe>
 8007e40:	d913      	bls.n	8007e6a <HAL_TIM_ConfigClockSource+0x52>
 8007e42:	2b60      	cmp	r3, #96	; 0x60
 8007e44:	d03d      	beq.n	8007ec2 <HAL_TIM_ConfigClockSource+0xaa>
 8007e46:	d91e      	bls.n	8007e86 <HAL_TIM_ConfigClockSource+0x6e>
 8007e48:	2b70      	cmp	r3, #112	; 0x70
 8007e4a:	d028      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x86>
 8007e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e50:	d130      	bne.n	8007eb4 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8007e52:	68cb      	ldr	r3, [r1, #12]
 8007e54:	684a      	ldr	r2, [r1, #4]
 8007e56:	6889      	ldr	r1, [r1, #8]
 8007e58:	6820      	ldr	r0, [r4, #0]
 8007e5a:	f7ff ffd1 	bl	8007e00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	6893      	ldr	r3, [r2, #8]
 8007e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e66:	6093      	str	r3, [r2, #8]
      break;
 8007e68:	e024      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8007e6a:	2b10      	cmp	r3, #16
 8007e6c:	d006      	beq.n	8007e7c <HAL_TIM_ConfigClockSource+0x64>
 8007e6e:	d904      	bls.n	8007e7a <HAL_TIM_ConfigClockSource+0x62>
 8007e70:	2b20      	cmp	r3, #32
 8007e72:	d003      	beq.n	8007e7c <HAL_TIM_ConfigClockSource+0x64>
 8007e74:	2b30      	cmp	r3, #48	; 0x30
 8007e76:	d001      	beq.n	8007e7c <HAL_TIM_ConfigClockSource+0x64>
 8007e78:	e01c      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x9c>
 8007e7a:	b9db      	cbnz	r3, 8007eb4 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6820      	ldr	r0, [r4, #0]
 8007e80:	f7ff fd5b 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 8007e84:	e016      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8007e86:	2b50      	cmp	r3, #80	; 0x50
 8007e88:	d114      	bne.n	8007eb4 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e8a:	68ca      	ldr	r2, [r1, #12]
 8007e8c:	6849      	ldr	r1, [r1, #4]
 8007e8e:	6820      	ldr	r0, [r4, #0]
 8007e90:	f7ff fd2c 	bl	80078ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e94:	2150      	movs	r1, #80	; 0x50
 8007e96:	6820      	ldr	r0, [r4, #0]
 8007e98:	f7ff fd4f 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 8007e9c:	e00a      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8007e9e:	68cb      	ldr	r3, [r1, #12]
 8007ea0:	684a      	ldr	r2, [r1, #4]
 8007ea2:	6889      	ldr	r1, [r1, #8]
 8007ea4:	6820      	ldr	r0, [r4, #0]
 8007ea6:	f7ff ffab 	bl	8007e00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007eaa:	6822      	ldr	r2, [r4, #0]
 8007eac:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007eae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007eb2:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007eba:	2000      	movs	r0, #0
 8007ebc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007ec0:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ec2:	68ca      	ldr	r2, [r1, #12]
 8007ec4:	6849      	ldr	r1, [r1, #4]
 8007ec6:	6820      	ldr	r0, [r4, #0]
 8007ec8:	f7ff fd23 	bl	8007912 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ecc:	2160      	movs	r1, #96	; 0x60
 8007ece:	6820      	ldr	r0, [r4, #0]
 8007ed0:	f7ff fd33 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 8007ed4:	e7ee      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ed6:	68ca      	ldr	r2, [r1, #12]
 8007ed8:	6849      	ldr	r1, [r1, #4]
 8007eda:	6820      	ldr	r0, [r4, #0]
 8007edc:	f7ff fd06 	bl	80078ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ee0:	2140      	movs	r1, #64	; 0x40
 8007ee2:	6820      	ldr	r0, [r4, #0]
 8007ee4:	f7ff fd29 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 8007ee8:	e7e4      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8007eea:	2002      	movs	r0, #2
}
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	ffce0088 	.word	0xffce0088

08007ef4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ef4:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ef6:	f001 011f 	and.w	r1, r1, #31
 8007efa:	2301      	movs	r3, #1
 8007efc:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f00:	6a03      	ldr	r3, [r0, #32]
 8007f02:	ea23 0304 	bic.w	r3, r3, r4
 8007f06:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f08:	6a03      	ldr	r3, [r0, #32]
 8007f0a:	408a      	lsls	r2, r1
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	6203      	str	r3, [r0, #32]
}
 8007f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f14:	4770      	bx	lr
	...

08007f18 <HAL_TIM_PWM_Start>:
{
 8007f18:	b510      	push	{r4, lr}
 8007f1a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	6800      	ldr	r0, [r0, #0]
 8007f20:	f7ff ffe8 	bl	8007ef4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	4a0f      	ldr	r2, [pc, #60]	; (8007f64 <HAL_TIM_PWM_Start+0x4c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d007      	beq.n	8007f3c <HAL_TIM_PWM_Start+0x24>
 8007f2c:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d003      	beq.n	8007f3c <HAL_TIM_PWM_Start+0x24>
 8007f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d103      	bne.n	8007f44 <HAL_TIM_PWM_Start+0x2c>
    __HAL_TIM_MOE_ENABLE(htim);
 8007f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f42:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f44:	6822      	ldr	r2, [r4, #0]
 8007f46:	6891      	ldr	r1, [r2, #8]
 8007f48:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <HAL_TIM_PWM_Start+0x50>)
 8007f4a:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4c:	2b06      	cmp	r3, #6
 8007f4e:	d006      	beq.n	8007f5e <HAL_TIM_PWM_Start+0x46>
 8007f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f54:	d003      	beq.n	8007f5e <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_ENABLE(htim);
 8007f56:	6813      	ldr	r3, [r2, #0]
 8007f58:	f043 0301 	orr.w	r3, r3, #1
 8007f5c:	6013      	str	r3, [r2, #0]
}
 8007f5e:	2000      	movs	r0, #0
 8007f60:	bd10      	pop	{r4, pc}
 8007f62:	bf00      	nop
 8007f64:	40012c00 	.word	0x40012c00
 8007f68:	00010007 	.word	0x00010007

08007f6c <HAL_TIM_PWM_Stop>:
{
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f70:	2200      	movs	r2, #0
 8007f72:	6800      	ldr	r0, [r0, #0]
 8007f74:	f7ff ffbe 	bl	8007ef4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <HAL_TIM_PWM_Stop+0x6c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d01b      	beq.n	8007fb8 <HAL_TIM_PWM_Stop+0x4c>
 8007f80:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d017      	beq.n	8007fb8 <HAL_TIM_PWM_Stop+0x4c>
 8007f88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d013      	beq.n	8007fb8 <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	6a19      	ldr	r1, [r3, #32]
 8007f94:	f241 1211 	movw	r2, #4369	; 0x1111
 8007f98:	4211      	tst	r1, r2
 8007f9a:	d108      	bne.n	8007fae <HAL_TIM_PWM_Stop+0x42>
 8007f9c:	6a19      	ldr	r1, [r3, #32]
 8007f9e:	f240 4244 	movw	r2, #1092	; 0x444
 8007fa2:	4211      	tst	r1, r2
 8007fa4:	d103      	bne.n	8007fae <HAL_TIM_PWM_Stop+0x42>
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	f022 0201 	bic.w	r2, r2, #1
 8007fac:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8007fb8:	6a19      	ldr	r1, [r3, #32]
 8007fba:	f241 1211 	movw	r2, #4369	; 0x1111
 8007fbe:	4211      	tst	r1, r2
 8007fc0:	d1e6      	bne.n	8007f90 <HAL_TIM_PWM_Stop+0x24>
 8007fc2:	6a19      	ldr	r1, [r3, #32]
 8007fc4:	f240 4244 	movw	r2, #1092	; 0x444
 8007fc8:	4211      	tst	r1, r2
 8007fca:	d1e1      	bne.n	8007f90 <HAL_TIM_PWM_Stop+0x24>
 8007fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fd2:	645a      	str	r2, [r3, #68]	; 0x44
 8007fd4:	e7dc      	b.n	8007f90 <HAL_TIM_PWM_Stop+0x24>
 8007fd6:	bf00      	nop
 8007fd8:	40012c00 	.word	0x40012c00

08007fdc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fdc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d02b      	beq.n	800803c <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8007fe4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fec:	2302      	movs	r3, #2
 8007fee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ff2:	6802      	ldr	r2, [r0, #0]
 8007ff4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ff6:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ff8:	4c11      	ldr	r4, [pc, #68]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8007ffa:	42a2      	cmp	r2, r4
 8007ffc:	d019      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0x56>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008002:	680c      	ldr	r4, [r1, #0]
 8008004:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008006:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008008:	6803      	ldr	r3, [r0, #0]
 800800a:	4a0d      	ldr	r2, [pc, #52]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d002      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8008010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008014:	d104      	bne.n	8008020 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008016:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800801a:	688a      	ldr	r2, [r1, #8]
 800801c:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800801e:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008020:	2301      	movs	r3, #1
 8008022:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008026:	2300      	movs	r3, #0
 8008028:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800802c:	4618      	mov	r0, r3
}
 800802e:	bc30      	pop	{r4, r5}
 8008030:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008032:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008036:	684c      	ldr	r4, [r1, #4]
 8008038:	4323      	orrs	r3, r4
 800803a:	e7e0      	b.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 800803c:	2002      	movs	r0, #2
}
 800803e:	4770      	bx	lr
 8008040:	40012c00 	.word	0x40012c00

08008044 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008044:	4770      	bx	lr

08008046 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008046:	4770      	bx	lr

08008048 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008048:	4770      	bx	lr

0800804a <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800804a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800804e:	2b21      	cmp	r3, #33	; 0x21
 8008050:	d000      	beq.n	8008054 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008052:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8008054:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8008058:	b29b      	uxth	r3, r3
 800805a:	b16b      	cbz	r3, 8008078 <UART_TxISR_8BIT+0x2e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800805c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800805e:	781a      	ldrb	r2, [r3, #0]
 8008060:	6803      	ldr	r3, [r0, #0]
 8008062:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008064:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008066:	3301      	adds	r3, #1
 8008068:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800806a:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800806e:	3b01      	subs	r3, #1
 8008070:	b29b      	uxth	r3, r3
 8008072:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8008076:	e7ec      	b.n	8008052 <UART_TxISR_8BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008078:	6802      	ldr	r2, [r0, #0]
 800807a:	6813      	ldr	r3, [r2, #0]
 800807c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008080:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008082:	6802      	ldr	r2, [r0, #0]
 8008084:	6813      	ldr	r3, [r2, #0]
 8008086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	4770      	bx	lr

0800808e <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800808e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8008092:	2b21      	cmp	r3, #33	; 0x21
 8008094:	d000      	beq.n	8008098 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008096:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8008098:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800809c:	b29b      	uxth	r3, r3
 800809e:	b17b      	cbz	r3, 80080c0 <UART_TxISR_16BIT+0x32>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	6802      	ldr	r2, [r0, #0]
 80080a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080aa:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80080ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80080ae:	3302      	adds	r3, #2
 80080b0:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80080b2:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 80080b6:	3b01      	subs	r3, #1
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 80080be:	e7ea      	b.n	8008096 <UART_TxISR_16BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80080c0:	6802      	ldr	r2, [r0, #0]
 80080c2:	6813      	ldr	r3, [r2, #0]
 80080c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080c8:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080ca:	6802      	ldr	r2, [r0, #0]
 80080cc:	6813      	ldr	r3, [r2, #0]
 80080ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	4770      	bx	lr

080080d6 <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080d6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80080da:	2b21      	cmp	r3, #33	; 0x21
 80080dc:	d000      	beq.n	80080e0 <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 80080de:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80080e0:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80080e4:	e00c      	b.n	8008100 <UART_TxISR_8BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80080e6:	6802      	ldr	r2, [r0, #0]
 80080e8:	6893      	ldr	r3, [r2, #8]
 80080ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80080ee:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080f0:	6802      	ldr	r2, [r0, #0]
 80080f2:	6813      	ldr	r3, [r2, #0]
 80080f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f8:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 80080fa:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0ec      	beq.n	80080de <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8008104:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8008108:	b292      	uxth	r2, r2
 800810a:	2a00      	cmp	r2, #0
 800810c:	d0eb      	beq.n	80080e6 <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800810e:	6802      	ldr	r2, [r0, #0]
 8008110:	69d1      	ldr	r1, [r2, #28]
 8008112:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008116:	d0f1      	beq.n	80080fc <UART_TxISR_8BIT_FIFOEN+0x26>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008118:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800811a:	7809      	ldrb	r1, [r1, #0]
 800811c:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 800811e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008120:	3201      	adds	r2, #1
 8008122:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8008124:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8008128:	3a01      	subs	r2, #1
 800812a:	b292      	uxth	r2, r2
 800812c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8008130:	e7e4      	b.n	80080fc <UART_TxISR_8BIT_FIFOEN+0x26>

08008132 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008132:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8008136:	2b21      	cmp	r3, #33	; 0x21
 8008138:	d000      	beq.n	800813c <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 800813a:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800813c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8008140:	e00c      	b.n	800815c <UART_TxISR_16BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008142:	6802      	ldr	r2, [r0, #0]
 8008144:	6893      	ldr	r3, [r2, #8]
 8008146:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800814a:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800814c:	6802      	ldr	r2, [r0, #0]
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008154:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 8008156:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008158:	3b01      	subs	r3, #1
 800815a:	b29b      	uxth	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d0ec      	beq.n	800813a <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8008160:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8008164:	b292      	uxth	r2, r2
 8008166:	2a00      	cmp	r2, #0
 8008168:	d0eb      	beq.n	8008142 <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800816a:	6802      	ldr	r2, [r0, #0]
 800816c:	69d1      	ldr	r1, [r2, #28]
 800816e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008172:	d0f1      	beq.n	8008158 <UART_TxISR_16BIT_FIFOEN+0x26>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8008174:	6d01      	ldr	r1, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008176:	8809      	ldrh	r1, [r1, #0]
 8008178:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800817c:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800817e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008180:	3202      	adds	r2, #2
 8008182:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8008184:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8008188:	3a01      	subs	r2, #1
 800818a:	b292      	uxth	r2, r2
 800818c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8008190:	e7e2      	b.n	8008158 <UART_TxISR_16BIT_FIFOEN+0x26>
	...

08008194 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8008194:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8008198:	2b20      	cmp	r3, #32
 800819a:	d146      	bne.n	800822a <HAL_UART_Transmit_IT+0x96>
    if ((pData == NULL) || (Size == 0U))
 800819c:	2900      	cmp	r1, #0
 800819e:	d046      	beq.n	800822e <HAL_UART_Transmit_IT+0x9a>
 80081a0:	2a00      	cmp	r2, #0
 80081a2:	d046      	beq.n	8008232 <HAL_UART_Transmit_IT+0x9e>
    __HAL_LOCK(huart);
 80081a4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d044      	beq.n	8008236 <HAL_UART_Transmit_IT+0xa2>
 80081ac:	2301      	movs	r3, #1
 80081ae:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 80081b2:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80081b4:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80081b8:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->TxISR       = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	6703      	str	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081c4:	2321      	movs	r3, #33	; 0x21
 80081c6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80081ca:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80081cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d0:	d00f      	beq.n	80081f2 <HAL_UART_Transmit_IT+0x5e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081d2:	6883      	ldr	r3, [r0, #8]
 80081d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d8:	d021      	beq.n	800821e <HAL_UART_Transmit_IT+0x8a>
        huart->TxISR = UART_TxISR_8BIT;
 80081da:	4b18      	ldr	r3, [pc, #96]	; (800823c <HAL_UART_Transmit_IT+0xa8>)
 80081dc:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 80081de:	2300      	movs	r3, #0
 80081e0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80081e4:	6801      	ldr	r1, [r0, #0]
 80081e6:	680a      	ldr	r2, [r1, #0]
 80081e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081ec:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80081ee:	4618      	mov	r0, r3
 80081f0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081f2:	6883      	ldr	r3, [r0, #8]
 80081f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f8:	d00b      	beq.n	8008212 <HAL_UART_Transmit_IT+0x7e>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80081fa:	4b11      	ldr	r3, [pc, #68]	; (8008240 <HAL_UART_Transmit_IT+0xac>)
 80081fc:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 80081fe:	2300      	movs	r3, #0
 8008200:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008204:	6801      	ldr	r1, [r0, #0]
 8008206:	688a      	ldr	r2, [r1, #8]
 8008208:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800820c:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 800820e:	4618      	mov	r0, r3
 8008210:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008212:	6903      	ldr	r3, [r0, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1f0      	bne.n	80081fa <HAL_UART_Transmit_IT+0x66>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008218:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <HAL_UART_Transmit_IT+0xb0>)
 800821a:	6703      	str	r3, [r0, #112]	; 0x70
 800821c:	e7ef      	b.n	80081fe <HAL_UART_Transmit_IT+0x6a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800821e:	6903      	ldr	r3, [r0, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1da      	bne.n	80081da <HAL_UART_Transmit_IT+0x46>
        huart->TxISR = UART_TxISR_16BIT;
 8008224:	4b08      	ldr	r3, [pc, #32]	; (8008248 <HAL_UART_Transmit_IT+0xb4>)
 8008226:	6703      	str	r3, [r0, #112]	; 0x70
 8008228:	e7d9      	b.n	80081de <HAL_UART_Transmit_IT+0x4a>
    return HAL_BUSY;
 800822a:	2002      	movs	r0, #2
 800822c:	4770      	bx	lr
      return HAL_ERROR;
 800822e:	2001      	movs	r0, #1
 8008230:	4770      	bx	lr
 8008232:	2001      	movs	r0, #1
 8008234:	4770      	bx	lr
    __HAL_LOCK(huart);
 8008236:	2002      	movs	r0, #2
}
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	0800804b 	.word	0x0800804b
 8008240:	080080d7 	.word	0x080080d7
 8008244:	08008133 	.word	0x08008133
 8008248:	0800808f 	.word	0x0800808f

0800824c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800824c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008250:	2b20      	cmp	r3, #32
 8008252:	d17f      	bne.n	8008354 <HAL_UART_Receive_IT+0x108>
    if ((pData == NULL) || (Size == 0U))
 8008254:	2900      	cmp	r1, #0
 8008256:	d07f      	beq.n	8008358 <HAL_UART_Receive_IT+0x10c>
 8008258:	2a00      	cmp	r2, #0
 800825a:	d07f      	beq.n	800835c <HAL_UART_Receive_IT+0x110>
    __HAL_LOCK(huart);
 800825c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8008260:	2b01      	cmp	r3, #1
 8008262:	d07d      	beq.n	8008360 <HAL_UART_Receive_IT+0x114>
 8008264:	2301      	movs	r3, #1
 8008266:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->pRxBuffPtr  = pData;
 800826a:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize  = Size;
 800826c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008270:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8008274:	2300      	movs	r3, #0
 8008276:	66c3      	str	r3, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 8008278:	6883      	ldr	r3, [r0, #8]
 800827a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800827e:	d006      	beq.n	800828e <HAL_UART_Receive_IT+0x42>
 8008280:	b9a3      	cbnz	r3, 80082ac <HAL_UART_Receive_IT+0x60>
 8008282:	6903      	ldr	r3, [r0, #16]
 8008284:	b973      	cbnz	r3, 80082a4 <HAL_UART_Receive_IT+0x58>
 8008286:	23ff      	movs	r3, #255	; 0xff
 8008288:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800828c:	e014      	b.n	80082b8 <HAL_UART_Receive_IT+0x6c>
 800828e:	6903      	ldr	r3, [r0, #16]
 8008290:	b923      	cbnz	r3, 800829c <HAL_UART_Receive_IT+0x50>
 8008292:	f240 13ff 	movw	r3, #511	; 0x1ff
 8008296:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800829a:	e00d      	b.n	80082b8 <HAL_UART_Receive_IT+0x6c>
 800829c:	23ff      	movs	r3, #255	; 0xff
 800829e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80082a2:	e009      	b.n	80082b8 <HAL_UART_Receive_IT+0x6c>
 80082a4:	237f      	movs	r3, #127	; 0x7f
 80082a6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80082aa:	e005      	b.n	80082b8 <HAL_UART_Receive_IT+0x6c>
 80082ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082b0:	d021      	beq.n	80082f6 <HAL_UART_Receive_IT+0xaa>
 80082b2:	2300      	movs	r3, #0
 80082b4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b8:	2300      	movs	r3, #0
 80082ba:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082be:	2322      	movs	r3, #34	; 0x22
 80082c0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c4:	6801      	ldr	r1, [r0, #0]
 80082c6:	688b      	ldr	r3, [r1, #8]
 80082c8:	f043 0301 	orr.w	r3, r3, #1
 80082cc:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082ce:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80082d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d4:	d019      	beq.n	800830a <HAL_UART_Receive_IT+0xbe>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d6:	6883      	ldr	r3, [r0, #8]
 80082d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082dc:	d034      	beq.n	8008348 <HAL_UART_Receive_IT+0xfc>
        huart->RxISR = UART_RxISR_8BIT;
 80082de:	4b21      	ldr	r3, [pc, #132]	; (8008364 <HAL_UART_Receive_IT+0x118>)
 80082e0:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 80082e2:	2300      	movs	r3, #0
 80082e4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80082e8:	6801      	ldr	r1, [r0, #0]
 80082ea:	680a      	ldr	r2, [r1, #0]
 80082ec:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80082f0:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80082f2:	4618      	mov	r0, r3
 80082f4:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80082f6:	6903      	ldr	r3, [r0, #16]
 80082f8:	b91b      	cbnz	r3, 8008302 <HAL_UART_Receive_IT+0xb6>
 80082fa:	237f      	movs	r3, #127	; 0x7f
 80082fc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008300:	e7da      	b.n	80082b8 <HAL_UART_Receive_IT+0x6c>
 8008302:	233f      	movs	r3, #63	; 0x3f
 8008304:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008308:	e7d6      	b.n	80082b8 <HAL_UART_Receive_IT+0x6c>
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800830a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800830e:	4293      	cmp	r3, r2
 8008310:	d8e1      	bhi.n	80082d6 <HAL_UART_Receive_IT+0x8a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008312:	6883      	ldr	r3, [r0, #8]
 8008314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008318:	d010      	beq.n	800833c <HAL_UART_Receive_IT+0xf0>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800831a:	4b13      	ldr	r3, [pc, #76]	; (8008368 <HAL_UART_Receive_IT+0x11c>)
 800831c:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800831e:	2300      	movs	r3, #0
 8008320:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008324:	6801      	ldr	r1, [r0, #0]
 8008326:	680a      	ldr	r2, [r1, #0]
 8008328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800832c:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800832e:	6801      	ldr	r1, [r0, #0]
 8008330:	688a      	ldr	r2, [r1, #8]
 8008332:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008336:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 8008338:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800833a:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800833c:	6903      	ldr	r3, [r0, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1eb      	bne.n	800831a <HAL_UART_Receive_IT+0xce>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008342:	4b0a      	ldr	r3, [pc, #40]	; (800836c <HAL_UART_Receive_IT+0x120>)
 8008344:	66c3      	str	r3, [r0, #108]	; 0x6c
 8008346:	e7ea      	b.n	800831e <HAL_UART_Receive_IT+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008348:	6903      	ldr	r3, [r0, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1c7      	bne.n	80082de <HAL_UART_Receive_IT+0x92>
        huart->RxISR = UART_RxISR_16BIT;
 800834e:	4b08      	ldr	r3, [pc, #32]	; (8008370 <HAL_UART_Receive_IT+0x124>)
 8008350:	66c3      	str	r3, [r0, #108]	; 0x6c
 8008352:	e7c6      	b.n	80082e2 <HAL_UART_Receive_IT+0x96>
    return HAL_BUSY;
 8008354:	2002      	movs	r0, #2
 8008356:	4770      	bx	lr
      return HAL_ERROR;
 8008358:	2001      	movs	r0, #1
 800835a:	4770      	bx	lr
 800835c:	2001      	movs	r0, #1
 800835e:	4770      	bx	lr
    __HAL_LOCK(huart);
 8008360:	2002      	movs	r0, #2
}
 8008362:	4770      	bx	lr
 8008364:	08008375 	.word	0x08008375
 8008368:	08008441 	.word	0x08008441
 800836c:	080084ed 	.word	0x080084ed
 8008370:	080083db 	.word	0x080083db

08008374 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008374:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8008376:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800837a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800837e:	2a22      	cmp	r2, #34	; 0x22
 8008380:	d005      	beq.n	800838e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008382:	6802      	ldr	r2, [r0, #0]
 8008384:	6993      	ldr	r3, [r2, #24]
 8008386:	f043 0308 	orr.w	r3, r3, #8
 800838a:	6193      	str	r3, [r2, #24]
  }
}
 800838c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800838e:	6802      	ldr	r2, [r0, #0]
 8008390:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008392:	b2db      	uxtb	r3, r3
 8008394:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008396:	400b      	ands	r3, r1
 8008398:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800839a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800839c:	3301      	adds	r3, #1
 800839e:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80083a0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80083ac:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1ea      	bne.n	800838c <UART_RxISR_8BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083b6:	6802      	ldr	r2, [r0, #0]
 80083b8:	6813      	ldr	r3, [r2, #0]
 80083ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083be:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c0:	6802      	ldr	r2, [r0, #0]
 80083c2:	6893      	ldr	r3, [r2, #8]
 80083c4:	f023 0301 	bic.w	r3, r3, #1
 80083c8:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80083ca:	2320      	movs	r3, #32
 80083cc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      huart->RxISR = NULL;
 80083d0:	2300      	movs	r3, #0
 80083d2:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 80083d4:	f7fa faf0 	bl	80029b8 <HAL_UART_RxCpltCallback>
 80083d8:	e7d8      	b.n	800838c <UART_RxISR_8BIT+0x18>

080083da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083da:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80083dc:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083e0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80083e4:	2b22      	cmp	r3, #34	; 0x22
 80083e6:	d005      	beq.n	80083f4 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083e8:	6802      	ldr	r2, [r0, #0]
 80083ea:	6993      	ldr	r3, [r2, #24]
 80083ec:	f043 0308 	orr.w	r3, r3, #8
 80083f0:	6193      	str	r3, [r2, #24]
  }
}
 80083f2:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083f4:	6803      	ldr	r3, [r0, #0]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083f8:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80083fa:	4013      	ands	r3, r2
 80083fc:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80083fe:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008400:	3302      	adds	r3, #2
 8008402:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008404:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008408:	3b01      	subs	r3, #1
 800840a:	b29b      	uxth	r3, r3
 800840c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8008410:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1eb      	bne.n	80083f2 <UART_RxISR_16BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800841a:	6802      	ldr	r2, [r0, #0]
 800841c:	6813      	ldr	r3, [r2, #0]
 800841e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008422:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008424:	6802      	ldr	r2, [r0, #0]
 8008426:	6893      	ldr	r3, [r2, #8]
 8008428:	f023 0301 	bic.w	r3, r3, #1
 800842c:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800842e:	2320      	movs	r3, #32
 8008430:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      huart->RxISR = NULL;
 8008434:	2300      	movs	r3, #0
 8008436:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 8008438:	f7fa fabe 	bl	80029b8 <HAL_UART_RxCpltCallback>
 800843c:	e7d9      	b.n	80083f2 <UART_RxISR_16BIT+0x18>
	...

08008440 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008440:	b570      	push	{r4, r5, r6, lr}
  uint16_t  uhMask = huart->Mask;
 8008442:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008446:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800844a:	2b22      	cmp	r3, #34	; 0x22
 800844c:	d005      	beq.n	800845a <UART_RxISR_8BIT_FIFOEN+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800844e:	6802      	ldr	r2, [r0, #0]
 8008450:	6993      	ldr	r3, [r2, #24]
 8008452:	f043 0308 	orr.w	r3, r3, #8
 8008456:	6193      	str	r3, [r2, #24]
  }
}
 8008458:	bd70      	pop	{r4, r5, r6, pc}
 800845a:	4604      	mov	r4, r0
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800845c:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
 8008460:	e001      	b.n	8008466 <UART_RxISR_8BIT_FIFOEN+0x26>
 8008462:	3e01      	subs	r6, #1
 8008464:	b2b6      	uxth	r6, r6
 8008466:	b346      	cbz	r6, 80084ba <UART_RxISR_8BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800846c:	b2eb      	uxtb	r3, r5
 800846e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008470:	400b      	ands	r3, r1
 8008472:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8008474:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008476:	3301      	adds	r3, #1
 8008478:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800847a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800847e:	3b01      	subs	r3, #1
 8008480:	b29b      	uxth	r3, r3
 8008482:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8008486:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e8      	bne.n	8008462 <UART_RxISR_8BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008490:	6822      	ldr	r2, [r4, #0]
 8008492:	6813      	ldr	r3, [r2, #0]
 8008494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008498:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800849a:	6822      	ldr	r2, [r4, #0]
 800849c:	6893      	ldr	r3, [r2, #8]
 800849e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084a2:	f023 0301 	bic.w	r3, r3, #1
 80084a6:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80084a8:	2320      	movs	r3, #32
 80084aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80084b2:	4620      	mov	r0, r4
 80084b4:	f7fa fa80 	bl	80029b8 <HAL_UART_RxCpltCallback>
 80084b8:	e7d3      	b.n	8008462 <UART_RxISR_8BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 80084ba:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80084be:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0c9      	beq.n	8008458 <UART_RxISR_8BIT_FIFOEN+0x18>
 80084c4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d9c5      	bls.n	8008458 <UART_RxISR_8BIT_FIFOEN+0x18>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084cc:	6822      	ldr	r2, [r4, #0]
 80084ce:	6893      	ldr	r3, [r2, #8]
 80084d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084d4:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 80084d6:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <UART_RxISR_8BIT_FIFOEN+0xa8>)
 80084d8:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	6813      	ldr	r3, [r2, #0]
 80084de:	f043 0320 	orr.w	r3, r3, #32
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	e7b8      	b.n	8008458 <UART_RxISR_8BIT_FIFOEN+0x18>
 80084e6:	bf00      	nop
 80084e8:	08008375 	.word	0x08008375

080084ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084ec:	b570      	push	{r4, r5, r6, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80084ee:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084f2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80084f6:	2b22      	cmp	r3, #34	; 0x22
 80084f8:	d005      	beq.n	8008506 <UART_RxISR_16BIT_FIFOEN+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084fa:	6802      	ldr	r2, [r0, #0]
 80084fc:	6993      	ldr	r3, [r2, #24]
 80084fe:	f043 0308 	orr.w	r3, r3, #8
 8008502:	6193      	str	r3, [r2, #24]
  }
}
 8008504:	bd70      	pop	{r4, r5, r6, pc}
 8008506:	4604      	mov	r4, r0
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008508:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 800850c:	e001      	b.n	8008512 <UART_RxISR_16BIT_FIFOEN+0x26>
 800850e:	3d01      	subs	r5, #1
 8008510:	b2ad      	uxth	r5, r5
 8008512:	b33d      	cbz	r5, 8008564 <UART_RxISR_16BIT_FIFOEN+0x78>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008518:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800851a:	4033      	ands	r3, r6
 800851c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800851e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008520:	3302      	adds	r3, #2
 8008522:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008524:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008528:	3b01      	subs	r3, #1
 800852a:	b29b      	uxth	r3, r3
 800852c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8008530:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008534:	b29b      	uxth	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e9      	bne.n	800850e <UART_RxISR_16BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800853a:	6822      	ldr	r2, [r4, #0]
 800853c:	6813      	ldr	r3, [r2, #0]
 800853e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008542:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008544:	6822      	ldr	r2, [r4, #0]
 8008546:	6893      	ldr	r3, [r2, #8]
 8008548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800854c:	f023 0301 	bic.w	r3, r3, #1
 8008550:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008552:	2320      	movs	r3, #32
 8008554:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8008558:	2300      	movs	r3, #0
 800855a:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800855c:	4620      	mov	r0, r4
 800855e:	f7fa fa2b 	bl	80029b8 <HAL_UART_RxCpltCallback>
 8008562:	e7d4      	b.n	800850e <UART_RxISR_16BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 8008564:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008568:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0ca      	beq.n	8008504 <UART_RxISR_16BIT_FIFOEN+0x18>
 800856e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008572:	429a      	cmp	r2, r3
 8008574:	d9c6      	bls.n	8008504 <UART_RxISR_16BIT_FIFOEN+0x18>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008576:	6822      	ldr	r2, [r4, #0]
 8008578:	6893      	ldr	r3, [r2, #8]
 800857a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800857e:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 8008580:	4b03      	ldr	r3, [pc, #12]	; (8008590 <UART_RxISR_16BIT_FIFOEN+0xa4>)
 8008582:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008584:	6822      	ldr	r2, [r4, #0]
 8008586:	6813      	ldr	r3, [r2, #0]
 8008588:	f043 0320 	orr.w	r3, r3, #32
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	e7b9      	b.n	8008504 <UART_RxISR_16BIT_FIFOEN+0x18>
 8008590:	080083db 	.word	0x080083db
 8008594:	00000000 	.word	0x00000000

08008598 <UART_SetConfig>:
{
 8008598:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800859c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800859e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085a0:	6883      	ldr	r3, [r0, #8]
 80085a2:	6902      	ldr	r2, [r0, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	6942      	ldr	r2, [r0, #20]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	69c2      	ldr	r2, [r0, #28]
 80085ac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 80085ae:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80085b0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085b2:	6808      	ldr	r0, [r1, #0]
 80085b4:	4aa1      	ldr	r2, [pc, #644]	; (800883c <UART_SetConfig+0x2a4>)
 80085b6:	4002      	ands	r2, r0
 80085b8:	431a      	orrs	r2, r3
 80085ba:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085bc:	6822      	ldr	r2, [r4, #0]
 80085be:	6853      	ldr	r3, [r2, #4]
 80085c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80085c4:	68e1      	ldr	r1, [r4, #12]
 80085c6:	430b      	orrs	r3, r1
 80085c8:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085ca:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085cc:	6822      	ldr	r2, [r4, #0]
 80085ce:	4b9c      	ldr	r3, [pc, #624]	; (8008840 <UART_SetConfig+0x2a8>)
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d001      	beq.n	80085d8 <UART_SetConfig+0x40>
    tmpreg |= huart->Init.OneBitSampling;
 80085d4:	6a23      	ldr	r3, [r4, #32]
 80085d6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085d8:	6893      	ldr	r3, [r2, #8]
 80085da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80085de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80085e2:	430b      	orrs	r3, r1
 80085e4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085e6:	6822      	ldr	r2, [r4, #0]
 80085e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80085ea:	f023 030f 	bic.w	r3, r3, #15
 80085ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085f0:	430b      	orrs	r3, r1
 80085f2:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	4a93      	ldr	r2, [pc, #588]	; (8008844 <UART_SetConfig+0x2ac>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d019      	beq.n	8008630 <UART_SetConfig+0x98>
 80085fc:	4a90      	ldr	r2, [pc, #576]	; (8008840 <UART_SetConfig+0x2a8>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d02a      	beq.n	8008658 <UART_SetConfig+0xc0>
 8008602:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8008604:	4a8e      	ldr	r2, [pc, #568]	; (8008840 <UART_SetConfig+0x2a8>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d043      	beq.n	8008692 <UART_SetConfig+0xfa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800860a:	69e3      	ldr	r3, [r4, #28]
 800860c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008610:	f000 8307 	beq.w	8008c22 <UART_SetConfig+0x68a>
    switch (clocksource)
 8008614:	3d01      	subs	r5, #1
 8008616:	2d07      	cmp	r5, #7
 8008618:	f200 854f 	bhi.w	80090ba <UART_SetConfig+0xb22>
 800861c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8008620:	046e041e 	.word	0x046e041e
 8008624:	04ca054d 	.word	0x04ca054d
 8008628:	054d054d 	.word	0x054d054d
 800862c:	0508054d 	.word	0x0508054d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008634:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008638:	f002 0203 	and.w	r2, r2, #3
  UART_GETCLOCKSOURCE(huart, clocksource);
 800863c:	2a03      	cmp	r2, #3
 800863e:	d809      	bhi.n	8008654 <UART_SetConfig+0xbc>
 8008640:	e8df f002 	tbb	[pc, r2]
 8008644:	06230402 	.word	0x06230402
 8008648:	2501      	movs	r5, #1
 800864a:	e7db      	b.n	8008604 <UART_SetConfig+0x6c>
 800864c:	2504      	movs	r5, #4
 800864e:	e7d9      	b.n	8008604 <UART_SetConfig+0x6c>
 8008650:	2508      	movs	r5, #8
 8008652:	e7d7      	b.n	8008604 <UART_SetConfig+0x6c>
 8008654:	2510      	movs	r5, #16
 8008656:	e7d5      	b.n	8008604 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800865c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008660:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8008664:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008668:	d00b      	beq.n	8008682 <UART_SetConfig+0xea>
 800866a:	d907      	bls.n	800867c <UART_SetConfig+0xe4>
 800866c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008670:	d00d      	beq.n	800868e <UART_SetConfig+0xf6>
 8008672:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8008676:	d106      	bne.n	8008686 <UART_SetConfig+0xee>
 8008678:	2508      	movs	r5, #8
 800867a:	e7c3      	b.n	8008604 <UART_SetConfig+0x6c>
 800867c:	b91a      	cbnz	r2, 8008686 <UART_SetConfig+0xee>
 800867e:	2500      	movs	r5, #0
 8008680:	e7c0      	b.n	8008604 <UART_SetConfig+0x6c>
 8008682:	2504      	movs	r5, #4
 8008684:	e7be      	b.n	8008604 <UART_SetConfig+0x6c>
 8008686:	2510      	movs	r5, #16
 8008688:	e7bc      	b.n	8008604 <UART_SetConfig+0x6c>
 800868a:	2502      	movs	r5, #2
 800868c:	e7ba      	b.n	8008604 <UART_SetConfig+0x6c>
 800868e:	2502      	movs	r5, #2
 8008690:	e7b8      	b.n	8008604 <UART_SetConfig+0x6c>
    switch (clocksource)
 8008692:	2d08      	cmp	r5, #8
 8008694:	f200 8514 	bhi.w	80090c0 <UART_SetConfig+0xb28>
 8008698:	e8df f015 	tbh	[pc, r5, lsl #1]
 800869c:	05120009 	.word	0x05120009
 80086a0:	0512005a 	.word	0x0512005a
 80086a4:	05120078 	.word	0x05120078
 80086a8:	05120512 	.word	0x05120512
 80086ac:	00af      	.short	0x00af
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80086ae:	f7fe fccf 	bl	8007050 <HAL_RCC_GetPCLK1Freq>
 80086b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086b4:	b1d3      	cbz	r3, 80086ec <UART_SetConfig+0x154>
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d036      	beq.n	8008728 <UART_SetConfig+0x190>
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d036      	beq.n	800872c <UART_SetConfig+0x194>
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d036      	beq.n	8008730 <UART_SetConfig+0x198>
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d036      	beq.n	8008734 <UART_SetConfig+0x19c>
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	d036      	beq.n	8008738 <UART_SetConfig+0x1a0>
 80086ca:	2b06      	cmp	r3, #6
 80086cc:	d036      	beq.n	800873c <UART_SetConfig+0x1a4>
 80086ce:	2b07      	cmp	r3, #7
 80086d0:	d036      	beq.n	8008740 <UART_SetConfig+0x1a8>
 80086d2:	2b08      	cmp	r3, #8
 80086d4:	d036      	beq.n	8008744 <UART_SetConfig+0x1ac>
 80086d6:	2b09      	cmp	r3, #9
 80086d8:	d036      	beq.n	8008748 <UART_SetConfig+0x1b0>
 80086da:	2b0a      	cmp	r3, #10
 80086dc:	d036      	beq.n	800874c <UART_SetConfig+0x1b4>
 80086de:	2b0b      	cmp	r3, #11
 80086e0:	d001      	beq.n	80086e6 <UART_SetConfig+0x14e>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e003      	b.n	80086ee <UART_SetConfig+0x156>
 80086e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086ea:	e000      	b.n	80086ee <UART_SetConfig+0x156>
 80086ec:	2301      	movs	r3, #1
 80086ee:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f000 84e6 	beq.w	80090c4 <UART_SetConfig+0xb2c>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086f8:	6862      	ldr	r2, [r4, #4]
 80086fa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80086fe:	4283      	cmp	r3, r0
 8008700:	f200 84e2 	bhi.w	80090c8 <UART_SetConfig+0xb30>
 8008704:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8008708:	f200 84e0 	bhi.w	80090cc <UART_SetConfig+0xb34>
        switch (clocksource)
 800870c:	2d08      	cmp	r5, #8
 800870e:	f200 8285 	bhi.w	8008c1c <UART_SetConfig+0x684>
 8008712:	e8df f015 	tbh	[pc, r5, lsl #1]
 8008716:	00d0      	.short	0x00d0
 8008718:	012f0283 	.word	0x012f0283
 800871c:	01930283 	.word	0x01930283
 8008720:	02830283 	.word	0x02830283
 8008724:	021f0283 	.word	0x021f0283
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008728:	2302      	movs	r3, #2
 800872a:	e7e0      	b.n	80086ee <UART_SetConfig+0x156>
 800872c:	2304      	movs	r3, #4
 800872e:	e7de      	b.n	80086ee <UART_SetConfig+0x156>
 8008730:	2306      	movs	r3, #6
 8008732:	e7dc      	b.n	80086ee <UART_SetConfig+0x156>
 8008734:	2308      	movs	r3, #8
 8008736:	e7da      	b.n	80086ee <UART_SetConfig+0x156>
 8008738:	230a      	movs	r3, #10
 800873a:	e7d8      	b.n	80086ee <UART_SetConfig+0x156>
 800873c:	230c      	movs	r3, #12
 800873e:	e7d6      	b.n	80086ee <UART_SetConfig+0x156>
 8008740:	2310      	movs	r3, #16
 8008742:	e7d4      	b.n	80086ee <UART_SetConfig+0x156>
 8008744:	2320      	movs	r3, #32
 8008746:	e7d2      	b.n	80086ee <UART_SetConfig+0x156>
 8008748:	2340      	movs	r3, #64	; 0x40
 800874a:	e7d0      	b.n	80086ee <UART_SetConfig+0x156>
 800874c:	2380      	movs	r3, #128	; 0x80
 800874e:	e7ce      	b.n	80086ee <UART_SetConfig+0x156>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008752:	2b00      	cmp	r3, #0
 8008754:	d06f      	beq.n	8008836 <UART_SetConfig+0x29e>
 8008756:	2b01      	cmp	r3, #1
 8008758:	d078      	beq.n	800884c <UART_SetConfig+0x2b4>
 800875a:	2b02      	cmp	r3, #2
 800875c:	d078      	beq.n	8008850 <UART_SetConfig+0x2b8>
 800875e:	2b03      	cmp	r3, #3
 8008760:	d078      	beq.n	8008854 <UART_SetConfig+0x2bc>
 8008762:	2b04      	cmp	r3, #4
 8008764:	d078      	beq.n	8008858 <UART_SetConfig+0x2c0>
 8008766:	2b05      	cmp	r3, #5
 8008768:	d078      	beq.n	800885c <UART_SetConfig+0x2c4>
 800876a:	2b06      	cmp	r3, #6
 800876c:	d078      	beq.n	8008860 <UART_SetConfig+0x2c8>
 800876e:	2b07      	cmp	r3, #7
 8008770:	d078      	beq.n	8008864 <UART_SetConfig+0x2cc>
 8008772:	2b08      	cmp	r3, #8
 8008774:	d078      	beq.n	8008868 <UART_SetConfig+0x2d0>
 8008776:	2b09      	cmp	r3, #9
 8008778:	d078      	beq.n	800886c <UART_SetConfig+0x2d4>
 800877a:	2b0a      	cmp	r3, #10
 800877c:	d078      	beq.n	8008870 <UART_SetConfig+0x2d8>
 800877e:	2b0b      	cmp	r3, #11
 8008780:	d001      	beq.n	8008786 <UART_SetConfig+0x1ee>
 8008782:	4831      	ldr	r0, [pc, #196]	; (8008848 <UART_SetConfig+0x2b0>)
 8008784:	e7b5      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008786:	f24f 4024 	movw	r0, #62500	; 0xf424
 800878a:	e7b2      	b.n	80086f2 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800878c:	f7fe fbf2 	bl	8006f74 <HAL_RCC_GetSysClockFreq>
 8008790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008792:	b1d3      	cbz	r3, 80087ca <UART_SetConfig+0x232>
 8008794:	2b01      	cmp	r3, #1
 8008796:	d01c      	beq.n	80087d2 <UART_SetConfig+0x23a>
 8008798:	2b02      	cmp	r3, #2
 800879a:	d01c      	beq.n	80087d6 <UART_SetConfig+0x23e>
 800879c:	2b03      	cmp	r3, #3
 800879e:	d01c      	beq.n	80087da <UART_SetConfig+0x242>
 80087a0:	2b04      	cmp	r3, #4
 80087a2:	d01c      	beq.n	80087de <UART_SetConfig+0x246>
 80087a4:	2b05      	cmp	r3, #5
 80087a6:	d01c      	beq.n	80087e2 <UART_SetConfig+0x24a>
 80087a8:	2b06      	cmp	r3, #6
 80087aa:	d01c      	beq.n	80087e6 <UART_SetConfig+0x24e>
 80087ac:	2b07      	cmp	r3, #7
 80087ae:	d01c      	beq.n	80087ea <UART_SetConfig+0x252>
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d01c      	beq.n	80087ee <UART_SetConfig+0x256>
 80087b4:	2b09      	cmp	r3, #9
 80087b6:	d01c      	beq.n	80087f2 <UART_SetConfig+0x25a>
 80087b8:	2b0a      	cmp	r3, #10
 80087ba:	d01c      	beq.n	80087f6 <UART_SetConfig+0x25e>
 80087bc:	2b0b      	cmp	r3, #11
 80087be:	d001      	beq.n	80087c4 <UART_SetConfig+0x22c>
 80087c0:	2301      	movs	r3, #1
 80087c2:	e003      	b.n	80087cc <UART_SetConfig+0x234>
 80087c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087c8:	e000      	b.n	80087cc <UART_SetConfig+0x234>
 80087ca:	2301      	movs	r3, #1
 80087cc:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80087d0:	e78f      	b.n	80086f2 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80087d2:	2302      	movs	r3, #2
 80087d4:	e7fa      	b.n	80087cc <UART_SetConfig+0x234>
 80087d6:	2304      	movs	r3, #4
 80087d8:	e7f8      	b.n	80087cc <UART_SetConfig+0x234>
 80087da:	2306      	movs	r3, #6
 80087dc:	e7f6      	b.n	80087cc <UART_SetConfig+0x234>
 80087de:	2308      	movs	r3, #8
 80087e0:	e7f4      	b.n	80087cc <UART_SetConfig+0x234>
 80087e2:	230a      	movs	r3, #10
 80087e4:	e7f2      	b.n	80087cc <UART_SetConfig+0x234>
 80087e6:	230c      	movs	r3, #12
 80087e8:	e7f0      	b.n	80087cc <UART_SetConfig+0x234>
 80087ea:	2310      	movs	r3, #16
 80087ec:	e7ee      	b.n	80087cc <UART_SetConfig+0x234>
 80087ee:	2320      	movs	r3, #32
 80087f0:	e7ec      	b.n	80087cc <UART_SetConfig+0x234>
 80087f2:	2340      	movs	r3, #64	; 0x40
 80087f4:	e7ea      	b.n	80087cc <UART_SetConfig+0x234>
 80087f6:	2380      	movs	r3, #128	; 0x80
 80087f8:	e7e8      	b.n	80087cc <UART_SetConfig+0x234>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80087fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d039      	beq.n	8008874 <UART_SetConfig+0x2dc>
 8008800:	2b01      	cmp	r3, #1
 8008802:	d03a      	beq.n	800887a <UART_SetConfig+0x2e2>
 8008804:	2b02      	cmp	r3, #2
 8008806:	d03b      	beq.n	8008880 <UART_SetConfig+0x2e8>
 8008808:	2b03      	cmp	r3, #3
 800880a:	d03c      	beq.n	8008886 <UART_SetConfig+0x2ee>
 800880c:	2b04      	cmp	r3, #4
 800880e:	d03d      	beq.n	800888c <UART_SetConfig+0x2f4>
 8008810:	2b05      	cmp	r3, #5
 8008812:	d03e      	beq.n	8008892 <UART_SetConfig+0x2fa>
 8008814:	2b06      	cmp	r3, #6
 8008816:	d03f      	beq.n	8008898 <UART_SetConfig+0x300>
 8008818:	2b07      	cmp	r3, #7
 800881a:	d040      	beq.n	800889e <UART_SetConfig+0x306>
 800881c:	2b08      	cmp	r3, #8
 800881e:	d041      	beq.n	80088a4 <UART_SetConfig+0x30c>
 8008820:	2b09      	cmp	r3, #9
 8008822:	d042      	beq.n	80088aa <UART_SetConfig+0x312>
 8008824:	2b0a      	cmp	r3, #10
 8008826:	d043      	beq.n	80088b0 <UART_SetConfig+0x318>
 8008828:	2b0b      	cmp	r3, #11
 800882a:	d002      	beq.n	8008832 <UART_SetConfig+0x29a>
 800882c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008830:	e75f      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008832:	2080      	movs	r0, #128	; 0x80
 8008834:	e75d      	b.n	80086f2 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008836:	4804      	ldr	r0, [pc, #16]	; (8008848 <UART_SetConfig+0x2b0>)
 8008838:	e75b      	b.n	80086f2 <UART_SetConfig+0x15a>
 800883a:	bf00      	nop
 800883c:	cfff69f3 	.word	0xcfff69f3
 8008840:	40008000 	.word	0x40008000
 8008844:	40013800 	.word	0x40013800
 8008848:	00f42400 	.word	0x00f42400
 800884c:	48ac      	ldr	r0, [pc, #688]	; (8008b00 <UART_SetConfig+0x568>)
 800884e:	e750      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008850:	48ac      	ldr	r0, [pc, #688]	; (8008b04 <UART_SetConfig+0x56c>)
 8008852:	e74e      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008854:	48ac      	ldr	r0, [pc, #688]	; (8008b08 <UART_SetConfig+0x570>)
 8008856:	e74c      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008858:	48ac      	ldr	r0, [pc, #688]	; (8008b0c <UART_SetConfig+0x574>)
 800885a:	e74a      	b.n	80086f2 <UART_SetConfig+0x15a>
 800885c:	48ac      	ldr	r0, [pc, #688]	; (8008b10 <UART_SetConfig+0x578>)
 800885e:	e748      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008860:	48ac      	ldr	r0, [pc, #688]	; (8008b14 <UART_SetConfig+0x57c>)
 8008862:	e746      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008864:	48ac      	ldr	r0, [pc, #688]	; (8008b18 <UART_SetConfig+0x580>)
 8008866:	e744      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008868:	48ac      	ldr	r0, [pc, #688]	; (8008b1c <UART_SetConfig+0x584>)
 800886a:	e742      	b.n	80086f2 <UART_SetConfig+0x15a>
 800886c:	48ac      	ldr	r0, [pc, #688]	; (8008b20 <UART_SetConfig+0x588>)
 800886e:	e740      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008870:	48ac      	ldr	r0, [pc, #688]	; (8008b24 <UART_SetConfig+0x58c>)
 8008872:	e73e      	b.n	80086f2 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008874:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008878:	e73b      	b.n	80086f2 <UART_SetConfig+0x15a>
 800887a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800887e:	e738      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008880:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008884:	e735      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008886:	f241 5055 	movw	r0, #5461	; 0x1555
 800888a:	e732      	b.n	80086f2 <UART_SetConfig+0x15a>
 800888c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008890:	e72f      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008892:	f640 40cc 	movw	r0, #3276	; 0xccc
 8008896:	e72c      	b.n	80086f2 <UART_SetConfig+0x15a>
 8008898:	f640 20aa 	movw	r0, #2730	; 0xaaa
 800889c:	e729      	b.n	80086f2 <UART_SetConfig+0x15a>
 800889e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80088a2:	e726      	b.n	80086f2 <UART_SetConfig+0x15a>
 80088a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80088a8:	e723      	b.n	80086f2 <UART_SetConfig+0x15a>
 80088aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80088ae:	e720      	b.n	80086f2 <UART_SetConfig+0x15a>
 80088b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80088b4:	e71d      	b.n	80086f2 <UART_SetConfig+0x15a>
            pclk = HAL_RCC_GetPCLK1Freq();
 80088b6:	f7fe fbcb 	bl	8007050 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088bc:	b1e3      	cbz	r3, 80088f8 <UART_SetConfig+0x360>
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d03a      	beq.n	8008938 <UART_SetConfig+0x3a0>
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d03b      	beq.n	800893e <UART_SetConfig+0x3a6>
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d03c      	beq.n	8008944 <UART_SetConfig+0x3ac>
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d03d      	beq.n	800894a <UART_SetConfig+0x3b2>
 80088ce:	2b05      	cmp	r3, #5
 80088d0:	d03e      	beq.n	8008950 <UART_SetConfig+0x3b8>
 80088d2:	2b06      	cmp	r3, #6
 80088d4:	d03f      	beq.n	8008956 <UART_SetConfig+0x3be>
 80088d6:	2b07      	cmp	r3, #7
 80088d8:	d040      	beq.n	800895c <UART_SetConfig+0x3c4>
 80088da:	2b08      	cmp	r3, #8
 80088dc:	d041      	beq.n	8008962 <UART_SetConfig+0x3ca>
 80088de:	2b09      	cmp	r3, #9
 80088e0:	d042      	beq.n	8008968 <UART_SetConfig+0x3d0>
 80088e2:	2b0a      	cmp	r3, #10
 80088e4:	d043      	beq.n	800896e <UART_SetConfig+0x3d6>
 80088e6:	2b0b      	cmp	r3, #11
 80088e8:	d002      	beq.n	80088f0 <UART_SetConfig+0x358>
 80088ea:	2201      	movs	r2, #1
 80088ec:	2300      	movs	r3, #0
 80088ee:	e005      	b.n	80088fc <UART_SetConfig+0x364>
 80088f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088f4:	2300      	movs	r3, #0
 80088f6:	e001      	b.n	80088fc <UART_SetConfig+0x364>
 80088f8:	2201      	movs	r2, #1
 80088fa:	2300      	movs	r3, #0
 80088fc:	2100      	movs	r1, #0
 80088fe:	f7f8 f905 	bl	8000b0c <__aeabi_uldivmod>
 8008902:	020f      	lsls	r7, r1, #8
 8008904:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8008908:	0206      	lsls	r6, r0, #8
 800890a:	6862      	ldr	r2, [r4, #4]
 800890c:	0850      	lsrs	r0, r2, #1
 800890e:	2500      	movs	r5, #0
 8008910:	462b      	mov	r3, r5
 8008912:	eb16 0b00 	adds.w	fp, r6, r0
 8008916:	f147 0c00 	adc.w	ip, r7, #0
 800891a:	4658      	mov	r0, fp
 800891c:	4661      	mov	r1, ip
 800891e:	f7f8 f8f5 	bl	8000b0c <__aeabi_uldivmod>
 8008922:	4603      	mov	r3, r0
            break;
 8008924:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008926:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 800892a:	4a7f      	ldr	r2, [pc, #508]	; (8008b28 <UART_SetConfig+0x590>)
 800892c:	4291      	cmp	r1, r2
 800892e:	f200 83cf 	bhi.w	80090d0 <UART_SetConfig+0xb38>
          huart->Instance->BRR = usartdiv;
 8008932:	6822      	ldr	r2, [r4, #0]
 8008934:	60d3      	str	r3, [r2, #12]
 8008936:	e2c3      	b.n	8008ec0 <UART_SetConfig+0x928>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008938:	2202      	movs	r2, #2
 800893a:	2300      	movs	r3, #0
 800893c:	e7de      	b.n	80088fc <UART_SetConfig+0x364>
 800893e:	2204      	movs	r2, #4
 8008940:	2300      	movs	r3, #0
 8008942:	e7db      	b.n	80088fc <UART_SetConfig+0x364>
 8008944:	2206      	movs	r2, #6
 8008946:	2300      	movs	r3, #0
 8008948:	e7d8      	b.n	80088fc <UART_SetConfig+0x364>
 800894a:	2208      	movs	r2, #8
 800894c:	2300      	movs	r3, #0
 800894e:	e7d5      	b.n	80088fc <UART_SetConfig+0x364>
 8008950:	220a      	movs	r2, #10
 8008952:	2300      	movs	r3, #0
 8008954:	e7d2      	b.n	80088fc <UART_SetConfig+0x364>
 8008956:	220c      	movs	r2, #12
 8008958:	2300      	movs	r3, #0
 800895a:	e7cf      	b.n	80088fc <UART_SetConfig+0x364>
 800895c:	2210      	movs	r2, #16
 800895e:	2300      	movs	r3, #0
 8008960:	e7cc      	b.n	80088fc <UART_SetConfig+0x364>
 8008962:	2220      	movs	r2, #32
 8008964:	2300      	movs	r3, #0
 8008966:	e7c9      	b.n	80088fc <UART_SetConfig+0x364>
 8008968:	2240      	movs	r2, #64	; 0x40
 800896a:	2300      	movs	r3, #0
 800896c:	e7c6      	b.n	80088fc <UART_SetConfig+0x364>
 800896e:	2280      	movs	r2, #128	; 0x80
 8008970:	2300      	movs	r3, #0
 8008972:	e7c3      	b.n	80088fc <UART_SetConfig+0x364>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008976:	b1fb      	cbz	r3, 80089b8 <UART_SetConfig+0x420>
 8008978:	2b01      	cmp	r3, #1
 800897a:	d02d      	beq.n	80089d8 <UART_SetConfig+0x440>
 800897c:	2b02      	cmp	r3, #2
 800897e:	d030      	beq.n	80089e2 <UART_SetConfig+0x44a>
 8008980:	2b03      	cmp	r3, #3
 8008982:	d033      	beq.n	80089ec <UART_SetConfig+0x454>
 8008984:	2b04      	cmp	r3, #4
 8008986:	d036      	beq.n	80089f6 <UART_SetConfig+0x45e>
 8008988:	2b05      	cmp	r3, #5
 800898a:	d039      	beq.n	8008a00 <UART_SetConfig+0x468>
 800898c:	2b06      	cmp	r3, #6
 800898e:	d03c      	beq.n	8008a0a <UART_SetConfig+0x472>
 8008990:	2b07      	cmp	r3, #7
 8008992:	d03f      	beq.n	8008a14 <UART_SetConfig+0x47c>
 8008994:	2b08      	cmp	r3, #8
 8008996:	d042      	beq.n	8008a1e <UART_SetConfig+0x486>
 8008998:	2b09      	cmp	r3, #9
 800899a:	d045      	beq.n	8008a28 <UART_SetConfig+0x490>
 800899c:	2b0a      	cmp	r3, #10
 800899e:	d048      	beq.n	8008a32 <UART_SetConfig+0x49a>
 80089a0:	2b0b      	cmp	r3, #11
 80089a2:	d004      	beq.n	80089ae <UART_SetConfig+0x416>
 80089a4:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008b2c <UART_SetConfig+0x594>
 80089a8:	f04f 0c00 	mov.w	ip, #0
 80089ac:	e008      	b.n	80089c0 <UART_SetConfig+0x428>
 80089ae:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008b30 <UART_SetConfig+0x598>
 80089b2:	f04f 0c00 	mov.w	ip, #0
 80089b6:	e003      	b.n	80089c0 <UART_SetConfig+0x428>
 80089b8:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008b2c <UART_SetConfig+0x594>
 80089bc:	f04f 0c00 	mov.w	ip, #0
 80089c0:	0856      	lsrs	r6, r2, #1
 80089c2:	2500      	movs	r5, #0
 80089c4:	462b      	mov	r3, r5
 80089c6:	eb1b 0006 	adds.w	r0, fp, r6
 80089ca:	f14c 0100 	adc.w	r1, ip, #0
 80089ce:	f7f8 f89d 	bl	8000b0c <__aeabi_uldivmod>
 80089d2:	4603      	mov	r3, r0
            break;
 80089d4:	4628      	mov	r0, r5
 80089d6:	e7a6      	b.n	8008926 <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089d8:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008b34 <UART_SetConfig+0x59c>
 80089dc:	f04f 0c00 	mov.w	ip, #0
 80089e0:	e7ee      	b.n	80089c0 <UART_SetConfig+0x428>
 80089e2:	f8df b154 	ldr.w	fp, [pc, #340]	; 8008b38 <UART_SetConfig+0x5a0>
 80089e6:	f04f 0c00 	mov.w	ip, #0
 80089ea:	e7e9      	b.n	80089c0 <UART_SetConfig+0x428>
 80089ec:	f20f 1c00 	addw	ip, pc, #256	; 0x100
 80089f0:	e9dc bc00 	ldrd	fp, ip, [ip]
 80089f4:	e7e4      	b.n	80089c0 <UART_SetConfig+0x428>
 80089f6:	f8df b144 	ldr.w	fp, [pc, #324]	; 8008b3c <UART_SetConfig+0x5a4>
 80089fa:	f04f 0c00 	mov.w	ip, #0
 80089fe:	e7df      	b.n	80089c0 <UART_SetConfig+0x428>
 8008a00:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8008b40 <UART_SetConfig+0x5a8>
 8008a04:	f04f 0c00 	mov.w	ip, #0
 8008a08:	e7da      	b.n	80089c0 <UART_SetConfig+0x428>
 8008a0a:	f20f 0cec 	addw	ip, pc, #236	; 0xec
 8008a0e:	e9dc bc00 	ldrd	fp, ip, [ip]
 8008a12:	e7d5      	b.n	80089c0 <UART_SetConfig+0x428>
 8008a14:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008b44 <UART_SetConfig+0x5ac>
 8008a18:	f04f 0c00 	mov.w	ip, #0
 8008a1c:	e7d0      	b.n	80089c0 <UART_SetConfig+0x428>
 8008a1e:	f8df b128 	ldr.w	fp, [pc, #296]	; 8008b48 <UART_SetConfig+0x5b0>
 8008a22:	f04f 0c00 	mov.w	ip, #0
 8008a26:	e7cb      	b.n	80089c0 <UART_SetConfig+0x428>
 8008a28:	f8df b120 	ldr.w	fp, [pc, #288]	; 8008b4c <UART_SetConfig+0x5b4>
 8008a2c:	f04f 0c00 	mov.w	ip, #0
 8008a30:	e7c6      	b.n	80089c0 <UART_SetConfig+0x428>
 8008a32:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8008b50 <UART_SetConfig+0x5b8>
 8008a36:	f04f 0c00 	mov.w	ip, #0
 8008a3a:	e7c1      	b.n	80089c0 <UART_SetConfig+0x428>
            pclk = HAL_RCC_GetSysClockFreq();
 8008a3c:	f7fe fa9a 	bl	8006f74 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a42:	b1e3      	cbz	r3, 8008a7e <UART_SetConfig+0x4e6>
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d032      	beq.n	8008aae <UART_SetConfig+0x516>
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d033      	beq.n	8008ab4 <UART_SetConfig+0x51c>
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d034      	beq.n	8008aba <UART_SetConfig+0x522>
 8008a50:	2b04      	cmp	r3, #4
 8008a52:	d035      	beq.n	8008ac0 <UART_SetConfig+0x528>
 8008a54:	2b05      	cmp	r3, #5
 8008a56:	d036      	beq.n	8008ac6 <UART_SetConfig+0x52e>
 8008a58:	2b06      	cmp	r3, #6
 8008a5a:	d037      	beq.n	8008acc <UART_SetConfig+0x534>
 8008a5c:	2b07      	cmp	r3, #7
 8008a5e:	d038      	beq.n	8008ad2 <UART_SetConfig+0x53a>
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	d039      	beq.n	8008ad8 <UART_SetConfig+0x540>
 8008a64:	2b09      	cmp	r3, #9
 8008a66:	d03a      	beq.n	8008ade <UART_SetConfig+0x546>
 8008a68:	2b0a      	cmp	r3, #10
 8008a6a:	d03b      	beq.n	8008ae4 <UART_SetConfig+0x54c>
 8008a6c:	2b0b      	cmp	r3, #11
 8008a6e:	d002      	beq.n	8008a76 <UART_SetConfig+0x4de>
 8008a70:	2201      	movs	r2, #1
 8008a72:	2300      	movs	r3, #0
 8008a74:	e005      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e001      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008a7e:	2201      	movs	r2, #1
 8008a80:	2300      	movs	r3, #0
 8008a82:	2100      	movs	r1, #0
 8008a84:	f7f8 f842 	bl	8000b0c <__aeabi_uldivmod>
 8008a88:	020f      	lsls	r7, r1, #8
 8008a8a:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8008a8e:	0206      	lsls	r6, r0, #8
 8008a90:	6862      	ldr	r2, [r4, #4]
 8008a92:	0850      	lsrs	r0, r2, #1
 8008a94:	2500      	movs	r5, #0
 8008a96:	462b      	mov	r3, r5
 8008a98:	eb16 0b00 	adds.w	fp, r6, r0
 8008a9c:	f147 0c00 	adc.w	ip, r7, #0
 8008aa0:	4658      	mov	r0, fp
 8008aa2:	4661      	mov	r1, ip
 8008aa4:	f7f8 f832 	bl	8000b0c <__aeabi_uldivmod>
 8008aa8:	4603      	mov	r3, r0
            break;
 8008aaa:	4628      	mov	r0, r5
 8008aac:	e73b      	b.n	8008926 <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aae:	2202      	movs	r2, #2
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e7e6      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e7e3      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008aba:	2206      	movs	r2, #6
 8008abc:	2300      	movs	r3, #0
 8008abe:	e7e0      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	e7dd      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008ac6:	220a      	movs	r2, #10
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e7da      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008acc:	220c      	movs	r2, #12
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e7d7      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008ad2:	2210      	movs	r2, #16
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e7d4      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008ad8:	2220      	movs	r2, #32
 8008ada:	2300      	movs	r3, #0
 8008adc:	e7d1      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008ade:	2240      	movs	r2, #64	; 0x40
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e7ce      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008ae4:	2280      	movs	r2, #128	; 0x80
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	e7cb      	b.n	8008a82 <UART_SetConfig+0x4ea>
 8008aea:	bf00      	nop
 8008aec:	f3af 8000 	nop.w
 8008af0:	28b0aa00 	.word	0x28b0aa00
 8008af4:	00000000 	.word	0x00000000
 8008af8:	14585500 	.word	0x14585500
 8008afc:	00000000 	.word	0x00000000
 8008b00:	007a1200 	.word	0x007a1200
 8008b04:	003d0900 	.word	0x003d0900
 8008b08:	0028b0aa 	.word	0x0028b0aa
 8008b0c:	001e8480 	.word	0x001e8480
 8008b10:	00186a00 	.word	0x00186a00
 8008b14:	00145855 	.word	0x00145855
 8008b18:	000f4240 	.word	0x000f4240
 8008b1c:	0007a120 	.word	0x0007a120
 8008b20:	0003d090 	.word	0x0003d090
 8008b24:	0001e848 	.word	0x0001e848
 8008b28:	000ffcff 	.word	0x000ffcff
 8008b2c:	f4240000 	.word	0xf4240000
 8008b30:	00f42400 	.word	0x00f42400
 8008b34:	7a120000 	.word	0x7a120000
 8008b38:	3d090000 	.word	0x3d090000
 8008b3c:	1e848000 	.word	0x1e848000
 8008b40:	186a0000 	.word	0x186a0000
 8008b44:	0f424000 	.word	0x0f424000
 8008b48:	07a12000 	.word	0x07a12000
 8008b4c:	03d09000 	.word	0x03d09000
 8008b50:	01e84800 	.word	0x01e84800
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b56:	b1fb      	cbz	r3, 8008b98 <UART_SetConfig+0x600>
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d02d      	beq.n	8008bb8 <UART_SetConfig+0x620>
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d030      	beq.n	8008bc2 <UART_SetConfig+0x62a>
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d033      	beq.n	8008bcc <UART_SetConfig+0x634>
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d036      	beq.n	8008bd6 <UART_SetConfig+0x63e>
 8008b68:	2b05      	cmp	r3, #5
 8008b6a:	d039      	beq.n	8008be0 <UART_SetConfig+0x648>
 8008b6c:	2b06      	cmp	r3, #6
 8008b6e:	d03c      	beq.n	8008bea <UART_SetConfig+0x652>
 8008b70:	2b07      	cmp	r3, #7
 8008b72:	d03f      	beq.n	8008bf4 <UART_SetConfig+0x65c>
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	d042      	beq.n	8008bfe <UART_SetConfig+0x666>
 8008b78:	2b09      	cmp	r3, #9
 8008b7a:	d045      	beq.n	8008c08 <UART_SetConfig+0x670>
 8008b7c:	2b0a      	cmp	r3, #10
 8008b7e:	d048      	beq.n	8008c12 <UART_SetConfig+0x67a>
 8008b80:	2b0b      	cmp	r3, #11
 8008b82:	d004      	beq.n	8008b8e <UART_SetConfig+0x5f6>
 8008b84:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 8008b88:	f04f 0c00 	mov.w	ip, #0
 8008b8c:	e008      	b.n	8008ba0 <UART_SetConfig+0x608>
 8008b8e:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
 8008b92:	f04f 0c00 	mov.w	ip, #0
 8008b96:	e003      	b.n	8008ba0 <UART_SetConfig+0x608>
 8008b98:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 8008b9c:	f04f 0c00 	mov.w	ip, #0
 8008ba0:	0856      	lsrs	r6, r2, #1
 8008ba2:	2500      	movs	r5, #0
 8008ba4:	462b      	mov	r3, r5
 8008ba6:	eb1b 0006 	adds.w	r0, fp, r6
 8008baa:	f14c 0100 	adc.w	r1, ip, #0
 8008bae:	f7f7 ffad 	bl	8000b0c <__aeabi_uldivmod>
 8008bb2:	4603      	mov	r3, r0
            break;
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	e6b6      	b.n	8008926 <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bb8:	f44f 0b80 	mov.w	fp, #4194304	; 0x400000
 8008bbc:	f04f 0c00 	mov.w	ip, #0
 8008bc0:	e7ee      	b.n	8008ba0 <UART_SetConfig+0x608>
 8008bc2:	f44f 1b00 	mov.w	fp, #2097152	; 0x200000
 8008bc6:	f04f 0c00 	mov.w	ip, #0
 8008bca:	e7e9      	b.n	8008ba0 <UART_SetConfig+0x608>
 8008bcc:	f8df b3d8 	ldr.w	fp, [pc, #984]	; 8008fa8 <UART_SetConfig+0xa10>
 8008bd0:	f04f 0c00 	mov.w	ip, #0
 8008bd4:	e7e4      	b.n	8008ba0 <UART_SetConfig+0x608>
 8008bd6:	f44f 1b80 	mov.w	fp, #1048576	; 0x100000
 8008bda:	f04f 0c00 	mov.w	ip, #0
 8008bde:	e7df      	b.n	8008ba0 <UART_SetConfig+0x608>
 8008be0:	f8df b3c8 	ldr.w	fp, [pc, #968]	; 8008fac <UART_SetConfig+0xa14>
 8008be4:	f04f 0c00 	mov.w	ip, #0
 8008be8:	e7da      	b.n	8008ba0 <UART_SetConfig+0x608>
 8008bea:	f8df b3c4 	ldr.w	fp, [pc, #964]	; 8008fb0 <UART_SetConfig+0xa18>
 8008bee:	f04f 0c00 	mov.w	ip, #0
 8008bf2:	e7d5      	b.n	8008ba0 <UART_SetConfig+0x608>
 8008bf4:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
 8008bf8:	f04f 0c00 	mov.w	ip, #0
 8008bfc:	e7d0      	b.n	8008ba0 <UART_SetConfig+0x608>
 8008bfe:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 8008c02:	f04f 0c00 	mov.w	ip, #0
 8008c06:	e7cb      	b.n	8008ba0 <UART_SetConfig+0x608>
 8008c08:	f44f 3b00 	mov.w	fp, #131072	; 0x20000
 8008c0c:	f04f 0c00 	mov.w	ip, #0
 8008c10:	e7c6      	b.n	8008ba0 <UART_SetConfig+0x608>
 8008c12:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
 8008c16:	f04f 0c00 	mov.w	ip, #0
 8008c1a:	e7c1      	b.n	8008ba0 <UART_SetConfig+0x608>
            ret = HAL_ERROR;
 8008c1c:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e681      	b.n	8008926 <UART_SetConfig+0x38e>
    switch (clocksource)
 8008c22:	3d01      	subs	r5, #1
 8008c24:	2d07      	cmp	r5, #7
 8008c26:	f200 8116 	bhi.w	8008e56 <UART_SetConfig+0x8be>
 8008c2a:	e8df f015 	tbh	[pc, r5, lsl #1]
 8008c2e:	0008      	.short	0x0008
 8008c30:	01140056 	.word	0x01140056
 8008c34:	0114008f 	.word	0x0114008f
 8008c38:	01140114 	.word	0x01140114
 8008c3c:	00ce      	.short	0x00ce
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c3e:	f7fe fa19 	bl	8007074 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c44:	b1d3      	cbz	r3, 8008c7c <UART_SetConfig+0x6e4>
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d033      	beq.n	8008cb2 <UART_SetConfig+0x71a>
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d033      	beq.n	8008cb6 <UART_SetConfig+0x71e>
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d033      	beq.n	8008cba <UART_SetConfig+0x722>
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d033      	beq.n	8008cbe <UART_SetConfig+0x726>
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d033      	beq.n	8008cc2 <UART_SetConfig+0x72a>
 8008c5a:	2b06      	cmp	r3, #6
 8008c5c:	d033      	beq.n	8008cc6 <UART_SetConfig+0x72e>
 8008c5e:	2b07      	cmp	r3, #7
 8008c60:	d033      	beq.n	8008cca <UART_SetConfig+0x732>
 8008c62:	2b08      	cmp	r3, #8
 8008c64:	d033      	beq.n	8008cce <UART_SetConfig+0x736>
 8008c66:	2b09      	cmp	r3, #9
 8008c68:	d033      	beq.n	8008cd2 <UART_SetConfig+0x73a>
 8008c6a:	2b0a      	cmp	r3, #10
 8008c6c:	d033      	beq.n	8008cd6 <UART_SetConfig+0x73e>
 8008c6e:	2b0b      	cmp	r3, #11
 8008c70:	d001      	beq.n	8008c76 <UART_SetConfig+0x6de>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e003      	b.n	8008c7e <UART_SetConfig+0x6e6>
 8008c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c7a:	e000      	b.n	8008c7e <UART_SetConfig+0x6e6>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c82:	6862      	ldr	r2, [r4, #4]
 8008c84:	0853      	lsrs	r3, r2, #1
 8008c86:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c8e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c90:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c92:	f1a3 0110 	sub.w	r1, r3, #16
 8008c96:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008c9a:	4291      	cmp	r1, r2
 8008c9c:	f200 821a 	bhi.w	80090d4 <UART_SetConfig+0xb3c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ca6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008caa:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8008cac:	6822      	ldr	r2, [r4, #0]
 8008cae:	60d3      	str	r3, [r2, #12]
 8008cb0:	e106      	b.n	8008ec0 <UART_SetConfig+0x928>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e7e3      	b.n	8008c7e <UART_SetConfig+0x6e6>
 8008cb6:	2304      	movs	r3, #4
 8008cb8:	e7e1      	b.n	8008c7e <UART_SetConfig+0x6e6>
 8008cba:	2306      	movs	r3, #6
 8008cbc:	e7df      	b.n	8008c7e <UART_SetConfig+0x6e6>
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	e7dd      	b.n	8008c7e <UART_SetConfig+0x6e6>
 8008cc2:	230a      	movs	r3, #10
 8008cc4:	e7db      	b.n	8008c7e <UART_SetConfig+0x6e6>
 8008cc6:	230c      	movs	r3, #12
 8008cc8:	e7d9      	b.n	8008c7e <UART_SetConfig+0x6e6>
 8008cca:	2310      	movs	r3, #16
 8008ccc:	e7d7      	b.n	8008c7e <UART_SetConfig+0x6e6>
 8008cce:	2320      	movs	r3, #32
 8008cd0:	e7d5      	b.n	8008c7e <UART_SetConfig+0x6e6>
 8008cd2:	2340      	movs	r3, #64	; 0x40
 8008cd4:	e7d3      	b.n	8008c7e <UART_SetConfig+0x6e6>
 8008cd6:	2380      	movs	r3, #128	; 0x80
 8008cd8:	e7d1      	b.n	8008c7e <UART_SetConfig+0x6e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cdc:	b1cb      	cbz	r3, 8008d12 <UART_SetConfig+0x77a>
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d020      	beq.n	8008d24 <UART_SetConfig+0x78c>
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d020      	beq.n	8008d28 <UART_SetConfig+0x790>
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d020      	beq.n	8008d2c <UART_SetConfig+0x794>
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d020      	beq.n	8008d30 <UART_SetConfig+0x798>
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	d020      	beq.n	8008d34 <UART_SetConfig+0x79c>
 8008cf2:	2b06      	cmp	r3, #6
 8008cf4:	d020      	beq.n	8008d38 <UART_SetConfig+0x7a0>
 8008cf6:	2b07      	cmp	r3, #7
 8008cf8:	d020      	beq.n	8008d3c <UART_SetConfig+0x7a4>
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	d020      	beq.n	8008d40 <UART_SetConfig+0x7a8>
 8008cfe:	2b09      	cmp	r3, #9
 8008d00:	d020      	beq.n	8008d44 <UART_SetConfig+0x7ac>
 8008d02:	2b0a      	cmp	r3, #10
 8008d04:	d020      	beq.n	8008d48 <UART_SetConfig+0x7b0>
 8008d06:	2b0b      	cmp	r3, #11
 8008d08:	d001      	beq.n	8008d0e <UART_SetConfig+0x776>
 8008d0a:	4b99      	ldr	r3, [pc, #612]	; (8008f70 <UART_SetConfig+0x9d8>)
 8008d0c:	e002      	b.n	8008d14 <UART_SetConfig+0x77c>
 8008d0e:	4b99      	ldr	r3, [pc, #612]	; (8008f74 <UART_SetConfig+0x9dc>)
 8008d10:	e000      	b.n	8008d14 <UART_SetConfig+0x77c>
 8008d12:	4b97      	ldr	r3, [pc, #604]	; (8008f70 <UART_SetConfig+0x9d8>)
 8008d14:	6862      	ldr	r2, [r4, #4]
 8008d16:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d1e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d20:	2000      	movs	r0, #0
        break;
 8008d22:	e7b6      	b.n	8008c92 <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d24:	4b94      	ldr	r3, [pc, #592]	; (8008f78 <UART_SetConfig+0x9e0>)
 8008d26:	e7f5      	b.n	8008d14 <UART_SetConfig+0x77c>
 8008d28:	4b94      	ldr	r3, [pc, #592]	; (8008f7c <UART_SetConfig+0x9e4>)
 8008d2a:	e7f3      	b.n	8008d14 <UART_SetConfig+0x77c>
 8008d2c:	4b94      	ldr	r3, [pc, #592]	; (8008f80 <UART_SetConfig+0x9e8>)
 8008d2e:	e7f1      	b.n	8008d14 <UART_SetConfig+0x77c>
 8008d30:	4b94      	ldr	r3, [pc, #592]	; (8008f84 <UART_SetConfig+0x9ec>)
 8008d32:	e7ef      	b.n	8008d14 <UART_SetConfig+0x77c>
 8008d34:	4b94      	ldr	r3, [pc, #592]	; (8008f88 <UART_SetConfig+0x9f0>)
 8008d36:	e7ed      	b.n	8008d14 <UART_SetConfig+0x77c>
 8008d38:	4b94      	ldr	r3, [pc, #592]	; (8008f8c <UART_SetConfig+0x9f4>)
 8008d3a:	e7eb      	b.n	8008d14 <UART_SetConfig+0x77c>
 8008d3c:	4b94      	ldr	r3, [pc, #592]	; (8008f90 <UART_SetConfig+0x9f8>)
 8008d3e:	e7e9      	b.n	8008d14 <UART_SetConfig+0x77c>
 8008d40:	4b94      	ldr	r3, [pc, #592]	; (8008f94 <UART_SetConfig+0x9fc>)
 8008d42:	e7e7      	b.n	8008d14 <UART_SetConfig+0x77c>
 8008d44:	4b94      	ldr	r3, [pc, #592]	; (8008f98 <UART_SetConfig+0xa00>)
 8008d46:	e7e5      	b.n	8008d14 <UART_SetConfig+0x77c>
 8008d48:	4b94      	ldr	r3, [pc, #592]	; (8008f9c <UART_SetConfig+0xa04>)
 8008d4a:	e7e3      	b.n	8008d14 <UART_SetConfig+0x77c>
        pclk = HAL_RCC_GetSysClockFreq();
 8008d4c:	f7fe f912 	bl	8006f74 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d52:	b1d3      	cbz	r3, 8008d8a <UART_SetConfig+0x7f2>
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d024      	beq.n	8008da2 <UART_SetConfig+0x80a>
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d024      	beq.n	8008da6 <UART_SetConfig+0x80e>
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d024      	beq.n	8008daa <UART_SetConfig+0x812>
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d024      	beq.n	8008dae <UART_SetConfig+0x816>
 8008d64:	2b05      	cmp	r3, #5
 8008d66:	d024      	beq.n	8008db2 <UART_SetConfig+0x81a>
 8008d68:	2b06      	cmp	r3, #6
 8008d6a:	d024      	beq.n	8008db6 <UART_SetConfig+0x81e>
 8008d6c:	2b07      	cmp	r3, #7
 8008d6e:	d024      	beq.n	8008dba <UART_SetConfig+0x822>
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d024      	beq.n	8008dbe <UART_SetConfig+0x826>
 8008d74:	2b09      	cmp	r3, #9
 8008d76:	d024      	beq.n	8008dc2 <UART_SetConfig+0x82a>
 8008d78:	2b0a      	cmp	r3, #10
 8008d7a:	d024      	beq.n	8008dc6 <UART_SetConfig+0x82e>
 8008d7c:	2b0b      	cmp	r3, #11
 8008d7e:	d001      	beq.n	8008d84 <UART_SetConfig+0x7ec>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e003      	b.n	8008d8c <UART_SetConfig+0x7f4>
 8008d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d88:	e000      	b.n	8008d8c <UART_SetConfig+0x7f4>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008d90:	6862      	ldr	r2, [r4, #4]
 8008d92:	0853      	lsrs	r3, r2, #1
 8008d94:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d9c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d9e:	2000      	movs	r0, #0
        break;
 8008da0:	e777      	b.n	8008c92 <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da2:	2302      	movs	r3, #2
 8008da4:	e7f2      	b.n	8008d8c <UART_SetConfig+0x7f4>
 8008da6:	2304      	movs	r3, #4
 8008da8:	e7f0      	b.n	8008d8c <UART_SetConfig+0x7f4>
 8008daa:	2306      	movs	r3, #6
 8008dac:	e7ee      	b.n	8008d8c <UART_SetConfig+0x7f4>
 8008dae:	2308      	movs	r3, #8
 8008db0:	e7ec      	b.n	8008d8c <UART_SetConfig+0x7f4>
 8008db2:	230a      	movs	r3, #10
 8008db4:	e7ea      	b.n	8008d8c <UART_SetConfig+0x7f4>
 8008db6:	230c      	movs	r3, #12
 8008db8:	e7e8      	b.n	8008d8c <UART_SetConfig+0x7f4>
 8008dba:	2310      	movs	r3, #16
 8008dbc:	e7e6      	b.n	8008d8c <UART_SetConfig+0x7f4>
 8008dbe:	2320      	movs	r3, #32
 8008dc0:	e7e4      	b.n	8008d8c <UART_SetConfig+0x7f4>
 8008dc2:	2340      	movs	r3, #64	; 0x40
 8008dc4:	e7e2      	b.n	8008d8c <UART_SetConfig+0x7f4>
 8008dc6:	2380      	movs	r3, #128	; 0x80
 8008dc8:	e7e0      	b.n	8008d8c <UART_SetConfig+0x7f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dcc:	b1db      	cbz	r3, 8008e06 <UART_SetConfig+0x86e>
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d023      	beq.n	8008e1a <UART_SetConfig+0x882>
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d024      	beq.n	8008e20 <UART_SetConfig+0x888>
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d025      	beq.n	8008e26 <UART_SetConfig+0x88e>
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	d026      	beq.n	8008e2c <UART_SetConfig+0x894>
 8008dde:	2b05      	cmp	r3, #5
 8008de0:	d027      	beq.n	8008e32 <UART_SetConfig+0x89a>
 8008de2:	2b06      	cmp	r3, #6
 8008de4:	d028      	beq.n	8008e38 <UART_SetConfig+0x8a0>
 8008de6:	2b07      	cmp	r3, #7
 8008de8:	d029      	beq.n	8008e3e <UART_SetConfig+0x8a6>
 8008dea:	2b08      	cmp	r3, #8
 8008dec:	d02a      	beq.n	8008e44 <UART_SetConfig+0x8ac>
 8008dee:	2b09      	cmp	r3, #9
 8008df0:	d02b      	beq.n	8008e4a <UART_SetConfig+0x8b2>
 8008df2:	2b0a      	cmp	r3, #10
 8008df4:	d02c      	beq.n	8008e50 <UART_SetConfig+0x8b8>
 8008df6:	2b0b      	cmp	r3, #11
 8008df8:	d002      	beq.n	8008e00 <UART_SetConfig+0x868>
 8008dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dfe:	e004      	b.n	8008e0a <UART_SetConfig+0x872>
 8008e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e04:	e001      	b.n	8008e0a <UART_SetConfig+0x872>
 8008e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e0a:	6862      	ldr	r2, [r4, #4]
 8008e0c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e14:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e16:	2000      	movs	r0, #0
        break;
 8008e18:	e73b      	b.n	8008c92 <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e1e:	e7f4      	b.n	8008e0a <UART_SetConfig+0x872>
 8008e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e24:	e7f1      	b.n	8008e0a <UART_SetConfig+0x872>
 8008e26:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008e2a:	e7ee      	b.n	8008e0a <UART_SetConfig+0x872>
 8008e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e30:	e7eb      	b.n	8008e0a <UART_SetConfig+0x872>
 8008e32:	f641 1398 	movw	r3, #6552	; 0x1998
 8008e36:	e7e8      	b.n	8008e0a <UART_SetConfig+0x872>
 8008e38:	f241 5354 	movw	r3, #5460	; 0x1554
 8008e3c:	e7e5      	b.n	8008e0a <UART_SetConfig+0x872>
 8008e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e42:	e7e2      	b.n	8008e0a <UART_SetConfig+0x872>
 8008e44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e48:	e7df      	b.n	8008e0a <UART_SetConfig+0x872>
 8008e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e4e:	e7dc      	b.n	8008e0a <UART_SetConfig+0x872>
 8008e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e54:	e7d9      	b.n	8008e0a <UART_SetConfig+0x872>
        ret = HAL_ERROR;
 8008e56:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	e71a      	b.n	8008c92 <UART_SetConfig+0x6fa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e5c:	f7fe f90a 	bl	8007074 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e62:	b1d3      	cbz	r3, 8008e9a <UART_SetConfig+0x902>
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d035      	beq.n	8008ed4 <UART_SetConfig+0x93c>
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d035      	beq.n	8008ed8 <UART_SetConfig+0x940>
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d035      	beq.n	8008edc <UART_SetConfig+0x944>
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	d035      	beq.n	8008ee0 <UART_SetConfig+0x948>
 8008e74:	2b05      	cmp	r3, #5
 8008e76:	d035      	beq.n	8008ee4 <UART_SetConfig+0x94c>
 8008e78:	2b06      	cmp	r3, #6
 8008e7a:	d035      	beq.n	8008ee8 <UART_SetConfig+0x950>
 8008e7c:	2b07      	cmp	r3, #7
 8008e7e:	d035      	beq.n	8008eec <UART_SetConfig+0x954>
 8008e80:	2b08      	cmp	r3, #8
 8008e82:	d035      	beq.n	8008ef0 <UART_SetConfig+0x958>
 8008e84:	2b09      	cmp	r3, #9
 8008e86:	d035      	beq.n	8008ef4 <UART_SetConfig+0x95c>
 8008e88:	2b0a      	cmp	r3, #10
 8008e8a:	d035      	beq.n	8008ef8 <UART_SetConfig+0x960>
 8008e8c:	2b0b      	cmp	r3, #11
 8008e8e:	d001      	beq.n	8008e94 <UART_SetConfig+0x8fc>
 8008e90:	2201      	movs	r2, #1
 8008e92:	e003      	b.n	8008e9c <UART_SetConfig+0x904>
 8008e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e98:	e000      	b.n	8008e9c <UART_SetConfig+0x904>
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	fbb0 f2f2 	udiv	r2, r0, r2
 8008ea0:	6863      	ldr	r3, [r4, #4]
 8008ea2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8008ea6:	fbb2 f2f3 	udiv	r2, r2, r3
 8008eaa:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8008eac:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eae:	f1a2 0110 	sub.w	r1, r2, #16
 8008eb2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008eb6:	4299      	cmp	r1, r3
 8008eb8:	f200 810e 	bhi.w	80090d8 <UART_SetConfig+0xb40>
      huart->Instance->BRR = usartdiv;
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	60da      	str	r2, [r3, #12]
  huart->NbTxDataToProcess = 1;
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ec6:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8008eca:	2200      	movs	r2, #0
 8008ecc:	66e2      	str	r2, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8008ece:	6722      	str	r2, [r4, #112]	; 0x70
}
 8008ed0:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	e7e1      	b.n	8008e9c <UART_SetConfig+0x904>
 8008ed8:	2204      	movs	r2, #4
 8008eda:	e7df      	b.n	8008e9c <UART_SetConfig+0x904>
 8008edc:	2206      	movs	r2, #6
 8008ede:	e7dd      	b.n	8008e9c <UART_SetConfig+0x904>
 8008ee0:	2208      	movs	r2, #8
 8008ee2:	e7db      	b.n	8008e9c <UART_SetConfig+0x904>
 8008ee4:	220a      	movs	r2, #10
 8008ee6:	e7d9      	b.n	8008e9c <UART_SetConfig+0x904>
 8008ee8:	220c      	movs	r2, #12
 8008eea:	e7d7      	b.n	8008e9c <UART_SetConfig+0x904>
 8008eec:	2210      	movs	r2, #16
 8008eee:	e7d5      	b.n	8008e9c <UART_SetConfig+0x904>
 8008ef0:	2220      	movs	r2, #32
 8008ef2:	e7d3      	b.n	8008e9c <UART_SetConfig+0x904>
 8008ef4:	2240      	movs	r2, #64	; 0x40
 8008ef6:	e7d1      	b.n	8008e9c <UART_SetConfig+0x904>
 8008ef8:	2280      	movs	r2, #128	; 0x80
 8008efa:	e7cf      	b.n	8008e9c <UART_SetConfig+0x904>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008efe:	b1d3      	cbz	r3, 8008f36 <UART_SetConfig+0x99e>
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d021      	beq.n	8008f48 <UART_SetConfig+0x9b0>
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d021      	beq.n	8008f4c <UART_SetConfig+0x9b4>
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d021      	beq.n	8008f50 <UART_SetConfig+0x9b8>
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d021      	beq.n	8008f54 <UART_SetConfig+0x9bc>
 8008f10:	2b05      	cmp	r3, #5
 8008f12:	d021      	beq.n	8008f58 <UART_SetConfig+0x9c0>
 8008f14:	2b06      	cmp	r3, #6
 8008f16:	d021      	beq.n	8008f5c <UART_SetConfig+0x9c4>
 8008f18:	2b07      	cmp	r3, #7
 8008f1a:	d021      	beq.n	8008f60 <UART_SetConfig+0x9c8>
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	d021      	beq.n	8008f64 <UART_SetConfig+0x9cc>
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	d021      	beq.n	8008f68 <UART_SetConfig+0x9d0>
 8008f24:	2b0a      	cmp	r3, #10
 8008f26:	d021      	beq.n	8008f6c <UART_SetConfig+0x9d4>
 8008f28:	2b0b      	cmp	r3, #11
 8008f2a:	d001      	beq.n	8008f30 <UART_SetConfig+0x998>
 8008f2c:	4a12      	ldr	r2, [pc, #72]	; (8008f78 <UART_SetConfig+0x9e0>)
 8008f2e:	e003      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f30:	f24f 4224 	movw	r2, #62500	; 0xf424
 8008f34:	e000      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f36:	4a10      	ldr	r2, [pc, #64]	; (8008f78 <UART_SetConfig+0x9e0>)
 8008f38:	6863      	ldr	r3, [r4, #4]
 8008f3a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8008f3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f42:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f44:	2000      	movs	r0, #0
        break;
 8008f46:	e7b2      	b.n	8008eae <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f48:	4a0c      	ldr	r2, [pc, #48]	; (8008f7c <UART_SetConfig+0x9e4>)
 8008f4a:	e7f5      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f4c:	4a0d      	ldr	r2, [pc, #52]	; (8008f84 <UART_SetConfig+0x9ec>)
 8008f4e:	e7f3      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f50:	4a0e      	ldr	r2, [pc, #56]	; (8008f8c <UART_SetConfig+0x9f4>)
 8008f52:	e7f1      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f54:	4a0e      	ldr	r2, [pc, #56]	; (8008f90 <UART_SetConfig+0x9f8>)
 8008f56:	e7ef      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f58:	4a11      	ldr	r2, [pc, #68]	; (8008fa0 <UART_SetConfig+0xa08>)
 8008f5a:	e7ed      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f5c:	4a11      	ldr	r2, [pc, #68]	; (8008fa4 <UART_SetConfig+0xa0c>)
 8008f5e:	e7eb      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f60:	4a0c      	ldr	r2, [pc, #48]	; (8008f94 <UART_SetConfig+0x9fc>)
 8008f62:	e7e9      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f64:	4a0c      	ldr	r2, [pc, #48]	; (8008f98 <UART_SetConfig+0xa00>)
 8008f66:	e7e7      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f68:	4a0c      	ldr	r2, [pc, #48]	; (8008f9c <UART_SetConfig+0xa04>)
 8008f6a:	e7e5      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f6c:	4a01      	ldr	r2, [pc, #4]	; (8008f74 <UART_SetConfig+0x9dc>)
 8008f6e:	e7e3      	b.n	8008f38 <UART_SetConfig+0x9a0>
 8008f70:	01e84800 	.word	0x01e84800
 8008f74:	0001e848 	.word	0x0001e848
 8008f78:	00f42400 	.word	0x00f42400
 8008f7c:	007a1200 	.word	0x007a1200
 8008f80:	00516154 	.word	0x00516154
 8008f84:	003d0900 	.word	0x003d0900
 8008f88:	0030d400 	.word	0x0030d400
 8008f8c:	0028b0aa 	.word	0x0028b0aa
 8008f90:	001e8480 	.word	0x001e8480
 8008f94:	000f4240 	.word	0x000f4240
 8008f98:	0007a120 	.word	0x0007a120
 8008f9c:	0003d090 	.word	0x0003d090
 8008fa0:	00186a00 	.word	0x00186a00
 8008fa4:	00145855 	.word	0x00145855
 8008fa8:	00155500 	.word	0x00155500
 8008fac:	000ccc00 	.word	0x000ccc00
 8008fb0:	000aaa00 	.word	0x000aaa00
        pclk = HAL_RCC_GetSysClockFreq();
 8008fb4:	f7fd ffde 	bl	8006f74 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fba:	b1d3      	cbz	r3, 8008ff2 <UART_SetConfig+0xa5a>
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d023      	beq.n	8009008 <UART_SetConfig+0xa70>
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d023      	beq.n	800900c <UART_SetConfig+0xa74>
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d023      	beq.n	8009010 <UART_SetConfig+0xa78>
 8008fc8:	2b04      	cmp	r3, #4
 8008fca:	d023      	beq.n	8009014 <UART_SetConfig+0xa7c>
 8008fcc:	2b05      	cmp	r3, #5
 8008fce:	d023      	beq.n	8009018 <UART_SetConfig+0xa80>
 8008fd0:	2b06      	cmp	r3, #6
 8008fd2:	d023      	beq.n	800901c <UART_SetConfig+0xa84>
 8008fd4:	2b07      	cmp	r3, #7
 8008fd6:	d023      	beq.n	8009020 <UART_SetConfig+0xa88>
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d023      	beq.n	8009024 <UART_SetConfig+0xa8c>
 8008fdc:	2b09      	cmp	r3, #9
 8008fde:	d023      	beq.n	8009028 <UART_SetConfig+0xa90>
 8008fe0:	2b0a      	cmp	r3, #10
 8008fe2:	d023      	beq.n	800902c <UART_SetConfig+0xa94>
 8008fe4:	2b0b      	cmp	r3, #11
 8008fe6:	d001      	beq.n	8008fec <UART_SetConfig+0xa54>
 8008fe8:	2201      	movs	r2, #1
 8008fea:	e003      	b.n	8008ff4 <UART_SetConfig+0xa5c>
 8008fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ff0:	e000      	b.n	8008ff4 <UART_SetConfig+0xa5c>
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	fbb0 f2f2 	udiv	r2, r0, r2
 8008ff8:	6863      	ldr	r3, [r4, #4]
 8008ffa:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8008ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8009002:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8009004:	2000      	movs	r0, #0
        break;
 8009006:	e752      	b.n	8008eae <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009008:	2202      	movs	r2, #2
 800900a:	e7f3      	b.n	8008ff4 <UART_SetConfig+0xa5c>
 800900c:	2204      	movs	r2, #4
 800900e:	e7f1      	b.n	8008ff4 <UART_SetConfig+0xa5c>
 8009010:	2206      	movs	r2, #6
 8009012:	e7ef      	b.n	8008ff4 <UART_SetConfig+0xa5c>
 8009014:	2208      	movs	r2, #8
 8009016:	e7ed      	b.n	8008ff4 <UART_SetConfig+0xa5c>
 8009018:	220a      	movs	r2, #10
 800901a:	e7eb      	b.n	8008ff4 <UART_SetConfig+0xa5c>
 800901c:	220c      	movs	r2, #12
 800901e:	e7e9      	b.n	8008ff4 <UART_SetConfig+0xa5c>
 8009020:	2210      	movs	r2, #16
 8009022:	e7e7      	b.n	8008ff4 <UART_SetConfig+0xa5c>
 8009024:	2220      	movs	r2, #32
 8009026:	e7e5      	b.n	8008ff4 <UART_SetConfig+0xa5c>
 8009028:	2240      	movs	r2, #64	; 0x40
 800902a:	e7e3      	b.n	8008ff4 <UART_SetConfig+0xa5c>
 800902c:	2280      	movs	r2, #128	; 0x80
 800902e:	e7e1      	b.n	8008ff4 <UART_SetConfig+0xa5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009032:	b1d3      	cbz	r3, 800906a <UART_SetConfig+0xad2>
 8009034:	2b01      	cmp	r3, #1
 8009036:	d022      	beq.n	800907e <UART_SetConfig+0xae6>
 8009038:	2b02      	cmp	r3, #2
 800903a:	d023      	beq.n	8009084 <UART_SetConfig+0xaec>
 800903c:	2b03      	cmp	r3, #3
 800903e:	d024      	beq.n	800908a <UART_SetConfig+0xaf2>
 8009040:	2b04      	cmp	r3, #4
 8009042:	d025      	beq.n	8009090 <UART_SetConfig+0xaf8>
 8009044:	2b05      	cmp	r3, #5
 8009046:	d026      	beq.n	8009096 <UART_SetConfig+0xafe>
 8009048:	2b06      	cmp	r3, #6
 800904a:	d027      	beq.n	800909c <UART_SetConfig+0xb04>
 800904c:	2b07      	cmp	r3, #7
 800904e:	d028      	beq.n	80090a2 <UART_SetConfig+0xb0a>
 8009050:	2b08      	cmp	r3, #8
 8009052:	d029      	beq.n	80090a8 <UART_SetConfig+0xb10>
 8009054:	2b09      	cmp	r3, #9
 8009056:	d02a      	beq.n	80090ae <UART_SetConfig+0xb16>
 8009058:	2b0a      	cmp	r3, #10
 800905a:	d02b      	beq.n	80090b4 <UART_SetConfig+0xb1c>
 800905c:	2b0b      	cmp	r3, #11
 800905e:	d002      	beq.n	8009066 <UART_SetConfig+0xace>
 8009060:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009064:	e003      	b.n	800906e <UART_SetConfig+0xad6>
 8009066:	2280      	movs	r2, #128	; 0x80
 8009068:	e001      	b.n	800906e <UART_SetConfig+0xad6>
 800906a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800906e:	6863      	ldr	r3, [r4, #4]
 8009070:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8009074:	fbb2 f2f3 	udiv	r2, r2, r3
 8009078:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800907a:	2000      	movs	r0, #0
        break;
 800907c:	e717      	b.n	8008eae <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800907e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009082:	e7f4      	b.n	800906e <UART_SetConfig+0xad6>
 8009084:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009088:	e7f1      	b.n	800906e <UART_SetConfig+0xad6>
 800908a:	f241 5255 	movw	r2, #5461	; 0x1555
 800908e:	e7ee      	b.n	800906e <UART_SetConfig+0xad6>
 8009090:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009094:	e7eb      	b.n	800906e <UART_SetConfig+0xad6>
 8009096:	f640 42cc 	movw	r2, #3276	; 0xccc
 800909a:	e7e8      	b.n	800906e <UART_SetConfig+0xad6>
 800909c:	f640 22aa 	movw	r2, #2730	; 0xaaa
 80090a0:	e7e5      	b.n	800906e <UART_SetConfig+0xad6>
 80090a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090a6:	e7e2      	b.n	800906e <UART_SetConfig+0xad6>
 80090a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090ac:	e7df      	b.n	800906e <UART_SetConfig+0xad6>
 80090ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090b2:	e7dc      	b.n	800906e <UART_SetConfig+0xad6>
 80090b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090b8:	e7d9      	b.n	800906e <UART_SetConfig+0xad6>
        ret = HAL_ERROR;
 80090ba:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80090bc:	2200      	movs	r2, #0
 80090be:	e6f6      	b.n	8008eae <UART_SetConfig+0x916>
        ret = HAL_ERROR;
 80090c0:	2001      	movs	r0, #1
 80090c2:	e6fd      	b.n	8008ec0 <UART_SetConfig+0x928>
 80090c4:	2000      	movs	r0, #0
 80090c6:	e6fb      	b.n	8008ec0 <UART_SetConfig+0x928>
        ret = HAL_ERROR;
 80090c8:	2001      	movs	r0, #1
 80090ca:	e6f9      	b.n	8008ec0 <UART_SetConfig+0x928>
 80090cc:	2001      	movs	r0, #1
 80090ce:	e6f7      	b.n	8008ec0 <UART_SetConfig+0x928>
          ret = HAL_ERROR;
 80090d0:	2001      	movs	r0, #1
 80090d2:	e6f5      	b.n	8008ec0 <UART_SetConfig+0x928>
      ret = HAL_ERROR;
 80090d4:	2001      	movs	r0, #1
 80090d6:	e6f3      	b.n	8008ec0 <UART_SetConfig+0x928>
      ret = HAL_ERROR;
 80090d8:	2001      	movs	r0, #1
 80090da:	e6f1      	b.n	8008ec0 <UART_SetConfig+0x928>

080090dc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80090de:	f013 0f01 	tst.w	r3, #1
 80090e2:	d006      	beq.n	80090f2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090e4:	6802      	ldr	r2, [r0, #0]
 80090e6:	6853      	ldr	r3, [r2, #4]
 80090e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80090ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80090ee:	430b      	orrs	r3, r1
 80090f0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80090f4:	f013 0f02 	tst.w	r3, #2
 80090f8:	d006      	beq.n	8009108 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090fa:	6802      	ldr	r2, [r0, #0]
 80090fc:	6853      	ldr	r3, [r2, #4]
 80090fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009102:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8009104:	430b      	orrs	r3, r1
 8009106:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009108:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800910a:	f013 0f04 	tst.w	r3, #4
 800910e:	d006      	beq.n	800911e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009110:	6802      	ldr	r2, [r0, #0]
 8009112:	6853      	ldr	r3, [r2, #4]
 8009114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009118:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800911a:	430b      	orrs	r3, r1
 800911c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800911e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009120:	f013 0f08 	tst.w	r3, #8
 8009124:	d006      	beq.n	8009134 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009126:	6802      	ldr	r2, [r0, #0]
 8009128:	6853      	ldr	r3, [r2, #4]
 800912a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800912e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009130:	430b      	orrs	r3, r1
 8009132:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009134:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009136:	f013 0f10 	tst.w	r3, #16
 800913a:	d006      	beq.n	800914a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800913c:	6802      	ldr	r2, [r0, #0]
 800913e:	6893      	ldr	r3, [r2, #8]
 8009140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009144:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8009146:	430b      	orrs	r3, r1
 8009148:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800914a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800914c:	f013 0f20 	tst.w	r3, #32
 8009150:	d006      	beq.n	8009160 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009152:	6802      	ldr	r2, [r0, #0]
 8009154:	6893      	ldr	r3, [r2, #8]
 8009156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800915a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800915c:	430b      	orrs	r3, r1
 800915e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009160:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009162:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009166:	d00a      	beq.n	800917e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009168:	6802      	ldr	r2, [r0, #0]
 800916a:	6853      	ldr	r3, [r2, #4]
 800916c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009170:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8009172:	430b      	orrs	r3, r1
 8009174:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009176:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800917c:	d00b      	beq.n	8009196 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800917e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009180:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009184:	d006      	beq.n	8009194 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009186:	6802      	ldr	r2, [r0, #0]
 8009188:	6853      	ldr	r3, [r2, #4]
 800918a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800918e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009190:	430b      	orrs	r3, r1
 8009192:	6053      	str	r3, [r2, #4]
}
 8009194:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009196:	6802      	ldr	r2, [r0, #0]
 8009198:	6853      	ldr	r3, [r2, #4]
 800919a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800919e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80091a0:	430b      	orrs	r3, r1
 80091a2:	6053      	str	r3, [r2, #4]
 80091a4:	e7eb      	b.n	800917e <UART_AdvFeatureConfig+0xa2>

080091a6 <UART_WaitOnFlagUntilTimeout>:
{
 80091a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091aa:	4604      	mov	r4, r0
 80091ac:	460f      	mov	r7, r1
 80091ae:	4616      	mov	r6, r2
 80091b0:	4698      	mov	r8, r3
 80091b2:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b4:	6823      	ldr	r3, [r4, #0]
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	ea37 0303 	bics.w	r3, r7, r3
 80091bc:	bf0c      	ite	eq
 80091be:	2301      	moveq	r3, #1
 80091c0:	2300      	movne	r3, #0
 80091c2:	42b3      	cmp	r3, r6
 80091c4:	d13f      	bne.n	8009246 <UART_WaitOnFlagUntilTimeout+0xa0>
    if (Timeout != HAL_MAX_DELAY)
 80091c6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80091ca:	d0f3      	beq.n	80091b4 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091cc:	f7fa fd6a 	bl	8003ca4 <HAL_GetTick>
 80091d0:	eba0 0008 	sub.w	r0, r0, r8
 80091d4:	42a8      	cmp	r0, r5
 80091d6:	d822      	bhi.n	800921e <UART_WaitOnFlagUntilTimeout+0x78>
 80091d8:	b30d      	cbz	r5, 800921e <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	f012 0f04 	tst.w	r2, #4
 80091e2:	d0e7      	beq.n	80091b4 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091e4:	69da      	ldr	r2, [r3, #28]
 80091e6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80091ea:	d0e3      	beq.n	80091b4 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091f0:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80091f2:	6822      	ldr	r2, [r4, #0]
 80091f4:	6813      	ldr	r3, [r2, #0]
 80091f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091fa:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fc:	6822      	ldr	r2, [r4, #0]
 80091fe:	6893      	ldr	r3, [r2, #8]
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8009206:	2320      	movs	r3, #32
 8009208:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800920c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009210:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 8009214:	2300      	movs	r3, #0
 8009216:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800921a:	2003      	movs	r0, #3
 800921c:	e014      	b.n	8009248 <UART_WaitOnFlagUntilTimeout+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800921e:	6822      	ldr	r2, [r4, #0]
 8009220:	6813      	ldr	r3, [r2, #0]
 8009222:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009226:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009228:	6822      	ldr	r2, [r4, #0]
 800922a:	6893      	ldr	r3, [r2, #8]
 800922c:	f023 0301 	bic.w	r3, r3, #1
 8009230:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009232:	2320      	movs	r3, #32
 8009234:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009238:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800923c:	2300      	movs	r3, #0
 800923e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 8009242:	2003      	movs	r0, #3
 8009244:	e000      	b.n	8009248 <UART_WaitOnFlagUntilTimeout+0xa2>
  return HAL_OK;
 8009246:	2000      	movs	r0, #0
}
 8009248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800924c <UART_CheckIdleState>:
{
 800924c:	b530      	push	{r4, r5, lr}
 800924e:	b083      	sub	sp, #12
 8009250:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009252:	2300      	movs	r3, #0
 8009254:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8009258:	f7fa fd24 	bl	8003ca4 <HAL_GetTick>
 800925c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f013 0f08 	tst.w	r3, #8
 8009266:	d10e      	bne.n	8009286 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f013 0f04 	tst.w	r3, #4
 8009270:	d117      	bne.n	80092a2 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8009272:	2320      	movs	r3, #32
 8009274:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009278:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800927c:	2000      	movs	r0, #0
 800927e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8009282:	b003      	add	sp, #12
 8009284:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009286:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	4603      	mov	r3, r0
 800928e:	2200      	movs	r2, #0
 8009290:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009294:	4620      	mov	r0, r4
 8009296:	f7ff ff86 	bl	80091a6 <UART_WaitOnFlagUntilTimeout>
 800929a:	2800      	cmp	r0, #0
 800929c:	d0e4      	beq.n	8009268 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800929e:	2003      	movs	r0, #3
 80092a0:	e7ef      	b.n	8009282 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	462b      	mov	r3, r5
 80092aa:	2200      	movs	r2, #0
 80092ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092b0:	4620      	mov	r0, r4
 80092b2:	f7ff ff78 	bl	80091a6 <UART_WaitOnFlagUntilTimeout>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d0db      	beq.n	8009272 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80092ba:	2003      	movs	r0, #3
 80092bc:	e7e1      	b.n	8009282 <UART_CheckIdleState+0x36>

080092be <HAL_UART_Init>:
  if (huart == NULL)
 80092be:	b378      	cbz	r0, 8009320 <HAL_UART_Init+0x62>
{
 80092c0:	b510      	push	{r4, lr}
 80092c2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80092c4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80092c8:	b30b      	cbz	r3, 800930e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80092ca:	2324      	movs	r3, #36	; 0x24
 80092cc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80092d0:	6822      	ldr	r2, [r4, #0]
 80092d2:	6813      	ldr	r3, [r2, #0]
 80092d4:	f023 0301 	bic.w	r3, r3, #1
 80092d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092da:	4620      	mov	r0, r4
 80092dc:	f7ff f95c 	bl	8008598 <UART_SetConfig>
 80092e0:	2801      	cmp	r0, #1
 80092e2:	d013      	beq.n	800930c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80092e6:	b9bb      	cbnz	r3, 8009318 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092e8:	6822      	ldr	r2, [r4, #0]
 80092ea:	6853      	ldr	r3, [r2, #4]
 80092ec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80092f0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	6893      	ldr	r3, [r2, #8]
 80092f6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80092fa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80092fc:	6822      	ldr	r2, [r4, #0]
 80092fe:	6813      	ldr	r3, [r2, #0]
 8009300:	f043 0301 	orr.w	r3, r3, #1
 8009304:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8009306:	4620      	mov	r0, r4
 8009308:	f7ff ffa0 	bl	800924c <UART_CheckIdleState>
}
 800930c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800930e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8009312:	f7fa fc3b 	bl	8003b8c <HAL_UART_MspInit>
 8009316:	e7d8      	b.n	80092ca <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8009318:	4620      	mov	r0, r4
 800931a:	f7ff fedf 	bl	80090dc <UART_AdvFeatureConfig>
 800931e:	e7e3      	b.n	80092e8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8009320:	2001      	movs	r0, #1
}
 8009322:	4770      	bx	lr

08009324 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009324:	b410      	push	{r4}
 8009326:	b085      	sub	sp, #20
 8009328:	4602      	mov	r2, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800932a:	4b1a      	ldr	r3, [pc, #104]	; (8009394 <UARTEx_SetNbDataToProcess+0x70>)
 800932c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009330:	ac04      	add	r4, sp, #16
 8009332:	e904 0003 	stmdb	r4, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009336:	466c      	mov	r4, sp
 8009338:	3308      	adds	r3, #8
 800933a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800933e:	e884 0003 	stmia.w	r4, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009342:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009344:	b1fb      	cbz	r3, 8009386 <UARTEx_SetNbDataToProcess+0x62>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009346:	6811      	ldr	r1, [r2, #0]
 8009348:	688b      	ldr	r3, [r1, #8]
 800934a:	f3c3 6342 	ubfx	r3, r3, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800934e:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009350:	a904      	add	r1, sp, #16
 8009352:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 8009356:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 800935a:	00c9      	lsls	r1, r1, #3
 800935c:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8009360:	fb91 f1f0 	sdiv	r1, r1, r0
 8009364:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009368:	a904      	add	r1, sp, #16
 800936a:	440b      	add	r3, r1
 800936c:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8009370:	00c9      	lsls	r1, r1, #3
 8009372:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009376:	fb91 f3f3 	sdiv	r3, r1, r3
 800937a:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
  }
}
 800937e:	b005      	add	sp, #20
 8009380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009384:	4770      	bx	lr
    huart->NbTxDataToProcess = 1U;
 8009386:	2301      	movs	r3, #1
 8009388:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800938c:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 8009390:	e7f5      	b.n	800937e <UARTEx_SetNbDataToProcess+0x5a>
 8009392:	bf00      	nop
 8009394:	0800f5b4 	.word	0x0800f5b4

08009398 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8009398:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d018      	beq.n	80093d2 <HAL_UARTEx_DisableFifoMode+0x3a>
 80093a0:	2301      	movs	r3, #1
 80093a2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80093a6:	2324      	movs	r3, #36	; 0x24
 80093a8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093ac:	6803      	ldr	r3, [r0, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80093b0:	6819      	ldr	r1, [r3, #0]
 80093b2:	f021 0101 	bic.w	r1, r1, #1
 80093b6:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093b8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093bc:	2300      	movs	r3, #0
 80093be:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093c0:	6801      	ldr	r1, [r0, #0]
 80093c2:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80093c4:	2220      	movs	r2, #32
 80093c6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80093ca:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 80093ce:	4618      	mov	r0, r3
 80093d0:	4770      	bx	lr
  __HAL_LOCK(huart);
 80093d2:	2002      	movs	r0, #2
}
 80093d4:	4770      	bx	lr

080093d6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80093d6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80093d8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d01d      	beq.n	800941c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80093e0:	4604      	mov	r4, r0
 80093e2:	2301      	movs	r3, #1
 80093e4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80093e8:	2324      	movs	r3, #36	; 0x24
 80093ea:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093ee:	6803      	ldr	r3, [r0, #0]
 80093f0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	f022 0201 	bic.w	r2, r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093fa:	6802      	ldr	r2, [r0, #0]
 80093fc:	6893      	ldr	r3, [r2, #8]
 80093fe:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8009402:	4319      	orrs	r1, r3
 8009404:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009406:	f7ff ff8d 	bl	8009324 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800940e:	2320      	movs	r3, #32
 8009410:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8009414:	2000      	movs	r0, #0
 8009416:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800941a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800941c:	2002      	movs	r0, #2
 800941e:	e7fc      	b.n	800941a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08009420 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009420:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009422:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8009426:	2b01      	cmp	r3, #1
 8009428:	d01d      	beq.n	8009466 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800942a:	4604      	mov	r4, r0
 800942c:	2301      	movs	r3, #1
 800942e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8009432:	2324      	movs	r3, #36	; 0x24
 8009434:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009438:	6803      	ldr	r3, [r0, #0]
 800943a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	f022 0201 	bic.w	r2, r2, #1
 8009442:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009444:	6802      	ldr	r2, [r0, #0]
 8009446:	6893      	ldr	r3, [r2, #8]
 8009448:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800944c:	4319      	orrs	r1, r3
 800944e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009450:	f7ff ff68 	bl	8009324 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009458:	2320      	movs	r3, #32
 800945a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800945e:	2000      	movs	r0, #0
 8009460:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8009464:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009466:	2002      	movs	r0, #2
 8009468:	e7fc      	b.n	8009464 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800946c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800946c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009470:	b99b      	cbnz	r3, 800949a <osKernelInitialize+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009472:	f3ef 8310 	mrs	r3, PRIMASK
 8009476:	b99b      	cbnz	r3, 80094a0 <osKernelInitialize+0x34>
 8009478:	4b0c      	ldr	r3, [pc, #48]	; (80094ac <osKernelInitialize+0x40>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b02      	cmp	r3, #2
 800947e:	d005      	beq.n	800948c <osKernelInitialize+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8009480:	b98b      	cbnz	r3, 80094a6 <osKernelInitialize+0x3a>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009482:	4b0a      	ldr	r3, [pc, #40]	; (80094ac <osKernelInitialize+0x40>)
 8009484:	2201      	movs	r2, #1
 8009486:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009488:	2000      	movs	r0, #0
 800948a:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800948c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8009490:	2a00      	cmp	r2, #0
 8009492:	d0f5      	beq.n	8009480 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8009494:	f06f 0005 	mvn.w	r0, #5
 8009498:	4770      	bx	lr
 800949a:	f06f 0005 	mvn.w	r0, #5
 800949e:	4770      	bx	lr
 80094a0:	f06f 0005 	mvn.w	r0, #5
 80094a4:	4770      	bx	lr
    } else {
      stat = osError;
 80094a6:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80094aa:	4770      	bx	lr
 80094ac:	20000ca4 	.word	0x20000ca4

080094b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80094b0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094b2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80094b6:	b9b3      	cbnz	r3, 80094e6 <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094b8:	f3ef 8310 	mrs	r3, PRIMASK
 80094bc:	b9b3      	cbnz	r3, 80094ec <osKernelStart+0x3c>
 80094be:	4b0e      	ldr	r3, [pc, #56]	; (80094f8 <osKernelStart+0x48>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d008      	beq.n	80094d8 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d113      	bne.n	80094f2 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 80094ca:	4b0b      	ldr	r3, [pc, #44]	; (80094f8 <osKernelStart+0x48>)
 80094cc:	2202      	movs	r2, #2
 80094ce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80094d0:	f001 ffae 	bl	800b430 <vTaskStartScheduler>
      stat = osOK;
 80094d4:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80094d6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094d8:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80094dc:	2a00      	cmp	r2, #0
 80094de:	d0f2      	beq.n	80094c6 <osKernelStart+0x16>
    stat = osErrorISR;
 80094e0:	f06f 0005 	mvn.w	r0, #5
 80094e4:	e7f7      	b.n	80094d6 <osKernelStart+0x26>
 80094e6:	f06f 0005 	mvn.w	r0, #5
 80094ea:	e7f4      	b.n	80094d6 <osKernelStart+0x26>
 80094ec:	f06f 0005 	mvn.w	r0, #5
 80094f0:	e7f1      	b.n	80094d6 <osKernelStart+0x26>
      stat = osError;
 80094f2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80094f6:	e7ee      	b.n	80094d6 <osKernelStart+0x26>
 80094f8:	20000ca4 	.word	0x20000ca4

080094fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80094fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094fe:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009500:	2400      	movs	r4, #0
 8009502:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009504:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009508:	bb4c      	cbnz	r4, 800955e <osThreadNew+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800950a:	f3ef 8310 	mrs	r3, PRIMASK
 800950e:	bb33      	cbnz	r3, 800955e <osThreadNew+0x62>
 8009510:	4b33      	ldr	r3, [pc, #204]	; (80095e0 <osThreadNew+0xe4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b02      	cmp	r3, #2
 8009516:	d025      	beq.n	8009564 <osThreadNew+0x68>
 8009518:	b308      	cbz	r0, 800955e <osThreadNew+0x62>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 800951a:	2300      	movs	r3, #0
 800951c:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8009520:	b392      	cbz	r2, 8009588 <osThreadNew+0x8c>
      if (attr->name != NULL) {
 8009522:	6816      	ldr	r6, [r2, #0]
 8009524:	b31e      	cbz	r6, 800956e <osThreadNew+0x72>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009526:	6994      	ldr	r4, [r2, #24]
 8009528:	b904      	cbnz	r4, 800952c <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 800952a:	2418      	movs	r4, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800952c:	1e63      	subs	r3, r4, #1
 800952e:	2b37      	cmp	r3, #55	; 0x37
 8009530:	d852      	bhi.n	80095d8 <osThreadNew+0xdc>
 8009532:	6853      	ldr	r3, [r2, #4]
 8009534:	f013 0f01 	tst.w	r3, #1
 8009538:	d150      	bne.n	80095dc <osThreadNew+0xe0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800953a:	6955      	ldr	r5, [r2, #20]
 800953c:	b1d5      	cbz	r5, 8009574 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800953e:	ea4f 0c95 	mov.w	ip, r5, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009542:	6893      	ldr	r3, [r2, #8]
 8009544:	b12b      	cbz	r3, 8009552 <osThreadNew+0x56>
 8009546:	68d7      	ldr	r7, [r2, #12]
 8009548:	2f5b      	cmp	r7, #91	; 0x5b
 800954a:	d902      	bls.n	8009552 <osThreadNew+0x56>
 800954c:	6917      	ldr	r7, [r2, #16]
 800954e:	b107      	cbz	r7, 8009552 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009550:	bb0d      	cbnz	r5, 8009596 <osThreadNew+0x9a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009552:	b193      	cbz	r3, 800957a <osThreadNew+0x7e>
    mem   = -1;
 8009554:	f04f 35ff 	mov.w	r5, #4294967295
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8009558:	2d01      	cmp	r5, #1
 800955a:	d023      	beq.n	80095a4 <osThreadNew+0xa8>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800955c:	b375      	cbz	r5, 80095bc <osThreadNew+0xc0>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800955e:	9804      	ldr	r0, [sp, #16]
}
 8009560:	b007      	add	sp, #28
 8009562:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009564:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f8      	bne.n	800955e <osThreadNew+0x62>
 800956c:	e7d4      	b.n	8009518 <osThreadNew+0x1c>
    name  = &empty;
 800956e:	f10d 0617 	add.w	r6, sp, #23
 8009572:	e7d8      	b.n	8009526 <osThreadNew+0x2a>
    stack = configMINIMAL_STACK_SIZE;
 8009574:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8009578:	e7e3      	b.n	8009542 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800957a:	68d3      	ldr	r3, [r2, #12]
 800957c:	b96b      	cbnz	r3, 800959a <osThreadNew+0x9e>
 800957e:	6913      	ldr	r3, [r2, #16]
 8009580:	b173      	cbz	r3, 80095a0 <osThreadNew+0xa4>
    mem   = -1;
 8009582:	f04f 35ff 	mov.w	r5, #4294967295
 8009586:	e7e7      	b.n	8009558 <osThreadNew+0x5c>
      mem = 0;
 8009588:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800958a:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 800958c:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8009590:	f10d 0617 	add.w	r6, sp, #23
 8009594:	e7e0      	b.n	8009558 <osThreadNew+0x5c>
        mem = 1;
 8009596:	2501      	movs	r5, #1
 8009598:	e7de      	b.n	8009558 <osThreadNew+0x5c>
    mem   = -1;
 800959a:	f04f 35ff 	mov.w	r5, #4294967295
 800959e:	e7db      	b.n	8009558 <osThreadNew+0x5c>
          mem = 0;
 80095a0:	2500      	movs	r5, #0
 80095a2:	e7d9      	b.n	8009558 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80095a4:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80095a6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80095a8:	9202      	str	r2, [sp, #8]
 80095aa:	9301      	str	r3, [sp, #4]
 80095ac:	9400      	str	r4, [sp, #0]
 80095ae:	460b      	mov	r3, r1
 80095b0:	4662      	mov	r2, ip
 80095b2:	4631      	mov	r1, r6
 80095b4:	f001 fed0 	bl	800b358 <xTaskCreateStatic>
 80095b8:	9004      	str	r0, [sp, #16]
 80095ba:	e7d0      	b.n	800955e <osThreadNew+0x62>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80095bc:	aa04      	add	r2, sp, #16
 80095be:	9201      	str	r2, [sp, #4]
 80095c0:	9400      	str	r4, [sp, #0]
 80095c2:	460b      	mov	r3, r1
 80095c4:	fa1f f28c 	uxth.w	r2, ip
 80095c8:	4631      	mov	r1, r6
 80095ca:	f001 fefe 	bl	800b3ca <xTaskCreate>
 80095ce:	2801      	cmp	r0, #1
 80095d0:	d0c5      	beq.n	800955e <osThreadNew+0x62>
          hTask = NULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	9304      	str	r3, [sp, #16]
 80095d6:	e7c2      	b.n	800955e <osThreadNew+0x62>
        return (NULL);
 80095d8:	2000      	movs	r0, #0
 80095da:	e7c1      	b.n	8009560 <osThreadNew+0x64>
 80095dc:	2000      	movs	r0, #0
 80095de:	e7bf      	b.n	8009560 <osThreadNew+0x64>
 80095e0:	20000ca4 	.word	0x20000ca4

080095e4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80095e4:	b530      	push	{r4, r5, lr}
 80095e6:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80095e8:	b370      	cbz	r0, 8009648 <osThreadFlagsSet+0x64>
 80095ea:	4605      	mov	r5, r0
 80095ec:	2900      	cmp	r1, #0
 80095ee:	db2b      	blt.n	8009648 <osThreadFlagsSet+0x64>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 80095f0:	f04f 33ff 	mov.w	r3, #4294967295
 80095f4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095f6:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 80095fa:	b94b      	cbnz	r3, 8009610 <osThreadFlagsSet+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009600:	b933      	cbnz	r3, 8009610 <osThreadFlagsSet+0x2c>
 8009602:	4b1a      	ldr	r3, [pc, #104]	; (800966c <osThreadFlagsSet+0x88>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b02      	cmp	r3, #2
 8009608:	d124      	bne.n	8009654 <osThreadFlagsSet+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800960a:	f3ef 8311 	mrs	r3, BASEPRI
 800960e:	b30b      	cbz	r3, 8009654 <osThreadFlagsSet+0x70>
      yield = pdFALSE;
 8009610:	2400      	movs	r4, #0
 8009612:	ab04      	add	r3, sp, #16
 8009614:	f843 4d08 	str.w	r4, [r3, #-8]!

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	4623      	mov	r3, r4
 800961c:	2201      	movs	r2, #1
 800961e:	4628      	mov	r0, r5
 8009620:	f002 fbda 	bl	800bdd8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009624:	9400      	str	r4, [sp, #0]
 8009626:	ab03      	add	r3, sp, #12
 8009628:	4622      	mov	r2, r4
 800962a:	4621      	mov	r1, r4
 800962c:	4628      	mov	r0, r5
 800962e:	f002 fbd3 	bl	800bdd8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009632:	9b02      	ldr	r3, [sp, #8]
 8009634:	b15b      	cbz	r3, 800964e <osThreadFlagsSet+0x6a>
 8009636:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <osThreadFlagsSet+0x8c>)
 8009638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	e002      	b.n	800964e <osThreadFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8009648:	f06f 0303 	mvn.w	r3, #3
 800964c:	9303      	str	r3, [sp, #12]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 800964e:	9803      	ldr	r0, [sp, #12]
 8009650:	b005      	add	sp, #20
 8009652:	bd30      	pop	{r4, r5, pc}
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009654:	2300      	movs	r3, #0
 8009656:	2201      	movs	r2, #1
 8009658:	4628      	mov	r0, r5
 800965a:	f002 fb4b 	bl	800bcf4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800965e:	ab03      	add	r3, sp, #12
 8009660:	2200      	movs	r2, #0
 8009662:	4611      	mov	r1, r2
 8009664:	4628      	mov	r0, r5
 8009666:	f002 fb45 	bl	800bcf4 <xTaskGenericNotify>
 800966a:	e7f0      	b.n	800964e <osThreadFlagsSet+0x6a>
 800966c:	20000ca4 	.word	0x20000ca4
 8009670:	e000ed04 	.word	0xe000ed04

08009674 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009678:	f3ef 8305 	mrs	r3, IPSR
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800967c:	bb5b      	cbnz	r3, 80096d6 <osThreadFlagsClear+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800967e:	f3ef 8310 	mrs	r3, PRIMASK
 8009682:	bb6b      	cbnz	r3, 80096e0 <osThreadFlagsClear+0x6c>
 8009684:	4b19      	ldr	r3, [pc, #100]	; (80096ec <osThreadFlagsClear+0x78>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b02      	cmp	r3, #2
 800968a:	d00f      	beq.n	80096ac <osThreadFlagsClear+0x38>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800968c:	2800      	cmp	r0, #0
 800968e:	db2a      	blt.n	80096e6 <osThreadFlagsClear+0x72>
 8009690:	4604      	mov	r4, r0
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8009692:	f002 f9db 	bl	800ba4c <xTaskGetCurrentTaskHandle>
 8009696:	4606      	mov	r6, r0

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8009698:	ab01      	add	r3, sp, #4
 800969a:	2200      	movs	r2, #0
 800969c:	4611      	mov	r1, r2
 800969e:	f002 fb29 	bl	800bcf4 <xTaskGenericNotify>
 80096a2:	2801      	cmp	r0, #1
 80096a4:	d009      	beq.n	80096ba <osThreadFlagsClear+0x46>
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
        rflags = (uint32_t)osError;
      }
    }
    else {
      rflags = (uint32_t)osError;
 80096a6:	f04f 35ff 	mov.w	r5, #4294967295
 80096aa:	e016      	b.n	80096da <osThreadFlagsClear+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096ac:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0eb      	beq.n	800968c <osThreadFlagsClear+0x18>
    rflags = (uint32_t)osErrorISR;
 80096b4:	f06f 0505 	mvn.w	r5, #5
 80096b8:	e00f      	b.n	80096da <osThreadFlagsClear+0x66>
      rflags = cflags;
 80096ba:	9d01      	ldr	r5, [sp, #4]
      cflags &= ~flags;
 80096bc:	ea25 0104 	bic.w	r1, r5, r4
 80096c0:	9101      	str	r1, [sp, #4]
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80096c2:	2300      	movs	r3, #0
 80096c4:	2203      	movs	r2, #3
 80096c6:	4630      	mov	r0, r6
 80096c8:	f002 fb14 	bl	800bcf4 <xTaskGenericNotify>
 80096cc:	2801      	cmp	r0, #1
 80096ce:	d004      	beq.n	80096da <osThreadFlagsClear+0x66>
        rflags = (uint32_t)osError;
 80096d0:	f04f 35ff 	mov.w	r5, #4294967295
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80096d4:	e001      	b.n	80096da <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorISR;
 80096d6:	f06f 0505 	mvn.w	r5, #5
}
 80096da:	4628      	mov	r0, r5
 80096dc:	b002      	add	sp, #8
 80096de:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 80096e0:	f06f 0505 	mvn.w	r5, #5
 80096e4:	e7f9      	b.n	80096da <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorParameter;
 80096e6:	f06f 0503 	mvn.w	r5, #3
 80096ea:	e7f6      	b.n	80096da <osThreadFlagsClear+0x66>
 80096ec:	20000ca4 	.word	0x20000ca4

080096f0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80096f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096f6:	f3ef 8305 	mrs	r3, IPSR
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d14d      	bne.n	800979a <osThreadFlagsWait+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096fe:	f3ef 8710 	mrs	r7, PRIMASK
 8009702:	463d      	mov	r5, r7
 8009704:	2f00      	cmp	r7, #0
 8009706:	d14e      	bne.n	80097a6 <osThreadFlagsWait+0xb6>
 8009708:	4b2b      	ldr	r3, [pc, #172]	; (80097b8 <osThreadFlagsWait+0xc8>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b02      	cmp	r3, #2
 800970e:	d00d      	beq.n	800972c <osThreadFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009710:	2800      	cmp	r0, #0
 8009712:	db4b      	blt.n	80097ac <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009714:	f011 0f02 	tst.w	r1, #2
 8009718:	d00f      	beq.n	800973a <osThreadFlagsWait+0x4a>
      clear = 0U;
 800971a:	46b8      	mov	r8, r7
 800971c:	4617      	mov	r7, r2
 800971e:	468a      	mov	sl, r1
 8009720:	4681      	mov	r9, r0
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8009722:	f001 fed7 	bl	800b4d4 <xTaskGetTickCount>
 8009726:	4683      	mov	fp, r0
    tout   = timeout;
 8009728:	463e      	mov	r6, r7
 800972a:	e028      	b.n	800977e <osThreadFlagsWait+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800972c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0ed      	beq.n	8009710 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009734:	f06f 0505 	mvn.w	r5, #5
 8009738:	e031      	b.n	800979e <osThreadFlagsWait+0xae>
      clear = flags;
 800973a:	4680      	mov	r8, r0
 800973c:	e7ee      	b.n	800971c <osThreadFlagsWait+0x2c>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 800973e:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 8009742:	9b01      	ldr	r3, [sp, #4]
 8009744:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009746:	f01a 0f01 	tst.w	sl, #1
 800974a:	d00b      	beq.n	8009764 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 800974c:	ea39 0305 	bics.w	r3, r9, r5
 8009750:	d025      	beq.n	800979e <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 8009752:	b377      	cbz	r7, 80097b2 <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009754:	f001 febe 	bl	800b4d4 <xTaskGetTickCount>
 8009758:	eba0 000b 	sub.w	r0, r0, fp

        if (td > tout) {
 800975c:	4286      	cmp	r6, r0
 800975e:	d309      	bcc.n	8009774 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8009760:	1a36      	subs	r6, r6, r0
 8009762:	e00b      	b.n	800977c <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8009764:	ea19 0f05 	tst.w	r9, r5
 8009768:	d119      	bne.n	800979e <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 800976a:	2f00      	cmp	r7, #0
 800976c:	d1f2      	bne.n	8009754 <osThreadFlagsWait+0x64>
              rflags = (uint32_t)osErrorResource;
 800976e:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 8009772:	e014      	b.n	800979e <osThreadFlagsWait+0xae>
          tout  = 0;
 8009774:	2600      	movs	r6, #0
 8009776:	e001      	b.n	800977c <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8009778:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 800977c:	b17c      	cbz	r4, 800979e <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800977e:	4633      	mov	r3, r6
 8009780:	aa01      	add	r2, sp, #4
 8009782:	4641      	mov	r1, r8
 8009784:	2000      	movs	r0, #0
 8009786:	f002 fa69 	bl	800bc5c <xTaskNotifyWait>
 800978a:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 800978c:	2801      	cmp	r0, #1
 800978e:	d0d6      	beq.n	800973e <osThreadFlagsWait+0x4e>
        if (timeout == 0) {
 8009790:	2f00      	cmp	r7, #0
 8009792:	d1f1      	bne.n	8009778 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 8009794:	f06f 0502 	mvn.w	r5, #2
 8009798:	e7f0      	b.n	800977c <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 800979a:	f06f 0505 	mvn.w	r5, #5
}
 800979e:	4628      	mov	r0, r5
 80097a0:	b003      	add	sp, #12
 80097a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 80097a6:	f06f 0505 	mvn.w	r5, #5
 80097aa:	e7f8      	b.n	800979e <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 80097ac:	f06f 0503 	mvn.w	r5, #3
 80097b0:	e7f5      	b.n	800979e <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 80097b2:	f06f 0502 	mvn.w	r5, #2
 80097b6:	e7f2      	b.n	800979e <osThreadFlagsWait+0xae>
 80097b8:	20000ca4 	.word	0x20000ca4

080097bc <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80097bc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097be:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80097c2:	b9a3      	cbnz	r3, 80097ee <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097c4:	f3ef 8310 	mrs	r3, PRIMASK
 80097c8:	b9a3      	cbnz	r3, 80097f4 <osDelay+0x38>
 80097ca:	4b0c      	ldr	r3, [pc, #48]	; (80097fc <osDelay+0x40>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d002      	beq.n	80097d8 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80097d2:	b940      	cbnz	r0, 80097e6 <osDelay+0x2a>
    stat = osOK;
 80097d4:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80097d6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097d8:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d0f8      	beq.n	80097d2 <osDelay+0x16>
    stat = osErrorISR;
 80097e0:	f06f 0005 	mvn.w	r0, #5
 80097e4:	e7f7      	b.n	80097d6 <osDelay+0x1a>
      vTaskDelay(ticks);
 80097e6:	f001 ff9b 	bl	800b720 <vTaskDelay>
    stat = osOK;
 80097ea:	2000      	movs	r0, #0
 80097ec:	e7f3      	b.n	80097d6 <osDelay+0x1a>
    stat = osErrorISR;
 80097ee:	f06f 0005 	mvn.w	r0, #5
 80097f2:	e7f0      	b.n	80097d6 <osDelay+0x1a>
 80097f4:	f06f 0005 	mvn.w	r0, #5
 80097f8:	e7ed      	b.n	80097d6 <osDelay+0x1a>
 80097fa:	bf00      	nop
 80097fc:	20000ca4 	.word	0x20000ca4

08009800 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009800:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009802:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8009806:	2b00      	cmp	r3, #0
 8009808:	d150      	bne.n	80098ac <osMutexNew+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800980a:	f3ef 8310 	mrs	r3, PRIMASK
 800980e:	461e      	mov	r6, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	d14d      	bne.n	80098b0 <osMutexNew+0xb0>
 8009814:	4a28      	ldr	r2, [pc, #160]	; (80098b8 <osMutexNew+0xb8>)
 8009816:	6812      	ldr	r2, [r2, #0]
 8009818:	2a02      	cmp	r2, #2
 800981a:	d024      	beq.n	8009866 <osMutexNew+0x66>
    if (attr != NULL) {
 800981c:	b100      	cbz	r0, 8009820 <osMutexNew+0x20>
      type = attr->attr_bits;
 800981e:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009820:	f013 0f01 	tst.w	r3, #1
 8009824:	d000      	beq.n	8009828 <osMutexNew+0x28>
      rmtx = 1U;
 8009826:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009828:	f013 0f08 	tst.w	r3, #8
 800982c:	d142      	bne.n	80098b4 <osMutexNew+0xb4>
 800982e:	4604      	mov	r4, r0
      mem = -1;

      if (attr != NULL) {
 8009830:	b378      	cbz	r0, 8009892 <osMutexNew+0x92>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009832:	6881      	ldr	r1, [r0, #8]
 8009834:	b111      	cbz	r1, 800983c <osMutexNew+0x3c>
 8009836:	68c3      	ldr	r3, [r0, #12]
 8009838:	2b4f      	cmp	r3, #79	; 0x4f
 800983a:	d81f      	bhi.n	800987c <osMutexNew+0x7c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800983c:	b1c9      	cbz	r1, 8009872 <osMutexNew+0x72>
      mem = -1;
 800983e:	f04f 33ff 	mov.w	r3, #4294967295
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 8009842:	bb8b      	cbnz	r3, 80098a8 <osMutexNew+0xa8>
          if (rmtx != 0U) {
 8009844:	b34e      	cbz	r6, 800989a <osMutexNew+0x9a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009846:	2004      	movs	r0, #4
 8009848:	f001 f884 	bl	800a954 <xQueueCreateMutex>
 800984c:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800984e:	b125      	cbz	r5, 800985a <osMutexNew+0x5a>
        if (attr != NULL) {
 8009850:	b344      	cbz	r4, 80098a4 <osMutexNew+0xa4>
          name = attr->name;
 8009852:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8009854:	4628      	mov	r0, r5
 8009856:	f001 fb87 	bl	800af68 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800985a:	b115      	cbz	r5, 8009862 <osMutexNew+0x62>
 800985c:	b10e      	cbz	r6, 8009862 <osMutexNew+0x62>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800985e:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8009862:	4628      	mov	r0, r5
 8009864:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009866:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 800986a:	2a00      	cmp	r2, #0
 800986c:	d0d6      	beq.n	800981c <osMutexNew+0x1c>
  hMutex = NULL;
 800986e:	2500      	movs	r5, #0
 8009870:	e7f7      	b.n	8009862 <osMutexNew+0x62>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009872:	68e3      	ldr	r3, [r4, #12]
 8009874:	b17b      	cbz	r3, 8009896 <osMutexNew+0x96>
      mem = -1;
 8009876:	f04f 33ff 	mov.w	r3, #4294967295
 800987a:	e7e2      	b.n	8009842 <osMutexNew+0x42>
        if (rmtx != 0U) {
 800987c:	b126      	cbz	r6, 8009888 <osMutexNew+0x88>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800987e:	2004      	movs	r0, #4
 8009880:	f001 f873 	bl	800a96a <xQueueCreateMutexStatic>
 8009884:	4605      	mov	r5, r0
 8009886:	e7e2      	b.n	800984e <osMutexNew+0x4e>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009888:	2001      	movs	r0, #1
 800988a:	f001 f86e 	bl	800a96a <xQueueCreateMutexStatic>
 800988e:	4605      	mov	r5, r0
 8009890:	e7dd      	b.n	800984e <osMutexNew+0x4e>
        mem = 0;
 8009892:	2300      	movs	r3, #0
 8009894:	e7d5      	b.n	8009842 <osMutexNew+0x42>
            mem = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	e7d3      	b.n	8009842 <osMutexNew+0x42>
            hMutex = xSemaphoreCreateMutex ();
 800989a:	2001      	movs	r0, #1
 800989c:	f001 f85a 	bl	800a954 <xQueueCreateMutex>
 80098a0:	4605      	mov	r5, r0
 80098a2:	e7d4      	b.n	800984e <osMutexNew+0x4e>
          name = NULL;
 80098a4:	2100      	movs	r1, #0
 80098a6:	e7d5      	b.n	8009854 <osMutexNew+0x54>
  hMutex = NULL;
 80098a8:	2500      	movs	r5, #0
 80098aa:	e7d6      	b.n	800985a <osMutexNew+0x5a>
 80098ac:	2500      	movs	r5, #0
 80098ae:	e7d8      	b.n	8009862 <osMutexNew+0x62>
 80098b0:	2500      	movs	r5, #0
 80098b2:	e7d6      	b.n	8009862 <osMutexNew+0x62>
 80098b4:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 80098b6:	e7d4      	b.n	8009862 <osMutexNew+0x62>
 80098b8:	20000ca4 	.word	0x20000ca4

080098bc <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80098bc:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 80098c0:	f000 0301 	and.w	r3, r0, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098c4:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80098c8:	bb18      	cbnz	r0, 8009912 <osMutexAcquire+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098ca:	f3ef 8010 	mrs	r0, PRIMASK
 80098ce:	bb18      	cbnz	r0, 8009918 <osMutexAcquire+0x5c>
 80098d0:	4819      	ldr	r0, [pc, #100]	; (8009938 <osMutexAcquire+0x7c>)
 80098d2:	6800      	ldr	r0, [r0, #0]
 80098d4:	2802      	cmp	r0, #2
 80098d6:	d00c      	beq.n	80098f2 <osMutexAcquire+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80098d8:	b30a      	cbz	r2, 800991e <osMutexAcquire+0x62>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80098da:	b510      	push	{r4, lr}
 80098dc:	460c      	mov	r4, r1
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80098de:	b17b      	cbz	r3, 8009900 <osMutexAcquire+0x44>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80098e0:	4610      	mov	r0, r2
 80098e2:	f001 faab 	bl	800ae3c <xQueueTakeMutexRecursive>
 80098e6:	2801      	cmp	r0, #1
 80098e8:	d01c      	beq.n	8009924 <osMutexAcquire+0x68>
        if (timeout != 0U) {
 80098ea:	b1ec      	cbz	r4, 8009928 <osMutexAcquire+0x6c>
          stat = osErrorTimeout;
 80098ec:	f06f 0001 	mvn.w	r0, #1
      }
    }
  }

  return (stat);
}
 80098f0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80098f2:	f3ef 8011 	mrs	r0, BASEPRI
  if (IS_IRQ()) {
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d0ee      	beq.n	80098d8 <osMutexAcquire+0x1c>
    stat = osErrorISR;
 80098fa:	f06f 0005 	mvn.w	r0, #5
 80098fe:	4770      	bx	lr
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009900:	4610      	mov	r0, r2
 8009902:	f001 f9cd 	bl	800aca0 <xQueueSemaphoreTake>
 8009906:	2801      	cmp	r0, #1
 8009908:	d011      	beq.n	800992e <osMutexAcquire+0x72>
        if (timeout != 0U) {
 800990a:	b194      	cbz	r4, 8009932 <osMutexAcquire+0x76>
          stat = osErrorTimeout;
 800990c:	f06f 0001 	mvn.w	r0, #1
 8009910:	e7ee      	b.n	80098f0 <osMutexAcquire+0x34>
    stat = osErrorISR;
 8009912:	f06f 0005 	mvn.w	r0, #5
 8009916:	4770      	bx	lr
 8009918:	f06f 0005 	mvn.w	r0, #5
 800991c:	4770      	bx	lr
    stat = osErrorParameter;
 800991e:	f06f 0003 	mvn.w	r0, #3
}
 8009922:	4770      	bx	lr
  stat = osOK;
 8009924:	2000      	movs	r0, #0
 8009926:	e7e3      	b.n	80098f0 <osMutexAcquire+0x34>
          stat = osErrorResource;
 8009928:	f06f 0002 	mvn.w	r0, #2
 800992c:	e7e0      	b.n	80098f0 <osMutexAcquire+0x34>
  stat = osOK;
 800992e:	2000      	movs	r0, #0
 8009930:	e7de      	b.n	80098f0 <osMutexAcquire+0x34>
          stat = osErrorResource;
 8009932:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009936:	e7db      	b.n	80098f0 <osMutexAcquire+0x34>
 8009938:	20000ca4 	.word	0x20000ca4

0800993c <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800993c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8009940:	bb2a      	cbnz	r2, 800998e <osMutexRelease+0x52>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009942:	b510      	push	{r4, lr}
 8009944:	f020 0401 	bic.w	r4, r0, #1
 8009948:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800994c:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8009950:	bb02      	cbnz	r2, 8009994 <osMutexRelease+0x58>
 8009952:	4a16      	ldr	r2, [pc, #88]	; (80099ac <osMutexRelease+0x70>)
 8009954:	6812      	ldr	r2, [r2, #0]
 8009956:	2a02      	cmp	r2, #2
 8009958:	d008      	beq.n	800996c <osMutexRelease+0x30>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800995a:	b1f4      	cbz	r4, 800999a <osMutexRelease+0x5e>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800995c:	b168      	cbz	r0, 800997a <osMutexRelease+0x3e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800995e:	4620      	mov	r0, r4
 8009960:	f001 f812 	bl	800a988 <xQueueGiveMutexRecursive>
 8009964:	2801      	cmp	r0, #1
 8009966:	d11b      	bne.n	80099a0 <osMutexRelease+0x64>
  stat = osOK;
 8009968:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800996a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800996c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8009970:	2a00      	cmp	r2, #0
 8009972:	d0f2      	beq.n	800995a <osMutexRelease+0x1e>
    stat = osErrorISR;
 8009974:	f06f 0005 	mvn.w	r0, #5
 8009978:	e7f7      	b.n	800996a <osMutexRelease+0x2e>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800997a:	2300      	movs	r3, #0
 800997c:	461a      	mov	r2, r3
 800997e:	4619      	mov	r1, r3
 8009980:	4620      	mov	r0, r4
 8009982:	f000 ff1d 	bl	800a7c0 <xQueueGenericSend>
 8009986:	2801      	cmp	r0, #1
 8009988:	d10d      	bne.n	80099a6 <osMutexRelease+0x6a>
  stat = osOK;
 800998a:	2000      	movs	r0, #0
 800998c:	e7ed      	b.n	800996a <osMutexRelease+0x2e>
    stat = osErrorISR;
 800998e:	f06f 0005 	mvn.w	r0, #5
}
 8009992:	4770      	bx	lr
    stat = osErrorISR;
 8009994:	f06f 0005 	mvn.w	r0, #5
 8009998:	e7e7      	b.n	800996a <osMutexRelease+0x2e>
    stat = osErrorParameter;
 800999a:	f06f 0003 	mvn.w	r0, #3
 800999e:	e7e4      	b.n	800996a <osMutexRelease+0x2e>
        stat = osErrorResource;
 80099a0:	f06f 0002 	mvn.w	r0, #2
 80099a4:	e7e1      	b.n	800996a <osMutexRelease+0x2e>
        stat = osErrorResource;
 80099a6:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80099aa:	e7de      	b.n	800996a <osMutexRelease+0x2e>
 80099ac:	20000ca4 	.word	0x20000ca4

080099b0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80099b0:	b570      	push	{r4, r5, r6, lr}
 80099b2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099b4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d15b      	bne.n	8009a74 <osSemaphoreNew+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099bc:	f3ef 8310 	mrs	r3, PRIMASK
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d159      	bne.n	8009a78 <osSemaphoreNew+0xc8>
 80099c4:	4b31      	ldr	r3, [pc, #196]	; (8009a8c <osSemaphoreNew+0xdc>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d021      	beq.n	8009a10 <osSemaphoreNew+0x60>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d055      	beq.n	8009a7c <osSemaphoreNew+0xcc>
 80099d0:	4288      	cmp	r0, r1
 80099d2:	d355      	bcc.n	8009a80 <osSemaphoreNew+0xd0>
    mem = -1;

    if (attr != NULL) {
 80099d4:	b312      	cbz	r2, 8009a1c <osSemaphoreNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80099d6:	6893      	ldr	r3, [r2, #8]
 80099d8:	b113      	cbz	r3, 80099e0 <osSemaphoreNew+0x30>
 80099da:	68d4      	ldr	r4, [r2, #12]
 80099dc:	2c4f      	cmp	r4, #79	; 0x4f
 80099de:	d81f      	bhi.n	8009a20 <osSemaphoreNew+0x70>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d14f      	bne.n	8009a84 <osSemaphoreNew+0xd4>
 80099e4:	68d3      	ldr	r3, [r2, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d14e      	bne.n	8009a88 <osSemaphoreNew+0xd8>
 80099ea:	4614      	mov	r4, r2
 80099ec:	460d      	mov	r5, r1
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80099ee:	2801      	cmp	r0, #1
 80099f0:	d018      	beq.n	8009a24 <osSemaphoreNew+0x74>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d137      	bne.n	8009a66 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80099f6:	f000 fec2 	bl	800a77e <xQueueCreateCountingSemaphore>
 80099fa:	4606      	mov	r6, r0
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80099fc:	b12e      	cbz	r6, 8009a0a <osSemaphoreNew+0x5a>
        if (attr != NULL) {
 80099fe:	2c00      	cmp	r4, #0
 8009a00:	d036      	beq.n	8009a70 <osSemaphoreNew+0xc0>
          name = attr->name;
 8009a02:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009a04:	4630      	mov	r0, r6
 8009a06:	f001 faaf 	bl	800af68 <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	b002      	add	sp, #8
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a10:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0d9      	beq.n	80099cc <osSemaphoreNew+0x1c>
  hSemaphore = NULL;
 8009a18:	2600      	movs	r6, #0
 8009a1a:	e7f6      	b.n	8009a0a <osSemaphoreNew+0x5a>
      mem = 0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	e7e4      	b.n	80099ea <osSemaphoreNew+0x3a>
        mem = 1;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7e2      	b.n	80099ea <osSemaphoreNew+0x3a>
        if (mem == 1) {
 8009a24:	b9b3      	cbnz	r3, 8009a54 <osSemaphoreNew+0xa4>
          hSemaphore = xSemaphoreCreateBinary();
 8009a26:	2203      	movs	r2, #3
 8009a28:	2100      	movs	r1, #0
 8009a2a:	2001      	movs	r0, #1
 8009a2c:	f000 fe5b 	bl	800a6e6 <xQueueGenericCreate>
 8009a30:	4606      	mov	r6, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009a32:	2e00      	cmp	r6, #0
 8009a34:	d0e2      	beq.n	80099fc <osSemaphoreNew+0x4c>
 8009a36:	2d00      	cmp	r5, #0
 8009a38:	d0e0      	beq.n	80099fc <osSemaphoreNew+0x4c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4630      	mov	r0, r6
 8009a42:	f000 febd 	bl	800a7c0 <xQueueGenericSend>
 8009a46:	2801      	cmp	r0, #1
 8009a48:	d0d8      	beq.n	80099fc <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f001 fab6 	bl	800afbc <vQueueDelete>
            hSemaphore = NULL;
 8009a50:	2600      	movs	r6, #0
 8009a52:	e7da      	b.n	8009a0a <osSemaphoreNew+0x5a>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009a54:	2303      	movs	r3, #3
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	6893      	ldr	r3, [r2, #8]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	f000 fdfa 	bl	800a656 <xQueueGenericCreateStatic>
 8009a62:	4606      	mov	r6, r0
 8009a64:	e7e5      	b.n	8009a32 <osSemaphoreNew+0x82>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009a66:	6892      	ldr	r2, [r2, #8]
 8009a68:	f000 fe64 	bl	800a734 <xQueueCreateCountingSemaphoreStatic>
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	e7c5      	b.n	80099fc <osSemaphoreNew+0x4c>
          name = NULL;
 8009a70:	2100      	movs	r1, #0
 8009a72:	e7c7      	b.n	8009a04 <osSemaphoreNew+0x54>
  hSemaphore = NULL;
 8009a74:	2600      	movs	r6, #0
 8009a76:	e7c8      	b.n	8009a0a <osSemaphoreNew+0x5a>
 8009a78:	2600      	movs	r6, #0
 8009a7a:	e7c6      	b.n	8009a0a <osSemaphoreNew+0x5a>
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	e7c4      	b.n	8009a0a <osSemaphoreNew+0x5a>
 8009a80:	2600      	movs	r6, #0
 8009a82:	e7c2      	b.n	8009a0a <osSemaphoreNew+0x5a>
 8009a84:	2600      	movs	r6, #0
 8009a86:	e7c0      	b.n	8009a0a <osSemaphoreNew+0x5a>
 8009a88:	2600      	movs	r6, #0
  return ((osSemaphoreId_t)hSemaphore);
 8009a8a:	e7be      	b.n	8009a0a <osSemaphoreNew+0x5a>
 8009a8c:	20000ca4 	.word	0x20000ca4

08009a90 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009a90:	b370      	cbz	r0, 8009af0 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009a92:	b510      	push	{r4, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a98:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009a9c:	b94b      	cbnz	r3, 8009ab2 <osSemaphoreAcquire+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8009aa2:	b933      	cbnz	r3, 8009ab2 <osSemaphoreAcquire+0x22>
 8009aa4:	4b1a      	ldr	r3, [pc, #104]	; (8009b10 <osSemaphoreAcquire+0x80>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d118      	bne.n	8009ade <osSemaphoreAcquire+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009aac:	f3ef 8311 	mrs	r3, BASEPRI
 8009ab0:	b1ab      	cbz	r3, 8009ade <osSemaphoreAcquire+0x4e>
    if (timeout != 0U) {
 8009ab2:	bb04      	cbnz	r4, 8009af6 <osSemaphoreAcquire+0x66>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	aa02      	add	r2, sp, #8
 8009ab8:	f842 1d04 	str.w	r1, [r2, #-4]!

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009abc:	f001 f9e0 	bl	800ae80 <xQueueReceiveFromISR>
 8009ac0:	2801      	cmp	r0, #1
 8009ac2:	d11b      	bne.n	8009afc <osSemaphoreAcquire+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009ac4:	9b01      	ldr	r3, [sp, #4]
 8009ac6:	b1e3      	cbz	r3, 8009b02 <osSemaphoreAcquire+0x72>
 8009ac8:	4b12      	ldr	r3, [pc, #72]	; (8009b14 <osSemaphoreAcquire+0x84>)
 8009aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009ad8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009ada:	b002      	add	sp, #8
 8009adc:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009ade:	4621      	mov	r1, r4
 8009ae0:	f001 f8de 	bl	800aca0 <xQueueSemaphoreTake>
 8009ae4:	2801      	cmp	r0, #1
 8009ae6:	d00e      	beq.n	8009b06 <osSemaphoreAcquire+0x76>
      if (timeout != 0U) {
 8009ae8:	b17c      	cbz	r4, 8009b0a <osSemaphoreAcquire+0x7a>
        stat = osErrorTimeout;
 8009aea:	f06f 0001 	mvn.w	r0, #1
 8009aee:	e7f4      	b.n	8009ada <osSemaphoreAcquire+0x4a>
    stat = osErrorParameter;
 8009af0:	f06f 0003 	mvn.w	r0, #3
}
 8009af4:	4770      	bx	lr
      stat = osErrorParameter;
 8009af6:	f06f 0003 	mvn.w	r0, #3
 8009afa:	e7ee      	b.n	8009ada <osSemaphoreAcquire+0x4a>
        stat = osErrorResource;
 8009afc:	f06f 0002 	mvn.w	r0, #2
 8009b00:	e7eb      	b.n	8009ada <osSemaphoreAcquire+0x4a>
  stat = osOK;
 8009b02:	2000      	movs	r0, #0
 8009b04:	e7e9      	b.n	8009ada <osSemaphoreAcquire+0x4a>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e7e7      	b.n	8009ada <osSemaphoreAcquire+0x4a>
        stat = osErrorResource;
 8009b0a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009b0e:	e7e4      	b.n	8009ada <osSemaphoreAcquire+0x4a>
 8009b10:	20000ca4 	.word	0x20000ca4
 8009b14:	e000ed04 	.word	0xe000ed04

08009b18 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009b18:	b368      	cbz	r0, 8009b76 <osSemaphoreRelease+0x5e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009b1a:	b500      	push	{lr}
 8009b1c:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b1e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009b22:	b94b      	cbnz	r3, 8009b38 <osSemaphoreRelease+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b24:	f3ef 8310 	mrs	r3, PRIMASK
 8009b28:	b933      	cbnz	r3, 8009b38 <osSemaphoreRelease+0x20>
 8009b2a:	4b18      	ldr	r3, [pc, #96]	; (8009b8c <osSemaphoreRelease+0x74>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d118      	bne.n	8009b64 <osSemaphoreRelease+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b32:	f3ef 8311 	mrs	r3, BASEPRI
 8009b36:	b1ab      	cbz	r3, 8009b64 <osSemaphoreRelease+0x4c>
    yield = pdFALSE;
 8009b38:	a902      	add	r1, sp, #8
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f841 3d04 	str.w	r3, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009b40:	f000 ffa8 	bl	800aa94 <xQueueGiveFromISR>
 8009b44:	2801      	cmp	r0, #1
 8009b46:	d119      	bne.n	8009b7c <osSemaphoreRelease+0x64>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8009b48:	9b01      	ldr	r3, [sp, #4]
 8009b4a:	b1d3      	cbz	r3, 8009b82 <osSemaphoreRelease+0x6a>
 8009b4c:	4b10      	ldr	r3, [pc, #64]	; (8009b90 <osSemaphoreRelease+0x78>)
 8009b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009b5c:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8009b5e:	b003      	add	sp, #12
 8009b60:	f85d fb04 	ldr.w	pc, [sp], #4
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009b64:	2300      	movs	r3, #0
 8009b66:	461a      	mov	r2, r3
 8009b68:	4619      	mov	r1, r3
 8009b6a:	f000 fe29 	bl	800a7c0 <xQueueGenericSend>
 8009b6e:	2801      	cmp	r0, #1
 8009b70:	d109      	bne.n	8009b86 <osSemaphoreRelease+0x6e>
  stat = osOK;
 8009b72:	2000      	movs	r0, #0
 8009b74:	e7f3      	b.n	8009b5e <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8009b76:	f06f 0003 	mvn.w	r0, #3
}
 8009b7a:	4770      	bx	lr
      stat = osErrorResource;
 8009b7c:	f06f 0002 	mvn.w	r0, #2
 8009b80:	e7ed      	b.n	8009b5e <osSemaphoreRelease+0x46>
  stat = osOK;
 8009b82:	2000      	movs	r0, #0
 8009b84:	e7eb      	b.n	8009b5e <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 8009b86:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009b8a:	e7e8      	b.n	8009b5e <osSemaphoreRelease+0x46>
 8009b8c:	20000ca4 	.word	0x20000ca4
 8009b90:	e000ed04 	.word	0xe000ed04

08009b94 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b98:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d14c      	bne.n	8009c3a <osMessageQueueNew+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d14a      	bne.n	8009c3e <osMessageQueueNew+0xaa>
 8009ba8:	4b29      	ldr	r3, [pc, #164]	; (8009c50 <osMessageQueueNew+0xbc>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d023      	beq.n	8009bf8 <osMessageQueueNew+0x64>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d046      	beq.n	8009c42 <osMessageQueueNew+0xae>
 8009bb4:	2900      	cmp	r1, #0
 8009bb6:	d046      	beq.n	8009c46 <osMessageQueueNew+0xb2>
 8009bb8:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 8009bba:	2a00      	cmp	r2, #0
 8009bbc:	d034      	beq.n	8009c28 <osMessageQueueNew+0x94>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009bbe:	6893      	ldr	r3, [r2, #8]
 8009bc0:	b14b      	cbz	r3, 8009bd6 <osMessageQueueNew+0x42>
 8009bc2:	68d2      	ldr	r2, [r2, #12]
 8009bc4:	2a4f      	cmp	r2, #79	; 0x4f
 8009bc6:	d906      	bls.n	8009bd6 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009bc8:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009bca:	b122      	cbz	r2, 8009bd6 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009bcc:	6966      	ldr	r6, [r4, #20]
 8009bce:	fb01 f500 	mul.w	r5, r1, r0
 8009bd2:	42ae      	cmp	r6, r5
 8009bd4:	d222      	bcs.n	8009c1c <osMessageQueueNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009bd6:	b1ab      	cbz	r3, 8009c04 <osMessageQueueNew+0x70>
    mem = -1;
 8009bd8:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8009bdc:	bbab      	cbnz	r3, 8009c4a <osMessageQueueNew+0xb6>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009bde:	2200      	movs	r2, #0
 8009be0:	f000 fd81 	bl	800a6e6 <xQueueGenericCreate>
 8009be4:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009be6:	b125      	cbz	r5, 8009bf2 <osMessageQueueNew+0x5e>
      if (attr != NULL) {
 8009be8:	b32c      	cbz	r4, 8009c36 <osMessageQueueNew+0xa2>
        name = attr->name;
 8009bea:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8009bec:	4628      	mov	r0, r5
 8009bee:	f001 f9bb 	bl	800af68 <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	b002      	add	sp, #8
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009bf8:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d0d7      	beq.n	8009bb0 <osMessageQueueNew+0x1c>
  hQueue = NULL;
 8009c00:	2500      	movs	r5, #0
 8009c02:	e7f6      	b.n	8009bf2 <osMessageQueueNew+0x5e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c04:	68e3      	ldr	r3, [r4, #12]
 8009c06:	b98b      	cbnz	r3, 8009c2c <osMessageQueueNew+0x98>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009c08:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c0a:	b113      	cbz	r3, 8009c12 <osMessageQueueNew+0x7e>
    mem = -1;
 8009c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c10:	e7e4      	b.n	8009bdc <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009c12:	6963      	ldr	r3, [r4, #20]
 8009c14:	b16b      	cbz	r3, 8009c32 <osMessageQueueNew+0x9e>
    mem = -1;
 8009c16:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1a:	e7df      	b.n	8009bdc <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009c1c:	2500      	movs	r5, #0
 8009c1e:	9500      	str	r5, [sp, #0]
 8009c20:	f000 fd19 	bl	800a656 <xQueueGenericCreateStatic>
 8009c24:	4605      	mov	r5, r0
 8009c26:	e7de      	b.n	8009be6 <osMessageQueueNew+0x52>
      mem = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	e7d7      	b.n	8009bdc <osMessageQueueNew+0x48>
    mem = -1;
 8009c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c30:	e7d4      	b.n	8009bdc <osMessageQueueNew+0x48>
          mem = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	e7d2      	b.n	8009bdc <osMessageQueueNew+0x48>
        name = NULL;
 8009c36:	2100      	movs	r1, #0
 8009c38:	e7d8      	b.n	8009bec <osMessageQueueNew+0x58>
  hQueue = NULL;
 8009c3a:	2500      	movs	r5, #0
 8009c3c:	e7d9      	b.n	8009bf2 <osMessageQueueNew+0x5e>
 8009c3e:	2500      	movs	r5, #0
 8009c40:	e7d7      	b.n	8009bf2 <osMessageQueueNew+0x5e>
 8009c42:	2500      	movs	r5, #0
 8009c44:	e7d5      	b.n	8009bf2 <osMessageQueueNew+0x5e>
 8009c46:	2500      	movs	r5, #0
 8009c48:	e7d3      	b.n	8009bf2 <osMessageQueueNew+0x5e>
 8009c4a:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8009c4c:	e7d1      	b.n	8009bf2 <osMessageQueueNew+0x5e>
 8009c4e:	bf00      	nop
 8009c50:	20000ca4 	.word	0x20000ca4

08009c54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009c54:	b510      	push	{r4, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c5a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8009c5e:	b9b3      	cbnz	r3, 8009c8e <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c60:	f3ef 8310 	mrs	r3, PRIMASK
 8009c64:	b99b      	cbnz	r3, 8009c8e <osMessageQueuePut+0x3a>
 8009c66:	4b22      	ldr	r3, [pc, #136]	; (8009cf0 <osMessageQueuePut+0x9c>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d00b      	beq.n	8009c86 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c6e:	b3a0      	cbz	r0, 8009cda <osMessageQueuePut+0x86>
 8009c70:	b3b1      	cbz	r1, 8009ce0 <osMessageQueuePut+0x8c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c72:	2300      	movs	r3, #0
 8009c74:	4622      	mov	r2, r4
 8009c76:	f000 fda3 	bl	800a7c0 <xQueueGenericSend>
 8009c7a:	2801      	cmp	r0, #1
 8009c7c:	d033      	beq.n	8009ce6 <osMessageQueuePut+0x92>
        if (timeout != 0U) {
 8009c7e:	b3a4      	cbz	r4, 8009cea <osMessageQueuePut+0x96>
          stat = osErrorTimeout;
 8009c80:	f06f 0001 	mvn.w	r0, #1
 8009c84:	e027      	b.n	8009cd6 <osMessageQueuePut+0x82>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c86:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0ef      	beq.n	8009c6e <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c8e:	b1a8      	cbz	r0, 8009cbc <osMessageQueuePut+0x68>
 8009c90:	b1b9      	cbz	r1, 8009cc2 <osMessageQueuePut+0x6e>
 8009c92:	b9cc      	cbnz	r4, 8009cc8 <osMessageQueuePut+0x74>
      yield = pdFALSE;
 8009c94:	2300      	movs	r3, #0
 8009c96:	aa02      	add	r2, sp, #8
 8009c98:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009c9c:	f000 fe94 	bl	800a9c8 <xQueueGenericSendFromISR>
 8009ca0:	2801      	cmp	r0, #1
 8009ca2:	d114      	bne.n	8009cce <osMessageQueuePut+0x7a>
        portYIELD_FROM_ISR (yield);
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	b1ab      	cbz	r3, 8009cd4 <osMessageQueuePut+0x80>
 8009ca8:	4b12      	ldr	r3, [pc, #72]	; (8009cf4 <osMessageQueuePut+0xa0>)
 8009caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e00c      	b.n	8009cd6 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 8009cbc:	f06f 0003 	mvn.w	r0, #3
 8009cc0:	e009      	b.n	8009cd6 <osMessageQueuePut+0x82>
 8009cc2:	f06f 0003 	mvn.w	r0, #3
 8009cc6:	e006      	b.n	8009cd6 <osMessageQueuePut+0x82>
 8009cc8:	f06f 0003 	mvn.w	r0, #3
 8009ccc:	e003      	b.n	8009cd6 <osMessageQueuePut+0x82>
        stat = osErrorResource;
 8009cce:	f06f 0002 	mvn.w	r0, #2
 8009cd2:	e000      	b.n	8009cd6 <osMessageQueuePut+0x82>
  stat = osOK;
 8009cd4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009cd6:	b002      	add	sp, #8
 8009cd8:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8009cda:	f06f 0003 	mvn.w	r0, #3
 8009cde:	e7fa      	b.n	8009cd6 <osMessageQueuePut+0x82>
 8009ce0:	f06f 0003 	mvn.w	r0, #3
 8009ce4:	e7f7      	b.n	8009cd6 <osMessageQueuePut+0x82>
  stat = osOK;
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	e7f5      	b.n	8009cd6 <osMessageQueuePut+0x82>
          stat = osErrorResource;
 8009cea:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009cee:	e7f2      	b.n	8009cd6 <osMessageQueuePut+0x82>
 8009cf0:	20000ca4 	.word	0x20000ca4
 8009cf4:	e000ed04 	.word	0xe000ed04

08009cf8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cfe:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8009d02:	b9ab      	cbnz	r3, 8009d30 <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d04:	f3ef 8310 	mrs	r3, PRIMASK
 8009d08:	b993      	cbnz	r3, 8009d30 <osMessageQueueGet+0x38>
 8009d0a:	4b22      	ldr	r3, [pc, #136]	; (8009d94 <osMessageQueueGet+0x9c>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d00a      	beq.n	8009d28 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d12:	b398      	cbz	r0, 8009d7c <osMessageQueueGet+0x84>
 8009d14:	b3a9      	cbz	r1, 8009d82 <osMessageQueueGet+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d16:	4622      	mov	r2, r4
 8009d18:	f000 ff16 	bl	800ab48 <xQueueReceive>
 8009d1c:	2801      	cmp	r0, #1
 8009d1e:	d033      	beq.n	8009d88 <osMessageQueueGet+0x90>
        if (timeout != 0U) {
 8009d20:	b3a4      	cbz	r4, 8009d8c <osMessageQueueGet+0x94>
          stat = osErrorTimeout;
 8009d22:	f06f 0001 	mvn.w	r0, #1
 8009d26:	e027      	b.n	8009d78 <osMessageQueueGet+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d28:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0f0      	beq.n	8009d12 <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d30:	b1a8      	cbz	r0, 8009d5e <osMessageQueueGet+0x66>
 8009d32:	b1b9      	cbz	r1, 8009d64 <osMessageQueueGet+0x6c>
 8009d34:	b9cc      	cbnz	r4, 8009d6a <osMessageQueueGet+0x72>
      yield = pdFALSE;
 8009d36:	aa02      	add	r2, sp, #8
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009d3e:	f001 f89f 	bl	800ae80 <xQueueReceiveFromISR>
 8009d42:	2801      	cmp	r0, #1
 8009d44:	d114      	bne.n	8009d70 <osMessageQueueGet+0x78>
        portYIELD_FROM_ISR (yield);
 8009d46:	9b01      	ldr	r3, [sp, #4]
 8009d48:	b1ab      	cbz	r3, 8009d76 <osMessageQueueGet+0x7e>
 8009d4a:	4b13      	ldr	r3, [pc, #76]	; (8009d98 <osMessageQueueGet+0xa0>)
 8009d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d50:	601a      	str	r2, [r3, #0]
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	e00c      	b.n	8009d78 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 8009d5e:	f06f 0003 	mvn.w	r0, #3
 8009d62:	e009      	b.n	8009d78 <osMessageQueueGet+0x80>
 8009d64:	f06f 0003 	mvn.w	r0, #3
 8009d68:	e006      	b.n	8009d78 <osMessageQueueGet+0x80>
 8009d6a:	f06f 0003 	mvn.w	r0, #3
 8009d6e:	e003      	b.n	8009d78 <osMessageQueueGet+0x80>
        stat = osErrorResource;
 8009d70:	f06f 0002 	mvn.w	r0, #2
 8009d74:	e000      	b.n	8009d78 <osMessageQueueGet+0x80>
  stat = osOK;
 8009d76:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009d78:	b002      	add	sp, #8
 8009d7a:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8009d7c:	f06f 0003 	mvn.w	r0, #3
 8009d80:	e7fa      	b.n	8009d78 <osMessageQueueGet+0x80>
 8009d82:	f06f 0003 	mvn.w	r0, #3
 8009d86:	e7f7      	b.n	8009d78 <osMessageQueueGet+0x80>
  stat = osOK;
 8009d88:	2000      	movs	r0, #0
 8009d8a:	e7f5      	b.n	8009d78 <osMessageQueueGet+0x80>
          stat = osErrorResource;
 8009d8c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009d90:	e7f2      	b.n	8009d78 <osMessageQueueGet+0x80>
 8009d92:	bf00      	nop
 8009d94:	20000ca4 	.word	0x20000ca4
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8009d9c:	b198      	cbz	r0, 8009dc6 <osMessageQueueGetCount+0x2a>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009d9e:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009da0:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8009da4:	b963      	cbnz	r3, 8009dc0 <osMessageQueueGetCount+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009da6:	f3ef 8310 	mrs	r3, PRIMASK
 8009daa:	b94b      	cbnz	r3, 8009dc0 <osMessageQueueGetCount+0x24>
 8009dac:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <osMessageQueueGetCount+0x30>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d102      	bne.n	8009dba <osMessageQueueGetCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009db4:	f3ef 8311 	mrs	r3, BASEPRI
 8009db8:	b913      	cbnz	r3, 8009dc0 <osMessageQueueGetCount+0x24>
    count = uxQueueMessagesWaitingFromISR (hQueue);
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009dba:	f001 f8b6 	bl	800af2a <uxQueueMessagesWaiting>
 8009dbe:	e001      	b.n	8009dc4 <osMessageQueueGetCount+0x28>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009dc0:	f001 f8c6 	bl	800af50 <uxQueueMessagesWaitingFromISR>
  }

  return ((uint32_t)count);
}
 8009dc4:	bd08      	pop	{r3, pc}
    count = 0U;
 8009dc6:	2000      	movs	r0, #0
}
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	20000ca4 	.word	0x20000ca4

08009dd0 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8009dd0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dd2:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dd6:	b99b      	cbnz	r3, 8009e00 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8009ddc:	b99b      	cbnz	r3, 8009e06 <osMessageQueueReset+0x36>
 8009dde:	4b0d      	ldr	r3, [pc, #52]	; (8009e14 <osMessageQueueReset+0x44>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d005      	beq.n	8009df2 <osMessageQueueReset+0x22>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8009de6:	b188      	cbz	r0, 8009e0c <osMessageQueueReset+0x3c>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8009de8:	2100      	movs	r1, #0
 8009dea:	f000 fbe1 	bl	800a5b0 <xQueueGenericReset>
    stat = osOK;
 8009dee:	2000      	movs	r0, #0
  }

  return (stat);
}
 8009df0:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009df2:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0f5      	beq.n	8009de6 <osMessageQueueReset+0x16>
    stat = osErrorISR;
 8009dfa:	f06f 0005 	mvn.w	r0, #5
 8009dfe:	e7f7      	b.n	8009df0 <osMessageQueueReset+0x20>
 8009e00:	f06f 0005 	mvn.w	r0, #5
 8009e04:	e7f4      	b.n	8009df0 <osMessageQueueReset+0x20>
 8009e06:	f06f 0005 	mvn.w	r0, #5
 8009e0a:	e7f1      	b.n	8009df0 <osMessageQueueReset+0x20>
    stat = osErrorParameter;
 8009e0c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8009e10:	e7ee      	b.n	8009df0 <osMessageQueueReset+0x20>
 8009e12:	bf00      	nop
 8009e14:	20000ca4 	.word	0x20000ca4

08009e18 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e18:	4b03      	ldr	r3, [pc, #12]	; (8009e28 <vApplicationGetIdleTaskMemory+0x10>)
 8009e1a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e1c:	4b03      	ldr	r3, [pc, #12]	; (8009e2c <vApplicationGetIdleTaskMemory+0x14>)
 8009e1e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e20:	2380      	movs	r3, #128	; 0x80
 8009e22:	6013      	str	r3, [r2, #0]
}
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	20000c48 	.word	0x20000c48
 8009e2c:	20000a48 	.word	0x20000a48

08009e30 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e30:	4b03      	ldr	r3, [pc, #12]	; (8009e40 <vApplicationGetTimerTaskMemory+0x10>)
 8009e32:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e34:	4b03      	ldr	r3, [pc, #12]	; (8009e44 <vApplicationGetTimerTaskMemory+0x14>)
 8009e36:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e3c:	6013      	str	r3, [r2, #0]
}
 8009e3e:	4770      	bx	lr
 8009e40:	200010a8 	.word	0x200010a8
 8009e44:	20000ca8 	.word	0x20000ca8

08009e48 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e48:	4a13      	ldr	r2, [pc, #76]	; (8009e98 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e4a:	f012 0f07 	tst.w	r2, #7
 8009e4e:	d01f      	beq.n	8009e90 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e50:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e52:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e56:	f5c1 533b 	rsb	r3, r1, #11968	; 0x2ec0
 8009e5a:	3320      	adds	r3, #32
 8009e5c:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e5e:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e60:	480e      	ldr	r0, [pc, #56]	; (8009e9c <prvHeapInit+0x54>)
 8009e62:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e64:	2100      	movs	r1, #0
 8009e66:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e68:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009e6a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e6c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8009e70:	480b      	ldr	r0, [pc, #44]	; (8009ea0 <prvHeapInit+0x58>)
 8009e72:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8009e74:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e76:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e78:	1a99      	subs	r1, r3, r2
 8009e7a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e7c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e7e:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <prvHeapInit+0x5c>)
 8009e80:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e82:	4b09      	ldr	r3, [pc, #36]	; (8009ea8 <prvHeapInit+0x60>)
 8009e84:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e86:	4b09      	ldr	r3, [pc, #36]	; (8009eac <prvHeapInit+0x64>)
 8009e88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e8c:	601a      	str	r2, [r3, #0]
}
 8009e8e:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e90:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8009e94:	e7e4      	b.n	8009e60 <prvHeapInit+0x18>
 8009e96:	bf00      	nop
 8009e98:	20001108 	.word	0x20001108
 8009e9c:	20003ff4 	.word	0x20003ff4
 8009ea0:	20001104 	.word	0x20001104
 8009ea4:	20003ff0 	.word	0x20003ff0
 8009ea8:	20003fec 	.word	0x20003fec
 8009eac:	20003fe8 	.word	0x20003fe8

08009eb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009eb0:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009eb2:	4b13      	ldr	r3, [pc, #76]	; (8009f00 <prvInsertBlockIntoFreeList+0x50>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	4282      	cmp	r2, r0
 8009eb8:	d31b      	bcc.n	8009ef2 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009eba:	6859      	ldr	r1, [r3, #4]
 8009ebc:	185c      	adds	r4, r3, r1
 8009ebe:	4284      	cmp	r4, r0
 8009ec0:	d103      	bne.n	8009eca <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ec2:	6840      	ldr	r0, [r0, #4]
 8009ec4:	4401      	add	r1, r0
 8009ec6:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ec8:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009eca:	6841      	ldr	r1, [r0, #4]
 8009ecc:	1844      	adds	r4, r0, r1
 8009ece:	42a2      	cmp	r2, r4
 8009ed0:	d113      	bne.n	8009efa <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ed2:	4c0c      	ldr	r4, [pc, #48]	; (8009f04 <prvInsertBlockIntoFreeList+0x54>)
 8009ed4:	6824      	ldr	r4, [r4, #0]
 8009ed6:	42a2      	cmp	r2, r4
 8009ed8:	d00d      	beq.n	8009ef6 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009eda:	6852      	ldr	r2, [r2, #4]
 8009edc:	4411      	add	r1, r2
 8009ede:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	6812      	ldr	r2, [r2, #0]
 8009ee4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ee6:	4298      	cmp	r0, r3
 8009ee8:	d000      	beq.n	8009eec <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009eea:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef0:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	e7de      	b.n	8009eb4 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ef6:	6004      	str	r4, [r0, #0]
 8009ef8:	e7f5      	b.n	8009ee6 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009efa:	6002      	str	r2, [r0, #0]
 8009efc:	e7f3      	b.n	8009ee6 <prvInsertBlockIntoFreeList+0x36>
 8009efe:	bf00      	nop
 8009f00:	20003ff4 	.word	0x20003ff4
 8009f04:	20001104 	.word	0x20001104

08009f08 <pvPortMalloc>:
{
 8009f08:	b570      	push	{r4, r5, r6, lr}
 8009f0a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009f0c:	f001 fada 	bl	800b4c4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009f10:	4b3a      	ldr	r3, [pc, #232]	; (8009ffc <pvPortMalloc+0xf4>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	b1bb      	cbz	r3, 8009f46 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f16:	4b3a      	ldr	r3, [pc, #232]	; (800a000 <pvPortMalloc+0xf8>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	421c      	tst	r4, r3
 8009f1c:	d163      	bne.n	8009fe6 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8009f1e:	b1ac      	cbz	r4, 8009f4c <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8009f20:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f22:	f014 0f07 	tst.w	r4, #7
 8009f26:	d011      	beq.n	8009f4c <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f28:	f024 0407 	bic.w	r4, r4, #7
 8009f2c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f2e:	f004 0307 	and.w	r3, r4, #7
 8009f32:	b15b      	cbz	r3, 8009f4c <pvPortMalloc+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	e7fe      	b.n	8009f44 <pvPortMalloc+0x3c>
			prvHeapInit();
 8009f46:	f7ff ff7f 	bl	8009e48 <prvHeapInit>
 8009f4a:	e7e4      	b.n	8009f16 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f4c:	2c00      	cmp	r4, #0
 8009f4e:	d04c      	beq.n	8009fea <pvPortMalloc+0xe2>
 8009f50:	4b2c      	ldr	r3, [pc, #176]	; (800a004 <pvPortMalloc+0xfc>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	d34a      	bcc.n	8009fee <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8009f58:	4b2b      	ldr	r3, [pc, #172]	; (800a008 <pvPortMalloc+0x100>)
 8009f5a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f5c:	e001      	b.n	8009f62 <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8009f5e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f60:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f62:	686a      	ldr	r2, [r5, #4]
 8009f64:	42a2      	cmp	r2, r4
 8009f66:	d202      	bcs.n	8009f6e <pvPortMalloc+0x66>
 8009f68:	682a      	ldr	r2, [r5, #0]
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	d1f7      	bne.n	8009f5e <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8009f6e:	4a23      	ldr	r2, [pc, #140]	; (8009ffc <pvPortMalloc+0xf4>)
 8009f70:	6812      	ldr	r2, [r2, #0]
 8009f72:	42aa      	cmp	r2, r5
 8009f74:	d03d      	beq.n	8009ff2 <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f76:	681e      	ldr	r6, [r3, #0]
 8009f78:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f7a:	682a      	ldr	r2, [r5, #0]
 8009f7c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f7e:	686b      	ldr	r3, [r5, #4]
 8009f80:	1b1b      	subs	r3, r3, r4
 8009f82:	2b10      	cmp	r3, #16
 8009f84:	d910      	bls.n	8009fa8 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f86:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f88:	f010 0f07 	tst.w	r0, #7
 8009f8c:	d008      	beq.n	8009fa0 <pvPortMalloc+0x98>
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	e7fe      	b.n	8009f9e <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fa0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fa2:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fa4:	f7ff ff84 	bl	8009eb0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fa8:	686a      	ldr	r2, [r5, #4]
 8009faa:	4916      	ldr	r1, [pc, #88]	; (800a004 <pvPortMalloc+0xfc>)
 8009fac:	680b      	ldr	r3, [r1, #0]
 8009fae:	1a9b      	subs	r3, r3, r2
 8009fb0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fb2:	4916      	ldr	r1, [pc, #88]	; (800a00c <pvPortMalloc+0x104>)
 8009fb4:	6809      	ldr	r1, [r1, #0]
 8009fb6:	428b      	cmp	r3, r1
 8009fb8:	d201      	bcs.n	8009fbe <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009fba:	4914      	ldr	r1, [pc, #80]	; (800a00c <pvPortMalloc+0x104>)
 8009fbc:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fbe:	4b10      	ldr	r3, [pc, #64]	; (800a000 <pvPortMalloc+0xf8>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009fca:	f001 fb2f 	bl	800b62c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fce:	f016 0f07 	tst.w	r6, #7
 8009fd2:	d010      	beq.n	8009ff6 <pvPortMalloc+0xee>
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	e7fe      	b.n	8009fe4 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8009fe6:	2600      	movs	r6, #0
 8009fe8:	e7ef      	b.n	8009fca <pvPortMalloc+0xc2>
 8009fea:	2600      	movs	r6, #0
 8009fec:	e7ed      	b.n	8009fca <pvPortMalloc+0xc2>
 8009fee:	2600      	movs	r6, #0
 8009ff0:	e7eb      	b.n	8009fca <pvPortMalloc+0xc2>
 8009ff2:	2600      	movs	r6, #0
 8009ff4:	e7e9      	b.n	8009fca <pvPortMalloc+0xc2>
}
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	bd70      	pop	{r4, r5, r6, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20001104 	.word	0x20001104
 800a000:	20003fe8 	.word	0x20003fe8
 800a004:	20003fec 	.word	0x20003fec
 800a008:	20003ff4 	.word	0x20003ff4
 800a00c:	20003ff0 	.word	0x20003ff0

0800a010 <vPortFree>:
	if( pv != NULL )
 800a010:	b380      	cbz	r0, 800a074 <vPortFree+0x64>
{
 800a012:	b538      	push	{r3, r4, r5, lr}
 800a014:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800a016:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a01a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a01e:	4916      	ldr	r1, [pc, #88]	; (800a078 <vPortFree+0x68>)
 800a020:	6809      	ldr	r1, [r1, #0]
 800a022:	420a      	tst	r2, r1
 800a024:	d108      	bne.n	800a038 <vPortFree+0x28>
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	e7fe      	b.n	800a036 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a038:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800a03c:	b140      	cbz	r0, 800a050 <vPortFree+0x40>
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	e7fe      	b.n	800a04e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a050:	ea22 0201 	bic.w	r2, r2, r1
 800a054:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800a058:	f001 fa34 	bl	800b4c4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a05c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a060:	4a06      	ldr	r2, [pc, #24]	; (800a07c <vPortFree+0x6c>)
 800a062:	6813      	ldr	r3, [r2, #0]
 800a064:	440b      	add	r3, r1
 800a066:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a068:	4628      	mov	r0, r5
 800a06a:	f7ff ff21 	bl	8009eb0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800a06e:	f001 fadd 	bl	800b62c <xTaskResumeAll>
}
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	20003fe8 	.word	0x20003fe8
 800a07c:	20003fec 	.word	0x20003fec

0800a080 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a080:	f100 0308 	add.w	r3, r0, #8
 800a084:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a086:	f04f 32ff 	mov.w	r2, #4294967295
 800a08a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a08c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a08e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a090:	2300      	movs	r3, #0
 800a092:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a094:	4770      	bx	lr

0800a096 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a096:	2300      	movs	r3, #0
 800a098:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a09a:	4770      	bx	lr

0800a09c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800a09c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a09e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0a0:	689a      	ldr	r2, [r3, #8]
 800a0a2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0a4:	689a      	ldr	r2, [r3, #8]
 800a0a6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a0a8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a0aa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800a0ac:	6803      	ldr	r3, [r0, #0]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	6003      	str	r3, [r0, #0]
}
 800a0b2:	4770      	bx	lr

0800a0b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0b4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a0b6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a0b8:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a0bc:	d002      	beq.n	800a0c4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0be:	f100 0208 	add.w	r2, r0, #8
 800a0c2:	e002      	b.n	800a0ca <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800a0c4:	6902      	ldr	r2, [r0, #16]
 800a0c6:	e004      	b.n	800a0d2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6853      	ldr	r3, [r2, #4]
 800a0cc:	681c      	ldr	r4, [r3, #0]
 800a0ce:	42ac      	cmp	r4, r5
 800a0d0:	d9fa      	bls.n	800a0c8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a0d2:	6853      	ldr	r3, [r2, #4]
 800a0d4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a0d6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a0d8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800a0da:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a0dc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800a0de:	6803      	ldr	r3, [r0, #0]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	6003      	str	r3, [r0, #0]
}
 800a0e4:	bc30      	pop	{r4, r5}
 800a0e6:	4770      	bx	lr

0800a0e8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a0e8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0ea:	6842      	ldr	r2, [r0, #4]
 800a0ec:	6881      	ldr	r1, [r0, #8]
 800a0ee:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a0f0:	6882      	ldr	r2, [r0, #8]
 800a0f2:	6841      	ldr	r1, [r0, #4]
 800a0f4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	4282      	cmp	r2, r0
 800a0fa:	d006      	beq.n	800a10a <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	3a01      	subs	r2, #1
 800a104:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a106:	6818      	ldr	r0, [r3, #0]
}
 800a108:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a10a:	6882      	ldr	r2, [r0, #8]
 800a10c:	605a      	str	r2, [r3, #4]
 800a10e:	e7f5      	b.n	800a0fc <uxListRemove+0x14>

0800a110 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a110:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a116:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <prvTaskExitError+0x3c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11e:	d008      	beq.n	800a132 <prvTaskExitError+0x22>
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	e7fe      	b.n	800a130 <prvTaskExitError+0x20>
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d0fc      	beq.n	800a142 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a148:	b002      	add	sp, #8
 800a14a:	4770      	bx	lr
 800a14c:	20000024 	.word	0x20000024

0800a150 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a150:	4808      	ldr	r0, [pc, #32]	; (800a174 <prvPortStartFirstTask+0x24>)
 800a152:	6800      	ldr	r0, [r0, #0]
 800a154:	6800      	ldr	r0, [r0, #0]
 800a156:	f380 8808 	msr	MSP, r0
 800a15a:	f04f 0000 	mov.w	r0, #0
 800a15e:	f380 8814 	msr	CONTROL, r0
 800a162:	b662      	cpsie	i
 800a164:	b661      	cpsie	f
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	df00      	svc	0
 800a170:	bf00      	nop
 800a172:	0000      	.short	0x0000
 800a174:	e000ed08 	.word	0xe000ed08

0800a178 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a178:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a188 <vPortEnableVFP+0x10>
 800a17c:	6801      	ldr	r1, [r0, #0]
 800a17e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a182:	6001      	str	r1, [r0, #0]
 800a184:	4770      	bx	lr
 800a186:	0000      	.short	0x0000
 800a188:	e000ed88 	.word	0xe000ed88

0800a18c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a18c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a190:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a194:	f021 0101 	bic.w	r1, r1, #1
 800a198:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a19c:	4b05      	ldr	r3, [pc, #20]	; (800a1b4 <pxPortInitialiseStack+0x28>)
 800a19e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1a2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1a6:	f06f 0302 	mvn.w	r3, #2
 800a1aa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800a1ae:	3844      	subs	r0, #68	; 0x44
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	0800a111 	.word	0x0800a111
	...

0800a1c0 <SVC_Handler>:
	__asm volatile (
 800a1c0:	4b07      	ldr	r3, [pc, #28]	; (800a1e0 <pxCurrentTCBConst2>)
 800a1c2:	6819      	ldr	r1, [r3, #0]
 800a1c4:	6808      	ldr	r0, [r1, #0]
 800a1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ca:	f380 8809 	msr	PSP, r0
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f04f 0000 	mov.w	r0, #0
 800a1d6:	f380 8811 	msr	BASEPRI, r0
 800a1da:	4770      	bx	lr
 800a1dc:	f3af 8000 	nop.w

0800a1e0 <pxCurrentTCBConst2>:
 800a1e0:	20004004 	.word	0x20004004

0800a1e4 <vPortEnterCritical>:
 800a1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a1f4:	4a0a      	ldr	r2, [pc, #40]	; (800a220 <vPortEnterCritical+0x3c>)
 800a1f6:	6813      	ldr	r3, [r2, #0]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d000      	beq.n	800a202 <vPortEnterCritical+0x1e>
}
 800a200:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a202:	4b08      	ldr	r3, [pc, #32]	; (800a224 <vPortEnterCritical+0x40>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a20a:	d0f9      	beq.n	800a200 <vPortEnterCritical+0x1c>
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	e7fe      	b.n	800a21c <vPortEnterCritical+0x38>
 800a21e:	bf00      	nop
 800a220:	20000024 	.word	0x20000024
 800a224:	e000ed04 	.word	0xe000ed04

0800a228 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a228:	4b09      	ldr	r3, [pc, #36]	; (800a250 <vPortExitCritical+0x28>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	b943      	cbnz	r3, 800a240 <vPortExitCritical+0x18>
 800a22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	e7fe      	b.n	800a23e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a240:	3b01      	subs	r3, #1
 800a242:	4a03      	ldr	r2, [pc, #12]	; (800a250 <vPortExitCritical+0x28>)
 800a244:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a246:	b90b      	cbnz	r3, 800a24c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a248:	f383 8811 	msr	BASEPRI, r3
}
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	20000024 	.word	0x20000024
	...

0800a260 <PendSV_Handler>:
	__asm volatile
 800a260:	f3ef 8009 	mrs	r0, PSP
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <pxCurrentTCBConst>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	f01e 0f10 	tst.w	lr, #16
 800a270:	bf08      	it	eq
 800a272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27a:	6010      	str	r0, [r2, #0]
 800a27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a280:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a284:	f380 8811 	msr	BASEPRI, r0
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f001 faa4 	bl	800b7dc <vTaskSwitchContext>
 800a294:	f04f 0000 	mov.w	r0, #0
 800a298:	f380 8811 	msr	BASEPRI, r0
 800a29c:	bc09      	pop	{r0, r3}
 800a29e:	6819      	ldr	r1, [r3, #0]
 800a2a0:	6808      	ldr	r0, [r1, #0]
 800a2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a6:	f01e 0f10 	tst.w	lr, #16
 800a2aa:	bf08      	it	eq
 800a2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2b0:	f380 8809 	msr	PSP, r0
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	f3af 8000 	nop.w

0800a2c0 <pxCurrentTCBConst>:
 800a2c0:	20004004 	.word	0x20004004

0800a2c4 <SysTick_Handler>:
{
 800a2c4:	b508      	push	{r3, lr}
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a2d6:	f001 f91d 	bl	800b514 <xTaskIncrementTick>
 800a2da:	b118      	cbz	r0, 800a2e4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2dc:	4b03      	ldr	r3, [pc, #12]	; (800a2ec <SysTick_Handler+0x28>)
 800a2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f383 8811 	msr	BASEPRI, r3
}
 800a2ea:	bd08      	pop	{r3, pc}
 800a2ec:	e000ed04 	.word	0xe000ed04

0800a2f0 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2f0:	4b3a      	ldr	r3, [pc, #232]	; (800a3dc <xPortStartScheduler+0xec>)
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	4b3a      	ldr	r3, [pc, #232]	; (800a3e0 <xPortStartScheduler+0xf0>)
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d00d      	beq.n	800a316 <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2fa:	4b38      	ldr	r3, [pc, #224]	; (800a3dc <xPortStartScheduler+0xec>)
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	4b39      	ldr	r3, [pc, #228]	; (800a3e4 <xPortStartScheduler+0xf4>)
 800a300:	429a      	cmp	r2, r3
 800a302:	d111      	bne.n	800a328 <xPortStartScheduler+0x38>
	__asm volatile
 800a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	e7fe      	b.n	800a314 <xPortStartScheduler+0x24>
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	e7fe      	b.n	800a326 <xPortStartScheduler+0x36>
{
 800a328:	b510      	push	{r4, lr}
 800a32a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a32c:	4b2e      	ldr	r3, [pc, #184]	; (800a3e8 <xPortStartScheduler+0xf8>)
 800a32e:	781a      	ldrb	r2, [r3, #0]
 800a330:	b2d2      	uxtb	r2, r2
 800a332:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a334:	22ff      	movs	r2, #255	; 0xff
 800a336:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a340:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a344:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a348:	4a28      	ldr	r2, [pc, #160]	; (800a3ec <xPortStartScheduler+0xfc>)
 800a34a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a34c:	4b28      	ldr	r3, [pc, #160]	; (800a3f0 <xPortStartScheduler+0x100>)
 800a34e:	2207      	movs	r2, #7
 800a350:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a352:	e009      	b.n	800a368 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800a354:	4a26      	ldr	r2, [pc, #152]	; (800a3f0 <xPortStartScheduler+0x100>)
 800a356:	6813      	ldr	r3, [r2, #0]
 800a358:	3b01      	subs	r3, #1
 800a35a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a35c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	b2db      	uxtb	r3, r3
 800a364:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a368:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a36c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a370:	d1f0      	bne.n	800a354 <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a372:	4b1f      	ldr	r3, [pc, #124]	; (800a3f0 <xPortStartScheduler+0x100>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b03      	cmp	r3, #3
 800a378:	d008      	beq.n	800a38c <xPortStartScheduler+0x9c>
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	e7fe      	b.n	800a38a <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a38c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a38e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a392:	4a17      	ldr	r2, [pc, #92]	; (800a3f0 <xPortStartScheduler+0x100>)
 800a394:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a396:	9b01      	ldr	r3, [sp, #4]
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	4a13      	ldr	r2, [pc, #76]	; (800a3e8 <xPortStartScheduler+0xf8>)
 800a39c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a39e:	4b15      	ldr	r3, [pc, #84]	; (800a3f4 <xPortStartScheduler+0x104>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800a3a6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800a3ae:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800a3b0:	f7f7 fcae 	bl	8001d10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a3b4:	2400      	movs	r4, #0
 800a3b6:	4b10      	ldr	r3, [pc, #64]	; (800a3f8 <xPortStartScheduler+0x108>)
 800a3b8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800a3ba:	f7ff fedd 	bl	800a178 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3be:	4a0f      	ldr	r2, [pc, #60]	; (800a3fc <xPortStartScheduler+0x10c>)
 800a3c0:	6813      	ldr	r3, [r2, #0]
 800a3c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3c6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800a3c8:	f7ff fec2 	bl	800a150 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a3cc:	f001 fa06 	bl	800b7dc <vTaskSwitchContext>
	prvTaskExitError();
 800a3d0:	f7ff fe9e 	bl	800a110 <prvTaskExitError>
}
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	b002      	add	sp, #8
 800a3d8:	bd10      	pop	{r4, pc}
 800a3da:	bf00      	nop
 800a3dc:	e000ed00 	.word	0xe000ed00
 800a3e0:	410fc271 	.word	0x410fc271
 800a3e4:	410fc270 	.word	0x410fc270
 800a3e8:	e000e400 	.word	0xe000e400
 800a3ec:	20003ffc 	.word	0x20003ffc
 800a3f0:	20004000 	.word	0x20004000
 800a3f4:	e000ed20 	.word	0xe000ed20
 800a3f8:	20000024 	.word	0x20000024
 800a3fc:	e000ef34 	.word	0xe000ef34

0800a400 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a400:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a404:	2b0f      	cmp	r3, #15
 800a406:	d90f      	bls.n	800a428 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a408:	4a10      	ldr	r2, [pc, #64]	; (800a44c <vPortValidateInterruptPriority+0x4c>)
 800a40a:	5c9b      	ldrb	r3, [r3, r2]
 800a40c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a40e:	4a10      	ldr	r2, [pc, #64]	; (800a450 <vPortValidateInterruptPriority+0x50>)
 800a410:	7812      	ldrb	r2, [r2, #0]
 800a412:	429a      	cmp	r2, r3
 800a414:	d908      	bls.n	800a428 <vPortValidateInterruptPriority+0x28>
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	e7fe      	b.n	800a426 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a428:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <vPortValidateInterruptPriority+0x54>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a430:	4a09      	ldr	r2, [pc, #36]	; (800a458 <vPortValidateInterruptPriority+0x58>)
 800a432:	6812      	ldr	r2, [r2, #0]
 800a434:	4293      	cmp	r3, r2
 800a436:	d908      	bls.n	800a44a <vPortValidateInterruptPriority+0x4a>
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	e7fe      	b.n	800a448 <vPortValidateInterruptPriority+0x48>
	}
 800a44a:	4770      	bx	lr
 800a44c:	e000e3f0 	.word	0xe000e3f0
 800a450:	20003ffc 	.word	0x20003ffc
 800a454:	e000ed0c 	.word	0xe000ed0c
 800a458:	20004000 	.word	0x20004000

0800a45c <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a45c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a45e:	b123      	cbz	r3, 800a46a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a460:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a462:	6818      	ldr	r0, [r3, #0]
 800a464:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
 800a468:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a46a:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800a46c:	4770      	bx	lr

0800a46e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a46e:	b510      	push	{r4, lr}
 800a470:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a472:	f7ff feb7 	bl	800a1e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a476:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a478:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d004      	beq.n	800a488 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800a47e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800a480:	f7ff fed2 	bl	800a228 <vPortExitCritical>

	return xReturn;
}
 800a484:	4620      	mov	r0, r4
 800a486:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800a488:	2401      	movs	r4, #1
 800a48a:	e7f9      	b.n	800a480 <prvIsQueueFull+0x12>

0800a48c <prvIsQueueEmpty>:
{
 800a48c:	b510      	push	{r4, lr}
 800a48e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a490:	f7ff fea8 	bl	800a1e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a496:	b123      	cbz	r3, 800a4a2 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 800a498:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a49a:	f7ff fec5 	bl	800a228 <vPortExitCritical>
}
 800a49e:	4620      	mov	r0, r4
 800a4a0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800a4a2:	2401      	movs	r4, #1
 800a4a4:	e7f9      	b.n	800a49a <prvIsQueueEmpty+0xe>

0800a4a6 <prvCopyDataToQueue>:
{
 800a4a6:	b570      	push	{r4, r5, r6, lr}
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ac:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a4ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a4b0:	b95a      	cbnz	r2, 800a4ca <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4b2:	6803      	ldr	r3, [r0, #0]
 800a4b4:	b11b      	cbz	r3, 800a4be <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800a4b6:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4b8:	3501      	adds	r5, #1
 800a4ba:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800a4bc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a4be:	6840      	ldr	r0, [r0, #4]
 800a4c0:	f001 fb26 	bl	800bb10 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	6063      	str	r3, [r4, #4]
 800a4c8:	e7f6      	b.n	800a4b8 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800a4ca:	b96e      	cbnz	r6, 800a4e8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a4cc:	6880      	ldr	r0, [r0, #8]
 800a4ce:	f003 ff63 	bl	800e398 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a4d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a4d4:	68a3      	ldr	r3, [r4, #8]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4da:	6862      	ldr	r2, [r4, #4]
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d319      	bcc.n	800a514 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	e7e7      	b.n	800a4b8 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4e8:	68c0      	ldr	r0, [r0, #12]
 800a4ea:	f003 ff55 	bl	800e398 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a4ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a4f0:	4252      	negs	r2, r2
 800a4f2:	68e3      	ldr	r3, [r4, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4f8:	6821      	ldr	r1, [r4, #0]
 800a4fa:	428b      	cmp	r3, r1
 800a4fc:	d202      	bcs.n	800a504 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a4fe:	6863      	ldr	r3, [r4, #4]
 800a500:	441a      	add	r2, r3
 800a502:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800a504:	2e02      	cmp	r6, #2
 800a506:	d001      	beq.n	800a50c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800a508:	2000      	movs	r0, #0
 800a50a:	e7d5      	b.n	800a4b8 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a50c:	b125      	cbz	r5, 800a518 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800a50e:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800a510:	2000      	movs	r0, #0
 800a512:	e7d1      	b.n	800a4b8 <prvCopyDataToQueue+0x12>
 800a514:	2000      	movs	r0, #0
 800a516:	e7cf      	b.n	800a4b8 <prvCopyDataToQueue+0x12>
 800a518:	2000      	movs	r0, #0
 800a51a:	e7cd      	b.n	800a4b8 <prvCopyDataToQueue+0x12>

0800a51c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a51c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a51e:	b172      	cbz	r2, 800a53e <prvCopyDataFromQueue+0x22>
{
 800a520:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a522:	68c3      	ldr	r3, [r0, #12]
 800a524:	4413      	add	r3, r2
 800a526:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a528:	6844      	ldr	r4, [r0, #4]
 800a52a:	42a3      	cmp	r3, r4
 800a52c:	d301      	bcc.n	800a532 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a52e:	6803      	ldr	r3, [r0, #0]
 800a530:	60c3      	str	r3, [r0, #12]
 800a532:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a534:	68c1      	ldr	r1, [r0, #12]
 800a536:	4620      	mov	r0, r4
 800a538:	f003 ff2e 	bl	800e398 <memcpy>
}
 800a53c:	bd10      	pop	{r4, pc}
 800a53e:	4770      	bx	lr

0800a540 <prvUnlockQueue>:
{
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800a544:	f7ff fe4e 	bl	800a1e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a548:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800a54c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a54e:	e003      	b.n	800a558 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800a550:	f001 fa58 	bl	800ba04 <vTaskMissedYield>
			--cTxLock;
 800a554:	3c01      	subs	r4, #1
 800a556:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a558:	2c00      	cmp	r4, #0
 800a55a:	dd08      	ble.n	800a56e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a55c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a55e:	b133      	cbz	r3, 800a56e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a560:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a564:	f001 f9ba 	bl	800b8dc <xTaskRemoveFromEventList>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d0f3      	beq.n	800a554 <prvUnlockQueue+0x14>
 800a56c:	e7f0      	b.n	800a550 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800a56e:	23ff      	movs	r3, #255	; 0xff
 800a570:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a574:	f7ff fe58 	bl	800a228 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a578:	f7ff fe34 	bl	800a1e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a57c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800a580:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a582:	e003      	b.n	800a58c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 800a584:	f001 fa3e 	bl	800ba04 <vTaskMissedYield>
				--cRxLock;
 800a588:	3c01      	subs	r4, #1
 800a58a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a58c:	2c00      	cmp	r4, #0
 800a58e:	dd08      	ble.n	800a5a2 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a590:	692b      	ldr	r3, [r5, #16]
 800a592:	b133      	cbz	r3, 800a5a2 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a594:	f105 0010 	add.w	r0, r5, #16
 800a598:	f001 f9a0 	bl	800b8dc <xTaskRemoveFromEventList>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d0f3      	beq.n	800a588 <prvUnlockQueue+0x48>
 800a5a0:	e7f0      	b.n	800a584 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800a5a2:	23ff      	movs	r3, #255	; 0xff
 800a5a4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800a5a8:	f7ff fe3e 	bl	800a228 <vPortExitCritical>
}
 800a5ac:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a5b0 <xQueueGenericReset>:
{
 800a5b0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800a5b2:	b940      	cbnz	r0, 800a5c6 <xQueueGenericReset+0x16>
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	e7fe      	b.n	800a5c4 <xQueueGenericReset+0x14>
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800a5ca:	f7ff fe0b 	bl	800a1e4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a5ce:	6821      	ldr	r1, [r4, #0]
 800a5d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a5d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5d4:	fb03 1002 	mla	r0, r3, r2, r1
 800a5d8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5da:	2000      	movs	r0, #0
 800a5dc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5de:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a5e0:	3a01      	subs	r2, #1
 800a5e2:	fb02 1303 	mla	r3, r2, r3, r1
 800a5e6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a5e8:	23ff      	movs	r3, #255	; 0xff
 800a5ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a5ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800a5f2:	b9a5      	cbnz	r5, 800a61e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5f4:	6923      	ldr	r3, [r4, #16]
 800a5f6:	b91b      	cbnz	r3, 800a600 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800a5f8:	f7ff fe16 	bl	800a228 <vPortExitCritical>
}
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a600:	f104 0010 	add.w	r0, r4, #16
 800a604:	f001 f96a 	bl	800b8dc <xTaskRemoveFromEventList>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d0f5      	beq.n	800a5f8 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 800a60c:	4b08      	ldr	r3, [pc, #32]	; (800a630 <xQueueGenericReset+0x80>)
 800a60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a612:	601a      	str	r2, [r3, #0]
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	e7ec      	b.n	800a5f8 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a61e:	f104 0010 	add.w	r0, r4, #16
 800a622:	f7ff fd2d 	bl	800a080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a626:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a62a:	f7ff fd29 	bl	800a080 <vListInitialise>
 800a62e:	e7e3      	b.n	800a5f8 <xQueueGenericReset+0x48>
 800a630:	e000ed04 	.word	0xe000ed04

0800a634 <prvInitialiseNewQueue>:
{
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	461d      	mov	r5, r3
 800a638:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a63a:	460b      	mov	r3, r1
 800a63c:	b149      	cbz	r1, 800a652 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a63e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800a640:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a642:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a644:	2101      	movs	r1, #1
 800a646:	4620      	mov	r0, r4
 800a648:	f7ff ffb2 	bl	800a5b0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a64c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800a650:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a652:	6024      	str	r4, [r4, #0]
 800a654:	e7f4      	b.n	800a640 <prvInitialiseNewQueue+0xc>

0800a656 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a656:	b940      	cbnz	r0, 800a66a <xQueueGenericCreateStatic+0x14>
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	e7fe      	b.n	800a668 <xQueueGenericCreateStatic+0x12>
	{
 800a66a:	b510      	push	{r4, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 800a670:	b153      	cbz	r3, 800a688 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a672:	b192      	cbz	r2, 800a69a <xQueueGenericCreateStatic+0x44>
 800a674:	b989      	cbnz	r1, 800a69a <xQueueGenericCreateStatic+0x44>
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	e7fe      	b.n	800a686 <xQueueGenericCreateStatic+0x30>
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	e7fe      	b.n	800a698 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a69a:	b94a      	cbnz	r2, 800a6b0 <xQueueGenericCreateStatic+0x5a>
 800a69c:	b141      	cbz	r1, 800a6b0 <xQueueGenericCreateStatic+0x5a>
 800a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	e7fe      	b.n	800a6ae <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a6b0:	2050      	movs	r0, #80	; 0x50
 800a6b2:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a6b4:	9803      	ldr	r0, [sp, #12]
 800a6b6:	2850      	cmp	r0, #80	; 0x50
 800a6b8:	d008      	beq.n	800a6cc <xQueueGenericCreateStatic+0x76>
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	e7fe      	b.n	800a6ca <xQueueGenericCreateStatic+0x74>
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6d6:	9400      	str	r4, [sp, #0]
 800a6d8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800a6dc:	f7ff ffaa 	bl	800a634 <prvInitialiseNewQueue>
	}
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	b004      	add	sp, #16
 800a6e4:	bd10      	pop	{r4, pc}

0800a6e6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6e6:	b940      	cbnz	r0, 800a6fa <xQueueGenericCreate+0x14>
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	e7fe      	b.n	800a6f8 <xQueueGenericCreate+0x12>
	{
 800a6fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6fc:	b083      	sub	sp, #12
 800a6fe:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800a700:	b111      	cbz	r1, 800a708 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a702:	fb01 f000 	mul.w	r0, r1, r0
 800a706:	e000      	b.n	800a70a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 800a708:	2000      	movs	r0, #0
 800a70a:	4617      	mov	r7, r2
 800a70c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a70e:	3050      	adds	r0, #80	; 0x50
 800a710:	f7ff fbfa 	bl	8009f08 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800a714:	4605      	mov	r5, r0
 800a716:	b150      	cbz	r0, 800a72e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a718:	2300      	movs	r3, #0
 800a71a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a71e:	9000      	str	r0, [sp, #0]
 800a720:	463b      	mov	r3, r7
 800a722:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800a726:	4621      	mov	r1, r4
 800a728:	4630      	mov	r0, r6
 800a72a:	f7ff ff83 	bl	800a634 <prvInitialiseNewQueue>
	}
 800a72e:	4628      	mov	r0, r5
 800a730:	b003      	add	sp, #12
 800a732:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a734 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800a734:	b940      	cbnz	r0, 800a748 <xQueueCreateCountingSemaphoreStatic+0x14>
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	e7fe      	b.n	800a746 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a748:	4288      	cmp	r0, r1
 800a74a:	d208      	bcs.n	800a75e <xQueueCreateCountingSemaphoreStatic+0x2a>
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	e7fe      	b.n	800a75c <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 800a75e:	b510      	push	{r4, lr}
 800a760:	b082      	sub	sp, #8
 800a762:	4613      	mov	r3, r2
 800a764:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a766:	2202      	movs	r2, #2
 800a768:	9200      	str	r2, [sp, #0]
 800a76a:	2200      	movs	r2, #0
 800a76c:	4611      	mov	r1, r2
 800a76e:	f7ff ff72 	bl	800a656 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800a772:	4603      	mov	r3, r0
 800a774:	b100      	cbz	r0, 800a778 <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a776:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800a778:	4618      	mov	r0, r3
 800a77a:	b002      	add	sp, #8
 800a77c:	bd10      	pop	{r4, pc}

0800a77e <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800a77e:	b940      	cbnz	r0, 800a792 <xQueueCreateCountingSemaphore+0x14>
 800a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	e7fe      	b.n	800a790 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a792:	4288      	cmp	r0, r1
 800a794:	d208      	bcs.n	800a7a8 <xQueueCreateCountingSemaphore+0x2a>
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	e7fe      	b.n	800a7a6 <xQueueCreateCountingSemaphore+0x28>
	{
 800a7a8:	b510      	push	{r4, lr}
 800a7aa:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a7ac:	2202      	movs	r2, #2
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	f7ff ff99 	bl	800a6e6 <xQueueGenericCreate>
		if( xHandle != NULL )
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	b100      	cbz	r0, 800a7ba <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a7b8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	bd10      	pop	{r4, pc}
	...

0800a7c0 <xQueueGenericSend>:
{
 800a7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800a7c6:	b160      	cbz	r0, 800a7e2 <xQueueGenericSend+0x22>
 800a7c8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7ca:	b999      	cbnz	r1, 800a7f4 <xQueueGenericSend+0x34>
 800a7cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a7ce:	b18a      	cbz	r2, 800a7f4 <xQueueGenericSend+0x34>
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	e7fe      	b.n	800a7e0 <xQueueGenericSend+0x20>
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	e7fe      	b.n	800a7f2 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d10b      	bne.n	800a810 <xQueueGenericSend+0x50>
 800a7f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a7fa:	2a01      	cmp	r2, #1
 800a7fc:	d008      	beq.n	800a810 <xQueueGenericSend+0x50>
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	e7fe      	b.n	800a80e <xQueueGenericSend+0x4e>
 800a810:	461e      	mov	r6, r3
 800a812:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a814:	f001 f920 	bl	800ba58 <xTaskGetSchedulerState>
 800a818:	b950      	cbnz	r0, 800a830 <xQueueGenericSend+0x70>
 800a81a:	9b01      	ldr	r3, [sp, #4]
 800a81c:	b153      	cbz	r3, 800a834 <xQueueGenericSend+0x74>
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	e7fe      	b.n	800a82e <xQueueGenericSend+0x6e>
 800a830:	2500      	movs	r5, #0
 800a832:	e03a      	b.n	800a8aa <xQueueGenericSend+0xea>
 800a834:	2500      	movs	r5, #0
 800a836:	e038      	b.n	800a8aa <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a838:	4632      	mov	r2, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	4620      	mov	r0, r4
 800a83e:	f7ff fe32 	bl	800a4a6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a844:	b94b      	cbnz	r3, 800a85a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 800a846:	b1a8      	cbz	r0, 800a874 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 800a848:	4b3b      	ldr	r3, [pc, #236]	; (800a938 <xQueueGenericSend+0x178>)
 800a84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	e00c      	b.n	800a874 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a85a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a85e:	f001 f83d 	bl	800b8dc <xTaskRemoveFromEventList>
 800a862:	b138      	cbz	r0, 800a874 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 800a864:	4b34      	ldr	r3, [pc, #208]	; (800a938 <xQueueGenericSend+0x178>)
 800a866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a874:	f7ff fcd8 	bl	800a228 <vPortExitCritical>
				return pdPASS;
 800a878:	2001      	movs	r0, #1
}
 800a87a:	b005      	add	sp, #20
 800a87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800a87e:	f7ff fcd3 	bl	800a228 <vPortExitCritical>
					return errQUEUE_FULL;
 800a882:	2000      	movs	r0, #0
 800a884:	e7f9      	b.n	800a87a <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a886:	a802      	add	r0, sp, #8
 800a888:	f001 f870 	bl	800b96c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a88c:	2501      	movs	r5, #1
 800a88e:	e019      	b.n	800a8c4 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 800a890:	2300      	movs	r3, #0
 800a892:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a896:	e021      	b.n	800a8dc <xQueueGenericSend+0x11c>
 800a898:	2300      	movs	r3, #0
 800a89a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a89e:	e023      	b.n	800a8e8 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f7ff fe4d 	bl	800a540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8a6:	f000 fec1 	bl	800b62c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800a8aa:	f7ff fc9b 	bl	800a1e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a8b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d3c0      	bcc.n	800a838 <xQueueGenericSend+0x78>
 800a8b6:	2e02      	cmp	r6, #2
 800a8b8:	d0be      	beq.n	800a838 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8ba:	9b01      	ldr	r3, [sp, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d0de      	beq.n	800a87e <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 800a8c0:	2d00      	cmp	r5, #0
 800a8c2:	d0e0      	beq.n	800a886 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 800a8c4:	f7ff fcb0 	bl	800a228 <vPortExitCritical>
		vTaskSuspendAll();
 800a8c8:	f000 fdfc 	bl	800b4c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8cc:	f7ff fc8a 	bl	800a1e4 <vPortEnterCritical>
 800a8d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a8d4:	b25b      	sxtb	r3, r3
 800a8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8da:	d0d9      	beq.n	800a890 <xQueueGenericSend+0xd0>
 800a8dc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a8e0:	b25b      	sxtb	r3, r3
 800a8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e6:	d0d7      	beq.n	800a898 <xQueueGenericSend+0xd8>
 800a8e8:	f7ff fc9e 	bl	800a228 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8ec:	a901      	add	r1, sp, #4
 800a8ee:	a802      	add	r0, sp, #8
 800a8f0:	f001 f848 	bl	800b984 <xTaskCheckForTimeOut>
 800a8f4:	b9c8      	cbnz	r0, 800a92a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f7ff fdb9 	bl	800a46e <prvIsQueueFull>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d0cf      	beq.n	800a8a0 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a900:	9901      	ldr	r1, [sp, #4]
 800a902:	f104 0010 	add.w	r0, r4, #16
 800a906:	f000 ffb5 	bl	800b874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a90a:	4620      	mov	r0, r4
 800a90c:	f7ff fe18 	bl	800a540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a910:	f000 fe8c 	bl	800b62c <xTaskResumeAll>
 800a914:	2800      	cmp	r0, #0
 800a916:	d1c8      	bne.n	800a8aa <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800a918:	4b07      	ldr	r3, [pc, #28]	; (800a938 <xQueueGenericSend+0x178>)
 800a91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	e7bf      	b.n	800a8aa <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800a92a:	4620      	mov	r0, r4
 800a92c:	f7ff fe08 	bl	800a540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a930:	f000 fe7c 	bl	800b62c <xTaskResumeAll>
			return errQUEUE_FULL;
 800a934:	2000      	movs	r0, #0
 800a936:	e7a0      	b.n	800a87a <xQueueGenericSend+0xba>
 800a938:	e000ed04 	.word	0xe000ed04

0800a93c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800a93c:	b148      	cbz	r0, 800a952 <prvInitialiseMutex+0x16>
	{
 800a93e:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 800a940:	2100      	movs	r1, #0
 800a942:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a944:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a946:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a948:	460b      	mov	r3, r1
 800a94a:	460a      	mov	r2, r1
 800a94c:	f7ff ff38 	bl	800a7c0 <xQueueGenericSend>
	}
 800a950:	bd08      	pop	{r3, pc}
 800a952:	4770      	bx	lr

0800a954 <xQueueCreateMutex>:
	{
 800a954:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a956:	4602      	mov	r2, r0
 800a958:	2100      	movs	r1, #0
 800a95a:	2001      	movs	r0, #1
 800a95c:	f7ff fec3 	bl	800a6e6 <xQueueGenericCreate>
 800a960:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800a962:	f7ff ffeb 	bl	800a93c <prvInitialiseMutex>
	}
 800a966:	4620      	mov	r0, r4
 800a968:	bd10      	pop	{r4, pc}

0800a96a <xQueueCreateMutexStatic>:
	{
 800a96a:	b510      	push	{r4, lr}
 800a96c:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a96e:	9000      	str	r0, [sp, #0]
 800a970:	460b      	mov	r3, r1
 800a972:	2200      	movs	r2, #0
 800a974:	4611      	mov	r1, r2
 800a976:	2001      	movs	r0, #1
 800a978:	f7ff fe6d 	bl	800a656 <xQueueGenericCreateStatic>
 800a97c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800a97e:	f7ff ffdd 	bl	800a93c <prvInitialiseMutex>
	}
 800a982:	4620      	mov	r0, r4
 800a984:	b002      	add	sp, #8
 800a986:	bd10      	pop	{r4, pc}

0800a988 <xQueueGiveMutexRecursive>:
	{
 800a988:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800a98a:	b940      	cbnz	r0, 800a99e <xQueueGiveMutexRecursive+0x16>
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	e7fe      	b.n	800a99c <xQueueGiveMutexRecursive+0x14>
 800a99e:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800a9a0:	6845      	ldr	r5, [r0, #4]
 800a9a2:	f001 f853 	bl	800ba4c <xTaskGetCurrentTaskHandle>
 800a9a6:	4285      	cmp	r5, r0
 800a9a8:	d001      	beq.n	800a9ae <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800a9aa:	2000      	movs	r0, #0
	}
 800a9ac:	bd38      	pop	{r3, r4, r5, pc}
			( pxMutex->u.uxRecursiveCallCount )--;
 800a9ae:	68e3      	ldr	r3, [r4, #12]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a9b4:	b933      	cbnz	r3, 800a9c4 <xQueueGiveMutexRecursive+0x3c>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7ff ff00 	bl	800a7c0 <xQueueGenericSend>
			xReturn = pdPASS;
 800a9c0:	2001      	movs	r0, #1
 800a9c2:	e7f3      	b.n	800a9ac <xQueueGiveMutexRecursive+0x24>
 800a9c4:	2001      	movs	r0, #1
		return xReturn;
 800a9c6:	e7f1      	b.n	800a9ac <xQueueGiveMutexRecursive+0x24>

0800a9c8 <xQueueGenericSendFromISR>:
{
 800a9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800a9cc:	b160      	cbz	r0, 800a9e8 <xQueueGenericSendFromISR+0x20>
 800a9ce:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9d0:	b999      	cbnz	r1, 800a9fa <xQueueGenericSendFromISR+0x32>
 800a9d2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800a9d4:	b188      	cbz	r0, 800a9fa <xQueueGenericSendFromISR+0x32>
 800a9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	e7fe      	b.n	800a9e6 <xQueueGenericSendFromISR+0x1e>
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	e7fe      	b.n	800a9f8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d10b      	bne.n	800aa16 <xQueueGenericSendFromISR+0x4e>
 800a9fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800aa00:	2801      	cmp	r0, #1
 800aa02:	d008      	beq.n	800aa16 <xQueueGenericSendFromISR+0x4e>
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	e7fe      	b.n	800aa14 <xQueueGenericSendFromISR+0x4c>
 800aa16:	461f      	mov	r7, r3
 800aa18:	4690      	mov	r8, r2
 800aa1a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa1c:	f7ff fcf0 	bl	800a400 <vPortValidateInterruptPriority>
	__asm volatile
 800aa20:	f3ef 8611 	mrs	r6, BASEPRI
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800aa36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d303      	bcc.n	800aa44 <xQueueGenericSendFromISR+0x7c>
 800aa3c:	2f02      	cmp	r7, #2
 800aa3e:	d001      	beq.n	800aa44 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800aa40:	2000      	movs	r0, #0
 800aa42:	e00f      	b.n	800aa64 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa44:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800aa48:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa4a:	463a      	mov	r2, r7
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f7ff fd29 	bl	800a4a6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800aa54:	f1b5 3fff 	cmp.w	r5, #4294967295
 800aa58:	d008      	beq.n	800aa6c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa5a:	1c6b      	adds	r3, r5, #1
 800aa5c:	b25b      	sxtb	r3, r3
 800aa5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800aa62:	2001      	movs	r0, #1
	__asm volatile
 800aa64:	f386 8811 	msr	BASEPRI, r6
}
 800aa68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa6e:	b15b      	cbz	r3, 800aa88 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800aa74:	f000 ff32 	bl	800b8dc <xTaskRemoveFromEventList>
 800aa78:	b140      	cbz	r0, 800aa8c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 800aa7a:	f1b8 0f00 	cmp.w	r8, #0
 800aa7e:	d007      	beq.n	800aa90 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa80:	2001      	movs	r0, #1
 800aa82:	f8c8 0000 	str.w	r0, [r8]
 800aa86:	e7ed      	b.n	800aa64 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 800aa88:	2001      	movs	r0, #1
 800aa8a:	e7eb      	b.n	800aa64 <xQueueGenericSendFromISR+0x9c>
 800aa8c:	2001      	movs	r0, #1
 800aa8e:	e7e9      	b.n	800aa64 <xQueueGenericSendFromISR+0x9c>
 800aa90:	2001      	movs	r0, #1
 800aa92:	e7e7      	b.n	800aa64 <xQueueGenericSendFromISR+0x9c>

0800aa94 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800aa94:	b160      	cbz	r0, 800aab0 <xQueueGiveFromISR+0x1c>
{
 800aa96:	b570      	push	{r4, r5, r6, lr}
 800aa98:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aa9c:	b18b      	cbz	r3, 800aac2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	e7fe      	b.n	800aaae <xQueueGiveFromISR+0x1a>
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	e7fe      	b.n	800aac0 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800aac2:	6803      	ldr	r3, [r0, #0]
 800aac4:	b32b      	cbz	r3, 800ab12 <xQueueGiveFromISR+0x7e>
 800aac6:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aac8:	f7ff fc9a 	bl	800a400 <vPortValidateInterruptPriority>
	__asm volatile
 800aacc:	f3ef 8511 	mrs	r5, BASEPRI
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aae0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d926      	bls.n	800ab36 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800aae8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aaec:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aaee:	3201      	adds	r2, #1
 800aaf0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf6:	d118      	bne.n	800ab2a <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aafa:	b1f3      	cbz	r3, 800ab3a <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aafc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab00:	f000 feec 	bl	800b8dc <xTaskRemoveFromEventList>
 800ab04:	b1d8      	cbz	r0, 800ab3e <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800ab06:	b1e6      	cbz	r6, 800ab42 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab08:	2001      	movs	r0, #1
 800ab0a:	6030      	str	r0, [r6, #0]
	__asm volatile
 800ab0c:	f385 8811 	msr	BASEPRI, r5
}
 800ab10:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ab12:	6843      	ldr	r3, [r0, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d0d6      	beq.n	800aac6 <xQueueGiveFromISR+0x32>
	__asm volatile
 800ab18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1c:	f383 8811 	msr	BASEPRI, r3
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	e7fe      	b.n	800ab28 <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	b25b      	sxtb	r3, r3
 800ab2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800ab32:	2001      	movs	r0, #1
 800ab34:	e7ea      	b.n	800ab0c <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
 800ab36:	2000      	movs	r0, #0
 800ab38:	e7e8      	b.n	800ab0c <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
 800ab3a:	2001      	movs	r0, #1
 800ab3c:	e7e6      	b.n	800ab0c <xQueueGiveFromISR+0x78>
 800ab3e:	2001      	movs	r0, #1
 800ab40:	e7e4      	b.n	800ab0c <xQueueGiveFromISR+0x78>
 800ab42:	2001      	movs	r0, #1
 800ab44:	e7e2      	b.n	800ab0c <xQueueGiveFromISR+0x78>
	...

0800ab48 <xQueueReceive>:
{
 800ab48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ab4e:	b160      	cbz	r0, 800ab6a <xQueueReceive+0x22>
 800ab50:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab52:	b999      	cbnz	r1, 800ab7c <xQueueReceive+0x34>
 800ab54:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ab56:	b18b      	cbz	r3, 800ab7c <xQueueReceive+0x34>
 800ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	e7fe      	b.n	800ab68 <xQueueReceive+0x20>
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	e7fe      	b.n	800ab7a <xQueueReceive+0x32>
 800ab7c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab7e:	f000 ff6b 	bl	800ba58 <xTaskGetSchedulerState>
 800ab82:	b950      	cbnz	r0, 800ab9a <xQueueReceive+0x52>
 800ab84:	9b01      	ldr	r3, [sp, #4]
 800ab86:	b153      	cbz	r3, 800ab9e <xQueueReceive+0x56>
 800ab88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8c:	f383 8811 	msr	BASEPRI, r3
 800ab90:	f3bf 8f6f 	isb	sy
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	e7fe      	b.n	800ab98 <xQueueReceive+0x50>
 800ab9a:	2600      	movs	r6, #0
 800ab9c:	e03e      	b.n	800ac1c <xQueueReceive+0xd4>
 800ab9e:	2600      	movs	r6, #0
 800aba0:	e03c      	b.n	800ac1c <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aba2:	4639      	mov	r1, r7
 800aba4:	4620      	mov	r0, r4
 800aba6:	f7ff fcb9 	bl	800a51c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abaa:	3d01      	subs	r5, #1
 800abac:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abae:	6923      	ldr	r3, [r4, #16]
 800abb0:	b923      	cbnz	r3, 800abbc <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 800abb2:	f7ff fb39 	bl	800a228 <vPortExitCritical>
				return pdPASS;
 800abb6:	2001      	movs	r0, #1
}
 800abb8:	b005      	add	sp, #20
 800abba:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abbc:	f104 0010 	add.w	r0, r4, #16
 800abc0:	f000 fe8c 	bl	800b8dc <xTaskRemoveFromEventList>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d0f4      	beq.n	800abb2 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 800abc8:	4b34      	ldr	r3, [pc, #208]	; (800ac9c <xQueueReceive+0x154>)
 800abca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	e7eb      	b.n	800abb2 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 800abda:	f7ff fb25 	bl	800a228 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800abde:	2000      	movs	r0, #0
 800abe0:	e7ea      	b.n	800abb8 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abe2:	a802      	add	r0, sp, #8
 800abe4:	f000 fec2 	bl	800b96c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abe8:	2601      	movs	r6, #1
 800abea:	e021      	b.n	800ac30 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 800abec:	2300      	movs	r3, #0
 800abee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800abf2:	e029      	b.n	800ac48 <xQueueReceive+0x100>
 800abf4:	2300      	movs	r3, #0
 800abf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abfa:	e02b      	b.n	800ac54 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 800abfc:	4620      	mov	r0, r4
 800abfe:	f7ff fc9f 	bl	800a540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac02:	f000 fd13 	bl	800b62c <xTaskResumeAll>
 800ac06:	e009      	b.n	800ac1c <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f7ff fc99 	bl	800a540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac0e:	f000 fd0d 	bl	800b62c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac12:	4620      	mov	r0, r4
 800ac14:	f7ff fc3a 	bl	800a48c <prvIsQueueEmpty>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d13d      	bne.n	800ac98 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 800ac1c:	f7ff fae2 	bl	800a1e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac20:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	d1bd      	bne.n	800aba2 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac26:	9b01      	ldr	r3, [sp, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0d6      	beq.n	800abda <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 800ac2c:	2e00      	cmp	r6, #0
 800ac2e:	d0d8      	beq.n	800abe2 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 800ac30:	f7ff fafa 	bl	800a228 <vPortExitCritical>
		vTaskSuspendAll();
 800ac34:	f000 fc46 	bl	800b4c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac38:	f7ff fad4 	bl	800a1e4 <vPortEnterCritical>
 800ac3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ac40:	b25b      	sxtb	r3, r3
 800ac42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac46:	d0d1      	beq.n	800abec <xQueueReceive+0xa4>
 800ac48:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ac4c:	b25b      	sxtb	r3, r3
 800ac4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac52:	d0cf      	beq.n	800abf4 <xQueueReceive+0xac>
 800ac54:	f7ff fae8 	bl	800a228 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac58:	a901      	add	r1, sp, #4
 800ac5a:	a802      	add	r0, sp, #8
 800ac5c:	f000 fe92 	bl	800b984 <xTaskCheckForTimeOut>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d1d1      	bne.n	800ac08 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac64:	4620      	mov	r0, r4
 800ac66:	f7ff fc11 	bl	800a48c <prvIsQueueEmpty>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d0c6      	beq.n	800abfc <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac6e:	9901      	ldr	r1, [sp, #4]
 800ac70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ac74:	f000 fdfe 	bl	800b874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f7ff fc61 	bl	800a540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac7e:	f000 fcd5 	bl	800b62c <xTaskResumeAll>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d1ca      	bne.n	800ac1c <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 800ac86:	4b05      	ldr	r3, [pc, #20]	; (800ac9c <xQueueReceive+0x154>)
 800ac88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	e7c1      	b.n	800ac1c <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 800ac98:	2000      	movs	r0, #0
 800ac9a:	e78d      	b.n	800abb8 <xQueueReceive+0x70>
 800ac9c:	e000ed04 	.word	0xe000ed04

0800aca0 <xQueueSemaphoreTake>:
{
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800aca6:	b940      	cbnz	r0, 800acba <xQueueSemaphoreTake+0x1a>
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	e7fe      	b.n	800acb8 <xQueueSemaphoreTake+0x18>
 800acba:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800acbc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800acbe:	b143      	cbz	r3, 800acd2 <xQueueSemaphoreTake+0x32>
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	e7fe      	b.n	800acd0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acd2:	f000 fec1 	bl	800ba58 <xTaskGetSchedulerState>
 800acd6:	b950      	cbnz	r0, 800acee <xQueueSemaphoreTake+0x4e>
 800acd8:	9b01      	ldr	r3, [sp, #4]
 800acda:	b15b      	cbz	r3, 800acf4 <xQueueSemaphoreTake+0x54>
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	e7fe      	b.n	800acec <xQueueSemaphoreTake+0x4c>
 800acee:	2500      	movs	r5, #0
 800acf0:	462e      	mov	r6, r5
 800acf2:	e051      	b.n	800ad98 <xQueueSemaphoreTake+0xf8>
 800acf4:	2500      	movs	r5, #0
 800acf6:	462e      	mov	r6, r5
 800acf8:	e04e      	b.n	800ad98 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800acfa:	3b01      	subs	r3, #1
 800acfc:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	b913      	cbnz	r3, 800ad08 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ad02:	f000 ff9d 	bl	800bc40 <pvTaskIncrementMutexHeldCount>
 800ad06:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad08:	6923      	ldr	r3, [r4, #16]
 800ad0a:	b163      	cbz	r3, 800ad26 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad0c:	f104 0010 	add.w	r0, r4, #16
 800ad10:	f000 fde4 	bl	800b8dc <xTaskRemoveFromEventList>
 800ad14:	b138      	cbz	r0, 800ad26 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 800ad16:	4b48      	ldr	r3, [pc, #288]	; (800ae38 <xQueueSemaphoreTake+0x198>)
 800ad18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ad26:	f7ff fa7f 	bl	800a228 <vPortExitCritical>
				return pdPASS;
 800ad2a:	2501      	movs	r5, #1
}
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	b004      	add	sp, #16
 800ad30:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad32:	b145      	cbz	r5, 800ad46 <xQueueSemaphoreTake+0xa6>
 800ad34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	e7fe      	b.n	800ad44 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 800ad46:	f7ff fa6f 	bl	800a228 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ad4a:	e7ef      	b.n	800ad2c <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad4c:	a802      	add	r0, sp, #8
 800ad4e:	f000 fe0d 	bl	800b96c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad52:	2601      	movs	r6, #1
 800ad54:	e02a      	b.n	800adac <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 800ad56:	2300      	movs	r3, #0
 800ad58:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ad5c:	e032      	b.n	800adc4 <xQueueSemaphoreTake+0x124>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad64:	e034      	b.n	800add0 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 800ad66:	f7ff fa3d 	bl	800a1e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ad6a:	6860      	ldr	r0, [r4, #4]
 800ad6c:	f000 fe84 	bl	800ba78 <xTaskPriorityInherit>
 800ad70:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800ad72:	f7ff fa59 	bl	800a228 <vPortExitCritical>
 800ad76:	e03b      	b.n	800adf0 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f7ff fbe1 	bl	800a540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad7e:	f000 fc55 	bl	800b62c <xTaskResumeAll>
 800ad82:	e009      	b.n	800ad98 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 800ad84:	4620      	mov	r0, r4
 800ad86:	f7ff fbdb 	bl	800a540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad8a:	f000 fc4f 	bl	800b62c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f7ff fb7c 	bl	800a48c <prvIsQueueEmpty>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d140      	bne.n	800ae1a <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 800ad98:	f7ff fa24 	bl	800a1e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ad9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1ab      	bne.n	800acfa <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ada2:	9b01      	ldr	r3, [sp, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d0c4      	beq.n	800ad32 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 800ada8:	2e00      	cmp	r6, #0
 800adaa:	d0cf      	beq.n	800ad4c <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 800adac:	f7ff fa3c 	bl	800a228 <vPortExitCritical>
		vTaskSuspendAll();
 800adb0:	f000 fb88 	bl	800b4c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adb4:	f7ff fa16 	bl	800a1e4 <vPortEnterCritical>
 800adb8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800adbc:	b25b      	sxtb	r3, r3
 800adbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc2:	d0c8      	beq.n	800ad56 <xQueueSemaphoreTake+0xb6>
 800adc4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800adc8:	b25b      	sxtb	r3, r3
 800adca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adce:	d0c6      	beq.n	800ad5e <xQueueSemaphoreTake+0xbe>
 800add0:	f7ff fa2a 	bl	800a228 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800add4:	a901      	add	r1, sp, #4
 800add6:	a802      	add	r0, sp, #8
 800add8:	f000 fdd4 	bl	800b984 <xTaskCheckForTimeOut>
 800addc:	2800      	cmp	r0, #0
 800adde:	d1d1      	bne.n	800ad84 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ade0:	4620      	mov	r0, r4
 800ade2:	f7ff fb53 	bl	800a48c <prvIsQueueEmpty>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d0c6      	beq.n	800ad78 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d0ba      	beq.n	800ad66 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adf0:	9901      	ldr	r1, [sp, #4]
 800adf2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800adf6:	f000 fd3d 	bl	800b874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adfa:	4620      	mov	r0, r4
 800adfc:	f7ff fba0 	bl	800a540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae00:	f000 fc14 	bl	800b62c <xTaskResumeAll>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d1c7      	bne.n	800ad98 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 800ae08:	4b0b      	ldr	r3, [pc, #44]	; (800ae38 <xQueueSemaphoreTake+0x198>)
 800ae0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae0e:	601a      	str	r2, [r3, #0]
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	e7be      	b.n	800ad98 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 800ae1a:	2d00      	cmp	r5, #0
 800ae1c:	d086      	beq.n	800ad2c <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 800ae1e:	f7ff f9e1 	bl	800a1e4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae22:	4620      	mov	r0, r4
 800ae24:	f7ff fb1a 	bl	800a45c <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800ae28:	4601      	mov	r1, r0
 800ae2a:	6860      	ldr	r0, [r4, #4]
 800ae2c:	f000 feb8 	bl	800bba0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800ae30:	f7ff f9fa 	bl	800a228 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800ae34:	2500      	movs	r5, #0
 800ae36:	e779      	b.n	800ad2c <xQueueSemaphoreTake+0x8c>
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800ae3c:	b940      	cbnz	r0, 800ae50 <xQueueTakeMutexRecursive+0x14>
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	e7fe      	b.n	800ae4e <xQueueTakeMutexRecursive+0x12>
	{
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	4604      	mov	r4, r0
 800ae54:	460d      	mov	r5, r1
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ae56:	6846      	ldr	r6, [r0, #4]
 800ae58:	f000 fdf8 	bl	800ba4c <xTaskGetCurrentTaskHandle>
 800ae5c:	4286      	cmp	r6, r0
 800ae5e:	d009      	beq.n	800ae74 <xQueueTakeMutexRecursive+0x38>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ae60:	4629      	mov	r1, r5
 800ae62:	4620      	mov	r0, r4
 800ae64:	f7ff ff1c 	bl	800aca0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800ae68:	4602      	mov	r2, r0
 800ae6a:	b138      	cbz	r0, 800ae7c <xQueueTakeMutexRecursive+0x40>
				( pxMutex->u.uxRecursiveCallCount )++;
 800ae6c:	68e3      	ldr	r3, [r4, #12]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800ae72:	e003      	b.n	800ae7c <xQueueTakeMutexRecursive+0x40>
			( pxMutex->u.uxRecursiveCallCount )++;
 800ae74:	68e3      	ldr	r3, [r4, #12]
 800ae76:	3301      	adds	r3, #1
 800ae78:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 800ae7a:	2201      	movs	r2, #1
	}
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}

0800ae80 <xQueueReceiveFromISR>:
{
 800ae80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800ae84:	b160      	cbz	r0, 800aea0 <xQueueReceiveFromISR+0x20>
 800ae86:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae88:	b999      	cbnz	r1, 800aeb2 <xQueueReceiveFromISR+0x32>
 800ae8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ae8c:	b18b      	cbz	r3, 800aeb2 <xQueueReceiveFromISR+0x32>
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	e7fe      	b.n	800ae9e <xQueueReceiveFromISR+0x1e>
 800aea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	e7fe      	b.n	800aeb0 <xQueueReceiveFromISR+0x30>
 800aeb2:	4617      	mov	r7, r2
 800aeb4:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aeb6:	f7ff faa3 	bl	800a400 <vPortValidateInterruptPriority>
	__asm volatile
 800aeba:	f3ef 8611 	mrs	r6, BASEPRI
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aece:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aed2:	f1b8 0f00 	cmp.w	r8, #0
 800aed6:	d01d      	beq.n	800af14 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 800aed8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800aedc:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aede:	4649      	mov	r1, r9
 800aee0:	4620      	mov	r0, r4
 800aee2:	f7ff fb1b 	bl	800a51c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aee6:	f108 33ff 	add.w	r3, r8, #4294967295
 800aeea:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800aeec:	f1b5 3fff 	cmp.w	r5, #4294967295
 800aef0:	d005      	beq.n	800aefe <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aef2:	1c6b      	adds	r3, r5, #1
 800aef4:	b25b      	sxtb	r3, r3
 800aef6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800aefa:	2001      	movs	r0, #1
 800aefc:	e00b      	b.n	800af16 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aefe:	6923      	ldr	r3, [r4, #16]
 800af00:	b16b      	cbz	r3, 800af1e <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af02:	f104 0010 	add.w	r0, r4, #16
 800af06:	f000 fce9 	bl	800b8dc <xTaskRemoveFromEventList>
 800af0a:	b150      	cbz	r0, 800af22 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 800af0c:	b15f      	cbz	r7, 800af26 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af0e:	2001      	movs	r0, #1
 800af10:	6038      	str	r0, [r7, #0]
 800af12:	e000      	b.n	800af16 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 800af14:	2000      	movs	r0, #0
	__asm volatile
 800af16:	f386 8811 	msr	BASEPRI, r6
}
 800af1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 800af1e:	2001      	movs	r0, #1
 800af20:	e7f9      	b.n	800af16 <xQueueReceiveFromISR+0x96>
 800af22:	2001      	movs	r0, #1
 800af24:	e7f7      	b.n	800af16 <xQueueReceiveFromISR+0x96>
 800af26:	2001      	movs	r0, #1
 800af28:	e7f5      	b.n	800af16 <xQueueReceiveFromISR+0x96>

0800af2a <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 800af2a:	b940      	cbnz	r0, 800af3e <uxQueueMessagesWaiting+0x14>
	__asm volatile
 800af2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	e7fe      	b.n	800af3c <uxQueueMessagesWaiting+0x12>
{
 800af3e:	b510      	push	{r4, lr}
 800af40:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800af42:	f7ff f94f 	bl	800a1e4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800af46:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800af48:	f7ff f96e 	bl	800a228 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800af4c:	4620      	mov	r0, r4
 800af4e:	bd10      	pop	{r4, pc}

0800af50 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 800af50:	b108      	cbz	r0, 800af56 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800af52:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800af54:	4770      	bx	lr
 800af56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	e7fe      	b.n	800af66 <uxQueueMessagesWaitingFromISR+0x16>

0800af68 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af68:	2300      	movs	r3, #0
 800af6a:	2b07      	cmp	r3, #7
 800af6c:	d80c      	bhi.n	800af88 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af6e:	4a07      	ldr	r2, [pc, #28]	; (800af8c <vQueueAddToRegistry+0x24>)
 800af70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800af74:	b10a      	cbz	r2, 800af7a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af76:	3301      	adds	r3, #1
 800af78:	e7f7      	b.n	800af6a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af7a:	4a04      	ldr	r2, [pc, #16]	; (800af8c <vQueueAddToRegistry+0x24>)
 800af7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af84:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af86:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	2000588c 	.word	0x2000588c

0800af90 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af90:	2300      	movs	r3, #0
 800af92:	2b07      	cmp	r3, #7
 800af94:	d80f      	bhi.n	800afb6 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800af96:	4a08      	ldr	r2, [pc, #32]	; (800afb8 <vQueueUnregisterQueue+0x28>)
 800af98:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800af9c:	6852      	ldr	r2, [r2, #4]
 800af9e:	4282      	cmp	r2, r0
 800afa0:	d001      	beq.n	800afa6 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afa2:	3301      	adds	r3, #1
 800afa4:	e7f5      	b.n	800af92 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800afa6:	4a04      	ldr	r2, [pc, #16]	; (800afb8 <vQueueUnregisterQueue+0x28>)
 800afa8:	2100      	movs	r1, #0
 800afaa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800afae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800afb2:	6059      	str	r1, [r3, #4]
				break;
 800afb4:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800afb6:	4770      	bx	lr
 800afb8:	2000588c 	.word	0x2000588c

0800afbc <vQueueDelete>:
	configASSERT( pxQueue );
 800afbc:	b940      	cbnz	r0, 800afd0 <vQueueDelete+0x14>
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	e7fe      	b.n	800afce <vQueueDelete+0x12>
{
 800afd0:	b510      	push	{r4, lr}
 800afd2:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800afd4:	f7ff ffdc 	bl	800af90 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800afd8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800afdc:	b103      	cbz	r3, 800afe0 <vQueueDelete+0x24>
}
 800afde:	bd10      	pop	{r4, pc}
			vPortFree( pxQueue );
 800afe0:	4620      	mov	r0, r4
 800afe2:	f7ff f815 	bl	800a010 <vPortFree>
}
 800afe6:	e7fa      	b.n	800afde <vQueueDelete+0x22>

0800afe8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	4604      	mov	r4, r0
 800afec:	460d      	mov	r5, r1
 800afee:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aff0:	f7ff f8f8 	bl	800a1e4 <vPortEnterCritical>
 800aff4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aff8:	b25b      	sxtb	r3, r3
 800affa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affe:	d00d      	beq.n	800b01c <vQueueWaitForMessageRestricted+0x34>
 800b000:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b004:	b25b      	sxtb	r3, r3
 800b006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00a:	d00b      	beq.n	800b024 <vQueueWaitForMessageRestricted+0x3c>
 800b00c:	f7ff f90c 	bl	800a228 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b010:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b012:	b15b      	cbz	r3, 800b02c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b014:	4620      	mov	r0, r4
 800b016:	f7ff fa93 	bl	800a540 <prvUnlockQueue>
	}
 800b01a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800b01c:	2300      	movs	r3, #0
 800b01e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b022:	e7ed      	b.n	800b000 <vQueueWaitForMessageRestricted+0x18>
 800b024:	2300      	movs	r3, #0
 800b026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b02a:	e7ef      	b.n	800b00c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b02c:	4632      	mov	r2, r6
 800b02e:	4629      	mov	r1, r5
 800b030:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b034:	f000 fc36 	bl	800b8a4 <vTaskPlaceOnEventListRestricted>
 800b038:	e7ec      	b.n	800b014 <vQueueWaitForMessageRestricted+0x2c>
	...

0800b03c <prvGetExpectedIdleTime>:
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800b03c:	4b0d      	ldr	r3, [pc, #52]	; (800b074 <prvGetExpectedIdleTime+0x38>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	b953      	cbnz	r3, 800b058 <prvGetExpectedIdleTime+0x1c>
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800b042:	2200      	movs	r2, #0
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800b044:	4b0c      	ldr	r3, [pc, #48]	; (800b078 <prvGetExpectedIdleTime+0x3c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04a:	b973      	cbnz	r3, 800b06a <prvGetExpectedIdleTime+0x2e>
		{
			xReturn = 0;
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800b04c:	4b0b      	ldr	r3, [pc, #44]	; (800b07c <prvGetExpectedIdleTime+0x40>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d903      	bls.n	800b05c <prvGetExpectedIdleTime+0x20>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800b054:	2000      	movs	r0, #0
 800b056:	4770      	bx	lr
				uxHigherPriorityReadyTasks = pdTRUE;
 800b058:	2201      	movs	r2, #1
 800b05a:	e7f3      	b.n	800b044 <prvGetExpectedIdleTime+0x8>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800b05c:	b93a      	cbnz	r2, 800b06e <prvGetExpectedIdleTime+0x32>
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800b05e:	4b08      	ldr	r3, [pc, #32]	; (800b080 <prvGetExpectedIdleTime+0x44>)
 800b060:	6818      	ldr	r0, [r3, #0]
 800b062:	4b08      	ldr	r3, [pc, #32]	; (800b084 <prvGetExpectedIdleTime+0x48>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	1ac0      	subs	r0, r0, r3
 800b068:	4770      	bx	lr
			xReturn = 0;
 800b06a:	2000      	movs	r0, #0
 800b06c:	4770      	bx	lr
			xReturn = 0;
 800b06e:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	20004484 	.word	0x20004484
 800b078:	20004004 	.word	0x20004004
 800b07c:	20004010 	.word	0x20004010
 800b080:	200044b0 	.word	0x200044b0
 800b084:	200044f8 	.word	0x200044f8

0800b088 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b088:	4b08      	ldr	r3, [pc, #32]	; (800b0ac <prvResetNextTaskUnblockTime+0x24>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	b13b      	cbz	r3, 800b0a0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b090:	4b06      	ldr	r3, [pc, #24]	; (800b0ac <prvResetNextTaskUnblockTime+0x24>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b098:	685a      	ldr	r2, [r3, #4]
 800b09a:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <prvResetNextTaskUnblockTime+0x28>)
 800b09c:	601a      	str	r2, [r3, #0]
	}
}
 800b09e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0a0:	4b03      	ldr	r3, [pc, #12]	; (800b0b0 <prvResetNextTaskUnblockTime+0x28>)
 800b0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	20004008 	.word	0x20004008
 800b0b0:	200044b0 	.word	0x200044b0

0800b0b4 <prvInitialiseNewTask>:
{
 800b0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b8:	4681      	mov	r9, r0
 800b0ba:	460d      	mov	r5, r1
 800b0bc:	4617      	mov	r7, r2
 800b0be:	469a      	mov	sl, r3
 800b0c0:	9e08      	ldr	r6, [sp, #32]
 800b0c2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800b0c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b0c8:	0092      	lsls	r2, r2, #2
 800b0ca:	21a5      	movs	r1, #165	; 0xa5
 800b0cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b0ce:	f003 f96e 	bl	800e3ae <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b0d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b0d4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 800b0d8:	3a01      	subs	r2, #1
 800b0da:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b0de:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	2b0f      	cmp	r3, #15
 800b0e6:	d807      	bhi.n	800b0f8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0e8:	5ce9      	ldrb	r1, [r5, r3]
 800b0ea:	18e2      	adds	r2, r4, r3
 800b0ec:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800b0f0:	5cea      	ldrb	r2, [r5, r3]
 800b0f2:	b10a      	cbz	r2, 800b0f8 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	e7f5      	b.n	800b0e4 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0fe:	2e37      	cmp	r6, #55	; 0x37
 800b100:	d900      	bls.n	800b104 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b102:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800b104:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800b106:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b108:	2500      	movs	r5, #0
 800b10a:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b10c:	1d20      	adds	r0, r4, #4
 800b10e:	f7fe ffc2 	bl	800a096 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b112:	f104 0018 	add.w	r0, r4, #24
 800b116:	f7fe ffbe 	bl	800a096 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b11a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b11c:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800b120:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b122:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800b124:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b126:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b12a:	4652      	mov	r2, sl
 800b12c:	4649      	mov	r1, r9
 800b12e:	4638      	mov	r0, r7
 800b130:	f7ff f82c 	bl	800a18c <pxPortInitialiseStack>
 800b134:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800b136:	f1b8 0f00 	cmp.w	r8, #0
 800b13a:	d001      	beq.n	800b140 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b13c:	f8c8 4000 	str.w	r4, [r8]
}
 800b140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b144 <prvInitialiseTaskLists>:
{
 800b144:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b146:	2400      	movs	r4, #0
 800b148:	e007      	b.n	800b15a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b14a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800b14e:	0093      	lsls	r3, r2, #2
 800b150:	480e      	ldr	r0, [pc, #56]	; (800b18c <prvInitialiseTaskLists+0x48>)
 800b152:	4418      	add	r0, r3
 800b154:	f7fe ff94 	bl	800a080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b158:	3401      	adds	r4, #1
 800b15a:	2c37      	cmp	r4, #55	; 0x37
 800b15c:	d9f5      	bls.n	800b14a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800b15e:	4d0c      	ldr	r5, [pc, #48]	; (800b190 <prvInitialiseTaskLists+0x4c>)
 800b160:	4628      	mov	r0, r5
 800b162:	f7fe ff8d 	bl	800a080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b166:	4c0b      	ldr	r4, [pc, #44]	; (800b194 <prvInitialiseTaskLists+0x50>)
 800b168:	4620      	mov	r0, r4
 800b16a:	f7fe ff89 	bl	800a080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b16e:	480a      	ldr	r0, [pc, #40]	; (800b198 <prvInitialiseTaskLists+0x54>)
 800b170:	f7fe ff86 	bl	800a080 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800b174:	4809      	ldr	r0, [pc, #36]	; (800b19c <prvInitialiseTaskLists+0x58>)
 800b176:	f7fe ff83 	bl	800a080 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800b17a:	4809      	ldr	r0, [pc, #36]	; (800b1a0 <prvInitialiseTaskLists+0x5c>)
 800b17c:	f7fe ff80 	bl	800a080 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800b180:	4b08      	ldr	r3, [pc, #32]	; (800b1a4 <prvInitialiseTaskLists+0x60>)
 800b182:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b184:	4b08      	ldr	r3, [pc, #32]	; (800b1a8 <prvInitialiseTaskLists+0x64>)
 800b186:	601c      	str	r4, [r3, #0]
}
 800b188:	bd38      	pop	{r3, r4, r5, pc}
 800b18a:	bf00      	nop
 800b18c:	20004010 	.word	0x20004010
 800b190:	20004488 	.word	0x20004488
 800b194:	2000449c 	.word	0x2000449c
 800b198:	200044b8 	.word	0x200044b8
 800b19c:	200044e4 	.word	0x200044e4
 800b1a0:	200044d0 	.word	0x200044d0
 800b1a4:	20004008 	.word	0x20004008
 800b1a8:	2000400c 	.word	0x2000400c

0800b1ac <prvAddNewTaskToReadyList>:
{
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b1b0:	f7ff f818 	bl	800a1e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800b1b4:	4a21      	ldr	r2, [pc, #132]	; (800b23c <prvAddNewTaskToReadyList+0x90>)
 800b1b6:	6813      	ldr	r3, [r2, #0]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1bc:	4b20      	ldr	r3, [pc, #128]	; (800b240 <prvAddNewTaskToReadyList+0x94>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	b15b      	cbz	r3, 800b1da <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800b1c2:	4b20      	ldr	r3, [pc, #128]	; (800b244 <prvAddNewTaskToReadyList+0x98>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	b96b      	cbnz	r3, 800b1e4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1c8:	4b1d      	ldr	r3, [pc, #116]	; (800b240 <prvAddNewTaskToReadyList+0x94>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d807      	bhi.n	800b1e4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800b1d4:	4b1a      	ldr	r3, [pc, #104]	; (800b240 <prvAddNewTaskToReadyList+0x94>)
 800b1d6:	601c      	str	r4, [r3, #0]
 800b1d8:	e004      	b.n	800b1e4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800b1da:	4b19      	ldr	r3, [pc, #100]	; (800b240 <prvAddNewTaskToReadyList+0x94>)
 800b1dc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1de:	6813      	ldr	r3, [r2, #0]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d027      	beq.n	800b234 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 800b1e4:	4a18      	ldr	r2, [pc, #96]	; (800b248 <prvAddNewTaskToReadyList+0x9c>)
 800b1e6:	6813      	ldr	r3, [r2, #0]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b1ec:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800b1ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b1f0:	4a16      	ldr	r2, [pc, #88]	; (800b24c <prvAddNewTaskToReadyList+0xa0>)
 800b1f2:	6812      	ldr	r2, [r2, #0]
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d901      	bls.n	800b1fc <prvAddNewTaskToReadyList+0x50>
 800b1f8:	4a14      	ldr	r2, [pc, #80]	; (800b24c <prvAddNewTaskToReadyList+0xa0>)
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b200:	009a      	lsls	r2, r3, #2
 800b202:	1d21      	adds	r1, r4, #4
 800b204:	4812      	ldr	r0, [pc, #72]	; (800b250 <prvAddNewTaskToReadyList+0xa4>)
 800b206:	4410      	add	r0, r2
 800b208:	f7fe ff48 	bl	800a09c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800b20c:	f7ff f80c 	bl	800a228 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800b210:	4b0c      	ldr	r3, [pc, #48]	; (800b244 <prvAddNewTaskToReadyList+0x98>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	b16b      	cbz	r3, 800b232 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b216:	4b0a      	ldr	r3, [pc, #40]	; (800b240 <prvAddNewTaskToReadyList+0x94>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b21c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b21e:	429a      	cmp	r2, r3
 800b220:	d207      	bcs.n	800b232 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 800b222:	4b0c      	ldr	r3, [pc, #48]	; (800b254 <prvAddNewTaskToReadyList+0xa8>)
 800b224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	f3bf 8f6f 	isb	sy
}
 800b232:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800b234:	f7ff ff86 	bl	800b144 <prvInitialiseTaskLists>
 800b238:	e7d4      	b.n	800b1e4 <prvAddNewTaskToReadyList+0x38>
 800b23a:	bf00      	nop
 800b23c:	20004470 	.word	0x20004470
 800b240:	20004004 	.word	0x20004004
 800b244:	200044cc 	.word	0x200044cc
 800b248:	20004480 	.word	0x20004480
 800b24c:	20004484 	.word	0x20004484
 800b250:	20004010 	.word	0x20004010
 800b254:	e000ed04 	.word	0xe000ed04

0800b258 <prvDeleteTCB>:
	{
 800b258:	b510      	push	{r4, lr}
 800b25a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b25c:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 800b260:	b933      	cbnz	r3, 800b270 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800b262:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800b264:	f7fe fed4 	bl	800a010 <vPortFree>
				vPortFree( pxTCB );
 800b268:	4620      	mov	r0, r4
 800b26a:	f7fe fed1 	bl	800a010 <vPortFree>
	}
 800b26e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b270:	2b01      	cmp	r3, #1
 800b272:	d00a      	beq.n	800b28a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b274:	2b02      	cmp	r3, #2
 800b276:	d0fa      	beq.n	800b26e <prvDeleteTCB+0x16>
 800b278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	e7fe      	b.n	800b288 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 800b28a:	f7fe fec1 	bl	800a010 <vPortFree>
 800b28e:	e7ee      	b.n	800b26e <prvDeleteTCB+0x16>

0800b290 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b290:	4b0f      	ldr	r3, [pc, #60]	; (800b2d0 <prvCheckTasksWaitingTermination+0x40>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	b1d3      	cbz	r3, 800b2cc <prvCheckTasksWaitingTermination+0x3c>
{
 800b296:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800b298:	f7fe ffa4 	bl	800a1e4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b29c:	4b0d      	ldr	r3, [pc, #52]	; (800b2d4 <prvCheckTasksWaitingTermination+0x44>)
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2a2:	1d20      	adds	r0, r4, #4
 800b2a4:	f7fe ff20 	bl	800a0e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b2a8:	4a0b      	ldr	r2, [pc, #44]	; (800b2d8 <prvCheckTasksWaitingTermination+0x48>)
 800b2aa:	6813      	ldr	r3, [r2, #0]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b2b0:	4a07      	ldr	r2, [pc, #28]	; (800b2d0 <prvCheckTasksWaitingTermination+0x40>)
 800b2b2:	6813      	ldr	r3, [r2, #0]
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800b2b8:	f7fe ffb6 	bl	800a228 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f7ff ffcb 	bl	800b258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2c2:	4b03      	ldr	r3, [pc, #12]	; (800b2d0 <prvCheckTasksWaitingTermination+0x40>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1e6      	bne.n	800b298 <prvCheckTasksWaitingTermination+0x8>
}
 800b2ca:	bd10      	pop	{r4, pc}
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	20004474 	.word	0x20004474
 800b2d4:	200044e4 	.word	0x200044e4
 800b2d8:	20004470 	.word	0x20004470

0800b2dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2dc:	b570      	push	{r4, r5, r6, lr}
 800b2de:	4604      	mov	r4, r0
 800b2e0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2e2:	4b17      	ldr	r3, [pc, #92]	; (800b340 <prvAddCurrentTaskToDelayedList+0x64>)
 800b2e4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2e6:	4b17      	ldr	r3, [pc, #92]	; (800b344 <prvAddCurrentTaskToDelayedList+0x68>)
 800b2e8:	6818      	ldr	r0, [r3, #0]
 800b2ea:	3004      	adds	r0, #4
 800b2ec:	f7fe fefc 	bl	800a0e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2f0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b2f4:	d013      	beq.n	800b31e <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2f6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2f8:	4b12      	ldr	r3, [pc, #72]	; (800b344 <prvAddCurrentTaskToDelayedList+0x68>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800b2fe:	42a5      	cmp	r5, r4
 800b300:	d816      	bhi.n	800b330 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b302:	4b11      	ldr	r3, [pc, #68]	; (800b348 <prvAddCurrentTaskToDelayedList+0x6c>)
 800b304:	6818      	ldr	r0, [r3, #0]
 800b306:	4b0f      	ldr	r3, [pc, #60]	; (800b344 <prvAddCurrentTaskToDelayedList+0x68>)
 800b308:	6819      	ldr	r1, [r3, #0]
 800b30a:	3104      	adds	r1, #4
 800b30c:	f7fe fed2 	bl	800a0b4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800b310:	4b0e      	ldr	r3, [pc, #56]	; (800b34c <prvAddCurrentTaskToDelayedList+0x70>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	42a3      	cmp	r3, r4
 800b316:	d912      	bls.n	800b33e <prvAddCurrentTaskToDelayedList+0x62>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800b318:	4b0c      	ldr	r3, [pc, #48]	; (800b34c <prvAddCurrentTaskToDelayedList+0x70>)
 800b31a:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b31c:	e00f      	b.n	800b33e <prvAddCurrentTaskToDelayedList+0x62>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b31e:	2e00      	cmp	r6, #0
 800b320:	d0e9      	beq.n	800b2f6 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b322:	4b08      	ldr	r3, [pc, #32]	; (800b344 <prvAddCurrentTaskToDelayedList+0x68>)
 800b324:	6819      	ldr	r1, [r3, #0]
 800b326:	3104      	adds	r1, #4
 800b328:	4809      	ldr	r0, [pc, #36]	; (800b350 <prvAddCurrentTaskToDelayedList+0x74>)
 800b32a:	f7fe feb7 	bl	800a09c <vListInsertEnd>
 800b32e:	e006      	b.n	800b33e <prvAddCurrentTaskToDelayedList+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b330:	4b08      	ldr	r3, [pc, #32]	; (800b354 <prvAddCurrentTaskToDelayedList+0x78>)
 800b332:	6818      	ldr	r0, [r3, #0]
 800b334:	4b03      	ldr	r3, [pc, #12]	; (800b344 <prvAddCurrentTaskToDelayedList+0x68>)
 800b336:	6819      	ldr	r1, [r3, #0]
 800b338:	3104      	adds	r1, #4
 800b33a:	f7fe febb 	bl	800a0b4 <vListInsert>
}
 800b33e:	bd70      	pop	{r4, r5, r6, pc}
 800b340:	200044f8 	.word	0x200044f8
 800b344:	20004004 	.word	0x20004004
 800b348:	20004008 	.word	0x20004008
 800b34c:	200044b0 	.word	0x200044b0
 800b350:	200044d0 	.word	0x200044d0
 800b354:	2000400c 	.word	0x2000400c

0800b358 <xTaskCreateStatic>:
	{
 800b358:	b570      	push	{r4, r5, r6, lr}
 800b35a:	b086      	sub	sp, #24
 800b35c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b35e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800b360:	b945      	cbnz	r5, 800b374 <xTaskCreateStatic+0x1c>
 800b362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	e7fe      	b.n	800b372 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800b374:	b944      	cbnz	r4, 800b388 <xTaskCreateStatic+0x30>
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	f383 8811 	msr	BASEPRI, r3
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	e7fe      	b.n	800b386 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b388:	265c      	movs	r6, #92	; 0x5c
 800b38a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b38c:	9e04      	ldr	r6, [sp, #16]
 800b38e:	2e5c      	cmp	r6, #92	; 0x5c
 800b390:	d008      	beq.n	800b3a4 <xTaskCreateStatic+0x4c>
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	e7fe      	b.n	800b3a2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3a4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3a6:	2502      	movs	r5, #2
 800b3a8:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3ac:	2500      	movs	r5, #0
 800b3ae:	9503      	str	r5, [sp, #12]
 800b3b0:	9402      	str	r4, [sp, #8]
 800b3b2:	ad05      	add	r5, sp, #20
 800b3b4:	9501      	str	r5, [sp, #4]
 800b3b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b3b8:	9500      	str	r5, [sp, #0]
 800b3ba:	f7ff fe7b 	bl	800b0b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7ff fef4 	bl	800b1ac <prvAddNewTaskToReadyList>
	}
 800b3c4:	9805      	ldr	r0, [sp, #20]
 800b3c6:	b006      	add	sp, #24
 800b3c8:	bd70      	pop	{r4, r5, r6, pc}

0800b3ca <xTaskCreate>:
	{
 800b3ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	4607      	mov	r7, r0
 800b3d2:	4688      	mov	r8, r1
 800b3d4:	4615      	mov	r5, r2
 800b3d6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3d8:	0090      	lsls	r0, r2, #2
 800b3da:	f7fe fd95 	bl	8009f08 <pvPortMalloc>
			if( pxStack != NULL )
 800b3de:	b308      	cbz	r0, 800b424 <xTaskCreate+0x5a>
 800b3e0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b3e2:	205c      	movs	r0, #92	; 0x5c
 800b3e4:	f7fe fd90 	bl	8009f08 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	b1b8      	cbz	r0, 800b41c <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 800b3ec:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800b3ee:	b1e4      	cbz	r4, 800b42a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3f6:	9303      	str	r3, [sp, #12]
 800b3f8:	9402      	str	r4, [sp, #8]
 800b3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3fc:	9301      	str	r3, [sp, #4]
 800b3fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	464b      	mov	r3, r9
 800b404:	462a      	mov	r2, r5
 800b406:	4641      	mov	r1, r8
 800b408:	4638      	mov	r0, r7
 800b40a:	f7ff fe53 	bl	800b0b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b40e:	4620      	mov	r0, r4
 800b410:	f7ff fecc 	bl	800b1ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b414:	2001      	movs	r0, #1
	}
 800b416:	b005      	add	sp, #20
 800b418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7fe fdf7 	bl	800a010 <vPortFree>
 800b422:	e7e4      	b.n	800b3ee <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b424:	f04f 30ff 	mov.w	r0, #4294967295
 800b428:	e7f5      	b.n	800b416 <xTaskCreate+0x4c>
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800b42e:	e7f2      	b.n	800b416 <xTaskCreate+0x4c>

0800b430 <vTaskStartScheduler>:
{
 800b430:	b510      	push	{r4, lr}
 800b432:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b434:	2400      	movs	r4, #0
 800b436:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b438:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b43a:	aa07      	add	r2, sp, #28
 800b43c:	a906      	add	r1, sp, #24
 800b43e:	a805      	add	r0, sp, #20
 800b440:	f7fe fcea 	bl	8009e18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b444:	9b05      	ldr	r3, [sp, #20]
 800b446:	9302      	str	r3, [sp, #8]
 800b448:	9b06      	ldr	r3, [sp, #24]
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	9400      	str	r4, [sp, #0]
 800b44e:	4623      	mov	r3, r4
 800b450:	9a07      	ldr	r2, [sp, #28]
 800b452:	4917      	ldr	r1, [pc, #92]	; (800b4b0 <vTaskStartScheduler+0x80>)
 800b454:	4817      	ldr	r0, [pc, #92]	; (800b4b4 <vTaskStartScheduler+0x84>)
 800b456:	f7ff ff7f 	bl	800b358 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800b45a:	b140      	cbz	r0, 800b46e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 800b45c:	f000 fdb8 	bl	800bfd0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800b460:	2801      	cmp	r0, #1
 800b462:	d006      	beq.n	800b472 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b464:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b468:	d018      	beq.n	800b49c <vTaskStartScheduler+0x6c>
}
 800b46a:	b008      	add	sp, #32
 800b46c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800b46e:	2000      	movs	r0, #0
 800b470:	e7f6      	b.n	800b460 <vTaskStartScheduler+0x30>
 800b472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800b482:	4b0d      	ldr	r3, [pc, #52]	; (800b4b8 <vTaskStartScheduler+0x88>)
 800b484:	f04f 32ff 	mov.w	r2, #4294967295
 800b488:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b48a:	4b0c      	ldr	r3, [pc, #48]	; (800b4bc <vTaskStartScheduler+0x8c>)
 800b48c:	2201      	movs	r2, #1
 800b48e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b490:	4b0b      	ldr	r3, [pc, #44]	; (800b4c0 <vTaskStartScheduler+0x90>)
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800b496:	f7fe ff2b 	bl	800a2f0 <xPortStartScheduler>
 800b49a:	e7e6      	b.n	800b46a <vTaskStartScheduler+0x3a>
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	e7fe      	b.n	800b4ac <vTaskStartScheduler+0x7c>
 800b4ae:	bf00      	nop
 800b4b0:	0800f7b8 	.word	0x0800f7b8
 800b4b4:	0800b76d 	.word	0x0800b76d
 800b4b8:	200044b0 	.word	0x200044b0
 800b4bc:	200044cc 	.word	0x200044cc
 800b4c0:	200044f8 	.word	0x200044f8

0800b4c4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b4c4:	4a02      	ldr	r2, [pc, #8]	; (800b4d0 <vTaskSuspendAll+0xc>)
 800b4c6:	6813      	ldr	r3, [r2, #0]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	6013      	str	r3, [r2, #0]
}
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	2000447c 	.word	0x2000447c

0800b4d4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800b4d4:	4b01      	ldr	r3, [pc, #4]	; (800b4dc <xTaskGetTickCount+0x8>)
 800b4d6:	6818      	ldr	r0, [r3, #0]
}
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	200044f8 	.word	0x200044f8

0800b4e0 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	; (800b50c <vTaskStepTick+0x2c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4403      	add	r3, r0
 800b4e6:	4a0a      	ldr	r2, [pc, #40]	; (800b510 <vTaskStepTick+0x30>)
 800b4e8:	6812      	ldr	r2, [r2, #0]
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d908      	bls.n	800b500 <vTaskStepTick+0x20>
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	e7fe      	b.n	800b4fe <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 800b500:	4a02      	ldr	r2, [pc, #8]	; (800b50c <vTaskStepTick+0x2c>)
 800b502:	6813      	ldr	r3, [r2, #0]
 800b504:	4403      	add	r3, r0
 800b506:	6013      	str	r3, [r2, #0]
	}
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	200044f8 	.word	0x200044f8
 800b510:	200044b0 	.word	0x200044b0

0800b514 <xTaskIncrementTick>:
{
 800b514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b516:	4b3a      	ldr	r3, [pc, #232]	; (800b600 <xTaskIncrementTick+0xec>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d164      	bne.n	800b5e8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b51e:	4b39      	ldr	r3, [pc, #228]	; (800b604 <xTaskIncrementTick+0xf0>)
 800b520:	681d      	ldr	r5, [r3, #0]
 800b522:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800b524:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b526:	b9c5      	cbnz	r5, 800b55a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800b528:	4b37      	ldr	r3, [pc, #220]	; (800b608 <xTaskIncrementTick+0xf4>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	b143      	cbz	r3, 800b542 <xTaskIncrementTick+0x2e>
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	e7fe      	b.n	800b540 <xTaskIncrementTick+0x2c>
 800b542:	4a31      	ldr	r2, [pc, #196]	; (800b608 <xTaskIncrementTick+0xf4>)
 800b544:	6811      	ldr	r1, [r2, #0]
 800b546:	4b31      	ldr	r3, [pc, #196]	; (800b60c <xTaskIncrementTick+0xf8>)
 800b548:	6818      	ldr	r0, [r3, #0]
 800b54a:	6010      	str	r0, [r2, #0]
 800b54c:	6019      	str	r1, [r3, #0]
 800b54e:	4a30      	ldr	r2, [pc, #192]	; (800b610 <xTaskIncrementTick+0xfc>)
 800b550:	6813      	ldr	r3, [r2, #0]
 800b552:	3301      	adds	r3, #1
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	f7ff fd97 	bl	800b088 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b55a:	4b2e      	ldr	r3, [pc, #184]	; (800b614 <xTaskIncrementTick+0x100>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	42ab      	cmp	r3, r5
 800b560:	d938      	bls.n	800b5d4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800b562:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b564:	4b2c      	ldr	r3, [pc, #176]	; (800b618 <xTaskIncrementTick+0x104>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b56e:	009a      	lsls	r2, r3, #2
 800b570:	4b2a      	ldr	r3, [pc, #168]	; (800b61c <xTaskIncrementTick+0x108>)
 800b572:	589b      	ldr	r3, [r3, r2]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d93c      	bls.n	800b5f2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800b578:	2401      	movs	r4, #1
 800b57a:	e03a      	b.n	800b5f2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 800b57c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b57e:	4b22      	ldr	r3, [pc, #136]	; (800b608 <xTaskIncrementTick+0xf4>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	b343      	cbz	r3, 800b5d8 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b586:	4b20      	ldr	r3, [pc, #128]	; (800b608 <xTaskIncrementTick+0xf4>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b58e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800b590:	429d      	cmp	r5, r3
 800b592:	d326      	bcc.n	800b5e2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b594:	1d37      	adds	r7, r6, #4
 800b596:	4638      	mov	r0, r7
 800b598:	f7fe fda6 	bl	800a0e8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b59c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800b59e:	b11b      	cbz	r3, 800b5a8 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5a0:	f106 0018 	add.w	r0, r6, #24
 800b5a4:	f7fe fda0 	bl	800a0e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5a8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b5aa:	4a1d      	ldr	r2, [pc, #116]	; (800b620 <xTaskIncrementTick+0x10c>)
 800b5ac:	6812      	ldr	r2, [r2, #0]
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d901      	bls.n	800b5b6 <xTaskIncrementTick+0xa2>
 800b5b2:	4a1b      	ldr	r2, [pc, #108]	; (800b620 <xTaskIncrementTick+0x10c>)
 800b5b4:	6013      	str	r3, [r2, #0]
 800b5b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b5ba:	009a      	lsls	r2, r3, #2
 800b5bc:	4639      	mov	r1, r7
 800b5be:	4817      	ldr	r0, [pc, #92]	; (800b61c <xTaskIncrementTick+0x108>)
 800b5c0:	4410      	add	r0, r2
 800b5c2:	f7fe fd6b 	bl	800a09c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5c6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800b5c8:	4b13      	ldr	r3, [pc, #76]	; (800b618 <xTaskIncrementTick+0x104>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d2d4      	bcs.n	800b57c <xTaskIncrementTick+0x68>
 800b5d2:	e7d4      	b.n	800b57e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 800b5d4:	2400      	movs	r4, #0
 800b5d6:	e7d2      	b.n	800b57e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5d8:	4b0e      	ldr	r3, [pc, #56]	; (800b614 <xTaskIncrementTick+0x100>)
 800b5da:	f04f 32ff 	mov.w	r2, #4294967295
 800b5de:	601a      	str	r2, [r3, #0]
					break;
 800b5e0:	e7c0      	b.n	800b564 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800b5e2:	4a0c      	ldr	r2, [pc, #48]	; (800b614 <xTaskIncrementTick+0x100>)
 800b5e4:	6013      	str	r3, [r2, #0]
						break;
 800b5e6:	e7bd      	b.n	800b564 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800b5e8:	4a0e      	ldr	r2, [pc, #56]	; (800b624 <xTaskIncrementTick+0x110>)
 800b5ea:	6813      	ldr	r3, [r2, #0]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800b5f0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800b5f2:	4b0d      	ldr	r3, [pc, #52]	; (800b628 <xTaskIncrementTick+0x114>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800b5f8:	2401      	movs	r4, #1
}
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5fe:	bf00      	nop
 800b600:	2000447c 	.word	0x2000447c
 800b604:	200044f8 	.word	0x200044f8
 800b608:	20004008 	.word	0x20004008
 800b60c:	2000400c 	.word	0x2000400c
 800b610:	200044b4 	.word	0x200044b4
 800b614:	200044b0 	.word	0x200044b0
 800b618:	20004004 	.word	0x20004004
 800b61c:	20004010 	.word	0x20004010
 800b620:	20004484 	.word	0x20004484
 800b624:	20004478 	.word	0x20004478
 800b628:	200044fc 	.word	0x200044fc

0800b62c <xTaskResumeAll>:
{
 800b62c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800b62e:	4b33      	ldr	r3, [pc, #204]	; (800b6fc <xTaskResumeAll+0xd0>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	b943      	cbnz	r3, 800b646 <xTaskResumeAll+0x1a>
 800b634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	e7fe      	b.n	800b644 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800b646:	f7fe fdcd 	bl	800a1e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800b64a:	4b2c      	ldr	r3, [pc, #176]	; (800b6fc <xTaskResumeAll+0xd0>)
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	3a01      	subs	r2, #1
 800b650:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d14d      	bne.n	800b6f4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b658:	4b29      	ldr	r3, [pc, #164]	; (800b700 <xTaskResumeAll+0xd4>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	b923      	cbnz	r3, 800b668 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800b65e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b660:	f7fe fde2 	bl	800a228 <vPortExitCritical>
}
 800b664:	4620      	mov	r0, r4
 800b666:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 800b668:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b66a:	4b26      	ldr	r3, [pc, #152]	; (800b704 <xTaskResumeAll+0xd8>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	b31b      	cbz	r3, 800b6b8 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b670:	4b24      	ldr	r3, [pc, #144]	; (800b704 <xTaskResumeAll+0xd8>)
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b676:	f104 0018 	add.w	r0, r4, #24
 800b67a:	f7fe fd35 	bl	800a0e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b67e:	1d25      	adds	r5, r4, #4
 800b680:	4628      	mov	r0, r5
 800b682:	f7fe fd31 	bl	800a0e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b686:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b688:	4a1f      	ldr	r2, [pc, #124]	; (800b708 <xTaskResumeAll+0xdc>)
 800b68a:	6812      	ldr	r2, [r2, #0]
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d901      	bls.n	800b694 <xTaskResumeAll+0x68>
 800b690:	4a1d      	ldr	r2, [pc, #116]	; (800b708 <xTaskResumeAll+0xdc>)
 800b692:	6013      	str	r3, [r2, #0]
 800b694:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b698:	009a      	lsls	r2, r3, #2
 800b69a:	4629      	mov	r1, r5
 800b69c:	481b      	ldr	r0, [pc, #108]	; (800b70c <xTaskResumeAll+0xe0>)
 800b69e:	4410      	add	r0, r2
 800b6a0:	f7fe fcfc 	bl	800a09c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b6a6:	4b1a      	ldr	r3, [pc, #104]	; (800b710 <xTaskResumeAll+0xe4>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d3dc      	bcc.n	800b66a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800b6b0:	4b18      	ldr	r3, [pc, #96]	; (800b714 <xTaskResumeAll+0xe8>)
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	e7d8      	b.n	800b66a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 800b6b8:	b10c      	cbz	r4, 800b6be <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800b6ba:	f7ff fce5 	bl	800b088 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b6be:	4b16      	ldr	r3, [pc, #88]	; (800b718 <xTaskResumeAll+0xec>)
 800b6c0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b6c2:	b154      	cbz	r4, 800b6da <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 800b6c4:	f7ff ff26 	bl	800b514 <xTaskIncrementTick>
 800b6c8:	b110      	cbz	r0, 800b6d0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800b6ca:	4b12      	ldr	r3, [pc, #72]	; (800b714 <xTaskResumeAll+0xe8>)
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b6d0:	3c01      	subs	r4, #1
 800b6d2:	d1f7      	bne.n	800b6c4 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 800b6d4:	4b10      	ldr	r3, [pc, #64]	; (800b718 <xTaskResumeAll+0xec>)
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800b6da:	4b0e      	ldr	r3, [pc, #56]	; (800b714 <xTaskResumeAll+0xe8>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	b15b      	cbz	r3, 800b6f8 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 800b6e0:	4b0e      	ldr	r3, [pc, #56]	; (800b71c <xTaskResumeAll+0xf0>)
 800b6e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800b6f0:	2401      	movs	r4, #1
 800b6f2:	e7b5      	b.n	800b660 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800b6f4:	2400      	movs	r4, #0
 800b6f6:	e7b3      	b.n	800b660 <xTaskResumeAll+0x34>
 800b6f8:	2400      	movs	r4, #0
 800b6fa:	e7b1      	b.n	800b660 <xTaskResumeAll+0x34>
 800b6fc:	2000447c 	.word	0x2000447c
 800b700:	20004470 	.word	0x20004470
 800b704:	200044b8 	.word	0x200044b8
 800b708:	20004484 	.word	0x20004484
 800b70c:	20004010 	.word	0x20004010
 800b710:	20004004 	.word	0x20004004
 800b714:	200044fc 	.word	0x200044fc
 800b718:	20004478 	.word	0x20004478
 800b71c:	e000ed04 	.word	0xe000ed04

0800b720 <vTaskDelay>:
	{
 800b720:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b722:	b1a8      	cbz	r0, 800b750 <vTaskDelay+0x30>
 800b724:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800b726:	4b0f      	ldr	r3, [pc, #60]	; (800b764 <vTaskDelay+0x44>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	b143      	cbz	r3, 800b73e <vTaskDelay+0x1e>
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	e7fe      	b.n	800b73c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800b73e:	f7ff fec1 	bl	800b4c4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b742:	2100      	movs	r1, #0
 800b744:	4620      	mov	r0, r4
 800b746:	f7ff fdc9 	bl	800b2dc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800b74a:	f7ff ff6f 	bl	800b62c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800b74e:	b938      	cbnz	r0, 800b760 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 800b750:	4b05      	ldr	r3, [pc, #20]	; (800b768 <vTaskDelay+0x48>)
 800b752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	f3bf 8f6f 	isb	sy
	}
 800b760:	bd10      	pop	{r4, pc}
 800b762:	bf00      	nop
 800b764:	2000447c 	.word	0x2000447c
 800b768:	e000ed04 	.word	0xe000ed04

0800b76c <prvIdleTask>:
{
 800b76c:	b508      	push	{r3, lr}
 800b76e:	e003      	b.n	800b778 <prvIdleTask+0xc>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800b770:	f7ff fc64 	bl	800b03c <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b774:	2801      	cmp	r0, #1
 800b776:	d80e      	bhi.n	800b796 <prvIdleTask+0x2a>
		prvCheckTasksWaitingTermination();
 800b778:	f7ff fd8a 	bl	800b290 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b77c:	4b13      	ldr	r3, [pc, #76]	; (800b7cc <prvIdleTask+0x60>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d9f5      	bls.n	800b770 <prvIdleTask+0x4>
				taskYIELD();
 800b784:	4b12      	ldr	r3, [pc, #72]	; (800b7d0 <prvIdleTask+0x64>)
 800b786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b78a:	601a      	str	r2, [r3, #0]
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	e7ec      	b.n	800b770 <prvIdleTask+0x4>
				vTaskSuspendAll();
 800b796:	f7ff fe95 	bl	800b4c4 <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800b79a:	4b0e      	ldr	r3, [pc, #56]	; (800b7d4 <prvIdleTask+0x68>)
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	4b0e      	ldr	r3, [pc, #56]	; (800b7d8 <prvIdleTask+0x6c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d308      	bcc.n	800b7b8 <prvIdleTask+0x4c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800b7a6:	f7ff fc49 	bl	800b03c <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b7aa:	2801      	cmp	r0, #1
 800b7ac:	d901      	bls.n	800b7b2 <prvIdleTask+0x46>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800b7ae:	f7f6 fa75 	bl	8001c9c <vPortSuppressTicksAndSleep>
				( void ) xTaskResumeAll();
 800b7b2:	f7ff ff3b 	bl	800b62c <xTaskResumeAll>
 800b7b6:	e7df      	b.n	800b778 <prvIdleTask+0xc>
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	e7fe      	b.n	800b7c8 <prvIdleTask+0x5c>
 800b7ca:	bf00      	nop
 800b7cc:	20004010 	.word	0x20004010
 800b7d0:	e000ed04 	.word	0xe000ed04
 800b7d4:	200044b0 	.word	0x200044b0
 800b7d8:	200044f8 	.word	0x200044f8

0800b7dc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7dc:	4b20      	ldr	r3, [pc, #128]	; (800b860 <vTaskSwitchContext+0x84>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	b11b      	cbz	r3, 800b7ea <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800b7e2:	4b20      	ldr	r3, [pc, #128]	; (800b864 <vTaskSwitchContext+0x88>)
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	601a      	str	r2, [r3, #0]
 800b7e8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800b7ea:	4b1e      	ldr	r3, [pc, #120]	; (800b864 <vTaskSwitchContext+0x88>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b7f0:	4b1d      	ldr	r3, [pc, #116]	; (800b868 <vTaskSwitchContext+0x8c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b7f8:	008a      	lsls	r2, r1, #2
 800b7fa:	491c      	ldr	r1, [pc, #112]	; (800b86c <vTaskSwitchContext+0x90>)
 800b7fc:	588a      	ldr	r2, [r1, r2]
 800b7fe:	b95a      	cbnz	r2, 800b818 <vTaskSwitchContext+0x3c>
 800b800:	b10b      	cbz	r3, 800b806 <vTaskSwitchContext+0x2a>
 800b802:	3b01      	subs	r3, #1
 800b804:	e7f6      	b.n	800b7f4 <vTaskSwitchContext+0x18>
 800b806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	e7fe      	b.n	800b816 <vTaskSwitchContext+0x3a>
{
 800b818:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b81a:	4608      	mov	r0, r1
 800b81c:	009a      	lsls	r2, r3, #2
 800b81e:	18d4      	adds	r4, r2, r3
 800b820:	00a1      	lsls	r1, r4, #2
 800b822:	4401      	add	r1, r0
 800b824:	684c      	ldr	r4, [r1, #4]
 800b826:	6864      	ldr	r4, [r4, #4]
 800b828:	604c      	str	r4, [r1, #4]
 800b82a:	441a      	add	r2, r3
 800b82c:	0091      	lsls	r1, r2, #2
 800b82e:	3108      	adds	r1, #8
 800b830:	4408      	add	r0, r1
 800b832:	4284      	cmp	r4, r0
 800b834:	d00d      	beq.n	800b852 <vTaskSwitchContext+0x76>
 800b836:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800b83a:	0091      	lsls	r1, r2, #2
 800b83c:	4a0b      	ldr	r2, [pc, #44]	; (800b86c <vTaskSwitchContext+0x90>)
 800b83e:	440a      	add	r2, r1
 800b840:	6852      	ldr	r2, [r2, #4]
 800b842:	68d1      	ldr	r1, [r2, #12]
 800b844:	4a0a      	ldr	r2, [pc, #40]	; (800b870 <vTaskSwitchContext+0x94>)
 800b846:	6011      	str	r1, [r2, #0]
 800b848:	4a07      	ldr	r2, [pc, #28]	; (800b868 <vTaskSwitchContext+0x8c>)
 800b84a:	6013      	str	r3, [r2, #0]
}
 800b84c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b850:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b852:	6861      	ldr	r1, [r4, #4]
 800b854:	4805      	ldr	r0, [pc, #20]	; (800b86c <vTaskSwitchContext+0x90>)
 800b856:	2214      	movs	r2, #20
 800b858:	fb02 0203 	mla	r2, r2, r3, r0
 800b85c:	6051      	str	r1, [r2, #4]
 800b85e:	e7ea      	b.n	800b836 <vTaskSwitchContext+0x5a>
 800b860:	2000447c 	.word	0x2000447c
 800b864:	200044fc 	.word	0x200044fc
 800b868:	20004484 	.word	0x20004484
 800b86c:	20004010 	.word	0x20004010
 800b870:	20004004 	.word	0x20004004

0800b874 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800b874:	b940      	cbnz	r0, 800b888 <vTaskPlaceOnEventList+0x14>
 800b876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87a:	f383 8811 	msr	BASEPRI, r3
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f3bf 8f4f 	dsb	sy
 800b886:	e7fe      	b.n	800b886 <vTaskPlaceOnEventList+0x12>
{
 800b888:	b510      	push	{r4, lr}
 800b88a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b88c:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <vTaskPlaceOnEventList+0x2c>)
 800b88e:	6819      	ldr	r1, [r3, #0]
 800b890:	3118      	adds	r1, #24
 800b892:	f7fe fc0f 	bl	800a0b4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b896:	2101      	movs	r1, #1
 800b898:	4620      	mov	r0, r4
 800b89a:	f7ff fd1f 	bl	800b2dc <prvAddCurrentTaskToDelayedList>
}
 800b89e:	bd10      	pop	{r4, pc}
 800b8a0:	20004004 	.word	0x20004004

0800b8a4 <vTaskPlaceOnEventListRestricted>:
	{
 800b8a4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800b8a6:	b940      	cbnz	r0, 800b8ba <vTaskPlaceOnEventListRestricted+0x16>
 800b8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	e7fe      	b.n	800b8b8 <vTaskPlaceOnEventListRestricted+0x14>
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8be:	4a06      	ldr	r2, [pc, #24]	; (800b8d8 <vTaskPlaceOnEventListRestricted+0x34>)
 800b8c0:	6811      	ldr	r1, [r2, #0]
 800b8c2:	3118      	adds	r1, #24
 800b8c4:	f7fe fbea 	bl	800a09c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800b8c8:	b10d      	cbz	r5, 800b8ce <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 800b8ca:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f7ff fd03 	bl	800b2dc <prvAddCurrentTaskToDelayedList>
	}
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	20004004 	.word	0x20004004

0800b8dc <xTaskRemoveFromEventList>:
{
 800b8dc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b8de:	68c3      	ldr	r3, [r0, #12]
 800b8e0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800b8e2:	b944      	cbnz	r4, 800b8f6 <xTaskRemoveFromEventList+0x1a>
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	e7fe      	b.n	800b8f4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b8f6:	f104 0518 	add.w	r5, r4, #24
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	f7fe fbf4 	bl	800a0e8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b900:	4b14      	ldr	r3, [pc, #80]	; (800b954 <xTaskRemoveFromEventList+0x78>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	b9fb      	cbnz	r3, 800b946 <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b906:	1d25      	adds	r5, r4, #4
 800b908:	4628      	mov	r0, r5
 800b90a:	f7fe fbed 	bl	800a0e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b90e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b910:	4a11      	ldr	r2, [pc, #68]	; (800b958 <xTaskRemoveFromEventList+0x7c>)
 800b912:	6812      	ldr	r2, [r2, #0]
 800b914:	4293      	cmp	r3, r2
 800b916:	d901      	bls.n	800b91c <xTaskRemoveFromEventList+0x40>
 800b918:	4a0f      	ldr	r2, [pc, #60]	; (800b958 <xTaskRemoveFromEventList+0x7c>)
 800b91a:	6013      	str	r3, [r2, #0]
 800b91c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b920:	009a      	lsls	r2, r3, #2
 800b922:	4629      	mov	r1, r5
 800b924:	480d      	ldr	r0, [pc, #52]	; (800b95c <xTaskRemoveFromEventList+0x80>)
 800b926:	4410      	add	r0, r2
 800b928:	f7fe fbb8 	bl	800a09c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b92c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b92e:	4b0c      	ldr	r3, [pc, #48]	; (800b960 <xTaskRemoveFromEventList+0x84>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b934:	429a      	cmp	r2, r3
 800b936:	d90b      	bls.n	800b950 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 800b938:	2401      	movs	r4, #1
 800b93a:	4b0a      	ldr	r3, [pc, #40]	; (800b964 <xTaskRemoveFromEventList+0x88>)
 800b93c:	601c      	str	r4, [r3, #0]
		prvResetNextTaskUnblockTime();
 800b93e:	f7ff fba3 	bl	800b088 <prvResetNextTaskUnblockTime>
}
 800b942:	4620      	mov	r0, r4
 800b944:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b946:	4629      	mov	r1, r5
 800b948:	4807      	ldr	r0, [pc, #28]	; (800b968 <xTaskRemoveFromEventList+0x8c>)
 800b94a:	f7fe fba7 	bl	800a09c <vListInsertEnd>
 800b94e:	e7ed      	b.n	800b92c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 800b950:	2400      	movs	r4, #0
 800b952:	e7f4      	b.n	800b93e <xTaskRemoveFromEventList+0x62>
 800b954:	2000447c 	.word	0x2000447c
 800b958:	20004484 	.word	0x20004484
 800b95c:	20004010 	.word	0x20004010
 800b960:	20004004 	.word	0x20004004
 800b964:	200044fc 	.word	0x200044fc
 800b968:	200044b8 	.word	0x200044b8

0800b96c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b96c:	4b03      	ldr	r3, [pc, #12]	; (800b97c <vTaskInternalSetTimeOutState+0x10>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b972:	4b03      	ldr	r3, [pc, #12]	; (800b980 <vTaskInternalSetTimeOutState+0x14>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6043      	str	r3, [r0, #4]
}
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	200044b4 	.word	0x200044b4
 800b980:	200044f8 	.word	0x200044f8

0800b984 <xTaskCheckForTimeOut>:
{
 800b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800b986:	b150      	cbz	r0, 800b99e <xTaskCheckForTimeOut+0x1a>
 800b988:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800b98a:	b989      	cbnz	r1, 800b9b0 <xTaskCheckForTimeOut+0x2c>
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	e7fe      	b.n	800b99c <xTaskCheckForTimeOut+0x18>
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	e7fe      	b.n	800b9ae <xTaskCheckForTimeOut+0x2a>
 800b9b0:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 800b9b2:	f7fe fc17 	bl	800a1e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800b9b6:	4b11      	ldr	r3, [pc, #68]	; (800b9fc <xTaskCheckForTimeOut+0x78>)
 800b9b8:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b9ba:	6868      	ldr	r0, [r5, #4]
 800b9bc:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c4:	d016      	beq.n	800b9f4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b9c6:	682f      	ldr	r7, [r5, #0]
 800b9c8:	4e0d      	ldr	r6, [pc, #52]	; (800ba00 <xTaskCheckForTimeOut+0x7c>)
 800b9ca:	6836      	ldr	r6, [r6, #0]
 800b9cc:	42b7      	cmp	r7, r6
 800b9ce:	d001      	beq.n	800b9d4 <xTaskCheckForTimeOut+0x50>
 800b9d0:	4288      	cmp	r0, r1
 800b9d2:	d911      	bls.n	800b9f8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d803      	bhi.n	800b9e0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800b9dc:	2401      	movs	r4, #1
 800b9de:	e005      	b.n	800b9ec <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800b9e0:	1a9b      	subs	r3, r3, r2
 800b9e2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	f7ff ffc1 	bl	800b96c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9ea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b9ec:	f7fe fc1c 	bl	800a228 <vPortExitCritical>
}
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800b9f4:	2400      	movs	r4, #0
 800b9f6:	e7f9      	b.n	800b9ec <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 800b9f8:	2401      	movs	r4, #1
 800b9fa:	e7f7      	b.n	800b9ec <xTaskCheckForTimeOut+0x68>
 800b9fc:	200044f8 	.word	0x200044f8
 800ba00:	200044b4 	.word	0x200044b4

0800ba04 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ba04:	4b01      	ldr	r3, [pc, #4]	; (800ba0c <vTaskMissedYield+0x8>)
 800ba06:	2201      	movs	r2, #1
 800ba08:	601a      	str	r2, [r3, #0]
}
 800ba0a:	4770      	bx	lr
 800ba0c:	200044fc 	.word	0x200044fc

0800ba10 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <eTaskConfirmSleepModeStatus+0x2c>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	b95b      	cbnz	r3, 800ba2e <eTaskConfirmSleepModeStatus+0x1e>
		else if( xYieldPending != pdFALSE )
 800ba16:	4b0a      	ldr	r3, [pc, #40]	; (800ba40 <eTaskConfirmSleepModeStatus+0x30>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	b953      	cbnz	r3, 800ba32 <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800ba1c:	4b09      	ldr	r3, [pc, #36]	; (800ba44 <eTaskConfirmSleepModeStatus+0x34>)
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	4b09      	ldr	r3, [pc, #36]	; (800ba48 <eTaskConfirmSleepModeStatus+0x38>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d005      	beq.n	800ba36 <eTaskConfirmSleepModeStatus+0x26>
	eSleepModeStatus eReturn = eStandardSleep;
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	4770      	bx	lr
			eReturn = eAbortSleep;
 800ba2e:	2000      	movs	r0, #0
 800ba30:	4770      	bx	lr
			eReturn = eAbortSleep;
 800ba32:	2000      	movs	r0, #0
 800ba34:	4770      	bx	lr
				eReturn = eNoTasksWaitingTimeout;
 800ba36:	2002      	movs	r0, #2
	}
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	200044b8 	.word	0x200044b8
 800ba40:	200044fc 	.word	0x200044fc
 800ba44:	200044d0 	.word	0x200044d0
 800ba48:	20004470 	.word	0x20004470

0800ba4c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ba4c:	4b01      	ldr	r3, [pc, #4]	; (800ba54 <xTaskGetCurrentTaskHandle+0x8>)
 800ba4e:	6818      	ldr	r0, [r3, #0]
	}
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	20004004 	.word	0x20004004

0800ba58 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ba58:	4b05      	ldr	r3, [pc, #20]	; (800ba70 <xTaskGetSchedulerState+0x18>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	b133      	cbz	r3, 800ba6c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba5e:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <xTaskGetSchedulerState+0x1c>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	b10b      	cbz	r3, 800ba68 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba64:	2000      	movs	r0, #0
	}
 800ba66:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800ba68:	2002      	movs	r0, #2
 800ba6a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba6c:	2001      	movs	r0, #1
 800ba6e:	4770      	bx	lr
 800ba70:	200044cc 	.word	0x200044cc
 800ba74:	2000447c 	.word	0x2000447c

0800ba78 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d040      	beq.n	800bafe <xTaskPriorityInherit+0x86>
	{
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4605      	mov	r5, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ba80:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ba82:	4920      	ldr	r1, [pc, #128]	; (800bb04 <xTaskPriorityInherit+0x8c>)
 800ba84:	6809      	ldr	r1, [r1, #0]
 800ba86:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800ba88:	428a      	cmp	r2, r1
 800ba8a:	d22e      	bcs.n	800baea <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba8c:	6981      	ldr	r1, [r0, #24]
 800ba8e:	2900      	cmp	r1, #0
 800ba90:	db05      	blt.n	800ba9e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba92:	491c      	ldr	r1, [pc, #112]	; (800bb04 <xTaskPriorityInherit+0x8c>)
 800ba94:	6809      	ldr	r1, [r1, #0]
 800ba96:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800ba98:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 800ba9c:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ba9e:	6968      	ldr	r0, [r5, #20]
 800baa0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800baa4:	0091      	lsls	r1, r2, #2
 800baa6:	4a18      	ldr	r2, [pc, #96]	; (800bb08 <xTaskPriorityInherit+0x90>)
 800baa8:	440a      	add	r2, r1
 800baaa:	4290      	cmp	r0, r2
 800baac:	d005      	beq.n	800baba <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800baae:	4a15      	ldr	r2, [pc, #84]	; (800bb04 <xTaskPriorityInherit+0x8c>)
 800bab0:	6812      	ldr	r2, [r2, #0]
 800bab2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bab4:	62ea      	str	r2, [r5, #44]	; 0x2c
				xReturn = pdTRUE;
 800bab6:	2001      	movs	r0, #1
	}
 800bab8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baba:	1d2c      	adds	r4, r5, #4
 800babc:	4620      	mov	r0, r4
 800babe:	f7fe fb13 	bl	800a0e8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bac2:	4b10      	ldr	r3, [pc, #64]	; (800bb04 <xTaskPriorityInherit+0x8c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac8:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800baca:	4a10      	ldr	r2, [pc, #64]	; (800bb0c <xTaskPriorityInherit+0x94>)
 800bacc:	6812      	ldr	r2, [r2, #0]
 800bace:	4293      	cmp	r3, r2
 800bad0:	d901      	bls.n	800bad6 <xTaskPriorityInherit+0x5e>
 800bad2:	4a0e      	ldr	r2, [pc, #56]	; (800bb0c <xTaskPriorityInherit+0x94>)
 800bad4:	6013      	str	r3, [r2, #0]
 800bad6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bada:	009a      	lsls	r2, r3, #2
 800badc:	4621      	mov	r1, r4
 800bade:	480a      	ldr	r0, [pc, #40]	; (800bb08 <xTaskPriorityInherit+0x90>)
 800bae0:	4410      	add	r0, r2
 800bae2:	f7fe fadb 	bl	800a09c <vListInsertEnd>
				xReturn = pdTRUE;
 800bae6:	2001      	movs	r0, #1
 800bae8:	e7e6      	b.n	800bab8 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800baea:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800baec:	4b05      	ldr	r3, [pc, #20]	; (800bb04 <xTaskPriorityInherit+0x8c>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d201      	bcs.n	800bafa <xTaskPriorityInherit+0x82>
					xReturn = pdTRUE;
 800baf6:	2001      	movs	r0, #1
		return xReturn;
 800baf8:	e7de      	b.n	800bab8 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 800bafa:	2000      	movs	r0, #0
 800bafc:	e7dc      	b.n	800bab8 <xTaskPriorityInherit+0x40>
 800bafe:	2000      	movs	r0, #0
	}
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	20004004 	.word	0x20004004
 800bb08:	20004010 	.word	0x20004010
 800bb0c:	20004484 	.word	0x20004484

0800bb10 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d038      	beq.n	800bb86 <xTaskPriorityDisinherit+0x76>
	{
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800bb18:	4a1e      	ldr	r2, [pc, #120]	; (800bb94 <xTaskPriorityDisinherit+0x84>)
 800bb1a:	6812      	ldr	r2, [r2, #0]
 800bb1c:	4282      	cmp	r2, r0
 800bb1e:	d008      	beq.n	800bb32 <xTaskPriorityDisinherit+0x22>
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	e7fe      	b.n	800bb30 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb32:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800bb34:	b942      	cbnz	r2, 800bb48 <xTaskPriorityDisinherit+0x38>
 800bb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	e7fe      	b.n	800bb46 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800bb48:	3a01      	subs	r2, #1
 800bb4a:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb4c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bb4e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bb50:	4288      	cmp	r0, r1
 800bb52:	d01a      	beq.n	800bb8a <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb54:	b9da      	cbnz	r2, 800bb8e <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb56:	1d25      	adds	r5, r4, #4
 800bb58:	4628      	mov	r0, r5
 800bb5a:	f7fe fac5 	bl	800a0e8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bb60:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb66:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb68:	4a0b      	ldr	r2, [pc, #44]	; (800bb98 <xTaskPriorityDisinherit+0x88>)
 800bb6a:	6812      	ldr	r2, [r2, #0]
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d901      	bls.n	800bb74 <xTaskPriorityDisinherit+0x64>
 800bb70:	4a09      	ldr	r2, [pc, #36]	; (800bb98 <xTaskPriorityDisinherit+0x88>)
 800bb72:	6013      	str	r3, [r2, #0]
 800bb74:	4629      	mov	r1, r5
 800bb76:	4a09      	ldr	r2, [pc, #36]	; (800bb9c <xTaskPriorityDisinherit+0x8c>)
 800bb78:	2014      	movs	r0, #20
 800bb7a:	fb00 2003 	mla	r0, r0, r3, r2
 800bb7e:	f7fe fa8d 	bl	800a09c <vListInsertEnd>
					xReturn = pdTRUE;
 800bb82:	2001      	movs	r0, #1
	}
 800bb84:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800bb86:	2000      	movs	r0, #0
	}
 800bb88:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	e7fa      	b.n	800bb84 <xTaskPriorityDisinherit+0x74>
 800bb8e:	2000      	movs	r0, #0
		return xReturn;
 800bb90:	e7f8      	b.n	800bb84 <xTaskPriorityDisinherit+0x74>
 800bb92:	bf00      	nop
 800bb94:	20004004 	.word	0x20004004
 800bb98:	20004484 	.word	0x20004484
 800bb9c:	20004010 	.word	0x20004010

0800bba0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d045      	beq.n	800bc30 <vTaskPriorityDisinheritAfterTimeout+0x90>
	{
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800bba8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800bbaa:	b940      	cbnz	r0, 800bbbe <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800bbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	e7fe      	b.n	800bbbc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bbbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbc0:	428a      	cmp	r2, r1
 800bbc2:	d200      	bcs.n	800bbc6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bbc4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bbc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bbc8:	4291      	cmp	r1, r2
 800bbca:	d001      	beq.n	800bbd0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bbcc:	2801      	cmp	r0, #1
 800bbce:	d000      	beq.n	800bbd2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800bbd0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800bbd2:	4818      	ldr	r0, [pc, #96]	; (800bc34 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800bbd4:	6800      	ldr	r0, [r0, #0]
 800bbd6:	4298      	cmp	r0, r3
 800bbd8:	d108      	bne.n	800bbec <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800bbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	e7fe      	b.n	800bbea <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 800bbec:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bbee:	6998      	ldr	r0, [r3, #24]
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	db02      	blt.n	800bbfa <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bbf8:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bbfa:	695a      	ldr	r2, [r3, #20]
 800bbfc:	480e      	ldr	r0, [pc, #56]	; (800bc38 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800bbfe:	2414      	movs	r4, #20
 800bc00:	fb04 0101 	mla	r1, r4, r1, r0
 800bc04:	428a      	cmp	r2, r1
 800bc06:	d1e3      	bne.n	800bbd0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800bc08:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc0a:	1d1d      	adds	r5, r3, #4
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	f7fe fa6b 	bl	800a0e8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800bc12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bc14:	4a09      	ldr	r2, [pc, #36]	; (800bc3c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800bc16:	6812      	ldr	r2, [r2, #0]
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d901      	bls.n	800bc20 <vTaskPriorityDisinheritAfterTimeout+0x80>
 800bc1c:	4a07      	ldr	r2, [pc, #28]	; (800bc3c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	4629      	mov	r1, r5
 800bc22:	4a05      	ldr	r2, [pc, #20]	; (800bc38 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800bc24:	2014      	movs	r0, #20
 800bc26:	fb00 2003 	mla	r0, r0, r3, r2
 800bc2a:	f7fe fa37 	bl	800a09c <vListInsertEnd>
	}
 800bc2e:	e7cf      	b.n	800bbd0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	20004004 	.word	0x20004004
 800bc38:	20004010 	.word	0x20004010
 800bc3c:	20004484 	.word	0x20004484

0800bc40 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800bc40:	4b05      	ldr	r3, [pc, #20]	; (800bc58 <pvTaskIncrementMutexHeldCount+0x18>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	b123      	cbz	r3, 800bc50 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800bc46:	4b04      	ldr	r3, [pc, #16]	; (800bc58 <pvTaskIncrementMutexHeldCount+0x18>)
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800bc50:	4b01      	ldr	r3, [pc, #4]	; (800bc58 <pvTaskIncrementMutexHeldCount+0x18>)
 800bc52:	6818      	ldr	r0, [r3, #0]
	}
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20004004 	.word	0x20004004

0800bc5c <xTaskNotifyWait>:
	{
 800bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5e:	4607      	mov	r7, r0
 800bc60:	460d      	mov	r5, r1
 800bc62:	4614      	mov	r4, r2
 800bc64:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 800bc66:	f7fe fabd 	bl	800a1e4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bc6a:	4b20      	ldr	r3, [pc, #128]	; (800bcec <xTaskNotifyWait+0x90>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d00a      	beq.n	800bc8e <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bc78:	4b1c      	ldr	r3, [pc, #112]	; (800bcec <xTaskNotifyWait+0x90>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800bc7e:	ea20 0007 	bic.w	r0, r0, r7
 800bc82:	6550      	str	r0, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 800bc8c:	b9ce      	cbnz	r6, 800bcc2 <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800bc8e:	f7fe facb 	bl	800a228 <vPortExitCritical>
		taskENTER_CRITICAL();
 800bc92:	f7fe faa7 	bl	800a1e4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800bc96:	b11c      	cbz	r4, 800bca0 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bc98:	4b14      	ldr	r3, [pc, #80]	; (800bcec <xTaskNotifyWait+0x90>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9e:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bca0:	4b12      	ldr	r3, [pc, #72]	; (800bcec <xTaskNotifyWait+0x90>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d016      	beq.n	800bcdc <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 800bcae:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bcb0:	4b0e      	ldr	r3, [pc, #56]	; (800bcec <xTaskNotifyWait+0x90>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 800bcba:	f7fe fab5 	bl	800a228 <vPortExitCritical>
	}
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f7ff fb09 	bl	800b2dc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800bcca:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <xTaskNotifyWait+0x94>)
 800bccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcd0:	601a      	str	r2, [r3, #0]
 800bcd2:	f3bf 8f4f 	dsb	sy
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	e7d8      	b.n	800bc8e <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bcdc:	4b03      	ldr	r3, [pc, #12]	; (800bcec <xTaskNotifyWait+0x90>)
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800bce2:	ea23 0505 	bic.w	r5, r3, r5
 800bce6:	6555      	str	r5, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 800bce8:	2401      	movs	r4, #1
 800bcea:	e7e1      	b.n	800bcb0 <xTaskNotifyWait+0x54>
 800bcec:	20004004 	.word	0x20004004
 800bcf0:	e000ed04 	.word	0xe000ed04

0800bcf4 <xTaskGenericNotify>:
	{
 800bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800bcf6:	b940      	cbnz	r0, 800bd0a <xTaskGenericNotify+0x16>
 800bcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfc:	f383 8811 	msr	BASEPRI, r3
 800bd00:	f3bf 8f6f 	isb	sy
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	e7fe      	b.n	800bd08 <xTaskGenericNotify+0x14>
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	461f      	mov	r7, r3
 800bd0e:	4615      	mov	r5, r2
 800bd10:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
 800bd12:	f7fe fa67 	bl	800a1e4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800bd16:	b10f      	cbz	r7, 800bd1c <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bd18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bd1a:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bd1c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800bd20:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bd22:	2202      	movs	r2, #2
 800bd24:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 800bd28:	1e6a      	subs	r2, r5, #1
 800bd2a:	2a03      	cmp	r2, #3
 800bd2c:	d81a      	bhi.n	800bd64 <xTaskGenericNotify+0x70>
 800bd2e:	e8df f002 	tbb	[pc, r2]
 800bd32:	0c02      	.short	0x0c02
 800bd34:	1411      	.short	0x1411
					pxTCB->ulNotifiedValue |= ulValue;
 800bd36:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800bd38:	4316      	orrs	r6, r2
 800bd3a:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800bd3c:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d014      	beq.n	800bd6c <xTaskGenericNotify+0x78>
		taskEXIT_CRITICAL();
 800bd42:	f7fe fa71 	bl	800a228 <vPortExitCritical>
	}
 800bd46:	4628      	mov	r0, r5
 800bd48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800bd4a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800bd4c:	3201      	adds	r2, #1
 800bd4e:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800bd50:	2501      	movs	r5, #1
					break;
 800bd52:	e7f4      	b.n	800bd3e <xTaskGenericNotify+0x4a>
					pxTCB->ulNotifiedValue = ulValue;
 800bd54:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800bd56:	2501      	movs	r5, #1
					break;
 800bd58:	e7f1      	b.n	800bd3e <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bd5a:	2b02      	cmp	r3, #2
 800bd5c:	d004      	beq.n	800bd68 <xTaskGenericNotify+0x74>
						pxTCB->ulNotifiedValue = ulValue;
 800bd5e:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800bd60:	2501      	movs	r5, #1
 800bd62:	e7ec      	b.n	800bd3e <xTaskGenericNotify+0x4a>
 800bd64:	2501      	movs	r5, #1
 800bd66:	e7ea      	b.n	800bd3e <xTaskGenericNotify+0x4a>
						xReturn = pdFAIL;
 800bd68:	2500      	movs	r5, #0
 800bd6a:	e7e8      	b.n	800bd3e <xTaskGenericNotify+0x4a>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd6c:	1d26      	adds	r6, r4, #4
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f7fe f9ba 	bl	800a0e8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bd74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bd76:	4a14      	ldr	r2, [pc, #80]	; (800bdc8 <xTaskGenericNotify+0xd4>)
 800bd78:	6812      	ldr	r2, [r2, #0]
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d901      	bls.n	800bd82 <xTaskGenericNotify+0x8e>
 800bd7e:	4a12      	ldr	r2, [pc, #72]	; (800bdc8 <xTaskGenericNotify+0xd4>)
 800bd80:	6013      	str	r3, [r2, #0]
 800bd82:	4631      	mov	r1, r6
 800bd84:	4a11      	ldr	r2, [pc, #68]	; (800bdcc <xTaskGenericNotify+0xd8>)
 800bd86:	2014      	movs	r0, #20
 800bd88:	fb00 2003 	mla	r0, r0, r3, r2
 800bd8c:	f7fe f986 	bl	800a09c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bd90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd92:	b143      	cbz	r3, 800bda6 <xTaskGenericNotify+0xb2>
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	e7fe      	b.n	800bda4 <xTaskGenericNotify+0xb0>
					prvResetNextTaskUnblockTime();
 800bda6:	f7ff f96f 	bl	800b088 <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bdac:	4b08      	ldr	r3, [pc, #32]	; (800bdd0 <xTaskGenericNotify+0xdc>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d9c5      	bls.n	800bd42 <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 800bdb6:	4b07      	ldr	r3, [pc, #28]	; (800bdd4 <xTaskGenericNotify+0xe0>)
 800bdb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdbc:	601a      	str	r2, [r3, #0]
 800bdbe:	f3bf 8f4f 	dsb	sy
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	e7bc      	b.n	800bd42 <xTaskGenericNotify+0x4e>
 800bdc8:	20004484 	.word	0x20004484
 800bdcc:	20004010 	.word	0x20004010
 800bdd0:	20004004 	.word	0x20004004
 800bdd4:	e000ed04 	.word	0xe000ed04

0800bdd8 <xTaskGenericNotifyFromISR>:
	{
 800bdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bddc:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 800bdde:	b940      	cbnz	r0, 800bdf2 <xTaskGenericNotifyFromISR+0x1a>
 800bde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde4:	f383 8811 	msr	BASEPRI, r3
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	e7fe      	b.n	800bdf0 <xTaskGenericNotifyFromISR+0x18>
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	4699      	mov	r9, r3
 800bdf6:	4615      	mov	r5, r2
 800bdf8:	4688      	mov	r8, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdfa:	f7fe fb01 	bl	800a400 <vPortValidateInterruptPriority>
	__asm volatile
 800bdfe:	f3ef 8711 	mrs	r7, BASEPRI
 800be02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800be12:	f1b9 0f00 	cmp.w	r9, #0
 800be16:	d002      	beq.n	800be1e <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800be18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800be1a:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800be1e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800be22:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800be24:	2202      	movs	r2, #2
 800be26:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 800be2a:	1e6a      	subs	r2, r5, #1
 800be2c:	2a03      	cmp	r2, #3
 800be2e:	d81e      	bhi.n	800be6e <xTaskGenericNotifyFromISR+0x96>
 800be30:	e8df f002 	tbb	[pc, r2]
 800be34:	17130e02 	.word	0x17130e02
					pxTCB->ulNotifiedValue |= ulValue;
 800be38:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800be3a:	ea42 0208 	orr.w	r2, r2, r8
 800be3e:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800be40:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800be42:	2b01      	cmp	r3, #1
 800be44:	d017      	beq.n	800be76 <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
 800be46:	f387 8811 	msr	BASEPRI, r7
	}
 800be4a:	4628      	mov	r0, r5
 800be4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 800be50:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800be52:	3201      	adds	r2, #1
 800be54:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800be56:	2501      	movs	r5, #1
					break;
 800be58:	e7f3      	b.n	800be42 <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 800be5a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800be5e:	2501      	movs	r5, #1
					break;
 800be60:	e7ef      	b.n	800be42 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800be62:	2b02      	cmp	r3, #2
 800be64:	d005      	beq.n	800be72 <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
 800be66:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800be6a:	2501      	movs	r5, #1
 800be6c:	e7e9      	b.n	800be42 <xTaskGenericNotifyFromISR+0x6a>
 800be6e:	2501      	movs	r5, #1
 800be70:	e7e7      	b.n	800be42 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 800be72:	2500      	movs	r5, #0
 800be74:	e7e5      	b.n	800be42 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800be76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be78:	b143      	cbz	r3, 800be8c <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 800be7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7e:	f383 8811 	msr	BASEPRI, r3
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	f3bf 8f4f 	dsb	sy
 800be8a:	e7fe      	b.n	800be8a <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be8c:	4b14      	ldr	r3, [pc, #80]	; (800bee0 <xTaskGenericNotifyFromISR+0x108>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	b9e3      	cbnz	r3, 800becc <xTaskGenericNotifyFromISR+0xf4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be92:	f104 0804 	add.w	r8, r4, #4
 800be96:	4640      	mov	r0, r8
 800be98:	f7fe f926 	bl	800a0e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be9e:	4a11      	ldr	r2, [pc, #68]	; (800bee4 <xTaskGenericNotifyFromISR+0x10c>)
 800bea0:	6812      	ldr	r2, [r2, #0]
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d901      	bls.n	800beaa <xTaskGenericNotifyFromISR+0xd2>
 800bea6:	4a0f      	ldr	r2, [pc, #60]	; (800bee4 <xTaskGenericNotifyFromISR+0x10c>)
 800bea8:	6013      	str	r3, [r2, #0]
 800beaa:	4641      	mov	r1, r8
 800beac:	4a0e      	ldr	r2, [pc, #56]	; (800bee8 <xTaskGenericNotifyFromISR+0x110>)
 800beae:	2014      	movs	r0, #20
 800beb0:	fb00 2003 	mla	r0, r0, r3, r2
 800beb4:	f7fe f8f2 	bl	800a09c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800beb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800beba:	4b0c      	ldr	r3, [pc, #48]	; (800beec <xTaskGenericNotifyFromISR+0x114>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d9c0      	bls.n	800be46 <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 800bec4:	b146      	cbz	r6, 800bed8 <xTaskGenericNotifyFromISR+0x100>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bec6:	2301      	movs	r3, #1
 800bec8:	6033      	str	r3, [r6, #0]
 800beca:	e7bc      	b.n	800be46 <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800becc:	f104 0118 	add.w	r1, r4, #24
 800bed0:	4807      	ldr	r0, [pc, #28]	; (800bef0 <xTaskGenericNotifyFromISR+0x118>)
 800bed2:	f7fe f8e3 	bl	800a09c <vListInsertEnd>
 800bed6:	e7ef      	b.n	800beb8 <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
 800bed8:	4b06      	ldr	r3, [pc, #24]	; (800bef4 <xTaskGenericNotifyFromISR+0x11c>)
 800beda:	2201      	movs	r2, #1
 800bedc:	601a      	str	r2, [r3, #0]
 800bede:	e7b2      	b.n	800be46 <xTaskGenericNotifyFromISR+0x6e>
 800bee0:	2000447c 	.word	0x2000447c
 800bee4:	20004484 	.word	0x20004484
 800bee8:	20004010 	.word	0x20004010
 800beec:	20004004 	.word	0x20004004
 800bef0:	200044b8 	.word	0x200044b8
 800bef4:	200044fc 	.word	0x200044fc

0800bef8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bef8:	4b06      	ldr	r3, [pc, #24]	; (800bf14 <prvGetNextExpireTime+0x1c>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	6813      	ldr	r3, [r2, #0]
 800befe:	fab3 f383 	clz	r3, r3
 800bf02:	095b      	lsrs	r3, r3, #5
 800bf04:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf06:	b913      	cbnz	r3, 800bf0e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf08:	68d3      	ldr	r3, [r2, #12]
 800bf0a:	6818      	ldr	r0, [r3, #0]
 800bf0c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf0e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	20004500 	.word	0x20004500

0800bf18 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf18:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf1a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf1c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf1e:	4291      	cmp	r1, r2
 800bf20:	d80c      	bhi.n	800bf3c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf22:	1ad2      	subs	r2, r2, r3
 800bf24:	6983      	ldr	r3, [r0, #24]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d301      	bcc.n	800bf2e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf2a:	2001      	movs	r0, #1
 800bf2c:	e010      	b.n	800bf50 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf2e:	1d01      	adds	r1, r0, #4
 800bf30:	4b09      	ldr	r3, [pc, #36]	; (800bf58 <prvInsertTimerInActiveList+0x40>)
 800bf32:	6818      	ldr	r0, [r3, #0]
 800bf34:	f7fe f8be 	bl	800a0b4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800bf38:	2000      	movs	r0, #0
 800bf3a:	e009      	b.n	800bf50 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d201      	bcs.n	800bf44 <prvInsertTimerInActiveList+0x2c>
 800bf40:	4299      	cmp	r1, r3
 800bf42:	d206      	bcs.n	800bf52 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf44:	1d01      	adds	r1, r0, #4
 800bf46:	4b05      	ldr	r3, [pc, #20]	; (800bf5c <prvInsertTimerInActiveList+0x44>)
 800bf48:	6818      	ldr	r0, [r3, #0]
 800bf4a:	f7fe f8b3 	bl	800a0b4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800bf4e:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800bf50:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 800bf52:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800bf54:	e7fc      	b.n	800bf50 <prvInsertTimerInActiveList+0x38>
 800bf56:	bf00      	nop
 800bf58:	20004504 	.word	0x20004504
 800bf5c:	20004500 	.word	0x20004500

0800bf60 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf60:	b530      	push	{r4, r5, lr}
 800bf62:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf64:	f7fe f93e 	bl	800a1e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf68:	4b11      	ldr	r3, [pc, #68]	; (800bfb0 <prvCheckForValidListAndQueue+0x50>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	b11b      	cbz	r3, 800bf76 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf6e:	f7fe f95b 	bl	800a228 <vPortExitCritical>
}
 800bf72:	b003      	add	sp, #12
 800bf74:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800bf76:	4d0f      	ldr	r5, [pc, #60]	; (800bfb4 <prvCheckForValidListAndQueue+0x54>)
 800bf78:	4628      	mov	r0, r5
 800bf7a:	f7fe f881 	bl	800a080 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf7e:	4c0e      	ldr	r4, [pc, #56]	; (800bfb8 <prvCheckForValidListAndQueue+0x58>)
 800bf80:	4620      	mov	r0, r4
 800bf82:	f7fe f87d 	bl	800a080 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf86:	4b0d      	ldr	r3, [pc, #52]	; (800bfbc <prvCheckForValidListAndQueue+0x5c>)
 800bf88:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf8a:	4b0d      	ldr	r3, [pc, #52]	; (800bfc0 <prvCheckForValidListAndQueue+0x60>)
 800bf8c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf8e:	2300      	movs	r3, #0
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	4b0c      	ldr	r3, [pc, #48]	; (800bfc4 <prvCheckForValidListAndQueue+0x64>)
 800bf94:	4a0c      	ldr	r2, [pc, #48]	; (800bfc8 <prvCheckForValidListAndQueue+0x68>)
 800bf96:	2110      	movs	r1, #16
 800bf98:	200a      	movs	r0, #10
 800bf9a:	f7fe fb5c 	bl	800a656 <xQueueGenericCreateStatic>
 800bf9e:	4b04      	ldr	r3, [pc, #16]	; (800bfb0 <prvCheckForValidListAndQueue+0x50>)
 800bfa0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d0e3      	beq.n	800bf6e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bfa6:	4909      	ldr	r1, [pc, #36]	; (800bfcc <prvCheckForValidListAndQueue+0x6c>)
 800bfa8:	f7fe ffde 	bl	800af68 <vQueueAddToRegistry>
 800bfac:	e7df      	b.n	800bf6e <prvCheckForValidListAndQueue+0xe>
 800bfae:	bf00      	nop
 800bfb0:	20004624 	.word	0x20004624
 800bfb4:	200045a8 	.word	0x200045a8
 800bfb8:	200045bc 	.word	0x200045bc
 800bfbc:	20004500 	.word	0x20004500
 800bfc0:	20004504 	.word	0x20004504
 800bfc4:	200045d4 	.word	0x200045d4
 800bfc8:	20004508 	.word	0x20004508
 800bfcc:	0800f7c0 	.word	0x0800f7c0

0800bfd0 <xTimerCreateTimerTask>:
{
 800bfd0:	b510      	push	{r4, lr}
 800bfd2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800bfd4:	f7ff ffc4 	bl	800bf60 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800bfd8:	4b12      	ldr	r3, [pc, #72]	; (800c024 <xTimerCreateTimerTask+0x54>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	b1cb      	cbz	r3, 800c012 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bfde:	2400      	movs	r4, #0
 800bfe0:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bfe2:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bfe4:	aa07      	add	r2, sp, #28
 800bfe6:	a906      	add	r1, sp, #24
 800bfe8:	a805      	add	r0, sp, #20
 800bfea:	f7fd ff21 	bl	8009e30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfee:	9b05      	ldr	r3, [sp, #20]
 800bff0:	9302      	str	r3, [sp, #8]
 800bff2:	9b06      	ldr	r3, [sp, #24]
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	2302      	movs	r3, #2
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	4623      	mov	r3, r4
 800bffc:	9a07      	ldr	r2, [sp, #28]
 800bffe:	490a      	ldr	r1, [pc, #40]	; (800c028 <xTimerCreateTimerTask+0x58>)
 800c000:	480a      	ldr	r0, [pc, #40]	; (800c02c <xTimerCreateTimerTask+0x5c>)
 800c002:	f7ff f9a9 	bl	800b358 <xTaskCreateStatic>
 800c006:	4b0a      	ldr	r3, [pc, #40]	; (800c030 <xTimerCreateTimerTask+0x60>)
 800c008:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c00a:	b110      	cbz	r0, 800c012 <xTimerCreateTimerTask+0x42>
}
 800c00c:	2001      	movs	r0, #1
 800c00e:	b008      	add	sp, #32
 800c010:	bd10      	pop	{r4, pc}
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	e7fe      	b.n	800c022 <xTimerCreateTimerTask+0x52>
 800c024:	20004624 	.word	0x20004624
 800c028:	0800f7c8 	.word	0x0800f7c8
 800c02c:	0800c315 	.word	0x0800c315
 800c030:	20004628 	.word	0x20004628

0800c034 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800c034:	b1c8      	cbz	r0, 800c06a <xTimerGenericCommand+0x36>
{
 800c036:	b530      	push	{r4, r5, lr}
 800c038:	b085      	sub	sp, #20
 800c03a:	4615      	mov	r5, r2
 800c03c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800c03e:	4a17      	ldr	r2, [pc, #92]	; (800c09c <xTimerGenericCommand+0x68>)
 800c040:	6810      	ldr	r0, [r2, #0]
 800c042:	b340      	cbz	r0, 800c096 <xTimerGenericCommand+0x62>
 800c044:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800c046:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c048:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c04a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c04c:	2905      	cmp	r1, #5
 800c04e:	dc1d      	bgt.n	800c08c <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c050:	f7ff fd02 	bl	800ba58 <xTaskGetSchedulerState>
 800c054:	2802      	cmp	r0, #2
 800c056:	d011      	beq.n	800c07c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c058:	2300      	movs	r3, #0
 800c05a:	461a      	mov	r2, r3
 800c05c:	4669      	mov	r1, sp
 800c05e:	480f      	ldr	r0, [pc, #60]	; (800c09c <xTimerGenericCommand+0x68>)
 800c060:	6800      	ldr	r0, [r0, #0]
 800c062:	f7fe fbad 	bl	800a7c0 <xQueueGenericSend>
}
 800c066:	b005      	add	sp, #20
 800c068:	bd30      	pop	{r4, r5, pc}
 800c06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06e:	f383 8811 	msr	BASEPRI, r3
 800c072:	f3bf 8f6f 	isb	sy
 800c076:	f3bf 8f4f 	dsb	sy
 800c07a:	e7fe      	b.n	800c07a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c07c:	2300      	movs	r3, #0
 800c07e:	9a08      	ldr	r2, [sp, #32]
 800c080:	4669      	mov	r1, sp
 800c082:	4806      	ldr	r0, [pc, #24]	; (800c09c <xTimerGenericCommand+0x68>)
 800c084:	6800      	ldr	r0, [r0, #0]
 800c086:	f7fe fb9b 	bl	800a7c0 <xQueueGenericSend>
 800c08a:	e7ec      	b.n	800c066 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c08c:	2300      	movs	r3, #0
 800c08e:	4669      	mov	r1, sp
 800c090:	f7fe fc9a 	bl	800a9c8 <xQueueGenericSendFromISR>
 800c094:	e7e7      	b.n	800c066 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800c096:	2000      	movs	r0, #0
	return xReturn;
 800c098:	e7e5      	b.n	800c066 <xTimerGenericCommand+0x32>
 800c09a:	bf00      	nop
 800c09c:	20004624 	.word	0x20004624

0800c0a0 <prvSwitchTimerLists>:
{
 800c0a0:	b570      	push	{r4, r5, r6, lr}
 800c0a2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0a4:	4b1a      	ldr	r3, [pc, #104]	; (800c110 <prvSwitchTimerLists+0x70>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	b352      	cbz	r2, 800c102 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0b0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0b2:	1d25      	adds	r5, r4, #4
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f7fe f817 	bl	800a0e8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0bc:	4620      	mov	r0, r4
 800c0be:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c0c0:	69e3      	ldr	r3, [r4, #28]
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d1ee      	bne.n	800c0a4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c0c6:	69a3      	ldr	r3, [r4, #24]
 800c0c8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800c0ca:	429e      	cmp	r6, r3
 800c0cc:	d207      	bcs.n	800c0de <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0ce:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0d0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	4b0e      	ldr	r3, [pc, #56]	; (800c110 <prvSwitchTimerLists+0x70>)
 800c0d6:	6818      	ldr	r0, [r3, #0]
 800c0d8:	f7fd ffec 	bl	800a0b4 <vListInsert>
 800c0dc:	e7e2      	b.n	800c0a4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0de:	2100      	movs	r1, #0
 800c0e0:	9100      	str	r1, [sp, #0]
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f7ff ffa4 	bl	800c034 <xTimerGenericCommand>
				configASSERT( xResult );
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d1d9      	bne.n	800c0a4 <prvSwitchTimerLists+0x4>
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	e7fe      	b.n	800c100 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 800c102:	4a04      	ldr	r2, [pc, #16]	; (800c114 <prvSwitchTimerLists+0x74>)
 800c104:	6810      	ldr	r0, [r2, #0]
 800c106:	4902      	ldr	r1, [pc, #8]	; (800c110 <prvSwitchTimerLists+0x70>)
 800c108:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800c10a:	6013      	str	r3, [r2, #0]
}
 800c10c:	b002      	add	sp, #8
 800c10e:	bd70      	pop	{r4, r5, r6, pc}
 800c110:	20004500 	.word	0x20004500
 800c114:	20004504 	.word	0x20004504

0800c118 <prvSampleTimeNow>:
{
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800c11c:	f7ff f9da 	bl	800b4d4 <xTaskGetTickCount>
 800c120:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800c122:	4b07      	ldr	r3, [pc, #28]	; (800c140 <prvSampleTimeNow+0x28>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4283      	cmp	r3, r0
 800c128:	d805      	bhi.n	800c136 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800c12a:	2300      	movs	r3, #0
 800c12c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800c12e:	4b04      	ldr	r3, [pc, #16]	; (800c140 <prvSampleTimeNow+0x28>)
 800c130:	601c      	str	r4, [r3, #0]
}
 800c132:	4620      	mov	r0, r4
 800c134:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800c136:	f7ff ffb3 	bl	800c0a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c13a:	2301      	movs	r3, #1
 800c13c:	602b      	str	r3, [r5, #0]
 800c13e:	e7f6      	b.n	800c12e <prvSampleTimeNow+0x16>
 800c140:	200045d0 	.word	0x200045d0

0800c144 <prvProcessExpiredTimer>:
{
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	4605      	mov	r5, r0
 800c14a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c14c:	4b14      	ldr	r3, [pc, #80]	; (800c1a0 <prvProcessExpiredTimer+0x5c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c154:	1d20      	adds	r0, r4, #4
 800c156:	f7fd ffc7 	bl	800a0e8 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c15a:	69e3      	ldr	r3, [r4, #28]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d004      	beq.n	800c16a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c162:	4620      	mov	r0, r4
 800c164:	4798      	blx	r3
}
 800c166:	b002      	add	sp, #8
 800c168:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c16a:	69a1      	ldr	r1, [r4, #24]
 800c16c:	462b      	mov	r3, r5
 800c16e:	4632      	mov	r2, r6
 800c170:	4429      	add	r1, r5
 800c172:	4620      	mov	r0, r4
 800c174:	f7ff fed0 	bl	800bf18 <prvInsertTimerInActiveList>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d0f1      	beq.n	800c160 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c17c:	2100      	movs	r1, #0
 800c17e:	9100      	str	r1, [sp, #0]
 800c180:	460b      	mov	r3, r1
 800c182:	462a      	mov	r2, r5
 800c184:	4620      	mov	r0, r4
 800c186:	f7ff ff55 	bl	800c034 <xTimerGenericCommand>
			configASSERT( xResult );
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d1e8      	bne.n	800c160 <prvProcessExpiredTimer+0x1c>
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	e7fe      	b.n	800c19e <prvProcessExpiredTimer+0x5a>
 800c1a0:	20004500 	.word	0x20004500

0800c1a4 <prvProcessTimerOrBlockTask>:
{
 800c1a4:	b570      	push	{r4, r5, r6, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	4606      	mov	r6, r0
 800c1aa:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800c1ac:	f7ff f98a 	bl	800b4c4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1b0:	a801      	add	r0, sp, #4
 800c1b2:	f7ff ffb1 	bl	800c118 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800c1b6:	9b01      	ldr	r3, [sp, #4]
 800c1b8:	bb1b      	cbnz	r3, 800c202 <prvProcessTimerOrBlockTask+0x5e>
 800c1ba:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c1bc:	b90c      	cbnz	r4, 800c1c2 <prvProcessTimerOrBlockTask+0x1e>
 800c1be:	42b0      	cmp	r0, r6
 800c1c0:	d218      	bcs.n	800c1f4 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 800c1c2:	b12c      	cbz	r4, 800c1d0 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1c4:	4b11      	ldr	r3, [pc, #68]	; (800c20c <prvProcessTimerOrBlockTask+0x68>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681c      	ldr	r4, [r3, #0]
 800c1ca:	fab4 f484 	clz	r4, r4
 800c1ce:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1d0:	4622      	mov	r2, r4
 800c1d2:	1b71      	subs	r1, r6, r5
 800c1d4:	4b0e      	ldr	r3, [pc, #56]	; (800c210 <prvProcessTimerOrBlockTask+0x6c>)
 800c1d6:	6818      	ldr	r0, [r3, #0]
 800c1d8:	f7fe ff06 	bl	800afe8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1dc:	f7ff fa26 	bl	800b62c <xTaskResumeAll>
 800c1e0:	b988      	cbnz	r0, 800c206 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 800c1e2:	4b0c      	ldr	r3, [pc, #48]	; (800c214 <prvProcessTimerOrBlockTask+0x70>)
 800c1e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1e8:	601a      	str	r2, [r3, #0]
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	e008      	b.n	800c206 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 800c1f4:	f7ff fa1a 	bl	800b62c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f7ff ffa2 	bl	800c144 <prvProcessExpiredTimer>
 800c200:	e001      	b.n	800c206 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 800c202:	f7ff fa13 	bl	800b62c <xTaskResumeAll>
}
 800c206:	b002      	add	sp, #8
 800c208:	bd70      	pop	{r4, r5, r6, pc}
 800c20a:	bf00      	nop
 800c20c:	20004504 	.word	0x20004504
 800c210:	20004624 	.word	0x20004624
 800c214:	e000ed04 	.word	0xe000ed04

0800c218 <prvProcessReceivedCommands>:
{
 800c218:	b530      	push	{r4, r5, lr}
 800c21a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c21c:	e002      	b.n	800c224 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c21e:	9b04      	ldr	r3, [sp, #16]
 800c220:	2b00      	cmp	r3, #0
 800c222:	da0f      	bge.n	800c244 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c224:	2200      	movs	r2, #0
 800c226:	a904      	add	r1, sp, #16
 800c228:	4b39      	ldr	r3, [pc, #228]	; (800c310 <prvProcessReceivedCommands+0xf8>)
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	f7fe fc8c 	bl	800ab48 <xQueueReceive>
 800c230:	2800      	cmp	r0, #0
 800c232:	d06a      	beq.n	800c30a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c234:	9b04      	ldr	r3, [sp, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	daf1      	bge.n	800c21e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c23a:	9907      	ldr	r1, [sp, #28]
 800c23c:	9806      	ldr	r0, [sp, #24]
 800c23e:	9b05      	ldr	r3, [sp, #20]
 800c240:	4798      	blx	r3
 800c242:	e7ec      	b.n	800c21e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c244:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c246:	6963      	ldr	r3, [r4, #20]
 800c248:	b113      	cbz	r3, 800c250 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c24a:	1d20      	adds	r0, r4, #4
 800c24c:	f7fd ff4c 	bl	800a0e8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c250:	a803      	add	r0, sp, #12
 800c252:	f7ff ff61 	bl	800c118 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800c256:	9b04      	ldr	r3, [sp, #16]
 800c258:	2b09      	cmp	r3, #9
 800c25a:	d8e3      	bhi.n	800c224 <prvProcessReceivedCommands+0xc>
 800c25c:	a201      	add	r2, pc, #4	; (adr r2, 800c264 <prvProcessReceivedCommands+0x4c>)
 800c25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c262:	bf00      	nop
 800c264:	0800c28d 	.word	0x0800c28d
 800c268:	0800c28d 	.word	0x0800c28d
 800c26c:	0800c28d 	.word	0x0800c28d
 800c270:	0800c225 	.word	0x0800c225
 800c274:	0800c2d5 	.word	0x0800c2d5
 800c278:	0800c2fb 	.word	0x0800c2fb
 800c27c:	0800c28d 	.word	0x0800c28d
 800c280:	0800c28d 	.word	0x0800c28d
 800c284:	0800c225 	.word	0x0800c225
 800c288:	0800c2d5 	.word	0x0800c2d5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c28c:	9905      	ldr	r1, [sp, #20]
 800c28e:	69a5      	ldr	r5, [r4, #24]
 800c290:	460b      	mov	r3, r1
 800c292:	4602      	mov	r2, r0
 800c294:	4429      	add	r1, r5
 800c296:	4620      	mov	r0, r4
 800c298:	f7ff fe3e 	bl	800bf18 <prvInsertTimerInActiveList>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	d0c1      	beq.n	800c224 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c2a6:	69e3      	ldr	r3, [r4, #28]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d1bb      	bne.n	800c224 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c2ac:	69a2      	ldr	r2, [r4, #24]
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	9100      	str	r1, [sp, #0]
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	9805      	ldr	r0, [sp, #20]
 800c2b6:	4402      	add	r2, r0
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f7ff febb 	bl	800c034 <xTimerGenericCommand>
							configASSERT( xResult );
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d1b0      	bne.n	800c224 <prvProcessReceivedCommands+0xc>
 800c2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	e7fe      	b.n	800c2d2 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2d4:	9905      	ldr	r1, [sp, #20]
 800c2d6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2d8:	b131      	cbz	r1, 800c2e8 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c2da:	4603      	mov	r3, r0
 800c2dc:	4602      	mov	r2, r0
 800c2de:	4401      	add	r1, r0
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f7ff fe19 	bl	800bf18 <prvInsertTimerInActiveList>
					break;
 800c2e6:	e79d      	b.n	800c224 <prvProcessReceivedCommands+0xc>
 800c2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ec:	f383 8811 	msr	BASEPRI, r3
 800c2f0:	f3bf 8f6f 	isb	sy
 800c2f4:	f3bf 8f4f 	dsb	sy
 800c2f8:	e7fe      	b.n	800c2f8 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c2fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d190      	bne.n	800c224 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800c302:	4620      	mov	r0, r4
 800c304:	f7fd fe84 	bl	800a010 <vPortFree>
 800c308:	e78c      	b.n	800c224 <prvProcessReceivedCommands+0xc>
}
 800c30a:	b009      	add	sp, #36	; 0x24
 800c30c:	bd30      	pop	{r4, r5, pc}
 800c30e:	bf00      	nop
 800c310:	20004624 	.word	0x20004624

0800c314 <prvTimerTask>:
{
 800c314:	b500      	push	{lr}
 800c316:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c318:	a801      	add	r0, sp, #4
 800c31a:	f7ff fded 	bl	800bef8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c31e:	9901      	ldr	r1, [sp, #4]
 800c320:	f7ff ff40 	bl	800c1a4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800c324:	f7ff ff78 	bl	800c218 <prvProcessReceivedCommands>
 800c328:	e7f6      	b.n	800c318 <prvTimerTask+0x4>

0800c32a <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800c32a:	b570      	push	{r4, r5, r6, lr}
 800c32c:	4606      	mov	r6, r0
 800c32e:	460d      	mov	r5, r1
 800c330:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800c332:	f001 fb01 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c336:	f001 facd 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800c33a:	2300      	movs	r3, #0
 800c33c:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800c340:	7002      	strb	r2, [r0, #0]
 800c342:	7043      	strb	r3, [r0, #1]
 800c344:	7083      	strb	r3, [r0, #2]
 800c346:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800c348:	2203      	movs	r2, #3
 800c34a:	7102      	strb	r2, [r0, #4]
 800c34c:	7143      	strb	r3, [r0, #5]
 800c34e:	7183      	strb	r3, [r0, #6]
 800c350:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c352:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = aType;
 800c354:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800c356:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 800c358:	f001 face 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c35c:	f001 fac0 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800c360:	bd70      	pop	{r4, r5, r6, pc}

0800c362 <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 800c362:	b570      	push	{r4, r5, r6, lr}
 800c364:	4606      	mov	r6, r0
 800c366:	460d      	mov	r5, r1
 800c368:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800c36a:	f001 fae5 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c36e:	f001 fab1 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 800c372:	2300      	movs	r3, #0
 800c374:	f06f 025f 	mvn.w	r2, #95	; 0x5f
 800c378:	7002      	strb	r2, [r0, #0]
 800c37a:	7043      	strb	r3, [r0, #1]
 800c37c:	7083      	strb	r3, [r0, #2]
 800c37e:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800c380:	2203      	movs	r2, #3
 800c382:	7102      	strb	r2, [r0, #4]
 800c384:	7143      	strb	r3, [r0, #5]
 800c386:	7183      	strb	r3, [r0, #6]
 800c388:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c38a:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 800c38c:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800c38e:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 800c390:	f001 fab2 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c394:	f001 faa4 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800c398:	bd70      	pop	{r4, r5, r6, pc}

0800c39a <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800c39a:	b538      	push	{r3, r4, r5, lr}
 800c39c:	4605      	mov	r5, r0
 800c39e:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800c3a0:	f001 faca 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c3a4:	f001 fa96 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f06f 025e 	mvn.w	r2, #94	; 0x5e
 800c3ae:	7002      	strb	r2, [r0, #0]
 800c3b0:	7043      	strb	r3, [r0, #1]
 800c3b2:	7083      	strb	r3, [r0, #2]
 800c3b4:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	7102      	strb	r2, [r0, #4]
 800c3ba:	7143      	strb	r3, [r0, #5]
 800c3bc:	7183      	strb	r3, [r0, #6]
 800c3be:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c3c0:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800c3c2:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800c3c4:	f001 fa98 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c3c8:	f001 fa8a 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800c3cc:	bd38      	pop	{r3, r4, r5, pc}

0800c3ce <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 800c3ce:	b538      	push	{r3, r4, r5, lr}
 800c3d0:	4605      	mov	r5, r0
 800c3d2:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800c3d4:	f001 fab0 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c3d8:	f001 fa7c 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f06f 0250 	mvn.w	r2, #80	; 0x50
 800c3e2:	7002      	strb	r2, [r0, #0]
 800c3e4:	7043      	strb	r3, [r0, #1]
 800c3e6:	7083      	strb	r3, [r0, #2]
 800c3e8:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	7102      	strb	r2, [r0, #4]
 800c3ee:	7143      	strb	r3, [r0, #5]
 800c3f0:	7183      	strb	r3, [r0, #6]
 800c3f2:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c3f4:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 800c3f6:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800c3f8:	f001 fa7e 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c3fc:	f001 fa70 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError) p_ot_req->Data[0];
 800c400:	6880      	ldr	r0, [r0, #8]
}
 800c402:	b2c0      	uxtb	r0, r0
 800c404:	bd38      	pop	{r3, r4, r5, pc}

0800c406 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 800c406:	b510      	push	{r4, lr}
 800c408:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800c40a:	f001 fa95 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c40e:	f001 fa61 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 800c412:	2300      	movs	r3, #0
 800c414:	f06f 024d 	mvn.w	r2, #77	; 0x4d
 800c418:	7002      	strb	r2, [r0, #0]
 800c41a:	7043      	strb	r3, [r0, #1]
 800c41c:	7083      	strb	r3, [r0, #2]
 800c41e:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800c420:	2201      	movs	r2, #1
 800c422:	7102      	strb	r2, [r0, #4]
 800c424:	7143      	strb	r3, [r0, #5]
 800c426:	7183      	strb	r3, [r0, #6]
 800c428:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c42a:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c42c:	f001 fa64 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c430:	f001 fa56 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError) p_ot_req->Data[0];
 800c434:	6880      	ldr	r0, [r0, #8]
}
 800c436:	b2c0      	uxtb	r0, r0
 800c438:	bd10      	pop	{r4, pc}

0800c43a <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 800c43a:	b538      	push	{r3, r4, r5, lr}
 800c43c:	4605      	mov	r5, r0
 800c43e:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800c440:	f001 fa7a 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c444:	f001 fa46 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 800c448:	2300      	movs	r3, #0
 800c44a:	f06f 0256 	mvn.w	r2, #86	; 0x56
 800c44e:	7002      	strb	r2, [r0, #0]
 800c450:	7043      	strb	r3, [r0, #1]
 800c452:	7083      	strb	r3, [r0, #2]
 800c454:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800c456:	2202      	movs	r2, #2
 800c458:	7102      	strb	r2, [r0, #4]
 800c45a:	7143      	strb	r3, [r0, #5]
 800c45c:	7183      	strb	r3, [r0, #6]
 800c45e:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c460:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800c462:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800c464:	f001 fa48 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c468:	f001 fa3a 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800c46c:	bd38      	pop	{r3, r4, r5, pc}

0800c46e <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800c46e:	b510      	push	{r4, lr}
 800c470:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800c472:	f001 fa61 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c476:	f001 fa2d 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 800c47a:	2300      	movs	r3, #0
 800c47c:	f06f 0261 	mvn.w	r2, #97	; 0x61
 800c480:	7002      	strb	r2, [r0, #0]
 800c482:	7043      	strb	r3, [r0, #1]
 800c484:	7083      	strb	r3, [r0, #2]
 800c486:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800c488:	2201      	movs	r2, #1
 800c48a:	7102      	strb	r2, [r0, #4]
 800c48c:	7143      	strb	r3, [r0, #5]
 800c48e:	7183      	strb	r3, [r0, #6]
 800c490:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c492:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c494:	f001 fa30 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c498:	f001 fa22 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otCoapType)p_ot_req->Data[0];
 800c49c:	6880      	ldr	r0, [r0, #8]
}
 800c49e:	b2c0      	uxtb	r0, r0
 800c4a0:	bd10      	pop	{r4, pc}

0800c4a2 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800c4a2:	b510      	push	{r4, lr}
 800c4a4:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800c4a6:	f001 fa47 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c4aa:	f001 fa13 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	f06f 024c 	mvn.w	r2, #76	; 0x4c
 800c4b4:	7002      	strb	r2, [r0, #0]
 800c4b6:	7043      	strb	r3, [r0, #1]
 800c4b8:	7083      	strb	r3, [r0, #2]
 800c4ba:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800c4bc:	2201      	movs	r2, #1
 800c4be:	7102      	strb	r2, [r0, #4]
 800c4c0:	7143      	strb	r3, [r0, #5]
 800c4c2:	7183      	strb	r3, [r0, #6]
 800c4c4:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c4c6:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c4c8:	f001 fa16 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c4cc:	f001 fa08 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otCoapCode)p_ot_req->Data[0];
 800c4d0:	6880      	ldr	r0, [r0, #8]
}
 800c4d2:	b2c0      	uxtb	r0, r0
 800c4d4:	bd10      	pop	{r4, pc}

0800c4d6 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 800c4d6:	b510      	push	{r4, lr}
 800c4d8:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800c4da:	f001 fa2d 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c4de:	f001 f9f9 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	f06f 0255 	mvn.w	r2, #85	; 0x55
 800c4e8:	7002      	strb	r2, [r0, #0]
 800c4ea:	7043      	strb	r3, [r0, #1]
 800c4ec:	7083      	strb	r3, [r0, #2]
 800c4ee:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	7102      	strb	r2, [r0, #4]
 800c4f4:	7143      	strb	r3, [r0, #5]
 800c4f6:	7183      	strb	r3, [r0, #6]
 800c4f8:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c4fa:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c4fc:	f001 f9fc 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c500:	f001 f9ee 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint16_t)p_ot_req->Data[0];
 800c504:	6880      	ldr	r0, [r0, #8]
}
 800c506:	b280      	uxth	r0, r0
 800c508:	bd10      	pop	{r4, pc}

0800c50a <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 800c50a:	b510      	push	{r4, lr}
 800c50c:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800c50e:	f001 fa13 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c512:	f001 f9df 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 800c516:	2300      	movs	r3, #0
 800c518:	f06f 0254 	mvn.w	r2, #84	; 0x54
 800c51c:	7002      	strb	r2, [r0, #0]
 800c51e:	7043      	strb	r3, [r0, #1]
 800c520:	7083      	strb	r3, [r0, #2]
 800c522:	70c3      	strb	r3, [r0, #3]

   p_ot_req->Size=1;
 800c524:	2201      	movs	r2, #1
 800c526:	7102      	strb	r2, [r0, #4]
 800c528:	7143      	strb	r3, [r0, #5]
 800c52a:	7183      	strb	r3, [r0, #6]
 800c52c:	71c3      	strb	r3, [r0, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800c52e:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c530:	f001 f9e2 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c534:	f001 f9d4 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
   return (uint8_t)p_ot_req->Data[0];
 800c538:	6880      	ldr	r0, [r0, #8]
}
 800c53a:	b2c0      	uxtb	r0, r0
 800c53c:	bd10      	pop	{r4, pc}

0800c53e <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800c53e:	b510      	push	{r4, lr}
 800c540:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800c542:	f001 f9f9 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c546:	f001 f9c5 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 800c54a:	2300      	movs	r3, #0
 800c54c:	f06f 0253 	mvn.w	r2, #83	; 0x53
 800c550:	7002      	strb	r2, [r0, #0]
 800c552:	7043      	strb	r3, [r0, #1]
 800c554:	7083      	strb	r3, [r0, #2]
 800c556:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800c558:	2201      	movs	r2, #1
 800c55a:	7102      	strb	r2, [r0, #4]
 800c55c:	7143      	strb	r3, [r0, #5]
 800c55e:	7183      	strb	r3, [r0, #6]
 800c560:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c562:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c564:	f001 f9c8 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c568:	f001 f9ba 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint8_t *)p_ot_req->Data[0];
}
 800c56c:	6880      	ldr	r0, [r0, #8]
 800c56e:	bd10      	pop	{r4, pc}

0800c570 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800c570:	b510      	push	{r4, lr}
 800c572:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800c574:	f001 f9e0 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c578:	f001 f9ac 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800c57c:	2300      	movs	r3, #0
 800c57e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800c582:	7002      	strb	r2, [r0, #0]
 800c584:	7043      	strb	r3, [r0, #1]
 800c586:	7083      	strb	r3, [r0, #2]
 800c588:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800c58a:	2201      	movs	r2, #1
 800c58c:	7102      	strb	r2, [r0, #4]
 800c58e:	7143      	strb	r3, [r0, #5]
 800c590:	7183      	strb	r3, [r0, #6]
 800c592:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c594:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c596:	f001 f9af 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c59a:	f001 f9a1 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otMessage *)p_ot_req->Data[0];

}
 800c59e:	6880      	ldr	r0, [r0, #8]
 800c5a0:	bd10      	pop	{r4, pc}

0800c5a2 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 800c5a2:	b570      	push	{r4, r5, r6, lr}
 800c5a4:	460e      	mov	r6, r1
 800c5a6:	4615      	mov	r5, r2
 800c5a8:	461c      	mov	r4, r3
    Pre_OtCmdProcessing();
 800c5aa:	f001 f9c5 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c5ae:	f001 f991 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f06f 0258 	mvn.w	r2, #88	; 0x58
 800c5b8:	7002      	strb	r2, [r0, #0]
 800c5ba:	7043      	strb	r3, [r0, #1]
 800c5bc:	7083      	strb	r3, [r0, #2]
 800c5be:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800c5c0:	2203      	movs	r2, #3
 800c5c2:	7102      	strb	r2, [r0, #4]
 800c5c4:	7143      	strb	r3, [r0, #5]
 800c5c6:	7183      	strb	r3, [r0, #6]
 800c5c8:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800c5ca:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800c5cc:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 800c5ce:	6104      	str	r4, [r0, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 800c5d0:	9b04      	ldr	r3, [sp, #16]
 800c5d2:	6143      	str	r3, [r0, #20]

    Ot_Cmd_Transfer();
 800c5d4:	f001 f990 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c5d8:	f001 f982 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800c5dc:	6880      	ldr	r0, [r0, #8]
}
 800c5de:	b2c0      	uxtb	r0, r0
 800c5e0:	bd70      	pop	{r4, r5, r6, pc}

0800c5e2 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800c5e2:	b510      	push	{r4, lr}
 800c5e4:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800c5e6:	f001 f9a7 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c5ea:	f001 f973 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800c5f4:	7002      	strb	r2, [r0, #0]
 800c5f6:	7043      	strb	r3, [r0, #1]
 800c5f8:	7083      	strb	r3, [r0, #2]
 800c5fa:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	7102      	strb	r2, [r0, #4]
 800c600:	7143      	strb	r3, [r0, #5]
 800c602:	7183      	strb	r3, [r0, #6]
 800c604:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 800c606:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c608:	f001 f976 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c60c:	f001 f968 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800c610:	6880      	ldr	r0, [r0, #8]
}
 800c612:	b2c0      	uxtb	r0, r0
 800c614:	bd10      	pop	{r4, pc}

0800c616 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800c616:	b510      	push	{r4, lr}
 800c618:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800c61a:	f001 f98d 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c61e:	f001 f959 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800c622:	2300      	movs	r3, #0
 800c624:	f06f 0249 	mvn.w	r2, #73	; 0x49
 800c628:	7002      	strb	r2, [r0, #0]
 800c62a:	7043      	strb	r3, [r0, #1]
 800c62c:	7083      	strb	r3, [r0, #2]
 800c62e:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800c630:	2201      	movs	r2, #1
 800c632:	7102      	strb	r2, [r0, #4]
 800c634:	7143      	strb	r3, [r0, #5]
 800c636:	7183      	strb	r3, [r0, #6]
 800c638:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 800c63a:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c63c:	f001 f95c 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c640:	f001 f94e 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800c644:	6880      	ldr	r0, [r0, #8]
}
 800c646:	b2c0      	uxtb	r0, r0
 800c648:	bd10      	pop	{r4, pc}

0800c64a <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800c64a:	b538      	push	{r3, r4, r5, lr}
 800c64c:	460d      	mov	r5, r1
 800c64e:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800c650:	f001 f972 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c654:	f001 f93e 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 800c658:	2300      	movs	r3, #0
 800c65a:	f06f 0257 	mvn.w	r2, #87	; 0x57
 800c65e:	7002      	strb	r2, [r0, #0]
 800c660:	7043      	strb	r3, [r0, #1]
 800c662:	7083      	strb	r3, [r0, #2]
 800c664:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800c666:	2202      	movs	r2, #2
 800c668:	7102      	strb	r2, [r0, #4]
 800c66a:	7143      	strb	r3, [r0, #5]
 800c66c:	7183      	strb	r3, [r0, #6]
 800c66e:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800c670:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800c672:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800c674:	f001 f940 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c678:	f001 f932 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800c67c:	6880      	ldr	r0, [r0, #8]
}
 800c67e:	b2c0      	uxtb	r0, r0
 800c680:	bd38      	pop	{r3, r4, r5, pc}

0800c682 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800c682:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 800c684:	f001 f958 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c688:	f001 f924 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800c68c:	2300      	movs	r3, #0
 800c68e:	f06f 026b 	mvn.w	r2, #107	; 0x6b
 800c692:	7002      	strb	r2, [r0, #0]
 800c694:	7043      	strb	r3, [r0, #1]
 800c696:	7083      	strb	r3, [r0, #2]
 800c698:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 800c69a:	7103      	strb	r3, [r0, #4]
 800c69c:	7143      	strb	r3, [r0, #5]
 800c69e:	7183      	strb	r3, [r0, #6]
 800c6a0:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 800c6a2:	f001 f929 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c6a6:	f001 f91b 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otInstance *)p_ot_req->Data[0];
}
 800c6aa:	6880      	ldr	r0, [r0, #8]
 800c6ac:	bd08      	pop	{r3, pc}

0800c6ae <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800c6ae:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 800c6b0:	f001 f942 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c6b4:	f001 f90e 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f06f 0269 	mvn.w	r2, #105	; 0x69
 800c6be:	7002      	strb	r2, [r0, #0]
 800c6c0:	7043      	strb	r3, [r0, #1]
 800c6c2:	7083      	strb	r3, [r0, #2]
 800c6c4:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 800c6c6:	7103      	strb	r3, [r0, #4]
 800c6c8:	7143      	strb	r3, [r0, #5]
 800c6ca:	7183      	strb	r3, [r0, #6]
 800c6cc:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 800c6ce:	f001 f913 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c6d2:	f001 f905 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800c6d6:	bd08      	pop	{r3, pc}

0800c6d8 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	460d      	mov	r5, r1
 800c6dc:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800c6de:	f001 f92b 	bl	800d938 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800c6e2:	4b0c      	ldr	r3, [pc, #48]	; (800c714 <otSetStateChangedCallback+0x3c>)
 800c6e4:	601d      	str	r5, [r3, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c6e6:	f001 f8f5 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	f06f 0268 	mvn.w	r2, #104	; 0x68
 800c6f0:	7002      	strb	r2, [r0, #0]
 800c6f2:	7043      	strb	r3, [r0, #1]
 800c6f4:	7083      	strb	r3, [r0, #2]
 800c6f6:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	7102      	strb	r2, [r0, #4]
 800c6fc:	7143      	strb	r3, [r0, #5]
 800c6fe:	7183      	strb	r3, [r0, #6]
 800c700:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800c702:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c704:	f001 f8f8 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c708:	f001 f8ea 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800c70c:	6880      	ldr	r0, [r0, #8]
}
 800c70e:	b2c0      	uxtb	r0, r0
 800c710:	bd38      	pop	{r3, r4, r5, pc}
 800c712:	bf00      	nop
 800c714:	20004668 	.word	0x20004668

0800c718 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800c718:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 800c71a:	f001 f90d 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c71e:	f001 f8d9 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800c722:	2300      	movs	r3, #0
 800c724:	f06f 0264 	mvn.w	r2, #100	; 0x64
 800c728:	7002      	strb	r2, [r0, #0]
 800c72a:	7043      	strb	r3, [r0, #1]
 800c72c:	7083      	strb	r3, [r0, #2]
 800c72e:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 800c730:	7103      	strb	r3, [r0, #4]
 800c732:	7143      	strb	r3, [r0, #5]
 800c734:	7183      	strb	r3, [r0, #6]
 800c736:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 800c738:	f001 f8de 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c73c:	f001 f8d0 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800c740:	6880      	ldr	r0, [r0, #8]
}
 800c742:	b2c0      	uxtb	r0, r0
 800c744:	bd08      	pop	{r3, pc}

0800c746 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800c746:	b510      	push	{r4, lr}
 800c748:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800c74a:	f001 f8f5 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c74e:	f001 f8c1 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800c752:	2300      	movs	r3, #0
 800c754:	2227      	movs	r2, #39	; 0x27
 800c756:	7002      	strb	r2, [r0, #0]
 800c758:	7043      	strb	r3, [r0, #1]
 800c75a:	7083      	strb	r3, [r0, #2]
 800c75c:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800c75e:	2201      	movs	r2, #1
 800c760:	7102      	strb	r2, [r0, #4]
 800c762:	7143      	strb	r3, [r0, #5]
 800c764:	7183      	strb	r3, [r0, #6]
 800c766:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800c768:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800c76a:	f001 f8c5 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c76e:	f001 f8b7 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800c772:	6880      	ldr	r0, [r0, #8]
}
 800c774:	b2c0      	uxtb	r0, r0
 800c776:	bd10      	pop	{r4, pc}

0800c778 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800c778:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800c77a:	f001 f8dd 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c77e:	f001 f8a9 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800c782:	2300      	movs	r3, #0
 800c784:	2228      	movs	r2, #40	; 0x28
 800c786:	7002      	strb	r2, [r0, #0]
 800c788:	7043      	strb	r3, [r0, #1]
 800c78a:	7083      	strb	r3, [r0, #2]
 800c78c:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800c78e:	7103      	strb	r3, [r0, #4]
 800c790:	7143      	strb	r3, [r0, #5]
 800c792:	7183      	strb	r3, [r0, #6]
 800c794:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800c796:	f001 f8af 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c79a:	f001 f8a1 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (bool)p_ot_req->Data[0];
 800c79e:	6880      	ldr	r0, [r0, #8]
}
 800c7a0:	3000      	adds	r0, #0
 800c7a2:	bf18      	it	ne
 800c7a4:	2001      	movne	r0, #1
 800c7a6:	bd08      	pop	{r3, pc}

0800c7a8 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800c7a8:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800c7aa:	f001 f8c5 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c7ae:	f001 f891 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	222b      	movs	r2, #43	; 0x2b
 800c7b6:	7002      	strb	r2, [r0, #0]
 800c7b8:	7043      	strb	r3, [r0, #1]
 800c7ba:	7083      	strb	r3, [r0, #2]
 800c7bc:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800c7be:	7103      	strb	r3, [r0, #4]
 800c7c0:	7143      	strb	r3, [r0, #5]
 800c7c2:	7183      	strb	r3, [r0, #6]
 800c7c4:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800c7c6:	f001 f897 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c7ca:	f001 f889 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otNetifAddress *)p_ot_req->Data[0];
}
 800c7ce:	6880      	ldr	r0, [r0, #8]
 800c7d0:	bd08      	pop	{r3, pc}

0800c7d2 <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800c7d2:	b538      	push	{r3, r4, r5, lr}
 800c7d4:	4605      	mov	r5, r0
 800c7d6:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800c7d8:	f001 f8ae 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c7dc:	f001 f87a 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	223f      	movs	r2, #63	; 0x3f
 800c7e4:	7002      	strb	r2, [r0, #0]
 800c7e6:	7043      	strb	r3, [r0, #1]
 800c7e8:	7083      	strb	r3, [r0, #2]
 800c7ea:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=2;
 800c7ec:	2202      	movs	r2, #2
 800c7ee:	7102      	strb	r2, [r0, #4]
 800c7f0:	7143      	strb	r3, [r0, #5]
 800c7f2:	7183      	strb	r3, [r0, #6]
 800c7f4:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800c7f6:	6085      	str	r5, [r0, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800c7f8:	60c4      	str	r4, [r0, #12]

  Ot_Cmd_Transfer();
 800c7fa:	f001 f87d 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c7fe:	f001 f86f 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800c802:	6880      	ldr	r0, [r0, #8]
}
 800c804:	b2c0      	uxtb	r0, r0
 800c806:	bd38      	pop	{r3, r4, r5, pc}

0800c808 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800c808:	b510      	push	{r4, lr}
 800c80a:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800c80c:	f001 f894 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c810:	f001 f860 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800c814:	2300      	movs	r3, #0
 800c816:	2208      	movs	r2, #8
 800c818:	7002      	strb	r2, [r0, #0]
 800c81a:	7043      	strb	r3, [r0, #1]
 800c81c:	7083      	strb	r3, [r0, #2]
 800c81e:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800c820:	2201      	movs	r2, #1
 800c822:	7102      	strb	r2, [r0, #4]
 800c824:	7143      	strb	r3, [r0, #5]
 800c826:	7183      	strb	r3, [r0, #6]
 800c828:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800c82a:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800c82c:	f001 f864 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c830:	f001 f856 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800c834:	6880      	ldr	r0, [r0, #8]
}
 800c836:	b2c0      	uxtb	r0, r0
 800c838:	bd10      	pop	{r4, pc}

0800c83a <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800c83a:	b510      	push	{r4, lr}
 800c83c:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800c83e:	f001 f87b 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c842:	f001 f847 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800c846:	2300      	movs	r3, #0
 800c848:	220f      	movs	r2, #15
 800c84a:	7002      	strb	r2, [r0, #0]
 800c84c:	7043      	strb	r3, [r0, #1]
 800c84e:	7083      	strb	r3, [r0, #2]
 800c850:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800c852:	2201      	movs	r2, #1
 800c854:	7102      	strb	r2, [r0, #4]
 800c856:	7143      	strb	r3, [r0, #5]
 800c858:	7183      	strb	r3, [r0, #6]
 800c85a:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800c85c:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800c85e:	f001 f84b 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c862:	f001 f83d 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800c866:	6880      	ldr	r0, [r0, #8]
}
 800c868:	b2c0      	uxtb	r0, r0
 800c86a:	bd10      	pop	{r4, pc}

0800c86c <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800c86c:	b510      	push	{r4, lr}
 800c86e:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800c870:	f001 f862 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c874:	f001 f82e 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800c878:	2300      	movs	r3, #0
 800c87a:	f06f 0246 	mvn.w	r2, #70	; 0x46
 800c87e:	7002      	strb	r2, [r0, #0]
 800c880:	7043      	strb	r3, [r0, #1]
 800c882:	7083      	strb	r3, [r0, #2]
 800c884:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800c886:	2201      	movs	r2, #1
 800c888:	7102      	strb	r2, [r0, #4]
 800c88a:	7143      	strb	r3, [r0, #5]
 800c88c:	7183      	strb	r3, [r0, #6]
 800c88e:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800c890:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c892:	f001 f831 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c896:	f001 f823 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800c89a:	bd10      	pop	{r4, pc}

0800c89c <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800c89c:	b510      	push	{r4, lr}
 800c89e:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800c8a0:	f001 f84a 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c8a4:	f001 f816 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800c8ae:	7002      	strb	r2, [r0, #0]
 800c8b0:	7043      	strb	r3, [r0, #1]
 800c8b2:	7083      	strb	r3, [r0, #2]
 800c8b4:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	7102      	strb	r2, [r0, #4]
 800c8ba:	7143      	strb	r3, [r0, #5]
 800c8bc:	7183      	strb	r3, [r0, #6]
 800c8be:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800c8c0:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800c8c2:	f001 f819 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c8c6:	f001 f80b 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint16_t)p_ot_req->Data[0];
 800c8ca:	6880      	ldr	r0, [r0, #8]
}
 800c8cc:	b280      	uxth	r0, r0
 800c8ce:	bd10      	pop	{r4, pc}

0800c8d0 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800c8d8:	f001 f82e 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c8dc:	f000 fffa 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f06f 023e 	mvn.w	r2, #62	; 0x3e
 800c8e6:	7002      	strb	r2, [r0, #0]
 800c8e8:	7043      	strb	r3, [r0, #1]
 800c8ea:	7083      	strb	r3, [r0, #2]
 800c8ec:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800c8ee:	2203      	movs	r2, #3
 800c8f0:	7102      	strb	r2, [r0, #4]
 800c8f2:	7143      	strb	r3, [r0, #5]
 800c8f4:	7183      	strb	r3, [r0, #6]
 800c8f6:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800c8f8:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800c8fa:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800c8fc:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 800c8fe:	f000 fffb 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c902:	f000 ffed 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800c906:	6880      	ldr	r0, [r0, #8]
}
 800c908:	b2c0      	uxtb	r0, r0
 800c90a:	bd70      	pop	{r4, r5, r6, pc}

0800c90c <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800c90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90e:	4607      	mov	r7, r0
 800c910:	460e      	mov	r6, r1
 800c912:	4615      	mov	r5, r2
 800c914:	461c      	mov	r4, r3
    Pre_OtCmdProcessing();
 800c916:	f001 f80f 	bl	800d938 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c91a:	f000 ffdb 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800c91e:	2300      	movs	r3, #0
 800c920:	f06f 023d 	mvn.w	r2, #61	; 0x3d
 800c924:	7002      	strb	r2, [r0, #0]
 800c926:	7043      	strb	r3, [r0, #1]
 800c928:	7083      	strb	r3, [r0, #2]
 800c92a:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=4;
 800c92c:	2204      	movs	r2, #4
 800c92e:	7102      	strb	r2, [r0, #4]
 800c930:	7143      	strb	r3, [r0, #5]
 800c932:	7183      	strb	r3, [r0, #6]
 800c934:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800c936:	6087      	str	r7, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800c938:	60c6      	str	r6, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800c93a:	6105      	str	r5, [r0, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800c93c:	6144      	str	r4, [r0, #20]

    Ot_Cmd_Transfer();
 800c93e:	f000 ffdb 	bl	800d8f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c942:	f000 ffcd 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (int)p_ot_req->Data[0];
}
 800c946:	6880      	ldr	r0, [r0, #8]
 800c948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c94c <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	b082      	sub	sp, #8
    HAL_StatusTypeDef status = HAL_OK;

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800c950:	f000 ffcc 	bl	800d8ec <THREAD_Get_NotificationPayloadBuffer>

    switch(p_notification->ID)
 800c954:	6803      	ldr	r3, [r0, #0]
 800c956:	3b01      	subs	r3, #1
 800c958:	2b14      	cmp	r3, #20
 800c95a:	f200 80e6 	bhi.w	800cb2a <OpenThread_CallBack_Processing+0x1de>
 800c95e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c962:	0015      	.short	0x0015
 800c964:	002b001f 	.word	0x002b001f
 800c968:	00440039 	.word	0x00440039
 800c96c:	0059004e 	.word	0x0059004e
 800c970:	006d0063 	.word	0x006d0063
 800c974:	00810077 	.word	0x00810077
 800c978:	00e4008b 	.word	0x00e4008b
 800c97c:	00a60097 	.word	0x00a60097
 800c980:	00bb00b1 	.word	0x00bb00b1
 800c984:	00d200c6 	.word	0x00d200c6
 800c988:	00db00e4 	.word	0x00db00e4
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800c98c:	4b7a      	ldr	r3, [pc, #488]	; (800cb78 <OpenThread_CallBack_Processing+0x22c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	f000 80cc 	beq.w	800cb2e <OpenThread_CallBack_Processing+0x1e2>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800c996:	68c1      	ldr	r1, [r0, #12]
 800c998:	6880      	ldr	r0, [r0, #8]
 800c99a:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800c99c:	2400      	movs	r4, #0
 800c99e:	e01f      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
                    (void*) p_notification->Data[1]);
        }
        break;
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 800c9a0:	6883      	ldr	r3, [r0, #8]
 800c9a2:	4a76      	ldr	r2, [pc, #472]	; (800cb7c <OpenThread_CallBack_Processing+0x230>)
 800c9a4:	6013      	str	r3, [r2, #0]

        if (coapRequestHandlerCb != NULL)
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f000 80c3 	beq.w	800cb32 <OpenThread_CallBack_Processing+0x1e6>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 800c9ac:	6942      	ldr	r2, [r0, #20]
 800c9ae:	6901      	ldr	r1, [r0, #16]
 800c9b0:	68c0      	ldr	r0, [r0, #12]
 800c9b2:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800c9b4:	2400      	movs	r4, #0
 800c9b6:	e013      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
                    (otMessage *) p_notification->Data[2],
                    (otMessageInfo *) p_notification->Data[3]);
        }
        break;
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 800c9b8:	6884      	ldr	r4, [r0, #8]
 800c9ba:	4b71      	ldr	r3, [pc, #452]	; (800cb80 <OpenThread_CallBack_Processing+0x234>)
 800c9bc:	601c      	str	r4, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 800c9be:	2c00      	cmp	r4, #0
 800c9c0:	f000 80b9 	beq.w	800cb36 <OpenThread_CallBack_Processing+0x1ea>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
                    (otMessage *) p_notification->Data[2],
                    (otMessageInfo *) p_notification->Data[3],
                    (otError) p_notification->Data[4]);
 800c9c4:	6983      	ldr	r3, [r0, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	6942      	ldr	r2, [r0, #20]
 800c9ca:	6901      	ldr	r1, [r0, #16]
 800c9cc:	68c0      	ldr	r0, [r0, #12]
 800c9ce:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800c9d0:	2400      	movs	r4, #0
 800c9d2:	e005      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        }
        break;
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800c9d4:	2001      	movs	r0, #1
 800c9d6:	f000 f901 	bl	800cbdc <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800c9da:	f7f8 f833 	bl	8004a44 <HAL_NVIC_SystemReset>
    HAL_StatusTypeDef status = HAL_OK;
 800c9de:	2400      	movs	r4, #0
    default:
        status = HAL_ERROR;
        break;
    }

    TL_THREAD_SendAck();
 800c9e0:	f000 fbce 	bl	800d180 <TL_THREAD_SendAck>
    return status;

}
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	b002      	add	sp, #8
 800c9e8:	bd70      	pop	{r4, r5, r6, pc}
        if (otIp6ReceiveCb != NULL)
 800c9ea:	4b66      	ldr	r3, [pc, #408]	; (800cb84 <OpenThread_CallBack_Processing+0x238>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f000 80a3 	beq.w	800cb3a <OpenThread_CallBack_Processing+0x1ee>
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800c9f4:	68c1      	ldr	r1, [r0, #12]
 800c9f6:	6880      	ldr	r0, [r0, #8]
 800c9f8:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800c9fa:	2400      	movs	r4, #0
 800c9fc:	e7f0      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (aIidCreateCb != NULL)
 800c9fe:	4b62      	ldr	r3, [pc, #392]	; (800cb88 <OpenThread_CallBack_Processing+0x23c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f000 809b 	beq.w	800cb3e <OpenThread_CallBack_Processing+0x1f2>
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800ca08:	68c2      	ldr	r2, [r0, #12]
 800ca0a:	6881      	ldr	r1, [r0, #8]
 800ca0c:	2000      	movs	r0, #0
 800ca0e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800ca10:	2400      	movs	r4, #0
 800ca12:	e7e5      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otHandleActiveScanResultCb != NULL)
 800ca14:	4b5d      	ldr	r3, [pc, #372]	; (800cb8c <OpenThread_CallBack_Processing+0x240>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 8092 	beq.w	800cb42 <OpenThread_CallBack_Processing+0x1f6>
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800ca1e:	68c1      	ldr	r1, [r0, #12]
 800ca20:	6880      	ldr	r0, [r0, #8]
 800ca22:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800ca24:	2400      	movs	r4, #0
 800ca26:	e7db      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otHandleEnergyScanResultCb != NULL)
 800ca28:	4b59      	ldr	r3, [pc, #356]	; (800cb90 <OpenThread_CallBack_Processing+0x244>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 808a 	beq.w	800cb46 <OpenThread_CallBack_Processing+0x1fa>
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800ca32:	68c1      	ldr	r1, [r0, #12]
 800ca34:	6880      	ldr	r0, [r0, #8]
 800ca36:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800ca38:	2400      	movs	r4, #0
 800ca3a:	e7d1      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otLinkPcapCb != NULL)
 800ca3c:	4b55      	ldr	r3, [pc, #340]	; (800cb94 <OpenThread_CallBack_Processing+0x248>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f000 8082 	beq.w	800cb4a <OpenThread_CallBack_Processing+0x1fe>
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800ca46:	68c1      	ldr	r1, [r0, #12]
 800ca48:	6880      	ldr	r0, [r0, #8]
 800ca4a:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800ca4c:	2400      	movs	r4, #0
 800ca4e:	e7c7      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otReceiveDiagnosticGetCb != NULL)
 800ca50:	4b51      	ldr	r3, [pc, #324]	; (800cb98 <OpenThread_CallBack_Processing+0x24c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d07a      	beq.n	800cb4e <OpenThread_CallBack_Processing+0x202>
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800ca58:	6902      	ldr	r2, [r0, #16]
 800ca5a:	68c1      	ldr	r1, [r0, #12]
 800ca5c:	6880      	ldr	r0, [r0, #8]
 800ca5e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800ca60:	2400      	movs	r4, #0
 800ca62:	e7bd      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otThreadChildTableCallbackCb != NULL)
 800ca64:	4b4d      	ldr	r3, [pc, #308]	; (800cb9c <OpenThread_CallBack_Processing+0x250>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d072      	beq.n	800cb52 <OpenThread_CallBack_Processing+0x206>
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800ca6c:	6882      	ldr	r2, [r0, #8]
 800ca6e:	68c1      	ldr	r1, [r0, #12]
 800ca70:	b2d0      	uxtb	r0, r2
 800ca72:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800ca74:	2400      	movs	r4, #0
 800ca76:	e7b3      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otCommissionerEnergyReportCb != NULL)
 800ca78:	4b49      	ldr	r3, [pc, #292]	; (800cba0 <OpenThread_CallBack_Processing+0x254>)
 800ca7a:	681c      	ldr	r4, [r3, #0]
 800ca7c:	2c00      	cmp	r4, #0
 800ca7e:	d06a      	beq.n	800cb56 <OpenThread_CallBack_Processing+0x20a>
                    (uint8_t) p_notification->Data[2],
 800ca80:	6902      	ldr	r2, [r0, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800ca82:	6943      	ldr	r3, [r0, #20]
 800ca84:	b2d2      	uxtb	r2, r2
 800ca86:	68c1      	ldr	r1, [r0, #12]
 800ca88:	6880      	ldr	r0, [r0, #8]
 800ca8a:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800ca8c:	2400      	movs	r4, #0
 800ca8e:	e7a7      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otDnsResponseHandlerCb != NULL)
 800ca90:	4b44      	ldr	r3, [pc, #272]	; (800cba4 <OpenThread_CallBack_Processing+0x258>)
 800ca92:	681d      	ldr	r5, [r3, #0]
 800ca94:	2d00      	cmp	r5, #0
 800ca96:	d060      	beq.n	800cb5a <OpenThread_CallBack_Processing+0x20e>
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800ca98:	6886      	ldr	r6, [r0, #8]
                    (char*) p_notification->Data[1],
 800ca9a:	68c1      	ldr	r1, [r0, #12]
                    (otIp6Address*) p_notification->Data[2],
 800ca9c:	6902      	ldr	r2, [r0, #16]
                    (uint32_t) p_notification->Data[3],
 800ca9e:	6943      	ldr	r3, [r0, #20]
                    (otError) p_notification->Data[4]);
 800caa0:	6984      	ldr	r4, [r0, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800caa2:	b2e4      	uxtb	r4, r4
 800caa4:	9400      	str	r4, [sp, #0]
 800caa6:	4630      	mov	r0, r6
 800caa8:	47a8      	blx	r5
    HAL_StatusTypeDef status = HAL_OK;
 800caaa:	2400      	movs	r4, #0
 800caac:	e798      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otIcmp6ReceiveCb != NULL)
 800caae:	4b3e      	ldr	r3, [pc, #248]	; (800cba8 <OpenThread_CallBack_Processing+0x25c>)
 800cab0:	681c      	ldr	r4, [r3, #0]
 800cab2:	2c00      	cmp	r4, #0
 800cab4:	d053      	beq.n	800cb5e <OpenThread_CallBack_Processing+0x212>
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800cab6:	6943      	ldr	r3, [r0, #20]
 800cab8:	6902      	ldr	r2, [r0, #16]
 800caba:	68c1      	ldr	r1, [r0, #12]
 800cabc:	6880      	ldr	r0, [r0, #8]
 800cabe:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800cac0:	2400      	movs	r4, #0
 800cac2:	e78d      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otJoinerCb != NULL)
 800cac4:	4b39      	ldr	r3, [pc, #228]	; (800cbac <OpenThread_CallBack_Processing+0x260>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d04a      	beq.n	800cb62 <OpenThread_CallBack_Processing+0x216>
            otJoinerCb((otError) p_notification->Data[0],
 800cacc:	6882      	ldr	r2, [r0, #8]
 800cace:	68c1      	ldr	r1, [r0, #12]
 800cad0:	b2d0      	uxtb	r0, r2
 800cad2:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800cad4:	2400      	movs	r4, #0
 800cad6:	e783      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawReceiveDoneCb != NULL)
 800cad8:	4b35      	ldr	r3, [pc, #212]	; (800cbb0 <OpenThread_CallBack_Processing+0x264>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d042      	beq.n	800cb66 <OpenThread_CallBack_Processing+0x21a>
                    (otError) p_notification->Data[2]);
 800cae0:	6902      	ldr	r2, [r0, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800cae2:	b2d2      	uxtb	r2, r2
 800cae4:	68c1      	ldr	r1, [r0, #12]
 800cae6:	6880      	ldr	r0, [r0, #8]
 800cae8:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800caea:	2400      	movs	r4, #0
 800caec:	e778      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawTransmitDoneCb != NULL)
 800caee:	4b31      	ldr	r3, [pc, #196]	; (800cbb4 <OpenThread_CallBack_Processing+0x268>)
 800caf0:	681c      	ldr	r4, [r3, #0]
 800caf2:	2c00      	cmp	r4, #0
 800caf4:	d039      	beq.n	800cb6a <OpenThread_CallBack_Processing+0x21e>
                    (otError) p_notification->Data[3]);
 800caf6:	6943      	ldr	r3, [r0, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	6902      	ldr	r2, [r0, #16]
 800cafc:	68c1      	ldr	r1, [r0, #12]
 800cafe:	6880      	ldr	r0, [r0, #8]
 800cb00:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800cb02:	2400      	movs	r4, #0
 800cb04:	e76c      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawEnergyScanDoneCb != NULL)
 800cb06:	4b2c      	ldr	r3, [pc, #176]	; (800cbb8 <OpenThread_CallBack_Processing+0x26c>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	b383      	cbz	r3, 800cb6e <OpenThread_CallBack_Processing+0x222>
                    (int8_t) p_notification->Data[1]);
 800cb0c:	68c1      	ldr	r1, [r0, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800cb0e:	b249      	sxtb	r1, r1
 800cb10:	6880      	ldr	r0, [r0, #8]
 800cb12:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800cb14:	2400      	movs	r4, #0
 800cb16:	e763      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        if (otUdpReceiveCb != NULL)
 800cb18:	4b28      	ldr	r3, [pc, #160]	; (800cbbc <OpenThread_CallBack_Processing+0x270>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	b34b      	cbz	r3, 800cb72 <OpenThread_CallBack_Processing+0x226>
            otUdpReceiveCb((void*) p_notification->Data[0],
 800cb1e:	6902      	ldr	r2, [r0, #16]
 800cb20:	68c1      	ldr	r1, [r0, #12]
 800cb22:	6880      	ldr	r0, [r0, #8]
 800cb24:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800cb26:	2400      	movs	r4, #0
 800cb28:	e75a      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
        status = HAL_ERROR;
 800cb2a:	2401      	movs	r4, #1
 800cb2c:	e758      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
    HAL_StatusTypeDef status = HAL_OK;
 800cb2e:	2400      	movs	r4, #0
 800cb30:	e756      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb32:	2400      	movs	r4, #0
 800cb34:	e754      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb36:	2400      	movs	r4, #0
 800cb38:	e752      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb3a:	2400      	movs	r4, #0
 800cb3c:	e750      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb3e:	2400      	movs	r4, #0
 800cb40:	e74e      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb42:	2400      	movs	r4, #0
 800cb44:	e74c      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb46:	2400      	movs	r4, #0
 800cb48:	e74a      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb4a:	2400      	movs	r4, #0
 800cb4c:	e748      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb4e:	2400      	movs	r4, #0
 800cb50:	e746      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb52:	2400      	movs	r4, #0
 800cb54:	e744      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb56:	2400      	movs	r4, #0
 800cb58:	e742      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb5a:	2400      	movs	r4, #0
 800cb5c:	e740      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb5e:	2400      	movs	r4, #0
 800cb60:	e73e      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb62:	2400      	movs	r4, #0
 800cb64:	e73c      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb66:	2400      	movs	r4, #0
 800cb68:	e73a      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb6a:	2400      	movs	r4, #0
 800cb6c:	e738      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb6e:	2400      	movs	r4, #0
 800cb70:	e736      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb72:	2400      	movs	r4, #0
 800cb74:	e734      	b.n	800c9e0 <OpenThread_CallBack_Processing+0x94>
 800cb76:	bf00      	nop
 800cb78:	20004668 	.word	0x20004668
 800cb7c:	20004630 	.word	0x20004630
 800cb80:	20004634 	.word	0x20004634
 800cb84:	2000464c 	.word	0x2000464c
 800cb88:	2000462c 	.word	0x2000462c
 800cb8c:	20004640 	.word	0x20004640
 800cb90:	20004644 	.word	0x20004644
 800cb94:	20004654 	.word	0x20004654
 800cb98:	20004664 	.word	0x20004664
 800cb9c:	2000466c 	.word	0x2000466c
 800cba0:	20004638 	.word	0x20004638
 800cba4:	2000463c 	.word	0x2000463c
 800cba8:	20004648 	.word	0x20004648
 800cbac:	20004650 	.word	0x20004650
 800cbb0:	2000465c 	.word	0x2000465c
 800cbb4:	20004660 	.word	0x20004660
 800cbb8:	20004658 	.word	0x20004658
 800cbbc:	20004670 	.word	0x20004670

0800cbc0 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800cbc0:	b500      	push	{lr}
 800cbc2:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800cbc4:	466b      	mov	r3, sp
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	4611      	mov	r1, r2
 800cbca:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800cbce:	f000 f8e9 	bl	800cda4 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 800cbd2:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800cbd6:	b005      	add	sp, #20
 800cbd8:	f85d fb04 	ldr.w	pc, [sp], #4

0800cbdc <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800cbdc:	b500      	push	{lr}
 800cbde:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  local_buffer[0] = Ip;
 800cbe0:	aa04      	add	r2, sp, #16
 800cbe2:	f802 0d10 	strb.w	r0, [r2, #-16]!

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	2101      	movs	r1, #1
 800cbea:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800cbee:	f000 f8d9 	bl	800cda4 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 800cbf2:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800cbf6:	b005      	add	sp, #20
 800cbf8:	f85d fb04 	ldr.w	pc, [sp], #4

0800cbfc <SHCI_GetWirelessFwInfo>:
  MB_RefTable_t * p_RefTable = NULL;
  uint32_t version = 0;
  uint32_t memorySize = 0;
  uint32_t infoStack = 0;

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800cbfc:	4b19      	ldr	r3, [pc, #100]	; (800cc64 <SHCI_GetWirelessFwInfo+0x68>)
 800cbfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cc08:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	6912      	ldr	r2, [r2, #16]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800cc10:	0e11      	lsrs	r1, r2, #24
 800cc12:	7001      	strb	r1, [r0, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800cc14:	0c11      	lsrs	r1, r2, #16
 800cc16:	7041      	strb	r1, [r0, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800cc18:	0a11      	lsrs	r1, r2, #8
 800cc1a:	7081      	strb	r1, [r0, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800cc1c:	f3c2 1103 	ubfx	r1, r2, #4, #4
 800cc20:	70c1      	strb	r1, [r0, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800cc22:	f002 020f 	and.w	r2, r2, #15
 800cc26:	7102      	strb	r2, [r0, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	6952      	ldr	r2, [r2, #20]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800cc2c:	0e11      	lsrs	r1, r2, #24
 800cc2e:	7141      	strb	r1, [r0, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800cc30:	0c11      	lsrs	r1, r2, #16
 800cc32:	7181      	strb	r1, [r0, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800cc34:	0a11      	lsrs	r1, r2, #8
 800cc36:	71c1      	strb	r1, [r0, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800cc38:	7202      	strb	r2, [r0, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	6992      	ldr	r2, [r2, #24]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800cc3e:	7242      	strb	r2, [r0, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	6852      	ldr	r2, [r2, #4]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800cc44:	0e11      	lsrs	r1, r2, #24
 800cc46:	7281      	strb	r1, [r0, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800cc48:	0c11      	lsrs	r1, r2, #16
 800cc4a:	72c1      	strb	r1, [r0, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800cc4c:	0a12      	lsrs	r2, r2, #8
 800cc4e:	7302      	strb	r2, [r0, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	689b      	ldr	r3, [r3, #8]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800cc54:	0e1a      	lsrs	r2, r3, #24
 800cc56:	7342      	strb	r2, [r0, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800cc58:	0c1a      	lsrs	r2, r3, #16
 800cc5a:	7382      	strb	r2, [r0, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800cc5c:	73c3      	strb	r3, [r0, #15]

  return (SHCI_Success);
}
 800cc5e:	2000      	movs	r0, #0
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	58004000 	.word	0x58004000

0800cc68 <Cmd_SetStatus>:

  return;
}

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800cc68:	b508      	push	{r3, lr}
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800cc6a:	b938      	cbnz	r0, 800cc7c <Cmd_SetStatus+0x14>
  {
    if(StatusNotCallBackFunction != 0)
 800cc6c:	4b08      	ldr	r3, [pc, #32]	; (800cc90 <Cmd_SetStatus+0x28>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	b103      	cbz	r3, 800cc74 <Cmd_SetStatus+0xc>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800cc72:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800cc74:	4b07      	ldr	r3, [pc, #28]	; (800cc94 <Cmd_SetStatus+0x2c>)
 800cc76:	2200      	movs	r2, #0
 800cc78:	701a      	strb	r2, [r3, #0]
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
}
 800cc7a:	bd08      	pop	{r3, pc}
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800cc7c:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <Cmd_SetStatus+0x2c>)
 800cc7e:	2201      	movs	r2, #1
 800cc80:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800cc82:	4b03      	ldr	r3, [pc, #12]	; (800cc90 <Cmd_SetStatus+0x28>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0f7      	beq.n	800cc7a <Cmd_SetStatus+0x12>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	4798      	blx	r3
  return;
 800cc8e:	e7f4      	b.n	800cc7a <Cmd_SetStatus+0x12>
 800cc90:	20004674 	.word	0x20004674
 800cc94:	20000174 	.word	0x20000174

0800cc98 <TlInit>:
{
 800cc98:	b530      	push	{r4, r5, lr}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	4605      	mov	r5, r0
  pCmdBuffer = p_cmdbuffer;
 800cc9e:	4c0b      	ldr	r4, [pc, #44]	; (800cccc <TlInit+0x34>)
 800cca0:	6060      	str	r0, [r4, #4]
  LST_init_head (&SHciAsynchEventQueue);
 800cca2:	f104 0008 	add.w	r0, r4, #8
 800cca6:	f000 f8b3 	bl	800ce10 <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ccaa:	2001      	movs	r0, #1
 800ccac:	f7ff ffdc 	bl	800cc68 <Cmd_SetStatus>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	7423      	strb	r3, [r4, #16]
  if (shciContext.io.Init)
 800ccb4:	4b06      	ldr	r3, [pc, #24]	; (800ccd0 <TlInit+0x38>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	b133      	cbz	r3, 800ccc8 <TlInit+0x30>
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ccba:	9503      	str	r5, [sp, #12]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800ccbc:	4a05      	ldr	r2, [pc, #20]	; (800ccd4 <TlInit+0x3c>)
 800ccbe:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ccc0:	4a05      	ldr	r2, [pc, #20]	; (800ccd8 <TlInit+0x40>)
 800ccc2:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 800ccc4:	a801      	add	r0, sp, #4
 800ccc6:	4798      	blx	r3
}
 800ccc8:	b005      	add	sp, #20
 800ccca:	bd30      	pop	{r4, r5, pc}
 800cccc:	20000174 	.word	0x20000174
 800ccd0:	20004678 	.word	0x20004678
 800ccd4:	0800ccf5 	.word	0x0800ccf5
 800ccd8:	0800ccdd 	.word	0x0800ccdd

0800ccdc <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ccdc:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800ccde:	4c04      	ldr	r4, [pc, #16]	; (800ccf0 <TlUserEvtReceived+0x14>)
 800cce0:	4601      	mov	r1, r0
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 f8af 	bl	800ce46 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800cce8:	4620      	mov	r0, r4
 800ccea:	f7f4 f9d3 	bl	8001094 <shci_notify_asynch_evt>

  return;
}
 800ccee:	bd10      	pop	{r4, pc}
 800ccf0:	2000017c 	.word	0x2000017c

0800ccf4 <TlCmdEvtReceived>:
{
 800ccf4:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800ccf6:	2000      	movs	r0, #0
 800ccf8:	f7f4 f9d6 	bl	80010a8 <shci_cmd_resp_release>
}
 800ccfc:	bd08      	pop	{r3, pc}
	...

0800cd00 <shci_init>:
{
 800cd00:	b510      	push	{r4, lr}
 800cd02:	460c      	mov	r4, r1
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800cd04:	684a      	ldr	r2, [r1, #4]
 800cd06:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <shci_init+0x1c>)
 800cd08:	601a      	str	r2, [r3, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800cd0a:	4b05      	ldr	r3, [pc, #20]	; (800cd20 <shci_init+0x20>)
 800cd0c:	61d8      	str	r0, [r3, #28]
  shci_register_io_bus (&shciContext.io);
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f000 f874 	bl	800cdfc <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800cd14:	6820      	ldr	r0, [r4, #0]
 800cd16:	f7ff ffbf 	bl	800cc98 <TlInit>
}
 800cd1a:	bd10      	pop	{r4, pc}
 800cd1c:	20004674 	.word	0x20004674
 800cd20:	20004678 	.word	0x20004678

0800cd24 <shci_user_evt_proc>:
{
 800cd24:	b500      	push	{lr}
 800cd26:	b085      	sub	sp, #20
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800cd28:	481b      	ldr	r0, [pc, #108]	; (800cd98 <shci_user_evt_proc+0x74>)
 800cd2a:	f000 f874 	bl	800ce16 <LST_is_empty>
 800cd2e:	b910      	cbnz	r0, 800cd36 <shci_user_evt_proc+0x12>
 800cd30:	4b1a      	ldr	r3, [pc, #104]	; (800cd9c <shci_user_evt_proc+0x78>)
 800cd32:	7c1b      	ldrb	r3, [r3, #16]
 800cd34:	b94b      	cbnz	r3, 800cd4a <shci_user_evt_proc+0x26>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800cd36:	4818      	ldr	r0, [pc, #96]	; (800cd98 <shci_user_evt_proc+0x74>)
 800cd38:	f000 f86d 	bl	800ce16 <LST_is_empty>
 800cd3c:	b910      	cbnz	r0, 800cd44 <shci_user_evt_proc+0x20>
 800cd3e:	4b17      	ldr	r3, [pc, #92]	; (800cd9c <shci_user_evt_proc+0x78>)
 800cd40:	7c1b      	ldrb	r3, [r3, #16]
 800cd42:	bb23      	cbnz	r3, 800cd8e <shci_user_evt_proc+0x6a>
}
 800cd44:	b005      	add	sp, #20
 800cd46:	f85d fb04 	ldr.w	pc, [sp], #4
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800cd4a:	a903      	add	r1, sp, #12
 800cd4c:	4812      	ldr	r0, [pc, #72]	; (800cd98 <shci_user_evt_proc+0x74>)
 800cd4e:	f000 f892 	bl	800ce76 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 800cd52:	4b13      	ldr	r3, [pc, #76]	; (800cda0 <shci_user_evt_proc+0x7c>)
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	b18b      	cbz	r3, 800cd7c <shci_user_evt_proc+0x58>
      UserEvtRxParam.pckt = phcievtbuffer;
 800cd58:	9a03      	ldr	r2, [sp, #12]
 800cd5a:	9202      	str	r2, [sp, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800cd5c:	a804      	add	r0, sp, #16
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f800 2d0c 	strb.w	r2, [r0, #-12]!
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800cd64:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800cd66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd6a:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <shci_user_evt_proc+0x78>)
 800cd6c:	741a      	strb	r2, [r3, #16]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800cd6e:	4b0b      	ldr	r3, [pc, #44]	; (800cd9c <shci_user_evt_proc+0x78>)
 800cd70:	7c1b      	ldrb	r3, [r3, #16]
 800cd72:	b13b      	cbz	r3, 800cd84 <shci_user_evt_proc+0x60>
      TL_MM_EvtDone( phcievtbuffer );
 800cd74:	9803      	ldr	r0, [sp, #12]
 800cd76:	f000 fa59 	bl	800d22c <TL_MM_EvtDone>
 800cd7a:	e7dc      	b.n	800cd36 <shci_user_evt_proc+0x12>
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800cd7c:	4b07      	ldr	r3, [pc, #28]	; (800cd9c <shci_user_evt_proc+0x78>)
 800cd7e:	2201      	movs	r2, #1
 800cd80:	741a      	strb	r2, [r3, #16]
 800cd82:	e7f4      	b.n	800cd6e <shci_user_evt_proc+0x4a>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800cd84:	9903      	ldr	r1, [sp, #12]
 800cd86:	4804      	ldr	r0, [pc, #16]	; (800cd98 <shci_user_evt_proc+0x74>)
 800cd88:	f000 f851 	bl	800ce2e <LST_insert_head>
 800cd8c:	e7d3      	b.n	800cd36 <shci_user_evt_proc+0x12>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800cd8e:	4802      	ldr	r0, [pc, #8]	; (800cd98 <shci_user_evt_proc+0x74>)
 800cd90:	f7f4 f980 	bl	8001094 <shci_notify_asynch_evt>
  return;
 800cd94:	e7d6      	b.n	800cd44 <shci_user_evt_proc+0x20>
 800cd96:	bf00      	nop
 800cd98:	2000017c 	.word	0x2000017c
 800cd9c:	20000174 	.word	0x20000174
 800cda0:	20004678 	.word	0x20004678

0800cda4 <shci_send>:
{
 800cda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda8:	4680      	mov	r8, r0
 800cdaa:	460d      	mov	r5, r1
 800cdac:	4617      	mov	r7, r2
 800cdae:	461e      	mov	r6, r3
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	f7ff ff59 	bl	800cc68 <Cmd_SetStatus>
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800cdb6:	4c0f      	ldr	r4, [pc, #60]	; (800cdf4 <shci_send+0x50>)
 800cdb8:	6860      	ldr	r0, [r4, #4]
 800cdba:	f8a0 8009 	strh.w	r8, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800cdbe:	72c5      	strb	r5, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800cdc0:	462a      	mov	r2, r5
 800cdc2:	4639      	mov	r1, r7
 800cdc4:	300c      	adds	r0, #12
 800cdc6:	f001 fae7 	bl	800e398 <memcpy>
  shciContext.io.Send(0,0);
 800cdca:	4b0b      	ldr	r3, [pc, #44]	; (800cdf8 <shci_send+0x54>)
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	2100      	movs	r1, #0
 800cdd0:	4608      	mov	r0, r1
 800cdd2:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800cdd4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800cdd8:	f7f4 f96e 	bl	80010b8 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800cddc:	6861      	ldr	r1, [r4, #4]
 800cdde:	788a      	ldrb	r2, [r1, #2]
 800cde0:	3203      	adds	r2, #3
 800cde2:	f106 0008 	add.w	r0, r6, #8
 800cde6:	f001 fad7 	bl	800e398 <memcpy>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800cdea:	2001      	movs	r0, #1
 800cdec:	f7ff ff3c 	bl	800cc68 <Cmd_SetStatus>
}
 800cdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf4:	20000174 	.word	0x20000174
 800cdf8:	20004678 	.word	0x20004678

0800cdfc <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800cdfc:	4b02      	ldr	r3, [pc, #8]	; (800ce08 <shci_register_io_bus+0xc>)
 800cdfe:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ce00:	4b02      	ldr	r3, [pc, #8]	; (800ce0c <shci_register_io_bus+0x10>)
 800ce02:	6103      	str	r3, [r0, #16]

  return;
}
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop
 800ce08:	0800d099 	.word	0x0800d099
 800ce0c:	0800d0d5 	.word	0x0800d0d5

0800ce10 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800ce10:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 800ce12:	6040      	str	r0, [r0, #4]
}
 800ce14:	4770      	bx	lr

0800ce16 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce16:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ce1a:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ce1c:	6802      	ldr	r2, [r0, #0]
 800ce1e:	4282      	cmp	r2, r0
 800ce20:	d003      	beq.n	800ce2a <LST_is_empty+0x14>
  {
    return_value = TRUE;
  }
  else
  {
    return_value = FALSE;
 800ce22:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce24:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 800ce28:	4770      	bx	lr
    return_value = TRUE;
 800ce2a:	2001      	movs	r0, #1
 800ce2c:	e7fa      	b.n	800ce24 <LST_is_empty+0xe>

0800ce2e <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce2e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ce32:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ce34:	6802      	ldr	r2, [r0, #0]
 800ce36:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800ce38:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800ce3a:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800ce3c:	680a      	ldr	r2, [r1, #0]
 800ce3e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce40:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ce44:	4770      	bx	lr

0800ce46 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce46:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ce4a:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ce4c:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 800ce4e:	6842      	ldr	r2, [r0, #4]
 800ce50:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800ce52:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800ce54:	684a      	ldr	r2, [r1, #4]
 800ce56:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce58:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ce5c:	4770      	bx	lr

0800ce5e <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce5e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ce62:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ce64:	6842      	ldr	r2, [r0, #4]
 800ce66:	6801      	ldr	r1, [r0, #0]
 800ce68:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 800ce6a:	6802      	ldr	r2, [r0, #0]
 800ce6c:	6841      	ldr	r1, [r0, #4]
 800ce6e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce70:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ce74:	4770      	bx	lr

0800ce76 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ce76:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce78:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ce7c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ce7e:	6803      	ldr	r3, [r0, #0]
 800ce80:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 800ce82:	6800      	ldr	r0, [r0, #0]
 800ce84:	f7ff ffeb 	bl	800ce5e <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce88:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ce8c:	bd10      	pop	{r4, pc}

0800ce8e <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800ce8e:	b510      	push	{r4, lr}
 800ce90:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800ce92:	f000 fd51 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ce96:	f000 fd1d 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	2242      	movs	r2, #66	; 0x42
 800ce9e:	7002      	strb	r2, [r0, #0]
 800cea0:	7043      	strb	r3, [r0, #1]
 800cea2:	7083      	strb	r3, [r0, #2]
 800cea4:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800cea6:	2201      	movs	r2, #1
 800cea8:	7102      	strb	r2, [r0, #4]
 800ceaa:	7143      	strb	r3, [r0, #5]
 800ceac:	7183      	strb	r3, [r0, #6]
 800ceae:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800ceb0:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800ceb2:	f000 fd21 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ceb6:	f000 fd13 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800ceba:	6880      	ldr	r0, [r0, #8]
}
 800cebc:	b2c0      	uxtb	r0, r0
 800cebe:	bd10      	pop	{r4, pc}

0800cec0 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 800cec0:	b510      	push	{r4, lr}
 800cec2:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800cec4:	f000 fd38 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cec8:	f000 fd04 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 800cecc:	2300      	movs	r3, #0
 800cece:	224b      	movs	r2, #75	; 0x4b
 800ced0:	7002      	strb	r2, [r0, #0]
 800ced2:	7043      	strb	r3, [r0, #1]
 800ced4:	7083      	strb	r3, [r0, #2]
 800ced6:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800ced8:	2201      	movs	r2, #1
 800ceda:	7102      	strb	r2, [r0, #4]
 800cedc:	7143      	strb	r3, [r0, #5]
 800cede:	7183      	strb	r3, [r0, #6]
 800cee0:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 800cee2:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800cee4:	f000 fd08 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cee8:	f000 fcfa 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800ceec:	6880      	ldr	r0, [r0, #8]
}
 800ceee:	b2c0      	uxtb	r0, r0
 800cef0:	bd10      	pop	{r4, pc}

0800cef2 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 800cef2:	b510      	push	{r4, lr}
 800cef4:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800cef6:	f000 fd1f 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cefa:	f000 fceb 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 800cefe:	2300      	movs	r3, #0
 800cf00:	2250      	movs	r2, #80	; 0x50
 800cf02:	7002      	strb	r2, [r0, #0]
 800cf04:	7043      	strb	r3, [r0, #1]
 800cf06:	7083      	strb	r3, [r0, #2]
 800cf08:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	7102      	strb	r2, [r0, #4]
 800cf0e:	7143      	strb	r3, [r0, #5]
 800cf10:	7183      	strb	r3, [r0, #6]
 800cf12:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 800cf14:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800cf16:	f000 fcef 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cf1a:	f000 fce1 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800cf1e:	6880      	ldr	r0, [r0, #8]
}
 800cf20:	b2c0      	uxtb	r0, r0
 800cf22:	bd10      	pop	{r4, pc}

0800cf24 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800cf24:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800cf26:	f000 fd07 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf2a:	f000 fcd3 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	2251      	movs	r2, #81	; 0x51
 800cf32:	7002      	strb	r2, [r0, #0]
 800cf34:	7043      	strb	r3, [r0, #1]
 800cf36:	7083      	strb	r3, [r0, #2]
 800cf38:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800cf3a:	7103      	strb	r3, [r0, #4]
 800cf3c:	7143      	strb	r3, [r0, #5]
 800cf3e:	7183      	strb	r3, [r0, #6]
 800cf40:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800cf42:	f000 fcd9 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cf46:	f000 fccb 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otIp6Address *)p_ot_req->Data[0];
}
 800cf4a:	6880      	ldr	r0, [r0, #8]
 800cf4c:	bd08      	pop	{r3, pc}

0800cf4e <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800cf4e:	b510      	push	{r4, lr}
 800cf50:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800cf52:	f000 fcf1 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf56:	f000 fcbd 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	2256      	movs	r2, #86	; 0x56
 800cf5e:	7002      	strb	r2, [r0, #0]
 800cf60:	7043      	strb	r3, [r0, #1]
 800cf62:	7083      	strb	r3, [r0, #2]
 800cf64:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800cf66:	2201      	movs	r2, #1
 800cf68:	7102      	strb	r2, [r0, #4]
 800cf6a:	7143      	strb	r3, [r0, #5]
 800cf6c:	7183      	strb	r3, [r0, #6]
 800cf6e:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800cf70:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800cf72:	f000 fcc1 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cf76:	f000 fcb3 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800cf7a:	6880      	ldr	r0, [r0, #8]
}
 800cf7c:	b2c0      	uxtb	r0, r0
 800cf7e:	bd10      	pop	{r4, pc}

0800cf80 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800cf80:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800cf82:	f000 fcd9 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf86:	f000 fca5 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	225e      	movs	r2, #94	; 0x5e
 800cf8e:	7002      	strb	r2, [r0, #0]
 800cf90:	7043      	strb	r3, [r0, #1]
 800cf92:	7083      	strb	r3, [r0, #2]
 800cf94:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800cf96:	7103      	strb	r3, [r0, #4]
 800cf98:	7143      	strb	r3, [r0, #5]
 800cf9a:	7183      	strb	r3, [r0, #6]
 800cf9c:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800cf9e:	f000 fcab 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cfa2:	f000 fc9d 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otDeviceRole)p_ot_req->Data[0];
 800cfa6:	6880      	ldr	r0, [r0, #8]
}
 800cfa8:	b2c0      	uxtb	r0, r0
 800cfaa:	bd08      	pop	{r3, pc}

0800cfac <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800cfac:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800cfae:	f000 fcc3 	bl	800d938 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cfb2:	f000 fc8f 	bl	800d8d4 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	2263      	movs	r2, #99	; 0x63
 800cfba:	7002      	strb	r2, [r0, #0]
 800cfbc:	7043      	strb	r3, [r0, #1]
 800cfbe:	7083      	strb	r3, [r0, #2]
 800cfc0:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800cfc2:	7103      	strb	r3, [r0, #4]
 800cfc4:	7143      	strb	r3, [r0, #5]
 800cfc6:	7183      	strb	r3, [r0, #6]
 800cfc8:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800cfca:	f000 fc95 	bl	800d8f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cfce:	f000 fc87 	bl	800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (uint16_t)p_ot_req->Data[0];
 800cfd2:	6880      	ldr	r0, [r0, #8]
}
 800cfd4:	b280      	uxth	r0, r0
 800cfd6:	bd08      	pop	{r3, pc}

0800cfd8 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 800cfd8:	b500      	push	{lr}
 800cfda:	b083      	sub	sp, #12
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800cfdc:	e009      	b.n	800cff2 <SendFreeBuf+0x1a>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800cfde:	a901      	add	r1, sp, #4
 800cfe0:	4808      	ldr	r0, [pc, #32]	; (800d004 <SendFreeBuf+0x2c>)
 800cfe2:	f7ff ff48 	bl	800ce76 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800cfe6:	4b08      	ldr	r3, [pc, #32]	; (800d008 <SendFreeBuf+0x30>)
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	9901      	ldr	r1, [sp, #4]
 800cfec:	6918      	ldr	r0, [r3, #16]
 800cfee:	f7ff ff2a 	bl	800ce46 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800cff2:	4804      	ldr	r0, [pc, #16]	; (800d004 <SendFreeBuf+0x2c>)
 800cff4:	f7ff ff0f 	bl	800ce16 <LST_is_empty>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d0f0      	beq.n	800cfde <SendFreeBuf+0x6>
  }

  return;
}
 800cffc:	b003      	add	sp, #12
 800cffe:	f85d fb04 	ldr.w	pc, [sp], #4
 800d002:	bf00      	nop
 800d004:	200046a0 	.word	0x200046a0
 800d008:	20030000 	.word	0x20030000

0800d00c <TL_Enable>:
{
 800d00c:	b508      	push	{r3, lr}
  HW_IPCC_Enable();
 800d00e:	f000 fd37 	bl	800da80 <HW_IPCC_Enable>
}
 800d012:	bd08      	pop	{r3, pc}

0800d014 <TL_Init>:
{
 800d014:	b508      	push	{r3, lr}
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800d016:	4a0e      	ldr	r2, [pc, #56]	; (800d050 <TL_Init+0x3c>)
 800d018:	4b0e      	ldr	r3, [pc, #56]	; (800d054 <TL_Init+0x40>)
 800d01a:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800d01c:	f103 0120 	add.w	r1, r3, #32
 800d020:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800d022:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d026:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800d028:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d02c:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800d02e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800d032:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800d034:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800d038:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800d03a:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800d03e:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800d040:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800d044:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800d046:	3378      	adds	r3, #120	; 0x78
 800d048:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 800d04a:	f000 fd31 	bl	800dab0 <HW_IPCC_Init>
}
 800d04e:	bd08      	pop	{r3, pc}
 800d050:	20030000 	.word	0x20030000
 800d054:	20030024 	.word	0x20030024

0800d058 <HW_IPCC_BLE_RxEvtNot>:
{
 800d058:	b500      	push	{lr}
 800d05a:	b083      	sub	sp, #12
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d05c:	e007      	b.n	800d06e <HW_IPCC_BLE_RxEvtNot+0x16>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800d05e:	a901      	add	r1, sp, #4
 800d060:	4807      	ldr	r0, [pc, #28]	; (800d080 <HW_IPCC_BLE_RxEvtNot+0x28>)
 800d062:	f7ff ff08 	bl	800ce76 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 800d066:	4b07      	ldr	r3, [pc, #28]	; (800d084 <HW_IPCC_BLE_RxEvtNot+0x2c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	9801      	ldr	r0, [sp, #4]
 800d06c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d06e:	4804      	ldr	r0, [pc, #16]	; (800d080 <HW_IPCC_BLE_RxEvtNot+0x28>)
 800d070:	f7ff fed1 	bl	800ce16 <LST_is_empty>
 800d074:	2800      	cmp	r0, #0
 800d076:	d0f2      	beq.n	800d05e <HW_IPCC_BLE_RxEvtNot+0x6>
}
 800d078:	b003      	add	sp, #12
 800d07a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d07e:	bf00      	nop
 800d080:	20030818 	.word	0x20030818
 800d084:	2000469c 	.word	0x2000469c

0800d088 <HW_IPCC_BLE_AclDataAckNot>:
{
 800d088:	b508      	push	{r3, lr}
  BLE_IoBusAclDataTxAck( );
 800d08a:	4b02      	ldr	r3, [pc, #8]	; (800d094 <HW_IPCC_BLE_AclDataAckNot+0xc>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4798      	blx	r3
}
 800d090:	bd08      	pop	{r3, pc}
 800d092:	bf00      	nop
 800d094:	20004698 	.word	0x20004698

0800d098 <TL_SYS_Init>:
{
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 800d09c:	4d09      	ldr	r5, [pc, #36]	; (800d0c4 <TL_SYS_Init+0x2c>)
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f7ff feb6 	bl	800ce10 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800d0a4:	4b08      	ldr	r3, [pc, #32]	; (800d0c8 <TL_SYS_Init+0x30>)
 800d0a6:	68db      	ldr	r3, [r3, #12]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d0a8:	68a2      	ldr	r2, [r4, #8]
 800d0aa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800d0ac:	605d      	str	r5, [r3, #4]
  HW_IPCC_SYS_Init();
 800d0ae:	f000 fd37 	bl	800db20 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800d0b2:	6822      	ldr	r2, [r4, #0]
 800d0b4:	4b05      	ldr	r3, [pc, #20]	; (800d0cc <TL_SYS_Init+0x34>)
 800d0b6:	601a      	str	r2, [r3, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800d0b8:	6862      	ldr	r2, [r4, #4]
 800d0ba:	4b05      	ldr	r3, [pc, #20]	; (800d0d0 <TL_SYS_Init+0x38>)
 800d0bc:	601a      	str	r2, [r3, #0]
}
 800d0be:	2000      	movs	r0, #0
 800d0c0:	bd38      	pop	{r3, r4, r5, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20030830 	.word	0x20030830
 800d0c8:	20030000 	.word	0x20030000
 800d0cc:	200046a8 	.word	0x200046a8
 800d0d0:	200046ac 	.word	0x200046ac

0800d0d4 <TL_SYS_SendCmd>:
{
 800d0d4:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800d0d6:	4b04      	ldr	r3, [pc, #16]	; (800d0e8 <TL_SYS_SendCmd+0x14>)
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2210      	movs	r2, #16
 800d0de:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 800d0e0:	f000 fd26 	bl	800db30 <HW_IPCC_SYS_SendCmd>
}
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	bd08      	pop	{r3, pc}
 800d0e8:	20030000 	.word	0x20030000

0800d0ec <HW_IPCC_SYS_CmdEvtNot>:
{
 800d0ec:	b508      	push	{r3, lr}
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d0ee:	4b03      	ldr	r3, [pc, #12]	; (800d0fc <HW_IPCC_SYS_CmdEvtNot+0x10>)
 800d0f0:	68da      	ldr	r2, [r3, #12]
 800d0f2:	4b03      	ldr	r3, [pc, #12]	; (800d100 <HW_IPCC_SYS_CmdEvtNot+0x14>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	6810      	ldr	r0, [r2, #0]
 800d0f8:	4798      	blx	r3
}
 800d0fa:	bd08      	pop	{r3, pc}
 800d0fc:	20030000 	.word	0x20030000
 800d100:	200046a8 	.word	0x200046a8

0800d104 <HW_IPCC_SYS_EvtNot>:
{
 800d104:	b500      	push	{lr}
 800d106:	b083      	sub	sp, #12
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d108:	e007      	b.n	800d11a <HW_IPCC_SYS_EvtNot+0x16>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800d10a:	a901      	add	r1, sp, #4
 800d10c:	4807      	ldr	r0, [pc, #28]	; (800d12c <HW_IPCC_SYS_EvtNot+0x28>)
 800d10e:	f7ff feb2 	bl	800ce76 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800d112:	4b07      	ldr	r3, [pc, #28]	; (800d130 <HW_IPCC_SYS_EvtNot+0x2c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	9801      	ldr	r0, [sp, #4]
 800d118:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d11a:	4804      	ldr	r0, [pc, #16]	; (800d12c <HW_IPCC_SYS_EvtNot+0x28>)
 800d11c:	f7ff fe7b 	bl	800ce16 <LST_is_empty>
 800d120:	2800      	cmp	r0, #0
 800d122:	d0f2      	beq.n	800d10a <HW_IPCC_SYS_EvtNot+0x6>
}
 800d124:	b003      	add	sp, #12
 800d126:	f85d fb04 	ldr.w	pc, [sp], #4
 800d12a:	bf00      	nop
 800d12c:	20030830 	.word	0x20030830
 800d130:	200046ac 	.word	0x200046ac

0800d134 <TL_THREAD_Init>:
{
 800d134:	b508      	push	{r3, lr}
  p_thread_table = TL_RefTable.p_thread_table;
 800d136:	4b05      	ldr	r3, [pc, #20]	; (800d14c <TL_THREAD_Init+0x18>)
 800d138:	689b      	ldr	r3, [r3, #8]
  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800d13a:	6842      	ldr	r2, [r0, #4]
 800d13c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800d13e:	6802      	ldr	r2, [r0, #0]
 800d140:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800d142:	6882      	ldr	r2, [r0, #8]
 800d144:	601a      	str	r2, [r3, #0]
  HW_IPCC_THREAD_Init();
 800d146:	f000 fd15 	bl	800db74 <HW_IPCC_THREAD_Init>
}
 800d14a:	bd08      	pop	{r3, pc}
 800d14c:	20030000 	.word	0x20030000

0800d150 <TL_OT_SendCmd>:
{
 800d150:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800d152:	4b04      	ldr	r3, [pc, #16]	; (800d164 <TL_OT_SendCmd+0x14>)
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	2208      	movs	r2, #8
 800d15a:	721a      	strb	r2, [r3, #8]
  HW_IPCC_OT_SendCmd();
 800d15c:	f000 fd16 	bl	800db8c <HW_IPCC_OT_SendCmd>
}
 800d160:	bd08      	pop	{r3, pc}
 800d162:	bf00      	nop
 800d164:	20030000 	.word	0x20030000

0800d168 <TL_CLI_SendCmd>:
{
 800d168:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800d16a:	4b04      	ldr	r3, [pc, #16]	; (800d17c <TL_CLI_SendCmd+0x14>)
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	220a      	movs	r2, #10
 800d172:	721a      	strb	r2, [r3, #8]
  HW_IPCC_CLI_SendCmd();
 800d174:	f000 fd16 	bl	800dba4 <HW_IPCC_CLI_SendCmd>
}
 800d178:	bd08      	pop	{r3, pc}
 800d17a:	bf00      	nop
 800d17c:	20030000 	.word	0x20030000

0800d180 <TL_THREAD_SendAck>:
{
 800d180:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800d182:	4b04      	ldr	r3, [pc, #16]	; (800d194 <TL_THREAD_SendAck+0x14>)
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	220d      	movs	r2, #13
 800d18a:	721a      	strb	r2, [r3, #8]
  HW_IPCC_THREAD_SendAck();
 800d18c:	f000 fd12 	bl	800dbb4 <HW_IPCC_THREAD_SendAck>
}
 800d190:	bd08      	pop	{r3, pc}
 800d192:	bf00      	nop
 800d194:	20030000 	.word	0x20030000

0800d198 <TL_THREAD_CliSendAck>:
{
 800d198:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800d19a:	4b04      	ldr	r3, [pc, #16]	; (800d1ac <TL_THREAD_CliSendAck+0x14>)
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	220d      	movs	r2, #13
 800d1a2:	721a      	strb	r2, [r3, #8]
  HW_IPCC_THREAD_CliSendAck();
 800d1a4:	f000 fd10 	bl	800dbc8 <HW_IPCC_THREAD_CliSendAck>
}
 800d1a8:	bd08      	pop	{r3, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20030000 	.word	0x20030000

0800d1b0 <HW_IPCC_OT_CmdEvtNot>:
{
 800d1b0:	b508      	push	{r3, lr}
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800d1b2:	4b03      	ldr	r3, [pc, #12]	; (800d1c0 <HW_IPCC_OT_CmdEvtNot+0x10>)
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	6898      	ldr	r0, [r3, #8]
 800d1b8:	f000 fbb2 	bl	800d920 <TL_OT_CmdEvtReceived>
}
 800d1bc:	bd08      	pop	{r3, pc}
 800d1be:	bf00      	nop
 800d1c0:	20030000 	.word	0x20030000

0800d1c4 <HW_IPCC_THREAD_EvtNot>:
{
 800d1c4:	b508      	push	{r3, lr}
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800d1c6:	4b03      	ldr	r3, [pc, #12]	; (800d1d4 <HW_IPCC_THREAD_EvtNot+0x10>)
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	6818      	ldr	r0, [r3, #0]
 800d1cc:	f000 fbac 	bl	800d928 <TL_THREAD_NotReceived>
}
 800d1d0:	bd08      	pop	{r3, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20030000 	.word	0x20030000

0800d1d8 <HW_IPCC_THREAD_CliEvtNot>:
{
 800d1d8:	b508      	push	{r3, lr}
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800d1da:	4b03      	ldr	r3, [pc, #12]	; (800d1e8 <HW_IPCC_THREAD_CliEvtNot+0x10>)
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	6858      	ldr	r0, [r3, #4]
 800d1e0:	f000 fbfc 	bl	800d9dc <TL_THREAD_CliNotReceived>
}
 800d1e4:	bd08      	pop	{r3, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20030000 	.word	0x20030000

0800d1ec <TL_MM_Init>:
{
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 800d1f0:	4d0b      	ldr	r5, [pc, #44]	; (800d220 <TL_MM_Init+0x34>)
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f7ff fe0c 	bl	800ce10 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800d1f8:	480a      	ldr	r0, [pc, #40]	; (800d224 <TL_MM_Init+0x38>)
 800d1fa:	f7ff fe09 	bl	800ce10 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800d1fe:	4b0a      	ldr	r3, [pc, #40]	; (800d228 <TL_MM_Init+0x3c>)
 800d200:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800d202:	68a2      	ldr	r2, [r4, #8]
 800d204:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800d206:	68e2      	ldr	r2, [r4, #12]
 800d208:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800d20a:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800d20c:	6822      	ldr	r2, [r4, #0]
 800d20e:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800d210:	6862      	ldr	r2, [r4, #4]
 800d212:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800d214:	6922      	ldr	r2, [r4, #16]
 800d216:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800d218:	6962      	ldr	r2, [r4, #20]
 800d21a:	619a      	str	r2, [r3, #24]
}
 800d21c:	bd38      	pop	{r3, r4, r5, pc}
 800d21e:	bf00      	nop
 800d220:	200300a8 	.word	0x200300a8
 800d224:	200046a0 	.word	0x200046a0
 800d228:	20030000 	.word	0x20030000

0800d22c <TL_MM_EvtDone>:
{
 800d22c:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800d22e:	4601      	mov	r1, r0
 800d230:	4803      	ldr	r0, [pc, #12]	; (800d240 <TL_MM_EvtDone+0x14>)
 800d232:	f7ff fe08 	bl	800ce46 <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800d236:	4803      	ldr	r0, [pc, #12]	; (800d244 <TL_MM_EvtDone+0x18>)
 800d238:	f000 fd2e 	bl	800dc98 <HW_IPCC_MM_SendFreeBuf>
}
 800d23c:	bd08      	pop	{r3, pc}
 800d23e:	bf00      	nop
 800d240:	200046a0 	.word	0x200046a0
 800d244:	0800cfd9 	.word	0x0800cfd9

0800d248 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800d248:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 800d24a:	4c05      	ldr	r4, [pc, #20]	; (800d260 <TL_TRACES_Init+0x18>)
 800d24c:	4620      	mov	r0, r4
 800d24e:	f7ff fddf 	bl	800ce10 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800d252:	4b04      	ldr	r3, [pc, #16]	; (800d264 <TL_TRACES_Init+0x1c>)
 800d254:	695b      	ldr	r3, [r3, #20]
 800d256:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();
 800d258:	f000 fd36 	bl	800dcc8 <HW_IPCC_TRACES_Init>

  return;
}
 800d25c:	bd10      	pop	{r4, pc}
 800d25e:	bf00      	nop
 800d260:	200300b0 	.word	0x200300b0
 800d264:	20030000 	.word	0x20030000

0800d268 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800d268:	b500      	push	{lr}
 800d26a:	b083      	sub	sp, #12
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800d26c:	e006      	b.n	800d27c <HW_IPCC_TRACES_EvtNot+0x14>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800d26e:	a901      	add	r1, sp, #4
 800d270:	4806      	ldr	r0, [pc, #24]	; (800d28c <HW_IPCC_TRACES_EvtNot+0x24>)
 800d272:	f7ff fe00 	bl	800ce76 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800d276:	9801      	ldr	r0, [sp, #4]
 800d278:	f7f3 ff28 	bl	80010cc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800d27c:	4803      	ldr	r0, [pc, #12]	; (800d28c <HW_IPCC_TRACES_EvtNot+0x24>)
 800d27e:	f7ff fdca 	bl	800ce16 <LST_is_empty>
 800d282:	2800      	cmp	r0, #0
 800d284:	d0f3      	beq.n	800d26e <HW_IPCC_TRACES_EvtNot+0x6>
  }

  return;
}
 800d286:	b003      	add	sp, #12
 800d288:	f85d fb04 	ldr.w	pc, [sp], #4
 800d28c:	200300b0 	.word	0x200300b0

0800d290 <APP_THREAD_DummyReqHandler>:
static void APP_THREAD_DummyReqHandler(void            * p_context,
                                   otCoapHeader        * pHeader,
                                   otMessage           * pMessage,
                                   const otMessageInfo * pMessageInfo)
{
    tempMessageInfo = pMessageInfo;
 800d290:	4902      	ldr	r1, [pc, #8]	; (800d29c <APP_THREAD_DummyReqHandler+0xc>)
 800d292:	600b      	str	r3, [r1, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800d294:	4b02      	ldr	r3, [pc, #8]	; (800d2a0 <APP_THREAD_DummyReqHandler+0x10>)
 800d296:	601a      	str	r2, [r3, #0]
}
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	200058cc 	.word	0x200058cc
 800d2a0:	20005910 	.word	0x20005910

0800d2a4 <Wait_Getting_Ack_From_M0>:
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
  while (FlagReceiveAckFromM0 == 0)
 800d2a4:	4b03      	ldr	r3, [pc, #12]	; (800d2b4 <Wait_Getting_Ack_From_M0+0x10>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d0fb      	beq.n	800d2a4 <Wait_Getting_Ack_From_M0>
  {
  }
  FlagReceiveAckFromM0 = 0;
 800d2ac:	4b01      	ldr	r3, [pc, #4]	; (800d2b4 <Wait_Getting_Ack_From_M0+0x10>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	601a      	str	r2, [r3, #0]
}
 800d2b2:	4770      	bx	lr
 800d2b4:	200047b8 	.word	0x200047b8

0800d2b8 <Receive_Ack_From_M0>:
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
  FlagReceiveAckFromM0 = 1;
 800d2b8:	4b01      	ldr	r3, [pc, #4]	; (800d2c0 <Receive_Ack_From_M0+0x8>)
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	601a      	str	r2, [r3, #0]
}
 800d2be:	4770      	bx	lr
 800d2c0:	200047b8 	.word	0x200047b8

0800d2c4 <APP_THREAD_CheckWirelessFirmwareInfo>:
{
 800d2c4:	b500      	push	{lr}
 800d2c6:	b087      	sub	sp, #28
  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800d2c8:	a802      	add	r0, sp, #8
 800d2ca:	f7ff fc97 	bl	800cbfc <SHCI_GetWirelessFwInfo>
 800d2ce:	b110      	cbz	r0, 800d2d6 <APP_THREAD_CheckWirelessFirmwareInfo+0x12>
}
 800d2d0:	b007      	add	sp, #28
 800d2d2:	f85d fb04 	ldr.w	pc, [sp], #4
    APP_DBG("**********************************************************");
 800d2d6:	4a1b      	ldr	r2, [pc, #108]	; (800d344 <APP_THREAD_CheckWirelessFirmwareInfo+0x80>)
 800d2d8:	2101      	movs	r1, #1
 800d2da:	f7f6 fabf 	bl	800385c <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800d2de:	4a1a      	ldr	r2, [pc, #104]	; (800d348 <APP_THREAD_CheckWirelessFirmwareInfo+0x84>)
 800d2e0:	2101      	movs	r1, #1
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	f7f6 faba 	bl	800385c <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800d2e8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d2ec:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800d2f0:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800d2f4:	9101      	str	r1, [sp, #4]
 800d2f6:	9200      	str	r2, [sp, #0]
 800d2f8:	4a14      	ldr	r2, [pc, #80]	; (800d34c <APP_THREAD_CheckWirelessFirmwareInfo+0x88>)
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	f7f6 faad 	bl	800385c <logApplication>
    switch(p_wireless_info->StackType)
 800d302:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800d306:	2b11      	cmp	r3, #17
 800d308:	d00f      	beq.n	800d32a <APP_THREAD_CheckWirelessFirmwareInfo+0x66>
 800d30a:	2b50      	cmp	r3, #80	; 0x50
 800d30c:	d013      	beq.n	800d336 <APP_THREAD_CheckWirelessFirmwareInfo+0x72>
 800d30e:	2b10      	cmp	r3, #16
 800d310:	d005      	beq.n	800d31e <APP_THREAD_CheckWirelessFirmwareInfo+0x5a>
    APP_DBG("**********************************************************");
 800d312:	4a0c      	ldr	r2, [pc, #48]	; (800d344 <APP_THREAD_CheckWirelessFirmwareInfo+0x80>)
 800d314:	2101      	movs	r1, #1
 800d316:	2000      	movs	r0, #0
 800d318:	f7f6 faa0 	bl	800385c <logApplication>
}
 800d31c:	e7d8      	b.n	800d2d0 <APP_THREAD_CheckWirelessFirmwareInfo+0xc>
      APP_DBG("FW Type : Thread FTD");
 800d31e:	4a0c      	ldr	r2, [pc, #48]	; (800d350 <APP_THREAD_CheckWirelessFirmwareInfo+0x8c>)
 800d320:	2101      	movs	r1, #1
 800d322:	2000      	movs	r0, #0
 800d324:	f7f6 fa9a 	bl	800385c <logApplication>
      break;
 800d328:	e7f3      	b.n	800d312 <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
      APP_DBG("FW Type : Thread MTD");
 800d32a:	4a0a      	ldr	r2, [pc, #40]	; (800d354 <APP_THREAD_CheckWirelessFirmwareInfo+0x90>)
 800d32c:	2101      	movs	r1, #1
 800d32e:	2000      	movs	r0, #0
 800d330:	f7f6 fa94 	bl	800385c <logApplication>
      break;
 800d334:	e7ed      	b.n	800d312 <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 800d336:	4a08      	ldr	r2, [pc, #32]	; (800d358 <APP_THREAD_CheckWirelessFirmwareInfo+0x94>)
 800d338:	2101      	movs	r1, #1
 800d33a:	2000      	movs	r0, #0
 800d33c:	f7f6 fa8e 	bl	800385c <logApplication>
      break;
 800d340:	e7e7      	b.n	800d312 <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
 800d342:	bf00      	nop
 800d344:	0800f7d0 	.word	0x0800f7d0
 800d348:	0800f80c 	.word	0x0800f80c
 800d34c:	0800f828 	.word	0x0800f828
 800d350:	0800f840 	.word	0x0800f840
 800d354:	0800f858 	.word	0x0800f858
 800d358:	0800f870 	.word	0x0800f870

0800d35c <APP_THREAD_DeviceConfig>:
{
 800d35c:	b508      	push	{r3, lr}
  error = otInstanceErasePersistentInfo(NULL);
 800d35e:	2000      	movs	r0, #0
 800d360:	f7ff f9da 	bl	800c718 <otInstanceErasePersistentInfo>
  otInstanceFinalize(NULL);
 800d364:	2000      	movs	r0, #0
 800d366:	f7ff f9a2 	bl	800c6ae <otInstanceFinalize>
  otInstanceInitSingle();
 800d36a:	f7ff f98a 	bl	800c682 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800d36e:	2200      	movs	r2, #0
 800d370:	491f      	ldr	r1, [pc, #124]	; (800d3f0 <APP_THREAD_DeviceConfig+0x94>)
 800d372:	4610      	mov	r0, r2
 800d374:	f7ff f9b0 	bl	800c6d8 <otSetStateChangedCallback>
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 800d378:	2117      	movs	r1, #23
 800d37a:	2000      	movs	r0, #0
 800d37c:	f7ff fa44 	bl	800c808 <otLinkSetChannel>
  error = otLinkSetPanId(NULL, C_PANID);
 800d380:	f241 2134 	movw	r1, #4660	; 0x1234
 800d384:	2000      	movs	r0, #0
 800d386:	f7ff fa58 	bl	800c83a <otLinkSetPanId>
  error = otIp6SetEnabled(NULL, true);
 800d38a:	2101      	movs	r1, #1
 800d38c:	2000      	movs	r0, #0
 800d38e:	f7ff f9da 	bl	800c746 <otIp6SetEnabled>
  error = otThreadSetEnabled(NULL, true);
 800d392:	2101      	movs	r1, #1
 800d394:	2000      	movs	r0, #0
 800d396:	f7ff fd7a 	bl	800ce8e <otThreadSetEnabled>
  error = otThreadSetEnabled(NULL, false);
 800d39a:	2100      	movs	r1, #0
 800d39c:	4608      	mov	r0, r1
 800d39e:	f7ff fd76 	bl	800ce8e <otThreadSetEnabled>
    error = otThreadSetMasterKey(NULL, &masterKey);
 800d3a2:	4914      	ldr	r1, [pc, #80]	; (800d3f4 <APP_THREAD_DeviceConfig+0x98>)
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	f7ff fda4 	bl	800cef2 <otThreadSetMasterKey>
    error = otThreadSetNetworkName(NULL, networkName);
 800d3aa:	4913      	ldr	r1, [pc, #76]	; (800d3f8 <APP_THREAD_DeviceConfig+0x9c>)
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	f7ff fdce 	bl	800cf4e <otThreadSetNetworkName>
    error = otThreadSetExtendedPanId(NULL , &extendedPanId);
 800d3b2:	4912      	ldr	r1, [pc, #72]	; (800d3fc <APP_THREAD_DeviceConfig+0xa0>)
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	f7ff fd83 	bl	800cec0 <otThreadSetExtendedPanId>
    error = otThreadSetEnabled(NULL, true);
 800d3ba:	2101      	movs	r1, #1
 800d3bc:	2000      	movs	r0, #0
 800d3be:	f7ff fd66 	bl	800ce8e <otThreadSetEnabled>
    error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 800d3c2:	f241 6133 	movw	r1, #5683	; 0x1633
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	f7ff f90b 	bl	800c5e2 <otCoapStart>
    error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 800d3cc:	490c      	ldr	r1, [pc, #48]	; (800d400 <APP_THREAD_DeviceConfig+0xa4>)
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	f7ff f921 	bl	800c616 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 800d3d4:	490b      	ldr	r1, [pc, #44]	; (800d404 <APP_THREAD_DeviceConfig+0xa8>)
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	f7ff f91d 	bl	800c616 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 800d3dc:	490a      	ldr	r1, [pc, #40]	; (800d408 <APP_THREAD_DeviceConfig+0xac>)
 800d3de:	2000      	movs	r0, #0
 800d3e0:	f7ff f919 	bl	800c616 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 800d3e4:	4909      	ldr	r1, [pc, #36]	; (800d40c <APP_THREAD_DeviceConfig+0xb0>)
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	f7ff f915 	bl	800c616 <otCoapAddResource>
}
 800d3ec:	bd08      	pop	{r3, pc}
 800d3ee:	bf00      	nop
 800d3f0:	0800d881 	.word	0x0800d881
 800d3f4:	0800f92c 	.word	0x0800f92c
 800d3f8:	0800f93c 	.word	0x0800f93c
 800d3fc:	0800f924 	.word	0x0800f924
 800d400:	20000038 	.word	0x20000038
 800d404:	20000048 	.word	0x20000048
 800d408:	20000028 	.word	0x20000028
 800d40c:	20000058 	.word	0x20000058

0800d410 <APP_THREAD_SendDataResponse>:
{
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d412:	4605      	mov	r5, r0
 800d414:	460e      	mov	r6, r1
  APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
 800d416:	4a18      	ldr	r2, [pc, #96]	; (800d478 <APP_THREAD_SendDataResponse+0x68>)
 800d418:	2101      	movs	r1, #1
 800d41a:	2000      	movs	r0, #0
 800d41c:	f7f6 fa1e 	bl	800385c <logApplication>
  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 800d420:	4c16      	ldr	r4, [pc, #88]	; (800d47c <APP_THREAD_SendDataResponse+0x6c>)
 800d422:	2244      	movs	r2, #68	; 0x44
 800d424:	2120      	movs	r1, #32
 800d426:	4620      	mov	r0, r4
 800d428:	f7fe ff7f 	bl	800c32a <otCoapHeaderInit>
  otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 800d42c:	4628      	mov	r0, r5
 800d42e:	f7ff f852 	bl	800c4d6 <otCoapHeaderGetMessageId>
 800d432:	4601      	mov	r1, r0
 800d434:	4620      	mov	r0, r4
 800d436:	f7ff f800 	bl	800c43a <otCoapHeaderSetMessageId>
  otCoapHeaderSetToken(&OT_Header,
 800d43a:	4628      	mov	r0, r5
 800d43c:	f7ff f87f 	bl	800c53e <otCoapHeaderGetToken>
 800d440:	4607      	mov	r7, r0
 800d442:	4628      	mov	r0, r5
 800d444:	f7ff f861 	bl	800c50a <otCoapHeaderGetTokenLength>
 800d448:	4602      	mov	r2, r0
 800d44a:	4639      	mov	r1, r7
 800d44c:	4620      	mov	r0, r4
 800d44e:	f7fe ff88 	bl	800c362 <otCoapHeaderSetToken>
  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800d452:	4621      	mov	r1, r4
 800d454:	2000      	movs	r0, #0
 800d456:	f7ff f88b 	bl	800c570 <otCoapNewMessage>
 800d45a:	4601      	mov	r1, r0
 800d45c:	4b08      	ldr	r3, [pc, #32]	; (800d480 <APP_THREAD_SendDataResponse+0x70>)
 800d45e:	6018      	str	r0, [r3, #0]
  error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 800d460:	4632      	mov	r2, r6
 800d462:	2000      	movs	r0, #0
 800d464:	f7ff f8f1 	bl	800c64a <otCoapSendResponse>
  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800d468:	b120      	cbz	r0, 800d474 <APP_THREAD_SendDataResponse+0x64>
 800d46a:	4b05      	ldr	r3, [pc, #20]	; (800d480 <APP_THREAD_SendDataResponse+0x70>)
 800d46c:	6818      	ldr	r0, [r3, #0]
 800d46e:	b108      	cbz	r0, 800d474 <APP_THREAD_SendDataResponse+0x64>
    otMessageFree(pOT_Message);
 800d470:	f7ff f9fc 	bl	800c86c <otMessageFree>
}
 800d474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d476:	bf00      	nop
 800d478:	0800f89c 	.word	0x0800f89c
 800d47c:	200047bc 	.word	0x200047bc
 800d480:	200049cc 	.word	0x200049cc

0800d484 <APP_THREAD_CoapToggleLoggingRequestHandler>:
{
 800d484:	b570      	push	{r4, r5, r6, lr}
 800d486:	4605      	mov	r5, r0
 800d488:	460c      	mov	r4, r1
 800d48a:	4616      	mov	r6, r2
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage))
 800d48c:	4608      	mov	r0, r1
 800d48e:	f7ff fa05 	bl	800c89c <otMessageGetOffset>
 800d492:	2306      	movs	r3, #6
 800d494:	4a17      	ldr	r2, [pc, #92]	; (800d4f4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x70>)
 800d496:	4601      	mov	r1, r0
 800d498:	4620      	mov	r0, r4
 800d49a:	f7ff fa37 	bl	800c90c <otMessageRead>
 800d49e:	2806      	cmp	r0, #6
 800d4a0:	d01b      	beq.n	800d4da <APP_THREAD_CoapToggleLoggingRequestHandler+0x56>
    tempMessageInfo = pMessageInfo;
 800d4a2:	4b15      	ldr	r3, [pc, #84]	; (800d4f8 <APP_THREAD_CoapToggleLoggingRequestHandler+0x74>)
 800d4a4:	601e      	str	r6, [r3, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800d4a6:	4b15      	ldr	r3, [pc, #84]	; (800d4fc <APP_THREAD_CoapToggleLoggingRequestHandler+0x78>)
 800d4a8:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	f7fe ffdf 	bl	800c46e <otCoapHeaderGetType>
 800d4b0:	b1d8      	cbz	r0, 800d4ea <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	f7fe ffdb 	bl	800c46e <otCoapHeaderGetType>
 800d4b8:	2810      	cmp	r0, #16
 800d4ba:	d11a      	bne.n	800d4f2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f7fe fff0 	bl	800c4a2 <otCoapHeaderGetCode>
 800d4c2:	2803      	cmp	r0, #3
 800d4c4:	d115      	bne.n	800d4f2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f7ff f9e8 	bl	800c89c <otMessageGetOffset>
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	4a0c      	ldr	r2, [pc, #48]	; (800d500 <APP_THREAD_CoapToggleLoggingRequestHandler+0x7c>)
 800d4d0:	4601      	mov	r1, r0
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f7ff fa1a 	bl	800c90c <otMessageRead>
}
 800d4d8:	e00b      	b.n	800d4f2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    	osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 800d4da:	2300      	movs	r3, #0
 800d4dc:	461a      	mov	r2, r3
 800d4de:	4905      	ldr	r1, [pc, #20]	; (800d4f4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x70>)
 800d4e0:	4808      	ldr	r0, [pc, #32]	; (800d504 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>)
 800d4e2:	6800      	ldr	r0, [r0, #0]
 800d4e4:	f7fc fbb6 	bl	8009c54 <osMessageQueuePut>
 800d4e8:	e7db      	b.n	800d4a2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x1e>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800d4ea:	4631      	mov	r1, r6
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	f7ff ff8f 	bl	800d410 <APP_THREAD_SendDataResponse>
}
 800d4f2:	bd70      	pop	{r4, r5, r6, pc}
 800d4f4:	200058e4 	.word	0x200058e4
 800d4f8:	200058cc 	.word	0x200058cc
 800d4fc:	20005910 	.word	0x20005910
 800d500:	20004878 	.word	0x20004878
 800d504:	20004ba4 	.word	0x20004ba4

0800d508 <APP_THREAD_CoapLightsSimpleRequestHandler>:
{
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	4605      	mov	r5, r0
 800d50c:	460c      	mov	r4, r1
 800d50e:	4617      	mov	r7, r2
	lightsSimpleMessage = 0;
 800d510:	4e1a      	ldr	r6, [pc, #104]	; (800d57c <APP_THREAD_CoapLightsSimpleRequestHandler+0x74>)
 800d512:	2300      	movs	r3, #0
 800d514:	6033      	str	r3, [r6, #0]
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage)) == 4U)
 800d516:	4608      	mov	r0, r1
 800d518:	f7ff f9c0 	bl	800c89c <otMessageGetOffset>
 800d51c:	2304      	movs	r3, #4
 800d51e:	4632      	mov	r2, r6
 800d520:	4601      	mov	r1, r0
 800d522:	4620      	mov	r0, r4
 800d524:	f7ff f9f2 	bl	800c90c <otMessageRead>
 800d528:	2804      	cmp	r0, #4
 800d52a:	d019      	beq.n	800d560 <APP_THREAD_CoapLightsSimpleRequestHandler+0x58>
    receivedMessage = (otMessageInfo *) pMessage;
 800d52c:	4b14      	ldr	r3, [pc, #80]	; (800d580 <APP_THREAD_CoapLightsSimpleRequestHandler+0x78>)
 800d52e:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800d530:	4628      	mov	r0, r5
 800d532:	f7fe ff9c 	bl	800c46e <otCoapHeaderGetType>
 800d536:	b1d8      	cbz	r0, 800d570 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800d538:	4628      	mov	r0, r5
 800d53a:	f7fe ff98 	bl	800c46e <otCoapHeaderGetType>
 800d53e:	2810      	cmp	r0, #16
 800d540:	d11a      	bne.n	800d578 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800d542:	4628      	mov	r0, r5
 800d544:	f7fe ffad 	bl	800c4a2 <otCoapHeaderGetCode>
 800d548:	2803      	cmp	r0, #3
 800d54a:	d115      	bne.n	800d578 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800d54c:	4620      	mov	r0, r4
 800d54e:	f7ff f9a5 	bl	800c89c <otMessageGetOffset>
 800d552:	2301      	movs	r3, #1
 800d554:	4a0b      	ldr	r2, [pc, #44]	; (800d584 <APP_THREAD_CoapLightsSimpleRequestHandler+0x7c>)
 800d556:	4601      	mov	r1, r0
 800d558:	4620      	mov	r0, r4
 800d55a:	f7ff f9d7 	bl	800c90c <otMessageRead>
}
 800d55e:	e00b      	b.n	800d578 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    	osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 800d560:	2300      	movs	r3, #0
 800d562:	461a      	mov	r2, r3
 800d564:	4631      	mov	r1, r6
 800d566:	4808      	ldr	r0, [pc, #32]	; (800d588 <APP_THREAD_CoapLightsSimpleRequestHandler+0x80>)
 800d568:	6800      	ldr	r0, [r0, #0]
 800d56a:	f7fc fb73 	bl	8009c54 <osMessageQueuePut>
 800d56e:	e7dd      	b.n	800d52c <APP_THREAD_CoapLightsSimpleRequestHandler+0x24>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800d570:	4639      	mov	r1, r7
 800d572:	4628      	mov	r0, r5
 800d574:	f7ff ff4c 	bl	800d410 <APP_THREAD_SendDataResponse>
}
 800d578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d57a:	bf00      	nop
 800d57c:	20004ff8 	.word	0x20004ff8
 800d580:	20005910 	.word	0x20005910
 800d584:	20004878 	.word	0x20004878
 800d588:	20004bcc 	.word	0x20004bcc

0800d58c <APP_THREAD_CoapLightsComplexRequestHandler>:
{
 800d58c:	b570      	push	{r4, r5, r6, lr}
 800d58e:	4605      	mov	r5, r0
 800d590:	460c      	mov	r4, r1
 800d592:	4616      	mov	r6, r2
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex)) == sizeof(lightMessageComplex))
 800d594:	4608      	mov	r0, r1
 800d596:	f7ff f981 	bl	800c89c <otMessageGetOffset>
 800d59a:	2312      	movs	r3, #18
 800d59c:	4a11      	ldr	r2, [pc, #68]	; (800d5e4 <APP_THREAD_CoapLightsComplexRequestHandler+0x58>)
 800d59e:	4601      	mov	r1, r0
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f7ff f9b3 	bl	800c90c <otMessageRead>
 800d5a6:	2812      	cmp	r0, #18
 800d5a8:	d009      	beq.n	800d5be <APP_THREAD_CoapLightsComplexRequestHandler+0x32>
    tempMessageInfo = pMessageInfo;
 800d5aa:	4b0f      	ldr	r3, [pc, #60]	; (800d5e8 <APP_THREAD_CoapLightsComplexRequestHandler+0x5c>)
 800d5ac:	601e      	str	r6, [r3, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800d5ae:	4b0f      	ldr	r3, [pc, #60]	; (800d5ec <APP_THREAD_CoapLightsComplexRequestHandler+0x60>)
 800d5b0:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	f7fe ff5b 	bl	800c46e <otCoapHeaderGetType>
 800d5b8:	2810      	cmp	r0, #16
 800d5ba:	d004      	beq.n	800d5c6 <APP_THREAD_CoapLightsComplexRequestHandler+0x3a>
}
 800d5bc:	bd70      	pop	{r4, r5, r6, pc}
    	FrontLightsSet(&lightMessageComplex);
 800d5be:	4809      	ldr	r0, [pc, #36]	; (800d5e4 <APP_THREAD_CoapLightsComplexRequestHandler+0x58>)
 800d5c0:	f7f5 fcdc 	bl	8002f7c <FrontLightsSet>
 800d5c4:	e7f1      	b.n	800d5aa <APP_THREAD_CoapLightsComplexRequestHandler+0x1e>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f7fe ff6b 	bl	800c4a2 <otCoapHeaderGetCode>
 800d5cc:	2803      	cmp	r0, #3
 800d5ce:	d1f5      	bne.n	800d5bc <APP_THREAD_CoapLightsComplexRequestHandler+0x30>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f7ff f963 	bl	800c89c <otMessageGetOffset>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	4a05      	ldr	r2, [pc, #20]	; (800d5f0 <APP_THREAD_CoapLightsComplexRequestHandler+0x64>)
 800d5da:	4601      	mov	r1, r0
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f7ff f995 	bl	800c90c <otMessageRead>
}
 800d5e2:	e7eb      	b.n	800d5bc <APP_THREAD_CoapLightsComplexRequestHandler+0x30>
 800d5e4:	200058fc 	.word	0x200058fc
 800d5e8:	200058cc 	.word	0x200058cc
 800d5ec:	20005910 	.word	0x20005910
 800d5f0:	20004878 	.word	0x20004878

0800d5f4 <APP_THREAD_SendCoapUnicastRequest>:
{
 800d5f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5f8:	b083      	sub	sp, #12
 800d5fa:	4607      	mov	r7, r0
 800d5fc:	4688      	mov	r8, r1
 800d5fe:	4615      	mov	r5, r2
 800d600:	4699      	mov	r9, r3
			  myRloc16 = otThreadGetRloc16(NULL);
 800d602:	2000      	movs	r0, #0
 800d604:	f7ff fcd2 	bl	800cfac <otThreadGetRloc16>
 800d608:	4b36      	ldr	r3, [pc, #216]	; (800d6e4 <APP_THREAD_SendCoapUnicastRequest+0xf0>)
 800d60a:	8018      	strh	r0, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 800d60c:	2000      	movs	r0, #0
 800d60e:	f7ff f8b3 	bl	800c778 <otIp6IsEnabled>
 800d612:	4b35      	ldr	r3, [pc, #212]	; (800d6e8 <APP_THREAD_SendCoapUnicastRequest+0xf4>)
 800d614:	7018      	strb	r0, [r3, #0]
			  memcpy(&meshLocalEID, otThreadGetMeshLocalEid(NULL) ,sizeof(otIp6Address));
 800d616:	2000      	movs	r0, #0
 800d618:	f7ff fc84 	bl	800cf24 <otThreadGetMeshLocalEid>
 800d61c:	4b33      	ldr	r3, [pc, #204]	; (800d6ec <APP_THREAD_SendCoapUnicastRequest+0xf8>)
 800d61e:	6806      	ldr	r6, [r0, #0]
 800d620:	6844      	ldr	r4, [r0, #4]
 800d622:	6881      	ldr	r1, [r0, #8]
 800d624:	68c2      	ldr	r2, [r0, #12]
 800d626:	601e      	str	r6, [r3, #0]
 800d628:	605c      	str	r4, [r3, #4]
 800d62a:	6099      	str	r1, [r3, #8]
 800d62c:	60da      	str	r2, [r3, #12]
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 800d62e:	4c30      	ldr	r4, [pc, #192]	; (800d6f0 <APP_THREAD_SendCoapUnicastRequest+0xfc>)
 800d630:	222c      	movs	r2, #44	; 0x2c
 800d632:	2100      	movs	r1, #0
 800d634:	4620      	mov	r0, r4
 800d636:	f000 feba 	bl	800e3ae <memset>
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 800d63a:	f104 0110 	add.w	r1, r4, #16
 800d63e:	4628      	mov	r0, r5
 800d640:	f7ff f8c7 	bl	800c7d2 <otIp6AddressFromString>
 800d644:	4e2b      	ldr	r6, [pc, #172]	; (800d6f4 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800d646:	7030      	strb	r0, [r6, #0]
			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 800d648:	2000      	movs	r0, #0
 800d64a:	f7ff fc6b 	bl	800cf24 <otThreadGetMeshLocalEid>
 800d64e:	4603      	mov	r3, r0
 800d650:	4625      	mov	r5, r4
 800d652:	6800      	ldr	r0, [r0, #0]
 800d654:	6859      	ldr	r1, [r3, #4]
 800d656:	689a      	ldr	r2, [r3, #8]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 800d65c:	2301      	movs	r3, #1
 800d65e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 800d662:	f241 6333 	movw	r3, #5683	; 0x1633
 800d666:	8463      	strh	r3, [r4, #34]	; 0x22
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 800d668:	2000      	movs	r0, #0
 800d66a:	f7ff f89d 	bl	800c7a8 <otIp6GetUnicastAddresses>
 800d66e:	4b22      	ldr	r3, [pc, #136]	; (800d6f8 <APP_THREAD_SendCoapUnicastRequest+0x104>)
 800d670:	6018      	str	r0, [r3, #0]
			  OT_MessageInfo.mSockAddr = unicastAddresses->mAddress;
 800d672:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800d674:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 800d678:	4c20      	ldr	r4, [pc, #128]	; (800d6fc <APP_THREAD_SendCoapUnicastRequest+0x108>)
 800d67a:	2203      	movs	r2, #3
 800d67c:	2110      	movs	r1, #16
 800d67e:	4620      	mov	r0, r4
 800d680:	f7fe fe53 	bl	800c32a <otCoapHeaderInit>
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 800d684:	2102      	movs	r1, #2
 800d686:	4620      	mov	r0, r4
 800d688:	f7fe fe87 	bl	800c39a <otCoapHeaderGenerateToken>
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 800d68c:	4649      	mov	r1, r9
 800d68e:	4620      	mov	r0, r4
 800d690:	f7fe fe9d 	bl	800c3ce <otCoapHeaderAppendUriPathOptions>
 800d694:	7030      	strb	r0, [r6, #0]
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 800d696:	4620      	mov	r0, r4
 800d698:	f7fe feb5 	bl	800c406 <otCoapHeaderSetPayloadMarker>
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800d69c:	4621      	mov	r1, r4
 800d69e:	2000      	movs	r0, #0
 800d6a0:	f7fe ff66 	bl	800c570 <otCoapNewMessage>
 800d6a4:	4b16      	ldr	r3, [pc, #88]	; (800d700 <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800d6a6:	6018      	str	r0, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 800d6a8:	b900      	cbnz	r0, 800d6ac <APP_THREAD_SendCoapUnicastRequest+0xb8>
 800d6aa:	e7fe      	b.n	800d6aa <APP_THREAD_SendCoapUnicastRequest+0xb6>
			  error = otMessageAppend(pOT_Message, message, message_length);
 800d6ac:	4642      	mov	r2, r8
 800d6ae:	4639      	mov	r1, r7
 800d6b0:	f7ff f90e 	bl	800c8d0 <otMessageAppend>
 800d6b4:	4b0f      	ldr	r3, [pc, #60]	; (800d6f4 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800d6b6:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE) while(1);
 800d6b8:	b100      	cbz	r0, 800d6bc <APP_THREAD_SendCoapUnicastRequest+0xc8>
 800d6ba:	e7fe      	b.n	800d6ba <APP_THREAD_SendCoapUnicastRequest+0xc6>
			  error = otCoapSendRequest(NULL,
 800d6bc:	2000      	movs	r0, #0
 800d6be:	9000      	str	r0, [sp, #0]
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	4a0b      	ldr	r2, [pc, #44]	; (800d6f0 <APP_THREAD_SendCoapUnicastRequest+0xfc>)
 800d6c4:	490e      	ldr	r1, [pc, #56]	; (800d700 <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800d6c6:	6809      	ldr	r1, [r1, #0]
 800d6c8:	f7fe ff6b 	bl	800c5a2 <otCoapSendRequest>
 800d6cc:	4b09      	ldr	r3, [pc, #36]	; (800d6f4 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800d6ce:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800d6d0:	b120      	cbz	r0, 800d6dc <APP_THREAD_SendCoapUnicastRequest+0xe8>
 800d6d2:	4b0b      	ldr	r3, [pc, #44]	; (800d700 <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800d6d4:	6818      	ldr	r0, [r3, #0]
 800d6d6:	b108      	cbz	r0, 800d6dc <APP_THREAD_SendCoapUnicastRequest+0xe8>
				otMessageFree(pOT_Message);
 800d6d8:	f7ff f8c8 	bl	800c86c <otMessageFree>
}
 800d6dc:	b003      	add	sp, #12
 800d6de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6e2:	bf00      	nop
 800d6e4:	2000598e 	.word	0x2000598e
 800d6e8:	2000590e 	.word	0x2000590e
 800d6ec:	2000597c 	.word	0x2000597c
 800d6f0:	2000484c 	.word	0x2000484c
 800d6f4:	200049c8 	.word	0x200049c8
 800d6f8:	20005990 	.word	0x20005990
 800d6fc:	200047bc 	.word	0x200047bc
 800d700:	200049cc 	.word	0x200049cc

0800d704 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 800d704:	b508      	push	{r3, lr}
  CptReceiveMsgFromM0++;
 800d706:	4a05      	ldr	r2, [pc, #20]	; (800d71c <Receive_Notification_From_M0+0x18>)
 800d708:	6813      	ldr	r3, [r2, #0]
 800d70a:	3301      	adds	r3, #1
 800d70c:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 800d70e:	2101      	movs	r1, #1
 800d710:	4b03      	ldr	r3, [pc, #12]	; (800d720 <Receive_Notification_From_M0+0x1c>)
 800d712:	6818      	ldr	r0, [r3, #0]
 800d714:	f7fb ff66 	bl	80095e4 <osThreadFlagsSet>
}
 800d718:	bd08      	pop	{r3, pc}
 800d71a:	bf00      	nop
 800d71c:	200047b4 	.word	0x200047b4
 800d720:	20004880 	.word	0x20004880

0800d724 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 800d724:	b508      	push	{r3, lr}
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800d726:	4b10      	ldr	r3, [pc, #64]	; (800d768 <RxCpltCallback+0x44>)
 800d728:	881b      	ldrh	r3, [r3, #0]
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	2bff      	cmp	r3, #255	; 0xff
 800d72e:	d80b      	bhi.n	800d748 <RxCpltCallback+0x24>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 800d730:	490d      	ldr	r1, [pc, #52]	; (800d768 <RxCpltCallback+0x44>)
 800d732:	880b      	ldrh	r3, [r1, #0]
 800d734:	b29b      	uxth	r3, r3
 800d736:	1c5a      	adds	r2, r3, #1
 800d738:	b292      	uxth	r2, r2
 800d73a:	800a      	strh	r2, [r1, #0]
 800d73c:	4a0b      	ldr	r2, [pc, #44]	; (800d76c <RxCpltCallback+0x48>)
 800d73e:	7812      	ldrb	r2, [r2, #0]
 800d740:	490b      	ldr	r1, [pc, #44]	; (800d770 <RxCpltCallback+0x4c>)
 800d742:	54ca      	strb	r2, [r1, r3]
    if (aRxBuffer[0] == '\r')
 800d744:	2a0d      	cmp	r2, #13
 800d746:	d006      	beq.n	800d756 <RxCpltCallback+0x32>
      osThreadFlagsSet(OsTaskCliId,1);
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 800d748:	4b0a      	ldr	r3, [pc, #40]	; (800d774 <RxCpltCallback+0x50>)
 800d74a:	2201      	movs	r2, #1
 800d74c:	4907      	ldr	r1, [pc, #28]	; (800d76c <RxCpltCallback+0x48>)
 800d74e:	2000      	movs	r0, #0
 800d750:	f7f5 f90e 	bl	8002970 <HW_UART_Receive_IT>
}
 800d754:	bd08      	pop	{r3, pc}
      CptReceiveCmdFromUser = 1U;
 800d756:	2101      	movs	r1, #1
 800d758:	4b07      	ldr	r3, [pc, #28]	; (800d778 <RxCpltCallback+0x54>)
 800d75a:	8019      	strh	r1, [r3, #0]
      osThreadFlagsSet(OsTaskCliId,1);
 800d75c:	4b07      	ldr	r3, [pc, #28]	; (800d77c <RxCpltCallback+0x58>)
 800d75e:	6818      	ldr	r0, [r3, #0]
 800d760:	f7fb ff40 	bl	80095e4 <osThreadFlagsSet>
 800d764:	e7f0      	b.n	800d748 <RxCpltCallback+0x24>
 800d766:	bf00      	nop
 800d768:	200049ca 	.word	0x200049ca
 800d76c:	20004884 	.word	0x20004884
 800d770:	200046b0 	.word	0x200046b0
 800d774:	0800d725 	.word	0x0800d725
 800d778:	200047b0 	.word	0x200047b0
 800d77c:	2000487c 	.word	0x2000487c

0800d780 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 800d780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 800d782:	4c0f      	ldr	r4, [pc, #60]	; (800d7c0 <Send_CLI_To_M0+0x40>)
 800d784:	f104 070c 	add.w	r7, r4, #12
 800d788:	22ff      	movs	r2, #255	; 0xff
 800d78a:	2100      	movs	r1, #0
 800d78c:	4638      	mov	r0, r7
 800d78e:	f000 fe0e 	bl	800e3ae <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 800d792:	4d0c      	ldr	r5, [pc, #48]	; (800d7c4 <Send_CLI_To_M0+0x44>)
 800d794:	882a      	ldrh	r2, [r5, #0]
 800d796:	4e0c      	ldr	r6, [pc, #48]	; (800d7c8 <Send_CLI_To_M0+0x48>)
 800d798:	4631      	mov	r1, r6
 800d79a:	4638      	mov	r0, r7
 800d79c:	f000 fdfc 	bl	800e398 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 800d7a0:	882b      	ldrh	r3, [r5, #0]
 800d7a2:	72e3      	strb	r3, [r4, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	7261      	strb	r1, [r4, #9]
 800d7a8:	72a1      	strb	r1, [r4, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 800d7aa:	4b08      	ldr	r3, [pc, #32]	; (800d7cc <Send_CLI_To_M0+0x4c>)
 800d7ac:	8019      	strh	r1, [r3, #0]
  indexReceiveChar = 0;
 800d7ae:	8029      	strh	r1, [r5, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 800d7b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	f000 fdfa 	bl	800e3ae <memset>

  TL_CLI_SendCmd();
 800d7ba:	f7ff fcd5 	bl	800d168 <TL_CLI_SendCmd>
}
 800d7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7c0:	20030838 	.word	0x20030838
 800d7c4:	200049ca 	.word	0x200049ca
 800d7c8:	200046b0 	.word	0x200046b0
 800d7cc:	200047b0 	.word	0x200047b0

0800d7d0 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
{
 800d7d0:	b508      	push	{r3, lr}
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800d7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	4608      	mov	r0, r1
 800d7da:	f7fb ff89 	bl	80096f0 <osThreadFlagsWait>
    Send_CLI_To_M0();
 800d7de:	f7ff ffcf 	bl	800d780 <Send_CLI_To_M0>
 800d7e2:	e7f6      	b.n	800d7d2 <APP_THREAD_FreeRTOSSendCLIToM0Task+0x2>

0800d7e4 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 800d7e4:	b508      	push	{r3, lr}

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800d7e6:	f7ff fcd7 	bl	800d198 <TL_THREAD_CliSendAck>
}
 800d7ea:	bd08      	pop	{r3, pc}

0800d7ec <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 800d7ec:	b508      	push	{r3, lr}
  Send_CLI_Ack_For_OT();
 800d7ee:	f7ff fff9 	bl	800d7e4 <Send_CLI_Ack_For_OT>
}
 800d7f2:	bd08      	pop	{r3, pc}

0800d7f4 <APP_THREAD_SendMyIP>:
void APP_THREAD_SendMyIP(){
 800d7f4:	b508      	push	{r3, lr}
	APP_THREAD_SendCoapUnicastRequest(msgSendMyIP, sizeof(msgSendMyIP), borderRouter.ipv6, borderSyncResource);
 800d7f6:	4b03      	ldr	r3, [pc, #12]	; (800d804 <APP_THREAD_SendMyIP+0x10>)
 800d7f8:	4a03      	ldr	r2, [pc, #12]	; (800d808 <APP_THREAD_SendMyIP+0x14>)
 800d7fa:	2105      	movs	r1, #5
 800d7fc:	4803      	ldr	r0, [pc, #12]	; (800d80c <APP_THREAD_SendMyIP+0x18>)
 800d7fe:	f7ff fef9 	bl	800d5f4 <APP_THREAD_SendCoapUnicastRequest>
}
 800d802:	bd08      	pop	{r3, pc}
 800d804:	0800f914 	.word	0x0800f914
 800d808:	20004988 	.word	0x20004988
 800d80c:	20000068 	.word	0x20000068

0800d810 <APP_THREAD_CoapBorderTimeRequestHandler>:
{
 800d810:	b570      	push	{r4, r5, r6, lr}
 800d812:	4605      	mov	r5, r0
 800d814:	460c      	mov	r4, r1
 800d816:	4616      	mov	r6, r2
	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &borderRouter, sizeof(borderRouter)) == sizeof(borderRouter))
 800d818:	4608      	mov	r0, r1
 800d81a:	f7ff f83f 	bl	800c89c <otMessageGetOffset>
 800d81e:	2340      	movs	r3, #64	; 0x40
 800d820:	4a14      	ldr	r2, [pc, #80]	; (800d874 <APP_THREAD_CoapBorderTimeRequestHandler+0x64>)
 800d822:	4601      	mov	r1, r0
 800d824:	4620      	mov	r0, r4
 800d826:	f7ff f871 	bl	800c90c <otMessageRead>
 800d82a:	2840      	cmp	r0, #64	; 0x40
 800d82c:	d019      	beq.n	800d862 <APP_THREAD_CoapBorderTimeRequestHandler+0x52>
    receivedMessage = (otMessageInfo *) pMessage;
 800d82e:	4b12      	ldr	r3, [pc, #72]	; (800d878 <APP_THREAD_CoapBorderTimeRequestHandler+0x68>)
 800d830:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800d832:	4628      	mov	r0, r5
 800d834:	f7fe fe1b 	bl	800c46e <otCoapHeaderGetType>
 800d838:	b1b0      	cbz	r0, 800d868 <APP_THREAD_CoapBorderTimeRequestHandler+0x58>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7fe fe17 	bl	800c46e <otCoapHeaderGetType>
 800d840:	2810      	cmp	r0, #16
 800d842:	d115      	bne.n	800d870 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800d844:	4628      	mov	r0, r5
 800d846:	f7fe fe2c 	bl	800c4a2 <otCoapHeaderGetCode>
 800d84a:	2803      	cmp	r0, #3
 800d84c:	d110      	bne.n	800d870 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800d84e:	4620      	mov	r0, r4
 800d850:	f7ff f824 	bl	800c89c <otMessageGetOffset>
 800d854:	2301      	movs	r3, #1
 800d856:	4a09      	ldr	r2, [pc, #36]	; (800d87c <APP_THREAD_CoapBorderTimeRequestHandler+0x6c>)
 800d858:	4601      	mov	r1, r0
 800d85a:	4620      	mov	r0, r4
 800d85c:	f7ff f856 	bl	800c90c <otMessageRead>
}
 800d860:	e006      	b.n	800d870 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    	APP_THREAD_SendMyIP();
 800d862:	f7ff ffc7 	bl	800d7f4 <APP_THREAD_SendMyIP>
 800d866:	e7e2      	b.n	800d82e <APP_THREAD_CoapBorderTimeRequestHandler+0x1e>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800d868:	4631      	mov	r1, r6
 800d86a:	4628      	mov	r0, r5
 800d86c:	f7ff fdd0 	bl	800d410 <APP_THREAD_SendDataResponse>
}
 800d870:	bd70      	pop	{r4, r5, r6, pc}
 800d872:	bf00      	nop
 800d874:	20004988 	.word	0x20004988
 800d878:	20005910 	.word	0x20005910
 800d87c:	20004878 	.word	0x20004878

0800d880 <APP_THREAD_StateNotif>:
  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 800d880:	f010 0f04 	tst.w	r0, #4
 800d884:	d100      	bne.n	800d888 <APP_THREAD_StateNotif+0x8>
 800d886:	4770      	bx	lr
{
 800d888:	b508      	push	{r3, lr}
    switch (otThreadGetDeviceRole(NULL))
 800d88a:	2000      	movs	r0, #0
 800d88c:	f7ff fb78 	bl	800cf80 <otThreadGetDeviceRole>
 800d890:	2804      	cmp	r0, #4
 800d892:	d813      	bhi.n	800d8bc <APP_THREAD_StateNotif+0x3c>
 800d894:	e8df f000 	tbb	[pc, r0]
 800d898:	0c090308 	.word	0x0c090308
 800d89c:	0f          	.byte	0x0f
 800d89d:	00          	.byte	0x00
    	borderRouter.epoch = 0;
 800d89e:	4b09      	ldr	r3, [pc, #36]	; (800d8c4 <APP_THREAD_StateNotif+0x44>)
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
}
 800d8a8:	bd08      	pop	{r3, pc}
    	APP_THREAD_SendMyIP();
 800d8aa:	f7ff ffa3 	bl	800d7f4 <APP_THREAD_SendMyIP>
      break;
 800d8ae:	e7fb      	b.n	800d8a8 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800d8b0:	f7ff ffa0 	bl	800d7f4 <APP_THREAD_SendMyIP>
      break;
 800d8b4:	e7f8      	b.n	800d8a8 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800d8b6:	f7ff ff9d 	bl	800d7f4 <APP_THREAD_SendMyIP>
      break;
 800d8ba:	e7f5      	b.n	800d8a8 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800d8bc:	f7ff ff9a 	bl	800d7f4 <APP_THREAD_SendMyIP>
}
 800d8c0:	e7f2      	b.n	800d8a8 <APP_THREAD_StateNotif+0x28>
 800d8c2:	bf00      	nop
 800d8c4:	20004988 	.word	0x20004988

0800d8c8 <APP_THREAD_RegisterCmdBuffer>:
  p_thread_otcmdbuffer = p_buffer;
 800d8c8:	4b01      	ldr	r3, [pc, #4]	; (800d8d0 <APP_THREAD_RegisterCmdBuffer+0x8>)
 800d8ca:	6018      	str	r0, [r3, #0]
}
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop
 800d8d0:	200049d4 	.word	0x200049d4

0800d8d4 <THREAD_Get_OTCmdPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 800d8d4:	4b01      	ldr	r3, [pc, #4]	; (800d8dc <THREAD_Get_OTCmdPayloadBuffer+0x8>)
 800d8d6:	6818      	ldr	r0, [r3, #0]
}
 800d8d8:	300c      	adds	r0, #12
 800d8da:	4770      	bx	lr
 800d8dc:	200049d4 	.word	0x200049d4

0800d8e0 <THREAD_Get_OTCmdRspPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 800d8e0:	4b01      	ldr	r3, [pc, #4]	; (800d8e8 <THREAD_Get_OTCmdRspPayloadBuffer+0x8>)
 800d8e2:	6818      	ldr	r0, [r3, #0]
}
 800d8e4:	300b      	adds	r0, #11
 800d8e6:	4770      	bx	lr
 800d8e8:	200049d4 	.word	0x200049d4

0800d8ec <THREAD_Get_NotificationPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 800d8ec:	4b01      	ldr	r3, [pc, #4]	; (800d8f4 <THREAD_Get_NotificationPayloadBuffer+0x8>)
 800d8ee:	6818      	ldr	r0, [r3, #0]
}
 800d8f0:	300b      	adds	r0, #11
 800d8f2:	4770      	bx	lr
 800d8f4:	200049d0 	.word	0x200049d0

0800d8f8 <Ot_Cmd_Transfer>:
{
 800d8f8:	b508      	push	{r3, lr}
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800d8fa:	4b08      	ldr	r3, [pc, #32]	; (800d91c <Ot_Cmd_Transfer+0x24>)
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800d902:	7253      	strb	r3, [r2, #9]
 800d904:	2302      	movs	r3, #2
 800d906:	7293      	strb	r3, [r2, #10]
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 800d908:	6913      	ldr	r3, [r2, #16]
 800d90a:	3302      	adds	r3, #2
 800d90c:	009b      	lsls	r3, r3, #2
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 800d90e:	72d3      	strb	r3, [r2, #11]
  TL_OT_SendCmd();
 800d910:	f7ff fc1e 	bl	800d150 <TL_OT_SendCmd>
  Wait_Getting_Ack_From_M0();
 800d914:	f7ff fcc6 	bl	800d2a4 <Wait_Getting_Ack_From_M0>
}
 800d918:	bd08      	pop	{r3, pc}
 800d91a:	bf00      	nop
 800d91c:	200049d4 	.word	0x200049d4

0800d920 <TL_OT_CmdEvtReceived>:
{
 800d920:	b508      	push	{r3, lr}
  Receive_Ack_From_M0();
 800d922:	f7ff fcc9 	bl	800d2b8 <Receive_Ack_From_M0>
}
 800d926:	bd08      	pop	{r3, pc}

0800d928 <TL_THREAD_NotReceived>:
{
 800d928:	b508      	push	{r3, lr}
  p_thread_notif_M0_to_M4 = Notbuffer;
 800d92a:	4b02      	ldr	r3, [pc, #8]	; (800d934 <TL_THREAD_NotReceived+0xc>)
 800d92c:	6018      	str	r0, [r3, #0]
  Receive_Notification_From_M0();
 800d92e:	f7ff fee9 	bl	800d704 <Receive_Notification_From_M0>
}
 800d932:	bd08      	pop	{r3, pc}
 800d934:	200049d0 	.word	0x200049d0

0800d938 <Pre_OtCmdProcessing>:
}
 800d938:	4770      	bx	lr
	...

0800d93c <APP_THREAD_Init_UART_CLI>:
{
 800d93c:	b508      	push	{r3, lr}
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 800d93e:	4a08      	ldr	r2, [pc, #32]	; (800d960 <APP_THREAD_Init_UART_CLI+0x24>)
 800d940:	2100      	movs	r1, #0
 800d942:	4808      	ldr	r0, [pc, #32]	; (800d964 <APP_THREAD_Init_UART_CLI+0x28>)
 800d944:	f7fb fdda 	bl	80094fc <osThreadNew>
 800d948:	4b07      	ldr	r3, [pc, #28]	; (800d968 <APP_THREAD_Init_UART_CLI+0x2c>)
 800d94a:	6018      	str	r0, [r3, #0]
  MX_USART1_UART_Init();
 800d94c:	f7f6 f8e8 	bl	8003b20 <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 800d950:	4b06      	ldr	r3, [pc, #24]	; (800d96c <APP_THREAD_Init_UART_CLI+0x30>)
 800d952:	2201      	movs	r2, #1
 800d954:	4906      	ldr	r1, [pc, #24]	; (800d970 <APP_THREAD_Init_UART_CLI+0x34>)
 800d956:	2000      	movs	r0, #0
 800d958:	f7f5 f80a 	bl	8002970 <HW_UART_Receive_IT>
}
 800d95c:	bd08      	pop	{r3, pc}
 800d95e:	bf00      	nop
 800d960:	0800f8cc 	.word	0x0800f8cc
 800d964:	0800d7d1 	.word	0x0800d7d1
 800d968:	2000487c 	.word	0x2000487c
 800d96c:	0800d725 	.word	0x0800d725
 800d970:	20004884 	.word	0x20004884

0800d974 <APP_THREAD_TL_THREAD_INIT>:
{
 800d974:	b508      	push	{r3, lr}
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 800d976:	4806      	ldr	r0, [pc, #24]	; (800d990 <APP_THREAD_TL_THREAD_INIT+0x1c>)
 800d978:	4b06      	ldr	r3, [pc, #24]	; (800d994 <APP_THREAD_TL_THREAD_INIT+0x20>)
 800d97a:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 800d97e:	6002      	str	r2, [r0, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800d980:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800d984:	6082      	str	r2, [r0, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 800d986:	6043      	str	r3, [r0, #4]
  TL_THREAD_Init( &ThreadConfigBuffer );
 800d988:	f7ff fbd4 	bl	800d134 <TL_THREAD_Init>
}
 800d98c:	bd08      	pop	{r3, pc}
 800d98e:	bf00      	nop
 800d990:	200300b8 	.word	0x200300b8
 800d994:	20030838 	.word	0x20030838

0800d998 <APP_THREAD_Init>:
{
 800d998:	b508      	push	{r3, lr}
  APP_THREAD_CheckWirelessFirmwareInfo();
 800d99a:	f7ff fc93 	bl	800d2c4 <APP_THREAD_CheckWirelessFirmwareInfo>
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 800d99e:	480b      	ldr	r0, [pc, #44]	; (800d9cc <APP_THREAD_Init+0x34>)
 800d9a0:	f7ff ff92 	bl	800d8c8 <APP_THREAD_RegisterCmdBuffer>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 800d9a4:	2101      	movs	r1, #1
 800d9a6:	2002      	movs	r0, #2
 800d9a8:	f000 f9f0 	bl	800dd8c <UTIL_LPM_SetOffMode>
  APP_THREAD_TL_THREAD_INIT();
 800d9ac:	f7ff ffe2 	bl	800d974 <APP_THREAD_TL_THREAD_INIT>
  APP_THREAD_Init_UART_CLI();
 800d9b0:	f7ff ffc4 	bl	800d93c <APP_THREAD_Init_UART_CLI>
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 800d9b4:	f7ff f904 	bl	800cbc0 <SHCI_C2_THREAD_Init>
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 800d9b8:	4a05      	ldr	r2, [pc, #20]	; (800d9d0 <APP_THREAD_Init+0x38>)
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	4805      	ldr	r0, [pc, #20]	; (800d9d4 <APP_THREAD_Init+0x3c>)
 800d9be:	f7fb fd9d 	bl	80094fc <osThreadNew>
 800d9c2:	4b05      	ldr	r3, [pc, #20]	; (800d9d8 <APP_THREAD_Init+0x40>)
 800d9c4:	6018      	str	r0, [r3, #0]
  APP_THREAD_DeviceConfig();
 800d9c6:	f7ff fcc9 	bl	800d35c <APP_THREAD_DeviceConfig>
}
 800d9ca:	bd08      	pop	{r3, pc}
 800d9cc:	20030944 	.word	0x20030944
 800d9d0:	0800f8f0 	.word	0x0800f8f0
 800d9d4:	0800da31 	.word	0x0800da31
 800d9d8:	20004880 	.word	0x20004880

0800d9dc <TL_THREAD_CliNotReceived>:
{
 800d9dc:	b538      	push	{r3, r4, r5, lr}
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800d9de:	7ac5      	ldrb	r5, [r0, #11]
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800d9e0:	f100 040c 	add.w	r4, r0, #12
 800d9e4:	4907      	ldr	r1, [pc, #28]	; (800da04 <TL_THREAD_CliNotReceived+0x28>)
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f7f2 fbca 	bl	8000180 <strcmp>
 800d9ec:	b910      	cbnz	r0, 800d9f4 <TL_THREAD_CliNotReceived+0x18>
    Send_CLI_Ack_For_OT();
 800d9ee:	f7ff fef9 	bl	800d7e4 <Send_CLI_Ack_For_OT>
}
 800d9f2:	bd38      	pop	{r3, r4, r5, pc}
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 800d9f4:	4b04      	ldr	r3, [pc, #16]	; (800da08 <TL_THREAD_CliNotReceived+0x2c>)
 800d9f6:	462a      	mov	r2, r5
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	f7f4 ffca 	bl	8002994 <HW_UART_Transmit_IT>
 800da00:	e7f7      	b.n	800d9f2 <TL_THREAD_CliNotReceived+0x16>
 800da02:	bf00      	nop
 800da04:	0800f8c8 	.word	0x0800f8c8
 800da08:	0800d7ed 	.word	0x0800d7ed

0800da0c <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 800da0c:	b508      	push	{r3, lr}
  if (CptReceiveMsgFromM0 != 0)
 800da0e:	4b07      	ldr	r3, [pc, #28]	; (800da2c <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	b133      	cbz	r3, 800da22 <APP_THREAD_ProcessMsgM0ToM4+0x16>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 800da14:	4b05      	ldr	r3, [pc, #20]	; (800da2c <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d903      	bls.n	800da24 <APP_THREAD_ProcessMsgM0ToM4+0x18>
    else
    {
      OpenThread_CallBack_Processing();
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 800da1c:	4b03      	ldr	r3, [pc, #12]	; (800da2c <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800da1e:	2200      	movs	r2, #0
 800da20:	601a      	str	r2, [r3, #0]
  }
}
 800da22:	bd08      	pop	{r3, pc}
      OpenThread_CallBack_Processing();
 800da24:	f7fe ff92 	bl	800c94c <OpenThread_CallBack_Processing>
 800da28:	e7f8      	b.n	800da1c <APP_THREAD_ProcessMsgM0ToM4+0x10>
 800da2a:	bf00      	nop
 800da2c:	200047b4 	.word	0x200047b4

0800da30 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
{
 800da30:	b508      	push	{r3, lr}
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800da32:	f04f 32ff 	mov.w	r2, #4294967295
 800da36:	2101      	movs	r1, #1
 800da38:	4608      	mov	r0, r1
 800da3a:	f7fb fe59 	bl	80096f0 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 800da3e:	f7ff ffe5 	bl	800da0c <APP_THREAD_ProcessMsgM0ToM4>
 800da42:	e7f6      	b.n	800da32 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x2>

0800da44 <HW_IPCC_MM_FreeBufHandler>:

  return;
}

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800da44:	b510      	push	{r4, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800da46:	4c06      	ldr	r4, [pc, #24]	; (800da60 <HW_IPCC_MM_FreeBufHandler+0x1c>)
 800da48:	6863      	ldr	r3, [r4, #4]
 800da4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da4e:	6063      	str	r3, [r4, #4]
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 800da50:	4b04      	ldr	r3, [pc, #16]	; (800da64 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4798      	blx	r3
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800da56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800da5a:	60a3      	str	r3, [r4, #8]

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  return;
}
 800da5c:	bd10      	pop	{r4, pc}
 800da5e:	bf00      	nop
 800da60:	58000c00 	.word	0x58000c00
 800da64:	200049d8 	.word	0x200049d8

0800da68 <HW_IPCC_THREAD_CliNotEvtHandler>:
{
 800da68:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel);
 800da6a:	4a04      	ldr	r2, [pc, #16]	; (800da7c <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800da6c:	6853      	ldr	r3, [r2, #4]
 800da6e:	f043 0310 	orr.w	r3, r3, #16
 800da72:	6053      	str	r3, [r2, #4]
  HW_IPCC_THREAD_CliEvtNot();
 800da74:	f7ff fbb0 	bl	800d1d8 <HW_IPCC_THREAD_CliEvtNot>
}
 800da78:	bd08      	pop	{r3, pc}
 800da7a:	bf00      	nop
 800da7c:	58000c00 	.word	0x58000c00

0800da80 <HW_IPCC_Enable>:
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800da80:	4b09      	ldr	r3, [pc, #36]	; (800daa8 <HW_IPCC_Enable+0x28>)
 800da82:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800da86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da8a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800da8e:	6a1a      	ldr	r2, [r3, #32]
 800da90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da94:	621a      	str	r2, [r3, #32]
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800da96:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800da98:	bf20      	wfe
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800da9a:	4a04      	ldr	r2, [pc, #16]	; (800daac <HW_IPCC_Enable+0x2c>)
 800da9c:	68d3      	ldr	r3, [r2, #12]
 800da9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800daa2:	60d3      	str	r3, [r2, #12]
}
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	58000800 	.word	0x58000800
 800daac:	58000400 	.word	0x58000400

0800dab0 <HW_IPCC_Init>:
{
 800dab0:	b500      	push	{lr}
 800dab2:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 800dab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800daba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800dabe:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800dac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dac6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800dac8:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800daca:	4b09      	ldr	r3, [pc, #36]	; (800daf0 <HW_IPCC_Init+0x40>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	f042 0201 	orr.w	r2, r2, #1
 800dad2:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dada:	601a      	str	r2, [r3, #0]
  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800dadc:	202c      	movs	r0, #44	; 0x2c
 800dade:	f7f6 ff91 	bl	8004a04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800dae2:	202d      	movs	r0, #45	; 0x2d
 800dae4:	f7f6 ff8e 	bl	8004a04 <HAL_NVIC_EnableIRQ>
}
 800dae8:	b003      	add	sp, #12
 800daea:	f85d fb04 	ldr.w	pc, [sp], #4
 800daee:	bf00      	nop
 800daf0:	58000c00 	.word	0x58000c00

0800daf4 <HW_IPCC_BLE_AclDataEvtHandler>:
{
 800daf4:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800daf6:	4a04      	ldr	r2, [pc, #16]	; (800db08 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800daf8:	6853      	ldr	r3, [r2, #4]
 800dafa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dafe:	6053      	str	r3, [r2, #4]
  HW_IPCC_BLE_AclDataAckNot();
 800db00:	f7ff fac2 	bl	800d088 <HW_IPCC_BLE_AclDataAckNot>
}
 800db04:	bd08      	pop	{r3, pc}
 800db06:	bf00      	nop
 800db08:	58000c00 	.word	0x58000c00

0800db0c <HW_IPCC_BLE_EvtHandler>:
{
 800db0c:	b508      	push	{r3, lr}
  HW_IPCC_BLE_RxEvtNot();
 800db0e:	f7ff faa3 	bl	800d058 <HW_IPCC_BLE_RxEvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800db12:	4b02      	ldr	r3, [pc, #8]	; (800db1c <HW_IPCC_BLE_EvtHandler+0x10>)
 800db14:	2201      	movs	r2, #1
 800db16:	609a      	str	r2, [r3, #8]
}
 800db18:	bd08      	pop	{r3, pc}
 800db1a:	bf00      	nop
 800db1c:	58000c00 	.word	0x58000c00

0800db20 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800db20:	4a02      	ldr	r2, [pc, #8]	; (800db2c <HW_IPCC_SYS_Init+0xc>)
 800db22:	6853      	ldr	r3, [r2, #4]
 800db24:	f023 0302 	bic.w	r3, r3, #2
 800db28:	6053      	str	r3, [r2, #4]
}
 800db2a:	4770      	bx	lr
 800db2c:	58000c00 	.word	0x58000c00

0800db30 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800db30:	4b04      	ldr	r3, [pc, #16]	; (800db44 <HW_IPCC_SYS_SendCmd+0x14>)
 800db32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800db36:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800db3e:	605a      	str	r2, [r3, #4]
}
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	58000c00 	.word	0x58000c00

0800db48 <HW_IPCC_SYS_CmdEvtHandler>:
{
 800db48:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800db4a:	4a04      	ldr	r2, [pc, #16]	; (800db5c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800db4c:	6853      	ldr	r3, [r2, #4]
 800db4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db52:	6053      	str	r3, [r2, #4]
  HW_IPCC_SYS_CmdEvtNot();
 800db54:	f7ff faca 	bl	800d0ec <HW_IPCC_SYS_CmdEvtNot>
}
 800db58:	bd08      	pop	{r3, pc}
 800db5a:	bf00      	nop
 800db5c:	58000c00 	.word	0x58000c00

0800db60 <HW_IPCC_SYS_EvtHandler>:
{
 800db60:	b508      	push	{r3, lr}
  HW_IPCC_SYS_EvtNot();
 800db62:	f7ff facf 	bl	800d104 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800db66:	4b02      	ldr	r3, [pc, #8]	; (800db70 <HW_IPCC_SYS_EvtHandler+0x10>)
 800db68:	2202      	movs	r2, #2
 800db6a:	609a      	str	r2, [r3, #8]
}
 800db6c:	bd08      	pop	{r3, pc}
 800db6e:	bf00      	nop
 800db70:	58000c00 	.word	0x58000c00

0800db74 <HW_IPCC_THREAD_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800db74:	4b04      	ldr	r3, [pc, #16]	; (800db88 <HW_IPCC_THREAD_Init+0x14>)
 800db76:	685a      	ldr	r2, [r3, #4]
 800db78:	f022 0204 	bic.w	r2, r2, #4
 800db7c:	605a      	str	r2, [r3, #4]
 800db7e:	685a      	ldr	r2, [r3, #4]
 800db80:	f022 0210 	bic.w	r2, r2, #16
 800db84:	605a      	str	r2, [r3, #4]
}
 800db86:	4770      	bx	lr
 800db88:	58000c00 	.word	0x58000c00

0800db8c <HW_IPCC_OT_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800db8c:	4b04      	ldr	r3, [pc, #16]	; (800dba0 <HW_IPCC_OT_SendCmd+0x14>)
 800db8e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800db92:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800db94:	685a      	ldr	r2, [r3, #4]
 800db96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800db9a:	605a      	str	r2, [r3, #4]
}
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	58000c00 	.word	0x58000c00

0800dba4 <HW_IPCC_CLI_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800dba4:	4b02      	ldr	r3, [pc, #8]	; (800dbb0 <HW_IPCC_CLI_SendCmd+0xc>)
 800dba6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dbaa:	609a      	str	r2, [r3, #8]
}
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	58000c00 	.word	0x58000c00

0800dbb4 <HW_IPCC_THREAD_SendAck>:
  WRITE_REG(IPCCx->C1SCR, Channel);
 800dbb4:	4b03      	ldr	r3, [pc, #12]	; (800dbc4 <HW_IPCC_THREAD_SendAck+0x10>)
 800dbb6:	2204      	movs	r2, #4
 800dbb8:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	f022 0204 	bic.w	r2, r2, #4
 800dbc0:	605a      	str	r2, [r3, #4]
}
 800dbc2:	4770      	bx	lr
 800dbc4:	58000c00 	.word	0x58000c00

0800dbc8 <HW_IPCC_THREAD_CliSendAck>:
  WRITE_REG(IPCCx->C1SCR, Channel);
 800dbc8:	4b03      	ldr	r3, [pc, #12]	; (800dbd8 <HW_IPCC_THREAD_CliSendAck+0x10>)
 800dbca:	2210      	movs	r2, #16
 800dbcc:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800dbce:	685a      	ldr	r2, [r3, #4]
 800dbd0:	f022 0210 	bic.w	r2, r2, #16
 800dbd4:	605a      	str	r2, [r3, #4]
}
 800dbd6:	4770      	bx	lr
 800dbd8:	58000c00 	.word	0x58000c00

0800dbdc <HW_IPCC_OT_CmdEvtHandler>:
{
 800dbdc:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800dbde:	4a04      	ldr	r2, [pc, #16]	; (800dbf0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800dbe0:	6853      	ldr	r3, [r2, #4]
 800dbe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dbe6:	6053      	str	r3, [r2, #4]
  HW_IPCC_OT_CmdEvtNot();
 800dbe8:	f7ff fae2 	bl	800d1b0 <HW_IPCC_OT_CmdEvtNot>
}
 800dbec:	bd08      	pop	{r3, pc}
 800dbee:	bf00      	nop
 800dbf0:	58000c00 	.word	0x58000c00

0800dbf4 <HW_IPCC_Tx_Handler>:
{
 800dbf4:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800dbf6:	4b21      	ldr	r3, [pc, #132]	; (800dc7c <HW_IPCC_Tx_Handler+0x88>)
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	f013 0f02 	tst.w	r3, #2
 800dbfe:	d104      	bne.n	800dc0a <HW_IPCC_Tx_Handler+0x16>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800dc00:	4b1e      	ldr	r3, [pc, #120]	; (800dc7c <HW_IPCC_Tx_Handler+0x88>)
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800dc08:	d028      	beq.n	800dc5c <HW_IPCC_Tx_Handler+0x68>
 800dc0a:	4b1c      	ldr	r3, [pc, #112]	; (800dc7c <HW_IPCC_Tx_Handler+0x88>)
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	f013 0f04 	tst.w	r3, #4
 800dc12:	d104      	bne.n	800dc1e <HW_IPCC_Tx_Handler+0x2a>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 800dc14:	4b19      	ldr	r3, [pc, #100]	; (800dc7c <HW_IPCC_Tx_Handler+0x88>)
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800dc1c:	d021      	beq.n	800dc62 <HW_IPCC_Tx_Handler+0x6e>
 800dc1e:	4b17      	ldr	r3, [pc, #92]	; (800dc7c <HW_IPCC_Tx_Handler+0x88>)
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	f013 0f02 	tst.w	r3, #2
 800dc26:	d104      	bne.n	800dc32 <HW_IPCC_Tx_Handler+0x3e>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800dc28:	4b14      	ldr	r3, [pc, #80]	; (800dc7c <HW_IPCC_Tx_Handler+0x88>)
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800dc30:	d01a      	beq.n	800dc68 <HW_IPCC_Tx_Handler+0x74>
 800dc32:	4b12      	ldr	r3, [pc, #72]	; (800dc7c <HW_IPCC_Tx_Handler+0x88>)
 800dc34:	68db      	ldr	r3, [r3, #12]
 800dc36:	f013 0f08 	tst.w	r3, #8
 800dc3a:	d104      	bne.n	800dc46 <HW_IPCC_Tx_Handler+0x52>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800dc3c:	4b0f      	ldr	r3, [pc, #60]	; (800dc7c <HW_IPCC_Tx_Handler+0x88>)
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800dc44:	d013      	beq.n	800dc6e <HW_IPCC_Tx_Handler+0x7a>
 800dc46:	4b0d      	ldr	r3, [pc, #52]	; (800dc7c <HW_IPCC_Tx_Handler+0x88>)
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	f013 0f20 	tst.w	r3, #32
 800dc4e:	d104      	bne.n	800dc5a <HW_IPCC_Tx_Handler+0x66>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800dc50:	4b0a      	ldr	r3, [pc, #40]	; (800dc7c <HW_IPCC_Tx_Handler+0x88>)
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800dc58:	d00c      	beq.n	800dc74 <HW_IPCC_Tx_Handler+0x80>
}
 800dc5a:	bd08      	pop	{r3, pc}
    HW_IPCC_SYS_CmdEvtHandler();
 800dc5c:	f7ff ff74 	bl	800db48 <HW_IPCC_SYS_CmdEvtHandler>
 800dc60:	e7fb      	b.n	800dc5a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_OT_CmdEvtHandler();
 800dc62:	f7ff ffbb 	bl	800dbdc <HW_IPCC_OT_CmdEvtHandler>
 800dc66:	e7f8      	b.n	800dc5a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_SYS_CmdEvtHandler();
 800dc68:	f7ff ff6e 	bl	800db48 <HW_IPCC_SYS_CmdEvtHandler>
 800dc6c:	e7f5      	b.n	800dc5a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_MM_FreeBufHandler();
 800dc6e:	f7ff fee9 	bl	800da44 <HW_IPCC_MM_FreeBufHandler>
 800dc72:	e7f2      	b.n	800dc5a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_BLE_AclDataEvtHandler();
 800dc74:	f7ff ff3e 	bl	800daf4 <HW_IPCC_BLE_AclDataEvtHandler>
  return;
 800dc78:	e7ef      	b.n	800dc5a <HW_IPCC_Tx_Handler+0x66>
 800dc7a:	bf00      	nop
 800dc7c:	58000c00 	.word	0x58000c00

0800dc80 <HW_IPCC_THREAD_NotEvtHandler>:
{
 800dc80:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel);
 800dc82:	4a04      	ldr	r2, [pc, #16]	; (800dc94 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 800dc84:	6853      	ldr	r3, [r2, #4]
 800dc86:	f043 0304 	orr.w	r3, r3, #4
 800dc8a:	6053      	str	r3, [r2, #4]
  HW_IPCC_THREAD_EvtNot();
 800dc8c:	f7ff fa9a 	bl	800d1c4 <HW_IPCC_THREAD_EvtNot>
}
 800dc90:	bd08      	pop	{r3, pc}
 800dc92:	bf00      	nop
 800dc94:	58000c00 	.word	0x58000c00

0800dc98 <HW_IPCC_MM_SendFreeBuf>:
{
 800dc98:	b508      	push	{r3, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800dc9a:	4b09      	ldr	r3, [pc, #36]	; (800dcc0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	f013 0f08 	tst.w	r3, #8
 800dca2:	d105      	bne.n	800dcb0 <HW_IPCC_MM_SendFreeBuf+0x18>
    cb();
 800dca4:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800dca6:	4b06      	ldr	r3, [pc, #24]	; (800dcc0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800dca8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800dcac:	609a      	str	r2, [r3, #8]
}
 800dcae:	bd08      	pop	{r3, pc}
    FreeBufCb = cb;
 800dcb0:	4b04      	ldr	r3, [pc, #16]	; (800dcc4 <HW_IPCC_MM_SendFreeBuf+0x2c>)
 800dcb2:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800dcb4:	4a02      	ldr	r2, [pc, #8]	; (800dcc0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800dcb6:	6853      	ldr	r3, [r2, #4]
 800dcb8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800dcbc:	6053      	str	r3, [r2, #4]
 800dcbe:	e7f6      	b.n	800dcae <HW_IPCC_MM_SendFreeBuf+0x16>
 800dcc0:	58000c00 	.word	0x58000c00
 800dcc4:	200049d8 	.word	0x200049d8

0800dcc8 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800dcc8:	4a02      	ldr	r2, [pc, #8]	; (800dcd4 <HW_IPCC_TRACES_Init+0xc>)
 800dcca:	6853      	ldr	r3, [r2, #4]
 800dccc:	f023 0308 	bic.w	r3, r3, #8
 800dcd0:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 800dcd2:	4770      	bx	lr
 800dcd4:	58000c00 	.word	0x58000c00

0800dcd8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800dcd8:	b508      	push	{r3, lr}
  HW_IPCC_TRACES_EvtNot();
 800dcda:	f7ff fac5 	bl	800d268 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800dcde:	4b02      	ldr	r3, [pc, #8]	; (800dce8 <HW_IPCC_TRACES_EvtHandler+0x10>)
 800dce0:	2208      	movs	r2, #8
 800dce2:	609a      	str	r2, [r3, #8]

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 800dce4:	bd08      	pop	{r3, pc}
 800dce6:	bf00      	nop
 800dce8:	58000c00 	.word	0x58000c00

0800dcec <HW_IPCC_Rx_Handler>:
{
 800dcec:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800dcee:	4b21      	ldr	r3, [pc, #132]	; (800dd74 <HW_IPCC_Rx_Handler+0x88>)
 800dcf0:	69db      	ldr	r3, [r3, #28]
 800dcf2:	f013 0f02 	tst.w	r3, #2
 800dcf6:	d004      	beq.n	800dd02 <HW_IPCC_Rx_Handler+0x16>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800dcf8:	4b1e      	ldr	r3, [pc, #120]	; (800dd74 <HW_IPCC_Rx_Handler+0x88>)
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	f013 0f02 	tst.w	r3, #2
 800dd00:	d028      	beq.n	800dd54 <HW_IPCC_Rx_Handler+0x68>
 800dd02:	4b1c      	ldr	r3, [pc, #112]	; (800dd74 <HW_IPCC_Rx_Handler+0x88>)
 800dd04:	69db      	ldr	r3, [r3, #28]
 800dd06:	f013 0f04 	tst.w	r3, #4
 800dd0a:	d004      	beq.n	800dd16 <HW_IPCC_Rx_Handler+0x2a>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800dd0c:	4b19      	ldr	r3, [pc, #100]	; (800dd74 <HW_IPCC_Rx_Handler+0x88>)
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	f013 0f04 	tst.w	r3, #4
 800dd14:	d021      	beq.n	800dd5a <HW_IPCC_Rx_Handler+0x6e>
 800dd16:	4b17      	ldr	r3, [pc, #92]	; (800dd74 <HW_IPCC_Rx_Handler+0x88>)
 800dd18:	69db      	ldr	r3, [r3, #28]
 800dd1a:	f013 0f10 	tst.w	r3, #16
 800dd1e:	d004      	beq.n	800dd2a <HW_IPCC_Rx_Handler+0x3e>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 800dd20:	4b14      	ldr	r3, [pc, #80]	; (800dd74 <HW_IPCC_Rx_Handler+0x88>)
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	f013 0f10 	tst.w	r3, #16
 800dd28:	d01a      	beq.n	800dd60 <HW_IPCC_Rx_Handler+0x74>
 800dd2a:	4b12      	ldr	r3, [pc, #72]	; (800dd74 <HW_IPCC_Rx_Handler+0x88>)
 800dd2c:	69db      	ldr	r3, [r3, #28]
 800dd2e:	f013 0f01 	tst.w	r3, #1
 800dd32:	d004      	beq.n	800dd3e <HW_IPCC_Rx_Handler+0x52>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800dd34:	4b0f      	ldr	r3, [pc, #60]	; (800dd74 <HW_IPCC_Rx_Handler+0x88>)
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	f013 0f01 	tst.w	r3, #1
 800dd3c:	d013      	beq.n	800dd66 <HW_IPCC_Rx_Handler+0x7a>
 800dd3e:	4b0d      	ldr	r3, [pc, #52]	; (800dd74 <HW_IPCC_Rx_Handler+0x88>)
 800dd40:	69db      	ldr	r3, [r3, #28]
 800dd42:	f013 0f08 	tst.w	r3, #8
 800dd46:	d004      	beq.n	800dd52 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800dd48:	4b0a      	ldr	r3, [pc, #40]	; (800dd74 <HW_IPCC_Rx_Handler+0x88>)
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	f013 0f08 	tst.w	r3, #8
 800dd50:	d00c      	beq.n	800dd6c <HW_IPCC_Rx_Handler+0x80>
}
 800dd52:	bd08      	pop	{r3, pc}
      HW_IPCC_SYS_EvtHandler();
 800dd54:	f7ff ff04 	bl	800db60 <HW_IPCC_SYS_EvtHandler>
 800dd58:	e7fb      	b.n	800dd52 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_THREAD_NotEvtHandler();
 800dd5a:	f7ff ff91 	bl	800dc80 <HW_IPCC_THREAD_NotEvtHandler>
 800dd5e:	e7f8      	b.n	800dd52 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_THREAD_CliNotEvtHandler();
 800dd60:	f7ff fe82 	bl	800da68 <HW_IPCC_THREAD_CliNotEvtHandler>
 800dd64:	e7f5      	b.n	800dd52 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_BLE_EvtHandler();
 800dd66:	f7ff fed1 	bl	800db0c <HW_IPCC_BLE_EvtHandler>
 800dd6a:	e7f2      	b.n	800dd52 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_TRACES_EvtHandler();
 800dd6c:	f7ff ffb4 	bl	800dcd8 <HW_IPCC_TRACES_EvtHandler>
  return;
 800dd70:	e7ef      	b.n	800dd52 <HW_IPCC_Rx_Handler+0x66>
 800dd72:	bf00      	nop
 800dd74:	58000c00 	.word	0x58000c00

0800dd78 <UTIL_LPM_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	4a02      	ldr	r2, [pc, #8]	; (800dd84 <UTIL_LPM_Init+0xc>)
 800dd7c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800dd7e:	4a02      	ldr	r2, [pc, #8]	; (800dd88 <UTIL_LPM_Init+0x10>)
 800dd80:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800dd82:	4770      	bx	lr
 800dd84:	200049e0 	.word	0x200049e0
 800dd88:	200049dc 	.word	0x200049dc

0800dd8c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd8c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dd90:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800dd92:	b141      	cbz	r1, 800dda6 <UTIL_LPM_SetOffMode+0x1a>
 800dd94:	2901      	cmp	r1, #1
 800dd96:	d103      	bne.n	800dda0 <UTIL_LPM_SetOffMode+0x14>
  {
    case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800dd98:	4906      	ldr	r1, [pc, #24]	; (800ddb4 <UTIL_LPM_SetOffMode+0x28>)
 800dd9a:	680a      	ldr	r2, [r1, #0]
 800dd9c:	4310      	orrs	r0, r2
 800dd9e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dda0:	f383 8810 	msr	PRIMASK, r3
    default:
      break;
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800dda4:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800dda6:	4903      	ldr	r1, [pc, #12]	; (800ddb4 <UTIL_LPM_SetOffMode+0x28>)
 800dda8:	680a      	ldr	r2, [r1, #0]
 800ddaa:	ea22 0000 	bic.w	r0, r2, r0
 800ddae:	6008      	str	r0, [r1, #0]
      break;
 800ddb0:	e7f6      	b.n	800dda0 <UTIL_LPM_SetOffMode+0x14>
 800ddb2:	bf00      	nop
 800ddb4:	200049dc 	.word	0x200049dc

0800ddb8 <arm_power_f32>:
 800ddb8:	b430      	push	{r4, r5}
 800ddba:	088d      	lsrs	r5, r1, #2
 800ddbc:	eddf 5a20 	vldr	s11, [pc, #128]	; 800de40 <arm_power_f32+0x88>
 800ddc0:	d020      	beq.n	800de04 <arm_power_f32+0x4c>
 800ddc2:	f100 0310 	add.w	r3, r0, #16
 800ddc6:	462c      	mov	r4, r5
 800ddc8:	ed53 6a04 	vldr	s13, [r3, #-16]
 800ddcc:	ed13 7a03 	vldr	s14, [r3, #-12]
 800ddd0:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ddd4:	ed13 6a01 	vldr	s12, [r3, #-4]
 800ddd8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800dddc:	ee27 7a07 	vmul.f32	s14, s14, s14
 800dde0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800dde4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dde8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ddec:	ee26 6a06 	vmul.f32	s12, s12, s12
 800ddf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ddf4:	3c01      	subs	r4, #1
 800ddf6:	f103 0310 	add.w	r3, r3, #16
 800ddfa:	ee76 5a27 	vadd.f32	s11, s12, s15
 800ddfe:	d1e3      	bne.n	800ddc8 <arm_power_f32+0x10>
 800de00:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800de04:	f011 0103 	ands.w	r1, r1, #3
 800de08:	d015      	beq.n	800de36 <arm_power_f32+0x7e>
 800de0a:	edd0 7a00 	vldr	s15, [r0]
 800de0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800de12:	3901      	subs	r1, #1
 800de14:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800de18:	d00d      	beq.n	800de36 <arm_power_f32+0x7e>
 800de1a:	edd0 7a01 	vldr	s15, [r0, #4]
 800de1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800de22:	2901      	cmp	r1, #1
 800de24:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800de28:	d005      	beq.n	800de36 <arm_power_f32+0x7e>
 800de2a:	edd0 7a02 	vldr	s15, [r0, #8]
 800de2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800de32:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800de36:	edc2 5a00 	vstr	s11, [r2]
 800de3a:	bc30      	pop	{r4, r5}
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	00000000 	.word	0x00000000

0800de44 <arm_mat_mult_f32>:
 800de44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de48:	8845      	ldrh	r5, [r0, #2]
 800de4a:	880b      	ldrh	r3, [r1, #0]
 800de4c:	8806      	ldrh	r6, [r0, #0]
 800de4e:	6847      	ldr	r7, [r0, #4]
 800de50:	6854      	ldr	r4, [r2, #4]
 800de52:	6848      	ldr	r0, [r1, #4]
 800de54:	b08b      	sub	sp, #44	; 0x2c
 800de56:	42ab      	cmp	r3, r5
 800de58:	9109      	str	r1, [sp, #36]	; 0x24
 800de5a:	9604      	str	r6, [sp, #16]
 800de5c:	8849      	ldrh	r1, [r1, #2]
 800de5e:	f040 808a 	bne.w	800df76 <arm_mat_mult_f32+0x132>
 800de62:	8815      	ldrh	r5, [r2, #0]
 800de64:	42b5      	cmp	r5, r6
 800de66:	f040 8086 	bne.w	800df76 <arm_mat_mult_f32+0x132>
 800de6a:	8852      	ldrh	r2, [r2, #2]
 800de6c:	428a      	cmp	r2, r1
 800de6e:	f040 8082 	bne.w	800df76 <arm_mat_mult_f32+0x132>
 800de72:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800de76:	1d01      	adds	r1, r0, #4
 800de78:	0116      	lsls	r6, r2, #4
 800de7a:	9108      	str	r1, [sp, #32]
 800de7c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800de80:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800de84:	9101      	str	r1, [sp, #4]
 800de86:	fb06 f108 	mul.w	r1, r6, r8
 800de8a:	0095      	lsls	r5, r2, #2
 800de8c:	9103      	str	r1, [sp, #12]
 800de8e:	00d2      	lsls	r2, r2, #3
 800de90:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800de94:	f003 0903 	and.w	r9, r3, #3
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	f107 0b10 	add.w	fp, r7, #16
 800de9e:	eb04 0a05 	add.w	sl, r4, r5
 800dea2:	9107      	str	r1, [sp, #28]
 800dea4:	9202      	str	r2, [sp, #8]
 800dea6:	9306      	str	r3, [sp, #24]
 800dea8:	f1ab 0310 	sub.w	r3, fp, #16
 800deac:	9305      	str	r3, [sp, #20]
 800deae:	9b07      	ldr	r3, [sp, #28]
 800deb0:	f8dd e020 	ldr.w	lr, [sp, #32]
 800deb4:	eb03 0c0a 	add.w	ip, r3, sl
 800deb8:	eddf 7a31 	vldr	s15, [pc, #196]	; 800df80 <arm_mat_mult_f32+0x13c>
 800debc:	f1b8 0f00 	cmp.w	r8, #0
 800dec0:	d053      	beq.n	800df6a <arm_mat_mult_f32+0x126>
 800dec2:	9b02      	ldr	r3, [sp, #8]
 800dec4:	4644      	mov	r4, r8
 800dec6:	18c1      	adds	r1, r0, r3
 800dec8:	4602      	mov	r2, r0
 800deca:	465b      	mov	r3, fp
 800decc:	ed92 6a00 	vldr	s12, [r2]
 800ded0:	ed13 7a04 	vldr	s14, [r3, #-16]
 800ded4:	ed53 4a03 	vldr	s9, [r3, #-12]
 800ded8:	ed53 6a02 	vldr	s13, [r3, #-8]
 800dedc:	ed91 5a00 	vldr	s10, [r1]
 800dee0:	ed53 5a01 	vldr	s11, [r3, #-4]
 800dee4:	1957      	adds	r7, r2, r5
 800dee6:	ee27 7a06 	vmul.f32	s14, s14, s12
 800deea:	ed97 6a00 	vldr	s12, [r7]
 800deee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800def2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800def6:	194f      	adds	r7, r1, r5
 800def8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800defc:	ee26 7a85 	vmul.f32	s14, s13, s10
 800df00:	edd7 7a00 	vldr	s15, [r7]
 800df04:	ee37 7a06 	vadd.f32	s14, s14, s12
 800df08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800df0c:	3c01      	subs	r4, #1
 800df0e:	4432      	add	r2, r6
 800df10:	4431      	add	r1, r6
 800df12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800df16:	f103 0310 	add.w	r3, r3, #16
 800df1a:	d1d7      	bne.n	800decc <arm_mat_mult_f32+0x88>
 800df1c:	9b03      	ldr	r3, [sp, #12]
 800df1e:	9a01      	ldr	r2, [sp, #4]
 800df20:	4418      	add	r0, r3
 800df22:	f1b9 0f00 	cmp.w	r9, #0
 800df26:	d00b      	beq.n	800df40 <arm_mat_mult_f32+0xfc>
 800df28:	464b      	mov	r3, r9
 800df2a:	edd0 6a00 	vldr	s13, [r0]
 800df2e:	ecb2 7a01 	vldmia	r2!, {s14}
 800df32:	ee27 7a26 	vmul.f32	s14, s14, s13
 800df36:	3b01      	subs	r3, #1
 800df38:	4428      	add	r0, r5
 800df3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800df3e:	d1f4      	bne.n	800df2a <arm_mat_mult_f32+0xe6>
 800df40:	ecec 7a01 	vstmia	ip!, {s15}
 800df44:	45d4      	cmp	ip, sl
 800df46:	4670      	mov	r0, lr
 800df48:	f10e 0e04 	add.w	lr, lr, #4
 800df4c:	d1b4      	bne.n	800deb8 <arm_mat_mult_f32+0x74>
 800df4e:	9a01      	ldr	r2, [sp, #4]
 800df50:	9b06      	ldr	r3, [sp, #24]
 800df52:	4611      	mov	r1, r2
 800df54:	4419      	add	r1, r3
 800df56:	449b      	add	fp, r3
 800df58:	9b04      	ldr	r3, [sp, #16]
 800df5a:	9101      	str	r1, [sp, #4]
 800df5c:	3b01      	subs	r3, #1
 800df5e:	44aa      	add	sl, r5
 800df60:	9304      	str	r3, [sp, #16]
 800df62:	d004      	beq.n	800df6e <arm_mat_mult_f32+0x12a>
 800df64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df66:	6858      	ldr	r0, [r3, #4]
 800df68:	e79e      	b.n	800dea8 <arm_mat_mult_f32+0x64>
 800df6a:	9a05      	ldr	r2, [sp, #20]
 800df6c:	e7d9      	b.n	800df22 <arm_mat_mult_f32+0xde>
 800df6e:	4618      	mov	r0, r3
 800df70:	b00b      	add	sp, #44	; 0x2c
 800df72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df76:	f06f 0002 	mvn.w	r0, #2
 800df7a:	b00b      	add	sp, #44	; 0x2c
 800df7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df80:	00000000 	.word	0x00000000

0800df84 <arm_sin_f32>:
 800df84:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e004 <arm_sin_f32+0x80>
 800df88:	ee20 0a27 	vmul.f32	s0, s0, s15
 800df8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800df90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df94:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800df98:	d504      	bpl.n	800dfa4 <arm_sin_f32+0x20>
 800df9a:	ee17 3a90 	vmov	r3, s15
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	ee07 3a90 	vmov	s15, r3
 800dfa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfa8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800e008 <arm_sin_f32+0x84>
 800dfac:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dfb0:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dfb4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800dfb8:	ee17 3a90 	vmov	r3, s15
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfc2:	d21a      	bcs.n	800dffa <arm_sin_f32+0x76>
 800dfc4:	ee07 3a90 	vmov	s15, r3
 800dfc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfcc:	1c59      	adds	r1, r3, #1
 800dfce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dfd2:	4a0e      	ldr	r2, [pc, #56]	; (800e00c <arm_sin_f32+0x88>)
 800dfd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dfd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dfdc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800dfe0:	ed93 7a00 	vldr	s14, [r3]
 800dfe4:	edd2 6a00 	vldr	s13, [r2]
 800dfe8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dfec:	ee20 0a26 	vmul.f32	s0, s0, s13
 800dff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dff4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800dff8:	4770      	bx	lr
 800dffa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dffe:	2101      	movs	r1, #1
 800e000:	2300      	movs	r3, #0
 800e002:	e7e6      	b.n	800dfd2 <arm_sin_f32+0x4e>
 800e004:	3e22f983 	.word	0x3e22f983
 800e008:	44000000 	.word	0x44000000
 800e00c:	0800f9a4 	.word	0x0800f9a4

0800e010 <arm_cos_f32>:
 800e010:	eddf 7a21 	vldr	s15, [pc, #132]	; 800e098 <arm_cos_f32+0x88>
 800e014:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e018:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e01c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e020:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e028:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e02c:	d504      	bpl.n	800e038 <arm_cos_f32+0x28>
 800e02e:	ee17 3a90 	vmov	r3, s15
 800e032:	3b01      	subs	r3, #1
 800e034:	ee07 3a90 	vmov	s15, r3
 800e038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e03c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800e09c <arm_cos_f32+0x8c>
 800e040:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e044:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e048:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e04c:	ee17 3a90 	vmov	r3, s15
 800e050:	b29b      	uxth	r3, r3
 800e052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e056:	d21a      	bcs.n	800e08e <arm_cos_f32+0x7e>
 800e058:	ee07 3a90 	vmov	s15, r3
 800e05c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e060:	1c59      	adds	r1, r3, #1
 800e062:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e066:	4a0e      	ldr	r2, [pc, #56]	; (800e0a0 <arm_cos_f32+0x90>)
 800e068:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e06c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e070:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e074:	ed93 7a00 	vldr	s14, [r3]
 800e078:	edd2 6a00 	vldr	s13, [r2]
 800e07c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e080:	ee20 0a26 	vmul.f32	s0, s0, s13
 800e084:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e088:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e08c:	4770      	bx	lr
 800e08e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e092:	2101      	movs	r1, #1
 800e094:	2300      	movs	r3, #0
 800e096:	e7e6      	b.n	800e066 <arm_cos_f32+0x56>
 800e098:	3e22f983 	.word	0x3e22f983
 800e09c:	44000000 	.word	0x44000000
 800e0a0:	0800f9a4 	.word	0x0800f9a4

0800e0a4 <arm_sub_f32>:
 800e0a4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800e0a8:	b4f0      	push	{r4, r5, r6, r7}
 800e0aa:	d033      	beq.n	800e114 <arm_sub_f32+0x70>
 800e0ac:	f100 0610 	add.w	r6, r0, #16
 800e0b0:	f101 0510 	add.w	r5, r1, #16
 800e0b4:	f102 0410 	add.w	r4, r2, #16
 800e0b8:	4667      	mov	r7, ip
 800e0ba:	ed15 7a04 	vldr	s14, [r5, #-16]
 800e0be:	ed56 7a04 	vldr	s15, [r6, #-16]
 800e0c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0c6:	3f01      	subs	r7, #1
 800e0c8:	ed44 7a04 	vstr	s15, [r4, #-16]
 800e0cc:	ed15 7a03 	vldr	s14, [r5, #-12]
 800e0d0:	ed56 7a03 	vldr	s15, [r6, #-12]
 800e0d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0d8:	f106 0610 	add.w	r6, r6, #16
 800e0dc:	ed44 7a03 	vstr	s15, [r4, #-12]
 800e0e0:	ed15 7a02 	vldr	s14, [r5, #-8]
 800e0e4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800e0e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0ec:	f105 0510 	add.w	r5, r5, #16
 800e0f0:	ed44 7a02 	vstr	s15, [r4, #-8]
 800e0f4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800e0f8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800e0fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e100:	f104 0410 	add.w	r4, r4, #16
 800e104:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800e108:	d1d7      	bne.n	800e0ba <arm_sub_f32+0x16>
 800e10a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800e10e:	4420      	add	r0, r4
 800e110:	4421      	add	r1, r4
 800e112:	4422      	add	r2, r4
 800e114:	f013 0303 	ands.w	r3, r3, #3
 800e118:	d01b      	beq.n	800e152 <arm_sub_f32+0xae>
 800e11a:	edd0 7a00 	vldr	s15, [r0]
 800e11e:	ed91 7a00 	vldr	s14, [r1]
 800e122:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e126:	3b01      	subs	r3, #1
 800e128:	edc2 7a00 	vstr	s15, [r2]
 800e12c:	d011      	beq.n	800e152 <arm_sub_f32+0xae>
 800e12e:	edd0 7a01 	vldr	s15, [r0, #4]
 800e132:	ed91 7a01 	vldr	s14, [r1, #4]
 800e136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	edc2 7a01 	vstr	s15, [r2, #4]
 800e140:	d007      	beq.n	800e152 <arm_sub_f32+0xae>
 800e142:	edd0 7a02 	vldr	s15, [r0, #8]
 800e146:	ed91 7a02 	vldr	s14, [r1, #8]
 800e14a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e14e:	edc2 7a02 	vstr	s15, [r2, #8]
 800e152:	bcf0      	pop	{r4, r5, r6, r7}
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop

0800e158 <arm_scale_f32>:
 800e158:	b470      	push	{r4, r5, r6}
 800e15a:	0896      	lsrs	r6, r2, #2
 800e15c:	d025      	beq.n	800e1aa <arm_scale_f32+0x52>
 800e15e:	f100 0410 	add.w	r4, r0, #16
 800e162:	f101 0310 	add.w	r3, r1, #16
 800e166:	4635      	mov	r5, r6
 800e168:	ed54 7a04 	vldr	s15, [r4, #-16]
 800e16c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e170:	3d01      	subs	r5, #1
 800e172:	ed43 7a04 	vstr	s15, [r3, #-16]
 800e176:	ed54 7a03 	vldr	s15, [r4, #-12]
 800e17a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e17e:	f104 0410 	add.w	r4, r4, #16
 800e182:	ed43 7a03 	vstr	s15, [r3, #-12]
 800e186:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800e18a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e18e:	f103 0310 	add.w	r3, r3, #16
 800e192:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800e196:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800e19a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e19e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800e1a2:	d1e1      	bne.n	800e168 <arm_scale_f32+0x10>
 800e1a4:	0136      	lsls	r6, r6, #4
 800e1a6:	4430      	add	r0, r6
 800e1a8:	4431      	add	r1, r6
 800e1aa:	f012 0203 	ands.w	r2, r2, #3
 800e1ae:	d015      	beq.n	800e1dc <arm_scale_f32+0x84>
 800e1b0:	edd0 7a00 	vldr	s15, [r0]
 800e1b4:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e1b8:	3a01      	subs	r2, #1
 800e1ba:	edc1 7a00 	vstr	s15, [r1]
 800e1be:	d00d      	beq.n	800e1dc <arm_scale_f32+0x84>
 800e1c0:	edd0 7a01 	vldr	s15, [r0, #4]
 800e1c4:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e1c8:	2a01      	cmp	r2, #1
 800e1ca:	edc1 7a01 	vstr	s15, [r1, #4]
 800e1ce:	d005      	beq.n	800e1dc <arm_scale_f32+0x84>
 800e1d0:	edd0 7a02 	vldr	s15, [r0, #8]
 800e1d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e1d8:	ed81 0a02 	vstr	s0, [r1, #8]
 800e1dc:	bc70      	pop	{r4, r5, r6}
 800e1de:	4770      	bx	lr

0800e1e0 <arm_dot_prod_f32>:
 800e1e0:	b4f0      	push	{r4, r5, r6, r7}
 800e1e2:	0897      	lsrs	r7, r2, #2
 800e1e4:	eddf 5a29 	vldr	s11, [pc, #164]	; 800e28c <arm_dot_prod_f32+0xac>
 800e1e8:	d02d      	beq.n	800e246 <arm_dot_prod_f32+0x66>
 800e1ea:	f100 0510 	add.w	r5, r0, #16
 800e1ee:	f101 0410 	add.w	r4, r1, #16
 800e1f2:	463e      	mov	r6, r7
 800e1f4:	ed55 6a04 	vldr	s13, [r5, #-16]
 800e1f8:	ed54 3a04 	vldr	s7, [r4, #-16]
 800e1fc:	ed15 7a03 	vldr	s14, [r5, #-12]
 800e200:	ed14 4a03 	vldr	s8, [r4, #-12]
 800e204:	ed55 7a02 	vldr	s15, [r5, #-8]
 800e208:	ed54 4a02 	vldr	s9, [r4, #-8]
 800e20c:	ed15 6a01 	vldr	s12, [r5, #-4]
 800e210:	ed14 5a01 	vldr	s10, [r4, #-4]
 800e214:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800e218:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e21c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800e220:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800e224:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e228:	ee66 6a05 	vmul.f32	s13, s12, s10
 800e22c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e230:	3e01      	subs	r6, #1
 800e232:	f105 0510 	add.w	r5, r5, #16
 800e236:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800e23a:	f104 0410 	add.w	r4, r4, #16
 800e23e:	d1d9      	bne.n	800e1f4 <arm_dot_prod_f32+0x14>
 800e240:	013f      	lsls	r7, r7, #4
 800e242:	4438      	add	r0, r7
 800e244:	4439      	add	r1, r7
 800e246:	f012 0203 	ands.w	r2, r2, #3
 800e24a:	d01b      	beq.n	800e284 <arm_dot_prod_f32+0xa4>
 800e24c:	edd1 7a00 	vldr	s15, [r1]
 800e250:	ed90 7a00 	vldr	s14, [r0]
 800e254:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e258:	3a01      	subs	r2, #1
 800e25a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e25e:	d011      	beq.n	800e284 <arm_dot_prod_f32+0xa4>
 800e260:	edd1 7a01 	vldr	s15, [r1, #4]
 800e264:	ed90 7a01 	vldr	s14, [r0, #4]
 800e268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e26c:	2a01      	cmp	r2, #1
 800e26e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e272:	d007      	beq.n	800e284 <arm_dot_prod_f32+0xa4>
 800e274:	edd0 7a02 	vldr	s15, [r0, #8]
 800e278:	ed91 7a02 	vldr	s14, [r1, #8]
 800e27c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e280:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e284:	edc3 5a00 	vstr	s11, [r3]
 800e288:	bcf0      	pop	{r4, r5, r6, r7}
 800e28a:	4770      	bx	lr
 800e28c:	00000000 	.word	0x00000000

0800e290 <arm_add_f32>:
 800e290:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800e294:	b4f0      	push	{r4, r5, r6, r7}
 800e296:	d033      	beq.n	800e300 <arm_add_f32+0x70>
 800e298:	f100 0610 	add.w	r6, r0, #16
 800e29c:	f101 0510 	add.w	r5, r1, #16
 800e2a0:	f102 0410 	add.w	r4, r2, #16
 800e2a4:	4667      	mov	r7, ip
 800e2a6:	ed15 7a04 	vldr	s14, [r5, #-16]
 800e2aa:	ed56 7a04 	vldr	s15, [r6, #-16]
 800e2ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2b2:	3f01      	subs	r7, #1
 800e2b4:	ed44 7a04 	vstr	s15, [r4, #-16]
 800e2b8:	ed15 7a03 	vldr	s14, [r5, #-12]
 800e2bc:	ed56 7a03 	vldr	s15, [r6, #-12]
 800e2c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2c4:	f106 0610 	add.w	r6, r6, #16
 800e2c8:	ed44 7a03 	vstr	s15, [r4, #-12]
 800e2cc:	ed15 7a02 	vldr	s14, [r5, #-8]
 800e2d0:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800e2d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2d8:	f105 0510 	add.w	r5, r5, #16
 800e2dc:	ed44 7a02 	vstr	s15, [r4, #-8]
 800e2e0:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800e2e4:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800e2e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2ec:	f104 0410 	add.w	r4, r4, #16
 800e2f0:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800e2f4:	d1d7      	bne.n	800e2a6 <arm_add_f32+0x16>
 800e2f6:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800e2fa:	4420      	add	r0, r4
 800e2fc:	4421      	add	r1, r4
 800e2fe:	4422      	add	r2, r4
 800e300:	f013 0303 	ands.w	r3, r3, #3
 800e304:	d01b      	beq.n	800e33e <arm_add_f32+0xae>
 800e306:	edd1 7a00 	vldr	s15, [r1]
 800e30a:	ed90 7a00 	vldr	s14, [r0]
 800e30e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e312:	3b01      	subs	r3, #1
 800e314:	edc2 7a00 	vstr	s15, [r2]
 800e318:	d011      	beq.n	800e33e <arm_add_f32+0xae>
 800e31a:	edd0 7a01 	vldr	s15, [r0, #4]
 800e31e:	ed91 7a01 	vldr	s14, [r1, #4]
 800e322:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e326:	2b01      	cmp	r3, #1
 800e328:	edc2 7a01 	vstr	s15, [r2, #4]
 800e32c:	d007      	beq.n	800e33e <arm_add_f32+0xae>
 800e32e:	edd0 7a02 	vldr	s15, [r0, #8]
 800e332:	ed91 7a02 	vldr	s14, [r1, #8]
 800e336:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e33a:	edc2 7a02 	vstr	s15, [r2, #8]
 800e33e:	bcf0      	pop	{r4, r5, r6, r7}
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop

0800e344 <__errno>:
 800e344:	4b01      	ldr	r3, [pc, #4]	; (800e34c <__errno+0x8>)
 800e346:	6818      	ldr	r0, [r3, #0]
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	20000070 	.word	0x20000070

0800e350 <__libc_init_array>:
 800e350:	b570      	push	{r4, r5, r6, lr}
 800e352:	4e0d      	ldr	r6, [pc, #52]	; (800e388 <__libc_init_array+0x38>)
 800e354:	4c0d      	ldr	r4, [pc, #52]	; (800e38c <__libc_init_array+0x3c>)
 800e356:	1ba4      	subs	r4, r4, r6
 800e358:	10a4      	asrs	r4, r4, #2
 800e35a:	2500      	movs	r5, #0
 800e35c:	42a5      	cmp	r5, r4
 800e35e:	d109      	bne.n	800e374 <__libc_init_array+0x24>
 800e360:	4e0b      	ldr	r6, [pc, #44]	; (800e390 <__libc_init_array+0x40>)
 800e362:	4c0c      	ldr	r4, [pc, #48]	; (800e394 <__libc_init_array+0x44>)
 800e364:	f001 f8d2 	bl	800f50c <_init>
 800e368:	1ba4      	subs	r4, r4, r6
 800e36a:	10a4      	asrs	r4, r4, #2
 800e36c:	2500      	movs	r5, #0
 800e36e:	42a5      	cmp	r5, r4
 800e370:	d105      	bne.n	800e37e <__libc_init_array+0x2e>
 800e372:	bd70      	pop	{r4, r5, r6, pc}
 800e374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e378:	4798      	blx	r3
 800e37a:	3501      	adds	r5, #1
 800e37c:	e7ee      	b.n	800e35c <__libc_init_array+0xc>
 800e37e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e382:	4798      	blx	r3
 800e384:	3501      	adds	r5, #1
 800e386:	e7f2      	b.n	800e36e <__libc_init_array+0x1e>
 800e388:	08010260 	.word	0x08010260
 800e38c:	08010260 	.word	0x08010260
 800e390:	08010260 	.word	0x08010260
 800e394:	08010264 	.word	0x08010264

0800e398 <memcpy>:
 800e398:	b510      	push	{r4, lr}
 800e39a:	1e43      	subs	r3, r0, #1
 800e39c:	440a      	add	r2, r1
 800e39e:	4291      	cmp	r1, r2
 800e3a0:	d100      	bne.n	800e3a4 <memcpy+0xc>
 800e3a2:	bd10      	pop	{r4, pc}
 800e3a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3ac:	e7f7      	b.n	800e39e <memcpy+0x6>

0800e3ae <memset>:
 800e3ae:	4402      	add	r2, r0
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d100      	bne.n	800e3b8 <memset+0xa>
 800e3b6:	4770      	bx	lr
 800e3b8:	f803 1b01 	strb.w	r1, [r3], #1
 800e3bc:	e7f9      	b.n	800e3b2 <memset+0x4>
	...

0800e3c0 <pow>:
 800e3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c4:	ed2d 8b04 	vpush	{d8-d9}
 800e3c8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800e69c <pow+0x2dc>
 800e3cc:	b08d      	sub	sp, #52	; 0x34
 800e3ce:	ec57 6b10 	vmov	r6, r7, d0
 800e3d2:	ec55 4b11 	vmov	r4, r5, d1
 800e3d6:	f000 f9b3 	bl	800e740 <__ieee754_pow>
 800e3da:	f999 3000 	ldrsb.w	r3, [r9]
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	eeb0 8a40 	vmov.f32	s16, s0
 800e3e6:	eef0 8a60 	vmov.f32	s17, s1
 800e3ea:	46c8      	mov	r8, r9
 800e3ec:	d05f      	beq.n	800e4ae <pow+0xee>
 800e3ee:	4622      	mov	r2, r4
 800e3f0:	462b      	mov	r3, r5
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	4629      	mov	r1, r5
 800e3f6:	f7f2 fb23 	bl	8000a40 <__aeabi_dcmpun>
 800e3fa:	4683      	mov	fp, r0
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d156      	bne.n	800e4ae <pow+0xee>
 800e400:	4632      	mov	r2, r6
 800e402:	463b      	mov	r3, r7
 800e404:	4630      	mov	r0, r6
 800e406:	4639      	mov	r1, r7
 800e408:	f7f2 fb1a 	bl	8000a40 <__aeabi_dcmpun>
 800e40c:	9001      	str	r0, [sp, #4]
 800e40e:	b1e8      	cbz	r0, 800e44c <pow+0x8c>
 800e410:	2200      	movs	r2, #0
 800e412:	2300      	movs	r3, #0
 800e414:	4620      	mov	r0, r4
 800e416:	4629      	mov	r1, r5
 800e418:	f7f2 fae0 	bl	80009dc <__aeabi_dcmpeq>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d046      	beq.n	800e4ae <pow+0xee>
 800e420:	2301      	movs	r3, #1
 800e422:	9302      	str	r3, [sp, #8]
 800e424:	4b96      	ldr	r3, [pc, #600]	; (800e680 <pow+0x2c0>)
 800e426:	9303      	str	r3, [sp, #12]
 800e428:	4b96      	ldr	r3, [pc, #600]	; (800e684 <pow+0x2c4>)
 800e42a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800e42e:	2200      	movs	r2, #0
 800e430:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e434:	9b00      	ldr	r3, [sp, #0]
 800e436:	2b02      	cmp	r3, #2
 800e438:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e43c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e440:	d033      	beq.n	800e4aa <pow+0xea>
 800e442:	a802      	add	r0, sp, #8
 800e444:	f000 ff4e 	bl	800f2e4 <matherr>
 800e448:	bb48      	cbnz	r0, 800e49e <pow+0xde>
 800e44a:	e05d      	b.n	800e508 <pow+0x148>
 800e44c:	f04f 0a00 	mov.w	sl, #0
 800e450:	f04f 0b00 	mov.w	fp, #0
 800e454:	4652      	mov	r2, sl
 800e456:	465b      	mov	r3, fp
 800e458:	4630      	mov	r0, r6
 800e45a:	4639      	mov	r1, r7
 800e45c:	f7f2 fabe 	bl	80009dc <__aeabi_dcmpeq>
 800e460:	ec4b ab19 	vmov	d9, sl, fp
 800e464:	2800      	cmp	r0, #0
 800e466:	d054      	beq.n	800e512 <pow+0x152>
 800e468:	4652      	mov	r2, sl
 800e46a:	465b      	mov	r3, fp
 800e46c:	4620      	mov	r0, r4
 800e46e:	4629      	mov	r1, r5
 800e470:	f7f2 fab4 	bl	80009dc <__aeabi_dcmpeq>
 800e474:	4680      	mov	r8, r0
 800e476:	b318      	cbz	r0, 800e4c0 <pow+0x100>
 800e478:	2301      	movs	r3, #1
 800e47a:	9302      	str	r3, [sp, #8]
 800e47c:	4b80      	ldr	r3, [pc, #512]	; (800e680 <pow+0x2c0>)
 800e47e:	9303      	str	r3, [sp, #12]
 800e480:	9b01      	ldr	r3, [sp, #4]
 800e482:	930a      	str	r3, [sp, #40]	; 0x28
 800e484:	9b00      	ldr	r3, [sp, #0]
 800e486:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e48a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e48e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d0d5      	beq.n	800e442 <pow+0x82>
 800e496:	4b7b      	ldr	r3, [pc, #492]	; (800e684 <pow+0x2c4>)
 800e498:	2200      	movs	r2, #0
 800e49a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4a0:	b11b      	cbz	r3, 800e4aa <pow+0xea>
 800e4a2:	f7ff ff4f 	bl	800e344 <__errno>
 800e4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4a8:	6003      	str	r3, [r0, #0]
 800e4aa:	ed9d 8b08 	vldr	d8, [sp, #32]
 800e4ae:	eeb0 0a48 	vmov.f32	s0, s16
 800e4b2:	eef0 0a68 	vmov.f32	s1, s17
 800e4b6:	b00d      	add	sp, #52	; 0x34
 800e4b8:	ecbd 8b04 	vpop	{d8-d9}
 800e4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c0:	ec45 4b10 	vmov	d0, r4, r5
 800e4c4:	f000 ff06 	bl	800f2d4 <finite>
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	d0f0      	beq.n	800e4ae <pow+0xee>
 800e4cc:	4652      	mov	r2, sl
 800e4ce:	465b      	mov	r3, fp
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	4629      	mov	r1, r5
 800e4d4:	f7f2 fa8c 	bl	80009f0 <__aeabi_dcmplt>
 800e4d8:	2800      	cmp	r0, #0
 800e4da:	d0e8      	beq.n	800e4ae <pow+0xee>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	9302      	str	r3, [sp, #8]
 800e4e0:	4b67      	ldr	r3, [pc, #412]	; (800e680 <pow+0x2c0>)
 800e4e2:	9303      	str	r3, [sp, #12]
 800e4e4:	f999 3000 	ldrsb.w	r3, [r9]
 800e4e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800e4ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e4f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e4f4:	b913      	cbnz	r3, 800e4fc <pow+0x13c>
 800e4f6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800e4fa:	e7a2      	b.n	800e442 <pow+0x82>
 800e4fc:	4962      	ldr	r1, [pc, #392]	; (800e688 <pow+0x2c8>)
 800e4fe:	2000      	movs	r0, #0
 800e500:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e504:	2b02      	cmp	r3, #2
 800e506:	d19c      	bne.n	800e442 <pow+0x82>
 800e508:	f7ff ff1c 	bl	800e344 <__errno>
 800e50c:	2321      	movs	r3, #33	; 0x21
 800e50e:	6003      	str	r3, [r0, #0]
 800e510:	e7c5      	b.n	800e49e <pow+0xde>
 800e512:	eeb0 0a48 	vmov.f32	s0, s16
 800e516:	eef0 0a68 	vmov.f32	s1, s17
 800e51a:	f000 fedb 	bl	800f2d4 <finite>
 800e51e:	9000      	str	r0, [sp, #0]
 800e520:	2800      	cmp	r0, #0
 800e522:	f040 8081 	bne.w	800e628 <pow+0x268>
 800e526:	ec47 6b10 	vmov	d0, r6, r7
 800e52a:	f000 fed3 	bl	800f2d4 <finite>
 800e52e:	2800      	cmp	r0, #0
 800e530:	d07a      	beq.n	800e628 <pow+0x268>
 800e532:	ec45 4b10 	vmov	d0, r4, r5
 800e536:	f000 fecd 	bl	800f2d4 <finite>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d074      	beq.n	800e628 <pow+0x268>
 800e53e:	ec53 2b18 	vmov	r2, r3, d8
 800e542:	ee18 0a10 	vmov	r0, s16
 800e546:	4619      	mov	r1, r3
 800e548:	f7f2 fa7a 	bl	8000a40 <__aeabi_dcmpun>
 800e54c:	f999 9000 	ldrsb.w	r9, [r9]
 800e550:	4b4b      	ldr	r3, [pc, #300]	; (800e680 <pow+0x2c0>)
 800e552:	b1b0      	cbz	r0, 800e582 <pow+0x1c2>
 800e554:	2201      	movs	r2, #1
 800e556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e55a:	9b00      	ldr	r3, [sp, #0]
 800e55c:	930a      	str	r3, [sp, #40]	; 0x28
 800e55e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e562:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e566:	f1b9 0f00 	cmp.w	r9, #0
 800e56a:	d0c4      	beq.n	800e4f6 <pow+0x136>
 800e56c:	4652      	mov	r2, sl
 800e56e:	465b      	mov	r3, fp
 800e570:	4650      	mov	r0, sl
 800e572:	4659      	mov	r1, fp
 800e574:	f7f2 f8f4 	bl	8000760 <__aeabi_ddiv>
 800e578:	f1b9 0f02 	cmp.w	r9, #2
 800e57c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e580:	e7c1      	b.n	800e506 <pow+0x146>
 800e582:	2203      	movs	r2, #3
 800e584:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e588:	900a      	str	r0, [sp, #40]	; 0x28
 800e58a:	4629      	mov	r1, r5
 800e58c:	4620      	mov	r0, r4
 800e58e:	2200      	movs	r2, #0
 800e590:	4b3e      	ldr	r3, [pc, #248]	; (800e68c <pow+0x2cc>)
 800e592:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e596:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e59a:	f7f1 ffb7 	bl	800050c <__aeabi_dmul>
 800e59e:	4604      	mov	r4, r0
 800e5a0:	460d      	mov	r5, r1
 800e5a2:	f1b9 0f00 	cmp.w	r9, #0
 800e5a6:	d124      	bne.n	800e5f2 <pow+0x232>
 800e5a8:	4b39      	ldr	r3, [pc, #228]	; (800e690 <pow+0x2d0>)
 800e5aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e5ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	4652      	mov	r2, sl
 800e5b6:	465b      	mov	r3, fp
 800e5b8:	4639      	mov	r1, r7
 800e5ba:	f7f2 fa19 	bl	80009f0 <__aeabi_dcmplt>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	d056      	beq.n	800e670 <pow+0x2b0>
 800e5c2:	ec45 4b10 	vmov	d0, r4, r5
 800e5c6:	f000 fe97 	bl	800f2f8 <rint>
 800e5ca:	4622      	mov	r2, r4
 800e5cc:	462b      	mov	r3, r5
 800e5ce:	ec51 0b10 	vmov	r0, r1, d0
 800e5d2:	f7f2 fa03 	bl	80009dc <__aeabi_dcmpeq>
 800e5d6:	b920      	cbnz	r0, 800e5e2 <pow+0x222>
 800e5d8:	4b2e      	ldr	r3, [pc, #184]	; (800e694 <pow+0x2d4>)
 800e5da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e5de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e5e2:	f998 3000 	ldrsb.w	r3, [r8]
 800e5e6:	2b02      	cmp	r3, #2
 800e5e8:	d142      	bne.n	800e670 <pow+0x2b0>
 800e5ea:	f7ff feab 	bl	800e344 <__errno>
 800e5ee:	2322      	movs	r3, #34	; 0x22
 800e5f0:	e78d      	b.n	800e50e <pow+0x14e>
 800e5f2:	4b29      	ldr	r3, [pc, #164]	; (800e698 <pow+0x2d8>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e5fa:	4630      	mov	r0, r6
 800e5fc:	4652      	mov	r2, sl
 800e5fe:	465b      	mov	r3, fp
 800e600:	4639      	mov	r1, r7
 800e602:	f7f2 f9f5 	bl	80009f0 <__aeabi_dcmplt>
 800e606:	2800      	cmp	r0, #0
 800e608:	d0eb      	beq.n	800e5e2 <pow+0x222>
 800e60a:	ec45 4b10 	vmov	d0, r4, r5
 800e60e:	f000 fe73 	bl	800f2f8 <rint>
 800e612:	4622      	mov	r2, r4
 800e614:	462b      	mov	r3, r5
 800e616:	ec51 0b10 	vmov	r0, r1, d0
 800e61a:	f7f2 f9df 	bl	80009dc <__aeabi_dcmpeq>
 800e61e:	2800      	cmp	r0, #0
 800e620:	d1df      	bne.n	800e5e2 <pow+0x222>
 800e622:	2200      	movs	r2, #0
 800e624:	4b18      	ldr	r3, [pc, #96]	; (800e688 <pow+0x2c8>)
 800e626:	e7da      	b.n	800e5de <pow+0x21e>
 800e628:	2200      	movs	r2, #0
 800e62a:	2300      	movs	r3, #0
 800e62c:	ec51 0b18 	vmov	r0, r1, d8
 800e630:	f7f2 f9d4 	bl	80009dc <__aeabi_dcmpeq>
 800e634:	2800      	cmp	r0, #0
 800e636:	f43f af3a 	beq.w	800e4ae <pow+0xee>
 800e63a:	ec47 6b10 	vmov	d0, r6, r7
 800e63e:	f000 fe49 	bl	800f2d4 <finite>
 800e642:	2800      	cmp	r0, #0
 800e644:	f43f af33 	beq.w	800e4ae <pow+0xee>
 800e648:	ec45 4b10 	vmov	d0, r4, r5
 800e64c:	f000 fe42 	bl	800f2d4 <finite>
 800e650:	2800      	cmp	r0, #0
 800e652:	f43f af2c 	beq.w	800e4ae <pow+0xee>
 800e656:	2304      	movs	r3, #4
 800e658:	9302      	str	r3, [sp, #8]
 800e65a:	4b09      	ldr	r3, [pc, #36]	; (800e680 <pow+0x2c0>)
 800e65c:	9303      	str	r3, [sp, #12]
 800e65e:	2300      	movs	r3, #0
 800e660:	930a      	str	r3, [sp, #40]	; 0x28
 800e662:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e666:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e66a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800e66e:	e7b8      	b.n	800e5e2 <pow+0x222>
 800e670:	a802      	add	r0, sp, #8
 800e672:	f000 fe37 	bl	800f2e4 <matherr>
 800e676:	2800      	cmp	r0, #0
 800e678:	f47f af11 	bne.w	800e49e <pow+0xde>
 800e67c:	e7b5      	b.n	800e5ea <pow+0x22a>
 800e67e:	bf00      	nop
 800e680:	08010208 	.word	0x08010208
 800e684:	3ff00000 	.word	0x3ff00000
 800e688:	fff00000 	.word	0xfff00000
 800e68c:	3fe00000 	.word	0x3fe00000
 800e690:	47efffff 	.word	0x47efffff
 800e694:	c7efffff 	.word	0xc7efffff
 800e698:	7ff00000 	.word	0x7ff00000
 800e69c:	200000d4 	.word	0x200000d4

0800e6a0 <sqrtf>:
 800e6a0:	b510      	push	{r4, lr}
 800e6a2:	ed2d 8b02 	vpush	{d8}
 800e6a6:	b08a      	sub	sp, #40	; 0x28
 800e6a8:	eeb0 8a40 	vmov.f32	s16, s0
 800e6ac:	f000 fe06 	bl	800f2bc <__ieee754_sqrtf>
 800e6b0:	4b21      	ldr	r3, [pc, #132]	; (800e738 <sqrtf+0x98>)
 800e6b2:	f993 4000 	ldrsb.w	r4, [r3]
 800e6b6:	1c63      	adds	r3, r4, #1
 800e6b8:	d02c      	beq.n	800e714 <sqrtf+0x74>
 800e6ba:	eeb4 8a48 	vcmp.f32	s16, s16
 800e6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c2:	d627      	bvs.n	800e714 <sqrtf+0x74>
 800e6c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6cc:	d522      	bpl.n	800e714 <sqrtf+0x74>
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	9300      	str	r3, [sp, #0]
 800e6d2:	4b1a      	ldr	r3, [pc, #104]	; (800e73c <sqrtf+0x9c>)
 800e6d4:	9301      	str	r3, [sp, #4]
 800e6d6:	ee18 0a10 	vmov	r0, s16
 800e6da:	2300      	movs	r3, #0
 800e6dc:	9308      	str	r3, [sp, #32]
 800e6de:	f7f1 febd 	bl	800045c <__aeabi_f2d>
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e6e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	b9ac      	cbnz	r4, 800e71c <sqrtf+0x7c>
 800e6f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e6f4:	4668      	mov	r0, sp
 800e6f6:	f000 fdf5 	bl	800f2e4 <matherr>
 800e6fa:	b1b8      	cbz	r0, 800e72c <sqrtf+0x8c>
 800e6fc:	9b08      	ldr	r3, [sp, #32]
 800e6fe:	b11b      	cbz	r3, 800e708 <sqrtf+0x68>
 800e700:	f7ff fe20 	bl	800e344 <__errno>
 800e704:	9b08      	ldr	r3, [sp, #32]
 800e706:	6003      	str	r3, [r0, #0]
 800e708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e70c:	f7f2 f9ae 	bl	8000a6c <__aeabi_d2f>
 800e710:	ee00 0a10 	vmov	s0, r0
 800e714:	b00a      	add	sp, #40	; 0x28
 800e716:	ecbd 8b02 	vpop	{d8}
 800e71a:	bd10      	pop	{r4, pc}
 800e71c:	4610      	mov	r0, r2
 800e71e:	4619      	mov	r1, r3
 800e720:	f7f2 f81e 	bl	8000760 <__aeabi_ddiv>
 800e724:	2c02      	cmp	r4, #2
 800e726:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e72a:	d1e3      	bne.n	800e6f4 <sqrtf+0x54>
 800e72c:	f7ff fe0a 	bl	800e344 <__errno>
 800e730:	2321      	movs	r3, #33	; 0x21
 800e732:	6003      	str	r3, [r0, #0]
 800e734:	e7e2      	b.n	800e6fc <sqrtf+0x5c>
 800e736:	bf00      	nop
 800e738:	200000d4 	.word	0x200000d4
 800e73c:	0801020c 	.word	0x0801020c

0800e740 <__ieee754_pow>:
 800e740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e744:	b091      	sub	sp, #68	; 0x44
 800e746:	ed8d 1b00 	vstr	d1, [sp]
 800e74a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e74e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e752:	ea58 0302 	orrs.w	r3, r8, r2
 800e756:	ec57 6b10 	vmov	r6, r7, d0
 800e75a:	f000 84be 	beq.w	800f0da <__ieee754_pow+0x99a>
 800e75e:	4b7a      	ldr	r3, [pc, #488]	; (800e948 <__ieee754_pow+0x208>)
 800e760:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e764:	429c      	cmp	r4, r3
 800e766:	463d      	mov	r5, r7
 800e768:	ee10 aa10 	vmov	sl, s0
 800e76c:	dc09      	bgt.n	800e782 <__ieee754_pow+0x42>
 800e76e:	d103      	bne.n	800e778 <__ieee754_pow+0x38>
 800e770:	b93e      	cbnz	r6, 800e782 <__ieee754_pow+0x42>
 800e772:	45a0      	cmp	r8, r4
 800e774:	dc0d      	bgt.n	800e792 <__ieee754_pow+0x52>
 800e776:	e001      	b.n	800e77c <__ieee754_pow+0x3c>
 800e778:	4598      	cmp	r8, r3
 800e77a:	dc02      	bgt.n	800e782 <__ieee754_pow+0x42>
 800e77c:	4598      	cmp	r8, r3
 800e77e:	d10e      	bne.n	800e79e <__ieee754_pow+0x5e>
 800e780:	b16a      	cbz	r2, 800e79e <__ieee754_pow+0x5e>
 800e782:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e786:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e78a:	ea54 030a 	orrs.w	r3, r4, sl
 800e78e:	f000 84a4 	beq.w	800f0da <__ieee754_pow+0x99a>
 800e792:	486e      	ldr	r0, [pc, #440]	; (800e94c <__ieee754_pow+0x20c>)
 800e794:	b011      	add	sp, #68	; 0x44
 800e796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79a:	f000 bda5 	b.w	800f2e8 <nan>
 800e79e:	2d00      	cmp	r5, #0
 800e7a0:	da53      	bge.n	800e84a <__ieee754_pow+0x10a>
 800e7a2:	4b6b      	ldr	r3, [pc, #428]	; (800e950 <__ieee754_pow+0x210>)
 800e7a4:	4598      	cmp	r8, r3
 800e7a6:	dc4d      	bgt.n	800e844 <__ieee754_pow+0x104>
 800e7a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e7ac:	4598      	cmp	r8, r3
 800e7ae:	dd4c      	ble.n	800e84a <__ieee754_pow+0x10a>
 800e7b0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e7b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e7b8:	2b14      	cmp	r3, #20
 800e7ba:	dd26      	ble.n	800e80a <__ieee754_pow+0xca>
 800e7bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e7c0:	fa22 f103 	lsr.w	r1, r2, r3
 800e7c4:	fa01 f303 	lsl.w	r3, r1, r3
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d13e      	bne.n	800e84a <__ieee754_pow+0x10a>
 800e7cc:	f001 0101 	and.w	r1, r1, #1
 800e7d0:	f1c1 0b02 	rsb	fp, r1, #2
 800e7d4:	2a00      	cmp	r2, #0
 800e7d6:	d15b      	bne.n	800e890 <__ieee754_pow+0x150>
 800e7d8:	4b5b      	ldr	r3, [pc, #364]	; (800e948 <__ieee754_pow+0x208>)
 800e7da:	4598      	cmp	r8, r3
 800e7dc:	d124      	bne.n	800e828 <__ieee754_pow+0xe8>
 800e7de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e7e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e7e6:	ea53 030a 	orrs.w	r3, r3, sl
 800e7ea:	f000 8476 	beq.w	800f0da <__ieee754_pow+0x99a>
 800e7ee:	4b59      	ldr	r3, [pc, #356]	; (800e954 <__ieee754_pow+0x214>)
 800e7f0:	429c      	cmp	r4, r3
 800e7f2:	dd2d      	ble.n	800e850 <__ieee754_pow+0x110>
 800e7f4:	f1b9 0f00 	cmp.w	r9, #0
 800e7f8:	f280 8473 	bge.w	800f0e2 <__ieee754_pow+0x9a2>
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	2100      	movs	r1, #0
 800e800:	ec41 0b10 	vmov	d0, r0, r1
 800e804:	b011      	add	sp, #68	; 0x44
 800e806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e80a:	2a00      	cmp	r2, #0
 800e80c:	d13e      	bne.n	800e88c <__ieee754_pow+0x14c>
 800e80e:	f1c3 0314 	rsb	r3, r3, #20
 800e812:	fa48 f103 	asr.w	r1, r8, r3
 800e816:	fa01 f303 	lsl.w	r3, r1, r3
 800e81a:	4543      	cmp	r3, r8
 800e81c:	f040 8469 	bne.w	800f0f2 <__ieee754_pow+0x9b2>
 800e820:	f001 0101 	and.w	r1, r1, #1
 800e824:	f1c1 0b02 	rsb	fp, r1, #2
 800e828:	4b4b      	ldr	r3, [pc, #300]	; (800e958 <__ieee754_pow+0x218>)
 800e82a:	4598      	cmp	r8, r3
 800e82c:	d118      	bne.n	800e860 <__ieee754_pow+0x120>
 800e82e:	f1b9 0f00 	cmp.w	r9, #0
 800e832:	f280 845a 	bge.w	800f0ea <__ieee754_pow+0x9aa>
 800e836:	4948      	ldr	r1, [pc, #288]	; (800e958 <__ieee754_pow+0x218>)
 800e838:	4632      	mov	r2, r6
 800e83a:	463b      	mov	r3, r7
 800e83c:	2000      	movs	r0, #0
 800e83e:	f7f1 ff8f 	bl	8000760 <__aeabi_ddiv>
 800e842:	e7dd      	b.n	800e800 <__ieee754_pow+0xc0>
 800e844:	f04f 0b02 	mov.w	fp, #2
 800e848:	e7c4      	b.n	800e7d4 <__ieee754_pow+0x94>
 800e84a:	f04f 0b00 	mov.w	fp, #0
 800e84e:	e7c1      	b.n	800e7d4 <__ieee754_pow+0x94>
 800e850:	f1b9 0f00 	cmp.w	r9, #0
 800e854:	dad2      	bge.n	800e7fc <__ieee754_pow+0xbc>
 800e856:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e85a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e85e:	e7cf      	b.n	800e800 <__ieee754_pow+0xc0>
 800e860:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e864:	d106      	bne.n	800e874 <__ieee754_pow+0x134>
 800e866:	4632      	mov	r2, r6
 800e868:	463b      	mov	r3, r7
 800e86a:	4610      	mov	r0, r2
 800e86c:	4619      	mov	r1, r3
 800e86e:	f7f1 fe4d 	bl	800050c <__aeabi_dmul>
 800e872:	e7c5      	b.n	800e800 <__ieee754_pow+0xc0>
 800e874:	4b39      	ldr	r3, [pc, #228]	; (800e95c <__ieee754_pow+0x21c>)
 800e876:	4599      	cmp	r9, r3
 800e878:	d10a      	bne.n	800e890 <__ieee754_pow+0x150>
 800e87a:	2d00      	cmp	r5, #0
 800e87c:	db08      	blt.n	800e890 <__ieee754_pow+0x150>
 800e87e:	ec47 6b10 	vmov	d0, r6, r7
 800e882:	b011      	add	sp, #68	; 0x44
 800e884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e888:	f000 bc68 	b.w	800f15c <__ieee754_sqrt>
 800e88c:	f04f 0b00 	mov.w	fp, #0
 800e890:	ec47 6b10 	vmov	d0, r6, r7
 800e894:	f000 fd15 	bl	800f2c2 <fabs>
 800e898:	ec51 0b10 	vmov	r0, r1, d0
 800e89c:	f1ba 0f00 	cmp.w	sl, #0
 800e8a0:	d127      	bne.n	800e8f2 <__ieee754_pow+0x1b2>
 800e8a2:	b124      	cbz	r4, 800e8ae <__ieee754_pow+0x16e>
 800e8a4:	4b2c      	ldr	r3, [pc, #176]	; (800e958 <__ieee754_pow+0x218>)
 800e8a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d121      	bne.n	800e8f2 <__ieee754_pow+0x1b2>
 800e8ae:	f1b9 0f00 	cmp.w	r9, #0
 800e8b2:	da05      	bge.n	800e8c0 <__ieee754_pow+0x180>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	4927      	ldr	r1, [pc, #156]	; (800e958 <__ieee754_pow+0x218>)
 800e8bc:	f7f1 ff50 	bl	8000760 <__aeabi_ddiv>
 800e8c0:	2d00      	cmp	r5, #0
 800e8c2:	da9d      	bge.n	800e800 <__ieee754_pow+0xc0>
 800e8c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e8c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e8cc:	ea54 030b 	orrs.w	r3, r4, fp
 800e8d0:	d108      	bne.n	800e8e4 <__ieee754_pow+0x1a4>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	4610      	mov	r0, r2
 800e8d8:	4619      	mov	r1, r3
 800e8da:	f7f1 fc5f 	bl	800019c <__aeabi_dsub>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	e7ac      	b.n	800e83e <__ieee754_pow+0xfe>
 800e8e4:	f1bb 0f01 	cmp.w	fp, #1
 800e8e8:	d18a      	bne.n	800e800 <__ieee754_pow+0xc0>
 800e8ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	e786      	b.n	800e800 <__ieee754_pow+0xc0>
 800e8f2:	0fed      	lsrs	r5, r5, #31
 800e8f4:	1e6b      	subs	r3, r5, #1
 800e8f6:	930d      	str	r3, [sp, #52]	; 0x34
 800e8f8:	ea5b 0303 	orrs.w	r3, fp, r3
 800e8fc:	d102      	bne.n	800e904 <__ieee754_pow+0x1c4>
 800e8fe:	4632      	mov	r2, r6
 800e900:	463b      	mov	r3, r7
 800e902:	e7e8      	b.n	800e8d6 <__ieee754_pow+0x196>
 800e904:	4b16      	ldr	r3, [pc, #88]	; (800e960 <__ieee754_pow+0x220>)
 800e906:	4598      	cmp	r8, r3
 800e908:	f340 80fe 	ble.w	800eb08 <__ieee754_pow+0x3c8>
 800e90c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e910:	4598      	cmp	r8, r3
 800e912:	dd0a      	ble.n	800e92a <__ieee754_pow+0x1ea>
 800e914:	4b0f      	ldr	r3, [pc, #60]	; (800e954 <__ieee754_pow+0x214>)
 800e916:	429c      	cmp	r4, r3
 800e918:	dc0d      	bgt.n	800e936 <__ieee754_pow+0x1f6>
 800e91a:	f1b9 0f00 	cmp.w	r9, #0
 800e91e:	f6bf af6d 	bge.w	800e7fc <__ieee754_pow+0xbc>
 800e922:	a307      	add	r3, pc, #28	; (adr r3, 800e940 <__ieee754_pow+0x200>)
 800e924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e928:	e79f      	b.n	800e86a <__ieee754_pow+0x12a>
 800e92a:	4b0e      	ldr	r3, [pc, #56]	; (800e964 <__ieee754_pow+0x224>)
 800e92c:	429c      	cmp	r4, r3
 800e92e:	ddf4      	ble.n	800e91a <__ieee754_pow+0x1da>
 800e930:	4b09      	ldr	r3, [pc, #36]	; (800e958 <__ieee754_pow+0x218>)
 800e932:	429c      	cmp	r4, r3
 800e934:	dd18      	ble.n	800e968 <__ieee754_pow+0x228>
 800e936:	f1b9 0f00 	cmp.w	r9, #0
 800e93a:	dcf2      	bgt.n	800e922 <__ieee754_pow+0x1e2>
 800e93c:	e75e      	b.n	800e7fc <__ieee754_pow+0xbc>
 800e93e:	bf00      	nop
 800e940:	8800759c 	.word	0x8800759c
 800e944:	7e37e43c 	.word	0x7e37e43c
 800e948:	7ff00000 	.word	0x7ff00000
 800e94c:	08010211 	.word	0x08010211
 800e950:	433fffff 	.word	0x433fffff
 800e954:	3fefffff 	.word	0x3fefffff
 800e958:	3ff00000 	.word	0x3ff00000
 800e95c:	3fe00000 	.word	0x3fe00000
 800e960:	41e00000 	.word	0x41e00000
 800e964:	3feffffe 	.word	0x3feffffe
 800e968:	2200      	movs	r2, #0
 800e96a:	4b63      	ldr	r3, [pc, #396]	; (800eaf8 <__ieee754_pow+0x3b8>)
 800e96c:	f7f1 fc16 	bl	800019c <__aeabi_dsub>
 800e970:	a355      	add	r3, pc, #340	; (adr r3, 800eac8 <__ieee754_pow+0x388>)
 800e972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e976:	4604      	mov	r4, r0
 800e978:	460d      	mov	r5, r1
 800e97a:	f7f1 fdc7 	bl	800050c <__aeabi_dmul>
 800e97e:	a354      	add	r3, pc, #336	; (adr r3, 800ead0 <__ieee754_pow+0x390>)
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	4606      	mov	r6, r0
 800e986:	460f      	mov	r7, r1
 800e988:	4620      	mov	r0, r4
 800e98a:	4629      	mov	r1, r5
 800e98c:	f7f1 fdbe 	bl	800050c <__aeabi_dmul>
 800e990:	2200      	movs	r2, #0
 800e992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e996:	4b59      	ldr	r3, [pc, #356]	; (800eafc <__ieee754_pow+0x3bc>)
 800e998:	4620      	mov	r0, r4
 800e99a:	4629      	mov	r1, r5
 800e99c:	f7f1 fdb6 	bl	800050c <__aeabi_dmul>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	a14c      	add	r1, pc, #304	; (adr r1, 800ead8 <__ieee754_pow+0x398>)
 800e9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9aa:	f7f1 fbf7 	bl	800019c <__aeabi_dsub>
 800e9ae:	4622      	mov	r2, r4
 800e9b0:	462b      	mov	r3, r5
 800e9b2:	f7f1 fdab 	bl	800050c <__aeabi_dmul>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	2000      	movs	r0, #0
 800e9bc:	4950      	ldr	r1, [pc, #320]	; (800eb00 <__ieee754_pow+0x3c0>)
 800e9be:	f7f1 fbed 	bl	800019c <__aeabi_dsub>
 800e9c2:	4622      	mov	r2, r4
 800e9c4:	462b      	mov	r3, r5
 800e9c6:	4680      	mov	r8, r0
 800e9c8:	4689      	mov	r9, r1
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	f7f1 fd9d 	bl	800050c <__aeabi_dmul>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	4640      	mov	r0, r8
 800e9d8:	4649      	mov	r1, r9
 800e9da:	f7f1 fd97 	bl	800050c <__aeabi_dmul>
 800e9de:	a340      	add	r3, pc, #256	; (adr r3, 800eae0 <__ieee754_pow+0x3a0>)
 800e9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e4:	f7f1 fd92 	bl	800050c <__aeabi_dmul>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9f0:	f7f1 fbd4 	bl	800019c <__aeabi_dsub>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	460d      	mov	r5, r1
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	4639      	mov	r1, r7
 800ea00:	f7f1 fbce 	bl	80001a0 <__adddf3>
 800ea04:	2000      	movs	r0, #0
 800ea06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea0a:	4632      	mov	r2, r6
 800ea0c:	463b      	mov	r3, r7
 800ea0e:	f7f1 fbc5 	bl	800019c <__aeabi_dsub>
 800ea12:	4602      	mov	r2, r0
 800ea14:	460b      	mov	r3, r1
 800ea16:	4620      	mov	r0, r4
 800ea18:	4629      	mov	r1, r5
 800ea1a:	f7f1 fbbf 	bl	800019c <__aeabi_dsub>
 800ea1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea20:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ea24:	4313      	orrs	r3, r2
 800ea26:	4606      	mov	r6, r0
 800ea28:	460f      	mov	r7, r1
 800ea2a:	f040 81eb 	bne.w	800ee04 <__ieee754_pow+0x6c4>
 800ea2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800eae8 <__ieee754_pow+0x3a8>
 800ea32:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ea36:	2400      	movs	r4, #0
 800ea38:	4622      	mov	r2, r4
 800ea3a:	462b      	mov	r3, r5
 800ea3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ea44:	f7f1 fbaa 	bl	800019c <__aeabi_dsub>
 800ea48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea4c:	f7f1 fd5e 	bl	800050c <__aeabi_dmul>
 800ea50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea54:	4680      	mov	r8, r0
 800ea56:	4689      	mov	r9, r1
 800ea58:	4630      	mov	r0, r6
 800ea5a:	4639      	mov	r1, r7
 800ea5c:	f7f1 fd56 	bl	800050c <__aeabi_dmul>
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	4640      	mov	r0, r8
 800ea66:	4649      	mov	r1, r9
 800ea68:	f7f1 fb9a 	bl	80001a0 <__adddf3>
 800ea6c:	4622      	mov	r2, r4
 800ea6e:	462b      	mov	r3, r5
 800ea70:	4680      	mov	r8, r0
 800ea72:	4689      	mov	r9, r1
 800ea74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea78:	f7f1 fd48 	bl	800050c <__aeabi_dmul>
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	4604      	mov	r4, r0
 800ea80:	460d      	mov	r5, r1
 800ea82:	4602      	mov	r2, r0
 800ea84:	4649      	mov	r1, r9
 800ea86:	4640      	mov	r0, r8
 800ea88:	e9cd 4500 	strd	r4, r5, [sp]
 800ea8c:	f7f1 fb88 	bl	80001a0 <__adddf3>
 800ea90:	4b1c      	ldr	r3, [pc, #112]	; (800eb04 <__ieee754_pow+0x3c4>)
 800ea92:	4299      	cmp	r1, r3
 800ea94:	4606      	mov	r6, r0
 800ea96:	460f      	mov	r7, r1
 800ea98:	468b      	mov	fp, r1
 800ea9a:	f340 82f7 	ble.w	800f08c <__ieee754_pow+0x94c>
 800ea9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800eaa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eaa6:	4303      	orrs	r3, r0
 800eaa8:	f000 81ea 	beq.w	800ee80 <__ieee754_pow+0x740>
 800eaac:	a310      	add	r3, pc, #64	; (adr r3, 800eaf0 <__ieee754_pow+0x3b0>)
 800eaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eab6:	f7f1 fd29 	bl	800050c <__aeabi_dmul>
 800eaba:	a30d      	add	r3, pc, #52	; (adr r3, 800eaf0 <__ieee754_pow+0x3b0>)
 800eabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac0:	e6d5      	b.n	800e86e <__ieee754_pow+0x12e>
 800eac2:	bf00      	nop
 800eac4:	f3af 8000 	nop.w
 800eac8:	60000000 	.word	0x60000000
 800eacc:	3ff71547 	.word	0x3ff71547
 800ead0:	f85ddf44 	.word	0xf85ddf44
 800ead4:	3e54ae0b 	.word	0x3e54ae0b
 800ead8:	55555555 	.word	0x55555555
 800eadc:	3fd55555 	.word	0x3fd55555
 800eae0:	652b82fe 	.word	0x652b82fe
 800eae4:	3ff71547 	.word	0x3ff71547
 800eae8:	00000000 	.word	0x00000000
 800eaec:	bff00000 	.word	0xbff00000
 800eaf0:	8800759c 	.word	0x8800759c
 800eaf4:	7e37e43c 	.word	0x7e37e43c
 800eaf8:	3ff00000 	.word	0x3ff00000
 800eafc:	3fd00000 	.word	0x3fd00000
 800eb00:	3fe00000 	.word	0x3fe00000
 800eb04:	408fffff 	.word	0x408fffff
 800eb08:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800eb0c:	f04f 0200 	mov.w	r2, #0
 800eb10:	da05      	bge.n	800eb1e <__ieee754_pow+0x3de>
 800eb12:	4bd3      	ldr	r3, [pc, #844]	; (800ee60 <__ieee754_pow+0x720>)
 800eb14:	f7f1 fcfa 	bl	800050c <__aeabi_dmul>
 800eb18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800eb1c:	460c      	mov	r4, r1
 800eb1e:	1523      	asrs	r3, r4, #20
 800eb20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eb24:	4413      	add	r3, r2
 800eb26:	9309      	str	r3, [sp, #36]	; 0x24
 800eb28:	4bce      	ldr	r3, [pc, #824]	; (800ee64 <__ieee754_pow+0x724>)
 800eb2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eb2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800eb32:	429c      	cmp	r4, r3
 800eb34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eb38:	dd08      	ble.n	800eb4c <__ieee754_pow+0x40c>
 800eb3a:	4bcb      	ldr	r3, [pc, #812]	; (800ee68 <__ieee754_pow+0x728>)
 800eb3c:	429c      	cmp	r4, r3
 800eb3e:	f340 815e 	ble.w	800edfe <__ieee754_pow+0x6be>
 800eb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb44:	3301      	adds	r3, #1
 800eb46:	9309      	str	r3, [sp, #36]	; 0x24
 800eb48:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800eb4c:	f04f 0a00 	mov.w	sl, #0
 800eb50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800eb54:	930c      	str	r3, [sp, #48]	; 0x30
 800eb56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb58:	4bc4      	ldr	r3, [pc, #784]	; (800ee6c <__ieee754_pow+0x72c>)
 800eb5a:	4413      	add	r3, r2
 800eb5c:	ed93 7b00 	vldr	d7, [r3]
 800eb60:	4629      	mov	r1, r5
 800eb62:	ec53 2b17 	vmov	r2, r3, d7
 800eb66:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eb6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800eb6e:	f7f1 fb15 	bl	800019c <__aeabi_dsub>
 800eb72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eb76:	4606      	mov	r6, r0
 800eb78:	460f      	mov	r7, r1
 800eb7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb7e:	f7f1 fb0f 	bl	80001a0 <__adddf3>
 800eb82:	4602      	mov	r2, r0
 800eb84:	460b      	mov	r3, r1
 800eb86:	2000      	movs	r0, #0
 800eb88:	49b9      	ldr	r1, [pc, #740]	; (800ee70 <__ieee754_pow+0x730>)
 800eb8a:	f7f1 fde9 	bl	8000760 <__aeabi_ddiv>
 800eb8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800eb92:	4602      	mov	r2, r0
 800eb94:	460b      	mov	r3, r1
 800eb96:	4630      	mov	r0, r6
 800eb98:	4639      	mov	r1, r7
 800eb9a:	f7f1 fcb7 	bl	800050c <__aeabi_dmul>
 800eb9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eba2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800eba6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ebaa:	2300      	movs	r3, #0
 800ebac:	9302      	str	r3, [sp, #8]
 800ebae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ebb2:	106d      	asrs	r5, r5, #1
 800ebb4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ebb8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800ebc2:	4640      	mov	r0, r8
 800ebc4:	4649      	mov	r1, r9
 800ebc6:	4614      	mov	r4, r2
 800ebc8:	461d      	mov	r5, r3
 800ebca:	f7f1 fc9f 	bl	800050c <__aeabi_dmul>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	4639      	mov	r1, r7
 800ebd6:	f7f1 fae1 	bl	800019c <__aeabi_dsub>
 800ebda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ebde:	4606      	mov	r6, r0
 800ebe0:	460f      	mov	r7, r1
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	4629      	mov	r1, r5
 800ebe6:	f7f1 fad9 	bl	800019c <__aeabi_dsub>
 800ebea:	4602      	mov	r2, r0
 800ebec:	460b      	mov	r3, r1
 800ebee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ebf2:	f7f1 fad3 	bl	800019c <__aeabi_dsub>
 800ebf6:	4642      	mov	r2, r8
 800ebf8:	464b      	mov	r3, r9
 800ebfa:	f7f1 fc87 	bl	800050c <__aeabi_dmul>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	460b      	mov	r3, r1
 800ec02:	4630      	mov	r0, r6
 800ec04:	4639      	mov	r1, r7
 800ec06:	f7f1 fac9 	bl	800019c <__aeabi_dsub>
 800ec0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ec0e:	f7f1 fc7d 	bl	800050c <__aeabi_dmul>
 800ec12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	f7f1 fc75 	bl	800050c <__aeabi_dmul>
 800ec22:	a37b      	add	r3, pc, #492	; (adr r3, 800ee10 <__ieee754_pow+0x6d0>)
 800ec24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec28:	4604      	mov	r4, r0
 800ec2a:	460d      	mov	r5, r1
 800ec2c:	f7f1 fc6e 	bl	800050c <__aeabi_dmul>
 800ec30:	a379      	add	r3, pc, #484	; (adr r3, 800ee18 <__ieee754_pow+0x6d8>)
 800ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec36:	f7f1 fab3 	bl	80001a0 <__adddf3>
 800ec3a:	4622      	mov	r2, r4
 800ec3c:	462b      	mov	r3, r5
 800ec3e:	f7f1 fc65 	bl	800050c <__aeabi_dmul>
 800ec42:	a377      	add	r3, pc, #476	; (adr r3, 800ee20 <__ieee754_pow+0x6e0>)
 800ec44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec48:	f7f1 faaa 	bl	80001a0 <__adddf3>
 800ec4c:	4622      	mov	r2, r4
 800ec4e:	462b      	mov	r3, r5
 800ec50:	f7f1 fc5c 	bl	800050c <__aeabi_dmul>
 800ec54:	a374      	add	r3, pc, #464	; (adr r3, 800ee28 <__ieee754_pow+0x6e8>)
 800ec56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5a:	f7f1 faa1 	bl	80001a0 <__adddf3>
 800ec5e:	4622      	mov	r2, r4
 800ec60:	462b      	mov	r3, r5
 800ec62:	f7f1 fc53 	bl	800050c <__aeabi_dmul>
 800ec66:	a372      	add	r3, pc, #456	; (adr r3, 800ee30 <__ieee754_pow+0x6f0>)
 800ec68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6c:	f7f1 fa98 	bl	80001a0 <__adddf3>
 800ec70:	4622      	mov	r2, r4
 800ec72:	462b      	mov	r3, r5
 800ec74:	f7f1 fc4a 	bl	800050c <__aeabi_dmul>
 800ec78:	a36f      	add	r3, pc, #444	; (adr r3, 800ee38 <__ieee754_pow+0x6f8>)
 800ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7e:	f7f1 fa8f 	bl	80001a0 <__adddf3>
 800ec82:	4622      	mov	r2, r4
 800ec84:	4606      	mov	r6, r0
 800ec86:	460f      	mov	r7, r1
 800ec88:	462b      	mov	r3, r5
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	4629      	mov	r1, r5
 800ec8e:	f7f1 fc3d 	bl	800050c <__aeabi_dmul>
 800ec92:	4602      	mov	r2, r0
 800ec94:	460b      	mov	r3, r1
 800ec96:	4630      	mov	r0, r6
 800ec98:	4639      	mov	r1, r7
 800ec9a:	f7f1 fc37 	bl	800050c <__aeabi_dmul>
 800ec9e:	4642      	mov	r2, r8
 800eca0:	4604      	mov	r4, r0
 800eca2:	460d      	mov	r5, r1
 800eca4:	464b      	mov	r3, r9
 800eca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecaa:	f7f1 fa79 	bl	80001a0 <__adddf3>
 800ecae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecb2:	f7f1 fc2b 	bl	800050c <__aeabi_dmul>
 800ecb6:	4622      	mov	r2, r4
 800ecb8:	462b      	mov	r3, r5
 800ecba:	f7f1 fa71 	bl	80001a0 <__adddf3>
 800ecbe:	4642      	mov	r2, r8
 800ecc0:	4606      	mov	r6, r0
 800ecc2:	460f      	mov	r7, r1
 800ecc4:	464b      	mov	r3, r9
 800ecc6:	4640      	mov	r0, r8
 800ecc8:	4649      	mov	r1, r9
 800ecca:	f7f1 fc1f 	bl	800050c <__aeabi_dmul>
 800ecce:	2200      	movs	r2, #0
 800ecd0:	4b68      	ldr	r3, [pc, #416]	; (800ee74 <__ieee754_pow+0x734>)
 800ecd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ecd6:	f7f1 fa63 	bl	80001a0 <__adddf3>
 800ecda:	4632      	mov	r2, r6
 800ecdc:	463b      	mov	r3, r7
 800ecde:	f7f1 fa5f 	bl	80001a0 <__adddf3>
 800ece2:	9802      	ldr	r0, [sp, #8]
 800ece4:	460d      	mov	r5, r1
 800ece6:	4604      	mov	r4, r0
 800ece8:	4602      	mov	r2, r0
 800ecea:	460b      	mov	r3, r1
 800ecec:	4640      	mov	r0, r8
 800ecee:	4649      	mov	r1, r9
 800ecf0:	f7f1 fc0c 	bl	800050c <__aeabi_dmul>
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	4680      	mov	r8, r0
 800ecf8:	4689      	mov	r9, r1
 800ecfa:	4b5e      	ldr	r3, [pc, #376]	; (800ee74 <__ieee754_pow+0x734>)
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	4629      	mov	r1, r5
 800ed00:	f7f1 fa4c 	bl	800019c <__aeabi_dsub>
 800ed04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ed08:	f7f1 fa48 	bl	800019c <__aeabi_dsub>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	460b      	mov	r3, r1
 800ed10:	4630      	mov	r0, r6
 800ed12:	4639      	mov	r1, r7
 800ed14:	f7f1 fa42 	bl	800019c <__aeabi_dsub>
 800ed18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed1c:	f7f1 fbf6 	bl	800050c <__aeabi_dmul>
 800ed20:	4622      	mov	r2, r4
 800ed22:	4606      	mov	r6, r0
 800ed24:	460f      	mov	r7, r1
 800ed26:	462b      	mov	r3, r5
 800ed28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed2c:	f7f1 fbee 	bl	800050c <__aeabi_dmul>
 800ed30:	4602      	mov	r2, r0
 800ed32:	460b      	mov	r3, r1
 800ed34:	4630      	mov	r0, r6
 800ed36:	4639      	mov	r1, r7
 800ed38:	f7f1 fa32 	bl	80001a0 <__adddf3>
 800ed3c:	4606      	mov	r6, r0
 800ed3e:	460f      	mov	r7, r1
 800ed40:	4602      	mov	r2, r0
 800ed42:	460b      	mov	r3, r1
 800ed44:	4640      	mov	r0, r8
 800ed46:	4649      	mov	r1, r9
 800ed48:	f7f1 fa2a 	bl	80001a0 <__adddf3>
 800ed4c:	9802      	ldr	r0, [sp, #8]
 800ed4e:	a33c      	add	r3, pc, #240	; (adr r3, 800ee40 <__ieee754_pow+0x700>)
 800ed50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed54:	4604      	mov	r4, r0
 800ed56:	460d      	mov	r5, r1
 800ed58:	f7f1 fbd8 	bl	800050c <__aeabi_dmul>
 800ed5c:	4642      	mov	r2, r8
 800ed5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed62:	464b      	mov	r3, r9
 800ed64:	4620      	mov	r0, r4
 800ed66:	4629      	mov	r1, r5
 800ed68:	f7f1 fa18 	bl	800019c <__aeabi_dsub>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	460b      	mov	r3, r1
 800ed70:	4630      	mov	r0, r6
 800ed72:	4639      	mov	r1, r7
 800ed74:	f7f1 fa12 	bl	800019c <__aeabi_dsub>
 800ed78:	a333      	add	r3, pc, #204	; (adr r3, 800ee48 <__ieee754_pow+0x708>)
 800ed7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7e:	f7f1 fbc5 	bl	800050c <__aeabi_dmul>
 800ed82:	a333      	add	r3, pc, #204	; (adr r3, 800ee50 <__ieee754_pow+0x710>)
 800ed84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed88:	4606      	mov	r6, r0
 800ed8a:	460f      	mov	r7, r1
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	4629      	mov	r1, r5
 800ed90:	f7f1 fbbc 	bl	800050c <__aeabi_dmul>
 800ed94:	4602      	mov	r2, r0
 800ed96:	460b      	mov	r3, r1
 800ed98:	4630      	mov	r0, r6
 800ed9a:	4639      	mov	r1, r7
 800ed9c:	f7f1 fa00 	bl	80001a0 <__adddf3>
 800eda0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eda2:	4b35      	ldr	r3, [pc, #212]	; (800ee78 <__ieee754_pow+0x738>)
 800eda4:	4413      	add	r3, r2
 800eda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edaa:	f7f1 f9f9 	bl	80001a0 <__adddf3>
 800edae:	4604      	mov	r4, r0
 800edb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edb2:	460d      	mov	r5, r1
 800edb4:	f7f1 fb40 	bl	8000438 <__aeabi_i2d>
 800edb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800edba:	4b30      	ldr	r3, [pc, #192]	; (800ee7c <__ieee754_pow+0x73c>)
 800edbc:	4413      	add	r3, r2
 800edbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edc2:	4606      	mov	r6, r0
 800edc4:	460f      	mov	r7, r1
 800edc6:	4622      	mov	r2, r4
 800edc8:	462b      	mov	r3, r5
 800edca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edce:	f7f1 f9e7 	bl	80001a0 <__adddf3>
 800edd2:	4642      	mov	r2, r8
 800edd4:	464b      	mov	r3, r9
 800edd6:	f7f1 f9e3 	bl	80001a0 <__adddf3>
 800edda:	4632      	mov	r2, r6
 800eddc:	463b      	mov	r3, r7
 800edde:	f7f1 f9df 	bl	80001a0 <__adddf3>
 800ede2:	9802      	ldr	r0, [sp, #8]
 800ede4:	4632      	mov	r2, r6
 800ede6:	463b      	mov	r3, r7
 800ede8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800edec:	f7f1 f9d6 	bl	800019c <__aeabi_dsub>
 800edf0:	4642      	mov	r2, r8
 800edf2:	464b      	mov	r3, r9
 800edf4:	f7f1 f9d2 	bl	800019c <__aeabi_dsub>
 800edf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800edfc:	e607      	b.n	800ea0e <__ieee754_pow+0x2ce>
 800edfe:	f04f 0a01 	mov.w	sl, #1
 800ee02:	e6a5      	b.n	800eb50 <__ieee754_pow+0x410>
 800ee04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ee58 <__ieee754_pow+0x718>
 800ee08:	e613      	b.n	800ea32 <__ieee754_pow+0x2f2>
 800ee0a:	bf00      	nop
 800ee0c:	f3af 8000 	nop.w
 800ee10:	4a454eef 	.word	0x4a454eef
 800ee14:	3fca7e28 	.word	0x3fca7e28
 800ee18:	93c9db65 	.word	0x93c9db65
 800ee1c:	3fcd864a 	.word	0x3fcd864a
 800ee20:	a91d4101 	.word	0xa91d4101
 800ee24:	3fd17460 	.word	0x3fd17460
 800ee28:	518f264d 	.word	0x518f264d
 800ee2c:	3fd55555 	.word	0x3fd55555
 800ee30:	db6fabff 	.word	0xdb6fabff
 800ee34:	3fdb6db6 	.word	0x3fdb6db6
 800ee38:	33333303 	.word	0x33333303
 800ee3c:	3fe33333 	.word	0x3fe33333
 800ee40:	e0000000 	.word	0xe0000000
 800ee44:	3feec709 	.word	0x3feec709
 800ee48:	dc3a03fd 	.word	0xdc3a03fd
 800ee4c:	3feec709 	.word	0x3feec709
 800ee50:	145b01f5 	.word	0x145b01f5
 800ee54:	be3e2fe0 	.word	0xbe3e2fe0
 800ee58:	00000000 	.word	0x00000000
 800ee5c:	3ff00000 	.word	0x3ff00000
 800ee60:	43400000 	.word	0x43400000
 800ee64:	0003988e 	.word	0x0003988e
 800ee68:	000bb679 	.word	0x000bb679
 800ee6c:	08010218 	.word	0x08010218
 800ee70:	3ff00000 	.word	0x3ff00000
 800ee74:	40080000 	.word	0x40080000
 800ee78:	08010238 	.word	0x08010238
 800ee7c:	08010228 	.word	0x08010228
 800ee80:	a3b4      	add	r3, pc, #720	; (adr r3, 800f154 <__ieee754_pow+0xa14>)
 800ee82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee86:	4640      	mov	r0, r8
 800ee88:	4649      	mov	r1, r9
 800ee8a:	f7f1 f989 	bl	80001a0 <__adddf3>
 800ee8e:	4622      	mov	r2, r4
 800ee90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee94:	462b      	mov	r3, r5
 800ee96:	4630      	mov	r0, r6
 800ee98:	4639      	mov	r1, r7
 800ee9a:	f7f1 f97f 	bl	800019c <__aeabi_dsub>
 800ee9e:	4602      	mov	r2, r0
 800eea0:	460b      	mov	r3, r1
 800eea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eea6:	f7f1 fdc1 	bl	8000a2c <__aeabi_dcmpgt>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	f47f adfe 	bne.w	800eaac <__ieee754_pow+0x36c>
 800eeb0:	4aa3      	ldr	r2, [pc, #652]	; (800f140 <__ieee754_pow+0xa00>)
 800eeb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	f340 810a 	ble.w	800f0d0 <__ieee754_pow+0x990>
 800eebc:	151b      	asrs	r3, r3, #20
 800eebe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800eec2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800eec6:	fa4a f303 	asr.w	r3, sl, r3
 800eeca:	445b      	add	r3, fp
 800eecc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800eed0:	4e9c      	ldr	r6, [pc, #624]	; (800f144 <__ieee754_pow+0xa04>)
 800eed2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800eed6:	4116      	asrs	r6, r2
 800eed8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800eedc:	2000      	movs	r0, #0
 800eede:	ea23 0106 	bic.w	r1, r3, r6
 800eee2:	f1c2 0214 	rsb	r2, r2, #20
 800eee6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800eeea:	fa4a fa02 	asr.w	sl, sl, r2
 800eeee:	f1bb 0f00 	cmp.w	fp, #0
 800eef2:	4602      	mov	r2, r0
 800eef4:	460b      	mov	r3, r1
 800eef6:	4620      	mov	r0, r4
 800eef8:	4629      	mov	r1, r5
 800eefa:	bfb8      	it	lt
 800eefc:	f1ca 0a00 	rsblt	sl, sl, #0
 800ef00:	f7f1 f94c 	bl	800019c <__aeabi_dsub>
 800ef04:	e9cd 0100 	strd	r0, r1, [sp]
 800ef08:	4642      	mov	r2, r8
 800ef0a:	464b      	mov	r3, r9
 800ef0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef10:	f7f1 f946 	bl	80001a0 <__adddf3>
 800ef14:	2000      	movs	r0, #0
 800ef16:	a378      	add	r3, pc, #480	; (adr r3, 800f0f8 <__ieee754_pow+0x9b8>)
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	460d      	mov	r5, r1
 800ef20:	f7f1 faf4 	bl	800050c <__aeabi_dmul>
 800ef24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef28:	4606      	mov	r6, r0
 800ef2a:	460f      	mov	r7, r1
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	4629      	mov	r1, r5
 800ef30:	f7f1 f934 	bl	800019c <__aeabi_dsub>
 800ef34:	4602      	mov	r2, r0
 800ef36:	460b      	mov	r3, r1
 800ef38:	4640      	mov	r0, r8
 800ef3a:	4649      	mov	r1, r9
 800ef3c:	f7f1 f92e 	bl	800019c <__aeabi_dsub>
 800ef40:	a36f      	add	r3, pc, #444	; (adr r3, 800f100 <__ieee754_pow+0x9c0>)
 800ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef46:	f7f1 fae1 	bl	800050c <__aeabi_dmul>
 800ef4a:	a36f      	add	r3, pc, #444	; (adr r3, 800f108 <__ieee754_pow+0x9c8>)
 800ef4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef50:	4680      	mov	r8, r0
 800ef52:	4689      	mov	r9, r1
 800ef54:	4620      	mov	r0, r4
 800ef56:	4629      	mov	r1, r5
 800ef58:	f7f1 fad8 	bl	800050c <__aeabi_dmul>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	460b      	mov	r3, r1
 800ef60:	4640      	mov	r0, r8
 800ef62:	4649      	mov	r1, r9
 800ef64:	f7f1 f91c 	bl	80001a0 <__adddf3>
 800ef68:	4604      	mov	r4, r0
 800ef6a:	460d      	mov	r5, r1
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	4630      	mov	r0, r6
 800ef72:	4639      	mov	r1, r7
 800ef74:	f7f1 f914 	bl	80001a0 <__adddf3>
 800ef78:	4632      	mov	r2, r6
 800ef7a:	463b      	mov	r3, r7
 800ef7c:	4680      	mov	r8, r0
 800ef7e:	4689      	mov	r9, r1
 800ef80:	f7f1 f90c 	bl	800019c <__aeabi_dsub>
 800ef84:	4602      	mov	r2, r0
 800ef86:	460b      	mov	r3, r1
 800ef88:	4620      	mov	r0, r4
 800ef8a:	4629      	mov	r1, r5
 800ef8c:	f7f1 f906 	bl	800019c <__aeabi_dsub>
 800ef90:	4642      	mov	r2, r8
 800ef92:	4606      	mov	r6, r0
 800ef94:	460f      	mov	r7, r1
 800ef96:	464b      	mov	r3, r9
 800ef98:	4640      	mov	r0, r8
 800ef9a:	4649      	mov	r1, r9
 800ef9c:	f7f1 fab6 	bl	800050c <__aeabi_dmul>
 800efa0:	a35b      	add	r3, pc, #364	; (adr r3, 800f110 <__ieee754_pow+0x9d0>)
 800efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa6:	4604      	mov	r4, r0
 800efa8:	460d      	mov	r5, r1
 800efaa:	f7f1 faaf 	bl	800050c <__aeabi_dmul>
 800efae:	a35a      	add	r3, pc, #360	; (adr r3, 800f118 <__ieee754_pow+0x9d8>)
 800efb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb4:	f7f1 f8f2 	bl	800019c <__aeabi_dsub>
 800efb8:	4622      	mov	r2, r4
 800efba:	462b      	mov	r3, r5
 800efbc:	f7f1 faa6 	bl	800050c <__aeabi_dmul>
 800efc0:	a357      	add	r3, pc, #348	; (adr r3, 800f120 <__ieee754_pow+0x9e0>)
 800efc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc6:	f7f1 f8eb 	bl	80001a0 <__adddf3>
 800efca:	4622      	mov	r2, r4
 800efcc:	462b      	mov	r3, r5
 800efce:	f7f1 fa9d 	bl	800050c <__aeabi_dmul>
 800efd2:	a355      	add	r3, pc, #340	; (adr r3, 800f128 <__ieee754_pow+0x9e8>)
 800efd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd8:	f7f1 f8e0 	bl	800019c <__aeabi_dsub>
 800efdc:	4622      	mov	r2, r4
 800efde:	462b      	mov	r3, r5
 800efe0:	f7f1 fa94 	bl	800050c <__aeabi_dmul>
 800efe4:	a352      	add	r3, pc, #328	; (adr r3, 800f130 <__ieee754_pow+0x9f0>)
 800efe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efea:	f7f1 f8d9 	bl	80001a0 <__adddf3>
 800efee:	4622      	mov	r2, r4
 800eff0:	462b      	mov	r3, r5
 800eff2:	f7f1 fa8b 	bl	800050c <__aeabi_dmul>
 800eff6:	4602      	mov	r2, r0
 800eff8:	460b      	mov	r3, r1
 800effa:	4640      	mov	r0, r8
 800effc:	4649      	mov	r1, r9
 800effe:	f7f1 f8cd 	bl	800019c <__aeabi_dsub>
 800f002:	4604      	mov	r4, r0
 800f004:	460d      	mov	r5, r1
 800f006:	4602      	mov	r2, r0
 800f008:	460b      	mov	r3, r1
 800f00a:	4640      	mov	r0, r8
 800f00c:	4649      	mov	r1, r9
 800f00e:	f7f1 fa7d 	bl	800050c <__aeabi_dmul>
 800f012:	2200      	movs	r2, #0
 800f014:	e9cd 0100 	strd	r0, r1, [sp]
 800f018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f01c:	4620      	mov	r0, r4
 800f01e:	4629      	mov	r1, r5
 800f020:	f7f1 f8bc 	bl	800019c <__aeabi_dsub>
 800f024:	4602      	mov	r2, r0
 800f026:	460b      	mov	r3, r1
 800f028:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f02c:	f7f1 fb98 	bl	8000760 <__aeabi_ddiv>
 800f030:	4632      	mov	r2, r6
 800f032:	4604      	mov	r4, r0
 800f034:	460d      	mov	r5, r1
 800f036:	463b      	mov	r3, r7
 800f038:	4640      	mov	r0, r8
 800f03a:	4649      	mov	r1, r9
 800f03c:	f7f1 fa66 	bl	800050c <__aeabi_dmul>
 800f040:	4632      	mov	r2, r6
 800f042:	463b      	mov	r3, r7
 800f044:	f7f1 f8ac 	bl	80001a0 <__adddf3>
 800f048:	4602      	mov	r2, r0
 800f04a:	460b      	mov	r3, r1
 800f04c:	4620      	mov	r0, r4
 800f04e:	4629      	mov	r1, r5
 800f050:	f7f1 f8a4 	bl	800019c <__aeabi_dsub>
 800f054:	4642      	mov	r2, r8
 800f056:	464b      	mov	r3, r9
 800f058:	f7f1 f8a0 	bl	800019c <__aeabi_dsub>
 800f05c:	4602      	mov	r2, r0
 800f05e:	460b      	mov	r3, r1
 800f060:	2000      	movs	r0, #0
 800f062:	4939      	ldr	r1, [pc, #228]	; (800f148 <__ieee754_pow+0xa08>)
 800f064:	f7f1 f89a 	bl	800019c <__aeabi_dsub>
 800f068:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800f06c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f070:	4602      	mov	r2, r0
 800f072:	460b      	mov	r3, r1
 800f074:	da2f      	bge.n	800f0d6 <__ieee754_pow+0x996>
 800f076:	4650      	mov	r0, sl
 800f078:	ec43 2b10 	vmov	d0, r2, r3
 800f07c:	f000 f9c0 	bl	800f400 <scalbn>
 800f080:	ec51 0b10 	vmov	r0, r1, d0
 800f084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f088:	f7ff bbf1 	b.w	800e86e <__ieee754_pow+0x12e>
 800f08c:	4b2f      	ldr	r3, [pc, #188]	; (800f14c <__ieee754_pow+0xa0c>)
 800f08e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f092:	429e      	cmp	r6, r3
 800f094:	f77f af0c 	ble.w	800eeb0 <__ieee754_pow+0x770>
 800f098:	4b2d      	ldr	r3, [pc, #180]	; (800f150 <__ieee754_pow+0xa10>)
 800f09a:	440b      	add	r3, r1
 800f09c:	4303      	orrs	r3, r0
 800f09e:	d00b      	beq.n	800f0b8 <__ieee754_pow+0x978>
 800f0a0:	a325      	add	r3, pc, #148	; (adr r3, 800f138 <__ieee754_pow+0x9f8>)
 800f0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0aa:	f7f1 fa2f 	bl	800050c <__aeabi_dmul>
 800f0ae:	a322      	add	r3, pc, #136	; (adr r3, 800f138 <__ieee754_pow+0x9f8>)
 800f0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b4:	f7ff bbdb 	b.w	800e86e <__ieee754_pow+0x12e>
 800f0b8:	4622      	mov	r2, r4
 800f0ba:	462b      	mov	r3, r5
 800f0bc:	f7f1 f86e 	bl	800019c <__aeabi_dsub>
 800f0c0:	4642      	mov	r2, r8
 800f0c2:	464b      	mov	r3, r9
 800f0c4:	f7f1 fca8 	bl	8000a18 <__aeabi_dcmpge>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	f43f aef1 	beq.w	800eeb0 <__ieee754_pow+0x770>
 800f0ce:	e7e7      	b.n	800f0a0 <__ieee754_pow+0x960>
 800f0d0:	f04f 0a00 	mov.w	sl, #0
 800f0d4:	e718      	b.n	800ef08 <__ieee754_pow+0x7c8>
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	e7d4      	b.n	800f084 <__ieee754_pow+0x944>
 800f0da:	2000      	movs	r0, #0
 800f0dc:	491a      	ldr	r1, [pc, #104]	; (800f148 <__ieee754_pow+0xa08>)
 800f0de:	f7ff bb8f 	b.w	800e800 <__ieee754_pow+0xc0>
 800f0e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0e6:	f7ff bb8b 	b.w	800e800 <__ieee754_pow+0xc0>
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	4639      	mov	r1, r7
 800f0ee:	f7ff bb87 	b.w	800e800 <__ieee754_pow+0xc0>
 800f0f2:	4693      	mov	fp, r2
 800f0f4:	f7ff bb98 	b.w	800e828 <__ieee754_pow+0xe8>
 800f0f8:	00000000 	.word	0x00000000
 800f0fc:	3fe62e43 	.word	0x3fe62e43
 800f100:	fefa39ef 	.word	0xfefa39ef
 800f104:	3fe62e42 	.word	0x3fe62e42
 800f108:	0ca86c39 	.word	0x0ca86c39
 800f10c:	be205c61 	.word	0xbe205c61
 800f110:	72bea4d0 	.word	0x72bea4d0
 800f114:	3e663769 	.word	0x3e663769
 800f118:	c5d26bf1 	.word	0xc5d26bf1
 800f11c:	3ebbbd41 	.word	0x3ebbbd41
 800f120:	af25de2c 	.word	0xaf25de2c
 800f124:	3f11566a 	.word	0x3f11566a
 800f128:	16bebd93 	.word	0x16bebd93
 800f12c:	3f66c16c 	.word	0x3f66c16c
 800f130:	5555553e 	.word	0x5555553e
 800f134:	3fc55555 	.word	0x3fc55555
 800f138:	c2f8f359 	.word	0xc2f8f359
 800f13c:	01a56e1f 	.word	0x01a56e1f
 800f140:	3fe00000 	.word	0x3fe00000
 800f144:	000fffff 	.word	0x000fffff
 800f148:	3ff00000 	.word	0x3ff00000
 800f14c:	4090cbff 	.word	0x4090cbff
 800f150:	3f6f3400 	.word	0x3f6f3400
 800f154:	652b82fe 	.word	0x652b82fe
 800f158:	3c971547 	.word	0x3c971547

0800f15c <__ieee754_sqrt>:
 800f15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f160:	4955      	ldr	r1, [pc, #340]	; (800f2b8 <__ieee754_sqrt+0x15c>)
 800f162:	ec55 4b10 	vmov	r4, r5, d0
 800f166:	43a9      	bics	r1, r5
 800f168:	462b      	mov	r3, r5
 800f16a:	462a      	mov	r2, r5
 800f16c:	d112      	bne.n	800f194 <__ieee754_sqrt+0x38>
 800f16e:	ee10 2a10 	vmov	r2, s0
 800f172:	ee10 0a10 	vmov	r0, s0
 800f176:	4629      	mov	r1, r5
 800f178:	f7f1 f9c8 	bl	800050c <__aeabi_dmul>
 800f17c:	4602      	mov	r2, r0
 800f17e:	460b      	mov	r3, r1
 800f180:	4620      	mov	r0, r4
 800f182:	4629      	mov	r1, r5
 800f184:	f7f1 f80c 	bl	80001a0 <__adddf3>
 800f188:	4604      	mov	r4, r0
 800f18a:	460d      	mov	r5, r1
 800f18c:	ec45 4b10 	vmov	d0, r4, r5
 800f190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f194:	2d00      	cmp	r5, #0
 800f196:	ee10 0a10 	vmov	r0, s0
 800f19a:	4621      	mov	r1, r4
 800f19c:	dc0f      	bgt.n	800f1be <__ieee754_sqrt+0x62>
 800f19e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f1a2:	4330      	orrs	r0, r6
 800f1a4:	d0f2      	beq.n	800f18c <__ieee754_sqrt+0x30>
 800f1a6:	b155      	cbz	r5, 800f1be <__ieee754_sqrt+0x62>
 800f1a8:	ee10 2a10 	vmov	r2, s0
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	4629      	mov	r1, r5
 800f1b0:	f7f0 fff4 	bl	800019c <__aeabi_dsub>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	f7f1 fad2 	bl	8000760 <__aeabi_ddiv>
 800f1bc:	e7e4      	b.n	800f188 <__ieee754_sqrt+0x2c>
 800f1be:	151b      	asrs	r3, r3, #20
 800f1c0:	d073      	beq.n	800f2aa <__ieee754_sqrt+0x14e>
 800f1c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f1c6:	07dd      	lsls	r5, r3, #31
 800f1c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f1cc:	bf48      	it	mi
 800f1ce:	0fc8      	lsrmi	r0, r1, #31
 800f1d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f1d4:	bf44      	itt	mi
 800f1d6:	0049      	lslmi	r1, r1, #1
 800f1d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800f1dc:	2500      	movs	r5, #0
 800f1de:	1058      	asrs	r0, r3, #1
 800f1e0:	0fcb      	lsrs	r3, r1, #31
 800f1e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800f1e6:	0049      	lsls	r1, r1, #1
 800f1e8:	2316      	movs	r3, #22
 800f1ea:	462c      	mov	r4, r5
 800f1ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800f1f0:	19a7      	adds	r7, r4, r6
 800f1f2:	4297      	cmp	r7, r2
 800f1f4:	bfde      	ittt	le
 800f1f6:	19bc      	addle	r4, r7, r6
 800f1f8:	1bd2      	suble	r2, r2, r7
 800f1fa:	19ad      	addle	r5, r5, r6
 800f1fc:	0fcf      	lsrs	r7, r1, #31
 800f1fe:	3b01      	subs	r3, #1
 800f200:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800f204:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f208:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f20c:	d1f0      	bne.n	800f1f0 <__ieee754_sqrt+0x94>
 800f20e:	f04f 0c20 	mov.w	ip, #32
 800f212:	469e      	mov	lr, r3
 800f214:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f218:	42a2      	cmp	r2, r4
 800f21a:	eb06 070e 	add.w	r7, r6, lr
 800f21e:	dc02      	bgt.n	800f226 <__ieee754_sqrt+0xca>
 800f220:	d112      	bne.n	800f248 <__ieee754_sqrt+0xec>
 800f222:	428f      	cmp	r7, r1
 800f224:	d810      	bhi.n	800f248 <__ieee754_sqrt+0xec>
 800f226:	2f00      	cmp	r7, #0
 800f228:	eb07 0e06 	add.w	lr, r7, r6
 800f22c:	da42      	bge.n	800f2b4 <__ieee754_sqrt+0x158>
 800f22e:	f1be 0f00 	cmp.w	lr, #0
 800f232:	db3f      	blt.n	800f2b4 <__ieee754_sqrt+0x158>
 800f234:	f104 0801 	add.w	r8, r4, #1
 800f238:	1b12      	subs	r2, r2, r4
 800f23a:	428f      	cmp	r7, r1
 800f23c:	bf88      	it	hi
 800f23e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f242:	1bc9      	subs	r1, r1, r7
 800f244:	4433      	add	r3, r6
 800f246:	4644      	mov	r4, r8
 800f248:	0052      	lsls	r2, r2, #1
 800f24a:	f1bc 0c01 	subs.w	ip, ip, #1
 800f24e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800f252:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f256:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f25a:	d1dd      	bne.n	800f218 <__ieee754_sqrt+0xbc>
 800f25c:	430a      	orrs	r2, r1
 800f25e:	d006      	beq.n	800f26e <__ieee754_sqrt+0x112>
 800f260:	1c5c      	adds	r4, r3, #1
 800f262:	bf13      	iteet	ne
 800f264:	3301      	addne	r3, #1
 800f266:	3501      	addeq	r5, #1
 800f268:	4663      	moveq	r3, ip
 800f26a:	f023 0301 	bicne.w	r3, r3, #1
 800f26e:	106a      	asrs	r2, r5, #1
 800f270:	085b      	lsrs	r3, r3, #1
 800f272:	07e9      	lsls	r1, r5, #31
 800f274:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f278:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f27c:	bf48      	it	mi
 800f27e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f282:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800f286:	461c      	mov	r4, r3
 800f288:	e780      	b.n	800f18c <__ieee754_sqrt+0x30>
 800f28a:	0aca      	lsrs	r2, r1, #11
 800f28c:	3815      	subs	r0, #21
 800f28e:	0549      	lsls	r1, r1, #21
 800f290:	2a00      	cmp	r2, #0
 800f292:	d0fa      	beq.n	800f28a <__ieee754_sqrt+0x12e>
 800f294:	02d6      	lsls	r6, r2, #11
 800f296:	d50a      	bpl.n	800f2ae <__ieee754_sqrt+0x152>
 800f298:	f1c3 0420 	rsb	r4, r3, #32
 800f29c:	fa21 f404 	lsr.w	r4, r1, r4
 800f2a0:	1e5d      	subs	r5, r3, #1
 800f2a2:	4099      	lsls	r1, r3
 800f2a4:	4322      	orrs	r2, r4
 800f2a6:	1b43      	subs	r3, r0, r5
 800f2a8:	e78b      	b.n	800f1c2 <__ieee754_sqrt+0x66>
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	e7f0      	b.n	800f290 <__ieee754_sqrt+0x134>
 800f2ae:	0052      	lsls	r2, r2, #1
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	e7ef      	b.n	800f294 <__ieee754_sqrt+0x138>
 800f2b4:	46a0      	mov	r8, r4
 800f2b6:	e7bf      	b.n	800f238 <__ieee754_sqrt+0xdc>
 800f2b8:	7ff00000 	.word	0x7ff00000

0800f2bc <__ieee754_sqrtf>:
 800f2bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f2c0:	4770      	bx	lr

0800f2c2 <fabs>:
 800f2c2:	ec51 0b10 	vmov	r0, r1, d0
 800f2c6:	ee10 2a10 	vmov	r2, s0
 800f2ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f2ce:	ec43 2b10 	vmov	d0, r2, r3
 800f2d2:	4770      	bx	lr

0800f2d4 <finite>:
 800f2d4:	ee10 3a90 	vmov	r3, s1
 800f2d8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800f2dc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f2e0:	0fc0      	lsrs	r0, r0, #31
 800f2e2:	4770      	bx	lr

0800f2e4 <matherr>:
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	4770      	bx	lr

0800f2e8 <nan>:
 800f2e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f2f0 <nan+0x8>
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	00000000 	.word	0x00000000
 800f2f4:	7ff80000 	.word	0x7ff80000

0800f2f8 <rint>:
 800f2f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2fa:	ec51 0b10 	vmov	r0, r1, d0
 800f2fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f302:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f306:	2e13      	cmp	r6, #19
 800f308:	460b      	mov	r3, r1
 800f30a:	ee10 4a10 	vmov	r4, s0
 800f30e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f312:	dc56      	bgt.n	800f3c2 <rint+0xca>
 800f314:	2e00      	cmp	r6, #0
 800f316:	da2b      	bge.n	800f370 <rint+0x78>
 800f318:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f31c:	4302      	orrs	r2, r0
 800f31e:	d023      	beq.n	800f368 <rint+0x70>
 800f320:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f324:	4302      	orrs	r2, r0
 800f326:	4254      	negs	r4, r2
 800f328:	4314      	orrs	r4, r2
 800f32a:	0c4b      	lsrs	r3, r1, #17
 800f32c:	0b24      	lsrs	r4, r4, #12
 800f32e:	045b      	lsls	r3, r3, #17
 800f330:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f334:	ea44 0103 	orr.w	r1, r4, r3
 800f338:	460b      	mov	r3, r1
 800f33a:	492f      	ldr	r1, [pc, #188]	; (800f3f8 <rint+0x100>)
 800f33c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800f340:	e9d1 6700 	ldrd	r6, r7, [r1]
 800f344:	4602      	mov	r2, r0
 800f346:	4639      	mov	r1, r7
 800f348:	4630      	mov	r0, r6
 800f34a:	f7f0 ff29 	bl	80001a0 <__adddf3>
 800f34e:	e9cd 0100 	strd	r0, r1, [sp]
 800f352:	463b      	mov	r3, r7
 800f354:	4632      	mov	r2, r6
 800f356:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f35a:	f7f0 ff1f 	bl	800019c <__aeabi_dsub>
 800f35e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f362:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f366:	4639      	mov	r1, r7
 800f368:	ec41 0b10 	vmov	d0, r0, r1
 800f36c:	b003      	add	sp, #12
 800f36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f370:	4a22      	ldr	r2, [pc, #136]	; (800f3fc <rint+0x104>)
 800f372:	4132      	asrs	r2, r6
 800f374:	ea01 0702 	and.w	r7, r1, r2
 800f378:	4307      	orrs	r7, r0
 800f37a:	d0f5      	beq.n	800f368 <rint+0x70>
 800f37c:	0852      	lsrs	r2, r2, #1
 800f37e:	4011      	ands	r1, r2
 800f380:	430c      	orrs	r4, r1
 800f382:	d00b      	beq.n	800f39c <rint+0xa4>
 800f384:	ea23 0202 	bic.w	r2, r3, r2
 800f388:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f38c:	2e13      	cmp	r6, #19
 800f38e:	fa43 f306 	asr.w	r3, r3, r6
 800f392:	bf0c      	ite	eq
 800f394:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f398:	2400      	movne	r4, #0
 800f39a:	4313      	orrs	r3, r2
 800f39c:	4916      	ldr	r1, [pc, #88]	; (800f3f8 <rint+0x100>)
 800f39e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f3a2:	4622      	mov	r2, r4
 800f3a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	4629      	mov	r1, r5
 800f3ac:	f7f0 fef8 	bl	80001a0 <__adddf3>
 800f3b0:	e9cd 0100 	strd	r0, r1, [sp]
 800f3b4:	4622      	mov	r2, r4
 800f3b6:	462b      	mov	r3, r5
 800f3b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3bc:	f7f0 feee 	bl	800019c <__aeabi_dsub>
 800f3c0:	e7d2      	b.n	800f368 <rint+0x70>
 800f3c2:	2e33      	cmp	r6, #51	; 0x33
 800f3c4:	dd07      	ble.n	800f3d6 <rint+0xde>
 800f3c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f3ca:	d1cd      	bne.n	800f368 <rint+0x70>
 800f3cc:	ee10 2a10 	vmov	r2, s0
 800f3d0:	f7f0 fee6 	bl	80001a0 <__adddf3>
 800f3d4:	e7c8      	b.n	800f368 <rint+0x70>
 800f3d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800f3da:	f04f 32ff 	mov.w	r2, #4294967295
 800f3de:	40f2      	lsrs	r2, r6
 800f3e0:	4210      	tst	r0, r2
 800f3e2:	d0c1      	beq.n	800f368 <rint+0x70>
 800f3e4:	0852      	lsrs	r2, r2, #1
 800f3e6:	4210      	tst	r0, r2
 800f3e8:	bf1f      	itttt	ne
 800f3ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f3ee:	ea20 0202 	bicne.w	r2, r0, r2
 800f3f2:	4134      	asrne	r4, r6
 800f3f4:	4314      	orrne	r4, r2
 800f3f6:	e7d1      	b.n	800f39c <rint+0xa4>
 800f3f8:	08010248 	.word	0x08010248
 800f3fc:	000fffff 	.word	0x000fffff

0800f400 <scalbn>:
 800f400:	b570      	push	{r4, r5, r6, lr}
 800f402:	ec55 4b10 	vmov	r4, r5, d0
 800f406:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f40a:	4606      	mov	r6, r0
 800f40c:	462b      	mov	r3, r5
 800f40e:	b9aa      	cbnz	r2, 800f43c <scalbn+0x3c>
 800f410:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f414:	4323      	orrs	r3, r4
 800f416:	d03b      	beq.n	800f490 <scalbn+0x90>
 800f418:	4b31      	ldr	r3, [pc, #196]	; (800f4e0 <scalbn+0xe0>)
 800f41a:	4629      	mov	r1, r5
 800f41c:	2200      	movs	r2, #0
 800f41e:	ee10 0a10 	vmov	r0, s0
 800f422:	f7f1 f873 	bl	800050c <__aeabi_dmul>
 800f426:	4b2f      	ldr	r3, [pc, #188]	; (800f4e4 <scalbn+0xe4>)
 800f428:	429e      	cmp	r6, r3
 800f42a:	4604      	mov	r4, r0
 800f42c:	460d      	mov	r5, r1
 800f42e:	da12      	bge.n	800f456 <scalbn+0x56>
 800f430:	a327      	add	r3, pc, #156	; (adr r3, 800f4d0 <scalbn+0xd0>)
 800f432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f436:	f7f1 f869 	bl	800050c <__aeabi_dmul>
 800f43a:	e009      	b.n	800f450 <scalbn+0x50>
 800f43c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f440:	428a      	cmp	r2, r1
 800f442:	d10c      	bne.n	800f45e <scalbn+0x5e>
 800f444:	ee10 2a10 	vmov	r2, s0
 800f448:	4620      	mov	r0, r4
 800f44a:	4629      	mov	r1, r5
 800f44c:	f7f0 fea8 	bl	80001a0 <__adddf3>
 800f450:	4604      	mov	r4, r0
 800f452:	460d      	mov	r5, r1
 800f454:	e01c      	b.n	800f490 <scalbn+0x90>
 800f456:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f45a:	460b      	mov	r3, r1
 800f45c:	3a36      	subs	r2, #54	; 0x36
 800f45e:	4432      	add	r2, r6
 800f460:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f464:	428a      	cmp	r2, r1
 800f466:	dd0b      	ble.n	800f480 <scalbn+0x80>
 800f468:	ec45 4b11 	vmov	d1, r4, r5
 800f46c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800f4d8 <scalbn+0xd8>
 800f470:	f000 f83c 	bl	800f4ec <copysign>
 800f474:	a318      	add	r3, pc, #96	; (adr r3, 800f4d8 <scalbn+0xd8>)
 800f476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47a:	ec51 0b10 	vmov	r0, r1, d0
 800f47e:	e7da      	b.n	800f436 <scalbn+0x36>
 800f480:	2a00      	cmp	r2, #0
 800f482:	dd08      	ble.n	800f496 <scalbn+0x96>
 800f484:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f488:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f48c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f490:	ec45 4b10 	vmov	d0, r4, r5
 800f494:	bd70      	pop	{r4, r5, r6, pc}
 800f496:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f49a:	da0d      	bge.n	800f4b8 <scalbn+0xb8>
 800f49c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f4a0:	429e      	cmp	r6, r3
 800f4a2:	ec45 4b11 	vmov	d1, r4, r5
 800f4a6:	dce1      	bgt.n	800f46c <scalbn+0x6c>
 800f4a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800f4d0 <scalbn+0xd0>
 800f4ac:	f000 f81e 	bl	800f4ec <copysign>
 800f4b0:	a307      	add	r3, pc, #28	; (adr r3, 800f4d0 <scalbn+0xd0>)
 800f4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b6:	e7e0      	b.n	800f47a <scalbn+0x7a>
 800f4b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4bc:	3236      	adds	r2, #54	; 0x36
 800f4be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	4629      	mov	r1, r5
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	4b06      	ldr	r3, [pc, #24]	; (800f4e8 <scalbn+0xe8>)
 800f4ce:	e7b2      	b.n	800f436 <scalbn+0x36>
 800f4d0:	c2f8f359 	.word	0xc2f8f359
 800f4d4:	01a56e1f 	.word	0x01a56e1f
 800f4d8:	8800759c 	.word	0x8800759c
 800f4dc:	7e37e43c 	.word	0x7e37e43c
 800f4e0:	43500000 	.word	0x43500000
 800f4e4:	ffff3cb0 	.word	0xffff3cb0
 800f4e8:	3c900000 	.word	0x3c900000

0800f4ec <copysign>:
 800f4ec:	ec51 0b10 	vmov	r0, r1, d0
 800f4f0:	ee11 0a90 	vmov	r0, s3
 800f4f4:	ee10 2a10 	vmov	r2, s0
 800f4f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f4fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800f500:	ea41 0300 	orr.w	r3, r1, r0
 800f504:	ec43 2b10 	vmov	d0, r2, r3
 800f508:	4770      	bx	lr
	...

0800f50c <_init>:
 800f50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f50e:	bf00      	nop
 800f510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f512:	bc08      	pop	{r3}
 800f514:	469e      	mov	lr, r3
 800f516:	4770      	bx	lr

0800f518 <_fini>:
 800f518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f51a:	bf00      	nop
 800f51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f51e:	bc08      	pop	{r3}
 800f520:	469e      	mov	lr, r3
 800f522:	4770      	bx	lr
