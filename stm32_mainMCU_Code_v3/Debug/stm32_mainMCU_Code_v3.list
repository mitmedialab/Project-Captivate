
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acb0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800adf0  0800adf0  0001adf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b1ac  0800b1ac  0001b1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b1b4  0800b1b4  0001b1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b1b8  0800b1b8  0001b1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  20000004  0800b1bc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000068  0800b220  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  0800b2b9  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044e0  20000118  0800b2ca  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200045f8  0800b2ca  000245f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000a96  200300c4  200300c4  00030000  2**2
                  ALLOC
 15 .debug_info   000587c5  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000922c  00000000  00000000  0007890a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00020f66  00000000  00000000  00081b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00002b50  00000000  00000000  000a2aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00002df0  00000000  00000000  000a55f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0001fa00  00000000  00000000  000a83e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000159e4  00000000  00000000  000c7de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  000dd7c4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00007554  00000000  00000000  000dd840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000118 	.word	0x20000118
 800015c:	00000000 	.word	0x00000000
 8000160:	0800add8 	.word	0x0800add8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000011c 	.word	0x2000011c
 800017c:	0800add8 	.word	0x0800add8

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_uldivmod>:
 8000194:	b953      	cbnz	r3, 80001ac <__aeabi_uldivmod+0x18>
 8000196:	b94a      	cbnz	r2, 80001ac <__aeabi_uldivmod+0x18>
 8000198:	2900      	cmp	r1, #0
 800019a:	bf08      	it	eq
 800019c:	2800      	cmpeq	r0, #0
 800019e:	bf1c      	itt	ne
 80001a0:	f04f 31ff 	movne.w	r1, #4294967295
 80001a4:	f04f 30ff 	movne.w	r0, #4294967295
 80001a8:	f000 b972 	b.w	8000490 <__aeabi_idiv0>
 80001ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b4:	f000 f806 	bl	80001c4 <__udivmoddi4>
 80001b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr

080001c4 <__udivmoddi4>:
 80001c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c8:	9e08      	ldr	r6, [sp, #32]
 80001ca:	4604      	mov	r4, r0
 80001cc:	4688      	mov	r8, r1
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d14b      	bne.n	800026a <__udivmoddi4+0xa6>
 80001d2:	428a      	cmp	r2, r1
 80001d4:	4615      	mov	r5, r2
 80001d6:	d967      	bls.n	80002a8 <__udivmoddi4+0xe4>
 80001d8:	fab2 f282 	clz	r2, r2
 80001dc:	b14a      	cbz	r2, 80001f2 <__udivmoddi4+0x2e>
 80001de:	f1c2 0720 	rsb	r7, r2, #32
 80001e2:	fa01 f302 	lsl.w	r3, r1, r2
 80001e6:	fa20 f707 	lsr.w	r7, r0, r7
 80001ea:	4095      	lsls	r5, r2
 80001ec:	ea47 0803 	orr.w	r8, r7, r3
 80001f0:	4094      	lsls	r4, r2
 80001f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f6:	0c23      	lsrs	r3, r4, #16
 80001f8:	fbb8 f7fe 	udiv	r7, r8, lr
 80001fc:	fa1f fc85 	uxth.w	ip, r5
 8000200:	fb0e 8817 	mls	r8, lr, r7, r8
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	fb07 f10c 	mul.w	r1, r7, ip
 800020c:	4299      	cmp	r1, r3
 800020e:	d909      	bls.n	8000224 <__udivmoddi4+0x60>
 8000210:	18eb      	adds	r3, r5, r3
 8000212:	f107 30ff 	add.w	r0, r7, #4294967295
 8000216:	f080 811b 	bcs.w	8000450 <__udivmoddi4+0x28c>
 800021a:	4299      	cmp	r1, r3
 800021c:	f240 8118 	bls.w	8000450 <__udivmoddi4+0x28c>
 8000220:	3f02      	subs	r7, #2
 8000222:	442b      	add	r3, r5
 8000224:	1a5b      	subs	r3, r3, r1
 8000226:	b2a4      	uxth	r4, r4
 8000228:	fbb3 f0fe 	udiv	r0, r3, lr
 800022c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000230:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000234:	fb00 fc0c 	mul.w	ip, r0, ip
 8000238:	45a4      	cmp	ip, r4
 800023a:	d909      	bls.n	8000250 <__udivmoddi4+0x8c>
 800023c:	192c      	adds	r4, r5, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8107 	bcs.w	8000454 <__udivmoddi4+0x290>
 8000246:	45a4      	cmp	ip, r4
 8000248:	f240 8104 	bls.w	8000454 <__udivmoddi4+0x290>
 800024c:	3802      	subs	r0, #2
 800024e:	442c      	add	r4, r5
 8000250:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000254:	eba4 040c 	sub.w	r4, r4, ip
 8000258:	2700      	movs	r7, #0
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa0>
 800025c:	40d4      	lsrs	r4, r2
 800025e:	2300      	movs	r3, #0
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	428b      	cmp	r3, r1
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0xbe>
 800026e:	2e00      	cmp	r6, #0
 8000270:	f000 80eb 	beq.w	800044a <__udivmoddi4+0x286>
 8000274:	2700      	movs	r7, #0
 8000276:	e9c6 0100 	strd	r0, r1, [r6]
 800027a:	4638      	mov	r0, r7
 800027c:	4639      	mov	r1, r7
 800027e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000282:	fab3 f783 	clz	r7, r3
 8000286:	2f00      	cmp	r7, #0
 8000288:	d147      	bne.n	800031a <__udivmoddi4+0x156>
 800028a:	428b      	cmp	r3, r1
 800028c:	d302      	bcc.n	8000294 <__udivmoddi4+0xd0>
 800028e:	4282      	cmp	r2, r0
 8000290:	f200 80fa 	bhi.w	8000488 <__udivmoddi4+0x2c4>
 8000294:	1a84      	subs	r4, r0, r2
 8000296:	eb61 0303 	sbc.w	r3, r1, r3
 800029a:	2001      	movs	r0, #1
 800029c:	4698      	mov	r8, r3
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d0e0      	beq.n	8000264 <__udivmoddi4+0xa0>
 80002a2:	e9c6 4800 	strd	r4, r8, [r6]
 80002a6:	e7dd      	b.n	8000264 <__udivmoddi4+0xa0>
 80002a8:	b902      	cbnz	r2, 80002ac <__udivmoddi4+0xe8>
 80002aa:	deff      	udf	#255	; 0xff
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	f040 808f 	bne.w	80003d4 <__udivmoddi4+0x210>
 80002b6:	1b49      	subs	r1, r1, r5
 80002b8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002bc:	fa1f f885 	uxth.w	r8, r5
 80002c0:	2701      	movs	r7, #1
 80002c2:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fb0e 111c 	mls	r1, lr, ip, r1
 80002cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d0:	fb08 f10c 	mul.w	r1, r8, ip
 80002d4:	4299      	cmp	r1, r3
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0x124>
 80002d8:	18eb      	adds	r3, r5, r3
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x122>
 80002e0:	4299      	cmp	r1, r3
 80002e2:	f200 80cd 	bhi.w	8000480 <__udivmoddi4+0x2bc>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1a59      	subs	r1, r3, r1
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x14c>
 8000300:	192c      	adds	r4, r5, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x14a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80b6 	bhi.w	800047a <__udivmoddi4+0x2b6>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e79f      	b.n	800025a <__udivmoddi4+0x96>
 800031a:	f1c7 0c20 	rsb	ip, r7, #32
 800031e:	40bb      	lsls	r3, r7
 8000320:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000324:	ea4e 0e03 	orr.w	lr, lr, r3
 8000328:	fa01 f407 	lsl.w	r4, r1, r7
 800032c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000330:	fa21 f30c 	lsr.w	r3, r1, ip
 8000334:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000338:	4325      	orrs	r5, r4
 800033a:	fbb3 f9f8 	udiv	r9, r3, r8
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	fb08 3319 	mls	r3, r8, r9, r3
 8000344:	fa1f fa8e 	uxth.w	sl, lr
 8000348:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800034c:	fb09 f40a 	mul.w	r4, r9, sl
 8000350:	429c      	cmp	r4, r3
 8000352:	fa02 f207 	lsl.w	r2, r2, r7
 8000356:	fa00 f107 	lsl.w	r1, r0, r7
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b0>
 800035c:	eb1e 0303 	adds.w	r3, lr, r3
 8000360:	f109 30ff 	add.w	r0, r9, #4294967295
 8000364:	f080 8087 	bcs.w	8000476 <__udivmoddi4+0x2b2>
 8000368:	429c      	cmp	r4, r3
 800036a:	f240 8084 	bls.w	8000476 <__udivmoddi4+0x2b2>
 800036e:	f1a9 0902 	sub.w	r9, r9, #2
 8000372:	4473      	add	r3, lr
 8000374:	1b1b      	subs	r3, r3, r4
 8000376:	b2ad      	uxth	r5, r5
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000384:	fb00 fa0a 	mul.w	sl, r0, sl
 8000388:	45a2      	cmp	sl, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1da>
 800038c:	eb1e 0404 	adds.w	r4, lr, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	d26b      	bcs.n	800046e <__udivmoddi4+0x2aa>
 8000396:	45a2      	cmp	sl, r4
 8000398:	d969      	bls.n	800046e <__udivmoddi4+0x2aa>
 800039a:	3802      	subs	r0, #2
 800039c:	4474      	add	r4, lr
 800039e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003a2:	fba0 8902 	umull	r8, r9, r0, r2
 80003a6:	eba4 040a 	sub.w	r4, r4, sl
 80003aa:	454c      	cmp	r4, r9
 80003ac:	46c2      	mov	sl, r8
 80003ae:	464b      	mov	r3, r9
 80003b0:	d354      	bcc.n	800045c <__udivmoddi4+0x298>
 80003b2:	d051      	beq.n	8000458 <__udivmoddi4+0x294>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2c8>
 80003b8:	ebb1 050a 	subs.w	r5, r1, sl
 80003bc:	eb64 0403 	sbc.w	r4, r4, r3
 80003c0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c4:	40fd      	lsrs	r5, r7
 80003c6:	40fc      	lsrs	r4, r7
 80003c8:	ea4c 0505 	orr.w	r5, ip, r5
 80003cc:	e9c6 5400 	strd	r5, r4, [r6]
 80003d0:	2700      	movs	r7, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa0>
 80003d4:	f1c2 0320 	rsb	r3, r2, #32
 80003d8:	fa20 f703 	lsr.w	r7, r0, r3
 80003dc:	4095      	lsls	r5, r2
 80003de:	fa01 f002 	lsl.w	r0, r1, r2
 80003e2:	fa21 f303 	lsr.w	r3, r1, r3
 80003e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003ea:	4338      	orrs	r0, r7
 80003ec:	0c01      	lsrs	r1, r0, #16
 80003ee:	fbb3 f7fe 	udiv	r7, r3, lr
 80003f2:	fa1f f885 	uxth.w	r8, r5
 80003f6:	fb0e 3317 	mls	r3, lr, r7, r3
 80003fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fe:	fb07 f308 	mul.w	r3, r7, r8
 8000402:	428b      	cmp	r3, r1
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x256>
 800040a:	1869      	adds	r1, r5, r1
 800040c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000410:	d22f      	bcs.n	8000472 <__udivmoddi4+0x2ae>
 8000412:	428b      	cmp	r3, r1
 8000414:	d92d      	bls.n	8000472 <__udivmoddi4+0x2ae>
 8000416:	3f02      	subs	r7, #2
 8000418:	4429      	add	r1, r5
 800041a:	1acb      	subs	r3, r1, r3
 800041c:	b281      	uxth	r1, r0
 800041e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000422:	fb0e 3310 	mls	r3, lr, r0, r3
 8000426:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800042a:	fb00 f308 	mul.w	r3, r0, r8
 800042e:	428b      	cmp	r3, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x27e>
 8000432:	1869      	adds	r1, r5, r1
 8000434:	f100 3cff 	add.w	ip, r0, #4294967295
 8000438:	d217      	bcs.n	800046a <__udivmoddi4+0x2a6>
 800043a:	428b      	cmp	r3, r1
 800043c:	d915      	bls.n	800046a <__udivmoddi4+0x2a6>
 800043e:	3802      	subs	r0, #2
 8000440:	4429      	add	r1, r5
 8000442:	1ac9      	subs	r1, r1, r3
 8000444:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000448:	e73b      	b.n	80002c2 <__udivmoddi4+0xfe>
 800044a:	4637      	mov	r7, r6
 800044c:	4630      	mov	r0, r6
 800044e:	e709      	b.n	8000264 <__udivmoddi4+0xa0>
 8000450:	4607      	mov	r7, r0
 8000452:	e6e7      	b.n	8000224 <__udivmoddi4+0x60>
 8000454:	4618      	mov	r0, r3
 8000456:	e6fb      	b.n	8000250 <__udivmoddi4+0x8c>
 8000458:	4541      	cmp	r1, r8
 800045a:	d2ab      	bcs.n	80003b4 <__udivmoddi4+0x1f0>
 800045c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000460:	eb69 020e 	sbc.w	r2, r9, lr
 8000464:	3801      	subs	r0, #1
 8000466:	4613      	mov	r3, r2
 8000468:	e7a4      	b.n	80003b4 <__udivmoddi4+0x1f0>
 800046a:	4660      	mov	r0, ip
 800046c:	e7e9      	b.n	8000442 <__udivmoddi4+0x27e>
 800046e:	4618      	mov	r0, r3
 8000470:	e795      	b.n	800039e <__udivmoddi4+0x1da>
 8000472:	4667      	mov	r7, ip
 8000474:	e7d1      	b.n	800041a <__udivmoddi4+0x256>
 8000476:	4681      	mov	r9, r0
 8000478:	e77c      	b.n	8000374 <__udivmoddi4+0x1b0>
 800047a:	3802      	subs	r0, #2
 800047c:	442c      	add	r4, r5
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0x14c>
 8000480:	f1ac 0c02 	sub.w	ip, ip, #2
 8000484:	442b      	add	r3, r5
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x124>
 8000488:	4638      	mov	r0, r7
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xda>
 800048c:	4637      	mov	r7, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa0>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000494:	b500      	push	{lr}
 8000496:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000498:	2300      	movs	r3, #0
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	9302      	str	r3, [sp, #8]
 80004a0:	9303      	str	r3, [sp, #12]
 80004a2:	9304      	str	r3, [sp, #16]
 80004a4:	9305      	str	r3, [sp, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80004a6:	481a      	ldr	r0, [pc, #104]	; (8000510 <MX_ADC1_Init+0x7c>)
 80004a8:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <MX_ADC1_Init+0x80>)
 80004aa:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80004ac:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80004b0:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80004b2:	2210      	movs	r2, #16
 80004b4:	6082      	str	r2, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004b6:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004b8:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ba:	2204      	movs	r2, #4
 80004bc:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004be:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004c0:	2201      	movs	r2, #1
 80004c2:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 80004c4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004c6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ca:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80004ce:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004d2:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004d8:	f001 fcda 	bl	8001e90 <HAL_ADC_Init>
 80004dc:	b990      	cbnz	r0, 8000504 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_ADC1_Init+0x84>)
 80004e0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e2:	2306      	movs	r3, #6
 80004e4:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80004e6:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004e8:	237f      	movs	r3, #127	; 0x7f
 80004ea:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ec:	2304      	movs	r3, #4
 80004ee:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f4:	4669      	mov	r1, sp
 80004f6:	4806      	ldr	r0, [pc, #24]	; (8000510 <MX_ADC1_Init+0x7c>)
 80004f8:	f001 fe12 	bl	8002120 <HAL_ADC_ConfigChannel>
 80004fc:	b928      	cbnz	r0, 800050a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
  }

}
 80004fe:	b007      	add	sp, #28
 8000500:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000504:	f001 f94e 	bl	80017a4 <Error_Handler>
 8000508:	e7e9      	b.n	80004de <MX_ADC1_Init+0x4a>
    Error_Handler();
 800050a:	f001 f94b 	bl	80017a4 <Error_Handler>
}
 800050e:	e7f6      	b.n	80004fe <MX_ADC1_Init+0x6a>
 8000510:	2000416c 	.word	0x2000416c
 8000514:	50040000 	.word	0x50040000
 8000518:	14f00020 	.word	0x14f00020

0800051c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800051c:	b510      	push	{r4, lr}
 800051e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	2300      	movs	r3, #0
 8000522:	9303      	str	r3, [sp, #12]
 8000524:	9304      	str	r3, [sp, #16]
 8000526:	9305      	str	r3, [sp, #20]
 8000528:	9306      	str	r3, [sp, #24]
 800052a:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800052c:	6802      	ldr	r2, [r0, #0]
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <HAL_ADC_MspInit+0x8c>)
 8000530:	429a      	cmp	r2, r3
 8000532:	d001      	beq.n	8000538 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000534:	b008      	add	sp, #32
 8000536:	bd10      	pop	{r4, pc}
 8000538:	4604      	mov	r4, r0
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800053a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000544:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000548:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800054c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800054e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000552:	f042 0201 	orr.w	r2, r2, #1
 8000556:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000560:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000562:	2301      	movs	r3, #1
 8000564:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000566:	2303      	movs	r3, #3
 8000568:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	a903      	add	r1, sp, #12
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f002 fbe2 	bl	8002d38 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <HAL_ADC_MspInit+0x90>)
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_ADC_MspInit+0x94>)
 8000578:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800057a:	2305      	movs	r3, #5
 800057c:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800057e:	2300      	movs	r3, #0
 8000580:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000582:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000588:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800058a:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800058c:	2220      	movs	r2, #32
 800058e:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000590:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000592:	f002 fa7d 	bl	8002a90 <HAL_DMA_Init>
 8000596:	b918      	cbnz	r0, 80005a0 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_ADC_MspInit+0x90>)
 800059a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800059c:	629c      	str	r4, [r3, #40]	; 0x28
}
 800059e:	e7c9      	b.n	8000534 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80005a0:	f001 f900 	bl	80017a4 <Error_Handler>
 80005a4:	e7f8      	b.n	8000598 <HAL_ADC_MspInit+0x7c>
 80005a6:	bf00      	nop
 80005a8:	50040000 	.word	0x50040000
 80005ac:	200041d0 	.word	0x200041d0
 80005b0:	40020008 	.word	0x40020008

080005b4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80005b4:	b508      	push	{r3, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80005b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005ba:	6893      	ldr	r3, [r2, #8]
 80005bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c0:	6093      	str	r3, [r2, #8]
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80005c2:	f00a fbb1 	bl	800ad28 <UTIL_LPM_Init>
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
}
 80005c6:	bd08      	pop	{r3, pc}

080005c8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80005c8:	b510      	push	{r4, lr}
 80005ca:	b088      	sub	sp, #32
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80005cc:	f009 fc92 	bl	8009ef4 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 80005d0:	2000      	movs	r0, #0
 80005d2:	f006 f8cb 	bl	800676c <osMutexNew>
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <appe_Tl_Init+0x64>)
 80005d8:	6018      	str	r0, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 80005da:	2200      	movs	r2, #0
 80005dc:	4611      	mov	r1, r2
 80005de:	2001      	movs	r0, #1
 80005e0:	f006 f99c 	bl	800691c <osSemaphoreNew>
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <appe_Tl_Init+0x68>)
 80005e6:	6018      	str	r0, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL,&ShciUserEvtProcess_attr);
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <appe_Tl_Init+0x6c>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <appe_Tl_Init+0x70>)
 80005ee:	f005 ff79 	bl	80064e4 <osThreadNew>
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <appe_Tl_Init+0x74>)
 80005f4:	6018      	str	r0, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005f6:	4c12      	ldr	r4, [pc, #72]	; (8000640 <appe_Tl_Init+0x78>)
 80005f8:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <appe_Tl_Init+0x7c>)
 80005fc:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005fe:	4669      	mov	r1, sp
 8000600:	4811      	ldr	r0, [pc, #68]	; (8000648 <appe_Tl_Init+0x80>)
 8000602:	f009 faf3 	bl	8009bec <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800060a:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 800060e:	9303      	str	r3, [sp, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000610:	f504 7406 	add.w	r4, r4, #536	; 0x218
 8000614:	9404      	str	r4, [sp, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000616:	f240 533c 	movw	r3, #1340	; 0x53c
 800061a:	9305      	str	r3, [sp, #20]
  TL_MM_Init( &tl_mm_config );
 800061c:	a802      	add	r0, sp, #8
 800061e:	f009 fd55 	bl	800a0cc <TL_MM_Init>

  TL_Enable();
 8000622:	f009 fc63 	bl	8009eec <TL_Enable>

  return;
}
 8000626:	b008      	add	sp, #32
 8000628:	bd10      	pop	{r4, pc}
 800062a:	bf00      	nop
 800062c:	20004230 	.word	0x20004230
 8000630:	2000423c 	.word	0x2000423c
 8000634:	0800ae90 	.word	0x0800ae90
 8000638:	080006ed 	.word	0x080006ed
 800063c:	20004238 	.word	0x20004238
 8000640:	200300c4 	.word	0x200300c4
 8000644:	080006c5 	.word	0x080006c5
 8000648:	0800069d 	.word	0x0800069d

0800064c <APPE_SysEvtReadyProcessing>:
  }
  return;
}

static void APPE_SysEvtReadyProcessing( void )
{
 800064c:	b508      	push	{r3, lr}
  /* Traces channel initialization */
  TL_TRACES_Init( );
 800064e:	f009 fd6b 	bl	800a128 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000652:	f00a f987 	bl	800a964 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000656:	2100      	movs	r1, #0
 8000658:	2001      	movs	r0, #1
 800065a:	f00a fb6f 	bl	800ad3c <UTIL_LPM_SetOffMode>
  return;
}
 800065e:	bd08      	pop	{r3, pc}

08000660 <APPE_SysEvtError>:
{
 8000660:	b508      	push	{r3, lr}
  switch(ErrorCode)
 8000662:	287d      	cmp	r0, #125	; 0x7d
 8000664:	d008      	beq.n	8000678 <APPE_SysEvtError+0x18>
 8000666:	287e      	cmp	r0, #126	; 0x7e
 8000668:	d00c      	beq.n	8000684 <APPE_SysEvtError+0x24>
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800066a:	4603      	mov	r3, r0
 800066c:	4a08      	ldr	r2, [pc, #32]	; (8000690 <APPE_SysEvtError+0x30>)
 800066e:	2101      	movs	r1, #1
 8000670:	2000      	movs	r0, #0
 8000672:	f001 fa11 	bl	8001a98 <logApplication>
  return;
 8000676:	e004      	b.n	8000682 <APPE_SysEvtError+0x22>
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <APPE_SysEvtError+0x34>)
 800067a:	2101      	movs	r1, #1
 800067c:	2000      	movs	r0, #0
 800067e:	f001 fa0b 	bl	8001a98 <logApplication>
}
 8000682:	bd08      	pop	{r3, pc}
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <APPE_SysEvtError+0x38>)
 8000686:	2101      	movs	r1, #1
 8000688:	2000      	movs	r0, #0
 800068a:	f001 fa05 	bl	8001a98 <logApplication>
       break;
 800068e:	e7f8      	b.n	8000682 <APPE_SysEvtError+0x22>
 8000690:	0800ae70 	.word	0x0800ae70
 8000694:	0800ae2c 	.word	0x0800ae2c
 8000698:	0800ae50 	.word	0x0800ae50

0800069c <APPE_SysUserEvtRx>:
{
 800069c:	b508      	push	{r3, lr}
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800069e:	6842      	ldr	r2, [r0, #4]
  switch(p_sys_event->subevtcode)
 80006a0:	f8b2 300b 	ldrh.w	r3, [r2, #11]
 80006a4:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 80006a8:	d004      	beq.n	80006b4 <APPE_SysUserEvtRx+0x18>
 80006aa:	f249 2101 	movw	r1, #37377	; 0x9201
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d003      	beq.n	80006ba <APPE_SysUserEvtRx+0x1e>
}
 80006b2:	bd08      	pop	{r3, pc}
         APPE_SysEvtReadyProcessing();
 80006b4:	f7ff ffca 	bl	800064c <APPE_SysEvtReadyProcessing>
         break;
 80006b8:	e7fb      	b.n	80006b2 <APPE_SysUserEvtRx+0x16>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80006ba:	7b50      	ldrb	r0, [r2, #13]
 80006bc:	f7ff ffd0 	bl	8000660 <APPE_SysEvtError>
  return;
 80006c0:	e7f7      	b.n	80006b2 <APPE_SysUserEvtRx+0x16>
	...

080006c4 <APPE_SysStatusNot>:
{
 80006c4:	b508      	push	{r3, lr}
  switch (status)
 80006c6:	b110      	cbz	r0, 80006ce <APPE_SysStatusNot+0xa>
 80006c8:	2801      	cmp	r0, #1
 80006ca:	d007      	beq.n	80006dc <APPE_SysStatusNot+0x18>
}
 80006cc:	bd08      	pop	{r3, pc}
      osMutexAcquire( MtxShciId, osWaitForever );
 80006ce:	f04f 31ff 	mov.w	r1, #4294967295
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <APPE_SysStatusNot+0x24>)
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	f006 f8a7 	bl	8006828 <osMutexAcquire>
      break;
 80006da:	e7f7      	b.n	80006cc <APPE_SysStatusNot+0x8>
      osMutexRelease( MtxShciId );
 80006dc:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <APPE_SysStatusNot+0x24>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	f006 f8e2 	bl	80068a8 <osMutexRelease>
  return;
 80006e4:	e7f2      	b.n	80006cc <APPE_SysStatusNot+0x8>
 80006e6:	bf00      	nop
 80006e8:	20004230 	.word	0x20004230

080006ec <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80006ec:	b508      	push	{r3, lr}
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80006ee:	f04f 32ff 	mov.w	r2, #4294967295
 80006f2:	2100      	movs	r1, #0
 80006f4:	2001      	movs	r0, #1
 80006f6:	f005 ffb1 	bl	800665c <osThreadFlagsWait>
     shci_user_evt_proc();
 80006fa:	f009 fa89 	bl	8009c10 <shci_user_evt_proc>
 80006fe:	e7f6      	b.n	80006ee <ShciUserEvtProcess+0x2>

08000700 <APPE_Init>:
{
 8000700:	b508      	push	{r3, lr}
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000702:	f7ff ff57 	bl	80005b4 <SystemPower_Config>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000706:	4903      	ldr	r1, [pc, #12]	; (8000714 <APPE_Init+0x14>)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fc85 	bl	8001018 <HW_TS_Init>
  appe_Tl_Init();	/* Initialize all transport layers */
 800070e:	f7ff ff5b 	bl	80005c8 <appe_Tl_Init>
}
 8000712:	bd08      	pop	{r3, pc}
 8000714:	200043bc 	.word	0x200043bc

08000718 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8000718:	b508      	push	{r3, lr}
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 800071a:	2101      	movs	r1, #1
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <shci_notify_asynch_evt+0x10>)
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	f005 ff54 	bl	80065cc <osThreadFlagsSet>
  return;
}
 8000724:	bd08      	pop	{r3, pc}
 8000726:	bf00      	nop
 8000728:	20004238 	.word	0x20004238

0800072c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800072c:	b508      	push	{r3, lr}
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 800072e:	4b02      	ldr	r3, [pc, #8]	; (8000738 <shci_cmd_resp_release+0xc>)
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	f006 f9a7 	bl	8006a84 <osSemaphoreRelease>
  return;
}
 8000736:	bd08      	pop	{r3, pc}
 8000738:	2000423c 	.word	0x2000423c

0800073c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800073c:	b508      	push	{r3, lr}
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 800073e:	f04f 31ff 	mov.w	r1, #4294967295
 8000742:	4b02      	ldr	r3, [pc, #8]	; (800074c <shci_cmd_resp_wait+0x10>)
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	f006 f959 	bl	80069fc <osSemaphoreAcquire>
  return;
}
 800074a:	bd08      	pop	{r3, pc}
 800074c:	2000423c 	.word	0x2000423c

08000750 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000750:	b508      	push	{r3, lr}
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000752:	f009 fcdb 	bl	800a10c <TL_MM_EvtDone>
}
 8000756:	bd08      	pop	{r3, pc}

08000758 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000758:	b508      	push	{r3, lr}
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) temp, sizeof(temp));
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800075a:	2001      	movs	r0, #1
 800075c:	f005 ffe4 	bl	8006728 <osDelay>
 8000760:	e7fb      	b.n	800075a <StartDefaultTask+0x2>
	...

08000764 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	b0a4      	sub	sp, #144	; 0x90
osKernelInitialize();
 8000768:	f005 fe74 	bl	8006454 <osKernelInitialize>
  const osThreadAttr_t defaultTask_attributes = {
 800076c:	2520      	movs	r5, #32
 800076e:	462a      	mov	r2, r5
 8000770:	2100      	movs	r1, #0
 8000772:	a81c      	add	r0, sp, #112	; 0x70
 8000774:	f00a fb27 	bl	800adc6 <memset>
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <MX_FREERTOS_Init+0xc4>)
 800077a:	931b      	str	r3, [sp, #108]	; 0x6c
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	9320      	str	r3, [sp, #128]	; 0x80
 8000780:	2418      	movs	r4, #24
 8000782:	9421      	str	r4, [sp, #132]	; 0x84
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000784:	aa1b      	add	r2, sp, #108	; 0x6c
 8000786:	2100      	movs	r1, #0
 8000788:	4828      	ldr	r0, [pc, #160]	; (800082c <MX_FREERTOS_Init+0xc8>)
 800078a:	f005 feab 	bl	80064e4 <osThreadNew>
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_FREERTOS_Init+0xcc>)
 8000790:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t threadFrontLightsTask_attributes = {
 8000792:	462a      	mov	r2, r5
 8000794:	2100      	movs	r1, #0
 8000796:	a813      	add	r0, sp, #76	; 0x4c
 8000798:	f00a fb15 	bl	800adc6 <memset>
 800079c:	4b25      	ldr	r3, [pc, #148]	; (8000834 <MX_FREERTOS_Init+0xd0>)
 800079e:	9312      	str	r3, [sp, #72]	; 0x48
 80007a0:	f44f 7680 	mov.w	r6, #256	; 0x100
 80007a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80007a6:	9418      	str	r4, [sp, #96]	; 0x60
   threadFrontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &threadFrontLightsTask_attributes);
 80007a8:	aa12      	add	r2, sp, #72	; 0x48
 80007aa:	2100      	movs	r1, #0
 80007ac:	4822      	ldr	r0, [pc, #136]	; (8000838 <MX_FREERTOS_Init+0xd4>)
 80007ae:	f005 fe99 	bl	80064e4 <osThreadNew>
 80007b2:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_FREERTOS_Init+0xd8>)
 80007b4:	6018      	str	r0, [r3, #0]
   const osThreadAttr_t blinkTask_attributes = {
 80007b6:	462a      	mov	r2, r5
 80007b8:	2100      	movs	r1, #0
 80007ba:	a80a      	add	r0, sp, #40	; 0x28
 80007bc:	f00a fb03 	bl	800adc6 <memset>
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_FREERTOS_Init+0xdc>)
 80007c2:	9309      	str	r3, [sp, #36]	; 0x24
 80007c4:	960e      	str	r6, [sp, #56]	; 0x38
 80007c6:	940f      	str	r4, [sp, #60]	; 0x3c
   blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 80007c8:	aa09      	add	r2, sp, #36	; 0x24
 80007ca:	2100      	movs	r1, #0
 80007cc:	481d      	ldr	r0, [pc, #116]	; (8000844 <MX_FREERTOS_Init+0xe0>)
 80007ce:	f005 fe89 	bl	80064e4 <osThreadNew>
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_FREERTOS_Init+0xe4>)
 80007d4:	6018      	str	r0, [r3, #0]
   lightsSimpleQueueHandle = osMessageQueueNew (MAX_LIGHT_SIMPLE_QUEUE_SIZE, sizeof(lightsSimpleMessage), NULL);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2104      	movs	r1, #4
 80007da:	2005      	movs	r0, #5
 80007dc:	f006 f990 	bl	8006b00 <osMessageQueueNew>
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_FREERTOS_Init+0xe8>)
 80007e2:	6018      	str	r0, [r3, #0]
   blinkMsgQueueHandle = osMessageQueueNew (10, sizeof(struct blinkData), NULL);
 80007e4:	2200      	movs	r2, #0
 80007e6:	216c      	movs	r1, #108	; 0x6c
 80007e8:	200a      	movs	r0, #10
 80007ea:	f006 f989 	bl	8006b00 <osMessageQueueNew>
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_FREERTOS_Init+0xec>)
 80007f0:	6018      	str	r0, [r3, #0]
   togLoggingQueueHandle = osMessageQueueNew (2, sizeof(struct LogMessage), NULL);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2106      	movs	r1, #6
 80007f6:	2002      	movs	r0, #2
 80007f8:	f006 f982 	bl	8006b00 <osMessageQueueNew>
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_FREERTOS_Init+0xf0>)
 80007fe:	6018      	str	r0, [r3, #0]
   const osThreadAttr_t masterThreadTask_attributes = {
 8000800:	462a      	mov	r2, r5
 8000802:	2100      	movs	r1, #0
 8000804:	a801      	add	r0, sp, #4
 8000806:	f00a fade 	bl	800adc6 <memset>
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_FREERTOS_Init+0xf4>)
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	9605      	str	r6, [sp, #20]
 8000810:	9406      	str	r4, [sp, #24]
   masterThreadTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterThreadTask_attributes);
 8000812:	466a      	mov	r2, sp
 8000814:	2100      	movs	r1, #0
 8000816:	4811      	ldr	r0, [pc, #68]	; (800085c <MX_FREERTOS_Init+0xf8>)
 8000818:	f005 fe64 	bl	80064e4 <osThreadNew>
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_FREERTOS_Init+0xfc>)
 800081e:	6018      	str	r0, [r3, #0]
   APPE_Init();
 8000820:	f7ff ff6e 	bl	8000700 <APPE_Init>
}
 8000824:	b024      	add	sp, #144	; 0x90
 8000826:	bd70      	pop	{r4, r5, r6, pc}
 8000828:	0800aecc 	.word	0x0800aecc
 800082c:	08000759 	.word	0x08000759
 8000830:	2000424c 	.word	0x2000424c
 8000834:	0800aed8 	.word	0x0800aed8
 8000838:	080015d9 	.word	0x080015d9
 800083c:	20004254 	.word	0x20004254
 8000840:	0800aef0 	.word	0x0800aef0
 8000844:	08000865 	.word	0x08000865
 8000848:	20004234 	.word	0x20004234
 800084c:	20004250 	.word	0x20004250
 8000850:	20004248 	.word	0x20004248
 8000854:	20004240 	.word	0x20004240
 8000858:	0800aefc 	.word	0x0800aefc
 800085c:	0800189d 	.word	0x0800189d
 8000860:	20004244 	.word	0x20004244

08000864 <BlinkTask>:

#define BLINK_HALF_BUFFER_SIZE	1000
#define BLINK_PACKET_SIZE		100
#define BLINK_ITERATOR_COUNT 	BLINK_HALF_BUFFER_SIZE / BLINK_PACKET_SIZE

void BlinkTask(void){
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	ed2d 8b02 	vpush	{d8}
	uint32_t evt;

	uint32_t payload_ID = 0;
 800086a:	2600      	movs	r6, #0
 800086c:	e04c      	b.n	8000908 <BlinkTask+0xa4>
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);

				if( evt == 0x00000004U){

					if(previousTick_ms == 0){
						previousTick_ms = HAL_GetTick();
 800086e:	f001 fb03 	bl	8001e78 <HAL_GetTick>
 8000872:	ee07 0a90 	vmov	s15, r0
 8000876:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800087a:	e029      	b.n	80008d0 <BlinkTask+0x6c>
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);

					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){

						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator*BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 800087c:	2364      	movs	r3, #100	; 0x64
 800087e:	4c2f      	ldr	r4, [pc, #188]	; (800093c <BlinkTask+0xd8>)
 8000880:	461a      	mov	r2, r3
 8000882:	492f      	ldr	r1, [pc, #188]	; (8000940 <BlinkTask+0xdc>)
 8000884:	fb03 1105 	mla	r1, r3, r5, r1
 8000888:	4620      	mov	r0, r4
 800088a:	f00a fa91 	bl	800adb0 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 800088e:	ee78 7a28 	vadd.f32	s15, s16, s17
 8000892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000896:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 800089a:	66a6      	str	r6, [r4, #104]	; 0x68

						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 800089c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
						payload_ID++;
 80008a0:	3601      	adds	r6, #1

						osMessageQueuePut(blinkMsgQueueHandle, (void *) &blinkMsgBuffer_1, 0U, 0);
 80008a2:	2300      	movs	r3, #0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4621      	mov	r1, r4
 80008a8:	4826      	ldr	r0, [pc, #152]	; (8000944 <BlinkTask+0xe0>)
 80008aa:	6800      	ldr	r0, [r0, #0]
 80008ac:	f006 f988 	bl	8006bc0 <osMessageQueuePut>
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 80008b0:	3501      	adds	r5, #1
 80008b2:	2d09      	cmp	r5, #9
 80008b4:	d9e2      	bls.n	800087c <BlinkTask+0x18>
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 80008b6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ba:	2100      	movs	r1, #0
 80008bc:	2006      	movs	r0, #6
 80008be:	f005 fecd 	bl	800665c <osThreadFlagsWait>
				if( evt == 0x00000004U){
 80008c2:	2804      	cmp	r0, #4
 80008c4:	d112      	bne.n	80008ec <BlinkTask+0x88>
					if(previousTick_ms == 0){
 80008c6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80008ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ce:	d0ce      	beq.n	800086e <BlinkTask+0xa>
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 80008d0:	f001 fad2 	bl	8001e78 <HAL_GetTick>
 80008d4:	ee07 0a90 	vmov	s15, r0
 80008d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008dc:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80008e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80008e4:	eec7 8a87 	vdiv.f32	s17, s15, s14
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 80008e8:	2500      	movs	r5, #0
 80008ea:	e7e2      	b.n	80008b2 <BlinkTask+0x4e>
//				osMessageQueuePut(blinkMsgQueueHandle, (void *) &blinkMsgBuffer_1, 0U, 0);
				// stop timer and put thread in idle if signal was reset
//				evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
//				evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, osWaitForever);

				else if( (evt & 0x00000002U) == 0x00000002U){
 80008ec:	f010 0f02 	tst.w	r0, #2
 80008f0:	d0e1      	beq.n	80008b6 <BlinkTask+0x52>

					HAL_ADC_Stop_DMA(&hadc1);
 80008f2:	4815      	ldr	r0, [pc, #84]	; (8000948 <BlinkTask+0xe4>)
 80008f4:	f001 ff99 	bl	800282a <HAL_ADC_Stop_DMA>
//					while(HAL_ADC_Stop(&hadc1) != HAL_OK)
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80008f8:	4c14      	ldr	r4, [pc, #80]	; (800094c <BlinkTask+0xe8>)
 80008fa:	2104      	movs	r1, #4
 80008fc:	4620      	mov	r0, r4
 80008fe:	f004 fb29 	bl	8004f54 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8000902:	4620      	mov	r0, r4
 8000904:	f004 f830 	bl	8004968 <HAL_TIM_Base_Stop>
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	2100      	movs	r1, #0
 800090e:	2001      	movs	r0, #1
 8000910:	f005 fea4 	bl	800665c <osThreadFlagsWait>
		if (evt == 0x00000001U)  {
 8000914:	2801      	cmp	r0, #1
 8000916:	d1f7      	bne.n	8000908 <BlinkTask+0xa4>
			HAL_TIM_Base_Start(&htim2);
 8000918:	4c0c      	ldr	r4, [pc, #48]	; (800094c <BlinkTask+0xe8>)
 800091a:	4620      	mov	r0, r4
 800091c:	f004 f80c 	bl	8004938 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000920:	2104      	movs	r1, #4
 8000922:	4620      	mov	r0, r4
 8000924:	f004 faec 	bl	8004f00 <HAL_TIM_PWM_Start>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 8000928:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <BlinkTask+0xdc>)
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <BlinkTask+0xe4>)
 8000930:	f001 fed2 	bl	80026d8 <HAL_ADC_Start_DMA>
 8000934:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8000950 <BlinkTask+0xec>
 8000938:	e7bd      	b.n	80008b6 <BlinkTask+0x52>
 800093a:	bf00      	nop
 800093c:	20000134 	.word	0x20000134
 8000940:	200001a0 	.word	0x200001a0
 8000944:	20004248 	.word	0x20004248
 8000948:	2000416c 	.word	0x2000416c
 800094c:	20004420 	.word	0x20004420
 8000950:	00000000 	.word	0x00000000

08000954 <HAL_ADC_ErrorCallback>:
}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
  i++;
 8000954:	4a02      	ldr	r2, [pc, #8]	; (8000960 <HAL_ADC_ErrorCallback+0xc>)
 8000956:	7813      	ldrb	r3, [r2, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	b2db      	uxtb	r3, r3
 800095c:	7013      	strb	r3, [r2, #0]
}
 800095e:	4770      	bx	lr
 8000960:	20000970 	.word	0x20000970

08000964 <HAL_ADC_ConvCpltCallback>:

//volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000964:	b508      	push	{r3, lr}
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer[100]), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <HAL_ADC_ConvCpltCallback+0x14>)
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_ADC_ConvCpltCallback+0x18>)
 800096a:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 800096c:	2104      	movs	r1, #4
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000970:	6818      	ldr	r0, [r3, #0]
 8000972:	f005 fe2b 	bl	80065cc <osThreadFlagsSet>

}
 8000976:	bd08      	pop	{r3, pc}
 8000978:	2000425c 	.word	0x2000425c
 800097c:	20000588 	.word	0x20000588
 8000980:	20004234 	.word	0x20004234

08000984 <HAL_ADC_ConvHalfCpltCallback>:

//volatile uint8_t half = 0;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000984:	b508      	push	{r3, lr}
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = &blink_buffer;
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800098a:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 800098c:	2104      	movs	r1, #4
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	f005 fe1b 	bl	80065cc <osThreadFlagsSet>

}
 8000996:	bd08      	pop	{r3, pc}
 8000998:	2000425c 	.word	0x2000425c
 800099c:	200001a0 	.word	0x200001a0
 80009a0:	20004234 	.word	0x20004234

080009a4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80009a4:	b500      	push	{lr}
 80009a6:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009ae:	f042 0204 	orr.w	r2, r2, #4
 80009b2:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80009b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009b6:	f002 0204 	and.w	r2, r2, #4
 80009ba:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80009bc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009c0:	f042 0201 	orr.w	r2, r2, #1
 80009c4:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80009c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80009ce:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2105      	movs	r1, #5
 80009d4:	200b      	movs	r0, #11
 80009d6:	f001 ff7b 	bl	80028d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009da:	200b      	movs	r0, #11
 80009dc:	f001 ffac 	bl	8002938 <HAL_NVIC_EnableIRQ>

}
 80009e0:	b003      	add	sp, #12
 80009e2:	f85d fb04 	ldr.w	pc, [sp], #4

080009e6 <LpTimerCb>:
  /**
   * Nothing to be done
   */

  return;
}
 80009e6:	4770      	bx	lr

080009e8 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 80009e8:	b510      	push	{r4, lr}
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 80009ea:	f241 03c6 	movw	r3, #4294	; 0x10c6
 80009ee:	4298      	cmp	r0, r3
 80009f0:	d90f      	bls.n	8000a12 <LpTimerStart+0x2a>
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
  }
  else if(time_to_sleep <= 0x418937)
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <LpTimerStart+0x68>)
 80009f4:	4298      	cmp	r0, r3
 80009f6:	d91c      	bls.n	8000a32 <LpTimerStart+0x4a>
      time_to_sleep = (~0); /* Max value */
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 80009f8:	0981      	lsrs	r1, r0, #6
 80009fa:	4816      	ldr	r0, [pc, #88]	; (8000a54 <LpTimerStart+0x6c>)
 80009fc:	fba0 3101 	umull	r3, r1, r0, r1
 8000a00:	0949      	lsrs	r1, r1, #5
    if(time_to_sleep <= 0x10C6)
 8000a02:	f241 03c6 	movw	r3, #4294	; 0x10c6
 8000a06:	4299      	cmp	r1, r3
 8000a08:	d81f      	bhi.n	8000a4a <LpTimerStart+0x62>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <LpTimerStart+0x70>)
 8000a0c:	fb03 f101 	mul.w	r1, r3, r1
 8000a10:	e007      	b.n	8000a22 <LpTimerStart+0x3a>
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8000a12:	4911      	ldr	r1, [pc, #68]	; (8000a58 <LpTimerStart+0x70>)
 8000a14:	fb01 f100 	mul.w	r1, r1, r0
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8000a18:	0989      	lsrs	r1, r1, #6
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <LpTimerStart+0x6c>)
 8000a1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a20:	0949      	lsrs	r1, r1, #5
    {
      time_to_sleep = (~0); /* Max value */
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 8000a22:	4c0e      	ldr	r4, [pc, #56]	; (8000a5c <LpTimerStart+0x74>)
 8000a24:	7920      	ldrb	r0, [r4, #4]
 8000a26:	f000 fc33 	bl	8001290 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 8000a2a:	f000 fc7f 	bl	800132c <HW_TS_RTC_ReadLeftTicksToCount>
 8000a2e:	6020      	str	r0, [r4, #0]

  return;
}
 8000a30:	bd10      	pop	{r4, pc}
    time_to_sleep = (time_to_sleep * 1000);
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fb03 f100 	mul.w	r1, r3, r0
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8000a3a:	0989      	lsrs	r1, r1, #6
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <LpTimerStart+0x6c>)
 8000a3e:	fba0 2101 	umull	r2, r1, r0, r1
 8000a42:	0949      	lsrs	r1, r1, #5
      time_to_sleep = (time_to_sleep * 1000);
 8000a44:	fb03 f101 	mul.w	r1, r3, r1
 8000a48:	e7eb      	b.n	8000a22 <LpTimerStart+0x3a>
      time_to_sleep = (~0); /* Max value */
 8000a4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4e:	e7e8      	b.n	8000a22 <LpTimerStart+0x3a>
 8000a50:	00418937 	.word	0x00418937
 8000a54:	0113094d 	.word	0x0113094d
 8000a58:	000f4240 	.word	0x000f4240
 8000a5c:	20000974 	.word	0x20000974

08000a60 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 8000a60:	b538      	push	{r3, r4, r5, lr}
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 8000a62:	4d09      	ldr	r5, [pc, #36]	; (8000a88 <LpGetElapsedTime+0x28>)
 8000a64:	682c      	ldr	r4, [r5, #0]
 8000a66:	f000 fc61 	bl	800132c <HW_TS_RTC_ReadLeftTicksToCount>
 8000a6a:	1a20      	subs	r0, r4, r0
  return_value = return_value / (1000 * 1000);
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <LpGetElapsedTime+0x2c>)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <LpGetElapsedTime+0x30>)
 8000a72:	fba0 0101 	umull	r0, r1, r0, r1
 8000a76:	f7ff fb8d 	bl	8000194 <__aeabi_uldivmod>
 8000a7a:	4604      	mov	r4, r0
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 8000a7c:	7928      	ldrb	r0, [r5, #4]
 8000a7e:	f000 fba3 	bl	80011c8 <HW_TS_Stop>

  return (uint32_t)return_value;
}
 8000a82:	4620      	mov	r0, r4
 8000a84:	bd38      	pop	{r3, r4, r5, pc}
 8000a86:	bf00      	nop
 8000a88:	20000974 	.word	0x20000974
 8000a8c:	000f4240 	.word	0x000f4240
 8000a90:	00077240 	.word	0x00077240

08000a94 <LpTimerInit>:
{
 8000a94:	b508      	push	{r3, lr}
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8000a96:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <LpTimerInit+0x10>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4903      	ldr	r1, [pc, #12]	; (8000aa8 <LpTimerInit+0x14>)
 8000a9c:	4610      	mov	r0, r2
 8000a9e:	f000 fb61 	bl	8001164 <HW_TS_Create>
}
 8000aa2:	bd08      	pop	{r3, pc}
 8000aa4:	080009e7 	.word	0x080009e7
 8000aa8:	20000978 	.word	0x20000978

08000aac <vPortSuppressTicksAndSleep>:
{
 8000aac:	b510      	push	{r4, lr}
 8000aae:	4604      	mov	r4, r0
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8000ab0:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <vPortSuppressTicksAndSleep+0x68>)
 8000ab2:	6813      	ldr	r3, [r2, #0]
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aba:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000abc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ac0:	f3bf 8f6f 	isb	sy
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8000ac4:	f007 fefe 	bl	80088c4 <eTaskConfirmSleepModeStatus>
 8000ac8:	b1a0      	cbz	r0, 8000af4 <vPortSuppressTicksAndSleep+0x48>
    if (xExpectedIdleTime != (~0))
 8000aca:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000ace:	d118      	bne.n	8000b02 <vPortSuppressTicksAndSleep+0x56>
    if (xExpectedIdleTime != (~0))
 8000ad0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000ad4:	d119      	bne.n	8000b0a <vPortSuppressTicksAndSleep+0x5e>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <vPortSuppressTicksAndSleep+0x6c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <vPortSuppressTicksAndSleep+0x68>)
 8000ade:	6813      	ldr	r3, [r2, #0]
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <vPortSuppressTicksAndSleep+0x70>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	3204      	adds	r2, #4
 8000aee:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000af0:	b662      	cpsie	i
}
 8000af2:	bd10      	pop	{r4, pc}
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <vPortSuppressTicksAndSleep+0x68>)
 8000af6:	6813      	ldr	r3, [r2, #0]
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6013      	str	r3, [r2, #0]
 8000afe:	b662      	cpsie	i
 8000b00:	e7f7      	b.n	8000af2 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8000b02:	4620      	mov	r0, r4
 8000b04:	f7ff ff70 	bl	80009e8 <LpTimerStart>
 8000b08:	e7e2      	b.n	8000ad0 <vPortSuppressTicksAndSleep+0x24>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8000b0a:	f7ff ffa9 	bl	8000a60 <LpGetElapsedTime>
      vTaskStepTick( ulCompleteTickPeriods );
 8000b0e:	f007 fc41 	bl	8008394 <vTaskStepTick>
 8000b12:	e7e0      	b.n	8000ad6 <vPortSuppressTicksAndSleep+0x2a>
 8000b14:	e000e010 	.word	0xe000e010
 8000b18:	e000e018 	.word	0xe000e018
 8000b1c:	2000097c 	.word	0x2000097c

08000b20 <vPortSetupTimerInterrupt>:
{
 8000b20:	b510      	push	{r4, lr}
  LpTimerInit( );
 8000b22:	f7ff ffb7 	bl	8000a94 <LpTimerInit>
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <vPortSetupTimerInterrupt+0x34>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	490b      	ldr	r1, [pc, #44]	; (8000b58 <vPortSetupTimerInterrupt+0x38>)
 8000b2c:	fba1 0202 	umull	r0, r2, r1, r2
 8000b30:	0992      	lsrs	r2, r2, #6
 8000b32:	480a      	ldr	r0, [pc, #40]	; (8000b5c <vPortSetupTimerInterrupt+0x3c>)
 8000b34:	6002      	str	r2, [r0, #0]
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <vPortSetupTimerInterrupt+0x40>)
 8000b38:	2000      	movs	r0, #0
 8000b3a:	6010      	str	r0, [r2, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000b3c:	4c09      	ldr	r4, [pc, #36]	; (8000b64 <vPortSetupTimerInterrupt+0x44>)
 8000b3e:	6020      	str	r0, [r4, #0]
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	fba1 1303 	umull	r1, r3, r1, r3
 8000b46:	099b      	lsrs	r3, r3, #6
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	4907      	ldr	r1, [pc, #28]	; (8000b68 <vPortSetupTimerInterrupt+0x48>)
 8000b4c:	600b      	str	r3, [r1, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000b4e:	2307      	movs	r3, #7
 8000b50:	6013      	str	r3, [r2, #0]
}
 8000b52:	bd10      	pop	{r4, pc}
 8000b54:	20000010 	.word	0x20000010
 8000b58:	10624dd3 	.word	0x10624dd3
 8000b5c:	2000097c 	.word	0x2000097c
 8000b60:	e000e010 	.word	0xe000e010
 8000b64:	e000e018 	.word	0xe000e018
 8000b68:	e000e014 	.word	0xe000e014

08000b6c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000b6c:	b530      	push	{r4, r5, lr}
 8000b6e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	2400      	movs	r4, #0
 8000b72:	9407      	str	r4, [sp, #28]
 8000b74:	9408      	str	r4, [sp, #32]
 8000b76:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b7e:	f042 0204 	orr.w	r2, r2, #4
 8000b82:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b86:	f002 0204 	and.w	r2, r2, #4
 8000b8a:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8000b8c:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b94:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b98:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000b9c:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000b9e:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba2:	f042 0202 	orr.w	r2, r2, #2
 8000ba6:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000baa:	f002 0202 	and.w	r2, r2, #2
 8000bae:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000bb0:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb4:	f042 0201 	orr.w	r2, r2, #1
 8000bb8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bbc:	f002 0201 	and.w	r2, r2, #1
 8000bc0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000bc2:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc6:	f042 0210 	orr.w	r2, r2, #16
 8000bca:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000bd4:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bda:	2503      	movs	r5, #3
 8000bdc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bde:	a905      	add	r1, sp, #20
 8000be0:	480f      	ldr	r0, [pc, #60]	; (8000c20 <MX_GPIO_Init+0xb4>)
 8000be2:	f002 f8a9 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB2 PB0 
                           PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_0 
 8000be6:	f240 3337 	movw	r3, #823	; 0x337
 8000bea:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bec:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	a905      	add	r1, sp, #20
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <MX_GPIO_Init+0xb8>)
 8000bf4:	f002 f8a0 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 PA8 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000bf8:	f649 13fe 	movw	r3, #39422	; 0x99fe
 8000bfc:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfe:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	a905      	add	r1, sp, #20
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f002 f896 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c10:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c14:	a905      	add	r1, sp, #20
 8000c16:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_GPIO_Init+0xbc>)
 8000c18:	f002 f88e 	bl	8002d38 <HAL_GPIO_Init>

}
 8000c1c:	b00b      	add	sp, #44	; 0x2c
 8000c1e:	bd30      	pop	{r4, r5, pc}
 8000c20:	48001c00 	.word	0x48001c00
 8000c24:	48000400 	.word	0x48000400
 8000c28:	48001000 	.word	0x48001000

08000c2c <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <ReadRtcSsrValue+0x1c>)
 8000c2e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000c30:	b29b      	uxth	r3, r3

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c32:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8000c34:	b280      	uxth	r0, r0

  while(first_read != second_read)
 8000c36:	e003      	b.n	8000c40 <ReadRtcSsrValue+0x14>
  {
    first_read = second_read;

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <ReadRtcSsrValue+0x1c>)
 8000c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    first_read = second_read;
 8000c3c:	4603      	mov	r3, r0
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c3e:	b290      	uxth	r0, r2
  while(first_read != second_read)
 8000c40:	4283      	cmp	r3, r0
 8000c42:	d1f9      	bne.n	8000c38 <ReadRtcSsrValue+0xc>
  }

  return second_read;
}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40002800 	.word	0x40002800

08000c4c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c4c:	b470      	push	{r4, r5, r6}
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000c4e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8000c52:	00da      	lsls	r2, r3, #3
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <LinkTimerAfter+0x3c>)
 8000c56:	4413      	add	r3, r2
 8000c58:	7d5b      	ldrb	r3, [r3, #21]
 8000c5a:	b2db      	uxtb	r3, r3

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c5c:	2b06      	cmp	r3, #6
 8000c5e:	d005      	beq.n	8000c6c <LinkTimerAfter+0x20>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000c60:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000c64:	00d4      	lsls	r4, r2, #3
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <LinkTimerAfter+0x3c>)
 8000c68:	4422      	add	r2, r4
 8000c6a:	7510      	strb	r0, [r2, #20]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <LinkTimerAfter+0x3c>)
 8000c6e:	0044      	lsls	r4, r0, #1
 8000c70:	1826      	adds	r6, r4, r0
 8000c72:	00f5      	lsls	r5, r6, #3
 8000c74:	4415      	add	r5, r2
 8000c76:	756b      	strb	r3, [r5, #21]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000c78:	7529      	strb	r1, [r5, #20]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000c7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000c7e:	00cb      	lsls	r3, r1, #3
 8000c80:	441a      	add	r2, r3
 8000c82:	7550      	strb	r0, [r2, #21]

  return;
}
 8000c84:	bc70      	pop	{r4, r5, r6}
 8000c86:	4770      	bx	lr
 8000c88:	20000068 	.word	0x20000068

08000c8c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c8c:	b4f0      	push	{r4, r5, r6, r7}
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <LinkTimerBefore+0x5c>)
 8000c90:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d01a      	beq.n	8000cd0 <LinkTimerBefore+0x44>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <LinkTimerBefore+0x5c>)
 8000c9c:	004a      	lsls	r2, r1, #1
 8000c9e:	1855      	adds	r5, r2, r1
 8000ca0:	00ec      	lsls	r4, r5, #3
 8000ca2:	441c      	add	r4, r3
 8000ca4:	7d24      	ldrb	r4, [r4, #20]
 8000ca6:	b2e4      	uxtb	r4, r4

    aTimerContext[previous_id].NextID = TimerID;
 8000ca8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8000cac:	00f5      	lsls	r5, r6, #3
 8000cae:	441d      	add	r5, r3
 8000cb0:	7568      	strb	r0, [r5, #21]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000cb2:	0045      	lsls	r5, r0, #1
 8000cb4:	182f      	adds	r7, r5, r0
 8000cb6:	00fe      	lsls	r6, r7, #3
 8000cb8:	4637      	mov	r7, r6
 8000cba:	441e      	add	r6, r3
 8000cbc:	7571      	strb	r1, [r6, #21]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000cbe:	463e      	mov	r6, r7
 8000cc0:	441e      	add	r6, r3
 8000cc2:	7534      	strb	r4, [r6, #20]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000cc4:	4411      	add	r1, r2
 8000cc6:	00ca      	lsls	r2, r1, #3
 8000cc8:	4413      	add	r3, r2
 8000cca:	7518      	strb	r0, [r3, #20]
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
}
 8000ccc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cce:	4770      	bx	lr
    aTimerContext[TimerID].NextID = RefTimerID;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <LinkTimerBefore+0x5c>)
 8000cd2:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8000cd6:	00e2      	lsls	r2, r4, #3
 8000cd8:	441a      	add	r2, r3
 8000cda:	7551      	strb	r1, [r2, #21]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000cdc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000ce0:	00ca      	lsls	r2, r1, #3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	7518      	strb	r0, [r3, #20]
  return;
 8000ce6:	e7f1      	b.n	8000ccc <LinkTimerBefore+0x40>
 8000ce8:	20000068 	.word	0x20000068

08000cec <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000cec:	b470      	push	{r4, r5, r6}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <UnlinkTimer+0x94>)
 8000cf0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4283      	cmp	r3, r0
 8000cf8:	d02a      	beq.n	8000d50 <UnlinkTimer+0x64>
    PreviousRunningTimerID = CurrentRunningTimerID;
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000cfa:	4d21      	ldr	r5, [pc, #132]	; (8000d80 <UnlinkTimer+0x94>)
 8000cfc:	0043      	lsls	r3, r0, #1
 8000cfe:	4403      	add	r3, r0
 8000d00:	00da      	lsls	r2, r3, #3
 8000d02:	442a      	add	r2, r5
 8000d04:	7d14      	ldrb	r4, [r2, #20]
    next_id = aTimerContext[TimerID].NextID;
 8000d06:	7d53      	ldrb	r3, [r2, #21]
 8000d08:	b2db      	uxtb	r3, r3

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d0a:	7d56      	ldrb	r6, [r2, #21]
 8000d0c:	b2f6      	uxtb	r6, r6
 8000d0e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000d12:	00d4      	lsls	r4, r2, #3
 8000d14:	4425      	add	r5, r4
 8000d16:	756e      	strb	r6, [r5, #21]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d18:	2b06      	cmp	r3, #6
 8000d1a:	d00b      	beq.n	8000d34 <UnlinkTimer+0x48>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000d1c:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <UnlinkTimer+0x94>)
 8000d1e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8000d22:	00ec      	lsls	r4, r5, #3
 8000d24:	4414      	add	r4, r2
 8000d26:	7d24      	ldrb	r4, [r4, #20]
 8000d28:	b2e4      	uxtb	r4, r4
 8000d2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000d2e:	00dd      	lsls	r5, r3, #3
 8000d30:	442a      	add	r2, r5
 8000d32:	7514      	strb	r4, [r2, #20]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000d34:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <UnlinkTimer+0x94>)
 8000d36:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000d3a:	00c3      	lsls	r3, r0, #3
 8000d3c:	4413      	add	r3, r2
 8000d3e:	2001      	movs	r0, #1
 8000d40:	7318      	strb	r0, [r3, #12]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000d42:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b06      	cmp	r3, #6
 8000d4a:	d010      	beq.n	8000d6e <UnlinkTimer+0x82>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
  }

  return;
}
 8000d4c:	bc70      	pop	{r4, r5, r6}
 8000d4e:	4770      	bx	lr
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <UnlinkTimer+0x94>)
 8000d52:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d5c:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8000d60:	00e2      	lsls	r2, r4, #3
 8000d62:	441a      	add	r2, r3
 8000d64:	7d52      	ldrb	r2, [r2, #21]
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8000d6c:	e7e2      	b.n	8000d34 <UnlinkTimer+0x48>
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000d6e:	2900      	cmp	r1, #0
 8000d70:	d1ec      	bne.n	8000d4c <UnlinkTimer+0x60>
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d72:	4613      	mov	r3, r2
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return;
 8000d7c:	e7e6      	b.n	8000d4c <UnlinkTimer+0x60>
 8000d7e:	bf00      	nop
 8000d80:	20000068 	.word	0x20000068

08000d84 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d84:	b508      	push	{r3, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <ReturnTimeElapsed+0x4c>)
 8000d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d90:	d01b      	beq.n	8000dca <ReturnTimeElapsed+0x46>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d92:	f7ff ff4b 	bl	8000c2c <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <ReturnTimeElapsed+0x4c>)
 8000d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d9c:	4283      	cmp	r3, r0
 8000d9e:	d30c      	bcc.n	8000dba <ReturnTimeElapsed+0x36>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <ReturnTimeElapsed+0x4c>)
 8000da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000da6:	1a18      	subs	r0, r3, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <ReturnTimeElapsed+0x50>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	fb00 f003 	mul.w	r0, r0, r3
    return_value = return_value >> WakeupTimerDivider;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <ReturnTimeElapsed+0x54>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 8000db6:	b280      	uxth	r0, r0
 8000db8:	bd08      	pop	{r3, pc}
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <ReturnTimeElapsed+0x58>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	1a1b      	subs	r3, r3, r0
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <ReturnTimeElapsed+0x4c>)
 8000dc2:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
 8000dc6:	4418      	add	r0, r3
 8000dc8:	e7ee      	b.n	8000da8 <ReturnTimeElapsed+0x24>
    return_value = 0;
 8000dca:	2000      	movs	r0, #0
 8000dcc:	e7f3      	b.n	8000db6 <ReturnTimeElapsed+0x32>
 8000dce:	bf00      	nop
 8000dd0:	20000068 	.word	0x20000068
 8000dd4:	20000980 	.word	0x20000980
 8000dd8:	20000986 	.word	0x20000986
 8000ddc:	20000984 	.word	0x20000984

08000de0 <linkTimer>:
{
 8000de0:	b570      	push	{r4, r5, r6, lr}
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000de2:	4b34      	ldr	r3, [pc, #208]	; (8000eb4 <linkTimer+0xd4>)
 8000de4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d023      	beq.n	8000e36 <linkTimer+0x56>
 8000dee:	4604      	mov	r4, r0
    time_elapsed = ReturnTimeElapsed();
 8000df0:	f7ff ffc8 	bl	8000d84 <ReturnTimeElapsed>
 8000df4:	4605      	mov	r5, r0
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <linkTimer+0xd4>)
 8000df8:	0062      	lsls	r2, r4, #1
 8000dfa:	1910      	adds	r0, r2, r4
 8000dfc:	00c1      	lsls	r1, r0, #3
 8000dfe:	4419      	add	r1, r3
 8000e00:	6888      	ldr	r0, [r1, #8]
 8000e02:	4428      	add	r0, r5
 8000e04:	6088      	str	r0, [r1, #8]
    time_left = aTimerContext[TimerID].CountLeft;
 8000e06:	4422      	add	r2, r4
 8000e08:	00d1      	lsls	r1, r2, #3
 8000e0a:	4419      	add	r1, r3
 8000e0c:	6888      	ldr	r0, [r1, #8]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000e0e:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8000e12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000e16:	00d1      	lsls	r1, r2, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	4283      	cmp	r3, r0
 8000e1e:	d83a      	bhi.n	8000e96 <linkTimer+0xb6>
      timer_id_lookup = CurrentRunningTimerID;
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <linkTimer+0xd4>)
 8000e22:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 8000e26:	b2c9      	uxtb	r1, r1
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000e28:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8000e2c:	00f2      	lsls	r2, r6, #3
 8000e2e:	4413      	add	r3, r2
 8000e30:	7d5b      	ldrb	r3, [r3, #21]
 8000e32:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e34:	e021      	b.n	8000e7a <linkTimer+0x9a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <linkTimer+0xd4>)
 8000e38:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    CurrentRunningTimerID = TimerID;
 8000e42:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000e46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000e4a:	00c2      	lsls	r2, r0, #3
 8000e4c:	441a      	add	r2, r3
 8000e4e:	2106      	movs	r1, #6
 8000e50:	7551      	strb	r1, [r2, #21]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e52:	f04f 32ff 	mov.w	r2, #4294967295
 8000e56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    time_elapsed = 0;
 8000e5a:	2500      	movs	r5, #0
}
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <linkTimer+0xd4>)
 8000e62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e66:	00ca      	lsls	r2, r1, #3
 8000e68:	441a      	add	r2, r3
 8000e6a:	7d51      	ldrb	r1, [r2, #21]
 8000e6c:	b2c9      	uxtb	r1, r1
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000e6e:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8000e72:	00f2      	lsls	r2, r6, #3
 8000e74:	4413      	add	r3, r2
 8000e76:	7d5b      	ldrb	r3, [r3, #21]
 8000e78:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d007      	beq.n	8000e8e <linkTimer+0xae>
 8000e7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000e82:	00da      	lsls	r2, r3, #3
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <linkTimer+0xd4>)
 8000e86:	4413      	add	r3, r2
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	4283      	cmp	r3, r0
 8000e8c:	d9e8      	bls.n	8000e60 <linkTimer+0x80>
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff fedc 	bl	8000c4c <LinkTimerAfter>
 8000e94:	e7e2      	b.n	8000e5c <linkTimer+0x7c>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000e96:	4e07      	ldr	r6, [pc, #28]	; (8000eb4 <linkTimer+0xd4>)
 8000e98:	f896 1090 	ldrb.w	r1, [r6, #144]	; 0x90
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f7ff fef5 	bl	8000c8c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000ea2:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
      CurrentRunningTimerID = TimerID;
 8000eac:	f886 4090 	strb.w	r4, [r6, #144]	; 0x90
 8000eb0:	e7d4      	b.n	8000e5c <linkTimer+0x7c>
 8000eb2:	bf00      	nop
 8000eb4:	20000068 	.word	0x20000068

08000eb8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000eb8:	b510      	push	{r4, lr}
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000eba:	b360      	cbz	r0, 8000f16 <RestartWakeupCounter+0x5e>
 8000ebc:	4604      	mov	r4, r0
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
  }
  else
  {
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ebe:	2801      	cmp	r0, #1
 8000ec0:	d932      	bls.n	8000f28 <RestartWakeupCounter+0x70>
    {
      Value -= 1;
 8000ec2:	3c01      	subs	r4, #1
 8000ec4:	b2a4      	uxth	r4, r4
    }

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <RestartWakeupCounter+0x7c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	f012 0f04 	tst.w	r2, #4
 8000ed2:	d0f8      	beq.n	8000ec6 <RestartWakeupCounter+0xe>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000edc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <RestartWakeupCounter+0x80>)
 8000ee0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ee4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f001 fd66 	bl	80029b8 <HAL_NVIC_ClearPendingIRQ>

    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000eec:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <RestartWakeupCounter+0x84>)
 8000eee:	6953      	ldr	r3, [r2, #20]
 8000ef0:	0c1b      	lsrs	r3, r3, #16
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	431c      	orrs	r4, r3
 8000ef6:	6154      	str	r4, [r2, #20]

    /**
     * Update the value here after the WUTWF polling that may take some time
     */
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ef8:	f7ff fe98 	bl	8000c2c <ReadRtcSsrValue>
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <RestartWakeupCounter+0x88>)
 8000efe:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <RestartWakeupCounter+0x7c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	6893      	ldr	r3, [r2, #8]
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0e:	6093      	str	r3, [r2, #8]

    HW_TS_RTC_CountUpdated_AppNot();
 8000f10:	f3af 8000 	nop.w
  }

  return ;
}
 8000f14:	bd10      	pop	{r4, pc}
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f16:	f7ff fe89 	bl	8000c2c <ReadRtcSsrValue>
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <RestartWakeupCounter+0x88>)
 8000f1c:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f001 fd3b 	bl	800299c <HAL_NVIC_SetPendingIRQ>
 8000f26:	e7f5      	b.n	8000f14 <RestartWakeupCounter+0x5c>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <RestartWakeupCounter+0x8c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d1c8      	bne.n	8000ec2 <RestartWakeupCounter+0xa>
 8000f30:	e7c9      	b.n	8000ec6 <RestartWakeupCounter+0xe>
 8000f32:	bf00      	nop
 8000f34:	20000988 	.word	0x20000988
 8000f38:	58000800 	.word	0x58000800
 8000f3c:	40002800 	.word	0x40002800
 8000f40:	20000068 	.word	0x20000068
 8000f44:	20000986 	.word	0x20000986

08000f48 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f48:	b570      	push	{r4, r5, r6, lr}

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <RescheduleTimerList+0xc0>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f52:	d006      	beq.n	8000f62 <RescheduleTimerList+0x1a>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <RescheduleTimerList+0xc4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	f013 0f04 	tst.w	r3, #4
 8000f60:	d1f8      	bne.n	8000f54 <RescheduleTimerList+0xc>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <RescheduleTimerList+0xc4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	6893      	ldr	r3, [r2, #8]
 8000f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f6e:	6093      	str	r3, [r2, #8]

  localTimerID = CurrentRunningTimerID;
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <RescheduleTimerList+0xc8>)
 8000f72:	f893 4090 	ldrb.w	r4, [r3, #144]	; 0x90
 8000f76:	b2e4      	uxtb	r4, r4

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f78:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8000f7c:	00ca      	lsls	r2, r1, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	689e      	ldr	r6, [r3, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f82:	f7ff feff 	bl	8000d84 <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 8000f86:	4605      	mov	r5, r0
 8000f88:	42b0      	cmp	r0, r6
 8000f8a:	d905      	bls.n	8000f98 <RescheduleTimerList+0x50>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f8c:	4b20      	ldr	r3, [pc, #128]	; (8001010 <RescheduleTimerList+0xc8>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    wakeup_timer_value = 0;
 8000f94:	2000      	movs	r0, #0
 8000f96:	e023      	b.n	8000fe0 <RescheduleTimerList+0x98>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <RescheduleTimerList+0xcc>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	4403      	add	r3, r0
 8000f9e:	42b3      	cmp	r3, r6
 8000fa0:	d207      	bcs.n	8000fb2 <RescheduleTimerList+0x6a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <RescheduleTimerList+0xcc>)
 8000fa4:	8818      	ldrh	r0, [r3, #0]
 8000fa6:	b280      	uxth	r0, r0

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <RescheduleTimerList+0xc8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8000fb0:	e016      	b.n	8000fe0 <RescheduleTimerList+0x98>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000fb2:	b2b6      	uxth	r6, r6
 8000fb4:	1a30      	subs	r0, r6, r0
 8000fb6:	b280      	uxth	r0, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <RescheduleTimerList+0xc8>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8000fc0:	e00e      	b.n	8000fe0 <RescheduleTimerList+0x98>
    {
      aTimerContext[localTimerID].CountLeft = 0;
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000fc2:	0062      	lsls	r2, r4, #1
 8000fc4:	4414      	add	r4, r2
 8000fc6:	00e1      	lsls	r1, r4, #3
 8000fc8:	4a11      	ldr	r2, [pc, #68]	; (8001010 <RescheduleTimerList+0xc8>)
 8000fca:	440a      	add	r2, r1
 8000fcc:	6891      	ldr	r1, [r2, #8]
 8000fce:	1b49      	subs	r1, r1, r5
 8000fd0:	6091      	str	r1, [r2, #8]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000fd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000fd6:	00da      	lsls	r2, r3, #3
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <RescheduleTimerList+0xc8>)
 8000fda:	4413      	add	r3, r2
 8000fdc:	7d5c      	ldrb	r4, [r3, #21]
 8000fde:	b2e4      	uxtb	r4, r4
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fe0:	2c06      	cmp	r4, #6
 8000fe2:	d00d      	beq.n	8001000 <RescheduleTimerList+0xb8>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000fea:	00d1      	lsls	r1, r2, #3
 8000fec:	4a08      	ldr	r2, [pc, #32]	; (8001010 <RescheduleTimerList+0xc8>)
 8000fee:	440a      	add	r2, r1
 8000ff0:	6892      	ldr	r2, [r2, #8]
 8000ff2:	4295      	cmp	r5, r2
 8000ff4:	d9e5      	bls.n	8000fc2 <RescheduleTimerList+0x7a>
      aTimerContext[localTimerID].CountLeft = 0;
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <RescheduleTimerList+0xc8>)
 8000ff8:	440a      	add	r2, r1
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	6091      	str	r1, [r2, #8]
 8000ffe:	e7e8      	b.n	8000fd2 <RescheduleTimerList+0x8a>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001000:	f7ff ff5a 	bl	8000eb8 <RestartWakeupCounter>

  return ;
}
 8001004:	bd70      	pop	{r4, r5, r6, pc}
 8001006:	bf00      	nop
 8001008:	40002800 	.word	0x40002800
 800100c:	20000988 	.word	0x20000988
 8001010:	20000068 	.word	0x20000068
 8001014:	20000982 	.word	0x20000982

08001018 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001018:	b510      	push	{r4, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800101a:	4b4a      	ldr	r3, [pc, #296]	; (8001144 <HW_TS_Init+0x12c>)
 800101c:	6019      	str	r1, [r3, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800101e:	680b      	ldr	r3, [r1, #0]
 8001020:	22ca      	movs	r2, #202	; 0xca
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
 8001024:	680b      	ldr	r3, [r1, #0]
 8001026:	2253      	movs	r2, #83	; 0x53
 8001028:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800102a:	4c47      	ldr	r4, [pc, #284]	; (8001148 <HW_TS_Init+0x130>)
 800102c:	68a3      	ldr	r3, [r4, #8]
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	60a3      	str	r3, [r4, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001034:	68a3      	ldr	r3, [r4, #8]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	f1c3 0304 	rsb	r3, r3, #4
 800103e:	b2d9      	uxtb	r1, r3
 8001040:	4b42      	ldr	r3, [pc, #264]	; (800114c <HW_TS_Init+0x134>)
 8001042:	7019      	strb	r1, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001044:	6923      	ldr	r3, [r4, #16]
 8001046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800104e:	fa92 f2a2 	rbit	r2, r2
 8001052:	fab2 f282 	clz	r2, r2
 8001056:	40d3      	lsrs	r3, r2
 8001058:	b2db      	uxtb	r3, r3
 800105a:	3301      	adds	r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <HW_TS_Init+0x138>)
 8001060:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001062:	6923      	ldr	r3, [r4, #16]
 8001064:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001068:	3301      	adds	r3, #1
 800106a:	4c3a      	ldr	r4, [pc, #232]	; (8001154 <HW_TS_Init+0x13c>)
 800106c:	8023      	strh	r3, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800106e:	3b01      	subs	r3, #1
 8001070:	fb03 f302 	mul.w	r3, r3, r2
 8001074:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001078:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800107a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800107e:	4293      	cmp	r3, r2
 8001080:	d91a      	bls.n	80010b8 <HW_TS_Init+0xa0>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001082:	4b35      	ldr	r3, [pc, #212]	; (8001158 <HW_TS_Init+0x140>)
 8001084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001088:	801a      	strh	r2, [r3, #0]
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800108a:	4b34      	ldr	r3, [pc, #208]	; (800115c <HW_TS_Init+0x144>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001092:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001094:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001098:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800109c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d144      	bne.n	800112e <HW_TS_Init+0x116>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010a4:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <HW_TS_Init+0x148>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	e00c      	b.n	80010d2 <HW_TS_Init+0xba>
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	4a27      	ldr	r2, [pc, #156]	; (8001158 <HW_TS_Init+0x140>)
 80010bc:	8013      	strh	r3, [r2, #0]
 80010be:	e7e4      	b.n	800108a <HW_TS_Init+0x72>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80010c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80010c4:	00d1      	lsls	r1, r2, #3
 80010c6:	4a26      	ldr	r2, [pc, #152]	; (8001160 <HW_TS_Init+0x148>)
 80010c8:	440a      	add	r2, r1
 80010ca:	2100      	movs	r1, #0
 80010cc:	7311      	strb	r1, [r2, #12]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d9f4      	bls.n	80010c0 <HW_TS_Init+0xa8>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HW_TS_Init+0x148>)
 80010d8:	2206      	movs	r2, #6
 80010da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80010de:	4c19      	ldr	r4, [pc, #100]	; (8001144 <HW_TS_Init+0x12c>)
 80010e0:	6822      	ldr	r2, [r4, #0]
 80010e2:	6811      	ldr	r1, [r2, #0]
 80010e4:	688b      	ldr	r3, [r1, #8]
 80010e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010ea:	608b      	str	r3, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	68d3      	ldr	r3, [r2, #12]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f463 6390 	orn	r3, r3, #1152	; 0x480
 80010f6:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <HW_TS_Init+0x144>)
 80010fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010fe:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001100:	2003      	movs	r0, #3
 8001102:	f001 fc59 	bl	80029b8 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	6893      	ldr	r3, [r2, #8]
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HW_TS_Init+0x12c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	22ff      	movs	r2, #255	; 0xff
 800111a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800111c:	2200      	movs	r2, #0
 800111e:	2106      	movs	r1, #6
 8001120:	2003      	movs	r0, #3
 8001122:	f001 fbd5 	bl	80028d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001126:	2003      	movs	r0, #3
 8001128:	f001 fc06 	bl	8002938 <HAL_NVIC_EnableIRQ>

  return;
}
 800112c:	bd10      	pop	{r4, pc}
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HW_TS_Init+0x12c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800113a:	d0ea      	beq.n	8001112 <HW_TS_Init+0xfa>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800113c:	2003      	movs	r0, #3
 800113e:	f001 fc2d 	bl	800299c <HAL_NVIC_SetPendingIRQ>
 8001142:	e7e6      	b.n	8001112 <HW_TS_Init+0xfa>
 8001144:	20000988 	.word	0x20000988
 8001148:	40002800 	.word	0x40002800
 800114c:	20000986 	.word	0x20000986
 8001150:	20000980 	.word	0x20000980
 8001154:	20000984 	.word	0x20000984
 8001158:	20000982 	.word	0x20000982
 800115c:	58000800 	.word	0x58000800
 8001160:	20000068 	.word	0x20000068

08001164 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001166:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800116a:	b672      	cpsid	i
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800116c:	2400      	movs	r4, #0
 800116e:	e001      	b.n	8001174 <HW_TS_Create+0x10>
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
  {
    loop++;
 8001170:	3401      	adds	r4, #1
 8001172:	b2e4      	uxtb	r4, r4
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001174:	2c05      	cmp	r4, #5
 8001176:	d807      	bhi.n	8001188 <HW_TS_Create+0x24>
 8001178:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800117c:	00ee      	lsls	r6, r5, #3
 800117e:	4d11      	ldr	r5, [pc, #68]	; (80011c4 <HW_TS_Create+0x60>)
 8001180:	4435      	add	r5, r6
 8001182:	7b2d      	ldrb	r5, [r5, #12]
 8001184:	2d00      	cmp	r5, #0
 8001186:	d1f3      	bne.n	8001170 <HW_TS_Create+0xc>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001188:	2c06      	cmp	r4, #6
 800118a:	d016      	beq.n	80011ba <HW_TS_Create+0x56>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800118c:	f8df c034 	ldr.w	ip, [pc, #52]	; 80011c4 <HW_TS_Create+0x60>
 8001190:	0066      	lsls	r6, r4, #1
 8001192:	eb06 0e04 	add.w	lr, r6, r4
 8001196:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 800119a:	4465      	add	r5, ip
 800119c:	f04f 0e01 	mov.w	lr, #1
 80011a0:	f885 e00c 	strb.w	lr, [r5, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a4:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80011a8:	6128      	str	r0, [r5, #16]
    aTimerContext[loop].TimerMode = TimerMode;
 80011aa:	736a      	strb	r2, [r5, #13]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80011ac:	1932      	adds	r2, r6, r4
 80011ae:	00d0      	lsls	r0, r2, #3
 80011b0:	f84c 3000 	str.w	r3, [ip, r0]
    *pTimerId = loop;
 80011b4:	700c      	strb	r4, [r1, #0]

    localreturnstatus = hw_ts_Successful;
 80011b6:	2000      	movs	r0, #0

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 80011b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ba:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 80011be:	2001      	movs	r0, #1
 80011c0:	e7fa      	b.n	80011b8 <HW_TS_Create+0x54>
 80011c2:	bf00      	nop
 80011c4:	20000068 	.word	0x20000068

080011c8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011cc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80011d2:	2003      	movs	r0, #3
 80011d4:	f001 fbbe 	bl	8002954 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <HW_TS_Stop+0xb8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	21ca      	movs	r1, #202	; 0xca
 80011e0:	6251      	str	r1, [r2, #36]	; 0x24
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2253      	movs	r2, #83	; 0x53
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80011e8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80011ec:	00da      	lsls	r2, r3, #3
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HW_TS_Stop+0xbc>)
 80011f0:	4413      	add	r3, r2
 80011f2:	7b1b      	ldrb	r3, [r3, #12]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d00a      	beq.n	8001210 <HW_TS_Stop+0x48>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HW_TS_Stop+0xb8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	22ff      	movs	r2, #255	; 0xff
 8001202:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001204:	2003      	movs	r0, #3
 8001206:	f001 fb97 	bl	8002938 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800120a:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 800120e:	bd38      	pop	{r3, r4, r5, pc}
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001210:	2100      	movs	r1, #0
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff fd6a 	bl	8000cec <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HW_TS_Stop+0xbc>)
 800121a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800121e:	b2db      	uxtb	r3, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001220:	2b06      	cmp	r3, #6
 8001222:	d008      	beq.n	8001236 <HW_TS_Stop+0x6e>
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HW_TS_Stop+0xbc>)
 8001226:	f892 2091 	ldrb.w	r2, [r2, #145]	; 0x91
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	429a      	cmp	r2, r3
 800122e:	d0e4      	beq.n	80011fa <HW_TS_Stop+0x32>
      RescheduleTimerList();
 8001230:	f7ff fe8a 	bl	8000f48 <RescheduleTimerList>
 8001234:	e7e1      	b.n	80011fa <HW_TS_Stop+0x32>
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HW_TS_Stop+0xc0>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800123e:	d006      	beq.n	800124e <HW_TS_Stop+0x86>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HW_TS_Stop+0xb8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f013 0f04 	tst.w	r3, #4
 800124c:	d1f8      	bne.n	8001240 <HW_TS_Stop+0x78>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HW_TS_Stop+0xb8>)
 8001250:	6819      	ldr	r1, [r3, #0]
 8001252:	680a      	ldr	r2, [r1, #0]
 8001254:	6893      	ldr	r3, [r2, #8]
 8001256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800125a:	6093      	str	r3, [r2, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800125c:	680b      	ldr	r3, [r1, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	f012 0f04 	tst.w	r2, #4
 8001264:	d0fa      	beq.n	800125c <HW_TS_Stop+0x94>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800126e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HW_TS_Stop+0xc4>)
 8001272:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001276:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001278:	2003      	movs	r0, #3
 800127a:	f001 fb9d 	bl	80029b8 <HAL_NVIC_ClearPendingIRQ>
 800127e:	e7bc      	b.n	80011fa <HW_TS_Stop+0x32>
 8001280:	20000988 	.word	0x20000988
 8001284:	20000068 	.word	0x20000068
 8001288:	40002800 	.word	0x40002800
 800128c:	58000800 	.word	0x58000800

08001290 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001292:	4604      	mov	r4, r0
 8001294:	460f      	mov	r7, r1

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001296:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800129a:	00da      	lsls	r2, r3, #3
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <HW_TS_Start+0x94>)
 800129e:	4413      	add	r3, r2
 80012a0:	7b1b      	ldrb	r3, [r3, #12]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d036      	beq.n	8001316 <HW_TS_Start+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012a8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012ae:	2003      	movs	r0, #3
 80012b0:	f001 fb50 	bl	8002954 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <HW_TS_Start+0x98>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	21ca      	movs	r1, #202	; 0xca
 80012bc:	6251      	str	r1, [r2, #36]	; 0x24
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2253      	movs	r2, #83	; 0x53
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80012c4:	4d17      	ldr	r5, [pc, #92]	; (8001324 <HW_TS_Start+0x94>)
 80012c6:	0062      	lsls	r2, r4, #1
 80012c8:	4422      	add	r2, r4
 80012ca:	00d3      	lsls	r3, r2, #3
 80012cc:	442b      	add	r3, r5
 80012ce:	2202      	movs	r2, #2
 80012d0:	731a      	strb	r2, [r3, #12]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80012d2:	609f      	str	r7, [r3, #8]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80012d4:	605f      	str	r7, [r3, #4]

  time_elapsed =  linkTimer(timer_id);
 80012d6:	4620      	mov	r0, r4
 80012d8:	f7ff fd82 	bl	8000de0 <linkTimer>

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80012dc:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 80012e0:	b2db      	uxtb	r3, r3

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012e2:	f895 2091 	ldrb.w	r2, [r5, #145]	; 0x91
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d117      	bne.n	800131c <HW_TS_Start+0x8c>
  {
    RescheduleTimerList();
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <HW_TS_Start+0x94>)
 80012ee:	0063      	lsls	r3, r4, #1
 80012f0:	191d      	adds	r5, r3, r4
 80012f2:	00e9      	lsls	r1, r5, #3
 80012f4:	460d      	mov	r5, r1
 80012f6:	4411      	add	r1, r2
 80012f8:	6889      	ldr	r1, [r1, #8]
 80012fa:	1a08      	subs	r0, r1, r0
 80012fc:	442a      	add	r2, r5
 80012fe:	6090      	str	r0, [r2, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HW_TS_Start+0x98>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	22ff      	movs	r2, #255	; 0xff
 8001308:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800130a:	2003      	movs	r0, #3
 800130c:	f001 fb14 	bl	8002938 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001310:	f386 8810 	msr	PRIMASK, r6
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8001314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HW_TS_Stop( timer_id );
 8001316:	f7ff ff57 	bl	80011c8 <HW_TS_Stop>
 800131a:	e7c5      	b.n	80012a8 <HW_TS_Start+0x18>
    RescheduleTimerList();
 800131c:	f7ff fe14 	bl	8000f48 <RescheduleTimerList>
 8001320:	e7ee      	b.n	8001300 <HW_TS_Start+0x70>
 8001322:	bf00      	nop
 8001324:	20000068 	.word	0x20000068
 8001328:	20000988 	.word	0x20000988

0800132c <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 800132c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800132e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001332:	b672      	cpsid	i
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HW_TS_RTC_ReadLeftTicksToCount+0x34>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800133c:	d009      	beq.n	8001352 <HW_TS_RTC_ReadLeftTicksToCount+0x26>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HW_TS_RTC_ReadLeftTicksToCount+0x34>)
 8001340:	695c      	ldr	r4, [r3, #20]
 8001342:	b2a4      	uxth	r4, r4

    elapsed_time_value = ReturnTimeElapsed();
 8001344:	f7ff fd1e 	bl	8000d84 <ReturnTimeElapsed>

    if(auro_reload_value > elapsed_time_value)
 8001348:	4284      	cmp	r4, r0
 800134a:	d907      	bls.n	800135c <HW_TS_RTC_ReadLeftTicksToCount+0x30>
    {
      return_value = auro_reload_value - elapsed_time_value;
 800134c:	1a20      	subs	r0, r4, r0
 800134e:	b280      	uxth	r0, r0
 8001350:	e001      	b.n	8001356 <HW_TS_RTC_ReadLeftTicksToCount+0x2a>
      return_value = 0;
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 8001352:	f64f 70ff 	movw	r0, #65535	; 0xffff
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001356:	f385 8810 	msr	PRIMASK, r5
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
}
 800135a:	bd38      	pop	{r3, r4, r5, pc}
      return_value = 0;
 800135c:	2000      	movs	r0, #0
 800135e:	e7fa      	b.n	8001356 <HW_TS_RTC_ReadLeftTicksToCount+0x2a>
 8001360:	40002800 	.word	0x40002800

08001364 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
    switch (hw_uart_id)
 8001364:	b100      	cbz	r0, 8001368 <HW_UART_Receive_IT+0x4>
 8001366:	4770      	bx	lr
{
 8001368:	b508      	push	{r3, lr}
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 800136a:	4804      	ldr	r0, [pc, #16]	; (800137c <HW_UART_Receive_IT+0x18>)
 800136c:	6003      	str	r3, [r0, #0]
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <HW_UART_Receive_IT+0x1c>)
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HW_UART_Receive_IT+0x20>)
 8001372:	6003      	str	r3, [r0, #0]
 8001374:	f003 ff5e 	bl	8005234 <HAL_UART_Receive_IT>
        default:
            break;
    }

    return;
}
 8001378:	bd08      	pop	{r3, pc}
 800137a:	bf00      	nop
 800137c:	20004260 	.word	0x20004260
 8001380:	20004460 	.word	0x20004460
 8001384:	40013800 	.word	0x40013800

08001388 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
    switch (hw_uart_id)
 8001388:	b100      	cbz	r0, 800138c <HW_UART_Transmit_IT+0x4>
 800138a:	4770      	bx	lr
{
 800138c:	b508      	push	{r3, lr}
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_TX_IT(huart1, USART1);
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <HW_UART_Transmit_IT+0x18>)
 8001390:	6003      	str	r3, [r0, #0]
 8001392:	4804      	ldr	r0, [pc, #16]	; (80013a4 <HW_UART_Transmit_IT+0x1c>)
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <HW_UART_Transmit_IT+0x20>)
 8001396:	6003      	str	r3, [r0, #0]
 8001398:	f003 fef0 	bl	800517c <HAL_UART_Transmit_IT>
        default:
            break;
    }

    return;
}
 800139c:	bd08      	pop	{r3, pc}
 800139e:	bf00      	nop
 80013a0:	20004264 	.word	0x20004264
 80013a4:	20004460 	.word	0x20004460
 80013a8:	40013800 	.word	0x40013800

080013ac <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013ac:	b508      	push	{r3, lr}
    switch ((uint32_t)huart->Instance)
 80013ae:	6802      	ldr	r2, [r0, #0]
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_UART_RxCpltCallback+0x14>)
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d103      	bne.n	80013be <HAL_UART_RxCpltCallback+0x12>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80013b6:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_UART_RxCpltCallback+0x18>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b103      	cbz	r3, 80013be <HAL_UART_RxCpltCallback+0x12>
            {
                HW_huart1RxCb();
 80013bc:	4798      	blx	r3
        default:
            break;
    }

    return;
}
 80013be:	bd08      	pop	{r3, pc}
 80013c0:	40013800 	.word	0x40013800
 80013c4:	20004260 	.word	0x20004260

080013c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013c8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80013ca:	4812      	ldr	r0, [pc, #72]	; (8001414 <MX_I2C1_Init+0x4c>)
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_I2C1_Init+0x50>)
 80013ce:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C1_Init+0x54>)
 80013d2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d8:	2201      	movs	r2, #1
 80013da:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013de:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013e0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e6:	f001 fe8f 	bl	8003108 <HAL_I2C_Init>
 80013ea:	b950      	cbnz	r0, 8001402 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ec:	2100      	movs	r1, #0
 80013ee:	4809      	ldr	r0, [pc, #36]	; (8001414 <MX_I2C1_Init+0x4c>)
 80013f0:	f001 ffba 	bl	8003368 <HAL_I2CEx_ConfigAnalogFilter>
 80013f4:	b940      	cbnz	r0, 8001408 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013f6:	2100      	movs	r1, #0
 80013f8:	4806      	ldr	r0, [pc, #24]	; (8001414 <MX_I2C1_Init+0x4c>)
 80013fa:	f001 ffe3 	bl	80033c4 <HAL_I2CEx_ConfigDigitalFilter>
 80013fe:	b930      	cbnz	r0, 800140e <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }

}
 8001400:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001402:	f000 f9cf 	bl	80017a4 <Error_Handler>
 8001406:	e7f1      	b.n	80013ec <MX_I2C1_Init+0x24>
    Error_Handler();
 8001408:	f000 f9cc 	bl	80017a4 <Error_Handler>
 800140c:	e7f3      	b.n	80013f6 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800140e:	f000 f9c9 	bl	80017a4 <Error_Handler>
}
 8001412:	e7f5      	b.n	8001400 <MX_I2C1_Init+0x38>
 8001414:	20004268 	.word	0x20004268
 8001418:	40005400 	.word	0x40005400
 800141c:	00e27cae 	.word	0x00e27cae

08001420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001420:	b510      	push	{r4, lr}
 8001422:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	2300      	movs	r3, #0
 8001426:	9303      	str	r3, [sp, #12]
 8001428:	9304      	str	r3, [sp, #16]
 800142a:	9305      	str	r3, [sp, #20]
 800142c:	9306      	str	r3, [sp, #24]
 800142e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8001430:	6802      	ldr	r2, [r0, #0]
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_I2C_MspInit+0x64>)
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001438:	b008      	add	sp, #32
 800143a:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->AHB2ENR, Periphs);
 800143c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001440:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001448:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001450:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001452:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001456:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001458:	2312      	movs	r3, #18
 800145a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145c:	2301      	movs	r3, #1
 800145e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001460:	2304      	movs	r3, #4
 8001462:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	a903      	add	r1, sp, #12
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f001 fc65 	bl	8002d38 <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800146e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001474:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001476:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800147e:	9b01      	ldr	r3, [sp, #4]
}
 8001480:	e7da      	b.n	8001438 <HAL_I2C_MspInit+0x18>
 8001482:	bf00      	nop
 8001484:	40005400 	.word	0x40005400

08001488 <setup_LP5523>:
{
   uint8_t current[9];
   uint8_t intensity[9];
};

void setup_LP5523(uint8_t ADDR){
 8001488:	b530      	push	{r4, r5, lr}
 800148a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t deviceAddress = ADDR << 1;
 800148c:	0040      	lsls	r0, r0, #1
 800148e:	b2c5      	uxtb	r5, r0
	uint8_t led_PWM[9] = {0};
 8001490:	2300      	movs	r3, #0
 8001492:	9307      	str	r3, [sp, #28]
 8001494:	9308      	str	r3, [sp, #32]
 8001496:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	uint8_t packet;

	// enable chip
	packet = LP5525_CHIP_EN;
 800149a:	2340      	movs	r3, #64	; 0x40
 800149c:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 80014a0:	b2ac      	uxth	r4, r5
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2301      	movs	r3, #1
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	f10d 021b 	add.w	r2, sp, #27
 80014b0:	9200      	str	r2, [sp, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	4621      	mov	r1, r4
 80014b6:	482d      	ldr	r0, [pc, #180]	; (800156c <setup_LP5523+0xe4>)
 80014b8:	f001 fe84 	bl	80031c4 <HAL_I2C_Mem_Write>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d1ef      	bne.n	80014a0 <setup_LP5523+0x18>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 80014c0:	234f      	movs	r3, #79	; 0x4f
 80014c2:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2301      	movs	r3, #1
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	f10d 021b 	add.w	r2, sp, #27
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	2236      	movs	r2, #54	; 0x36
 80014d8:	4621      	mov	r1, r4
 80014da:	4824      	ldr	r0, [pc, #144]	; (800156c <setup_LP5523+0xe4>)
 80014dc:	f001 fe72 	bl	80031c4 <HAL_I2C_Mem_Write>
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d1f0      	bne.n	80014c6 <setup_LP5523+0x3e>

	// set PWM level (0 to 255)
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	2309      	movs	r3, #9
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	ab07      	add	r3, sp, #28
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2301      	movs	r3, #1
 80014f4:	2216      	movs	r2, #22
 80014f6:	4621      	mov	r1, r4
 80014f8:	481c      	ldr	r0, [pc, #112]	; (800156c <setup_LP5523+0xe4>)
 80014fa:	f001 fe63 	bl	80031c4 <HAL_I2C_Mem_Write>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d1f0      	bne.n	80014e4 <setup_LP5523+0x5c>

	// set current control (0 to 25.5 mA) - step size is 100uA
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	2309      	movs	r3, #9
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <setup_LP5523+0xe8>)
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	2226      	movs	r2, #38	; 0x26
 8001514:	4621      	mov	r1, r4
 8001516:	4815      	ldr	r0, [pc, #84]	; (800156c <setup_LP5523+0xe4>)
 8001518:	f001 fe54 	bl	80031c4 <HAL_I2C_Mem_Write>
 800151c:	2800      	cmp	r0, #0
 800151e:	d1f0      	bne.n	8001502 <setup_LP5523+0x7a>

	// enable logarithmic dimming
	packet = LOG_EN;
 8001520:	2320      	movs	r3, #32
 8001522:	f88d 301b 	strb.w	r3, [sp, #27]
	uint8_t packet_array[9] = {packet,packet,packet,packet,packet,packet,packet,packet,packet};
 8001526:	f88d 3010 	strb.w	r3, [sp, #16]
 800152a:	f88d 3011 	strb.w	r3, [sp, #17]
 800152e:	f88d 3012 	strb.w	r3, [sp, #18]
 8001532:	f88d 3013 	strb.w	r3, [sp, #19]
 8001536:	f88d 3014 	strb.w	r3, [sp, #20]
 800153a:	f88d 3015 	strb.w	r3, [sp, #21]
 800153e:	f88d 3016 	strb.w	r3, [sp, #22]
 8001542:	f88d 3017 	strb.w	r3, [sp, #23]
 8001546:	f88d 3018 	strb.w	r3, [sp, #24]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	2309      	movs	r3, #9
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	ab04      	add	r3, sp, #16
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2301      	movs	r3, #1
 800155a:	2206      	movs	r2, #6
 800155c:	4621      	mov	r1, r4
 800155e:	4803      	ldr	r0, [pc, #12]	; (800156c <setup_LP5523+0xe4>)
 8001560:	f001 fe30 	bl	80031c4 <HAL_I2C_Mem_Write>
 8001564:	2800      	cmp	r0, #0
 8001566:	d1f0      	bne.n	800154a <setup_LP5523+0xc2>

}
 8001568:	b00b      	add	sp, #44	; 0x2c
 800156a:	bd30      	pop	{r4, r5, pc}
 800156c:	20004268 	.word	0x20004268
 8001570:	20000004 	.word	0x20000004

08001574 <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 8001574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001576:	b085      	sub	sp, #20
 8001578:	4603      	mov	r3, r0
	memcpy(led_left_PWM, setColors, 9);
 800157a:	f8df c058 	ldr.w	ip, [pc, #88]	; 80015d4 <FrontLightsSet+0x60>
 800157e:	4662      	mov	r2, ip
 8001580:	6800      	ldr	r0, [r0, #0]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	c203      	stmia	r2!, {r0, r1}
 8001586:	7a19      	ldrb	r1, [r3, #8]
 8001588:	7011      	strb	r1, [r2, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 800158a:	4d10      	ldr	r5, [pc, #64]	; (80015cc <FrontLightsSet+0x58>)
 800158c:	462a      	mov	r2, r5
 800158e:	f853 0f09 	ldr.w	r0, [r3, #9]!
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	c203      	stmia	r2!, {r0, r1}
 8001596:	7a1b      	ldrb	r3, [r3, #8]
 8001598:	7013      	strb	r3, [r2, #0]
#ifndef DONGLE_CODE
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 800159a:	4c0d      	ldr	r4, [pc, #52]	; (80015d0 <FrontLightsSet+0x5c>)
 800159c:	f04f 37ff 	mov.w	r7, #4294967295
 80015a0:	9702      	str	r7, [sp, #8]
 80015a2:	2609      	movs	r6, #9
 80015a4:	9601      	str	r6, [sp, #4]
 80015a6:	f8cd c000 	str.w	ip, [sp]
 80015aa:	2301      	movs	r3, #1
 80015ac:	2216      	movs	r2, #22
 80015ae:	2168      	movs	r1, #104	; 0x68
 80015b0:	4620      	mov	r0, r4
 80015b2:	f001 fe07 	bl	80031c4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 80015b6:	9702      	str	r7, [sp, #8]
 80015b8:	9601      	str	r6, [sp, #4]
 80015ba:	9500      	str	r5, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	2216      	movs	r2, #22
 80015c0:	216a      	movs	r1, #106	; 0x6a
 80015c2:	4620      	mov	r0, r4
 80015c4:	f001 fdfe 	bl	80031c4 <HAL_I2C_Mem_Write>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 80015c8:	b005      	add	sp, #20
 80015ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015cc:	20000998 	.word	0x20000998
 80015d0:	20004268 	.word	0x20004268
 80015d4:	2000098c 	.word	0x2000098c

080015d8 <ThreadFrontLightsTask>:

void ThreadFrontLightsTask(void *argument)
{
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	b086      	sub	sp, #24
#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 80015dc:	2034      	movs	r0, #52	; 0x34
 80015de:	f7ff ff53 	bl	8001488 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 80015e2:	2035      	movs	r0, #53	; 0x35
 80015e4:	f7ff ff50 	bl	8001488 <setup_LP5523>
 80015e8:	e02d      	b.n	8001646 <ThreadFrontLightsTask+0x6e>

//		// REMOVE BELOW
//		lightsSimpleMessageReceived = 0X00005229;

		for(int i = 0; i<= 8; i++){
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 80015ea:	9b05      	ldr	r3, [sp, #20]
 80015ec:	f343 0000 	sbfx	r0, r3, #0, #1
 80015f0:	491b      	ldr	r1, [pc, #108]	; (8001660 <ThreadFrontLightsTask+0x88>)
 80015f2:	5488      	strb	r0, [r1, r2]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	9305      	str	r3, [sp, #20]
		for(int i = 0; i<= 8; i++){
 80015f8:	3201      	adds	r2, #1
 80015fa:	2a08      	cmp	r2, #8
 80015fc:	ddf5      	ble.n	80015ea <ThreadFrontLightsTask+0x12>
		}

		for(int i = 0; i<= 8; i++){
 80015fe:	2200      	movs	r2, #0
 8001600:	e007      	b.n	8001612 <ThreadFrontLightsTask+0x3a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8001602:	9b05      	ldr	r3, [sp, #20]
 8001604:	f343 0000 	sbfx	r0, r3, #0, #1
 8001608:	4916      	ldr	r1, [pc, #88]	; (8001664 <ThreadFrontLightsTask+0x8c>)
 800160a:	5488      	strb	r0, [r1, r2]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	9305      	str	r3, [sp, #20]
		for(int i = 0; i<= 8; i++){
 8001610:	3201      	adds	r2, #1
 8001612:	2a08      	cmp	r2, #8
 8001614:	ddf5      	ble.n	8001602 <ThreadFrontLightsTask+0x2a>


		//HAL_I2C_Mem_Write_IT(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_PWM, 9);
		//osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);

		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8001616:	4c14      	ldr	r4, [pc, #80]	; (8001668 <ThreadFrontLightsTask+0x90>)
 8001618:	f04f 36ff 	mov.w	r6, #4294967295
 800161c:	9602      	str	r6, [sp, #8]
 800161e:	2509      	movs	r5, #9
 8001620:	9501      	str	r5, [sp, #4]
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <ThreadFrontLightsTask+0x88>)
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	2216      	movs	r2, #22
 800162a:	2168      	movs	r1, #104	; 0x68
 800162c:	4620      	mov	r0, r4
 800162e:	f001 fdc9 	bl	80031c4 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8001632:	9602      	str	r6, [sp, #8]
 8001634:	9501      	str	r5, [sp, #4]
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <ThreadFrontLightsTask+0x8c>)
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2301      	movs	r3, #1
 800163c:	2216      	movs	r2, #22
 800163e:	216a      	movs	r1, #106	; 0x6a
 8001640:	4620      	mov	r0, r4
 8001642:	f001 fdbf 	bl	80031c4 <HAL_I2C_Mem_Write>
		lightsSimpleMessageReceived = 0;
 8001646:	2400      	movs	r4, #0
 8001648:	a906      	add	r1, sp, #24
 800164a:	f841 4d04 	str.w	r4, [r1, #-4]!
		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	4622      	mov	r2, r4
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <ThreadFrontLightsTask+0x94>)
 8001656:	6800      	ldr	r0, [r0, #0]
 8001658:	f005 fb04 	bl	8006c64 <osMessageQueueGet>
		for(int i = 0; i<= 8; i++){
 800165c:	4622      	mov	r2, r4
 800165e:	e7cc      	b.n	80015fa <ThreadFrontLightsTask+0x22>
 8001660:	2000098c 	.word	0x2000098c
 8001664:	20000998 	.word	0x20000998
 8001668:	20004268 	.word	0x20004268
 800166c:	20004250 	.word	0x20004250

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001674:	2248      	movs	r2, #72	; 0x48
 8001676:	2100      	movs	r1, #0
 8001678:	a81c      	add	r0, sp, #112	; 0x70
 800167a:	f009 fba4 	bl	800adc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167e:	2400      	movs	r4, #0
 8001680:	9415      	str	r4, [sp, #84]	; 0x54
 8001682:	9416      	str	r4, [sp, #88]	; 0x58
 8001684:	9417      	str	r4, [sp, #92]	; 0x5c
 8001686:	9418      	str	r4, [sp, #96]	; 0x60
 8001688:	9419      	str	r4, [sp, #100]	; 0x64
 800168a:	941a      	str	r4, [sp, #104]	; 0x68
 800168c:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168e:	2250      	movs	r2, #80	; 0x50
 8001690:	4621      	mov	r1, r4
 8001692:	a801      	add	r0, sp, #4
 8001694:	f009 fb97 	bl	800adc6 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8001698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016a2:	f042 0210 	orr.w	r2, r2, #16
 80016a6:	60da      	str	r2, [r3, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	f042 0203 	orr.w	r2, r2, #3
 80016ae:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80016b4:	f022 0218 	bic.w	r2, r2, #24
 80016b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016bc:	4a25      	ldr	r2, [pc, #148]	; (8001754 <SystemClock_Config+0xe4>)
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	6813      	ldr	r3, [r2, #0]
 80016cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80016d4:	230f      	movs	r3, #15
 80016d6:	931c      	str	r3, [sp, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016dc:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016de:	2701      	movs	r7, #1
 80016e0:	971e      	str	r7, [sp, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e2:	f44f 7680 	mov.w	r6, #256	; 0x100
 80016e6:	961f      	str	r6, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e8:	2340      	movs	r3, #64	; 0x40
 80016ea:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016ec:	2305      	movs	r3, #5
 80016ee:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016f0:	9427      	str	r4, [sp, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f2:	a81c      	add	r0, sp, #112	; 0x70
 80016f4:	f001 ff26 	bl	8003544 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80016f8:	236f      	movs	r3, #111	; 0x6f
 80016fa:	9315      	str	r3, [sp, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80016fc:	2502      	movs	r5, #2
 80016fe:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001702:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001704:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001706:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001708:	941b      	str	r4, [sp, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800170a:	4639      	mov	r1, r7
 800170c:	a815      	add	r0, sp, #84	; 0x54
 800170e:	f002 faa3 	bl	8003c58 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001712:	f643 4305 	movw	r3, #15365	; 0x3c05
 8001716:	9301      	str	r3, [sp, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8001718:	2306      	movs	r3, #6
 800171a:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800171c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001720:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001726:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001728:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800172c:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 800172e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001732:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001734:	9407      	str	r4, [sp, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001736:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800173a:	9209      	str	r2, [sp, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800173c:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800173e:	9611      	str	r6, [sp, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8001740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001744:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001746:	9513      	str	r5, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001748:	9414      	str	r4, [sp, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174a:	a801      	add	r0, sp, #4
 800174c:	f002 fd3f 	bl	80041ce <HAL_RCCEx_PeriphCLKConfig>
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001750:	b02f      	add	sp, #188	; 0xbc
 8001752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001754:	58000400 	.word	0x58000400

08001758 <main>:
{
 8001758:	b508      	push	{r3, lr}
  HAL_Init();
 800175a:	f000 fb6b 	bl	8001e34 <HAL_Init>
  SystemClock_Config();
 800175e:	f7ff ff87 	bl	8001670 <SystemClock_Config>
  MX_GPIO_Init();
 8001762:	f7ff fa03 	bl	8000b6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001766:	f7ff f91d 	bl	80009a4 <MX_DMA_Init>
  MX_ADC1_Init();
 800176a:	f7fe fe93 	bl	8000494 <MX_ADC1_Init>
  MX_RTC_Init();
 800176e:	f000 f8f3 	bl	8001958 <MX_RTC_Init>
  MX_TIM2_Init();
 8001772:	f000 fa65 	bl	8001c40 <MX_TIM2_Init>
  MX_RF_Init();
 8001776:	f000 f8ed 	bl	8001954 <MX_RF_Init>
  MX_USART1_UART_Init();
 800177a:	f000 fabb 	bl	8001cf4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800177e:	f7ff fe23 	bl	80013c8 <MX_I2C1_Init>
  MX_FREERTOS_Init(); 
 8001782:	f7fe ffef 	bl	8000764 <MX_FREERTOS_Init>
  osKernelStart();
 8001786:	f004 fe87 	bl	8006498 <osKernelStart>
 800178a:	e7fe      	b.n	800178a <main+0x32>

0800178c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800178c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800178e:	6802      	ldr	r2, [r0, #0]
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001792:	429a      	cmp	r2, r3
 8001794:	d000      	beq.n	8001798 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001796:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001798:	f000 fb62 	bl	8001e60 <HAL_IncTick>
}
 800179c:	e7fb      	b.n	8001796 <HAL_TIM_PeriodElapsedCallback+0xa>
 800179e:	bf00      	nop
 80017a0:	40012c00 	.word	0x40012c00

080017a4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017a4:	4770      	bx	lr
	...

080017a8 <RTC_ToEpoch>:
	// add sensor data
	memcpy ( &(packet->blink), blink, sizeof(struct blinkData) );
}

// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 80017a8:	b430      	push	{r4, r5}
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 80017aa:	784b      	ldrb	r3, [r1, #1]
 80017ac:	f1c3 040e 	rsb	r4, r3, #14
 80017b0:	4d22      	ldr	r5, [pc, #136]	; (800183c <RTC_ToEpoch+0x94>)
 80017b2:	fb85 2504 	smull	r2, r5, r5, r4
 80017b6:	17e2      	asrs	r2, r4, #31
 80017b8:	ebc2 0265 	rsb	r2, r2, r5, asr #1
 80017bc:	b2d2      	uxtb	r2, r2
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 80017be:	78cc      	ldrb	r4, [r1, #3]
 80017c0:	1aa4      	subs	r4, r4, r2
 80017c2:	f641 2590 	movw	r5, #6800	; 0x1a90
 80017c6:	fa15 f484 	uxtah	r4, r5, r4
 80017ca:	b2a4      	uxth	r4, r4
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 80017cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80017d0:	0095      	lsls	r5, r2, #2
 80017d2:	442b      	add	r3, r5
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3b03      	subs	r3, #3
 80017d8:	b2db      	uxtb	r3, r3

	// Gregorian calendar date compute
    JDN  = date->Date;
 80017da:	788a      	ldrb	r2, [r1, #2]
    JDN += (153 * m + 2) / 5;
 80017dc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80017e0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80017e4:	3302      	adds	r3, #2
 80017e6:	4916      	ldr	r1, [pc, #88]	; (8001840 <RTC_ToEpoch+0x98>)
 80017e8:	fb81 1303 	smull	r1, r3, r1, r3
 80017ec:	eb02 0263 	add.w	r2, r2, r3, asr #1
    JDN += 365 * y;
 80017f0:	f240 136d 	movw	r3, #365	; 0x16d
 80017f4:	fb03 2304 	mla	r3, r3, r4, r2
    JDN += y / 4;
 80017f8:	eb03 0394 	add.w	r3, r3, r4, lsr #2
    JDN += -y / 100;
 80017fc:	4262      	negs	r2, r4
 80017fe:	4911      	ldr	r1, [pc, #68]	; (8001844 <RTC_ToEpoch+0x9c>)
 8001800:	fb81 c502 	smull	ip, r5, r1, r2
 8001804:	17d2      	asrs	r2, r2, #31
 8001806:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 800180a:	441a      	add	r2, r3
    JDN += y / 400;
 800180c:	fba1 3404 	umull	r3, r4, r1, r4
 8001810:	eb02 14d4 	add.w	r4, r2, r4, lsr #7
    JDN  = JDN - 32045;
    JDN  = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <RTC_ToEpoch+0xa0>)
 8001816:	4423      	add	r3, r4
    JDN *= 86400;                     // Days to seconds
    JDN += time->Hours * 3600;    // ... and today seconds
 8001818:	7801      	ldrb	r1, [r0, #0]
 800181a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800181e:	fb02 f201 	mul.w	r2, r2, r1
 8001822:	490a      	ldr	r1, [pc, #40]	; (800184c <RTC_ToEpoch+0xa4>)
 8001824:	fb01 2303 	mla	r3, r1, r3, r2
    JDN += time->Minutes * 60;
 8001828:	7842      	ldrb	r2, [r0, #1]
 800182a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800182e:	0091      	lsls	r1, r2, #2
 8001830:	440b      	add	r3, r1
    JDN += time->Seconds;
 8001832:	7880      	ldrb	r0, [r0, #2]

	return JDN;
}
 8001834:	4418      	add	r0, r3
 8001836:	bc30      	pop	{r4, r5}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2aaaaaab 	.word	0x2aaaaaab
 8001840:	66666667 	.word	0x66666667
 8001844:	51eb851f 	.word	0x51eb851f
 8001848:	ffda4547 	.word	0xffda4547
 800184c:	00015180 	.word	0x00015180

08001850 <packetizeData>:
{
 8001850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001854:	4604      	mov	r4, r0
 8001856:	4688      	mov	r8, r1
	packet->tick_ms = HAL_GetTick();
 8001858:	f000 fb0e 	bl	8001e78 <HAL_GetTick>
 800185c:	66e0      	str	r0, [r4, #108]	; 0x6c
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 800185e:	4d0c      	ldr	r5, [pc, #48]	; (8001890 <packetizeData+0x40>)
 8001860:	4f0c      	ldr	r7, [pc, #48]	; (8001894 <packetizeData+0x44>)
 8001862:	2200      	movs	r2, #0
 8001864:	4629      	mov	r1, r5
 8001866:	4638      	mov	r0, r7
 8001868:	f002 fee8 	bl	800463c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 800186c:	4e0a      	ldr	r6, [pc, #40]	; (8001898 <packetizeData+0x48>)
 800186e:	2200      	movs	r2, #0
 8001870:	4631      	mov	r1, r6
 8001872:	4638      	mov	r0, r7
 8001874:	f002 ff0d 	bl	8004692 <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 8001878:	4631      	mov	r1, r6
 800187a:	4628      	mov	r0, r5
 800187c:	f7ff ff94 	bl	80017a8 <RTC_ToEpoch>
 8001880:	6720      	str	r0, [r4, #112]	; 0x70
	memcpy ( &(packet->blink), blink, sizeof(struct blinkData) );
 8001882:	226c      	movs	r2, #108	; 0x6c
 8001884:	4641      	mov	r1, r8
 8001886:	4620      	mov	r0, r4
 8001888:	f009 fa92 	bl	800adb0 <memcpy>
}
 800188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001890:	2000439c 	.word	0x2000439c
 8001894:	200043bc 	.word	0x200043bc
 8001898:	200043b8 	.word	0x200043b8

0800189c <MasterThreadTask>:
{
 800189c:	b500      	push	{lr}
 800189e:	b083      	sub	sp, #12
 80018a0:	e020      	b.n	80018e4 <MasterThreadTask+0x48>
				if(togLogMessageReceived.blinkEnabled == SENSOR_ENABLE)
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <MasterThreadTask+0x9c>)
 80018a4:	789b      	ldrb	r3, [r3, #2]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d036      	beq.n	8001918 <MasterThreadTask+0x7c>
				packetizeData(&sensorPacket, &blinkMsgReceived, NULL, NULL, NULL);
 80018aa:	4d24      	ldr	r5, [pc, #144]	; (800193c <MasterThreadTask+0xa0>)
 80018ac:	2400      	movs	r4, #0
 80018ae:	9400      	str	r4, [sp, #0]
 80018b0:	4623      	mov	r3, r4
 80018b2:	4622      	mov	r2, r4
 80018b4:	4922      	ldr	r1, [pc, #136]	; (8001940 <MasterThreadTask+0xa4>)
 80018b6:	4628      	mov	r0, r5
 80018b8:	f7ff ffca 	bl	8001850 <packetizeData>
				APP_THREAD_SendBorderPacket(&sensorPacket);
 80018bc:	4628      	mov	r0, r5
 80018be:	f008 ffd9 	bl	800a874 <APP_THREAD_SendBorderPacket>
				if(osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK)
 80018c2:	4623      	mov	r3, r4
 80018c4:	4622      	mov	r2, r4
 80018c6:	491c      	ldr	r1, [pc, #112]	; (8001938 <MasterThreadTask+0x9c>)
 80018c8:	481e      	ldr	r0, [pc, #120]	; (8001944 <MasterThreadTask+0xa8>)
 80018ca:	6800      	ldr	r0, [r0, #0]
 80018cc:	f005 f9ca 	bl	8006c64 <osMessageQueueGet>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d1e6      	bne.n	80018a2 <MasterThreadTask+0x6>
					if(togLogMessageReceived.status == DISABLE_SENSING){
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <MasterThreadTask+0x9c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1e2      	bne.n	80018a2 <MasterThreadTask+0x6>
						if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <MasterThreadTask+0xac>)
 80018de:	789b      	ldrb	r3, [r3, #2]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d022      	beq.n	800192a <MasterThreadTask+0x8e>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 80018e4:	4c14      	ldr	r4, [pc, #80]	; (8001938 <MasterThreadTask+0x9c>)
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	2200      	movs	r2, #0
 80018ec:	4621      	mov	r1, r4
 80018ee:	4815      	ldr	r0, [pc, #84]	; (8001944 <MasterThreadTask+0xa8>)
 80018f0:	6800      	ldr	r0, [r0, #0]
 80018f2:	f005 f9b7 	bl	8006c64 <osMessageQueueGet>
		if(togLogMessageReceived.logStatus == ENABLE_LOG)
 80018f6:	7863      	ldrb	r3, [r4, #1]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d1f3      	bne.n	80018e4 <MasterThreadTask+0x48>
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 80018fc:	4a12      	ldr	r2, [pc, #72]	; (8001948 <MasterThreadTask+0xac>)
 80018fe:	6821      	ldr	r1, [r4, #0]
 8001900:	6011      	str	r1, [r2, #0]
 8001902:	88a1      	ldrh	r1, [r4, #4]
 8001904:	8091      	strh	r1, [r2, #4]
			if(togLogMessageReceived.blinkEnabled == SENSOR_ENABLE)
 8001906:	78a3      	ldrb	r3, [r4, #2]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d1ca      	bne.n	80018a2 <MasterThreadTask+0x6>
				osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 800190c:	2101      	movs	r1, #1
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MasterThreadTask+0xb0>)
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	f004 fe5b 	bl	80065cc <osThreadFlagsSet>
 8001916:	e7c4      	b.n	80018a2 <MasterThreadTask+0x6>
					osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, osWaitForever);
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	2200      	movs	r2, #0
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <MasterThreadTask+0xa4>)
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <MasterThreadTask+0xb4>)
 8001922:	6800      	ldr	r0, [r0, #0]
 8001924:	f005 f99e 	bl	8006c64 <osMessageQueueGet>
 8001928:	e7bf      	b.n	80018aa <MasterThreadTask+0xe>
							osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 800192a:	2102      	movs	r1, #2
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <MasterThreadTask+0xb0>)
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	f004 fe4c 	bl	80065cc <osThreadFlagsSet>
 8001934:	e7d6      	b.n	80018e4 <MasterThreadTask+0x48>
 8001936:	bf00      	nop
 8001938:	20004320 	.word	0x20004320
 800193c:	20004328 	.word	0x20004328
 8001940:	200042b4 	.word	0x200042b4
 8001944:	20004240 	.word	0x20004240
 8001948:	200043b0 	.word	0x200043b0
 800194c:	20004234 	.word	0x20004234
 8001950:	20004248 	.word	0x20004248

08001954 <MX_RF_Init>:

/* RF init function */
void MX_RF_Init(void)
{

}
 8001954:	4770      	bx	lr
	...

08001958 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001958:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800195a:	4808      	ldr	r0, [pc, #32]	; (800197c <MX_RTC_Init+0x24>)
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_RTC_Init+0x28>)
 800195e:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001960:	2300      	movs	r3, #0
 8001962:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001964:	230f      	movs	r3, #15
 8001966:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001968:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800196c:	60c3      	str	r3, [r0, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800196e:	f002 fdef 	bl	8004550 <HAL_RTC_Init>
 8001972:	b900      	cbnz	r0, 8001976 <MX_RTC_Init+0x1e>
  {
    Error_Handler();
  }

}
 8001974:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001976:	f7ff ff15 	bl	80017a4 <Error_Handler>
}
 800197a:	e7fb      	b.n	8001974 <MX_RTC_Init+0x1c>
 800197c:	200043bc 	.word	0x200043bc
 8001980:	40002800 	.word	0x40002800

08001984 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8001984:	6802      	ldr	r2, [r0, #0]
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_RTC_MspInit+0x1c>)
 8001988:	429a      	cmp	r2, r3
 800198a:	d000      	beq.n	800198e <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800198c:	4770      	bx	lr
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800198e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001992:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800199e:	e7f5      	b.n	800198c <HAL_RTC_MspInit+0x8>
 80019a0:	40002800 	.word	0x40002800

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b500      	push	{lr}
 80019a6:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019b2:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ba:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80019bc:	9b01      	ldr	r3, [sp, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	210f      	movs	r1, #15
 80019c2:	f06f 0001 	mvn.w	r0, #1
 80019c6:	f000 ff83 	bl	80028d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	210f      	movs	r1, #15
 80019ce:	202c      	movs	r0, #44	; 0x2c
 80019d0:	f000 ff7e 	bl	80028d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	210f      	movs	r1, #15
 80019d8:	202d      	movs	r0, #45	; 0x2d
 80019da:	f000 ff79 	bl	80028d0 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80019de:	b003      	add	sp, #12
 80019e0:	f85d fb04 	ldr.w	pc, [sp], #4

080019e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b500      	push	{lr}
 80019e6:	b08b      	sub	sp, #44	; 0x2c
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80019e8:	2200      	movs	r2, #0
 80019ea:	4601      	mov	r1, r0
 80019ec:	2019      	movs	r0, #25
 80019ee:	f000 ff6f 	bl	80028d0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80019f2:	2019      	movs	r0, #25
 80019f4:	f000 ffa0 	bl	8002938 <HAL_NVIC_EnableIRQ>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a02:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a0a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a0c:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a0e:	a902      	add	r1, sp, #8
 8001a10:	a803      	add	r0, sp, #12
 8001a12:	f002 fae1 	bl	8003fd8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a16:	f002 facd 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_InitTick+0x6c>)
 8001a1c:	fba3 2300 	umull	r2, r3, r3, r0
 8001a20:	0c9b      	lsrs	r3, r3, #18
 8001a22:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a24:	480b      	ldr	r0, [pc, #44]	; (8001a54 <HAL_InitTick+0x70>)
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <HAL_InitTick+0x74>)
 8001a28:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001a2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a2e:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a30:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a36:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a38:	f003 f8ce 	bl	8004bd8 <HAL_TIM_Base_Init>
 8001a3c:	b118      	cbz	r0, 8001a46 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
}
 8001a40:	b00b      	add	sp, #44	; 0x2c
 8001a42:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8001a46:	4803      	ldr	r0, [pc, #12]	; (8001a54 <HAL_InitTick+0x70>)
 8001a48:	f002 ffa6 	bl	8004998 <HAL_TIM_Base_Start_IT>
 8001a4c:	e7f8      	b.n	8001a40 <HAL_InitTick+0x5c>
 8001a4e:	bf00      	nop
 8001a50:	431bde83 	.word	0x431bde83
 8001a54:	200043e0 	.word	0x200043e0
 8001a58:	40012c00 	.word	0x40012c00

08001a5c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a5c:	4770      	bx	lr

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler>

08001a66 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a66:	4770      	bx	lr

08001a68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a6a:	4802      	ldr	r0, [pc, #8]	; (8001a74 <DMA1_Channel1_IRQHandler+0xc>)
 8001a6c:	f001 f902 	bl	8002c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a70:	bd08      	pop	{r3, pc}
 8001a72:	bf00      	nop
 8001a74:	200041d0 	.word	0x200041d0

08001a78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a7a:	4802      	ldr	r0, [pc, #8]	; (8001a84 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8001a7c:	f002 ffa7 	bl	80049ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a80:	bd08      	pop	{r3, pc}
 8001a82:	bf00      	nop
 8001a84:	200043e0 	.word	0x200043e0

08001a88 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8001a88:	b508      	push	{r3, lr}
  HW_IPCC_Tx_Handler();
 8001a8a:	f009 f88b 	bl	800aba4 <HW_IPCC_Tx_Handler>

  return;
}
 8001a8e:	bd08      	pop	{r3, pc}

08001a90 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8001a90:	b508      	push	{r3, lr}
  HW_IPCC_Rx_Handler();
 8001a92:	f009 f903 	bl	800ac9c <HW_IPCC_Rx_Handler>
  return;
}
 8001a96:	bd08      	pop	{r3, pc}

08001a98 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8001a98:	b40c      	push	{r2, r3}
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8001a9a:	b002      	add	sp, #8
 8001a9c:	4770      	bx	lr
	...

08001aa0 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <SystemInit+0x5c>)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001aa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001aaa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001abe:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001ac2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8001aca:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8001ace:	4002      	ands	r2, r0
 8001ad0:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001ad2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001ad6:	f022 0205 	bic.w	r2, r2, #5
 8001ada:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ade:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <SystemInit+0x60>)
 8001aec:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001aee:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001af6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001af8:	6199      	str	r1, [r3, #24]
}
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00
 8001b00:	22041000 	.word	0x22041000

08001b04 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b0e:	4929      	ldr	r1, [pc, #164]	; (8001bb4 <SystemCoreClockUpdate+0xb0>)
 8001b10:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b14:	6893      	ldr	r3, [r2, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d846      	bhi.n	8001bac <SystemCoreClockUpdate+0xa8>
 8001b1e:	e8df f003 	tbb	[pc, r3]
 8001b22:	4507      	.short	0x4507
 8001b24:	45174545 	.word	0x45174545
 8001b28:	451b4545 	.word	0x451b4545
 8001b2c:	4545      	.short	0x4545
 8001b2e:	1f          	.byte	0x1f
 8001b2f:	00          	.byte	0x00
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <SystemCoreClockUpdate+0xb4>)
 8001b32:	6019      	str	r1, [r3, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b3e:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <SystemCoreClockUpdate+0xb8>)
 8001b40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001b44:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <SystemCoreClockUpdate+0xb4>)
 8001b46:	6813      	ldr	r3, [r2, #0]
 8001b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4c:	6013      	str	r3, [r2, #0]

}
 8001b4e:	4770      	bx	lr
        SystemCoreClock = HSI_VALUE;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <SystemCoreClockUpdate+0xb4>)
 8001b52:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <SystemCoreClockUpdate+0xbc>)
 8001b54:	601a      	str	r2, [r3, #0]
      break;
 8001b56:	e7ed      	b.n	8001b34 <SystemCoreClockUpdate+0x30>
      SystemCoreClock = HSE_VALUE;
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <SystemCoreClockUpdate+0xb4>)
 8001b5a:	4a1a      	ldr	r2, [pc, #104]	; (8001bc4 <SystemCoreClockUpdate+0xc0>)
 8001b5c:	601a      	str	r2, [r3, #0]
      break;
 8001b5e:	e7e9      	b.n	8001b34 <SystemCoreClockUpdate+0x30>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001b70:	3301      	adds	r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001b72:	2a02      	cmp	r2, #2
 8001b74:	d012      	beq.n	8001b9c <SystemCoreClockUpdate+0x98>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001b76:	2a03      	cmp	r2, #3
 8001b78:	d014      	beq.n	8001ba4 <SystemCoreClockUpdate+0xa0>
        pllvco = (msirange / pllm);
 8001b7a:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b82:	68ca      	ldr	r2, [r1, #12]
 8001b84:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001b88:	fb03 f302 	mul.w	r3, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001b8c:	68ca      	ldr	r2, [r1, #12]
 8001b8e:	0f52      	lsrs	r2, r2, #29
 8001b90:	3201      	adds	r2, #1
      SystemCoreClock = pllvco/pllr;
 8001b92:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <SystemCoreClockUpdate+0xb4>)
 8001b98:	6013      	str	r3, [r2, #0]
      break;
 8001b9a:	e7cb      	b.n	8001b34 <SystemCoreClockUpdate+0x30>
        pllvco = (HSI_VALUE / pllm);
 8001b9c:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <SystemCoreClockUpdate+0xbc>)
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	e7ec      	b.n	8001b7e <SystemCoreClockUpdate+0x7a>
        pllvco = (HSE_VALUE / pllm);
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <SystemCoreClockUpdate+0xc0>)
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	e7e8      	b.n	8001b7e <SystemCoreClockUpdate+0x7a>
      SystemCoreClock = msirange;
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <SystemCoreClockUpdate+0xb4>)
 8001bae:	6019      	str	r1, [r3, #0]
      break;
 8001bb0:	e7c0      	b.n	8001b34 <SystemCoreClockUpdate+0x30>
 8001bb2:	bf00      	nop
 8001bb4:	0800af70 	.word	0x0800af70
 8001bb8:	20000010 	.word	0x20000010
 8001bbc:	0800af10 	.word	0x0800af10
 8001bc0:	00f42400 	.word	0x00f42400
 8001bc4:	01e84800 	.word	0x01e84800

08001bc8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001bc8:	6803      	ldr	r3, [r0, #0]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bce:	d000      	beq.n	8001bd2 <HAL_TIM_Base_MspInit+0xa>
 8001bd0:	4770      	bx	lr
{
 8001bd2:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001be8:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bea:	b002      	add	sp, #8
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bf0:	b500      	push	{lr}
 8001bf2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	9302      	str	r3, [sp, #8]
 8001bfa:	9303      	str	r3, [sp, #12]
 8001bfc:	9304      	str	r3, [sp, #16]
 8001bfe:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM2)
 8001c00:	6803      	ldr	r3, [r0, #0]
 8001c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c06:	d002      	beq.n	8001c0e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c08:	b007      	add	sp, #28
 8001c0a:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c14:	f042 0202 	orr.w	r2, r2, #2
 8001c18:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001c22:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c24:	2308      	movs	r3, #8
 8001c26:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	a901      	add	r1, sp, #4
 8001c32:	4802      	ldr	r0, [pc, #8]	; (8001c3c <HAL_TIM_MspPostInit+0x4c>)
 8001c34:	f001 f880 	bl	8002d38 <HAL_GPIO_Init>
}
 8001c38:	e7e6      	b.n	8001c08 <HAL_TIM_MspPostInit+0x18>
 8001c3a:	bf00      	nop
 8001c3c:	48000400 	.word	0x48000400

08001c40 <MX_TIM2_Init>:
{
 8001c40:	b500      	push	{lr}
 8001c42:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c44:	2300      	movs	r3, #0
 8001c46:	930a      	str	r3, [sp, #40]	; 0x28
 8001c48:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8001c4c:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4e:	9307      	str	r3, [sp, #28]
 8001c50:	9308      	str	r3, [sp, #32]
 8001c52:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	9302      	str	r3, [sp, #8]
 8001c5a:	9303      	str	r3, [sp, #12]
 8001c5c:	9304      	str	r3, [sp, #16]
 8001c5e:	9305      	str	r3, [sp, #20]
 8001c60:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 8001c62:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <MX_TIM2_Init+0xb0>)
 8001c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c68:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 639;
 8001c6a:	f240 227f 	movw	r2, #639	; 0x27f
 8001c6e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 9;
 8001c72:	2209      	movs	r2, #9
 8001c74:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c76:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c78:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c7a:	f002 ffad 	bl	8004bd8 <HAL_TIM_Base_Init>
 8001c7e:	bb40      	cbnz	r0, 8001cd2 <MX_TIM2_Init+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c80:	a90e      	add	r1, sp, #56	; 0x38
 8001c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c86:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c8a:	4819      	ldr	r0, [pc, #100]	; (8001cf0 <MX_TIM2_Init+0xb0>)
 8001c8c:	f003 f8b8 	bl	8004e00 <HAL_TIM_ConfigClockSource>
 8001c90:	bb10      	cbnz	r0, 8001cd8 <MX_TIM2_Init+0x98>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c92:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <MX_TIM2_Init+0xb0>)
 8001c94:	f002 ffb9 	bl	8004c0a <HAL_TIM_PWM_Init>
 8001c98:	bb08      	cbnz	r0, 8001cde <MX_TIM2_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca2:	a907      	add	r1, sp, #28
 8001ca4:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <MX_TIM2_Init+0xb0>)
 8001ca6:	f003 f98d 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001caa:	b9d8      	cbnz	r0, 8001ce4 <MX_TIM2_Init+0xa4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cac:	2360      	movs	r3, #96	; 0x60
 8001cae:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 7;
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb8:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cba:	2204      	movs	r2, #4
 8001cbc:	4669      	mov	r1, sp
 8001cbe:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <MX_TIM2_Init+0xb0>)
 8001cc0:	f002 fff8 	bl	8004cb4 <HAL_TIM_PWM_ConfigChannel>
 8001cc4:	b988      	cbnz	r0, 8001cea <MX_TIM2_Init+0xaa>
  HAL_TIM_MspPostInit(&htim2);
 8001cc6:	480a      	ldr	r0, [pc, #40]	; (8001cf0 <MX_TIM2_Init+0xb0>)
 8001cc8:	f7ff ff92 	bl	8001bf0 <HAL_TIM_MspPostInit>
}
 8001ccc:	b00f      	add	sp, #60	; 0x3c
 8001cce:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001cd2:	f7ff fd67 	bl	80017a4 <Error_Handler>
 8001cd6:	e7d3      	b.n	8001c80 <MX_TIM2_Init+0x40>
    Error_Handler();
 8001cd8:	f7ff fd64 	bl	80017a4 <Error_Handler>
 8001cdc:	e7d9      	b.n	8001c92 <MX_TIM2_Init+0x52>
    Error_Handler();
 8001cde:	f7ff fd61 	bl	80017a4 <Error_Handler>
 8001ce2:	e7da      	b.n	8001c9a <MX_TIM2_Init+0x5a>
    Error_Handler();
 8001ce4:	f7ff fd5e 	bl	80017a4 <Error_Handler>
 8001ce8:	e7e0      	b.n	8001cac <MX_TIM2_Init+0x6c>
    Error_Handler();
 8001cea:	f7ff fd5b 	bl	80017a4 <Error_Handler>
 8001cee:	e7ea      	b.n	8001cc6 <MX_TIM2_Init+0x86>
 8001cf0:	20004420 	.word	0x20004420

08001cf4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cf4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001cf6:	4818      	ldr	r0, [pc, #96]	; (8001d58 <MX_USART1_UART_Init+0x64>)
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_USART1_UART_Init+0x68>)
 8001cfa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001cfc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d00:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	2300      	movs	r3, #0
 8001d04:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d06:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d08:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001d10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d14:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d16:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d18:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d1a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d1c:	f004 fac3 	bl	80062a6 <HAL_UART_Init>
 8001d20:	b970      	cbnz	r0, 8001d40 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d22:	2100      	movs	r1, #0
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <MX_USART1_UART_Init+0x64>)
 8001d26:	f004 fb4a 	bl	80063be <HAL_UARTEx_SetTxFifoThreshold>
 8001d2a:	b960      	cbnz	r0, 8001d46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	480a      	ldr	r0, [pc, #40]	; (8001d58 <MX_USART1_UART_Init+0x64>)
 8001d30:	f004 fb6a 	bl	8006408 <HAL_UARTEx_SetRxFifoThreshold>
 8001d34:	b950      	cbnz	r0, 8001d4c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d36:	4808      	ldr	r0, [pc, #32]	; (8001d58 <MX_USART1_UART_Init+0x64>)
 8001d38:	f004 fb22 	bl	8006380 <HAL_UARTEx_DisableFifoMode>
 8001d3c:	b948      	cbnz	r0, 8001d52 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
  }

}
 8001d3e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d40:	f7ff fd30 	bl	80017a4 <Error_Handler>
 8001d44:	e7ed      	b.n	8001d22 <MX_USART1_UART_Init+0x2e>
    Error_Handler();
 8001d46:	f7ff fd2d 	bl	80017a4 <Error_Handler>
 8001d4a:	e7ef      	b.n	8001d2c <MX_USART1_UART_Init+0x38>
    Error_Handler();
 8001d4c:	f7ff fd2a 	bl	80017a4 <Error_Handler>
 8001d50:	e7f1      	b.n	8001d36 <MX_USART1_UART_Init+0x42>
    Error_Handler();
 8001d52:	f7ff fd27 	bl	80017a4 <Error_Handler>
}
 8001d56:	e7f2      	b.n	8001d3e <MX_USART1_UART_Init+0x4a>
 8001d58:	20004460 	.word	0x20004460
 8001d5c:	40013800 	.word	0x40013800

08001d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d60:	b500      	push	{lr}
 8001d62:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	2300      	movs	r3, #0
 8001d66:	9303      	str	r3, [sp, #12]
 8001d68:	9304      	str	r3, [sp, #16]
 8001d6a:	9305      	str	r3, [sp, #20]
 8001d6c:	9306      	str	r3, [sp, #24]
 8001d6e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8001d70:	6802      	ldr	r2, [r0, #0]
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_UART_MspInit+0x5c>)
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d002      	beq.n	8001d7e <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d78:	b009      	add	sp, #36	; 0x24
 8001d7a:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d88:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d8c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d90:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001d92:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d96:	f042 0202 	orr.w	r2, r2, #2
 8001d9a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001da4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da6:	23c0      	movs	r3, #192	; 0xc0
 8001da8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dae:	2307      	movs	r3, #7
 8001db0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db2:	a903      	add	r1, sp, #12
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <HAL_UART_MspInit+0x60>)
 8001db6:	f000 ffbf 	bl	8002d38 <HAL_GPIO_Init>
}
 8001dba:	e7dd      	b.n	8001d78 <HAL_UART_MspInit+0x18>
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	48000400 	.word	0x48000400

08001dc4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001dc4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc8:	3304      	adds	r3, #4

08001dca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dcc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001dce:	d3f9      	bcc.n	8001dc4 <CopyDataInit>
  bx lr
 8001dd0:	4770      	bx	lr

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001dd2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001dd4:	3004      	adds	r0, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001dd6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>
  bx lr
 8001dda:	4770      	bx	lr

08001ddc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ddc:	480c      	ldr	r0, [pc, #48]	; (8001e10 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001dde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <LoopForever+0x8>)
 8001de2:	490d      	ldr	r1, [pc, #52]	; (8001e18 <LoopForever+0xc>)
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <LoopForever+0x10>)
 8001de6:	2300      	movs	r3, #0
 8001de8:	f7ff ffef 	bl	8001dca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001dec:	480c      	ldr	r0, [pc, #48]	; (8001e20 <LoopForever+0x14>)
 8001dee:	490d      	ldr	r1, [pc, #52]	; (8001e24 <LoopForever+0x18>)
 8001df0:	2300      	movs	r3, #0
 8001df2:	f7ff fff0 	bl	8001dd6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001df6:	480c      	ldr	r0, [pc, #48]	; (8001e28 <LoopForever+0x1c>)
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <LoopForever+0x20>)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f7ff ffeb 	bl	8001dd6 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e00:	f7ff fe4e 	bl	8001aa0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001e04:	f008 ffb0 	bl	800ad68 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001e08:	f7ff fca6 	bl	8001758 <main>

08001e0c <LoopForever>:

LoopForever:
  b LoopForever
 8001e0c:	e7fe      	b.n	8001e0c <LoopForever>
 8001e0e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001e10:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001e14:	20000004 	.word	0x20000004
 8001e18:	20000068 	.word	0x20000068
 8001e1c:	0800b1bc 	.word	0x0800b1bc
  INIT_BSS _sbss, _ebss
 8001e20:	20000118 	.word	0x20000118
 8001e24:	200045f8 	.word	0x200045f8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001e28:	200300c4 	.word	0x200300c4
 8001e2c:	20030b5a 	.word	0x20030b5a

08001e30 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC1_IRQHandler>
	...

08001e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b510      	push	{r4, lr}
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_Init+0x28>)
 8001e38:	6813      	ldr	r3, [r2, #0]
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f000 fd33 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fdcc 	bl	80019e4 <HAL_InitTick>
 8001e4c:	b110      	cbz	r0, 8001e54 <HAL_Init+0x20>
  {
    status = HAL_ERROR;
 8001e4e:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8001e50:	4620      	mov	r0, r4
 8001e52:	bd10      	pop	{r4, pc}
 8001e54:	4604      	mov	r4, r0
    HAL_MspInit();
 8001e56:	f7ff fda5 	bl	80019a4 <HAL_MspInit>
 8001e5a:	e7f9      	b.n	8001e50 <HAL_Init+0x1c>
 8001e5c:	58004000 	.word	0x58004000

08001e60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001e60:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <HAL_IncTick+0x10>)
 8001e62:	6813      	ldr	r3, [r2, #0]
 8001e64:	4903      	ldr	r1, [pc, #12]	; (8001e74 <HAL_IncTick+0x14>)
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	440b      	add	r3, r1
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	200044ec 	.word	0x200044ec
 8001e74:	20000014 	.word	0x20000014

08001e78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e78:	4b01      	ldr	r3, [pc, #4]	; (8001e80 <HAL_GetTick+0x8>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200044ec 	.word	0x200044ec

08001e84 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8001e84:	4b01      	ldr	r3, [pc, #4]	; (8001e8c <HAL_GetTickPrio+0x8>)
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000018 	.word	0x20000018

08001e90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e90:	b530      	push	{r4, r5, lr}
 8001e92:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	f000 80de 	beq.w	800205a <HAL_ADC_Init+0x1ca>
 8001e9e:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ea0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001ea2:	b303      	cbz	r3, 8001ee6 <HAL_ADC_Init+0x56>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ea4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001eac:	d005      	beq.n	8001eba <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8001eb4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001eb8:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eba:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ebc:	6893      	ldr	r3, [r2, #8]
 8001ebe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001ec2:	d11d      	bne.n	8001f00 <HAL_ADC_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8001ec4:	6893      	ldr	r3, [r2, #8]
 8001ec6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001eca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001ed4:	4b62      	ldr	r3, [pc, #392]	; (8002060 <HAL_ADC_Init+0x1d0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	099b      	lsrs	r3, r3, #6
 8001eda:	4a62      	ldr	r2, [pc, #392]	; (8002064 <HAL_ADC_Init+0x1d4>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	099b      	lsrs	r3, r3, #6
 8001ee2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001ee4:	e009      	b.n	8001efa <HAL_ADC_Init+0x6a>
    HAL_ADC_MspInit(hadc);
 8001ee6:	f7fe fb19 	bl	800051c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001eea:	2300      	movs	r3, #0
 8001eec:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8001eee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001ef2:	e7d7      	b.n	8001ea4 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8001ef4:	9b01      	ldr	r3, [sp, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001efa:	9b01      	ldr	r3, [sp, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f9      	bne.n	8001ef4 <HAL_ADC_Init+0x64>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f00:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001f08:	d178      	bne.n	8001ffc <HAL_ADC_Init+0x16c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f0c:	f042 0210 	orr.w	r2, r2, #16
 8001f10:	6562      	str	r2, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f12:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	65a2      	str	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f1a:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	f012 0f04 	tst.w	r2, #4
 8001f22:	d06d      	beq.n	8002000 <HAL_ADC_Init+0x170>
 8001f24:	2101      	movs	r1, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f26:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f28:	f012 0f10 	tst.w	r2, #16
 8001f2c:	f040 808e 	bne.w	800204c <HAL_ADC_Init+0x1bc>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f30:	2900      	cmp	r1, #0
 8001f32:	f040 808b 	bne.w	800204c <HAL_ADC_Init+0x1bc>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f36:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f38:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8001f3c:	f042 0202 	orr.w	r2, r2, #2
 8001f40:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f013 0f01 	tst.w	r3, #1
 8001f48:	d10b      	bne.n	8001f62 <HAL_ADC_Init+0xd2>
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_ADC_Init+0x1d8>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f013 0f01 	tst.w	r3, #1
 8001f52:	d106      	bne.n	8001f62 <HAL_ADC_Init+0xd2>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f54:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f56:	4945      	ldr	r1, [pc, #276]	; (800206c <HAL_ADC_Init+0x1dc>)
 8001f58:	688a      	ldr	r2, [r1, #8]
 8001f5a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f62:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8001f64:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f66:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8001f6a:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8001f6c:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8001f6e:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8001f70:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f72:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f7a:	2a01      	cmp	r2, #1
 8001f7c:	d042      	beq.n	8002004 <HAL_ADC_Init+0x174>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f80:	b122      	cbz	r2, 8001f8c <HAL_ADC_Init+0xfc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f82:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f88:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f8a:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f8c:	6821      	ldr	r1, [r4, #0]
 8001f8e:	68cd      	ldr	r5, [r1, #12]
 8001f90:	4a37      	ldr	r2, [pc, #220]	; (8002070 <HAL_ADC_Init+0x1e0>)
 8001f92:	402a      	ands	r2, r5
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f98:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	f012 0f04 	tst.w	r2, #4
 8001fa0:	d035      	beq.n	800200e <HAL_ADC_Init+0x17e>
 8001fa2:	2101      	movs	r1, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	f012 0f08 	tst.w	r2, #8
 8001faa:	d032      	beq.n	8002012 <HAL_ADC_Init+0x182>
 8001fac:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fae:	b9b1      	cbnz	r1, 8001fde <HAL_ADC_Init+0x14e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fb0:	b9aa      	cbnz	r2, 8001fde <HAL_ADC_Init+0x14e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fb2:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fb4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8001fb8:	0052      	lsls	r2, r2, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fba:	ea42 3181 	orr.w	r1, r2, r1, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fc4:	f022 0202 	bic.w	r2, r2, #2
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fcc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d020      	beq.n	8002016 <HAL_ADC_Init+0x186>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	6913      	ldr	r3, [r2, #16]
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fde:	6923      	ldr	r3, [r4, #16]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d02a      	beq.n	800203a <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fe4:	6822      	ldr	r2, [r4, #0]
 8001fe6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001fe8:	f023 030f 	bic.w	r3, r3, #15
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ff0:	f023 0303 	bic.w	r3, r3, #3
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6563      	str	r3, [r4, #84]	; 0x54
 8001ffa:	e02c      	b.n	8002056 <HAL_ADC_Init+0x1c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	e78d      	b.n	8001f1c <HAL_ADC_Init+0x8c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002000:	2100      	movs	r1, #0
 8002002:	e790      	b.n	8001f26 <HAL_ADC_Init+0x96>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002004:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002006:	3a01      	subs	r2, #1
 8002008:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800200c:	e7b7      	b.n	8001f7e <HAL_ADC_Init+0xee>
 800200e:	2100      	movs	r1, #0
 8002010:	e7c8      	b.n	8001fa4 <HAL_ADC_Init+0x114>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002012:	2200      	movs	r2, #0
 8002014:	e7cb      	b.n	8001fae <HAL_ADC_Init+0x11e>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002016:	6821      	ldr	r1, [r4, #0]
 8002018:	690b      	ldr	r3, [r1, #16]
 800201a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800201e:	f023 0304 	bic.w	r3, r3, #4
 8002022:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002024:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002026:	432a      	orrs	r2, r5
 8002028:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800202a:	432a      	orrs	r2, r5
 800202c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800202e:	432a      	orrs	r2, r5
 8002030:	4313      	orrs	r3, r2
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	610b      	str	r3, [r1, #16]
 8002038:	e7d1      	b.n	8001fde <HAL_ADC_Init+0x14e>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800203a:	6821      	ldr	r1, [r4, #0]
 800203c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800203e:	f023 030f 	bic.w	r3, r3, #15
 8002042:	69e2      	ldr	r2, [r4, #28]
 8002044:	3a01      	subs	r2, #1
 8002046:	4313      	orrs	r3, r2
 8002048:	630b      	str	r3, [r1, #48]	; 0x30
 800204a:	e7d0      	b.n	8001fee <HAL_ADC_Init+0x15e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800204e:	f043 0310 	orr.w	r3, r3, #16
 8002052:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002054:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002056:	b003      	add	sp, #12
 8002058:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800205a:	2001      	movs	r0, #1
 800205c:	e7fb      	b.n	8002056 <HAL_ADC_Init+0x1c6>
 800205e:	bf00      	nop
 8002060:	20000010 	.word	0x20000010
 8002064:	053e2d63 	.word	0x053e2d63
 8002068:	50040000 	.word	0x50040000
 800206c:	50040300 	.word	0x50040300
 8002070:	fff0c007 	.word	0xfff0c007

08002074 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002074:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002076:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002078:	f7fe fc84 	bl	8000984 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800207c:	bd08      	pop	{r3, pc}

0800207e <ADC_DMAConvCplt>:
{
 800207e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002080:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002082:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002084:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002088:	d131      	bne.n	80020ee <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800208a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800208c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002090:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	6811      	ldr	r1, [r2, #0]
 8002096:	f011 0f08 	tst.w	r1, #8
 800209a:	d014      	beq.n	80020c6 <ADC_DMAConvCplt+0x48>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800209c:	68d1      	ldr	r1, [r2, #12]
 800209e:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 80020a2:	d120      	bne.n	80020e6 <ADC_DMAConvCplt+0x68>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80020a4:	68d2      	ldr	r2, [r2, #12]
 80020a6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80020aa:	d11c      	bne.n	80020e6 <ADC_DMAConvCplt+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020b6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80020ba:	d114      	bne.n	80020e6 <ADC_DMAConvCplt+0x68>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
 80020c4:	e00f      	b.n	80020e6 <ADC_DMAConvCplt+0x68>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80020c6:	68d2      	ldr	r2, [r2, #12]
 80020c8:	f012 0f02 	tst.w	r2, #2
 80020cc:	d10b      	bne.n	80020e6 <ADC_DMAConvCplt+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020d8:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80020dc:	d103      	bne.n	80020e6 <ADC_DMAConvCplt+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020e0:	f042 0201 	orr.w	r2, r2, #1
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fc3c 	bl	8000964 <HAL_ADC_ConvCpltCallback>
}
 80020ec:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020f0:	f012 0f10 	tst.w	r2, #16
 80020f4:	d103      	bne.n	80020fe <ADC_DMAConvCplt+0x80>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fa:	4798      	blx	r3
}
 80020fc:	e7f6      	b.n	80020ec <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fc28 	bl	8000954 <HAL_ADC_ErrorCallback>
 8002104:	e7f2      	b.n	80020ec <ADC_DMAConvCplt+0x6e>

08002106 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002106:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002108:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800210a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800210c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002110:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002112:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800211a:	f7fe fc1b 	bl	8000954 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800211e:	bd08      	pop	{r3, pc}

08002120 <HAL_ADC_ConfigChannel>:
{
 8002120:	b4f0      	push	{r4, r5, r6, r7}
 8002122:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8002124:	2200      	movs	r2, #0
 8002126:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002128:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 800212c:	2a01      	cmp	r2, #1
 800212e:	f000 8204 	beq.w	800253a <HAL_ADC_ConfigChannel+0x41a>
 8002132:	4603      	mov	r3, r0
 8002134:	2201      	movs	r2, #1
 8002136:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800213a:	6806      	ldr	r6, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800213c:	68b0      	ldr	r0, [r6, #8]
 800213e:	f010 0f04 	tst.w	r0, #4
 8002142:	d00a      	beq.n	800215a <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002146:	f042 0220 	orr.w	r2, r2, #32
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800214c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8002154:	b002      	add	sp, #8
 8002156:	bcf0      	pop	{r4, r5, r6, r7}
 8002158:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800215a:	684d      	ldr	r5, [r1, #4]
 800215c:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800215e:	3630      	adds	r6, #48	; 0x30
 8002160:	0a2a      	lsrs	r2, r5, #8
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8002168:	58b0      	ldr	r0, [r6, r2]
 800216a:	f005 051f 	and.w	r5, r5, #31
 800216e:	271f      	movs	r7, #31
 8002170:	40af      	lsls	r7, r5
 8002172:	ea20 0007 	bic.w	r0, r0, r7
 8002176:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800217a:	40ac      	lsls	r4, r5
 800217c:	4320      	orrs	r0, r4
 800217e:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002180:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002182:	6890      	ldr	r0, [r2, #8]
 8002184:	f010 0f04 	tst.w	r0, #4
 8002188:	d06a      	beq.n	8002260 <HAL_ADC_ConfigChannel+0x140>
 800218a:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800218c:	6894      	ldr	r4, [r2, #8]
 800218e:	f014 0f08 	tst.w	r4, #8
 8002192:	d067      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x144>
 8002194:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002196:	bb50      	cbnz	r0, 80021ee <HAL_ADC_ConfigChannel+0xce>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002198:	bb4c      	cbnz	r4, 80021ee <HAL_ADC_ConfigChannel+0xce>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800219a:	680e      	ldr	r6, [r1, #0]
 800219c:	688d      	ldr	r5, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800219e:	3214      	adds	r2, #20
 80021a0:	0e70      	lsrs	r0, r6, #25
 80021a2:	0080      	lsls	r0, r0, #2
 80021a4:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80021a8:	5814      	ldr	r4, [r2, r0]
 80021aa:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80021ae:	2707      	movs	r7, #7
 80021b0:	40b7      	lsls	r7, r6
 80021b2:	ea24 0407 	bic.w	r4, r4, r7
 80021b6:	40b5      	lsls	r5, r6
 80021b8:	432c      	orrs	r4, r5
 80021ba:	5014      	str	r4, [r2, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021bc:	694c      	ldr	r4, [r1, #20]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	68c2      	ldr	r2, [r0, #12]
 80021c2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80021c6:	0052      	lsls	r2, r2, #1
 80021c8:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021cc:	690d      	ldr	r5, [r1, #16]
 80021ce:	2d04      	cmp	r5, #4
 80021d0:	d04a      	beq.n	8002268 <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021d2:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021d4:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80021d6:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 80021da:	4cb6      	ldr	r4, [pc, #728]	; (80024b4 <HAL_ADC_ConfigChannel+0x394>)
 80021dc:	403c      	ands	r4, r7
 80021de:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80021e2:	4332      	orrs	r2, r6
 80021e4:	4314      	orrs	r4, r2
 80021e6:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80021ea:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ee:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f0:	6882      	ldr	r2, [r0, #8]
 80021f2:	f012 0f01 	tst.w	r2, #1
 80021f6:	f040 819a 	bne.w	800252e <HAL_ADC_ConfigChannel+0x40e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021fa:	680a      	ldr	r2, [r1, #0]
 80021fc:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80021fe:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8002202:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002206:	ea24 0406 	bic.w	r4, r4, r6
 800220a:	f005 0618 	and.w	r6, r5, #24
 800220e:	4daa      	ldr	r5, [pc, #680]	; (80024b8 <HAL_ADC_ConfigChannel+0x398>)
 8002210:	40f5      	lsrs	r5, r6
 8002212:	402a      	ands	r2, r5
 8002214:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002218:	4322      	orrs	r2, r4
 800221a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800221e:	68c8      	ldr	r0, [r1, #12]
 8002220:	4aa6      	ldr	r2, [pc, #664]	; (80024bc <HAL_ADC_ConfigChannel+0x39c>)
 8002222:	4290      	cmp	r0, r2
 8002224:	d07b      	beq.n	800231e <HAL_ADC_ConfigChannel+0x1fe>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002226:	680a      	ldr	r2, [r1, #0]
 8002228:	49a5      	ldr	r1, [pc, #660]	; (80024c0 <HAL_ADC_ConfigChannel+0x3a0>)
 800222a:	420a      	tst	r2, r1
 800222c:	f000 8181 	beq.w	8002532 <HAL_ADC_ConfigChannel+0x412>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002230:	49a4      	ldr	r1, [pc, #656]	; (80024c4 <HAL_ADC_ConfigChannel+0x3a4>)
 8002232:	6889      	ldr	r1, [r1, #8]
 8002234:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002238:	48a3      	ldr	r0, [pc, #652]	; (80024c8 <HAL_ADC_ConfigChannel+0x3a8>)
 800223a:	6880      	ldr	r0, [r0, #8]
 800223c:	f010 0f01 	tst.w	r0, #1
 8002240:	f040 810b 	bne.w	800245a <HAL_ADC_ConfigChannel+0x33a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002244:	48a1      	ldr	r0, [pc, #644]	; (80024cc <HAL_ADC_ConfigChannel+0x3ac>)
 8002246:	4282      	cmp	r2, r0
 8002248:	f000 810d 	beq.w	8002466 <HAL_ADC_ConfigChannel+0x346>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800224c:	48a0      	ldr	r0, [pc, #640]	; (80024d0 <HAL_ADC_ConfigChannel+0x3b0>)
 800224e:	4282      	cmp	r2, r0
 8002250:	f000 8146 	beq.w	80024e0 <HAL_ADC_ConfigChannel+0x3c0>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002254:	489f      	ldr	r0, [pc, #636]	; (80024d4 <HAL_ADC_ConfigChannel+0x3b4>)
 8002256:	4282      	cmp	r2, r0
 8002258:	f000 8156 	beq.w	8002508 <HAL_ADC_ConfigChannel+0x3e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225c:	2000      	movs	r0, #0
 800225e:	e776      	b.n	800214e <HAL_ADC_ConfigChannel+0x2e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002260:	2000      	movs	r0, #0
 8002262:	e793      	b.n	800218c <HAL_ADC_ConfigChannel+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002264:	2400      	movs	r4, #0
 8002266:	e796      	b.n	8002196 <HAL_ADC_ConfigChannel+0x76>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002268:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800226a:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800226c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002270:	680a      	ldr	r2, [r1, #0]
 8002272:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002276:	bb7d      	cbnz	r5, 80022d8 <HAL_ADC_ConfigChannel+0x1b8>
 8002278:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800227c:	4294      	cmp	r4, r2
 800227e:	d030      	beq.n	80022e2 <HAL_ADC_ConfigChannel+0x1c2>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002280:	681c      	ldr	r4, [r3, #0]
 8002282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002284:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002286:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800228a:	680a      	ldr	r2, [r1, #0]
 800228c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002290:	bb65      	cbnz	r5, 80022ec <HAL_ADC_ConfigChannel+0x1cc>
 8002292:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002296:	4290      	cmp	r0, r2
 8002298:	d02d      	beq.n	80022f6 <HAL_ADC_ConfigChannel+0x1d6>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800229a:	681c      	ldr	r4, [r3, #0]
 800229c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800229e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80022a0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80022a4:	680a      	ldr	r2, [r1, #0]
 80022a6:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80022aa:	bb4d      	cbnz	r5, 8002300 <HAL_ADC_ConfigChannel+0x1e0>
 80022ac:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80022b0:	4290      	cmp	r0, r2
 80022b2:	d02a      	beq.n	800230a <HAL_ADC_ConfigChannel+0x1ea>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022b4:	681c      	ldr	r4, [r3, #0]
 80022b6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80022b8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80022ba:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80022be:	680a      	ldr	r2, [r1, #0]
 80022c0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80022c4:	bb35      	cbnz	r5, 8002314 <HAL_ADC_ConfigChannel+0x1f4>
 80022c6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80022ca:	4290      	cmp	r0, r2
 80022cc:	d18f      	bne.n	80021ee <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(*preg,
 80022ce:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80022d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022d4:	66e2      	str	r2, [r4, #108]	; 0x6c
 80022d6:	e78a      	b.n	80021ee <HAL_ADC_ConfigChannel+0xce>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	e7cc      	b.n	800227c <HAL_ADC_ConfigChannel+0x15c>
 80022e2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80022e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022e8:	6602      	str	r2, [r0, #96]	; 0x60
 80022ea:	e7c9      	b.n	8002280 <HAL_ADC_ConfigChannel+0x160>
 80022ec:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022f0:	fab2 f282 	clz	r2, r2
 80022f4:	e7cf      	b.n	8002296 <HAL_ADC_ConfigChannel+0x176>
 80022f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022fc:	6662      	str	r2, [r4, #100]	; 0x64
 80022fe:	e7cc      	b.n	800229a <HAL_ADC_ConfigChannel+0x17a>
 8002300:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	e7d2      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x190>
 800230a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800230c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002310:	66a2      	str	r2, [r4, #104]	; 0x68
 8002312:	e7cf      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x194>
 8002314:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	e7d5      	b.n	80022ca <HAL_ADC_ConfigChannel+0x1aa>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800231e:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002320:	680a      	ldr	r2, [r1, #0]
 8002322:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002326:	bb96      	cbnz	r6, 800238e <HAL_ADC_ConfigChannel+0x26e>
 8002328:	0e90      	lsrs	r0, r2, #26
 800232a:	3001      	adds	r0, #1
 800232c:	f000 001f 	and.w	r0, r0, #31
 8002330:	2809      	cmp	r0, #9
 8002332:	bf8c      	ite	hi
 8002334:	2000      	movhi	r0, #0
 8002336:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002338:	2800      	cmp	r0, #0
 800233a:	d052      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x2c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800233c:	bb9e      	cbnz	r6, 80023a6 <HAL_ADC_ConfigChannel+0x286>
 800233e:	0e94      	lsrs	r4, r2, #26
 8002340:	3401      	adds	r4, #1
 8002342:	06a4      	lsls	r4, r4, #26
 8002344:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002348:	bbb6      	cbnz	r6, 80023b8 <HAL_ADC_ConfigChannel+0x298>
 800234a:	0e90      	lsrs	r0, r2, #26
 800234c:	3001      	adds	r0, #1
 800234e:	f000 071f 	and.w	r7, r0, #31
 8002352:	2001      	movs	r0, #1
 8002354:	40b8      	lsls	r0, r7
 8002356:	4304      	orrs	r4, r0
 8002358:	bbc6      	cbnz	r6, 80023cc <HAL_ADC_ConfigChannel+0x2ac>
 800235a:	0e92      	lsrs	r2, r2, #26
 800235c:	3201      	adds	r2, #1
 800235e:	f002 021f 	and.w	r2, r2, #31
 8002362:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002366:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002368:	4322      	orrs	r2, r4
 800236a:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800236c:	3514      	adds	r5, #20
 800236e:	0e50      	lsrs	r0, r2, #25
 8002370:	0080      	lsls	r0, r0, #2
 8002372:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8002376:	582e      	ldr	r6, [r5, r0]
 8002378:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800237c:	2707      	movs	r7, #7
 800237e:	4097      	lsls	r7, r2
 8002380:	ea26 0607 	bic.w	r6, r6, r7
 8002384:	fa04 f202 	lsl.w	r2, r4, r2
 8002388:	4332      	orrs	r2, r6
 800238a:	502a      	str	r2, [r5, r0]
 800238c:	e74b      	b.n	8002226 <HAL_ADC_ConfigChannel+0x106>
 800238e:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002392:	fab0 f080 	clz	r0, r0
 8002396:	3001      	adds	r0, #1
 8002398:	f000 001f 	and.w	r0, r0, #31
 800239c:	2809      	cmp	r0, #9
 800239e:	bf8c      	ite	hi
 80023a0:	2000      	movhi	r0, #0
 80023a2:	2001      	movls	r0, #1
 80023a4:	e7c8      	b.n	8002338 <HAL_ADC_ConfigChannel+0x218>
 80023a6:	fa92 f4a2 	rbit	r4, r2
 80023aa:	fab4 f484 	clz	r4, r4
 80023ae:	3401      	adds	r4, #1
 80023b0:	06a4      	lsls	r4, r4, #26
 80023b2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80023b6:	e7c7      	b.n	8002348 <HAL_ADC_ConfigChannel+0x228>
 80023b8:	fa92 f0a2 	rbit	r0, r2
 80023bc:	fab0 f080 	clz	r0, r0
 80023c0:	3001      	adds	r0, #1
 80023c2:	f000 071f 	and.w	r7, r0, #31
 80023c6:	2001      	movs	r0, #1
 80023c8:	40b8      	lsls	r0, r7
 80023ca:	e7c4      	b.n	8002356 <HAL_ADC_ConfigChannel+0x236>
 80023cc:	fa92 f2a2 	rbit	r2, r2
 80023d0:	fab2 f282 	clz	r2, r2
 80023d4:	3201      	adds	r2, #1
 80023d6:	f002 021f 	and.w	r2, r2, #31
 80023da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80023de:	0512      	lsls	r2, r2, #20
 80023e0:	e7c2      	b.n	8002368 <HAL_ADC_ConfigChannel+0x248>
 80023e2:	b9ce      	cbnz	r6, 8002418 <HAL_ADC_ConfigChannel+0x2f8>
 80023e4:	0e94      	lsrs	r4, r2, #26
 80023e6:	3401      	adds	r4, #1
 80023e8:	06a4      	lsls	r4, r4, #26
 80023ea:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80023ee:	b9e6      	cbnz	r6, 800242a <HAL_ADC_ConfigChannel+0x30a>
 80023f0:	0e90      	lsrs	r0, r2, #26
 80023f2:	3001      	adds	r0, #1
 80023f4:	f000 071f 	and.w	r7, r0, #31
 80023f8:	2001      	movs	r0, #1
 80023fa:	40b8      	lsls	r0, r7
 80023fc:	4304      	orrs	r4, r0
 80023fe:	b9f6      	cbnz	r6, 800243e <HAL_ADC_ConfigChannel+0x31e>
 8002400:	0e90      	lsrs	r0, r2, #26
 8002402:	3001      	adds	r0, #1
 8002404:	f000 001f 	and.w	r0, r0, #31
 8002408:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800240c:	3a1e      	subs	r2, #30
 800240e:	0512      	lsls	r2, r2, #20
 8002410:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002414:	4322      	orrs	r2, r4
 8002416:	e7a8      	b.n	800236a <HAL_ADC_ConfigChannel+0x24a>
 8002418:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800241c:	fab4 f484 	clz	r4, r4
 8002420:	3401      	adds	r4, #1
 8002422:	06a4      	lsls	r4, r4, #26
 8002424:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002428:	e7e1      	b.n	80023ee <HAL_ADC_ConfigChannel+0x2ce>
 800242a:	fa92 f0a2 	rbit	r0, r2
 800242e:	fab0 f080 	clz	r0, r0
 8002432:	3001      	adds	r0, #1
 8002434:	f000 071f 	and.w	r7, r0, #31
 8002438:	2001      	movs	r0, #1
 800243a:	40b8      	lsls	r0, r7
 800243c:	e7de      	b.n	80023fc <HAL_ADC_ConfigChannel+0x2dc>
 800243e:	fa92 f0a2 	rbit	r0, r2
 8002442:	fab0 f080 	clz	r0, r0
 8002446:	3001      	adds	r0, #1
 8002448:	f000 001f 	and.w	r0, r0, #31
 800244c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002450:	3a1e      	subs	r2, #30
 8002452:	0512      	lsls	r2, r2, #20
 8002454:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002458:	e7dc      	b.n	8002414 <HAL_ADC_ConfigChannel+0x2f4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800245c:	f042 0220 	orr.w	r2, r2, #32
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8002462:	2001      	movs	r0, #1
 8002464:	e673      	b.n	800214e <HAL_ADC_ConfigChannel+0x2e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002466:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 800246a:	f47f aeef 	bne.w	800224c <HAL_ADC_ConfigChannel+0x12c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800246e:	6819      	ldr	r1, [r3, #0]
 8002470:	4a15      	ldr	r2, [pc, #84]	; (80024c8 <HAL_ADC_ConfigChannel+0x3a8>)
 8002472:	4291      	cmp	r1, r2
 8002474:	d001      	beq.n	800247a <HAL_ADC_ConfigChannel+0x35a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002476:	2000      	movs	r0, #0
 8002478:	e669      	b.n	800214e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800247a:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800247e:	4811      	ldr	r0, [pc, #68]	; (80024c4 <HAL_ADC_ConfigChannel+0x3a4>)
 8002480:	6881      	ldr	r1, [r0, #8]
 8002482:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002486:	430a      	orrs	r2, r1
 8002488:	6082      	str	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800248a:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <HAL_ADC_ConfigChannel+0x3b8>)
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	0992      	lsrs	r2, r2, #6
 8002490:	4912      	ldr	r1, [pc, #72]	; (80024dc <HAL_ADC_ConfigChannel+0x3bc>)
 8002492:	fba1 1202 	umull	r1, r2, r1, r2
 8002496:	0992      	lsrs	r2, r2, #6
 8002498:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800249c:	0091      	lsls	r1, r2, #2
 800249e:	9101      	str	r1, [sp, #4]
              while(wait_loop_index != 0UL)
 80024a0:	e002      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x388>
                wait_loop_index--;
 80024a2:	9a01      	ldr	r2, [sp, #4]
 80024a4:	3a01      	subs	r2, #1
 80024a6:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 80024a8:	9a01      	ldr	r2, [sp, #4]
 80024aa:	2a00      	cmp	r2, #0
 80024ac:	d1f9      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x382>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ae:	2000      	movs	r0, #0
 80024b0:	e64d      	b.n	800214e <HAL_ADC_ConfigChannel+0x2e>
 80024b2:	bf00      	nop
 80024b4:	03fff000 	.word	0x03fff000
 80024b8:	0007ffff 	.word	0x0007ffff
 80024bc:	407f0000 	.word	0x407f0000
 80024c0:	80080000 	.word	0x80080000
 80024c4:	50040300 	.word	0x50040300
 80024c8:	50040000 	.word	0x50040000
 80024cc:	c7520000 	.word	0xc7520000
 80024d0:	cb840000 	.word	0xcb840000
 80024d4:	80000001 	.word	0x80000001
 80024d8:	20000010 	.word	0x20000010
 80024dc:	053e2d63 	.word	0x053e2d63
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024e0:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80024e4:	f47f aeb6 	bne.w	8002254 <HAL_ADC_ConfigChannel+0x134>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	4a15      	ldr	r2, [pc, #84]	; (8002540 <HAL_ADC_ConfigChannel+0x420>)
 80024ec:	4291      	cmp	r1, r2
 80024ee:	d001      	beq.n	80024f4 <HAL_ADC_ConfigChannel+0x3d4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f0:	2000      	movs	r0, #0
 80024f2:	e62c      	b.n	800214e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024f4:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 80024f8:	4812      	ldr	r0, [pc, #72]	; (8002544 <HAL_ADC_ConfigChannel+0x424>)
 80024fa:	6881      	ldr	r1, [r0, #8]
 80024fc:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002500:	430a      	orrs	r2, r1
 8002502:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002504:	2000      	movs	r0, #0
 8002506:	e622      	b.n	800214e <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002508:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800250c:	d113      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x416>
            if (ADC_VREFINT_INSTANCE(hadc))
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <HAL_ADC_ConfigChannel+0x420>)
 8002512:	4291      	cmp	r1, r2
 8002514:	d001      	beq.n	800251a <HAL_ADC_ConfigChannel+0x3fa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002516:	2000      	movs	r0, #0
 8002518:	e619      	b.n	800214e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800251a:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
 800251e:	4809      	ldr	r0, [pc, #36]	; (8002544 <HAL_ADC_ConfigChannel+0x424>)
 8002520:	6881      	ldr	r1, [r0, #8]
 8002522:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002526:	430a      	orrs	r2, r1
 8002528:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252a:	2000      	movs	r0, #0
 800252c:	e60f      	b.n	800214e <HAL_ADC_ConfigChannel+0x2e>
 800252e:	2000      	movs	r0, #0
 8002530:	e60d      	b.n	800214e <HAL_ADC_ConfigChannel+0x2e>
 8002532:	2000      	movs	r0, #0
 8002534:	e60b      	b.n	800214e <HAL_ADC_ConfigChannel+0x2e>
 8002536:	2000      	movs	r0, #0
 8002538:	e609      	b.n	800214e <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 800253a:	2002      	movs	r0, #2
 800253c:	e60a      	b.n	8002154 <HAL_ADC_ConfigChannel+0x34>
 800253e:	bf00      	nop
 8002540:	50040000 	.word	0x50040000
 8002544:	50040300 	.word	0x50040300

08002548 <ADC_ConversionStop>:
{
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800254c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	f012 0f04 	tst.w	r2, #4
 8002554:	d052      	beq.n	80025fc <ADC_ConversionStop+0xb4>
 8002556:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	f012 0f08 	tst.w	r2, #8
 800255e:	d04f      	beq.n	8002600 <ADC_ConversionStop+0xb8>
 8002560:	2201      	movs	r2, #1
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002562:	b908      	cbnz	r0, 8002568 <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002564:	2a00      	cmp	r2, #0
 8002566:	d06b      	beq.n	8002640 <ADC_ConversionStop+0xf8>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800256e:	d004      	beq.n	800257a <ADC_ConversionStop+0x32>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002570:	8b20      	ldrh	r0, [r4, #24]
 8002572:	f240 1201 	movw	r2, #257	; 0x101
 8002576:	4290      	cmp	r0, r2
 8002578:	d04e      	beq.n	8002618 <ADC_ConversionStop+0xd0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800257a:	2902      	cmp	r1, #2
 800257c:	d010      	beq.n	80025a0 <ADC_ConversionStop+0x58>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800257e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	f012 0f04 	tst.w	r2, #4
 8002586:	d00b      	beq.n	80025a0 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	f012 0f02 	tst.w	r2, #2
 800258e:	d107      	bne.n	80025a0 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002596:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800259a:	f042 0210 	orr.w	r2, r2, #16
 800259e:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80025a0:	2901      	cmp	r1, #1
 80025a2:	d010      	beq.n	80025c6 <ADC_ConversionStop+0x7e>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80025a4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	f012 0f08 	tst.w	r2, #8
 80025ac:	d00b      	beq.n	80025c6 <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	f012 0f02 	tst.w	r2, #2
 80025b4:	d107      	bne.n	80025c6 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025bc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80025c0:	f042 0220 	orr.w	r2, r2, #32
 80025c4:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 80025c6:	2902      	cmp	r1, #2
 80025c8:	d036      	beq.n	8002638 <ADC_ConversionStop+0xf0>
 80025ca:	2903      	cmp	r1, #3
 80025cc:	d132      	bne.n	8002634 <ADC_ConversionStop+0xec>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80025ce:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 80025d0:	f7ff fc52 	bl	8001e78 <HAL_GetTick>
 80025d4:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	422b      	tst	r3, r5
 80025dc:	d02e      	beq.n	800263c <ADC_ConversionStop+0xf4>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025de:	f7ff fc4b 	bl	8001e78 <HAL_GetTick>
 80025e2:	1b80      	subs	r0, r0, r6
 80025e4:	2805      	cmp	r0, #5
 80025e6:	d9f6      	bls.n	80025d6 <ADC_ConversionStop+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80025f8:	2001      	movs	r0, #1
 80025fa:	e020      	b.n	800263e <ADC_ConversionStop+0xf6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025fc:	2000      	movs	r0, #0
 80025fe:	e7ab      	b.n	8002558 <ADC_ConversionStop+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002600:	2200      	movs	r2, #0
 8002602:	e7ae      	b.n	8002562 <ADC_ConversionStop+0x1a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002604:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002606:	f043 0310 	orr.w	r3, r3, #16
 800260a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002614:	2001      	movs	r0, #1
 8002616:	e012      	b.n	800263e <ADC_ConversionStop+0xf6>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002618:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002620:	d104      	bne.n	800262c <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <ADC_ConversionStop+0xfc>)
 8002624:	428a      	cmp	r2, r1
 8002626:	d8ed      	bhi.n	8002604 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 8002628:	3201      	adds	r2, #1
 800262a:	e7f6      	b.n	800261a <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800262c:	2240      	movs	r2, #64	; 0x40
 800262e:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002630:	2101      	movs	r1, #1
 8002632:	e7a4      	b.n	800257e <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002634:	2504      	movs	r5, #4
        break;
 8002636:	e7cb      	b.n	80025d0 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002638:	2508      	movs	r5, #8
 800263a:	e7c9      	b.n	80025d0 <ADC_ConversionStop+0x88>
  return HAL_OK;
 800263c:	2000      	movs	r0, #0
}
 800263e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002640:	2000      	movs	r0, #0
 8002642:	e7fc      	b.n	800263e <ADC_ConversionStop+0xf6>
 8002644:	a33fffff 	.word	0xa33fffff

08002648 <ADC_Enable>:
{
 8002648:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800264a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	f012 0f01 	tst.w	r2, #1
 8002652:	d13d      	bne.n	80026d0 <ADC_Enable+0x88>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <ADC_Enable+0x8c>)
 8002658:	4211      	tst	r1, r2
 800265a:	d009      	beq.n	8002670 <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800265e:	f043 0310 	orr.w	r3, r3, #16
 8002662:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002664:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 800266c:	2001      	movs	r0, #1
 800266e:	e030      	b.n	80026d2 <ADC_Enable+0x8a>
 8002670:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002678:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002682:	f7ff fbf9 	bl	8001e78 <HAL_GetTick>
 8002686:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002688:	e004      	b.n	8002694 <ADC_Enable+0x4c>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800268a:	f7ff fbf5 	bl	8001e78 <HAL_GetTick>
 800268e:	1b40      	subs	r0, r0, r5
 8002690:	2802      	cmp	r0, #2
 8002692:	d811      	bhi.n	80026b8 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	f012 0f01 	tst.w	r2, #1
 800269c:	d116      	bne.n	80026cc <ADC_Enable+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	f012 0f01 	tst.w	r2, #1
 80026a4:	d1f1      	bne.n	800268a <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026ac:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	e7e8      	b.n	800268a <ADC_Enable+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026ba:	f043 0310 	orr.w	r3, r3, #16
 80026be:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80026c8:	2001      	movs	r0, #1
 80026ca:	e002      	b.n	80026d2 <ADC_Enable+0x8a>
  return HAL_OK;
 80026cc:	2000      	movs	r0, #0
 80026ce:	e000      	b.n	80026d2 <ADC_Enable+0x8a>
 80026d0:	2000      	movs	r0, #0
}
 80026d2:	bd38      	pop	{r3, r4, r5, pc}
 80026d4:	8000003f 	.word	0x8000003f

080026d8 <HAL_ADC_Start_DMA>:
{
 80026d8:	b570      	push	{r4, r5, r6, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026da:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026dc:	68a4      	ldr	r4, [r4, #8]
 80026de:	f014 0f04 	tst.w	r4, #4
 80026e2:	d150      	bne.n	8002786 <HAL_ADC_Start_DMA+0xae>
    __HAL_LOCK(hadc);
 80026e4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d04f      	beq.n	800278c <HAL_ADC_Start_DMA+0xb4>
 80026ec:	4615      	mov	r5, r2
 80026ee:	460e      	mov	r6, r1
 80026f0:	4604      	mov	r4, r0
 80026f2:	2301      	movs	r3, #1
 80026f4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = ADC_Enable(hadc);
 80026f8:	f7ff ffa6 	bl	8002648 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80026fc:	4603      	mov	r3, r0
 80026fe:	2800      	cmp	r0, #0
 8002700:	d13d      	bne.n	800277e <HAL_ADC_Start_DMA+0xa6>
        ADC_STATE_CLR_SET(hadc->State,
 8002702:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002704:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002710:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002712:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002714:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002718:	d02e      	beq.n	8002778 <HAL_ADC_Start_DMA+0xa0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800271a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800271c:	f023 0306 	bic.w	r3, r3, #6
 8002720:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002722:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002724:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <HAL_ADC_Start_DMA+0xb8>)
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002728:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800272a:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <HAL_ADC_Start_DMA+0xbc>)
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800272e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_ADC_Start_DMA+0xc0>)
 8002732:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	221c      	movs	r2, #28
 8002738:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 800273a:	2300      	movs	r3, #0
 800273c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002740:	6822      	ldr	r2, [r4, #0]
 8002742:	6853      	ldr	r3, [r2, #4]
 8002744:	f043 0310 	orr.w	r3, r3, #16
 8002748:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800274a:	6822      	ldr	r2, [r4, #0]
 800274c:	68d3      	ldr	r3, [r2, #12]
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002754:	6821      	ldr	r1, [r4, #0]
 8002756:	462b      	mov	r3, r5
 8002758:	4632      	mov	r2, r6
 800275a:	3140      	adds	r1, #64	; 0x40
 800275c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800275e:	f000 fa05 	bl	8002b6c <HAL_DMA_Start_IT>
 8002762:	4603      	mov	r3, r0
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002764:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002766:	688a      	ldr	r2, [r1, #8]
 8002768:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800276c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002770:	f042 0204 	orr.w	r2, r2, #4
 8002774:	608a      	str	r2, [r1, #8]
 8002776:	e007      	b.n	8002788 <HAL_ADC_Start_DMA+0xb0>
          ADC_CLEAR_ERRORCODE(hadc);
 8002778:	2300      	movs	r3, #0
 800277a:	65a3      	str	r3, [r4, #88]	; 0x58
 800277c:	e7d1      	b.n	8002722 <HAL_ADC_Start_DMA+0x4a>
        __HAL_UNLOCK(hadc);
 800277e:	2200      	movs	r2, #0
 8002780:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8002784:	e000      	b.n	8002788 <HAL_ADC_Start_DMA+0xb0>
    tmp_hal_status = HAL_BUSY;
 8002786:	2302      	movs	r3, #2
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 800278c:	2302      	movs	r3, #2
 800278e:	e7fb      	b.n	8002788 <HAL_ADC_Start_DMA+0xb0>
 8002790:	0800207f 	.word	0x0800207f
 8002794:	08002075 	.word	0x08002075
 8002798:	08002107 	.word	0x08002107

0800279c <ADC_Disable>:
{
 800279c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800279e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	f012 0f02 	tst.w	r2, #2
 80027a6:	d015      	beq.n	80027d4 <ADC_Disable+0x38>
 80027a8:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	f012 0f01 	tst.w	r2, #1
 80027b0:	d037      	beq.n	8002822 <ADC_Disable+0x86>
      && (tmp_adc_is_disable_on_going == 0UL)
 80027b2:	2900      	cmp	r1, #0
 80027b4:	d137      	bne.n	8002826 <ADC_Disable+0x8a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	f002 020d 	and.w	r2, r2, #13
 80027bc:	2a01      	cmp	r2, #1
 80027be:	d00b      	beq.n	80027d8 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80027c2:	f043 0310 	orr.w	r3, r3, #16
 80027c6:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80027d0:	2001      	movs	r0, #1
 80027d2:	e027      	b.n	8002824 <ADC_Disable+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80027d4:	2100      	movs	r1, #0
 80027d6:	e7e8      	b.n	80027aa <ADC_Disable+0xe>
 80027d8:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027e0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80027e4:	f042 0202 	orr.w	r2, r2, #2
 80027e8:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80027ea:	6803      	ldr	r3, [r0, #0]
 80027ec:	2203      	movs	r2, #3
 80027ee:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80027f0:	f7ff fb42 	bl	8001e78 <HAL_GetTick>
 80027f4:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f013 0f01 	tst.w	r3, #1
 80027fe:	d00e      	beq.n	800281e <ADC_Disable+0x82>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002800:	f7ff fb3a 	bl	8001e78 <HAL_GetTick>
 8002804:	1b40      	subs	r0, r0, r5
 8002806:	2802      	cmp	r0, #2
 8002808:	d9f5      	bls.n	80027f6 <ADC_Disable+0x5a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800280c:	f043 0310 	orr.w	r3, r3, #16
 8002810:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002812:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
 800281c:	e002      	b.n	8002824 <ADC_Disable+0x88>
  return HAL_OK;
 800281e:	2000      	movs	r0, #0
 8002820:	e000      	b.n	8002824 <ADC_Disable+0x88>
 8002822:	2000      	movs	r0, #0
}
 8002824:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002826:	2000      	movs	r0, #0
 8002828:	e7fc      	b.n	8002824 <ADC_Disable+0x88>

0800282a <HAL_ADC_Stop_DMA>:
{
 800282a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 800282c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002830:	2b01      	cmp	r3, #1
 8002832:	d039      	beq.n	80028a8 <HAL_ADC_Stop_DMA+0x7e>
 8002834:	4604      	mov	r4, r0
 8002836:	2301      	movs	r3, #1
 8002838:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800283c:	2103      	movs	r1, #3
 800283e:	f7ff fe83 	bl	8002548 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002842:	4605      	mov	r5, r0
 8002844:	b9e8      	cbnz	r0, 8002882 <HAL_ADC_Stop_DMA+0x58>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002846:	6822      	ldr	r2, [r4, #0]
 8002848:	68d3      	ldr	r3, [r2, #12]
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002850:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002852:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d017      	beq.n	800288c <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800285c:	6822      	ldr	r2, [r4, #0]
 800285e:	6853      	ldr	r3, [r2, #4]
 8002860:	f023 0310 	bic.w	r3, r3, #16
 8002864:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8002866:	b9dd      	cbnz	r5, 80028a0 <HAL_ADC_Stop_DMA+0x76>
      tmp_hal_status = ADC_Disable(hadc);
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff ff97 	bl	800279c <ADC_Disable>
 800286e:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 8002870:	b93d      	cbnz	r5, 8002882 <HAL_ADC_Stop_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 8002872:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002874:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002882:	2300      	movs	r3, #0
 8002884:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002888:	4628      	mov	r0, r5
 800288a:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800288c:	f000 f9b8 	bl	8002c00 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8002890:	4605      	mov	r5, r0
 8002892:	2800      	cmp	r0, #0
 8002894:	d0e2      	beq.n	800285c <HAL_ADC_Stop_DMA+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002896:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289c:	6563      	str	r3, [r4, #84]	; 0x54
 800289e:	e7dd      	b.n	800285c <HAL_ADC_Stop_DMA+0x32>
      (void)ADC_Disable(hadc);
 80028a0:	4620      	mov	r0, r4
 80028a2:	f7ff ff7b 	bl	800279c <ADC_Disable>
 80028a6:	e7e3      	b.n	8002870 <HAL_ADC_Stop_DMA+0x46>
  __HAL_LOCK(hadc);
 80028a8:	2502      	movs	r5, #2
 80028aa:	e7ed      	b.n	8002888 <HAL_ADC_Stop_DMA+0x5e>

080028ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ac:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80028ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b8:	0200      	lsls	r0, r0, #8
 80028ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028be:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80028c0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80028c4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80028c8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_NVIC_SetPriority+0x60>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028da:	f1c3 0407 	rsb	r4, r3, #7
 80028de:	2c04      	cmp	r4, #4
 80028e0:	bf28      	it	cs
 80028e2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e4:	1d1d      	adds	r5, r3, #4
 80028e6:	2d06      	cmp	r5, #6
 80028e8:	d918      	bls.n	800291c <HAL_NVIC_SetPriority+0x4c>
 80028ea:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 35ff 	mov.w	r5, #4294967295
 80028f0:	fa05 f404 	lsl.w	r4, r5, r4
 80028f4:	ea21 0104 	bic.w	r1, r1, r4
 80028f8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028fa:	fa05 f303 	lsl.w	r3, r5, r3
 80028fe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002902:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002904:	2800      	cmp	r0, #0
 8002906:	db0b      	blt.n	8002920 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	0109      	lsls	r1, r1, #4
 800290a:	b2c9      	uxtb	r1, r1
 800290c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002910:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002914:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002918:	bc30      	pop	{r4, r5}
 800291a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291c:	2300      	movs	r3, #0
 800291e:	e7e5      	b.n	80028ec <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	f000 000f 	and.w	r0, r0, #15
 8002924:	0109      	lsls	r1, r1, #4
 8002926:	b2c9      	uxtb	r1, r1
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <HAL_NVIC_SetPriority+0x64>)
 800292a:	5419      	strb	r1, [r3, r0]
 800292c:	e7f4      	b.n	8002918 <HAL_NVIC_SetPriority+0x48>
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00
 8002934:	e000ed14 	.word	0xe000ed14

08002938 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002938:	2800      	cmp	r0, #0
 800293a:	db07      	blt.n	800294c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293c:	f000 021f 	and.w	r2, r0, #31
 8002940:	0940      	lsrs	r0, r0, #5
 8002942:	2301      	movs	r3, #1
 8002944:	4093      	lsls	r3, r2
 8002946:	4a02      	ldr	r2, [pc, #8]	; (8002950 <HAL_NVIC_EnableIRQ+0x18>)
 8002948:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000e100 	.word	0xe000e100

08002954 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002954:	2800      	cmp	r0, #0
 8002956:	db0c      	blt.n	8002972 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002958:	f000 021f 	and.w	r2, r0, #31
 800295c:	0940      	lsrs	r0, r0, #5
 800295e:	2301      	movs	r3, #1
 8002960:	4093      	lsls	r3, r2
 8002962:	3020      	adds	r0, #32
 8002964:	4a03      	ldr	r2, [pc, #12]	; (8002974 <HAL_NVIC_DisableIRQ+0x20>)
 8002966:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800296a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800296e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002972:	4770      	bx	lr
 8002974:	e000e100 	.word	0xe000e100

08002978 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8002978:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800297c:	4905      	ldr	r1, [pc, #20]	; (8002994 <HAL_NVIC_SystemReset+0x1c>)
 800297e:	68ca      	ldr	r2, [r1, #12]
 8002980:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <HAL_NVIC_SystemReset+0x20>)
 8002986:	4313      	orrs	r3, r2
 8002988:	60cb      	str	r3, [r1, #12]
 800298a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800298e:	bf00      	nop
 8002990:	e7fd      	b.n	800298e <HAL_NVIC_SystemReset+0x16>
 8002992:	bf00      	nop
 8002994:	e000ed00 	.word	0xe000ed00
 8002998:	05fa0004 	.word	0x05fa0004

0800299c <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800299c:	2800      	cmp	r0, #0
 800299e:	db08      	blt.n	80029b2 <HAL_NVIC_SetPendingIRQ+0x16>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a0:	f000 021f 	and.w	r2, r0, #31
 80029a4:	0940      	lsrs	r0, r0, #5
 80029a6:	2301      	movs	r3, #1
 80029a8:	4093      	lsls	r3, r2
 80029aa:	3040      	adds	r0, #64	; 0x40
 80029ac:	4a01      	ldr	r2, [pc, #4]	; (80029b4 <HAL_NVIC_SetPendingIRQ+0x18>)
 80029ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80029b8:	2800      	cmp	r0, #0
 80029ba:	db08      	blt.n	80029ce <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029bc:	f000 021f 	and.w	r2, r0, #31
 80029c0:	0940      	lsrs	r0, r0, #5
 80029c2:	2301      	movs	r3, #1
 80029c4:	4093      	lsls	r3, r2
 80029c6:	3060      	adds	r0, #96	; 0x60
 80029c8:	4a01      	ldr	r2, [pc, #4]	; (80029d0 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80029ca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100

080029d4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d4:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029d6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80029d8:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80029da:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80029dc:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80029de:	b114      	cbz	r4, 80029e6 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029e0:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80029e2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80029e4:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80029e6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80029e8:	f004 051c 	and.w	r5, r4, #28
 80029ec:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80029ee:	2401      	movs	r4, #1
 80029f0:	40ac      	lsls	r4, r5
 80029f2:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029f4:	6804      	ldr	r4, [r0, #0]
 80029f6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029f8:	6883      	ldr	r3, [r0, #8]
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d005      	beq.n	8002a0a <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80029fe:	6803      	ldr	r3, [r0, #0]
 8002a00:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002a02:	6803      	ldr	r3, [r0, #0]
 8002a04:	60da      	str	r2, [r3, #12]
  }
}
 8002a06:	bc70      	pop	{r4, r5, r6}
 8002a08:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002a0a:	6803      	ldr	r3, [r0, #0]
 8002a0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002a0e:	6803      	ldr	r3, [r0, #0]
 8002a10:	60d9      	str	r1, [r3, #12]
 8002a12:	e7f8      	b.n	8002a06 <DMA_SetConfig+0x32>

08002a14 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002a14:	6803      	ldr	r3, [r0, #0]
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d914      	bls.n	8002a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x32>
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002a1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002a1e:	f022 0103 	bic.w	r1, r2, #3
 8002a22:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8002a24:	440a      	add	r2, r1
 8002a26:	6482      	str	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3b08      	subs	r3, #8
 8002a2c:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	091b      	lsrs	r3, r3, #4
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a34:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002a36:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002a38:	f003 031c 	and.w	r3, r3, #28
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002a44:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002a46:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002a48:	f022 0203 	bic.w	r2, r2, #3
 8002a4c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002a50:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8002a54:	6482      	str	r2, [r0, #72]	; 0x48
 8002a56:	e7e7      	b.n	8002a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x14>
 8002a58:	40020407 	.word	0x40020407
 8002a5c:	4002081c 	.word	0x4002081c
 8002a60:	cccccccd 	.word	0xcccccccd
 8002a64:	40020880 	.word	0x40020880

08002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a68:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a6a:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8002a6c:	441a      	add	r2, r3
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a72:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002a74:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a76:	3b01      	subs	r3, #1
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	1000823f 	.word	0x1000823f
 8002a8c:	40020940 	.word	0x40020940

08002a90 <HAL_DMA_Init>:
  if (hdma == NULL)
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d05c      	beq.n	8002b4e <HAL_DMA_Init+0xbe>
{
 8002a94:	b510      	push	{r4, lr}
 8002a96:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a98:	6802      	ldr	r2, [r0, #0]
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <HAL_DMA_Init+0xc4>)
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d83e      	bhi.n	8002b1e <HAL_DMA_Init+0x8e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002aa0:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <HAL_DMA_Init+0xc8>)
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a2d      	ldr	r2, [pc, #180]	; (8002b5c <HAL_DMA_Init+0xcc>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ab0:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <HAL_DMA_Init+0xd0>)
 8002ab2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8002aba:	6821      	ldr	r1, [r4, #0]
 8002abc:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002abe:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002ac2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8002ac6:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac8:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8002aca:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002acc:	6920      	ldr	r0, [r4, #16]
 8002ace:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad0:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad2:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad4:	69a0      	ldr	r0, [r4, #24]
 8002ad6:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad8:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ada:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002adc:	6a20      	ldr	r0, [r4, #32]
 8002ade:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002ae0:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8002ae2:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7ff ff95 	bl	8002a14 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002aea:	68a3      	ldr	r3, [r4, #8]
 8002aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002af0:	d020      	beq.n	8002b34 <HAL_DMA_Init+0xa4>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002af2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002af4:	7922      	ldrb	r2, [r4, #4]
 8002af6:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002afa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002afc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002afe:	6863      	ldr	r3, [r4, #4]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d919      	bls.n	8002b3a <HAL_DMA_Init+0xaa>
    hdma->DMAmuxRequestGen = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b0a:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b0c:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b0e:	2000      	movs	r0, #0
 8002b10:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8002b18:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002b1c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_DMA_Init+0xd4>)
 8002b20:	4413      	add	r3, r2
 8002b22:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <HAL_DMA_Init+0xcc>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_DMA_Init+0xd8>)
 8002b30:	6403      	str	r3, [r0, #64]	; 0x40
 8002b32:	e7bf      	b.n	8002ab4 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b34:	2300      	movs	r3, #0
 8002b36:	6063      	str	r3, [r4, #4]
 8002b38:	e7db      	b.n	8002af2 <HAL_DMA_Init+0x62>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7ff ff94 	bl	8002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b48:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	e7df      	b.n	8002b0e <HAL_DMA_Init+0x7e>
    return HAL_ERROR;
 8002b4e:	2001      	movs	r0, #1
}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40020407 	.word	0x40020407
 8002b58:	bffdfff8 	.word	0xbffdfff8
 8002b5c:	cccccccd 	.word	0xcccccccd
 8002b60:	40020000 	.word	0x40020000
 8002b64:	bffdfbf8 	.word	0xbffdfbf8
 8002b68:	40020400 	.word	0x40020400

08002b6c <HAL_DMA_Start_IT>:
{
 8002b6c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8002b6e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8002b72:	2c01      	cmp	r4, #1
 8002b74:	d042      	beq.n	8002bfc <HAL_DMA_Start_IT+0x90>
 8002b76:	2401      	movs	r4, #1
 8002b78:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8002b7c:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8002b80:	b2e4      	uxtb	r4, r4
 8002b82:	2c01      	cmp	r4, #1
 8002b84:	d004      	beq.n	8002b90 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8002b86:	2300      	movs	r3, #0
 8002b88:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8002b8c:	2002      	movs	r0, #2
}
 8002b8e:	bd38      	pop	{r3, r4, r5, pc}
 8002b90:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b92:	2002      	movs	r0, #2
 8002b94:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b98:	2000      	movs	r0, #0
 8002b9a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002b9c:	6825      	ldr	r5, [r4, #0]
 8002b9e:	6828      	ldr	r0, [r5, #0]
 8002ba0:	f020 0001 	bic.w	r0, r0, #1
 8002ba4:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f7ff ff14 	bl	80029d4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002bac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bae:	b1d3      	cbz	r3, 8002be6 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bb0:	6822      	ldr	r2, [r4, #0]
 8002bb2:	6813      	ldr	r3, [r2, #0]
 8002bb4:	f043 030e 	orr.w	r3, r3, #14
 8002bb8:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002bc2:	d003      	beq.n	8002bcc <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bca:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002bcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bce:	b11b      	cbz	r3, 8002bd8 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002bd8:	6822      	ldr	r2, [r4, #0]
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be2:	2000      	movs	r0, #0
 8002be4:	e7d3      	b.n	8002b8e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002be6:	6822      	ldr	r2, [r4, #0]
 8002be8:	6813      	ldr	r3, [r2, #0]
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bf0:	6822      	ldr	r2, [r4, #0]
 8002bf2:	6813      	ldr	r3, [r2, #0]
 8002bf4:	f043 030a 	orr.w	r3, r3, #10
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e7de      	b.n	8002bba <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	e7c6      	b.n	8002b8e <HAL_DMA_Start_IT+0x22>

08002c00 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8002c00:	4603      	mov	r3, r0
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d034      	beq.n	8002c70 <HAL_DMA_Abort+0x70>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c06:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	2a02      	cmp	r2, #2
 8002c0e:	d006      	beq.n	8002c1e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c10:	2204      	movs	r2, #4
 8002c12:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002c14:	2200      	movs	r2, #0
 8002c16:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1e:	6801      	ldr	r1, [r0, #0]
 8002c20:	680a      	ldr	r2, [r1, #0]
 8002c22:	f022 020e 	bic.w	r2, r2, #14
 8002c26:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c28:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002c2a:	680a      	ldr	r2, [r1, #0]
 8002c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c30:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002c32:	6801      	ldr	r1, [r0, #0]
 8002c34:	680a      	ldr	r2, [r1, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c3e:	f002 011c 	and.w	r1, r2, #28
 8002c42:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002c44:	2201      	movs	r2, #1
 8002c46:	408a      	lsls	r2, r1
 8002c48:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c4e:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c52:	b132      	cbz	r2, 8002c62 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c54:	6811      	ldr	r1, [r2, #0]
 8002c56:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002c5a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c5e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002c60:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8002c6e:	4770      	bx	lr
    return HAL_ERROR;
 8002c70:	2001      	movs	r0, #1
}
 8002c72:	4770      	bx	lr

08002c74 <HAL_DMA_IRQHandler>:
{
 8002c74:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002c78:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002c7a:	6804      	ldr	r4, [r0, #0]
 8002c7c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002c80:	f003 031c 	and.w	r3, r3, #28
 8002c84:	2204      	movs	r2, #4
 8002c86:	409a      	lsls	r2, r3
 8002c88:	420a      	tst	r2, r1
 8002c8a:	d015      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x44>
 8002c8c:	f015 0f04 	tst.w	r5, #4
 8002c90:	d012      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	f013 0f20 	tst.w	r3, #32
 8002c98:	d103      	bne.n	8002ca2 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ca2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002ca4:	f003 021c 	and.w	r2, r3, #28
 8002ca8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002caa:	2304      	movs	r3, #4
 8002cac:	4093      	lsls	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8002cb0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002cb2:	b103      	cbz	r3, 8002cb6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8002cb4:	4798      	blx	r3
}
 8002cb6:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002cb8:	2202      	movs	r2, #2
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	420a      	tst	r2, r1
 8002cbe:	d01c      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x86>
 8002cc0:	f015 0f02 	tst.w	r5, #2
 8002cc4:	d019      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	f013 0f20 	tst.w	r3, #32
 8002ccc:	d106      	bne.n	8002cdc <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	f023 030a 	bic.w	r3, r3, #10
 8002cd4:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cdc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002cde:	f003 021c 	and.w	r2, r3, #28
 8002ce2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	4093      	lsls	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002cea:	2300      	movs	r3, #0
 8002cec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8002cf0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0df      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8002cf6:	4798      	blx	r3
 8002cf8:	e7dd      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	420b      	tst	r3, r1
 8002d02:	d0d8      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x42>
 8002d04:	f015 0f08 	tst.w	r5, #8
 8002d08:	d0d5      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	f023 030e 	bic.w	r3, r3, #14
 8002d10:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002d14:	f003 031c 	and.w	r3, r3, #28
 8002d18:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d22:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002d24:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002d2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0c0      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8002d34:	4798      	blx	r3
  return;
 8002d36:	e7be      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x42>

08002d38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 8002d3a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d3c:	e03a      	b.n	8002db4 <HAL_GPIO_Init+0x7c>
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d3e:	2404      	movs	r4, #4
 8002d40:	e000      	b.n	8002d44 <HAL_GPIO_Init+0xc>
 8002d42:	2400      	movs	r4, #0
 8002d44:	40b4      	lsls	r4, r6
 8002d46:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d48:	3502      	adds	r5, #2
 8002d4a:	4e58      	ldr	r6, [pc, #352]	; (8002eac <HAL_GPIO_Init+0x174>)
 8002d4c:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d50:	4c57      	ldr	r4, [pc, #348]	; (8002eb0 <HAL_GPIO_Init+0x178>)
 8002d52:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8002d56:	43d4      	mvns	r4, r2
 8002d58:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d5c:	684f      	ldr	r7, [r1, #4]
 8002d5e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002d62:	d001      	beq.n	8002d68 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002d64:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8002d68:	4d51      	ldr	r5, [pc, #324]	; (8002eb0 <HAL_GPIO_Init+0x178>)
 8002d6a:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80

        temp = EXTI->EMR1;
 8002d6e:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8002d72:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d76:	684f      	ldr	r7, [r1, #4]
 8002d78:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002d7c:	d001      	beq.n	8002d82 <HAL_GPIO_Init+0x4a>
        {
          temp |= iocurrent;
 8002d7e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002d82:	4d4b      	ldr	r5, [pc, #300]	; (8002eb0 <HAL_GPIO_Init+0x178>)
 8002d84:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d88:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002d8a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d8e:	684f      	ldr	r7, [r1, #4]
 8002d90:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002d94:	d001      	beq.n	8002d9a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002d96:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002d9a:	4d45      	ldr	r5, [pc, #276]	; (8002eb0 <HAL_GPIO_Init+0x178>)
 8002d9c:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8002d9e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002da0:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da2:	684e      	ldr	r6, [r1, #4]
 8002da4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002da8:	d001      	beq.n	8002dae <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002daa:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002dae:	4a40      	ldr	r2, [pc, #256]	; (8002eb0 <HAL_GPIO_Init+0x178>)
 8002db0:	6054      	str	r4, [r2, #4]
      }
    }
    
    position++;
 8002db2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db4:	680a      	ldr	r2, [r1, #0]
 8002db6:	fa32 f403 	lsrs.w	r4, r2, r3
 8002dba:	d074      	beq.n	8002ea6 <HAL_GPIO_Init+0x16e>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dbc:	2401      	movs	r4, #1
 8002dbe:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8002dc0:	4022      	ands	r2, r4
 8002dc2:	d0f6      	beq.n	8002db2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc4:	684d      	ldr	r5, [r1, #4]
 8002dc6:	2d02      	cmp	r5, #2
 8002dc8:	d001      	beq.n	8002dce <HAL_GPIO_Init+0x96>
 8002dca:	2d12      	cmp	r5, #18
 8002dcc:	d110      	bne.n	8002df0 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3u];
 8002dce:	08de      	lsrs	r6, r3, #3
 8002dd0:	3608      	adds	r6, #8
 8002dd2:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dd6:	f003 0507 	and.w	r5, r3, #7
 8002dda:	00af      	lsls	r7, r5, #2
 8002ddc:	250f      	movs	r5, #15
 8002dde:	40bd      	lsls	r5, r7
 8002de0:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002de4:	690d      	ldr	r5, [r1, #16]
 8002de6:	40bd      	lsls	r5, r7
 8002de8:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002dec:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002df0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002df2:	005f      	lsls	r7, r3, #1
 8002df4:	2503      	movs	r5, #3
 8002df6:	40bd      	lsls	r5, r7
 8002df8:	43ed      	mvns	r5, r5
 8002dfa:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dfe:	684e      	ldr	r6, [r1, #4]
 8002e00:	f006 0603 	and.w	r6, r6, #3
 8002e04:	40be      	lsls	r6, r7
 8002e06:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8002e0a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e0c:	684e      	ldr	r6, [r1, #4]
 8002e0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8002e12:	f1bc 0f01 	cmp.w	ip, #1
 8002e16:	d903      	bls.n	8002e20 <HAL_GPIO_Init+0xe8>
 8002e18:	2e11      	cmp	r6, #17
 8002e1a:	d001      	beq.n	8002e20 <HAL_GPIO_Init+0xe8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e1c:	2e12      	cmp	r6, #18
 8002e1e:	d110      	bne.n	8002e42 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR;
 8002e20:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e22:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e26:	68ce      	ldr	r6, [r1, #12]
 8002e28:	40be      	lsls	r6, r7
 8002e2a:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8002e2e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002e30:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e32:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e36:	684e      	ldr	r6, [r1, #4]
 8002e38:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8002e3c:	409e      	lsls	r6, r3
 8002e3e:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8002e40:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8002e42:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e44:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e46:	688c      	ldr	r4, [r1, #8]
 8002e48:	40bc      	lsls	r4, r7
 8002e4a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002e4c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e4e:	684c      	ldr	r4, [r1, #4]
 8002e50:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002e54:	d0ad      	beq.n	8002db2 <HAL_GPIO_Init+0x7a>
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e56:	089d      	lsrs	r5, r3, #2
 8002e58:	1cae      	adds	r6, r5, #2
 8002e5a:	4c14      	ldr	r4, [pc, #80]	; (8002eac <HAL_GPIO_Init+0x174>)
 8002e5c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e60:	f003 0403 	and.w	r4, r3, #3
 8002e64:	00a6      	lsls	r6, r4, #2
 8002e66:	240f      	movs	r4, #15
 8002e68:	40b4      	lsls	r4, r6
 8002e6a:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e6e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002e72:	f43f af66 	beq.w	8002d42 <HAL_GPIO_Init+0xa>
 8002e76:	4c0f      	ldr	r4, [pc, #60]	; (8002eb4 <HAL_GPIO_Init+0x17c>)
 8002e78:	42a0      	cmp	r0, r4
 8002e7a:	d00e      	beq.n	8002e9a <HAL_GPIO_Init+0x162>
 8002e7c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e80:	42a0      	cmp	r0, r4
 8002e82:	d00c      	beq.n	8002e9e <HAL_GPIO_Init+0x166>
 8002e84:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e88:	42a0      	cmp	r0, r4
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_GPIO_Init+0x16a>
 8002e8c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	f43f af54 	beq.w	8002d3e <HAL_GPIO_Init+0x6>
 8002e96:	2407      	movs	r4, #7
 8002e98:	e754      	b.n	8002d44 <HAL_GPIO_Init+0xc>
 8002e9a:	2401      	movs	r4, #1
 8002e9c:	e752      	b.n	8002d44 <HAL_GPIO_Init+0xc>
 8002e9e:	2402      	movs	r4, #2
 8002ea0:	e750      	b.n	8002d44 <HAL_GPIO_Init+0xc>
 8002ea2:	2403      	movs	r4, #3
 8002ea4:	e74e      	b.n	8002d44 <HAL_GPIO_Init+0xc>
  }
}
 8002ea6:	bcf0      	pop	{r4, r5, r6, r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	58000800 	.word	0x58000800
 8002eb4:	48000400 	.word	0x48000400

08002eb8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002eb8:	6803      	ldr	r3, [r0, #0]
 8002eba:	699a      	ldr	r2, [r3, #24]
 8002ebc:	f012 0f02 	tst.w	r2, #2
 8002ec0:	d001      	beq.n	8002ec6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec6:	6803      	ldr	r3, [r0, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	f012 0f01 	tst.w	r2, #1
 8002ece:	d103      	bne.n	8002ed8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	619a      	str	r2, [r3, #24]
  }
}
 8002ed8:	4770      	bx	lr

08002eda <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002eda:	b470      	push	{r4, r5, r6}
 8002edc:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ede:	6805      	ldr	r5, [r0, #0]
 8002ee0:	6868      	ldr	r0, [r5, #4]
 8002ee2:	0d74      	lsrs	r4, r6, #21
 8002ee4:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002ee8:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002eec:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002ef0:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002ef4:	f044 0403 	orr.w	r4, r4, #3
 8002ef8:	ea20 0004 	bic.w	r0, r0, r4
 8002efc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002f00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002f04:	4319      	orrs	r1, r3
 8002f06:	4331      	orrs	r1, r6
 8002f08:	4301      	orrs	r1, r0
 8002f0a:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002f0c:	bc70      	pop	{r4, r5, r6}
 8002f0e:	4770      	bx	lr

08002f10 <I2C_IsAcknowledgeFailed>:
{
 8002f10:	b570      	push	{r4, r5, r6, lr}
 8002f12:	4604      	mov	r4, r0
 8002f14:	460d      	mov	r5, r1
 8002f16:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f18:	6803      	ldr	r3, [r0, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f013 0f10 	tst.w	r3, #16
 8002f20:	d01c      	beq.n	8002f5c <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	f012 0f20 	tst.w	r2, #32
 8002f2a:	d119      	bne.n	8002f60 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002f2c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002f30:	d0f7      	beq.n	8002f22 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7fe ffa1 	bl	8001e78 <HAL_GetTick>
 8002f36:	1b80      	subs	r0, r0, r6
 8002f38:	42a8      	cmp	r0, r5
 8002f3a:	d801      	bhi.n	8002f40 <I2C_IsAcknowledgeFailed+0x30>
 8002f3c:	2d00      	cmp	r5, #0
 8002f3e:	d1f0      	bne.n	8002f22 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f42:	f043 0320 	orr.w	r3, r3, #32
 8002f46:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	2320      	movs	r3, #32
 8002f4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002f54:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e020      	b.n	8002f9e <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	e01e      	b.n	8002f9e <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f60:	2210      	movs	r2, #16
 8002f62:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	2520      	movs	r5, #32
 8002f68:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7ff ffa4 	bl	8002eb8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002f70:	6822      	ldr	r2, [r4, #0]
 8002f72:	6853      	ldr	r3, [r2, #4]
 8002f74:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002f78:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002f7c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002f98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002f9c:	2001      	movs	r0, #1
}
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}

08002fa0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	460d      	mov	r5, r1
 8002fa6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f013 0f02 	tst.w	r3, #2
 8002fb0:	d11d      	bne.n	8002fee <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb2:	4632      	mov	r2, r6
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f7ff ffaa 	bl	8002f10 <I2C_IsAcknowledgeFailed>
 8002fbc:	b9c8      	cbnz	r0, 8002ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002fc2:	d0f1      	beq.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc4:	f7fe ff58 	bl	8001e78 <HAL_GetTick>
 8002fc8:	1b80      	subs	r0, r0, r6
 8002fca:	42a8      	cmp	r0, r5
 8002fcc:	d801      	bhi.n	8002fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002fce:	2d00      	cmp	r5, #0
 8002fd0:	d1ea      	bne.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fd4:	f043 0320 	orr.w	r3, r3, #32
 8002fd8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002fe6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002fea:	2001      	movs	r0, #1
 8002fec:	e000      	b.n	8002ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002fee:	2000      	movs	r0, #0
}
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	e7fc      	b.n	8002ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002ff6 <I2C_WaitOnFlagUntilTimeout>:
{
 8002ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff8:	4605      	mov	r5, r0
 8002ffa:	460f      	mov	r7, r1
 8002ffc:	4616      	mov	r6, r2
 8002ffe:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003000:	682b      	ldr	r3, [r5, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	ea37 0303 	bics.w	r3, r7, r3
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	42b3      	cmp	r3, r6
 8003010:	d118      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003012:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003016:	d0f3      	beq.n	8003000 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003018:	f7fe ff2e 	bl	8001e78 <HAL_GetTick>
 800301c:	9b06      	ldr	r3, [sp, #24]
 800301e:	1ac0      	subs	r0, r0, r3
 8003020:	42a0      	cmp	r0, r4
 8003022:	d801      	bhi.n	8003028 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003024:	2c00      	cmp	r4, #0
 8003026:	d1eb      	bne.n	8003000 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800302a:	f043 0320 	orr.w	r3, r3, #32
 800302e:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003030:	2320      	movs	r3, #32
 8003032:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003036:	2300      	movs	r3, #0
 8003038:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800303c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003040:	2001      	movs	r0, #1
 8003042:	e000      	b.n	8003046 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8003044:	2000      	movs	r0, #0
}
 8003046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003048 <I2C_RequestMemoryWrite>:
{
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	4604      	mov	r4, r0
 800304e:	4616      	mov	r6, r2
 8003050:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003052:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <I2C_RequestMemoryWrite+0x6c>)
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800305a:	b2ea      	uxtb	r2, r5
 800305c:	f7ff ff3d 	bl	8002eda <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003060:	9a07      	ldr	r2, [sp, #28]
 8003062:	9906      	ldr	r1, [sp, #24]
 8003064:	4620      	mov	r0, r4
 8003066:	f7ff ff9b 	bl	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 800306a:	b9e8      	cbnz	r0, 80030a8 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800306c:	2d01      	cmp	r5, #1
 800306e:	d10e      	bne.n	800308e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	b2f6      	uxtb	r6, r6
 8003074:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003076:	9b07      	ldr	r3, [sp, #28]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	9b06      	ldr	r3, [sp, #24]
 800307c:	2200      	movs	r2, #0
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	4620      	mov	r0, r4
 8003082:	f7ff ffb8 	bl	8002ff6 <I2C_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	b178      	cbz	r0, 80030aa <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e00d      	b.n	80030aa <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	0a32      	lsrs	r2, r6, #8
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003094:	9a07      	ldr	r2, [sp, #28]
 8003096:	9906      	ldr	r1, [sp, #24]
 8003098:	4620      	mov	r0, r4
 800309a:	f7ff ff81 	bl	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 800309e:	b938      	cbnz	r0, 80030b0 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	b2f6      	uxtb	r6, r6
 80030a4:	629e      	str	r6, [r3, #40]	; 0x28
 80030a6:	e7e6      	b.n	8003076 <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	b002      	add	sp, #8
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e7fa      	b.n	80030aa <I2C_RequestMemoryWrite+0x62>
 80030b4:	80002000 	.word	0x80002000

080030b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	4605      	mov	r5, r0
 80030bc:	460c      	mov	r4, r1
 80030be:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f013 0f20 	tst.w	r3, #32
 80030c8:	d11a      	bne.n	8003100 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ca:	4632      	mov	r2, r6
 80030cc:	4621      	mov	r1, r4
 80030ce:	4628      	mov	r0, r5
 80030d0:	f7ff ff1e 	bl	8002f10 <I2C_IsAcknowledgeFailed>
 80030d4:	b9b0      	cbnz	r0, 8003104 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d6:	f7fe fecf 	bl	8001e78 <HAL_GetTick>
 80030da:	1b80      	subs	r0, r0, r6
 80030dc:	42a0      	cmp	r0, r4
 80030de:	d801      	bhi.n	80030e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80030e0:	2c00      	cmp	r4, #0
 80030e2:	d1ed      	bne.n	80030c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80030e6:	f043 0320 	orr.w	r3, r3, #32
 80030ea:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	2320      	movs	r3, #32
 80030ee:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80030f8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80030fc:	2001      	movs	r0, #1
}
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003100:	2000      	movs	r0, #0
 8003102:	e7fc      	b.n	80030fe <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003104:	2001      	movs	r0, #1
 8003106:	e7fa      	b.n	80030fe <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08003108 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003108:	2800      	cmp	r0, #0
 800310a:	d059      	beq.n	80031c0 <HAL_I2C_Init+0xb8>
{
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003110:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003114:	2b00      	cmp	r3, #0
 8003116:	d043      	beq.n	80031a0 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	2324      	movs	r3, #36	; 0x24
 800311a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	6813      	ldr	r3, [r2, #0]
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003128:	6863      	ldr	r3, [r4, #4]
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003130:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003132:	6822      	ldr	r2, [r4, #0]
 8003134:	6893      	ldr	r3, [r2, #8]
 8003136:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800313a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800313c:	68e3      	ldr	r3, [r4, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d033      	beq.n	80031aa <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003142:	68a3      	ldr	r3, [r4, #8]
 8003144:	6822      	ldr	r2, [r4, #0]
 8003146:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800314a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800314c:	68e3      	ldr	r3, [r4, #12]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d031      	beq.n	80031b6 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003152:	6822      	ldr	r2, [r4, #0]
 8003154:	6853      	ldr	r3, [r2, #4]
 8003156:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800315a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	68d3      	ldr	r3, [r2, #12]
 8003164:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003168:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800316a:	6923      	ldr	r3, [r4, #16]
 800316c:	6962      	ldr	r2, [r4, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	69a1      	ldr	r1, [r4, #24]
 8003172:	6822      	ldr	r2, [r4, #0]
 8003174:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003178:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800317a:	69e3      	ldr	r3, [r4, #28]
 800317c:	6a21      	ldr	r1, [r4, #32]
 800317e:	6822      	ldr	r2, [r4, #0]
 8003180:	430b      	orrs	r3, r1
 8003182:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003184:	6822      	ldr	r2, [r4, #0]
 8003186:	6813      	ldr	r3, [r2, #0]
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318e:	2000      	movs	r0, #0
 8003190:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003192:	2320      	movs	r3, #32
 8003194:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003198:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800319a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800319e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80031a0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80031a4:	f7fe f93c 	bl	8001420 <HAL_I2C_MspInit>
 80031a8:	e7b6      	b.n	8003118 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031aa:	68a3      	ldr	r3, [r4, #8]
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b2:	6093      	str	r3, [r2, #8]
 80031b4:	e7ca      	b.n	800314c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	e7c8      	b.n	8003152 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80031c0:	2001      	movs	r0, #1
}
 80031c2:	4770      	bx	lr

080031c4 <HAL_I2C_Mem_Write>:
{
 80031c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ce:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80031d2:	b2ed      	uxtb	r5, r5
 80031d4:	2d20      	cmp	r5, #32
 80031d6:	f040 80ba 	bne.w	800334e <HAL_I2C_Mem_Write+0x18a>
    if ((pData == NULL) || (Size == 0U))
 80031da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80031dc:	b1dc      	cbz	r4, 8003216 <HAL_I2C_Mem_Write+0x52>
 80031de:	b1d7      	cbz	r7, 8003216 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 80031e0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80031e4:	2c01      	cmp	r4, #1
 80031e6:	f000 80b7 	beq.w	8003358 <HAL_I2C_Mem_Write+0x194>
 80031ea:	4698      	mov	r8, r3
 80031ec:	4691      	mov	r9, r2
 80031ee:	460d      	mov	r5, r1
 80031f0:	4604      	mov	r4, r0
 80031f2:	f04f 0a01 	mov.w	sl, #1
 80031f6:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80031fa:	f7fe fe3d 	bl	8001e78 <HAL_GetTick>
 80031fe:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003200:	9000      	str	r0, [sp, #0]
 8003202:	2319      	movs	r3, #25
 8003204:	4652      	mov	r2, sl
 8003206:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff fef3 	bl	8002ff6 <I2C_WaitOnFlagUntilTimeout>
 8003210:	b130      	cbz	r0, 8003220 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e09c      	b.n	8003350 <HAL_I2C_Mem_Write+0x18c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800321a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e097      	b.n	8003350 <HAL_I2C_Mem_Write+0x18c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003220:	2321      	movs	r3, #33	; 0x21
 8003222:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003226:	2340      	movs	r3, #64	; 0x40
 8003228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322c:	2300      	movs	r3, #0
 800322e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003232:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003234:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003236:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003238:	9601      	str	r6, [sp, #4]
 800323a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	4643      	mov	r3, r8
 8003240:	464a      	mov	r2, r9
 8003242:	4629      	mov	r1, r5
 8003244:	4620      	mov	r0, r4
 8003246:	f7ff feff 	bl	8003048 <I2C_RequestMemoryWrite>
 800324a:	b970      	cbnz	r0, 800326a <HAL_I2C_Mem_Write+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800324c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2bff      	cmp	r3, #255	; 0xff
 8003252:	d90f      	bls.n	8003274 <HAL_I2C_Mem_Write+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003254:	22ff      	movs	r2, #255	; 0xff
 8003256:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003258:	2300      	movs	r3, #0
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003260:	4629      	mov	r1, r5
 8003262:	4620      	mov	r0, r4
 8003264:	f7ff fe39 	bl	8002eda <I2C_TransferConfig>
 8003268:	e021      	b.n	80032ae <HAL_I2C_Mem_Write+0xea>
      __HAL_UNLOCK(hi2c);
 800326a:	2300      	movs	r3, #0
 800326c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003270:	4653      	mov	r3, sl
 8003272:	e06d      	b.n	8003350 <HAL_I2C_Mem_Write+0x18c>
      hi2c->XferSize = hi2c->XferCount;
 8003274:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003276:	b292      	uxth	r2, r2
 8003278:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800327a:	2300      	movs	r3, #0
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	4629      	mov	r1, r5
 8003286:	4620      	mov	r0, r4
 8003288:	f7ff fe27 	bl	8002eda <I2C_TransferConfig>
 800328c:	e00f      	b.n	80032ae <HAL_I2C_Mem_Write+0xea>
          hi2c->XferSize = hi2c->XferCount;
 800328e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003290:	b292      	uxth	r2, r2
 8003292:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003294:	2300      	movs	r3, #0
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	4629      	mov	r1, r5
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7ff fe1a 	bl	8002eda <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80032a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d032      	beq.n	8003314 <HAL_I2C_Mem_Write+0x150>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ae:	4632      	mov	r2, r6
 80032b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80032b2:	4620      	mov	r0, r4
 80032b4:	f7ff fe74 	bl	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d14f      	bne.n	800335c <HAL_I2C_Mem_Write+0x198>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80032c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032c6:	3301      	adds	r3, #1
 80032c8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80032ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80032d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80032dc:	b292      	uxth	r2, r2
 80032de:	2a00      	cmp	r2, #0
 80032e0:	d0e1      	beq.n	80032a6 <HAL_I2C_Mem_Write+0xe2>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1df      	bne.n	80032a6 <HAL_I2C_Mem_Write+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032e6:	9600      	str	r6, [sp, #0]
 80032e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032ea:	2200      	movs	r2, #0
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	4620      	mov	r0, r4
 80032f0:	f7ff fe81 	bl	8002ff6 <I2C_WaitOnFlagUntilTimeout>
 80032f4:	bba0      	cbnz	r0, 8003360 <HAL_I2C_Mem_Write+0x19c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2bff      	cmp	r3, #255	; 0xff
 80032fc:	d9c7      	bls.n	800328e <HAL_I2C_Mem_Write+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032fe:	22ff      	movs	r2, #255	; 0xff
 8003300:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003302:	2300      	movs	r3, #0
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800330a:	4629      	mov	r1, r5
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff fde4 	bl	8002eda <I2C_TransferConfig>
 8003312:	e7c8      	b.n	80032a6 <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003314:	4632      	mov	r2, r6
 8003316:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003318:	4620      	mov	r0, r4
 800331a:	f7ff fecd 	bl	80030b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	bb00      	cbnz	r0, 8003364 <HAL_I2C_Mem_Write+0x1a0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	2120      	movs	r1, #32
 8003326:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003328:	6820      	ldr	r0, [r4, #0]
 800332a:	6842      	ldr	r2, [r0, #4]
 800332c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003330:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003334:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800333e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003342:	2200      	movs	r2, #0
 8003344:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003348:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 800334c:	e000      	b.n	8003350 <HAL_I2C_Mem_Write+0x18c>
    return HAL_BUSY;
 800334e:	2302      	movs	r3, #2
}
 8003350:	4618      	mov	r0, r3
 8003352:	b002      	add	sp, #8
 8003354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003358:	2302      	movs	r3, #2
 800335a:	e7f9      	b.n	8003350 <HAL_I2C_Mem_Write+0x18c>
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e7f7      	b.n	8003350 <HAL_I2C_Mem_Write+0x18c>
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e7f5      	b.n	8003350 <HAL_I2C_Mem_Write+0x18c>
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e7f3      	b.n	8003350 <HAL_I2C_Mem_Write+0x18c>

08003368 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003368:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b20      	cmp	r3, #32
 8003370:	d124      	bne.n	80033bc <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003372:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003376:	2b01      	cmp	r3, #1
 8003378:	d022      	beq.n	80033c0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800337a:	2301      	movs	r3, #1
 800337c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003380:	2324      	movs	r3, #36	; 0x24
 8003382:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003386:	6802      	ldr	r2, [r0, #0]
 8003388:	6813      	ldr	r3, [r2, #0]
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003390:	6802      	ldr	r2, [r0, #0]
 8003392:	6813      	ldr	r3, [r2, #0]
 8003394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003398:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800339a:	6802      	ldr	r2, [r0, #0]
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	4319      	orrs	r1, r3
 80033a0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033a2:	6802      	ldr	r2, [r0, #0]
 80033a4:	6813      	ldr	r3, [r2, #0]
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	2320      	movs	r3, #32
 80033ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b2:	2300      	movs	r3, #0
 80033b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80033b8:	4618      	mov	r0, r3
 80033ba:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2002      	movs	r0, #2
 80033be:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80033c0:	2002      	movs	r0, #2
  }
}
 80033c2:	4770      	bx	lr

080033c4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d122      	bne.n	8003414 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d020      	beq.n	8003418 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80033d6:	2301      	movs	r3, #1
 80033d8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	2324      	movs	r3, #36	; 0x24
 80033de:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e2:	6802      	ldr	r2, [r0, #0]
 80033e4:	6813      	ldr	r3, [r2, #0]
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033ec:	6802      	ldr	r2, [r0, #0]
 80033ee:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033f4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033f8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033fa:	6802      	ldr	r2, [r0, #0]
 80033fc:	6813      	ldr	r3, [r2, #0]
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	2320      	movs	r3, #32
 8003406:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340a:	2300      	movs	r3, #0
 800340c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003410:	4618      	mov	r0, r3
 8003412:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003414:	2002      	movs	r0, #2
 8003416:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003418:	2002      	movs	r0, #2
  }
}
 800341a:	4770      	bx	lr

0800341c <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341c:	4a02      	ldr	r2, [pc, #8]	; (8003428 <HAL_PWR_EnableBkUpAccess+0xc>)
 800341e:	6813      	ldr	r3, [r2, #0]
 8003420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003424:	6013      	str	r3, [r2, #0]
}
 8003426:	4770      	bx	lr
 8003428:	58000400 	.word	0x58000400

0800342c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 800342c:	4b02      	ldr	r3, [pc, #8]	; (8003438 <HAL_PWREx_GetVoltageRange+0xc>)
 800342e:	6818      	ldr	r0, [r3, #0]
}
 8003430:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	58000400 	.word	0x58000400

0800343c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800343c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343e:	b08d      	sub	sp, #52	; 0x34
 8003440:	4606      	mov	r6, r0
 8003442:	460f      	mov	r7, r1
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003444:	4c2a      	ldr	r4, [pc, #168]	; (80034f0 <RCC_SetFlashLatency+0xb4>)
 8003446:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800344a:	ad0c      	add	r5, sp, #48	; 0x30
 800344c:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003450:	ab05      	add	r3, sp, #20
 8003452:	f104 0210 	add.w	r2, r4, #16
 8003456:	ca07      	ldmia	r2, {r0, r1, r2}
 8003458:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800345c:	ad01      	add	r5, sp, #4
 800345e:	341c      	adds	r4, #28
 8003460:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003464:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003468:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800346c:	d011      	beq.n	8003492 <RCC_SetFlashLatency+0x56>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800346e:	2300      	movs	r3, #0
 8003470:	2b02      	cmp	r3, #2
 8003472:	d822      	bhi.n	80034ba <RCC_SetFlashLatency+0x7e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003474:	aa0c      	add	r2, sp, #48	; 0x30
 8003476:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800347a:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 800347e:	42b2      	cmp	r2, r6
 8003480:	d215      	bcs.n	80034ae <RCC_SetFlashLatency+0x72>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003482:	3301      	adds	r3, #1
 8003484:	e7f4      	b.n	8003470 <RCC_SetFlashLatency+0x34>
        latency = FLASH_LATENCY_RANGE[index];
 8003486:	aa0c      	add	r2, sp, #48	; 0x30
 8003488:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800348c:	f853 4c2c 	ldr.w	r4, [r3, #-44]
        break;
 8003490:	e014      	b.n	80034bc <RCC_SetFlashLatency+0x80>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003492:	2300      	movs	r3, #0
 8003494:	2b03      	cmp	r3, #3
 8003496:	d808      	bhi.n	80034aa <RCC_SetFlashLatency+0x6e>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003498:	aa0c      	add	r2, sp, #48	; 0x30
 800349a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800349e:	f852 2c10 	ldr.w	r2, [r2, #-16]
 80034a2:	42b2      	cmp	r2, r6
 80034a4:	d2ef      	bcs.n	8003486 <RCC_SetFlashLatency+0x4a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80034a6:	3301      	adds	r3, #1
 80034a8:	e7f4      	b.n	8003494 <RCC_SetFlashLatency+0x58>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80034aa:	2400      	movs	r4, #0
 80034ac:	e006      	b.n	80034bc <RCC_SetFlashLatency+0x80>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80034ae:	aa0c      	add	r2, sp, #48	; 0x30
 80034b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80034b4:	f853 4c2c 	ldr.w	r4, [r3, #-44]
        break;
 80034b8:	e000      	b.n	80034bc <RCC_SetFlashLatency+0x80>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80034ba:	2400      	movs	r4, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80034bc:	4a0d      	ldr	r2, [pc, #52]	; (80034f4 <RCC_SetFlashLatency+0xb8>)
 80034be:	6813      	ldr	r3, [r2, #0]
 80034c0:	f023 0307 	bic.w	r3, r3, #7
 80034c4:	4323      	orrs	r3, r4
 80034c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034c8:	f7fe fcd6 	bl	8001e78 <HAL_GetTick>
 80034cc:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <RCC_SetFlashLatency+0xb8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	42a3      	cmp	r3, r4
 80034d8:	d006      	beq.n	80034e8 <RCC_SetFlashLatency+0xac>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034da:	f7fe fccd 	bl	8001e78 <HAL_GetTick>
 80034de:	1b40      	subs	r0, r0, r5
 80034e0:	2802      	cmp	r0, #2
 80034e2:	d9f4      	bls.n	80034ce <RCC_SetFlashLatency+0x92>
    {
      return HAL_TIMEOUT;
 80034e4:	2003      	movs	r0, #3
 80034e6:	e000      	b.n	80034ea <RCC_SetFlashLatency+0xae>
    }
  }
  return HAL_OK;
 80034e8:	2000      	movs	r0, #0
}
 80034ea:	b00d      	add	sp, #52	; 0x34
 80034ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ee:	bf00      	nop
 80034f0:	0800adf0 	.word	0x0800adf0
 80034f4:	58004000 	.word	0x58004000

080034f8 <RCC_SetFlashLatencyFromMSIRange>:
{
 80034f8:	b510      	push	{r4, lr}
  if (MSI_Range > RCC_MSIRANGE_11)
 80034fa:	28b0      	cmp	r0, #176	; 0xb0
 80034fc:	d819      	bhi.n	8003532 <RCC_SetFlashLatencyFromMSIRange+0x3a>
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80034fe:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8003504:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	4a09      	ldr	r2, [pc, #36]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0x44>)
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800351e:	f7ff ff85 	bl	800342c <HAL_PWREx_GetVoltageRange>
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <RCC_SetFlashLatencyFromMSIRange+0x48>)
 8003524:	fba3 3404 	umull	r3, r4, r3, r4
 8003528:	4601      	mov	r1, r0
 800352a:	0ca0      	lsrs	r0, r4, #18
 800352c:	f7ff ff86 	bl	800343c <RCC_SetFlashLatency>
}
 8003530:	bd10      	pop	{r4, pc}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003532:	4b01      	ldr	r3, [pc, #4]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8003534:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003536:	e7e7      	b.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x10>
 8003538:	0800af70 	.word	0x0800af70
 800353c:	0800af10 	.word	0x0800af10
 8003540:	431bde83 	.word	0x431bde83

08003544 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003544:	2800      	cmp	r0, #0
 8003546:	f000 836c 	beq.w	8003c22 <HAL_RCC_OscConfig+0x6de>
{
 800354a:	b538      	push	{r3, r4, r5, lr}
 800354c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800354e:	6803      	ldr	r3, [r0, #0]
 8003550:	f013 0f20 	tst.w	r3, #32
 8003554:	d059      	beq.n	800360a <HAL_RCC_OscConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800355a:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800355c:	68d2      	ldr	r2, [r2, #12]
 800355e:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003562:	f013 030c 	ands.w	r3, r3, #12
 8003566:	d01e      	beq.n	80035a6 <HAL_RCC_OscConfig+0x62>
 8003568:	2b0c      	cmp	r3, #12
 800356a:	d01a      	beq.n	80035a2 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800356c:	69e3      	ldr	r3, [r4, #28]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80a7 	beq.w	80036c2 <HAL_RCC_OscConfig+0x17e>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003578:	6813      	ldr	r3, [r2, #0]
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003580:	f7fe fc7a 	bl	8001e78 <HAL_GetTick>
 8003584:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f013 0f02 	tst.w	r3, #2
 8003590:	f040 8087 	bne.w	80036a2 <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003594:	f7fe fc70 	bl	8001e78 <HAL_GetTick>
 8003598:	1b40      	subs	r0, r0, r5
 800359a:	2802      	cmp	r0, #2
 800359c:	d9f3      	bls.n	8003586 <HAL_RCC_OscConfig+0x42>
            return HAL_TIMEOUT;
 800359e:	2003      	movs	r0, #3
 80035a0:	e34c      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80035a2:	2a01      	cmp	r2, #1
 80035a4:	d1e2      	bne.n	800356c <HAL_RCC_OscConfig+0x28>
 80035a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f013 0f02 	tst.w	r3, #2
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035b2:	69e3      	ldr	r3, [r4, #28]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8336 	beq.w	8003c26 <HAL_RCC_OscConfig+0x6e2>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80035bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 80035c6:	2bb0      	cmp	r3, #176	; 0xb0
 80035c8:	d900      	bls.n	80035cc <HAL_RCC_OscConfig+0x88>
    msiRange = LL_RCC_MSIRANGE_11;
 80035ca:	23b0      	movs	r3, #176	; 0xb0
 80035cc:	4298      	cmp	r0, r3
 80035ce:	d953      	bls.n	8003678 <HAL_RCC_OscConfig+0x134>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035d0:	f7ff ff92 	bl	80034f8 <RCC_SetFlashLatencyFromMSIRange>
 80035d4:	2800      	cmp	r0, #0
 80035d6:	f040 8328 	bne.w	8003c2a <HAL_RCC_OscConfig+0x6e6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035da:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80035dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035e0:	6811      	ldr	r1, [r2, #0]
 80035e2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6013      	str	r3, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ea:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80035ec:	6853      	ldr	r3, [r2, #4]
 80035ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035f6:	6053      	str	r3, [r2, #4]
        SystemCoreClockUpdate();
 80035f8:	f7fe fa84 	bl	8001b04 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035fc:	4bc2      	ldr	r3, [pc, #776]	; (8003908 <HAL_RCC_OscConfig+0x3c4>)
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	f7fe f9f0 	bl	80019e4 <HAL_InitTick>
 8003604:	2800      	cmp	r0, #0
 8003606:	f040 8312 	bne.w	8003c2e <HAL_RCC_OscConfig+0x6ea>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	f013 0f01 	tst.w	r3, #1
 8003610:	d079      	beq.n	8003706 <HAL_RCC_OscConfig+0x1c2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003616:	6893      	ldr	r3, [r2, #8]
 8003618:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003622:	2b08      	cmp	r3, #8
 8003624:	d065      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1ae>
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d061      	beq.n	80036ee <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362a:	6863      	ldr	r3, [r4, #4]
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003630:	f000 8093 	beq.w	800375a <HAL_RCC_OscConfig+0x216>
 8003634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003638:	f000 8096 	beq.w	8003768 <HAL_RCC_OscConfig+0x224>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800363c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003646:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800364e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003650:	6863      	ldr	r3, [r4, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8093 	beq.w	800377e <HAL_RCC_OscConfig+0x23a>
        tickstart = HAL_GetTick();
 8003658:	f7fe fc0e 	bl	8001e78 <HAL_GetTick>
 800365c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003668:	d14d      	bne.n	8003706 <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366a:	f7fe fc05 	bl	8001e78 <HAL_GetTick>
 800366e:	1b40      	subs	r0, r0, r5
 8003670:	2864      	cmp	r0, #100	; 0x64
 8003672:	d9f4      	bls.n	800365e <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 8003674:	2003      	movs	r0, #3
 8003676:	e2e1      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003682:	4318      	orrs	r0, r3
 8003684:	6010      	str	r0, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003686:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003688:	6853      	ldr	r3, [r2, #4]
 800368a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800368e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003692:	6053      	str	r3, [r2, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003694:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003696:	f7ff ff2f 	bl	80034f8 <RCC_SetFlashLatencyFromMSIRange>
 800369a:	2800      	cmp	r0, #0
 800369c:	d0ac      	beq.n	80035f8 <HAL_RCC_OscConfig+0xb4>
            return HAL_ERROR;
 800369e:	2001      	movs	r0, #1
 80036a0:	e2cc      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80036a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a8:	6811      	ldr	r1, [r2, #0]
 80036aa:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80036ae:	430b      	orrs	r3, r1
 80036b0:	6013      	str	r3, [r2, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b2:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80036b4:	6853      	ldr	r3, [r2, #4]
 80036b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80036be:	6053      	str	r3, [r2, #4]
 80036c0:	e7a3      	b.n	800360a <HAL_RCC_OscConfig+0xc6>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80036c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c6:	6813      	ldr	r3, [r2, #0]
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80036ce:	f7fe fbd3 	bl	8001e78 <HAL_GetTick>
 80036d2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80036d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f013 0f02 	tst.w	r3, #2
 80036de:	d094      	beq.n	800360a <HAL_RCC_OscConfig+0xc6>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036e0:	f7fe fbca 	bl	8001e78 <HAL_GetTick>
 80036e4:	1b40      	subs	r0, r0, r5
 80036e6:	2802      	cmp	r0, #2
 80036e8:	d9f4      	bls.n	80036d4 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80036ea:	2003      	movs	r0, #3
 80036ec:	e2a6      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80036ee:	2a03      	cmp	r2, #3
 80036f0:	d19b      	bne.n	800362a <HAL_RCC_OscConfig+0xe6>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80036f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80036fc:	d003      	beq.n	8003706 <HAL_RCC_OscConfig+0x1c2>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fe:	6863      	ldr	r3, [r4, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8296 	beq.w	8003c32 <HAL_RCC_OscConfig+0x6ee>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	f013 0f02 	tst.w	r3, #2
 800370c:	d05c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x284>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800370e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003712:	6893      	ldr	r3, [r2, #8]
 8003714:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003718:	68d2      	ldr	r2, [r2, #12]
 800371a:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800371e:	2b04      	cmp	r3, #4
 8003720:	d03f      	beq.n	80037a2 <HAL_RCC_OscConfig+0x25e>
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d03b      	beq.n	800379e <HAL_RCC_OscConfig+0x25a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003726:	68e3      	ldr	r3, [r4, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8083 	beq.w	8003834 <HAL_RCC_OscConfig+0x2f0>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800372e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003732:	6813      	ldr	r3, [r2, #0]
 8003734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003738:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800373a:	f7fe fb9d 	bl	8001e78 <HAL_GetTick>
 800373e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800374a:	d169      	bne.n	8003820 <HAL_RCC_OscConfig+0x2dc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374c:	f7fe fb94 	bl	8001e78 <HAL_GetTick>
 8003750:	1b40      	subs	r0, r0, r5
 8003752:	2802      	cmp	r0, #2
 8003754:	d9f4      	bls.n	8003740 <HAL_RCC_OscConfig+0x1fc>
            return HAL_TIMEOUT;
 8003756:	2003      	movs	r0, #3
 8003758:	e270      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800375a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800375e:	6813      	ldr	r3, [r2, #0]
 8003760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e773      	b.n	8003650 <HAL_RCC_OscConfig+0x10c>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003772:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e768      	b.n	8003650 <HAL_RCC_OscConfig+0x10c>
        tickstart = HAL_GetTick();
 800377e:	f7fe fb7b 	bl	8001e78 <HAL_GetTick>
 8003782:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800378e:	d0ba      	beq.n	8003706 <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003790:	f7fe fb72 	bl	8001e78 <HAL_GetTick>
 8003794:	1b40      	subs	r0, r0, r5
 8003796:	2864      	cmp	r0, #100	; 0x64
 8003798:	d9f4      	bls.n	8003784 <HAL_RCC_OscConfig+0x240>
            return HAL_TIMEOUT;
 800379a:	2003      	movs	r0, #3
 800379c:	e24e      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800379e:	2a02      	cmp	r2, #2
 80037a0:	d1c1      	bne.n	8003726 <HAL_RCC_OscConfig+0x1e2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80037a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80037ac:	d003      	beq.n	80037b6 <HAL_RCC_OscConfig+0x272>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ae:	68e3      	ldr	r3, [r4, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8240 	beq.w	8003c36 <HAL_RCC_OscConfig+0x6f2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b6:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80037b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037bc:	6853      	ldr	r3, [r2, #4]
 80037be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80037c6:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	f013 0f18 	tst.w	r3, #24
 80037ce:	f000 80e5 	beq.w	800399c <HAL_RCC_OscConfig+0x458>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037d2:	6962      	ldr	r2, [r4, #20]
 80037d4:	2a00      	cmp	r2, #0
 80037d6:	f000 80af 	beq.w	8003938 <HAL_RCC_OscConfig+0x3f4>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80037da:	f013 0f10 	tst.w	r3, #16
 80037de:	d07a      	beq.n	80038d6 <HAL_RCC_OscConfig+0x392>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e8:	f013 0f02 	tst.w	r3, #2
 80037ec:	d138      	bne.n	8003860 <HAL_RCC_OscConfig+0x31c>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80037ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 80037fe:	f7fe fb3b 	bl	8001e78 <HAL_GetTick>
 8003802:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380c:	f013 0f02 	tst.w	r3, #2
 8003810:	d126      	bne.n	8003860 <HAL_RCC_OscConfig+0x31c>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003812:	f7fe fb31 	bl	8001e78 <HAL_GetTick>
 8003816:	1b40      	subs	r0, r0, r5
 8003818:	2802      	cmp	r0, #2
 800381a:	d9f3      	bls.n	8003804 <HAL_RCC_OscConfig+0x2c0>
              return HAL_TIMEOUT;
 800381c:	2003      	movs	r0, #3
 800381e:	e20d      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003826:	6853      	ldr	r3, [r2, #4]
 8003828:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800382c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003830:	6053      	str	r3, [r2, #4]
 8003832:	e7c9      	b.n	80037c8 <HAL_RCC_OscConfig+0x284>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003838:	6813      	ldr	r3, [r2, #0]
 800383a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800383e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003840:	f7fe fb1a 	bl	8001e78 <HAL_GetTick>
 8003844:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003850:	d0ba      	beq.n	80037c8 <HAL_RCC_OscConfig+0x284>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003852:	f7fe fb11 	bl	8001e78 <HAL_GetTick>
 8003856:	1b40      	subs	r0, r0, r5
 8003858:	2802      	cmp	r0, #2
 800385a:	d9f4      	bls.n	8003846 <HAL_RCC_OscConfig+0x302>
            return HAL_TIMEOUT;
 800385c:	2003      	movs	r0, #3
 800385e:	e1ed      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003864:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8003870:	f7fe fb02 	bl	8001e78 <HAL_GetTick>
 8003874:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387e:	f013 0f08 	tst.w	r3, #8
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x34e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003884:	f7fe faf8 	bl	8001e78 <HAL_GetTick>
 8003888:	1b40      	subs	r0, r0, r5
 800388a:	2803      	cmp	r0, #3
 800388c:	d9f3      	bls.n	8003876 <HAL_RCC_OscConfig+0x332>
            return HAL_TIMEOUT;
 800388e:	2003      	movs	r0, #3
 8003890:	e1d4      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003892:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003898:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800389c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80038a8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 80038b4:	f7fe fae0 	bl	8001e78 <HAL_GetTick>
 80038b8:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c2:	f013 0f02 	tst.w	r3, #2
 80038c6:	d069      	beq.n	800399c <HAL_RCC_OscConfig+0x458>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80038c8:	f7fe fad6 	bl	8001e78 <HAL_GetTick>
 80038cc:	1b40      	subs	r0, r0, r5
 80038ce:	2802      	cmp	r0, #2
 80038d0:	d9f3      	bls.n	80038ba <HAL_RCC_OscConfig+0x376>
            return HAL_TIMEOUT;
 80038d2:	2003      	movs	r0, #3
 80038d4:	e1b2      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80038d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038da:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 80038e6:	f7fe fac7 	bl	8001e78 <HAL_GetTick>
 80038ea:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80038ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f4:	f013 0f02 	tst.w	r3, #2
 80038f8:	d108      	bne.n	800390c <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80038fa:	f7fe fabd 	bl	8001e78 <HAL_GetTick>
 80038fe:	1b40      	subs	r0, r0, r5
 8003900:	2802      	cmp	r0, #2
 8003902:	d9f3      	bls.n	80038ec <HAL_RCC_OscConfig+0x3a8>
            return HAL_TIMEOUT;
 8003904:	2003      	movs	r0, #3
 8003906:	e199      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
 8003908:	20000018 	.word	0x20000018
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800390c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003910:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800391c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003924:	f013 0f08 	tst.w	r3, #8
 8003928:	d038      	beq.n	800399c <HAL_RCC_OscConfig+0x458>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800392a:	f7fe faa5 	bl	8001e78 <HAL_GetTick>
 800392e:	1b40      	subs	r0, r0, r5
 8003930:	2803      	cmp	r0, #3
 8003932:	d9f3      	bls.n	800391c <HAL_RCC_OscConfig+0x3d8>
            return HAL_TIMEOUT;
 8003934:	2003      	movs	r0, #3
 8003936:	e181      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800393c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003948:	f7fe fa96 	bl	8001e78 <HAL_GetTick>
 800394c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800394e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003956:	f013 0f08 	tst.w	r3, #8
 800395a:	d006      	beq.n	800396a <HAL_RCC_OscConfig+0x426>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800395c:	f7fe fa8c 	bl	8001e78 <HAL_GetTick>
 8003960:	1b40      	subs	r0, r0, r5
 8003962:	2803      	cmp	r0, #3
 8003964:	d9f3      	bls.n	800394e <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8003966:	2003      	movs	r0, #3
 8003968:	e168      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800396a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800396e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800397a:	f7fe fa7d 	bl	8001e78 <HAL_GetTick>
 800397e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003988:	f013 0f02 	tst.w	r3, #2
 800398c:	d006      	beq.n	800399c <HAL_RCC_OscConfig+0x458>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800398e:	f7fe fa73 	bl	8001e78 <HAL_GetTick>
 8003992:	1b40      	subs	r0, r0, r5
 8003994:	2802      	cmp	r0, #2
 8003996:	d9f3      	bls.n	8003980 <HAL_RCC_OscConfig+0x43c>
          return HAL_TIMEOUT;
 8003998:	2003      	movs	r0, #3
 800399a:	e14f      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	f013 0f04 	tst.w	r3, #4
 80039a2:	d068      	beq.n	8003a76 <HAL_RCC_OscConfig+0x532>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a4:	4baa      	ldr	r3, [pc, #680]	; (8003c50 <HAL_RCC_OscConfig+0x70c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039ac:	d027      	beq.n	80039fe <HAL_RCC_OscConfig+0x4ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ae:	68a3      	ldr	r3, [r4, #8]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d035      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
 80039b4:	2b05      	cmp	r3, #5
 80039b6:	d03c      	beq.n	8003a32 <HAL_RCC_OscConfig+0x4ee>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039bc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80039c0:	f022 0201 	bic.w	r2, r2, #1
 80039c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80039cc:	f022 0204 	bic.w	r2, r2, #4
 80039d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039d4:	68a3      	ldr	r3, [r4, #8]
 80039d6:	b3db      	cbz	r3, 8003a50 <HAL_RCC_OscConfig+0x50c>
      tickstart = HAL_GetTick();
 80039d8:	f7fe fa4e 	bl	8001e78 <HAL_GetTick>
 80039dc:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	f013 0f02 	tst.w	r3, #2
 80039ea:	d144      	bne.n	8003a76 <HAL_RCC_OscConfig+0x532>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fe fa44 	bl	8001e78 <HAL_GetTick>
 80039f0:	1b40      	subs	r0, r0, r5
 80039f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80039f6:	4298      	cmp	r0, r3
 80039f8:	d9f1      	bls.n	80039de <HAL_RCC_OscConfig+0x49a>
          return HAL_TIMEOUT;
 80039fa:	2003      	movs	r0, #3
 80039fc:	e11e      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
      HAL_PWR_EnableBkUpAccess();
 80039fe:	f7ff fd0d 	bl	800341c <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8003a02:	f7fe fa39 	bl	8001e78 <HAL_GetTick>
 8003a06:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a08:	4b91      	ldr	r3, [pc, #580]	; (8003c50 <HAL_RCC_OscConfig+0x70c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a10:	d1cd      	bne.n	80039ae <HAL_RCC_OscConfig+0x46a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a12:	f7fe fa31 	bl	8001e78 <HAL_GetTick>
 8003a16:	1b40      	subs	r0, r0, r5
 8003a18:	2802      	cmp	r0, #2
 8003a1a:	d9f5      	bls.n	8003a08 <HAL_RCC_OscConfig+0x4c4>
          return HAL_TIMEOUT;
 8003a1c:	2003      	movs	r0, #3
 8003a1e:	e10d      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a30:	e7d0      	b.n	80039d4 <HAL_RCC_OscConfig+0x490>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a36:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a3a:	f042 0204 	orr.w	r2, r2, #4
 8003a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a42:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003a4e:	e7c1      	b.n	80039d4 <HAL_RCC_OscConfig+0x490>
      tickstart = HAL_GetTick();
 8003a50:	f7fe fa12 	bl	8001e78 <HAL_GetTick>
 8003a54:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	f013 0f02 	tst.w	r3, #2
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_OscConfig+0x532>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a64:	f7fe fa08 	bl	8001e78 <HAL_GetTick>
 8003a68:	1b40      	subs	r0, r0, r5
 8003a6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a6e:	4298      	cmp	r0, r3
 8003a70:	d9f1      	bls.n	8003a56 <HAL_RCC_OscConfig+0x512>
          return HAL_TIMEOUT;
 8003a72:	2003      	movs	r0, #3
 8003a74:	e0e2      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a7c:	d033      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x5a2>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a80:	b1c3      	cbz	r3, 8003ab4 <HAL_RCC_OscConfig+0x570>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a86:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003a92:	f7fe f9f1 	bl	8001e78 <HAL_GetTick>
 8003a96:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aa0:	f013 0f02 	tst.w	r3, #2
 8003aa4:	d11f      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x5a2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aa6:	f7fe f9e7 	bl	8001e78 <HAL_GetTick>
 8003aaa:	1b40      	subs	r0, r0, r5
 8003aac:	2802      	cmp	r0, #2
 8003aae:	d9f3      	bls.n	8003a98 <HAL_RCC_OscConfig+0x554>
          return HAL_TIMEOUT;
 8003ab0:	2003      	movs	r0, #3
 8003ab2:	e0c3      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003ac4:	f7fe f9d8 	bl	8001e78 <HAL_GetTick>
 8003ac8:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ad2:	f013 0f02 	tst.w	r3, #2
 8003ad6:	d006      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x5a2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad8:	f7fe f9ce 	bl	8001e78 <HAL_GetTick>
 8003adc:	1b40      	subs	r0, r0, r5
 8003ade:	2802      	cmp	r0, #2
 8003ae0:	d9f3      	bls.n	8003aca <HAL_RCC_OscConfig+0x586>
          return HAL_TIMEOUT;
 8003ae2:	2003      	movs	r0, #3
 8003ae4:	e0aa      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ae6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80a6 	beq.w	8003c3a <HAL_RCC_OscConfig+0x6f6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003af8:	2a0c      	cmp	r2, #12
 8003afa:	d063      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x680>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d020      	beq.n	8003b42 <HAL_RCC_OscConfig+0x5fe>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003b0a:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	f022 0203 	bic.w	r2, r2, #3
 8003b12:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003b1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b1e:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003b20:	f7fe f9aa 	bl	8001e78 <HAL_GetTick>
 8003b24:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b30:	f000 8087 	beq.w	8003c42 <HAL_RCC_OscConfig+0x6fe>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fe f9a0 	bl	8001e78 <HAL_GetTick>
 8003b38:	1b00      	subs	r0, r0, r4
 8003b3a:	2802      	cmp	r0, #2
 8003b3c:	d9f3      	bls.n	8003b26 <HAL_RCC_OscConfig+0x5e2>
            return HAL_TIMEOUT;
 8003b3e:	2003      	movs	r0, #3
 8003b40:	e07c      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b4c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b4e:	f7fe f993 	bl	8001e78 <HAL_GetTick>
 8003b52:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b5e:	d006      	beq.n	8003b6e <HAL_RCC_OscConfig+0x62a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fe f98a 	bl	8001e78 <HAL_GetTick>
 8003b64:	1b40      	subs	r0, r0, r5
 8003b66:	2802      	cmp	r0, #2
 8003b68:	d9f4      	bls.n	8003b54 <HAL_RCC_OscConfig+0x610>
            return HAL_TIMEOUT;
 8003b6a:	2003      	movs	r0, #3
 8003b6c:	e066      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b72:	68d3      	ldr	r3, [r2, #12]
 8003b74:	4937      	ldr	r1, [pc, #220]	; (8003c54 <HAL_RCC_OscConfig+0x710>)
 8003b76:	4019      	ands	r1, r3
 8003b78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003b7c:	4303      	orrs	r3, r0
 8003b7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b80:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003b84:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003b86:	4303      	orrs	r3, r0
 8003b88:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b8a:	4303      	orrs	r3, r0
 8003b8c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003b8e:	4303      	orrs	r3, r0
 8003b90:	430b      	orrs	r3, r1
 8003b92:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b94:	6813      	ldr	r3, [r2, #0]
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b9c:	68d3      	ldr	r3, [r2, #12]
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003ba4:	f7fe f968 	bl	8001e78 <HAL_GetTick>
 8003ba8:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003bb4:	d143      	bne.n	8003c3e <HAL_RCC_OscConfig+0x6fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb6:	f7fe f95f 	bl	8001e78 <HAL_GetTick>
 8003bba:	1b00      	subs	r0, r0, r4
 8003bbc:	2802      	cmp	r0, #2
 8003bbe:	d9f4      	bls.n	8003baa <HAL_RCC_OscConfig+0x666>
            return HAL_TIMEOUT;
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	e03b      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d03e      	beq.n	8003c46 <HAL_RCC_OscConfig+0x702>
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	f003 0103 	and.w	r1, r3, #3
 8003bd2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003bd4:	4291      	cmp	r1, r2
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x698>
          return HAL_ERROR;
 8003bd8:	2001      	movs	r0, #1
 8003bda:	e02f      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	428a      	cmp	r2, r1
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_OscConfig+0x6a6>
          return HAL_ERROR;
 8003be6:	2001      	movs	r0, #1
 8003be8:	e028      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bea:	f3c3 2206 	ubfx	r2, r3, #8, #7
 8003bee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bf0:	428a      	cmp	r2, r1
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x6b4>
          return HAL_ERROR;
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	e021      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bf8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003bfc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bfe:	428a      	cmp	r2, r1
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x6c2>
          return HAL_ERROR;
 8003c02:	2001      	movs	r0, #1
 8003c04:	e01a      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c06:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003c0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c0c:	428a      	cmp	r2, r1
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_OscConfig+0x6d0>
          return HAL_ERROR;
 8003c10:	2001      	movs	r0, #1
 8003c12:	e013      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003c14:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003c18:	6c62      	ldr	r2, [r4, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d015      	beq.n	8003c4a <HAL_RCC_OscConfig+0x706>
          return HAL_ERROR;
 8003c1e:	2001      	movs	r0, #1
 8003c20:	e00c      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
    return HAL_ERROR;
 8003c22:	2001      	movs	r0, #1
}
 8003c24:	4770      	bx	lr
        return HAL_ERROR;
 8003c26:	2001      	movs	r0, #1
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
            return HAL_ERROR;
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	e006      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
          return HAL_ERROR;
 8003c2e:	2001      	movs	r0, #1
 8003c30:	e004      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 8003c32:	2001      	movs	r0, #1
 8003c34:	e002      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 8003c36:	2001      	movs	r0, #1
 8003c38:	e000      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  return HAL_OK;
 8003c3a:	2000      	movs	r0, #0
}
 8003c3c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003c3e:	2000      	movs	r0, #0
 8003c40:	e7fc      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
 8003c42:	2000      	movs	r0, #0
 8003c44:	e7fa      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 8003c46:	2001      	movs	r0, #1
 8003c48:	e7f8      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
  return HAL_OK;
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	e7f6      	b.n	8003c3c <HAL_RCC_OscConfig+0x6f8>
 8003c4e:	bf00      	nop
 8003c50:	58000400 	.word	0x58000400
 8003c54:	11c1808c 	.word	0x11c1808c

08003c58 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	f000 8127 	beq.w	8003eac <HAL_RCC_ClockConfig+0x254>
{
 8003c5e:	b570      	push	{r4, r5, r6, lr}
 8003c60:	4604      	mov	r4, r0
 8003c62:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c64:	4b92      	ldr	r3, [pc, #584]	; (8003eb0 <HAL_RCC_ClockConfig+0x258>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	428b      	cmp	r3, r1
 8003c6e:	d32d      	bcc.n	8003ccc <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f013 0f02 	tst.w	r3, #2
 8003c76:	d13f      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	f013 0f20 	tst.w	r3, #32
 8003c7e:	d153      	bne.n	8003d28 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c86:	d16a      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	f013 0f04 	tst.w	r3, #4
 8003c8e:	f040 8083 	bne.w	8003d98 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	f013 0f08 	tst.w	r3, #8
 8003c98:	f040 8097 	bne.w	8003dca <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	f013 0f01 	tst.w	r3, #1
 8003ca2:	f000 80e0 	beq.w	8003e66 <HAL_RCC_ClockConfig+0x20e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca6:	6863      	ldr	r3, [r4, #4]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	f000 80a8 	beq.w	8003dfe <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	f000 80c9 	beq.w	8003e46 <HAL_RCC_ClockConfig+0x1ee>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f040 80ce 	bne.w	8003e56 <HAL_RCC_ClockConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003cba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	f012 0f02 	tst.w	r2, #2
 8003cc4:	f040 80a1 	bne.w	8003e0a <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8003cc8:	2001      	movs	r0, #1
 8003cca:	e0ee      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ccc:	4a78      	ldr	r2, [pc, #480]	; (8003eb0 <HAL_RCC_ClockConfig+0x258>)
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	f023 0307 	bic.w	r3, r3, #7
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003cd8:	f7fe f8ce 	bl	8001e78 <HAL_GetTick>
 8003cdc:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b74      	ldr	r3, [pc, #464]	; (8003eb0 <HAL_RCC_ClockConfig+0x258>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	42ab      	cmp	r3, r5
 8003ce8:	d0c2      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003cea:	f7fe f8c5 	bl	8001e78 <HAL_GetTick>
 8003cee:	1b80      	subs	r0, r0, r6
 8003cf0:	2802      	cmp	r0, #2
 8003cf2:	d9f4      	bls.n	8003cde <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8003cf4:	2003      	movs	r0, #3
 8003cf6:	e0d8      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003cf8:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cfe:	688a      	ldr	r2, [r1, #8]
 8003d00:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003d04:	4313      	orrs	r3, r2
 8003d06:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003d08:	f7fe f8b6 	bl	8001e78 <HAL_GetTick>
 8003d0c:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003d18:	d1ae      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d1a:	f7fe f8ad 	bl	8001e78 <HAL_GetTick>
 8003d1e:	1b80      	subs	r0, r0, r6
 8003d20:	2802      	cmp	r0, #2
 8003d22:	d9f4      	bls.n	8003d0e <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8003d24:	2003      	movs	r0, #3
 8003d26:	e0c0      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003d28:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d2e:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8003d32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003d3c:	f7fe f89c 	bl	8001e78 <HAL_GetTick>
 8003d40:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d4e:	d197      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d50:	f7fe f892 	bl	8001e78 <HAL_GetTick>
 8003d54:	1b80      	subs	r0, r0, r6
 8003d56:	2802      	cmp	r0, #2
 8003d58:	d9f3      	bls.n	8003d42 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8003d5a:	2003      	movs	r0, #3
 8003d5c:	e0a5      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003d5e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d64:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8003d68:	f023 030f 	bic.w	r3, r3, #15
 8003d6c:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8003d70:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003d74:	f7fe f880 	bl	8001e78 <HAL_GetTick>
 8003d78:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d82:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003d86:	f47f af7f 	bne.w	8003c88 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d8a:	f7fe f875 	bl	8001e78 <HAL_GetTick>
 8003d8e:	1b80      	subs	r0, r0, r6
 8003d90:	2802      	cmp	r0, #2
 8003d92:	d9f2      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8003d94:	2003      	movs	r0, #3
 8003d96:	e088      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003d98:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9e:	688a      	ldr	r2, [r1, #8]
 8003da0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003da8:	f7fe f866 	bl	8001e78 <HAL_GetTick>
 8003dac:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003db8:	f47f af6b 	bne.w	8003c92 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003dbc:	f7fe f85c 	bl	8001e78 <HAL_GetTick>
 8003dc0:	1b80      	subs	r0, r0, r6
 8003dc2:	2802      	cmp	r0, #2
 8003dc4:	d9f3      	bls.n	8003dae <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8003dc6:	2003      	movs	r0, #3
 8003dc8:	e06f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003dca:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd0:	6893      	ldr	r3, [r2, #8]
 8003dd2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003dd6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003dda:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003ddc:	f7fe f84c 	bl	8001e78 <HAL_GetTick>
 8003de0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003dec:	f47f af56 	bne.w	8003c9c <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003df0:	f7fe f842 	bl	8001e78 <HAL_GetTick>
 8003df4:	1b80      	subs	r0, r0, r6
 8003df6:	2802      	cmp	r0, #2
 8003df8:	d9f3      	bls.n	8003de2 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8003dfa:	2003      	movs	r0, #3
 8003dfc:	e055      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003e08:	d01b      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x1ea>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e0e:	688a      	ldr	r2, [r1, #8]
 8003e10:	f022 0203 	bic.w	r2, r2, #3
 8003e14:	4313      	orrs	r3, r2
 8003e16:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003e18:	f7fe f82e 	bl	8001e78 <HAL_GetTick>
 8003e1c:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e28:	6862      	ldr	r2, [r4, #4]
 8003e2a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003e2e:	d01a      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x20e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e30:	f7fe f822 	bl	8001e78 <HAL_GetTick>
 8003e34:	1b80      	subs	r0, r0, r6
 8003e36:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e3a:	4298      	cmp	r0, r3
 8003e3c:	d9ef      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x1c6>
        return HAL_TIMEOUT;
 8003e3e:	2003      	movs	r0, #3
 8003e40:	e033      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
        return HAL_ERROR;
 8003e42:	2001      	movs	r0, #1
 8003e44:	e031      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003e50:	d1db      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8003e52:	2001      	movs	r0, #1
 8003e54:	e029      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003e60:	d1d3      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8003e62:	2001      	movs	r0, #1
 8003e64:	e021      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <HAL_RCC_ClockConfig+0x258>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	42ab      	cmp	r3, r5
 8003e70:	d915      	bls.n	8003e9e <HAL_RCC_ClockConfig+0x246>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4a0f      	ldr	r2, [pc, #60]	; (8003eb0 <HAL_RCC_ClockConfig+0x258>)
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	f023 0307 	bic.w	r3, r3, #7
 8003e7a:	432b      	orrs	r3, r5
 8003e7c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003e7e:	f7fd fffb 	bl	8001e78 <HAL_GetTick>
 8003e82:	4604      	mov	r4, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e84:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x258>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	42ab      	cmp	r3, r5
 8003e8e:	d006      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x246>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e90:	f7fd fff2 	bl	8001e78 <HAL_GetTick>
 8003e94:	1b00      	subs	r0, r0, r4
 8003e96:	2802      	cmp	r0, #2
 8003e98:	d9f4      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x22c>
        return HAL_TIMEOUT;
 8003e9a:	2003      	movs	r0, #3
 8003e9c:	e005      	b.n	8003eaa <HAL_RCC_ClockConfig+0x252>
  SystemCoreClockUpdate();
 8003e9e:	f7fd fe31 	bl	8001b04 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8003ea2:	f7fd ffef 	bl	8001e84 <HAL_GetTickPrio>
 8003ea6:	f7fd fd9d 	bl	80019e4 <HAL_InitTick>
}
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003eac:	2001      	movs	r0, #1
}
 8003eae:	4770      	bx	lr
 8003eb0:	58004000 	.word	0x58004000

08003eb4 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb8:	689b      	ldr	r3, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003eba:	f013 030c 	ands.w	r3, r3, #12
 8003ebe:	d10c      	bne.n	8003eda <HAL_RCC_GetSysClockFreq+0x26>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003eca:	2bb0      	cmp	r3, #176	; 0xb0
 8003ecc:	d900      	bls.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003ece:	23b0      	movs	r3, #176	; 0xb0
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	4a24      	ldr	r2, [pc, #144]	; (8003f64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ed4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ed8:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d03d      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0xa6>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d010      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x50>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d030      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x9e>
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d10f      	bne.n	8003f14 <HAL_RCC_GetSysClockFreq+0x60>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003efe:	d12a      	bne.n	8003f56 <HAL_RCC_GetSysClockFreq+0xa2>
          pllinputfreq = HSE_VALUE;
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f02:	e013      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x78>
 8003f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003f0e:	d026      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0xaa>
      sysclockfreq = HSE_VALUE / 2U;
 8003f10:	4816      	ldr	r0, [pc, #88]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f12:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003f1e:	2bb0      	cmp	r3, #176	; 0xb0
 8003f20:	d900      	bls.n	8003f24 <HAL_RCC_GetSysClockFreq+0x70>
    msiRange = LL_RCC_MSIRANGE_11;
 8003f22:	23b0      	movs	r3, #176	; 0xb0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	4a0f      	ldr	r2, [pc, #60]	; (8003f64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f30:	68d0      	ldr	r0, [r2, #12]
 8003f32:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003f36:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f3a:	68d3      	ldr	r3, [r2, #12]
 8003f3c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003f40:	3301      	adds	r3, #1
 8003f42:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003f46:	68d3      	ldr	r3, [r2, #12]
 8003f48:	0f5b      	lsrs	r3, r3, #29
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f50:	4770      	bx	lr
        pllinputfreq = HSI_VALUE;
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f54:	e7ea      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x78>
          pllinputfreq = HSE_VALUE / 2U;
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f58:	e7e8      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = HSI_VALUE;
 8003f5a:	4804      	ldr	r0, [pc, #16]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f5c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003f5e:	4802      	ldr	r0, [pc, #8]	; (8003f68 <HAL_RCC_GetSysClockFreq+0xb4>)
}
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	0800af70 	.word	0x0800af70
 8003f68:	01e84800 	.word	0x01e84800
 8003f6c:	00f42400 	.word	0x00f42400

08003f70 <HAL_RCC_GetHCLKFreq>:
{
 8003f70:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003f72:	f7ff ff9f 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003f80:	4a02      	ldr	r2, [pc, #8]	; (8003f8c <HAL_RCC_GetHCLKFreq+0x1c>)
 8003f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003f86:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f8a:	bd08      	pop	{r3, pc}
 8003f8c:	0800af10 	.word	0x0800af10

08003f90 <HAL_RCC_GetPCLK1Freq>:
{
 8003f90:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003f92:	f7ff ffed 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003fa0:	4a03      	ldr	r2, [pc, #12]	; (8003fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa6:	f003 031f 	and.w	r3, r3, #31
}
 8003faa:	40d8      	lsrs	r0, r3
 8003fac:	bd08      	pop	{r3, pc}
 8003fae:	bf00      	nop
 8003fb0:	0800af50 	.word	0x0800af50

08003fb4 <HAL_RCC_GetPCLK2Freq>:
{
 8003fb4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003fb6:	f7ff ffdb 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003fc4:	4a03      	ldr	r2, [pc, #12]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fca:	f003 031f 	and.w	r3, r3, #31
}
 8003fce:	40d8      	lsrs	r0, r3
 8003fd0:	bd08      	pop	{r3, pc}
 8003fd2:	bf00      	nop
 8003fd4:	0800af50 	.word	0x0800af50

08003fd8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8003fd8:	236f      	movs	r3, #111	; 0x6f
 8003fda:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	f002 020c 	and.w	r2, r2, #12
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8003fe6:	6042      	str	r2, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8003fee:	6082      	str	r2, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8003ff6:	60c2      	str	r2, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	f402 5260 	and.w	r2, r2, #14336	; 0x3800
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8003ffe:	6102      	str	r2, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004000:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004004:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8004008:	6142      	str	r2, [r0, #20]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800400a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	b2db      	uxtb	r3, r3
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8004012:	6183      	str	r3, [r0, #24]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004014:	4b02      	ldr	r3, [pc, #8]	; (8004020 <HAL_RCC_GetClockConfig+0x48>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	600b      	str	r3, [r1, #0]
}
 800401e:	4770      	bx	lr
 8004020:	58004000 	.word	0x58004000

08004024 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800402c:	6813      	ldr	r3, [r2, #0]
 800402e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004032:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004034:	f7fd ff20 	bl	8001e78 <HAL_GetTick>
 8004038:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800403a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004044:	d006      	beq.n	8004054 <RCCEx_PLLSAI1_ConfigNP+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004046:	f7fd ff17 	bl	8001e78 <HAL_GetTick>
 800404a:	1b00      	subs	r0, r0, r4
 800404c:	2802      	cmp	r0, #2
 800404e:	d9f4      	bls.n	800403a <RCCEx_PLLSAI1_ConfigNP+0x16>
    {
      status = HAL_TIMEOUT;
 8004050:	2403      	movs	r4, #3
 8004052:	e000      	b.n	8004056 <RCCEx_PLLSAI1_ConfigNP+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8004054:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8004056:	b10c      	cbz	r4, 800405c <RCCEx_PLLSAI1_ConfigNP+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8004058:	4620      	mov	r0, r4
 800405a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800405c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004066:	6829      	ldr	r1, [r5, #0]
 8004068:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800406c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	f422 1278 	bic.w	r2, r2, #4063232	; 0x3e0000
 8004074:	6869      	ldr	r1, [r5, #4]
 8004076:	430a      	orrs	r2, r1
 8004078:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004080:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004082:	f7fd fef9 	bl	8001e78 <HAL_GetTick>
 8004086:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004092:	d105      	bne.n	80040a0 <RCCEx_PLLSAI1_ConfigNP+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004094:	f7fd fef0 	bl	8001e78 <HAL_GetTick>
 8004098:	1b80      	subs	r0, r0, r6
 800409a:	2802      	cmp	r0, #2
 800409c:	d9f4      	bls.n	8004088 <RCCEx_PLLSAI1_ConfigNP+0x64>
        status = HAL_TIMEOUT;
 800409e:	2403      	movs	r4, #3
    if (status == HAL_OK)
 80040a0:	2c00      	cmp	r4, #0
 80040a2:	d1d9      	bne.n	8004058 <RCCEx_PLLSAI1_ConfigNP+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80040a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a8:	6913      	ldr	r3, [r2, #16]
 80040aa:	6929      	ldr	r1, [r5, #16]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6113      	str	r3, [r2, #16]
 80040b0:	e7d2      	b.n	8004058 <RCCEx_PLLSAI1_ConfigNP+0x34>

080040b2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80040b2:	b570      	push	{r4, r5, r6, lr}
 80040b4:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80040b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040c0:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80040c2:	f7fd fed9 	bl	8001e78 <HAL_GetTick>
 80040c6:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80040d2:	d006      	beq.n	80040e2 <RCCEx_PLLSAI1_ConfigNQ+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d4:	f7fd fed0 	bl	8001e78 <HAL_GetTick>
 80040d8:	1b00      	subs	r0, r0, r4
 80040da:	2802      	cmp	r0, #2
 80040dc:	d9f4      	bls.n	80040c8 <RCCEx_PLLSAI1_ConfigNQ+0x16>
    {
      status = HAL_TIMEOUT;
 80040de:	2403      	movs	r4, #3
 80040e0:	e000      	b.n	80040e4 <RCCEx_PLLSAI1_ConfigNQ+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 80040e4:	b10c      	cbz	r4, 80040ea <RCCEx_PLLSAI1_ConfigNQ+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 80040e6:	4620      	mov	r0, r4
 80040e8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80040ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80040f4:	6829      	ldr	r1, [r5, #0]
 80040f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80040fa:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8004102:	68a9      	ldr	r1, [r5, #8]
 8004104:	430a      	orrs	r2, r1
 8004106:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800410e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004110:	f7fd feb2 	bl	8001e78 <HAL_GetTick>
 8004114:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004120:	d105      	bne.n	800412e <RCCEx_PLLSAI1_ConfigNQ+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004122:	f7fd fea9 	bl	8001e78 <HAL_GetTick>
 8004126:	1b80      	subs	r0, r0, r6
 8004128:	2802      	cmp	r0, #2
 800412a:	d9f4      	bls.n	8004116 <RCCEx_PLLSAI1_ConfigNQ+0x64>
        status = HAL_TIMEOUT;
 800412c:	2403      	movs	r4, #3
    if (status == HAL_OK)
 800412e:	2c00      	cmp	r4, #0
 8004130:	d1d9      	bne.n	80040e6 <RCCEx_PLLSAI1_ConfigNQ+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004136:	6913      	ldr	r3, [r2, #16]
 8004138:	6929      	ldr	r1, [r5, #16]
 800413a:	430b      	orrs	r3, r1
 800413c:	6113      	str	r3, [r2, #16]
 800413e:	e7d2      	b.n	80040e6 <RCCEx_PLLSAI1_ConfigNQ+0x34>

08004140 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004148:	6813      	ldr	r3, [r2, #0]
 800414a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800414e:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004150:	f7fd fe92 	bl	8001e78 <HAL_GetTick>
 8004154:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004160:	d006      	beq.n	8004170 <RCCEx_PLLSAI1_ConfigNR+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004162:	f7fd fe89 	bl	8001e78 <HAL_GetTick>
 8004166:	1b00      	subs	r0, r0, r4
 8004168:	2802      	cmp	r0, #2
 800416a:	d9f4      	bls.n	8004156 <RCCEx_PLLSAI1_ConfigNR+0x16>
    {
      status = HAL_TIMEOUT;
 800416c:	2403      	movs	r4, #3
 800416e:	e000      	b.n	8004172 <RCCEx_PLLSAI1_ConfigNR+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8004170:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8004172:	b10c      	cbz	r4, 8004178 <RCCEx_PLLSAI1_ConfigNR+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8004174:	4620      	mov	r0, r4
 8004176:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004182:	6829      	ldr	r1, [r5, #0]
 8004184:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004188:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8004190:	68e9      	ldr	r1, [r5, #12]
 8004192:	430a      	orrs	r2, r1
 8004194:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800419c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800419e:	f7fd fe6b 	bl	8001e78 <HAL_GetTick>
 80041a2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80041ae:	d105      	bne.n	80041bc <RCCEx_PLLSAI1_ConfigNR+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041b0:	f7fd fe62 	bl	8001e78 <HAL_GetTick>
 80041b4:	1b80      	subs	r0, r0, r6
 80041b6:	2802      	cmp	r0, #2
 80041b8:	d9f4      	bls.n	80041a4 <RCCEx_PLLSAI1_ConfigNR+0x64>
        status = HAL_TIMEOUT;
 80041ba:	2403      	movs	r4, #3
    if (status == HAL_OK)
 80041bc:	2c00      	cmp	r4, #0
 80041be:	d1d9      	bne.n	8004174 <RCCEx_PLLSAI1_ConfigNR+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c4:	6913      	ldr	r3, [r2, #16]
 80041c6:	6929      	ldr	r1, [r5, #16]
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6113      	str	r3, [r2, #16]
 80041cc:	e7d2      	b.n	8004174 <RCCEx_PLLSAI1_ConfigNR+0x34>

080041ce <HAL_RCCEx_PeriphCLKConfig>:
{
 80041ce:	b570      	push	{r4, r5, r6, lr}
 80041d0:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041d2:	6803      	ldr	r3, [r0, #0]
 80041d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80041d8:	d02a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch (PeriphClkInit->Sai1ClockSelection)
 80041da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80041dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e0:	d011      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x38>
 80041e2:	d807      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80041e4:	b963      	cbnz	r3, 8004200 <HAL_RCCEx_PeriphCLKConfig+0x32>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80041e6:	3004      	adds	r0, #4
 80041e8:	f7ff ff1c 	bl	8004024 <RCCEx_PLLSAI1_ConfigNP>
    if (ret == HAL_OK)
 80041ec:	4606      	mov	r6, r0
 80041ee:	b188      	cbz	r0, 8004214 <HAL_RCCEx_PeriphCLKConfig+0x46>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80041f0:	4605      	mov	r5, r0
 80041f2:	e01f      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch (PeriphClkInit->Sai1ClockSelection)
 80041f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f8:	d018      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80041fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041fe:	d015      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5e>
        ret = HAL_ERROR;
 8004200:	2501      	movs	r5, #1
 8004202:	462e      	mov	r6, r5
 8004204:	e016      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x66>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800420a:	68d3      	ldr	r3, [r2, #12]
 800420c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004210:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004212:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004214:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800421a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800421e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004228:	2500      	movs	r5, #0
 800422a:	e003      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x66>
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800422c:	2600      	movs	r6, #0
 800422e:	e7f1      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x46>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004230:	2500      	movs	r5, #0
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004232:	462e      	mov	r6, r5
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x84>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800423c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004240:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8004244:	f405 7540 	and.w	r5, r5, #768	; 0x300
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800424a:	42ab      	cmp	r3, r5
 800424c:	f040 80d5 	bne.w	80043fa <HAL_RCCEx_PeriphCLKConfig+0x22c>
      status = ret;
 8004250:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	f013 0f01 	tst.w	r3, #1
 8004258:	d009      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xa0>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800425a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800425c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004260:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004264:	f022 0203 	bic.w	r2, r2, #3
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	f013 0f02 	tst.w	r3, #2
 8004274:	d009      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xbc>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004276:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800427c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004280:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	f013 0f10 	tst.w	r3, #16
 8004290:	d00c      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004292:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004298:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800429c:	0c02      	lsrs	r2, r0, #16
 800429e:	0412      	lsls	r2, r2, #16
 80042a0:	ea23 0302 	bic.w	r3, r3, r2
 80042a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	f013 0f20 	tst.w	r3, #32
 80042b2:	d00c      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x100>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80042b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80042be:	0c02      	lsrs	r2, r0, #16
 80042c0:	0412      	lsls	r2, r2, #16
 80042c2:	ea23 0302 	bic.w	r3, r3, r2
 80042c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	f013 0f04 	tst.w	r3, #4
 80042d4:	d00f      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042d6:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80042d8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80042dc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80042e0:	0919      	lsrs	r1, r3, #4
 80042e2:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80042e6:	ea22 0201 	bic.w	r2, r2, r1
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	f013 0f08 	tst.w	r3, #8
 80042fc:	d00f      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004300:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004304:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004308:	0919      	lsrs	r1, r3, #4
 800430a:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800430e:	ea22 0201 	bic.w	r2, r2, r1
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004324:	d013      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004326:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800432c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004330:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800433a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800433c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004340:	f000 809c 	beq.w	800447c <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004346:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800434a:	f000 809c 	beq.w	8004486 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004354:	d017      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004356:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d005      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800435e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004362:	d002      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 8096 	bne.w	8004496 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800436a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800436e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004372:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800437c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800437e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004382:	f000 809a 	beq.w	80044ba <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800438c:	d013      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800438e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004394:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80043a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a8:	f000 808e 	beq.w	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043b2:	f000 808e 	beq.w	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x304>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80043bc:	d009      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x204>
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80043be:	6c63      	ldr	r3, [r4, #68]	; 0x44
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80043c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c4:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80043c8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80043d8:	d00d      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80043da:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80043dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043e2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80043e6:	430a      	orrs	r2, r1
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80043ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80043ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043ee:	f021 0103 	bic.w	r1, r1, #3
 80043f2:	430a      	orrs	r2, r1
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80043f6:	4628      	mov	r0, r5
 80043f8:	bd70      	pop	{r4, r5, r6, pc}
      HAL_PWR_EnableBkUpAccess();
 80043fa:	f7ff f80f 	bl	800341c <HAL_PWR_EnableBkUpAccess>
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80043fe:	b95d      	cbnz	r5, 8004418 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004400:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004406:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800440a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004414:	4635      	mov	r5, r6
 8004416:	e71c      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x84>
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004420:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004424:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004428:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800442c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004430:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004434:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004438:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800443c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800443e:	430a      	orrs	r2, r1
        LL_RCC_WriteReg(BDCR, bdcr);
 8004440:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004448:	f013 0f01 	tst.w	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800444e:	4635      	mov	r5, r6
 8004450:	e6ff      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x84>
          tickstart = HAL_GetTick();
 8004452:	f7fd fd11 	bl	8001e78 <HAL_GetTick>
 8004456:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f013 0f02 	tst.w	r3, #2
 8004464:	d108      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004466:	f7fd fd07 	bl	8001e78 <HAL_GetTick>
 800446a:	1b40      	subs	r0, r0, r5
 800446c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004470:	4298      	cmp	r0, r3
 8004472:	d9f1      	bls.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x28a>
              ret = HAL_TIMEOUT;
 8004474:	2503      	movs	r5, #3
 8004476:	e6ec      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8004478:	4635      	mov	r5, r6
 800447a:	e6ea      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800447c:	68cb      	ldr	r3, [r1, #12]
 800447e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004482:	60cb      	str	r3, [r1, #12]
 8004484:	e75e      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004486:	1d20      	adds	r0, r4, #4
 8004488:	f7ff fe13 	bl	80040b2 <RCCEx_PLLSAI1_ConfigNQ>
      if (ret != HAL_OK)
 800448c:	2800      	cmp	r0, #0
 800448e:	f43f af5e 	beq.w	800434e <HAL_RCCEx_PeriphCLKConfig+0x180>
        status = ret;
 8004492:	4605      	mov	r5, r0
 8004494:	e75b      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800449a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800449e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80044a2:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80044a6:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80044aa:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80044ae:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80044b2:	430b      	orrs	r3, r1
 80044b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80044b8:	e760      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80044ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044be:	68d3      	ldr	r3, [r2, #12]
 80044c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044c4:	60d3      	str	r3, [r2, #12]
 80044c6:	e75e      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044c8:	68cb      	ldr	r3, [r1, #12]
 80044ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ce:	60cb      	str	r3, [r1, #12]
 80044d0:	e76c      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80044d2:	1d20      	adds	r0, r4, #4
 80044d4:	f7ff fe34 	bl	8004140 <RCCEx_PLLSAI1_ConfigNR>
      if (ret != HAL_OK)
 80044d8:	2800      	cmp	r0, #0
 80044da:	f43f af6c 	beq.w	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        status = ret;
 80044de:	4605      	mov	r5, r0
 80044e0:	e769      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1e8>

080044e2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80044e2:	b538      	push	{r3, r4, r5, lr}
 80044e4:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044e6:	6802      	ldr	r2, [r0, #0]
 80044e8:	68d3      	ldr	r3, [r2, #12]
 80044ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ee:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80044f0:	f7fd fcc2 	bl	8001e78 <HAL_GetTick>
 80044f4:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f013 0f20 	tst.w	r3, #32
 80044fe:	d107      	bne.n	8004510 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004500:	f7fd fcba 	bl	8001e78 <HAL_GetTick>
 8004504:	1b40      	subs	r0, r0, r5
 8004506:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800450a:	d9f4      	bls.n	80044f6 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800450c:	2003      	movs	r0, #3
 800450e:	e000      	b.n	8004512 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8004510:	2000      	movs	r0, #0
}
 8004512:	bd38      	pop	{r3, r4, r5, pc}

08004514 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004514:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004516:	6803      	ldr	r3, [r0, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800451e:	d001      	beq.n	8004524 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004520:	2000      	movs	r0, #0
}
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004526:	f04f 32ff 	mov.w	r2, #4294967295
 800452a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800452c:	f7fd fca4 	bl	8001e78 <HAL_GetTick>
 8004530:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f013 0f40 	tst.w	r3, #64	; 0x40
 800453a:	d107      	bne.n	800454c <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800453c:	f7fd fc9c 	bl	8001e78 <HAL_GetTick>
 8004540:	1b40      	subs	r0, r0, r5
 8004542:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004546:	d9f4      	bls.n	8004532 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8004548:	2003      	movs	r0, #3
 800454a:	e7ea      	b.n	8004522 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800454c:	2000      	movs	r0, #0
 800454e:	e7e8      	b.n	8004522 <RTC_EnterInitMode+0xe>

08004550 <HAL_RTC_Init>:
{
 8004550:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8004552:	2800      	cmp	r0, #0
 8004554:	d067      	beq.n	8004626 <HAL_RTC_Init+0xd6>
 8004556:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004558:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800455c:	2b00      	cmp	r3, #0
 800455e:	d044      	beq.n	80045ea <HAL_RTC_Init+0x9a>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004560:	2302      	movs	r3, #2
 8004562:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	22ca      	movs	r2, #202	; 0xca
 800456a:	625a      	str	r2, [r3, #36]	; 0x24
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	2253      	movs	r2, #83	; 0x53
 8004570:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004572:	4620      	mov	r0, r4
 8004574:	f7ff ffce 	bl	8004514 <RTC_EnterInitMode>
 8004578:	4605      	mov	r5, r0
 800457a:	2800      	cmp	r0, #0
 800457c:	d13a      	bne.n	80045f4 <HAL_RTC_Init+0xa4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	6893      	ldr	r3, [r2, #8]
 8004582:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800458c:	6821      	ldr	r1, [r4, #0]
 800458e:	688a      	ldr	r2, [r1, #8]
 8004590:	6863      	ldr	r3, [r4, #4]
 8004592:	6920      	ldr	r0, [r4, #16]
 8004594:	4303      	orrs	r3, r0
 8004596:	69a0      	ldr	r0, [r4, #24]
 8004598:	4303      	orrs	r3, r0
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	68e2      	ldr	r2, [r4, #12]
 80045a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	6913      	ldr	r3, [r2, #16]
 80045a8:	68a1      	ldr	r1, [r4, #8]
 80045aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80045ae:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80045b0:	6822      	ldr	r2, [r4, #0]
 80045b2:	68d3      	ldr	r3, [r2, #12]
 80045b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b8:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80045c4:	6821      	ldr	r1, [r4, #0]
 80045c6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80045c8:	69e2      	ldr	r2, [r4, #28]
 80045ca:	6960      	ldr	r0, [r4, #20]
 80045cc:	4302      	orrs	r2, r0
 80045ce:	4313      	orrs	r3, r2
 80045d0:	64cb      	str	r3, [r1, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f013 0f20 	tst.w	r3, #32
 80045da:	d014      	beq.n	8004606 <HAL_RTC_Init+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	22ff      	movs	r2, #255	; 0xff
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_OK;
 80045e8:	e00b      	b.n	8004602 <HAL_RTC_Init+0xb2>
    hrtc->Lock = HAL_UNLOCKED;
 80045ea:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 80045ee:	f7fd f9c9 	bl	8001984 <HAL_RTC_MspInit>
 80045f2:	e7b5      	b.n	8004560 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	22ff      	movs	r2, #255	; 0xff
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045fa:	2304      	movs	r3, #4
 80045fc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 8004600:	2501      	movs	r5, #1
}
 8004602:	4628      	mov	r0, r5
 8004604:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004606:	4620      	mov	r0, r4
 8004608:	f7ff ff6b 	bl	80044e2 <HAL_RTC_WaitForSynchro>
 800460c:	2800      	cmp	r0, #0
 800460e:	d0e5      	beq.n	80045dc <HAL_RTC_Init+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	22ff      	movs	r2, #255	; 0xff
 8004614:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004616:	2304      	movs	r3, #4
 8004618:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800461c:	2300      	movs	r3, #0
 800461e:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8004622:	2501      	movs	r5, #1
 8004624:	e7ed      	b.n	8004602 <HAL_RTC_Init+0xb2>
     return HAL_ERROR;
 8004626:	2501      	movs	r5, #1
 8004628:	e7eb      	b.n	8004602 <HAL_RTC_Init+0xb2>

0800462a <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800462a:	0903      	lsrs	r3, r0, #4
 800462c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004630:	005a      	lsls	r2, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004632:	f000 000f 	and.w	r0, r0, #15
 8004636:	4410      	add	r0, r2
}
 8004638:	b2c0      	uxtb	r0, r0
 800463a:	4770      	bx	lr

0800463c <HAL_RTC_GetTime>:
{
 800463c:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800463e:	6803      	ldr	r3, [r0, #0]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004644:	6803      	ldr	r3, [r0, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800464c:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800464e:	6803      	ldr	r3, [r0, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004656:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800465a:	0c1d      	lsrs	r5, r3, #16
 800465c:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8004660:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8004662:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8004666:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004668:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 800466c:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800466e:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8004672:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8004674:	b95a      	cbnz	r2, 800468e <HAL_RTC_GetTime+0x52>
 8004676:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004678:	f7ff ffd7 	bl	800462a <RTC_Bcd2ToByte>
 800467c:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800467e:	4630      	mov	r0, r6
 8004680:	f7ff ffd3 	bl	800462a <RTC_Bcd2ToByte>
 8004684:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004686:	4620      	mov	r0, r4
 8004688:	f7ff ffcf 	bl	800462a <RTC_Bcd2ToByte>
 800468c:	70a8      	strb	r0, [r5, #2]
}
 800468e:	2000      	movs	r0, #0
 8004690:	bd70      	pop	{r4, r5, r6, pc}

08004692 <HAL_RTC_GetDate>:
{
 8004692:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004694:	6803      	ldr	r3, [r0, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800469c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80046a0:	0c18      	lsrs	r0, r3, #16
 80046a2:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80046a4:	f3c3 2604 	ubfx	r6, r3, #8, #5
 80046a8:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80046aa:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 80046ae:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80046b0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80046b4:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80046b6:	b95a      	cbnz	r2, 80046d0 <HAL_RTC_GetDate+0x3e>
 80046b8:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80046ba:	f7ff ffb6 	bl	800462a <RTC_Bcd2ToByte>
 80046be:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80046c0:	4630      	mov	r0, r6
 80046c2:	f7ff ffb2 	bl	800462a <RTC_Bcd2ToByte>
 80046c6:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80046c8:	4628      	mov	r0, r5
 80046ca:	f7ff ffae 	bl	800462a <RTC_Bcd2ToByte>
 80046ce:	70a0      	strb	r0, [r4, #2]
}
 80046d0:	2000      	movs	r0, #0
 80046d2:	bd70      	pop	{r4, r5, r6, pc}

080046d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d6:	6a03      	ldr	r3, [r0, #32]
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046e2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046e8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ec:	680d      	ldr	r5, [r1, #0]
 80046ee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046f0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046f4:	688d      	ldr	r5, [r1, #8]
 80046f6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046f8:	4d14      	ldr	r5, [pc, #80]	; (800474c <TIM_OC1_SetConfig+0x78>)
 80046fa:	42a8      	cmp	r0, r5
 80046fc:	d007      	beq.n	800470e <TIM_OC1_SetConfig+0x3a>
 80046fe:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8004702:	42a8      	cmp	r0, r5
 8004704:	d003      	beq.n	800470e <TIM_OC1_SetConfig+0x3a>
 8004706:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 800470a:	42a8      	cmp	r0, r5
 800470c:	d105      	bne.n	800471a <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800470e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004712:	68cd      	ldr	r5, [r1, #12]
 8004714:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004716:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471a:	4d0c      	ldr	r5, [pc, #48]	; (800474c <TIM_OC1_SetConfig+0x78>)
 800471c:	42a8      	cmp	r0, r5
 800471e:	d007      	beq.n	8004730 <TIM_OC1_SetConfig+0x5c>
 8004720:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8004724:	42a8      	cmp	r0, r5
 8004726:	d003      	beq.n	8004730 <TIM_OC1_SetConfig+0x5c>
 8004728:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800472c:	42a8      	cmp	r0, r5
 800472e:	d105      	bne.n	800473c <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004730:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004734:	694c      	ldr	r4, [r1, #20]
 8004736:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004738:	698d      	ldr	r5, [r1, #24]
 800473a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800473c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800473e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004740:	684a      	ldr	r2, [r1, #4]
 8004742:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004744:	6203      	str	r3, [r0, #32]
}
 8004746:	bc30      	pop	{r4, r5}
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40012c00 	.word	0x40012c00

08004750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004750:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004752:	6a03      	ldr	r3, [r0, #32]
 8004754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004758:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800475c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004760:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004764:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004768:	680d      	ldr	r5, [r1, #0]
 800476a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800476c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004770:	688d      	ldr	r5, [r1, #8]
 8004772:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004776:	4d12      	ldr	r5, [pc, #72]	; (80047c0 <TIM_OC3_SetConfig+0x70>)
 8004778:	42a8      	cmp	r0, r5
 800477a:	d019      	beq.n	80047b0 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477c:	4d10      	ldr	r5, [pc, #64]	; (80047c0 <TIM_OC3_SetConfig+0x70>)
 800477e:	42a8      	cmp	r0, r5
 8004780:	d007      	beq.n	8004792 <TIM_OC3_SetConfig+0x42>
 8004782:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8004786:	42a8      	cmp	r0, r5
 8004788:	d003      	beq.n	8004792 <TIM_OC3_SetConfig+0x42>
 800478a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800478e:	42a8      	cmp	r0, r5
 8004790:	d107      	bne.n	80047a2 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004792:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004796:	694d      	ldr	r5, [r1, #20]
 8004798:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800479c:	698d      	ldr	r5, [r1, #24]
 800479e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a4:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047a6:	684a      	ldr	r2, [r1, #4]
 80047a8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047aa:	6203      	str	r3, [r0, #32]
}
 80047ac:	bc30      	pop	{r4, r5}
 80047ae:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80047b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047b4:	68cd      	ldr	r5, [r1, #12]
 80047b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80047ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047be:	e7dd      	b.n	800477c <TIM_OC3_SetConfig+0x2c>
 80047c0:	40012c00 	.word	0x40012c00

080047c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047c6:	6a03      	ldr	r3, [r0, #32]
 80047c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047d2:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d8:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047dc:	680d      	ldr	r5, [r1, #0]
 80047de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047e6:	688d      	ldr	r5, [r1, #8]
 80047e8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ec:	4d0b      	ldr	r5, [pc, #44]	; (800481c <TIM_OC4_SetConfig+0x58>)
 80047ee:	42a8      	cmp	r0, r5
 80047f0:	d007      	beq.n	8004802 <TIM_OC4_SetConfig+0x3e>
 80047f2:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80047f6:	42a8      	cmp	r0, r5
 80047f8:	d003      	beq.n	8004802 <TIM_OC4_SetConfig+0x3e>
 80047fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047fe:	42a8      	cmp	r0, r5
 8004800:	d104      	bne.n	800480c <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004802:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004806:	694d      	ldr	r5, [r1, #20]
 8004808:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800480c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800480e:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004810:	684b      	ldr	r3, [r1, #4]
 8004812:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004814:	6202      	str	r2, [r0, #32]
}
 8004816:	bc30      	pop	{r4, r5}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40012c00 	.word	0x40012c00

08004820 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004820:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004822:	6a03      	ldr	r3, [r0, #32]
 8004824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004828:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800482c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800482e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004830:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004834:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	680d      	ldr	r5, [r1, #0]
 800483a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800483c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004840:	688d      	ldr	r5, [r1, #8]
 8004842:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004846:	4d0b      	ldr	r5, [pc, #44]	; (8004874 <TIM_OC5_SetConfig+0x54>)
 8004848:	42a8      	cmp	r0, r5
 800484a:	d007      	beq.n	800485c <TIM_OC5_SetConfig+0x3c>
 800484c:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8004850:	42a8      	cmp	r0, r5
 8004852:	d003      	beq.n	800485c <TIM_OC5_SetConfig+0x3c>
 8004854:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004858:	42a8      	cmp	r0, r5
 800485a:	d104      	bne.n	8004866 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800485c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004860:	694d      	ldr	r5, [r1, #20]
 8004862:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004866:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004868:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800486a:	684a      	ldr	r2, [r1, #4]
 800486c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486e:	6203      	str	r3, [r0, #32]
}
 8004870:	bc30      	pop	{r4, r5}
 8004872:	4770      	bx	lr
 8004874:	40012c00 	.word	0x40012c00

08004878 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004878:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800487a:	6a03      	ldr	r3, [r0, #32]
 800487c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004880:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004882:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004884:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004886:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004888:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800488c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004890:	680d      	ldr	r5, [r1, #0]
 8004892:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004896:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800489a:	688d      	ldr	r5, [r1, #8]
 800489c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a0:	4d0b      	ldr	r5, [pc, #44]	; (80048d0 <TIM_OC6_SetConfig+0x58>)
 80048a2:	42a8      	cmp	r0, r5
 80048a4:	d007      	beq.n	80048b6 <TIM_OC6_SetConfig+0x3e>
 80048a6:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80048aa:	42a8      	cmp	r0, r5
 80048ac:	d003      	beq.n	80048b6 <TIM_OC6_SetConfig+0x3e>
 80048ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80048b2:	42a8      	cmp	r0, r5
 80048b4:	d104      	bne.n	80048c0 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048b6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048ba:	694d      	ldr	r5, [r1, #20]
 80048bc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048c2:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048c4:	684b      	ldr	r3, [r1, #4]
 80048c6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c8:	6202      	str	r2, [r0, #32]
}
 80048ca:	bc30      	pop	{r4, r5}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40012c00 	.word	0x40012c00

080048d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048d4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d8:	6a04      	ldr	r4, [r0, #32]
 80048da:	f024 0401 	bic.w	r4, r4, #1
 80048de:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048e2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048e6:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ea:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80048ee:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048f0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80048f2:	6203      	str	r3, [r0, #32]
}
 80048f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048fa:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048fc:	6a03      	ldr	r3, [r0, #32]
 80048fe:	f023 0310 	bic.w	r3, r3, #16
 8004902:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004904:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004906:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004908:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800490c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004910:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004914:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004918:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800491a:	6203      	str	r3, [r0, #32]
}
 800491c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004920:	4770      	bx	lr

08004922 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004922:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004924:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800492c:	4319      	orrs	r1, r3
 800492e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004932:	6081      	str	r1, [r0, #8]
}
 8004934:	4770      	bx	lr
	...

08004938 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	2302      	movs	r3, #2
 800493a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800493e:	6802      	ldr	r2, [r0, #0]
 8004940:	6891      	ldr	r1, [r2, #8]
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <HAL_TIM_Base_Start+0x2c>)
 8004944:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004946:	2b06      	cmp	r3, #6
 8004948:	d006      	beq.n	8004958 <HAL_TIM_Base_Start+0x20>
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494e:	d003      	beq.n	8004958 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8004950:	6813      	ldr	r3, [r2, #0]
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004958:	2301      	movs	r3, #1
 800495a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800495e:	2000      	movs	r0, #0
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	00010007 	.word	0x00010007

08004968 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	2302      	movs	r3, #2
 800496a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800496e:	6803      	ldr	r3, [r0, #0]
 8004970:	6a19      	ldr	r1, [r3, #32]
 8004972:	f241 1211 	movw	r2, #4369	; 0x1111
 8004976:	4211      	tst	r1, r2
 8004978:	d108      	bne.n	800498c <HAL_TIM_Base_Stop+0x24>
 800497a:	6a19      	ldr	r1, [r3, #32]
 800497c:	f240 4244 	movw	r2, #1092	; 0x444
 8004980:	4211      	tst	r1, r2
 8004982:	d103      	bne.n	800498c <HAL_TIM_Base_Stop+0x24>
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800498c:	2301      	movs	r3, #1
 800498e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004992:	2000      	movs	r0, #0
 8004994:	4770      	bx	lr
	...

08004998 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004998:	6802      	ldr	r2, [r0, #0]
 800499a:	68d3      	ldr	r3, [r2, #12]
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a2:	6802      	ldr	r2, [r0, #0]
 80049a4:	6891      	ldr	r1, [r2, #8]
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <HAL_TIM_Base_Start_IT+0x28>)
 80049a8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049aa:	2b06      	cmp	r3, #6
 80049ac:	d006      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x24>
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b2:	d003      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 80049b4:	6813      	ldr	r3, [r2, #0]
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	6013      	str	r3, [r2, #0]
}
 80049bc:	2000      	movs	r0, #0
 80049be:	4770      	bx	lr
 80049c0:	00010007 	.word	0x00010007

080049c4 <HAL_TIM_PWM_MspInit>:
}
 80049c4:	4770      	bx	lr

080049c6 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_IC_CaptureCallback>:
}
 80049c8:	4770      	bx	lr

080049ca <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80049ca:	4770      	bx	lr

080049cc <HAL_TIM_TriggerCallback>:
}
 80049cc:	4770      	bx	lr

080049ce <HAL_TIM_IRQHandler>:
{
 80049ce:	b510      	push	{r4, lr}
 80049d0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049d2:	6803      	ldr	r3, [r0, #0]
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	f012 0f02 	tst.w	r2, #2
 80049da:	d011      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	f012 0f02 	tst.w	r2, #2
 80049e2:	d00d      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049e4:	f06f 0202 	mvn.w	r2, #2
 80049e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ea:	2301      	movs	r3, #1
 80049ec:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049ee:	6803      	ldr	r3, [r0, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f013 0f03 	tst.w	r3, #3
 80049f6:	d079      	beq.n	8004aec <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80049f8:	f7ff ffe6 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fc:	2300      	movs	r3, #0
 80049fe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	f012 0f04 	tst.w	r2, #4
 8004a08:	d012      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	f012 0f04 	tst.w	r2, #4
 8004a10:	d00e      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a12:	f06f 0204 	mvn.w	r2, #4
 8004a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004a24:	d068      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a26:	4620      	mov	r0, r4
 8004a28:	f7ff ffce 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	f012 0f08 	tst.w	r2, #8
 8004a38:	d012      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	f012 0f08 	tst.w	r2, #8
 8004a40:	d00e      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a42:	f06f 0208 	mvn.w	r2, #8
 8004a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a48:	2304      	movs	r3, #4
 8004a4a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f013 0f03 	tst.w	r3, #3
 8004a54:	d057      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	4620      	mov	r0, r4
 8004a58:	f7ff ffb6 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	f012 0f10 	tst.w	r2, #16
 8004a68:	d012      	beq.n	8004a90 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	f012 0f10 	tst.w	r2, #16
 8004a70:	d00e      	beq.n	8004a90 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a72:	f06f 0210 	mvn.w	r2, #16
 8004a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a78:	2308      	movs	r3, #8
 8004a7a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004a84:	d046      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	4620      	mov	r0, r4
 8004a88:	f7ff ff9e 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	f012 0f01 	tst.w	r2, #1
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	f012 0f01 	tst.w	r2, #1
 8004aa0:	d13f      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004aaa:	d003      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ab2:	d13d      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ac4:	d13b      	bne.n	8004b3e <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ace:	d003      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ad6:	d139      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	f012 0f20 	tst.w	r2, #32
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	f012 0f20 	tst.w	r2, #32
 8004ae8:	d137      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x18c>
}
 8004aea:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aec:	f7ff ff6b 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7ff ff6a 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
 8004af6:	e781      	b.n	80049fc <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af8:	4620      	mov	r0, r4
 8004afa:	f7ff ff64 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afe:	4620      	mov	r0, r4
 8004b00:	f7ff ff63 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
 8004b04:	e792      	b.n	8004a2c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	4620      	mov	r0, r4
 8004b08:	f7ff ff5d 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f7ff ff5c 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
 8004b12:	e7a3      	b.n	8004a5c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7ff ff56 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7ff ff55 	bl	80049ca <HAL_TIM_PWM_PulseFinishedCallback>
 8004b20:	e7b4      	b.n	8004a8c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b22:	f06f 0201 	mvn.w	r2, #1
 8004b26:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f7fc fe2f 	bl	800178c <HAL_TIM_PeriodElapsedCallback>
 8004b2e:	e7b8      	b.n	8004aa2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004b36:	4620      	mov	r0, r4
 8004b38:	f000 fa79 	bl	800502e <HAL_TIMEx_BreakCallback>
 8004b3c:	e7ba      	b.n	8004ab4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004b44:	4620      	mov	r0, r4
 8004b46:	f000 fa73 	bl	8005030 <HAL_TIMEx_Break2Callback>
 8004b4a:	e7bc      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b50:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004b52:	4620      	mov	r0, r4
 8004b54:	f7ff ff3a 	bl	80049cc <HAL_TIM_TriggerCallback>
 8004b58:	e7be      	b.n	8004ad8 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b5a:	f06f 0220 	mvn.w	r2, #32
 8004b5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 fa63 	bl	800502c <HAL_TIMEx_CommutCallback>
}
 8004b66:	e7c0      	b.n	8004aea <HAL_TIM_IRQHandler+0x11c>

08004b68 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004b68:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <TIM_Base_SetConfig+0x6c>)
 8004b6c:	4290      	cmp	r0, r2
 8004b6e:	d002      	beq.n	8004b76 <TIM_Base_SetConfig+0xe>
 8004b70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b74:	d103      	bne.n	8004b7e <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004b7a:	684a      	ldr	r2, [r1, #4]
 8004b7c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b7e:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <TIM_Base_SetConfig+0x6c>)
 8004b80:	4290      	cmp	r0, r2
 8004b82:	d00a      	beq.n	8004b9a <TIM_Base_SetConfig+0x32>
 8004b84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b88:	d007      	beq.n	8004b9a <TIM_Base_SetConfig+0x32>
 8004b8a:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8004b8e:	4290      	cmp	r0, r2
 8004b90:	d003      	beq.n	8004b9a <TIM_Base_SetConfig+0x32>
 8004b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b96:	4290      	cmp	r0, r2
 8004b98:	d103      	bne.n	8004ba2 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b9e:	68ca      	ldr	r2, [r1, #12]
 8004ba0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba6:	694a      	ldr	r2, [r1, #20]
 8004ba8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004baa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bac:	688b      	ldr	r3, [r1, #8]
 8004bae:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004bb0:	680b      	ldr	r3, [r1, #0]
 8004bb2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <TIM_Base_SetConfig+0x6c>)
 8004bb6:	4298      	cmp	r0, r3
 8004bb8:	d007      	beq.n	8004bca <TIM_Base_SetConfig+0x62>
 8004bba:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8004bbe:	4298      	cmp	r0, r3
 8004bc0:	d003      	beq.n	8004bca <TIM_Base_SetConfig+0x62>
 8004bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc6:	4298      	cmp	r0, r3
 8004bc8:	d101      	bne.n	8004bce <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8004bca:	690b      	ldr	r3, [r1, #16]
 8004bcc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	6143      	str	r3, [r0, #20]
}
 8004bd2:	4770      	bx	lr
 8004bd4:	40012c00 	.word	0x40012c00

08004bd8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004bd8:	b1a8      	cbz	r0, 8004c06 <HAL_TIM_Base_Init+0x2e>
{
 8004bda:	b510      	push	{r4, lr}
 8004bdc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004bde:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004be2:	b15b      	cbz	r3, 8004bfc <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	2302      	movs	r3, #2
 8004be6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bea:	1d21      	adds	r1, r4, #4
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	f7ff ffbb 	bl	8004b68 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004bf8:	2000      	movs	r0, #0
}
 8004bfa:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004bfc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004c00:	f7fc ffe2 	bl	8001bc8 <HAL_TIM_Base_MspInit>
 8004c04:	e7ee      	b.n	8004be4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004c06:	2001      	movs	r0, #1
}
 8004c08:	4770      	bx	lr

08004c0a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004c0a:	b1a8      	cbz	r0, 8004c38 <HAL_TIM_PWM_Init+0x2e>
{
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004c10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c14:	b15b      	cbz	r3, 8004c2e <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c16:	2302      	movs	r3, #2
 8004c18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c1c:	1d21      	adds	r1, r4, #4
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	f7ff ffa2 	bl	8004b68 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004c2a:	2000      	movs	r0, #0
}
 8004c2c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004c2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004c32:	f7ff fec7 	bl	80049c4 <HAL_TIM_PWM_MspInit>
 8004c36:	e7ee      	b.n	8004c16 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004c38:	2001      	movs	r0, #1
}
 8004c3a:	4770      	bx	lr

08004c3c <TIM_OC2_SetConfig>:
{
 8004c3c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3e:	6a03      	ldr	r3, [r0, #32]
 8004c40:	f023 0310 	bic.w	r3, r3, #16
 8004c44:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004c46:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004c48:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004c4a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c4c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004c50:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c54:	680d      	ldr	r5, [r1, #0]
 8004c56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004c5a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c5e:	688d      	ldr	r5, [r1, #8]
 8004c60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c64:	4d12      	ldr	r5, [pc, #72]	; (8004cb0 <TIM_OC2_SetConfig+0x74>)
 8004c66:	42a8      	cmp	r0, r5
 8004c68:	d019      	beq.n	8004c9e <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c6a:	4d11      	ldr	r5, [pc, #68]	; (8004cb0 <TIM_OC2_SetConfig+0x74>)
 8004c6c:	42a8      	cmp	r0, r5
 8004c6e:	d007      	beq.n	8004c80 <TIM_OC2_SetConfig+0x44>
 8004c70:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8004c74:	42a8      	cmp	r0, r5
 8004c76:	d003      	beq.n	8004c80 <TIM_OC2_SetConfig+0x44>
 8004c78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c7c:	42a8      	cmp	r0, r5
 8004c7e:	d107      	bne.n	8004c90 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c80:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c84:	694d      	ldr	r5, [r1, #20]
 8004c86:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c8a:	698d      	ldr	r5, [r1, #24]
 8004c8c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004c90:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004c92:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004c94:	684a      	ldr	r2, [r1, #4]
 8004c96:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004c98:	6203      	str	r3, [r0, #32]
}
 8004c9a:	bc30      	pop	{r4, r5}
 8004c9c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ca2:	68cd      	ldr	r5, [r1, #12]
 8004ca4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cac:	e7dd      	b.n	8004c6a <TIM_OC2_SetConfig+0x2e>
 8004cae:	bf00      	nop
 8004cb0:	40012c00 	.word	0x40012c00

08004cb4 <HAL_TIM_PWM_ConfigChannel>:
{
 8004cb4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004cb6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	f000 8092 	beq.w	8004de4 <HAL_TIM_PWM_ConfigChannel+0x130>
 8004cc0:	460d      	mov	r5, r1
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8004cd0:	2a14      	cmp	r2, #20
 8004cd2:	d81e      	bhi.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8004cd4:	e8df f002 	tbb	[pc, r2]
 8004cd8:	1d1d1d0b 	.word	0x1d1d1d0b
 8004cdc:	1d1d1d24 	.word	0x1d1d1d24
 8004ce0:	1d1d1d38 	.word	0x1d1d1d38
 8004ce4:	1d1d1d4b 	.word	0x1d1d1d4b
 8004ce8:	1d1d1d5f 	.word	0x1d1d1d5f
 8004cec:	72          	.byte	0x72
 8004ced:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cee:	6800      	ldr	r0, [r0, #0]
 8004cf0:	f7ff fcf0 	bl	80046d4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf4:	6822      	ldr	r2, [r4, #0]
 8004cf6:	6993      	ldr	r3, [r2, #24]
 8004cf8:	f043 0308 	orr.w	r3, r3, #8
 8004cfc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cfe:	6822      	ldr	r2, [r4, #0]
 8004d00:	6993      	ldr	r3, [r2, #24]
 8004d02:	f023 0304 	bic.w	r3, r3, #4
 8004d06:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d08:	6822      	ldr	r2, [r4, #0]
 8004d0a:	6993      	ldr	r3, [r2, #24]
 8004d0c:	6929      	ldr	r1, [r5, #16]
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004d18:	2000      	movs	r0, #0
 8004d1a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d20:	6800      	ldr	r0, [r0, #0]
 8004d22:	f7ff ff8b 	bl	8004c3c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d26:	6822      	ldr	r2, [r4, #0]
 8004d28:	6993      	ldr	r3, [r2, #24]
 8004d2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d2e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	6993      	ldr	r3, [r2, #24]
 8004d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d38:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	6993      	ldr	r3, [r2, #24]
 8004d3e:	6929      	ldr	r1, [r5, #16]
 8004d40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d44:	6193      	str	r3, [r2, #24]
      break;
 8004d46:	e7e4      	b.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d48:	6800      	ldr	r0, [r0, #0]
 8004d4a:	f7ff fd01 	bl	8004750 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	69d3      	ldr	r3, [r2, #28]
 8004d52:	f043 0308 	orr.w	r3, r3, #8
 8004d56:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d58:	6822      	ldr	r2, [r4, #0]
 8004d5a:	69d3      	ldr	r3, [r2, #28]
 8004d5c:	f023 0304 	bic.w	r3, r3, #4
 8004d60:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d62:	6822      	ldr	r2, [r4, #0]
 8004d64:	69d3      	ldr	r3, [r2, #28]
 8004d66:	6929      	ldr	r1, [r5, #16]
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	61d3      	str	r3, [r2, #28]
      break;
 8004d6c:	e7d1      	b.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d6e:	6800      	ldr	r0, [r0, #0]
 8004d70:	f7ff fd28 	bl	80047c4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d74:	6822      	ldr	r2, [r4, #0]
 8004d76:	69d3      	ldr	r3, [r2, #28]
 8004d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d7c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d7e:	6822      	ldr	r2, [r4, #0]
 8004d80:	69d3      	ldr	r3, [r2, #28]
 8004d82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d86:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	69d3      	ldr	r3, [r2, #28]
 8004d8c:	6929      	ldr	r1, [r5, #16]
 8004d8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d92:	61d3      	str	r3, [r2, #28]
      break;
 8004d94:	e7bd      	b.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	f7ff fd42 	bl	8004820 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004da0:	f043 0308 	orr.w	r3, r3, #8
 8004da4:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004da6:	6822      	ldr	r2, [r4, #0]
 8004da8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004daa:	f023 0304 	bic.w	r3, r3, #4
 8004dae:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004db0:	6822      	ldr	r2, [r4, #0]
 8004db2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004db4:	6929      	ldr	r1, [r5, #16]
 8004db6:	430b      	orrs	r3, r1
 8004db8:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8004dba:	e7aa      	b.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dbc:	6800      	ldr	r0, [r0, #0]
 8004dbe:	f7ff fd5b 	bl	8004878 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004dc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dca:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004dcc:	6822      	ldr	r2, [r4, #0]
 8004dce:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004dd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dd4:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dd6:	6822      	ldr	r2, [r4, #0]
 8004dd8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004dda:	6929      	ldr	r1, [r5, #16]
 8004ddc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004de0:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8004de2:	e796      	b.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8004de4:	2002      	movs	r0, #2
 8004de6:	e79a      	b.n	8004d1e <HAL_TIM_PWM_ConfigChannel+0x6a>

08004de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004de8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dea:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dec:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004df4:	430b      	orrs	r3, r1
 8004df6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df8:	6083      	str	r3, [r0, #8]
}
 8004dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004e00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d064      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0xd2>
{
 8004e08:	b510      	push	{r4, lr}
 8004e0a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004e12:	2302      	movs	r3, #2
 8004e14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004e18:	6802      	ldr	r2, [r0, #0]
 8004e1a:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e1c:	4b2e      	ldr	r3, [pc, #184]	; (8004ed8 <HAL_TIM_ConfigClockSource+0xd8>)
 8004e1e:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8004e20:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004e22:	680b      	ldr	r3, [r1, #0]
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d04a      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0xbe>
 8004e28:	d913      	bls.n	8004e52 <HAL_TIM_ConfigClockSource+0x52>
 8004e2a:	2b60      	cmp	r3, #96	; 0x60
 8004e2c:	d03d      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0xaa>
 8004e2e:	d91e      	bls.n	8004e6e <HAL_TIM_ConfigClockSource+0x6e>
 8004e30:	2b70      	cmp	r3, #112	; 0x70
 8004e32:	d028      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x86>
 8004e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e38:	d130      	bne.n	8004e9c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8004e3a:	68cb      	ldr	r3, [r1, #12]
 8004e3c:	684a      	ldr	r2, [r1, #4]
 8004e3e:	6889      	ldr	r1, [r1, #8]
 8004e40:	6820      	ldr	r0, [r4, #0]
 8004e42:	f7ff ffd1 	bl	8004de8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e46:	6822      	ldr	r2, [r4, #0]
 8004e48:	6893      	ldr	r3, [r2, #8]
 8004e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e4e:	6093      	str	r3, [r2, #8]
      break;
 8004e50:	e024      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d006      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0x64>
 8004e56:	d904      	bls.n	8004e62 <HAL_TIM_ConfigClockSource+0x62>
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d003      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0x64>
 8004e5c:	2b30      	cmp	r3, #48	; 0x30
 8004e5e:	d001      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0x64>
 8004e60:	e01c      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x9c>
 8004e62:	b9db      	cbnz	r3, 8004e9c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e64:	4619      	mov	r1, r3
 8004e66:	6820      	ldr	r0, [r4, #0]
 8004e68:	f7ff fd5b 	bl	8004922 <TIM_ITRx_SetConfig>
      break;
 8004e6c:	e016      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8004e6e:	2b50      	cmp	r3, #80	; 0x50
 8004e70:	d114      	bne.n	8004e9c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	68ca      	ldr	r2, [r1, #12]
 8004e74:	6849      	ldr	r1, [r1, #4]
 8004e76:	6820      	ldr	r0, [r4, #0]
 8004e78:	f7ff fd2c 	bl	80048d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e7c:	2150      	movs	r1, #80	; 0x50
 8004e7e:	6820      	ldr	r0, [r4, #0]
 8004e80:	f7ff fd4f 	bl	8004922 <TIM_ITRx_SetConfig>
      break;
 8004e84:	e00a      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8004e86:	68cb      	ldr	r3, [r1, #12]
 8004e88:	684a      	ldr	r2, [r1, #4]
 8004e8a:	6889      	ldr	r1, [r1, #8]
 8004e8c:	6820      	ldr	r0, [r4, #0]
 8004e8e:	f7ff ffab 	bl	8004de8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e92:	6822      	ldr	r2, [r4, #0]
 8004e94:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004e9a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004ea8:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eaa:	68ca      	ldr	r2, [r1, #12]
 8004eac:	6849      	ldr	r1, [r1, #4]
 8004eae:	6820      	ldr	r0, [r4, #0]
 8004eb0:	f7ff fd23 	bl	80048fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb4:	2160      	movs	r1, #96	; 0x60
 8004eb6:	6820      	ldr	r0, [r4, #0]
 8004eb8:	f7ff fd33 	bl	8004922 <TIM_ITRx_SetConfig>
      break;
 8004ebc:	e7ee      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	68ca      	ldr	r2, [r1, #12]
 8004ec0:	6849      	ldr	r1, [r1, #4]
 8004ec2:	6820      	ldr	r0, [r4, #0]
 8004ec4:	f7ff fd06 	bl	80048d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec8:	2140      	movs	r1, #64	; 0x40
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	f7ff fd29 	bl	8004922 <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e7e4      	b.n	8004e9c <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8004ed2:	2002      	movs	r0, #2
}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	ffce0088 	.word	0xffce0088

08004edc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004edc:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ede:	f001 011f 	and.w	r1, r1, #31
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ee8:	6a03      	ldr	r3, [r0, #32]
 8004eea:	ea23 0304 	bic.w	r3, r3, r4
 8004eee:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ef0:	6a03      	ldr	r3, [r0, #32]
 8004ef2:	408a      	lsls	r2, r1
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	6203      	str	r3, [r0, #32]
}
 8004ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <HAL_TIM_PWM_Start>:
{
 8004f00:	b510      	push	{r4, lr}
 8004f02:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f04:	2201      	movs	r2, #1
 8004f06:	6800      	ldr	r0, [r0, #0]
 8004f08:	f7ff ffe8 	bl	8004edc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	4a0f      	ldr	r2, [pc, #60]	; (8004f4c <HAL_TIM_PWM_Start+0x4c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d007      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x24>
 8004f14:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x24>
 8004f1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d103      	bne.n	8004f2c <HAL_TIM_PWM_Start+0x2c>
    __HAL_TIM_MOE_ENABLE(htim);
 8004f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f2a:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2c:	6822      	ldr	r2, [r4, #0]
 8004f2e:	6891      	ldr	r1, [r2, #8]
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <HAL_TIM_PWM_Start+0x50>)
 8004f32:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f34:	2b06      	cmp	r3, #6
 8004f36:	d006      	beq.n	8004f46 <HAL_TIM_PWM_Start+0x46>
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_ENABLE(htim);
 8004f3e:	6813      	ldr	r3, [r2, #0]
 8004f40:	f043 0301 	orr.w	r3, r3, #1
 8004f44:	6013      	str	r3, [r2, #0]
}
 8004f46:	2000      	movs	r0, #0
 8004f48:	bd10      	pop	{r4, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	00010007 	.word	0x00010007

08004f54 <HAL_TIM_PWM_Stop>:
{
 8004f54:	b510      	push	{r4, lr}
 8004f56:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f58:	2200      	movs	r2, #0
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	f7ff ffbe 	bl	8004edc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <HAL_TIM_PWM_Stop+0x6c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d01b      	beq.n	8004fa0 <HAL_TIM_PWM_Stop+0x4c>
 8004f68:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d017      	beq.n	8004fa0 <HAL_TIM_PWM_Stop+0x4c>
 8004f70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d013      	beq.n	8004fa0 <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	6a19      	ldr	r1, [r3, #32]
 8004f7c:	f241 1211 	movw	r2, #4369	; 0x1111
 8004f80:	4211      	tst	r1, r2
 8004f82:	d108      	bne.n	8004f96 <HAL_TIM_PWM_Stop+0x42>
 8004f84:	6a19      	ldr	r1, [r3, #32]
 8004f86:	f240 4244 	movw	r2, #1092	; 0x444
 8004f8a:	4211      	tst	r1, r2
 8004f8c:	d103      	bne.n	8004f96 <HAL_TIM_PWM_Stop+0x42>
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8004fa0:	6a19      	ldr	r1, [r3, #32]
 8004fa2:	f241 1211 	movw	r2, #4369	; 0x1111
 8004fa6:	4211      	tst	r1, r2
 8004fa8:	d1e6      	bne.n	8004f78 <HAL_TIM_PWM_Stop+0x24>
 8004faa:	6a19      	ldr	r1, [r3, #32]
 8004fac:	f240 4244 	movw	r2, #1092	; 0x444
 8004fb0:	4211      	tst	r1, r2
 8004fb2:	d1e1      	bne.n	8004f78 <HAL_TIM_PWM_Stop+0x24>
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fba:	645a      	str	r2, [r3, #68]	; 0x44
 8004fbc:	e7dc      	b.n	8004f78 <HAL_TIM_PWM_Stop+0x24>
 8004fbe:	bf00      	nop
 8004fc0:	40012c00 	.word	0x40012c00

08004fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fc4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d02b      	beq.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8004fcc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fda:	6802      	ldr	r2, [r0, #0]
 8004fdc:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fde:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fe0:	4c11      	ldr	r4, [pc, #68]	; (8005028 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004fe2:	42a2      	cmp	r2, r4
 8004fe4:	d019      	beq.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0x56>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fea:	680c      	ldr	r4, [r1, #0]
 8004fec:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fee:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff0:	6803      	ldr	r3, [r0, #0]
 8004ff2:	4a0d      	ldr	r2, [pc, #52]	; (8005028 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d002      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffc:	d104      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ffe:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005002:	688a      	ldr	r2, [r1, #8]
 8005004:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005006:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005008:	2301      	movs	r3, #1
 800500a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800500e:	2300      	movs	r3, #0
 8005010:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005014:	4618      	mov	r0, r3
}
 8005016:	bc30      	pop	{r4, r5}
 8005018:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 800501a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800501e:	684c      	ldr	r4, [r1, #4]
 8005020:	4323      	orrs	r3, r4
 8005022:	e7e0      	b.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8005024:	2002      	movs	r0, #2
}
 8005026:	4770      	bx	lr
 8005028:	40012c00 	.word	0x40012c00

0800502c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800502c:	4770      	bx	lr

0800502e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800502e:	4770      	bx	lr

08005030 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005030:	4770      	bx	lr

08005032 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005032:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005036:	2b21      	cmp	r3, #33	; 0x21
 8005038:	d000      	beq.n	800503c <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800503a:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800503c:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8005040:	b29b      	uxth	r3, r3
 8005042:	b16b      	cbz	r3, 8005060 <UART_TxISR_8BIT+0x2e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005044:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	6803      	ldr	r3, [r0, #0]
 800504a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800504c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800504e:	3301      	adds	r3, #1
 8005050:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8005052:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8005056:	3b01      	subs	r3, #1
 8005058:	b29b      	uxth	r3, r3
 800505a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 800505e:	e7ec      	b.n	800503a <UART_TxISR_8BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005060:	6802      	ldr	r2, [r0, #0]
 8005062:	6813      	ldr	r3, [r2, #0]
 8005064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005068:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800506a:	6802      	ldr	r2, [r0, #0]
 800506c:	6813      	ldr	r3, [r2, #0]
 800506e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	4770      	bx	lr

08005076 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005076:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800507a:	2b21      	cmp	r3, #33	; 0x21
 800507c:	d000      	beq.n	8005080 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800507e:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8005080:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8005084:	b29b      	uxth	r3, r3
 8005086:	b17b      	cbz	r3, 80050a8 <UART_TxISR_16BIT+0x32>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005088:	6d03      	ldr	r3, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	6802      	ldr	r2, [r0, #0]
 800508e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005092:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005094:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005096:	3302      	adds	r3, #2
 8005098:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800509a:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 80050a6:	e7ea      	b.n	800507e <UART_TxISR_16BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80050a8:	6802      	ldr	r2, [r0, #0]
 80050aa:	6813      	ldr	r3, [r2, #0]
 80050ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b0:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050b2:	6802      	ldr	r2, [r0, #0]
 80050b4:	6813      	ldr	r3, [r2, #0]
 80050b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4770      	bx	lr

080050be <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050be:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80050c2:	2b21      	cmp	r3, #33	; 0x21
 80050c4:	d000      	beq.n	80050c8 <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 80050c6:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80050c8:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80050cc:	e00c      	b.n	80050e8 <UART_TxISR_8BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80050ce:	6802      	ldr	r2, [r0, #0]
 80050d0:	6893      	ldr	r3, [r2, #8]
 80050d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050d6:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050d8:	6802      	ldr	r2, [r0, #0]
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e0:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 80050e2:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ec      	beq.n	80050c6 <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 80050ec:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80050f0:	b292      	uxth	r2, r2
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	d0eb      	beq.n	80050ce <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80050f6:	6802      	ldr	r2, [r0, #0]
 80050f8:	69d1      	ldr	r1, [r2, #28]
 80050fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80050fe:	d0f1      	beq.n	80050e4 <UART_TxISR_8BIT_FIFOEN+0x26>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005100:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005102:	7809      	ldrb	r1, [r1, #0]
 8005104:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 8005106:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005108:	3201      	adds	r2, #1
 800510a:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800510c:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8005110:	3a01      	subs	r2, #1
 8005112:	b292      	uxth	r2, r2
 8005114:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8005118:	e7e4      	b.n	80050e4 <UART_TxISR_8BIT_FIFOEN+0x26>

0800511a <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800511a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800511e:	2b21      	cmp	r3, #33	; 0x21
 8005120:	d000      	beq.n	8005124 <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005122:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005124:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8005128:	e00c      	b.n	8005144 <UART_TxISR_16BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800512a:	6802      	ldr	r2, [r0, #0]
 800512c:	6893      	ldr	r3, [r2, #8]
 800512e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005132:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005134:	6802      	ldr	r2, [r0, #0]
 8005136:	6813      	ldr	r3, [r2, #0]
 8005138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800513c:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 800513e:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005140:	3b01      	subs	r3, #1
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ec      	beq.n	8005122 <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8005148:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800514c:	b292      	uxth	r2, r2
 800514e:	2a00      	cmp	r2, #0
 8005150:	d0eb      	beq.n	800512a <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005152:	6802      	ldr	r2, [r0, #0]
 8005154:	69d1      	ldr	r1, [r2, #28]
 8005156:	f011 0f80 	tst.w	r1, #128	; 0x80
 800515a:	d0f1      	beq.n	8005140 <UART_TxISR_16BIT_FIFOEN+0x26>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800515c:	6d01      	ldr	r1, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800515e:	8809      	ldrh	r1, [r1, #0]
 8005160:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005164:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005166:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005168:	3202      	adds	r2, #2
 800516a:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800516c:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8005170:	3a01      	subs	r2, #1
 8005172:	b292      	uxth	r2, r2
 8005174:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8005178:	e7e2      	b.n	8005140 <UART_TxISR_16BIT_FIFOEN+0x26>
	...

0800517c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800517c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005180:	2b20      	cmp	r3, #32
 8005182:	d146      	bne.n	8005212 <HAL_UART_Transmit_IT+0x96>
    if ((pData == NULL) || (Size == 0U))
 8005184:	2900      	cmp	r1, #0
 8005186:	d046      	beq.n	8005216 <HAL_UART_Transmit_IT+0x9a>
 8005188:	2a00      	cmp	r2, #0
 800518a:	d046      	beq.n	800521a <HAL_UART_Transmit_IT+0x9e>
    __HAL_LOCK(huart);
 800518c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d044      	beq.n	800521e <HAL_UART_Transmit_IT+0xa2>
 8005194:	2301      	movs	r3, #1
 8005196:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 800519a:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800519c:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80051a0:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->TxISR       = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	6703      	str	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ac:	2321      	movs	r3, #33	; 0x21
 80051ae:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80051b2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80051b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b8:	d00f      	beq.n	80051da <HAL_UART_Transmit_IT+0x5e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ba:	6883      	ldr	r3, [r0, #8]
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c0:	d021      	beq.n	8005206 <HAL_UART_Transmit_IT+0x8a>
        huart->TxISR = UART_TxISR_8BIT;
 80051c2:	4b18      	ldr	r3, [pc, #96]	; (8005224 <HAL_UART_Transmit_IT+0xa8>)
 80051c4:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 80051c6:	2300      	movs	r3, #0
 80051c8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80051cc:	6801      	ldr	r1, [r0, #0]
 80051ce:	680a      	ldr	r2, [r1, #0]
 80051d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051d4:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80051d6:	4618      	mov	r0, r3
 80051d8:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051da:	6883      	ldr	r3, [r0, #8]
 80051dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e0:	d00b      	beq.n	80051fa <HAL_UART_Transmit_IT+0x7e>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <HAL_UART_Transmit_IT+0xac>)
 80051e4:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 80051e6:	2300      	movs	r3, #0
 80051e8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80051ec:	6801      	ldr	r1, [r0, #0]
 80051ee:	688a      	ldr	r2, [r1, #8]
 80051f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80051f4:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 80051f6:	4618      	mov	r0, r3
 80051f8:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051fa:	6903      	ldr	r3, [r0, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f0      	bne.n	80051e2 <HAL_UART_Transmit_IT+0x66>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <HAL_UART_Transmit_IT+0xb0>)
 8005202:	6703      	str	r3, [r0, #112]	; 0x70
 8005204:	e7ef      	b.n	80051e6 <HAL_UART_Transmit_IT+0x6a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005206:	6903      	ldr	r3, [r0, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1da      	bne.n	80051c2 <HAL_UART_Transmit_IT+0x46>
        huart->TxISR = UART_TxISR_16BIT;
 800520c:	4b08      	ldr	r3, [pc, #32]	; (8005230 <HAL_UART_Transmit_IT+0xb4>)
 800520e:	6703      	str	r3, [r0, #112]	; 0x70
 8005210:	e7d9      	b.n	80051c6 <HAL_UART_Transmit_IT+0x4a>
    return HAL_BUSY;
 8005212:	2002      	movs	r0, #2
 8005214:	4770      	bx	lr
      return HAL_ERROR;
 8005216:	2001      	movs	r0, #1
 8005218:	4770      	bx	lr
 800521a:	2001      	movs	r0, #1
 800521c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800521e:	2002      	movs	r0, #2
}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	08005033 	.word	0x08005033
 8005228:	080050bf 	.word	0x080050bf
 800522c:	0800511b 	.word	0x0800511b
 8005230:	08005077 	.word	0x08005077

08005234 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005234:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005238:	2b20      	cmp	r3, #32
 800523a:	d17f      	bne.n	800533c <HAL_UART_Receive_IT+0x108>
    if ((pData == NULL) || (Size == 0U))
 800523c:	2900      	cmp	r1, #0
 800523e:	d07f      	beq.n	8005340 <HAL_UART_Receive_IT+0x10c>
 8005240:	2a00      	cmp	r2, #0
 8005242:	d07f      	beq.n	8005344 <HAL_UART_Receive_IT+0x110>
    __HAL_LOCK(huart);
 8005244:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d07d      	beq.n	8005348 <HAL_UART_Receive_IT+0x114>
 800524c:	2301      	movs	r3, #1
 800524e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->pRxBuffPtr  = pData;
 8005252:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize  = Size;
 8005254:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005258:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	66c3      	str	r3, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 8005260:	6883      	ldr	r3, [r0, #8]
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005266:	d006      	beq.n	8005276 <HAL_UART_Receive_IT+0x42>
 8005268:	b9a3      	cbnz	r3, 8005294 <HAL_UART_Receive_IT+0x60>
 800526a:	6903      	ldr	r3, [r0, #16]
 800526c:	b973      	cbnz	r3, 800528c <HAL_UART_Receive_IT+0x58>
 800526e:	23ff      	movs	r3, #255	; 0xff
 8005270:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005274:	e014      	b.n	80052a0 <HAL_UART_Receive_IT+0x6c>
 8005276:	6903      	ldr	r3, [r0, #16]
 8005278:	b923      	cbnz	r3, 8005284 <HAL_UART_Receive_IT+0x50>
 800527a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800527e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005282:	e00d      	b.n	80052a0 <HAL_UART_Receive_IT+0x6c>
 8005284:	23ff      	movs	r3, #255	; 0xff
 8005286:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800528a:	e009      	b.n	80052a0 <HAL_UART_Receive_IT+0x6c>
 800528c:	237f      	movs	r3, #127	; 0x7f
 800528e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005292:	e005      	b.n	80052a0 <HAL_UART_Receive_IT+0x6c>
 8005294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005298:	d021      	beq.n	80052de <HAL_UART_Receive_IT+0xaa>
 800529a:	2300      	movs	r3, #0
 800529c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a0:	2300      	movs	r3, #0
 80052a2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052a6:	2322      	movs	r3, #34	; 0x22
 80052a8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ac:	6801      	ldr	r1, [r0, #0]
 80052ae:	688b      	ldr	r3, [r1, #8]
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80052b6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80052b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052bc:	d019      	beq.n	80052f2 <HAL_UART_Receive_IT+0xbe>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052be:	6883      	ldr	r3, [r0, #8]
 80052c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c4:	d034      	beq.n	8005330 <HAL_UART_Receive_IT+0xfc>
        huart->RxISR = UART_RxISR_8BIT;
 80052c6:	4b21      	ldr	r3, [pc, #132]	; (800534c <HAL_UART_Receive_IT+0x118>)
 80052c8:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 80052ca:	2300      	movs	r3, #0
 80052cc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80052d0:	6801      	ldr	r1, [r0, #0]
 80052d2:	680a      	ldr	r2, [r1, #0]
 80052d4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80052d8:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80052da:	4618      	mov	r0, r3
 80052dc:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80052de:	6903      	ldr	r3, [r0, #16]
 80052e0:	b91b      	cbnz	r3, 80052ea <HAL_UART_Receive_IT+0xb6>
 80052e2:	237f      	movs	r3, #127	; 0x7f
 80052e4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80052e8:	e7da      	b.n	80052a0 <HAL_UART_Receive_IT+0x6c>
 80052ea:	233f      	movs	r3, #63	; 0x3f
 80052ec:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80052f0:	e7d6      	b.n	80052a0 <HAL_UART_Receive_IT+0x6c>
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80052f2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d8e1      	bhi.n	80052be <HAL_UART_Receive_IT+0x8a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052fa:	6883      	ldr	r3, [r0, #8]
 80052fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005300:	d010      	beq.n	8005324 <HAL_UART_Receive_IT+0xf0>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005302:	4b13      	ldr	r3, [pc, #76]	; (8005350 <HAL_UART_Receive_IT+0x11c>)
 8005304:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 8005306:	2300      	movs	r3, #0
 8005308:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800530c:	6801      	ldr	r1, [r0, #0]
 800530e:	680a      	ldr	r2, [r1, #0]
 8005310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005314:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005316:	6801      	ldr	r1, [r0, #0]
 8005318:	688a      	ldr	r2, [r1, #8]
 800531a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800531e:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 8005320:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005322:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005324:	6903      	ldr	r3, [r0, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1eb      	bne.n	8005302 <HAL_UART_Receive_IT+0xce>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <HAL_UART_Receive_IT+0x120>)
 800532c:	66c3      	str	r3, [r0, #108]	; 0x6c
 800532e:	e7ea      	b.n	8005306 <HAL_UART_Receive_IT+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	6903      	ldr	r3, [r0, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1c7      	bne.n	80052c6 <HAL_UART_Receive_IT+0x92>
        huart->RxISR = UART_RxISR_16BIT;
 8005336:	4b08      	ldr	r3, [pc, #32]	; (8005358 <HAL_UART_Receive_IT+0x124>)
 8005338:	66c3      	str	r3, [r0, #108]	; 0x6c
 800533a:	e7c6      	b.n	80052ca <HAL_UART_Receive_IT+0x96>
    return HAL_BUSY;
 800533c:	2002      	movs	r0, #2
 800533e:	4770      	bx	lr
      return HAL_ERROR;
 8005340:	2001      	movs	r0, #1
 8005342:	4770      	bx	lr
 8005344:	2001      	movs	r0, #1
 8005346:	4770      	bx	lr
    __HAL_LOCK(huart);
 8005348:	2002      	movs	r0, #2
}
 800534a:	4770      	bx	lr
 800534c:	0800535d 	.word	0x0800535d
 8005350:	08005429 	.word	0x08005429
 8005354:	080054d5 	.word	0x080054d5
 8005358:	080053c3 	.word	0x080053c3

0800535c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800535c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800535e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005362:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005366:	2a22      	cmp	r2, #34	; 0x22
 8005368:	d005      	beq.n	8005376 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800536a:	6802      	ldr	r2, [r0, #0]
 800536c:	6993      	ldr	r3, [r2, #24]
 800536e:	f043 0308 	orr.w	r3, r3, #8
 8005372:	6193      	str	r3, [r2, #24]
  }
}
 8005374:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005376:	6802      	ldr	r2, [r0, #0]
 8005378:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800537a:	b2db      	uxtb	r3, r3
 800537c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800537e:	400b      	ands	r3, r1
 8005380:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005382:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005384:	3301      	adds	r3, #1
 8005386:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005388:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800538c:	3b01      	subs	r3, #1
 800538e:	b29b      	uxth	r3, r3
 8005390:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005394:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1ea      	bne.n	8005374 <UART_RxISR_8BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800539e:	6802      	ldr	r2, [r0, #0]
 80053a0:	6813      	ldr	r3, [r2, #0]
 80053a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053a6:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a8:	6802      	ldr	r2, [r0, #0]
 80053aa:	6893      	ldr	r3, [r2, #8]
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80053b2:	2320      	movs	r3, #32
 80053b4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      huart->RxISR = NULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 80053bc:	f7fb fff6 	bl	80013ac <HAL_UART_RxCpltCallback>
 80053c0:	e7d8      	b.n	8005374 <UART_RxISR_8BIT+0x18>

080053c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053c2:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80053c4:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053c8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80053cc:	2b22      	cmp	r3, #34	; 0x22
 80053ce:	d005      	beq.n	80053dc <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053d0:	6802      	ldr	r2, [r0, #0]
 80053d2:	6993      	ldr	r3, [r2, #24]
 80053d4:	f043 0308 	orr.w	r3, r3, #8
 80053d8:	6193      	str	r3, [r2, #24]
  }
}
 80053da:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053dc:	6803      	ldr	r3, [r0, #0]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053e0:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80053e2:	4013      	ands	r3, r2
 80053e4:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80053e6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80053e8:	3302      	adds	r3, #2
 80053ea:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80053ec:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80053f8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1eb      	bne.n	80053da <UART_RxISR_16BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005402:	6802      	ldr	r2, [r0, #0]
 8005404:	6813      	ldr	r3, [r2, #0]
 8005406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800540a:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540c:	6802      	ldr	r2, [r0, #0]
 800540e:	6893      	ldr	r3, [r2, #8]
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8005416:	2320      	movs	r3, #32
 8005418:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      huart->RxISR = NULL;
 800541c:	2300      	movs	r3, #0
 800541e:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 8005420:	f7fb ffc4 	bl	80013ac <HAL_UART_RxCpltCallback>
 8005424:	e7d9      	b.n	80053da <UART_RxISR_16BIT+0x18>
	...

08005428 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005428:	b570      	push	{r4, r5, r6, lr}
  uint16_t  uhMask = huart->Mask;
 800542a:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800542e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005432:	2b22      	cmp	r3, #34	; 0x22
 8005434:	d005      	beq.n	8005442 <UART_RxISR_8BIT_FIFOEN+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005436:	6802      	ldr	r2, [r0, #0]
 8005438:	6993      	ldr	r3, [r2, #24]
 800543a:	f043 0308 	orr.w	r3, r3, #8
 800543e:	6193      	str	r3, [r2, #24]
  }
}
 8005440:	bd70      	pop	{r4, r5, r6, pc}
 8005442:	4604      	mov	r4, r0
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005444:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
 8005448:	e001      	b.n	800544e <UART_RxISR_8BIT_FIFOEN+0x26>
 800544a:	3e01      	subs	r6, #1
 800544c:	b2b6      	uxth	r6, r6
 800544e:	b346      	cbz	r6, 80054a2 <UART_RxISR_8BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005454:	b2eb      	uxtb	r3, r5
 8005456:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005458:	400b      	ands	r3, r1
 800545a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800545c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800545e:	3301      	adds	r3, #1
 8005460:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005462:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005466:	3b01      	subs	r3, #1
 8005468:	b29b      	uxth	r3, r3
 800546a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800546e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e8      	bne.n	800544a <UART_RxISR_8BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005478:	6822      	ldr	r2, [r4, #0]
 800547a:	6813      	ldr	r3, [r2, #0]
 800547c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005480:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	6893      	ldr	r3, [r2, #8]
 8005486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800548a:	f023 0301 	bic.w	r3, r3, #1
 800548e:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8005490:	2320      	movs	r3, #32
 8005492:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800549a:	4620      	mov	r0, r4
 800549c:	f7fb ff86 	bl	80013ac <HAL_UART_RxCpltCallback>
 80054a0:	e7d3      	b.n	800544a <UART_RxISR_8BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 80054a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80054a6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0c9      	beq.n	8005440 <UART_RxISR_8BIT_FIFOEN+0x18>
 80054ac:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d9c5      	bls.n	8005440 <UART_RxISR_8BIT_FIFOEN+0x18>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054b4:	6822      	ldr	r2, [r4, #0]
 80054b6:	6893      	ldr	r3, [r2, #8]
 80054b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054bc:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 80054be:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <UART_RxISR_8BIT_FIFOEN+0xa8>)
 80054c0:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	6813      	ldr	r3, [r2, #0]
 80054c6:	f043 0320 	orr.w	r3, r3, #32
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	e7b8      	b.n	8005440 <UART_RxISR_8BIT_FIFOEN+0x18>
 80054ce:	bf00      	nop
 80054d0:	0800535d 	.word	0x0800535d

080054d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054d4:	b570      	push	{r4, r5, r6, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80054d6:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054da:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80054de:	2b22      	cmp	r3, #34	; 0x22
 80054e0:	d005      	beq.n	80054ee <UART_RxISR_16BIT_FIFOEN+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054e2:	6802      	ldr	r2, [r0, #0]
 80054e4:	6993      	ldr	r3, [r2, #24]
 80054e6:	f043 0308 	orr.w	r3, r3, #8
 80054ea:	6193      	str	r3, [r2, #24]
  }
}
 80054ec:	bd70      	pop	{r4, r5, r6, pc}
 80054ee:	4604      	mov	r4, r0
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80054f0:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 80054f4:	e001      	b.n	80054fa <UART_RxISR_16BIT_FIFOEN+0x26>
 80054f6:	3d01      	subs	r5, #1
 80054f8:	b2ad      	uxth	r5, r5
 80054fa:	b33d      	cbz	r5, 800554c <UART_RxISR_16BIT_FIFOEN+0x78>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005500:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8005502:	4033      	ands	r3, r6
 8005504:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8005506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005508:	3302      	adds	r3, #2
 800550a:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800550c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005510:	3b01      	subs	r3, #1
 8005512:	b29b      	uxth	r3, r3
 8005514:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8005518:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e9      	bne.n	80054f6 <UART_RxISR_16BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	6813      	ldr	r3, [r2, #0]
 8005526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800552a:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	6893      	ldr	r3, [r2, #8]
 8005530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800553a:	2320      	movs	r3, #32
 800553c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8005544:	4620      	mov	r0, r4
 8005546:	f7fb ff31 	bl	80013ac <HAL_UART_RxCpltCallback>
 800554a:	e7d4      	b.n	80054f6 <UART_RxISR_16BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 800554c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005550:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0ca      	beq.n	80054ec <UART_RxISR_16BIT_FIFOEN+0x18>
 8005556:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800555a:	429a      	cmp	r2, r3
 800555c:	d9c6      	bls.n	80054ec <UART_RxISR_16BIT_FIFOEN+0x18>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	6893      	ldr	r3, [r2, #8]
 8005562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005566:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 8005568:	4b03      	ldr	r3, [pc, #12]	; (8005578 <UART_RxISR_16BIT_FIFOEN+0xa4>)
 800556a:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800556c:	6822      	ldr	r2, [r4, #0]
 800556e:	6813      	ldr	r3, [r2, #0]
 8005570:	f043 0320 	orr.w	r3, r3, #32
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e7b9      	b.n	80054ec <UART_RxISR_16BIT_FIFOEN+0x18>
 8005578:	080053c3 	.word	0x080053c3
 800557c:	00000000 	.word	0x00000000

08005580 <UART_SetConfig>:
{
 8005580:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005584:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005586:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005588:	6883      	ldr	r3, [r0, #8]
 800558a:	6902      	ldr	r2, [r0, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	6942      	ldr	r2, [r0, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	69c2      	ldr	r2, [r0, #28]
 8005594:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 8005596:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005598:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800559a:	6808      	ldr	r0, [r1, #0]
 800559c:	4aa1      	ldr	r2, [pc, #644]	; (8005824 <UART_SetConfig+0x2a4>)
 800559e:	4002      	ands	r2, r0
 80055a0:	431a      	orrs	r2, r3
 80055a2:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	6853      	ldr	r3, [r2, #4]
 80055a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055ac:	68e1      	ldr	r1, [r4, #12]
 80055ae:	430b      	orrs	r3, r1
 80055b0:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055b2:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	4b9c      	ldr	r3, [pc, #624]	; (8005828 <UART_SetConfig+0x2a8>)
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <UART_SetConfig+0x40>
    tmpreg |= huart->Init.OneBitSampling;
 80055bc:	6a23      	ldr	r3, [r4, #32]
 80055be:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055c0:	6893      	ldr	r3, [r2, #8]
 80055c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80055c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80055ca:	430b      	orrs	r3, r1
 80055cc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80055d2:	f023 030f 	bic.w	r3, r3, #15
 80055d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055d8:	430b      	orrs	r3, r1
 80055da:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	4a93      	ldr	r2, [pc, #588]	; (800582c <UART_SetConfig+0x2ac>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d019      	beq.n	8005618 <UART_SetConfig+0x98>
 80055e4:	4a90      	ldr	r2, [pc, #576]	; (8005828 <UART_SetConfig+0x2a8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d02a      	beq.n	8005640 <UART_SetConfig+0xc0>
 80055ea:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80055ec:	4a8e      	ldr	r2, [pc, #568]	; (8005828 <UART_SetConfig+0x2a8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d043      	beq.n	800567a <UART_SetConfig+0xfa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055f2:	69e3      	ldr	r3, [r4, #28]
 80055f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f8:	f000 8307 	beq.w	8005c0a <UART_SetConfig+0x68a>
    switch (clocksource)
 80055fc:	3d01      	subs	r5, #1
 80055fe:	2d07      	cmp	r5, #7
 8005600:	f200 854f 	bhi.w	80060a2 <UART_SetConfig+0xb22>
 8005604:	e8df f015 	tbh	[pc, r5, lsl #1]
 8005608:	046e041e 	.word	0x046e041e
 800560c:	04ca054d 	.word	0x04ca054d
 8005610:	054d054d 	.word	0x054d054d
 8005614:	0508054d 	.word	0x0508054d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800561c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005620:	f002 0203 	and.w	r2, r2, #3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005624:	2a03      	cmp	r2, #3
 8005626:	d809      	bhi.n	800563c <UART_SetConfig+0xbc>
 8005628:	e8df f002 	tbb	[pc, r2]
 800562c:	06230402 	.word	0x06230402
 8005630:	2501      	movs	r5, #1
 8005632:	e7db      	b.n	80055ec <UART_SetConfig+0x6c>
 8005634:	2504      	movs	r5, #4
 8005636:	e7d9      	b.n	80055ec <UART_SetConfig+0x6c>
 8005638:	2508      	movs	r5, #8
 800563a:	e7d7      	b.n	80055ec <UART_SetConfig+0x6c>
 800563c:	2510      	movs	r5, #16
 800563e:	e7d5      	b.n	80055ec <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005644:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005648:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800564c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005650:	d00b      	beq.n	800566a <UART_SetConfig+0xea>
 8005652:	d907      	bls.n	8005664 <UART_SetConfig+0xe4>
 8005654:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005658:	d00d      	beq.n	8005676 <UART_SetConfig+0xf6>
 800565a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800565e:	d106      	bne.n	800566e <UART_SetConfig+0xee>
 8005660:	2508      	movs	r5, #8
 8005662:	e7c3      	b.n	80055ec <UART_SetConfig+0x6c>
 8005664:	b91a      	cbnz	r2, 800566e <UART_SetConfig+0xee>
 8005666:	2500      	movs	r5, #0
 8005668:	e7c0      	b.n	80055ec <UART_SetConfig+0x6c>
 800566a:	2504      	movs	r5, #4
 800566c:	e7be      	b.n	80055ec <UART_SetConfig+0x6c>
 800566e:	2510      	movs	r5, #16
 8005670:	e7bc      	b.n	80055ec <UART_SetConfig+0x6c>
 8005672:	2502      	movs	r5, #2
 8005674:	e7ba      	b.n	80055ec <UART_SetConfig+0x6c>
 8005676:	2502      	movs	r5, #2
 8005678:	e7b8      	b.n	80055ec <UART_SetConfig+0x6c>
    switch (clocksource)
 800567a:	2d08      	cmp	r5, #8
 800567c:	f200 8514 	bhi.w	80060a8 <UART_SetConfig+0xb28>
 8005680:	e8df f015 	tbh	[pc, r5, lsl #1]
 8005684:	05120009 	.word	0x05120009
 8005688:	0512005a 	.word	0x0512005a
 800568c:	05120078 	.word	0x05120078
 8005690:	05120512 	.word	0x05120512
 8005694:	00af      	.short	0x00af
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005696:	f7fe fc7b 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 800569a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800569c:	b1d3      	cbz	r3, 80056d4 <UART_SetConfig+0x154>
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d036      	beq.n	8005710 <UART_SetConfig+0x190>
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d036      	beq.n	8005714 <UART_SetConfig+0x194>
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d036      	beq.n	8005718 <UART_SetConfig+0x198>
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d036      	beq.n	800571c <UART_SetConfig+0x19c>
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	d036      	beq.n	8005720 <UART_SetConfig+0x1a0>
 80056b2:	2b06      	cmp	r3, #6
 80056b4:	d036      	beq.n	8005724 <UART_SetConfig+0x1a4>
 80056b6:	2b07      	cmp	r3, #7
 80056b8:	d036      	beq.n	8005728 <UART_SetConfig+0x1a8>
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d036      	beq.n	800572c <UART_SetConfig+0x1ac>
 80056be:	2b09      	cmp	r3, #9
 80056c0:	d036      	beq.n	8005730 <UART_SetConfig+0x1b0>
 80056c2:	2b0a      	cmp	r3, #10
 80056c4:	d036      	beq.n	8005734 <UART_SetConfig+0x1b4>
 80056c6:	2b0b      	cmp	r3, #11
 80056c8:	d001      	beq.n	80056ce <UART_SetConfig+0x14e>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e003      	b.n	80056d6 <UART_SetConfig+0x156>
 80056ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056d2:	e000      	b.n	80056d6 <UART_SetConfig+0x156>
 80056d4:	2301      	movs	r3, #1
 80056d6:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 80056da:	2800      	cmp	r0, #0
 80056dc:	f000 84e6 	beq.w	80060ac <UART_SetConfig+0xb2c>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056e0:	6862      	ldr	r2, [r4, #4]
 80056e2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80056e6:	4283      	cmp	r3, r0
 80056e8:	f200 84e2 	bhi.w	80060b0 <UART_SetConfig+0xb30>
 80056ec:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80056f0:	f200 84e0 	bhi.w	80060b4 <UART_SetConfig+0xb34>
        switch (clocksource)
 80056f4:	2d08      	cmp	r5, #8
 80056f6:	f200 8285 	bhi.w	8005c04 <UART_SetConfig+0x684>
 80056fa:	e8df f015 	tbh	[pc, r5, lsl #1]
 80056fe:	00d0      	.short	0x00d0
 8005700:	012f0283 	.word	0x012f0283
 8005704:	01930283 	.word	0x01930283
 8005708:	02830283 	.word	0x02830283
 800570c:	021f0283 	.word	0x021f0283
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005710:	2302      	movs	r3, #2
 8005712:	e7e0      	b.n	80056d6 <UART_SetConfig+0x156>
 8005714:	2304      	movs	r3, #4
 8005716:	e7de      	b.n	80056d6 <UART_SetConfig+0x156>
 8005718:	2306      	movs	r3, #6
 800571a:	e7dc      	b.n	80056d6 <UART_SetConfig+0x156>
 800571c:	2308      	movs	r3, #8
 800571e:	e7da      	b.n	80056d6 <UART_SetConfig+0x156>
 8005720:	230a      	movs	r3, #10
 8005722:	e7d8      	b.n	80056d6 <UART_SetConfig+0x156>
 8005724:	230c      	movs	r3, #12
 8005726:	e7d6      	b.n	80056d6 <UART_SetConfig+0x156>
 8005728:	2310      	movs	r3, #16
 800572a:	e7d4      	b.n	80056d6 <UART_SetConfig+0x156>
 800572c:	2320      	movs	r3, #32
 800572e:	e7d2      	b.n	80056d6 <UART_SetConfig+0x156>
 8005730:	2340      	movs	r3, #64	; 0x40
 8005732:	e7d0      	b.n	80056d6 <UART_SetConfig+0x156>
 8005734:	2380      	movs	r3, #128	; 0x80
 8005736:	e7ce      	b.n	80056d6 <UART_SetConfig+0x156>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	d06f      	beq.n	800581e <UART_SetConfig+0x29e>
 800573e:	2b01      	cmp	r3, #1
 8005740:	d078      	beq.n	8005834 <UART_SetConfig+0x2b4>
 8005742:	2b02      	cmp	r3, #2
 8005744:	d078      	beq.n	8005838 <UART_SetConfig+0x2b8>
 8005746:	2b03      	cmp	r3, #3
 8005748:	d078      	beq.n	800583c <UART_SetConfig+0x2bc>
 800574a:	2b04      	cmp	r3, #4
 800574c:	d078      	beq.n	8005840 <UART_SetConfig+0x2c0>
 800574e:	2b05      	cmp	r3, #5
 8005750:	d078      	beq.n	8005844 <UART_SetConfig+0x2c4>
 8005752:	2b06      	cmp	r3, #6
 8005754:	d078      	beq.n	8005848 <UART_SetConfig+0x2c8>
 8005756:	2b07      	cmp	r3, #7
 8005758:	d078      	beq.n	800584c <UART_SetConfig+0x2cc>
 800575a:	2b08      	cmp	r3, #8
 800575c:	d078      	beq.n	8005850 <UART_SetConfig+0x2d0>
 800575e:	2b09      	cmp	r3, #9
 8005760:	d078      	beq.n	8005854 <UART_SetConfig+0x2d4>
 8005762:	2b0a      	cmp	r3, #10
 8005764:	d078      	beq.n	8005858 <UART_SetConfig+0x2d8>
 8005766:	2b0b      	cmp	r3, #11
 8005768:	d001      	beq.n	800576e <UART_SetConfig+0x1ee>
 800576a:	4831      	ldr	r0, [pc, #196]	; (8005830 <UART_SetConfig+0x2b0>)
 800576c:	e7b5      	b.n	80056da <UART_SetConfig+0x15a>
 800576e:	f24f 4024 	movw	r0, #62500	; 0xf424
 8005772:	e7b2      	b.n	80056da <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005774:	f7fe fb9e 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8005778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800577a:	b1d3      	cbz	r3, 80057b2 <UART_SetConfig+0x232>
 800577c:	2b01      	cmp	r3, #1
 800577e:	d01c      	beq.n	80057ba <UART_SetConfig+0x23a>
 8005780:	2b02      	cmp	r3, #2
 8005782:	d01c      	beq.n	80057be <UART_SetConfig+0x23e>
 8005784:	2b03      	cmp	r3, #3
 8005786:	d01c      	beq.n	80057c2 <UART_SetConfig+0x242>
 8005788:	2b04      	cmp	r3, #4
 800578a:	d01c      	beq.n	80057c6 <UART_SetConfig+0x246>
 800578c:	2b05      	cmp	r3, #5
 800578e:	d01c      	beq.n	80057ca <UART_SetConfig+0x24a>
 8005790:	2b06      	cmp	r3, #6
 8005792:	d01c      	beq.n	80057ce <UART_SetConfig+0x24e>
 8005794:	2b07      	cmp	r3, #7
 8005796:	d01c      	beq.n	80057d2 <UART_SetConfig+0x252>
 8005798:	2b08      	cmp	r3, #8
 800579a:	d01c      	beq.n	80057d6 <UART_SetConfig+0x256>
 800579c:	2b09      	cmp	r3, #9
 800579e:	d01c      	beq.n	80057da <UART_SetConfig+0x25a>
 80057a0:	2b0a      	cmp	r3, #10
 80057a2:	d01c      	beq.n	80057de <UART_SetConfig+0x25e>
 80057a4:	2b0b      	cmp	r3, #11
 80057a6:	d001      	beq.n	80057ac <UART_SetConfig+0x22c>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e003      	b.n	80057b4 <UART_SetConfig+0x234>
 80057ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057b0:	e000      	b.n	80057b4 <UART_SetConfig+0x234>
 80057b2:	2301      	movs	r3, #1
 80057b4:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80057b8:	e78f      	b.n	80056da <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80057ba:	2302      	movs	r3, #2
 80057bc:	e7fa      	b.n	80057b4 <UART_SetConfig+0x234>
 80057be:	2304      	movs	r3, #4
 80057c0:	e7f8      	b.n	80057b4 <UART_SetConfig+0x234>
 80057c2:	2306      	movs	r3, #6
 80057c4:	e7f6      	b.n	80057b4 <UART_SetConfig+0x234>
 80057c6:	2308      	movs	r3, #8
 80057c8:	e7f4      	b.n	80057b4 <UART_SetConfig+0x234>
 80057ca:	230a      	movs	r3, #10
 80057cc:	e7f2      	b.n	80057b4 <UART_SetConfig+0x234>
 80057ce:	230c      	movs	r3, #12
 80057d0:	e7f0      	b.n	80057b4 <UART_SetConfig+0x234>
 80057d2:	2310      	movs	r3, #16
 80057d4:	e7ee      	b.n	80057b4 <UART_SetConfig+0x234>
 80057d6:	2320      	movs	r3, #32
 80057d8:	e7ec      	b.n	80057b4 <UART_SetConfig+0x234>
 80057da:	2340      	movs	r3, #64	; 0x40
 80057dc:	e7ea      	b.n	80057b4 <UART_SetConfig+0x234>
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	e7e8      	b.n	80057b4 <UART_SetConfig+0x234>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80057e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d039      	beq.n	800585c <UART_SetConfig+0x2dc>
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d03a      	beq.n	8005862 <UART_SetConfig+0x2e2>
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d03b      	beq.n	8005868 <UART_SetConfig+0x2e8>
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d03c      	beq.n	800586e <UART_SetConfig+0x2ee>
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d03d      	beq.n	8005874 <UART_SetConfig+0x2f4>
 80057f8:	2b05      	cmp	r3, #5
 80057fa:	d03e      	beq.n	800587a <UART_SetConfig+0x2fa>
 80057fc:	2b06      	cmp	r3, #6
 80057fe:	d03f      	beq.n	8005880 <UART_SetConfig+0x300>
 8005800:	2b07      	cmp	r3, #7
 8005802:	d040      	beq.n	8005886 <UART_SetConfig+0x306>
 8005804:	2b08      	cmp	r3, #8
 8005806:	d041      	beq.n	800588c <UART_SetConfig+0x30c>
 8005808:	2b09      	cmp	r3, #9
 800580a:	d042      	beq.n	8005892 <UART_SetConfig+0x312>
 800580c:	2b0a      	cmp	r3, #10
 800580e:	d043      	beq.n	8005898 <UART_SetConfig+0x318>
 8005810:	2b0b      	cmp	r3, #11
 8005812:	d002      	beq.n	800581a <UART_SetConfig+0x29a>
 8005814:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005818:	e75f      	b.n	80056da <UART_SetConfig+0x15a>
 800581a:	2080      	movs	r0, #128	; 0x80
 800581c:	e75d      	b.n	80056da <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800581e:	4804      	ldr	r0, [pc, #16]	; (8005830 <UART_SetConfig+0x2b0>)
 8005820:	e75b      	b.n	80056da <UART_SetConfig+0x15a>
 8005822:	bf00      	nop
 8005824:	cfff69f3 	.word	0xcfff69f3
 8005828:	40008000 	.word	0x40008000
 800582c:	40013800 	.word	0x40013800
 8005830:	00f42400 	.word	0x00f42400
 8005834:	48ac      	ldr	r0, [pc, #688]	; (8005ae8 <UART_SetConfig+0x568>)
 8005836:	e750      	b.n	80056da <UART_SetConfig+0x15a>
 8005838:	48ac      	ldr	r0, [pc, #688]	; (8005aec <UART_SetConfig+0x56c>)
 800583a:	e74e      	b.n	80056da <UART_SetConfig+0x15a>
 800583c:	48ac      	ldr	r0, [pc, #688]	; (8005af0 <UART_SetConfig+0x570>)
 800583e:	e74c      	b.n	80056da <UART_SetConfig+0x15a>
 8005840:	48ac      	ldr	r0, [pc, #688]	; (8005af4 <UART_SetConfig+0x574>)
 8005842:	e74a      	b.n	80056da <UART_SetConfig+0x15a>
 8005844:	48ac      	ldr	r0, [pc, #688]	; (8005af8 <UART_SetConfig+0x578>)
 8005846:	e748      	b.n	80056da <UART_SetConfig+0x15a>
 8005848:	48ac      	ldr	r0, [pc, #688]	; (8005afc <UART_SetConfig+0x57c>)
 800584a:	e746      	b.n	80056da <UART_SetConfig+0x15a>
 800584c:	48ac      	ldr	r0, [pc, #688]	; (8005b00 <UART_SetConfig+0x580>)
 800584e:	e744      	b.n	80056da <UART_SetConfig+0x15a>
 8005850:	48ac      	ldr	r0, [pc, #688]	; (8005b04 <UART_SetConfig+0x584>)
 8005852:	e742      	b.n	80056da <UART_SetConfig+0x15a>
 8005854:	48ac      	ldr	r0, [pc, #688]	; (8005b08 <UART_SetConfig+0x588>)
 8005856:	e740      	b.n	80056da <UART_SetConfig+0x15a>
 8005858:	48ac      	ldr	r0, [pc, #688]	; (8005b0c <UART_SetConfig+0x58c>)
 800585a:	e73e      	b.n	80056da <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800585c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005860:	e73b      	b.n	80056da <UART_SetConfig+0x15a>
 8005862:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005866:	e738      	b.n	80056da <UART_SetConfig+0x15a>
 8005868:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800586c:	e735      	b.n	80056da <UART_SetConfig+0x15a>
 800586e:	f241 5055 	movw	r0, #5461	; 0x1555
 8005872:	e732      	b.n	80056da <UART_SetConfig+0x15a>
 8005874:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005878:	e72f      	b.n	80056da <UART_SetConfig+0x15a>
 800587a:	f640 40cc 	movw	r0, #3276	; 0xccc
 800587e:	e72c      	b.n	80056da <UART_SetConfig+0x15a>
 8005880:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8005884:	e729      	b.n	80056da <UART_SetConfig+0x15a>
 8005886:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800588a:	e726      	b.n	80056da <UART_SetConfig+0x15a>
 800588c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005890:	e723      	b.n	80056da <UART_SetConfig+0x15a>
 8005892:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005896:	e720      	b.n	80056da <UART_SetConfig+0x15a>
 8005898:	f44f 7080 	mov.w	r0, #256	; 0x100
 800589c:	e71d      	b.n	80056da <UART_SetConfig+0x15a>
            pclk = HAL_RCC_GetPCLK1Freq();
 800589e:	f7fe fb77 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058a4:	b1e3      	cbz	r3, 80058e0 <UART_SetConfig+0x360>
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d03a      	beq.n	8005920 <UART_SetConfig+0x3a0>
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d03b      	beq.n	8005926 <UART_SetConfig+0x3a6>
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d03c      	beq.n	800592c <UART_SetConfig+0x3ac>
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d03d      	beq.n	8005932 <UART_SetConfig+0x3b2>
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d03e      	beq.n	8005938 <UART_SetConfig+0x3b8>
 80058ba:	2b06      	cmp	r3, #6
 80058bc:	d03f      	beq.n	800593e <UART_SetConfig+0x3be>
 80058be:	2b07      	cmp	r3, #7
 80058c0:	d040      	beq.n	8005944 <UART_SetConfig+0x3c4>
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d041      	beq.n	800594a <UART_SetConfig+0x3ca>
 80058c6:	2b09      	cmp	r3, #9
 80058c8:	d042      	beq.n	8005950 <UART_SetConfig+0x3d0>
 80058ca:	2b0a      	cmp	r3, #10
 80058cc:	d043      	beq.n	8005956 <UART_SetConfig+0x3d6>
 80058ce:	2b0b      	cmp	r3, #11
 80058d0:	d002      	beq.n	80058d8 <UART_SetConfig+0x358>
 80058d2:	2201      	movs	r2, #1
 80058d4:	2300      	movs	r3, #0
 80058d6:	e005      	b.n	80058e4 <UART_SetConfig+0x364>
 80058d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058dc:	2300      	movs	r3, #0
 80058de:	e001      	b.n	80058e4 <UART_SetConfig+0x364>
 80058e0:	2201      	movs	r2, #1
 80058e2:	2300      	movs	r3, #0
 80058e4:	2100      	movs	r1, #0
 80058e6:	f7fa fc55 	bl	8000194 <__aeabi_uldivmod>
 80058ea:	020f      	lsls	r7, r1, #8
 80058ec:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80058f0:	0206      	lsls	r6, r0, #8
 80058f2:	6862      	ldr	r2, [r4, #4]
 80058f4:	0850      	lsrs	r0, r2, #1
 80058f6:	2500      	movs	r5, #0
 80058f8:	462b      	mov	r3, r5
 80058fa:	eb16 0b00 	adds.w	fp, r6, r0
 80058fe:	f147 0c00 	adc.w	ip, r7, #0
 8005902:	4658      	mov	r0, fp
 8005904:	4661      	mov	r1, ip
 8005906:	f7fa fc45 	bl	8000194 <__aeabi_uldivmod>
 800590a:	4603      	mov	r3, r0
            break;
 800590c:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800590e:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8005912:	4a7f      	ldr	r2, [pc, #508]	; (8005b10 <UART_SetConfig+0x590>)
 8005914:	4291      	cmp	r1, r2
 8005916:	f200 83cf 	bhi.w	80060b8 <UART_SetConfig+0xb38>
          huart->Instance->BRR = usartdiv;
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	60d3      	str	r3, [r2, #12]
 800591e:	e2c3      	b.n	8005ea8 <UART_SetConfig+0x928>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005920:	2202      	movs	r2, #2
 8005922:	2300      	movs	r3, #0
 8005924:	e7de      	b.n	80058e4 <UART_SetConfig+0x364>
 8005926:	2204      	movs	r2, #4
 8005928:	2300      	movs	r3, #0
 800592a:	e7db      	b.n	80058e4 <UART_SetConfig+0x364>
 800592c:	2206      	movs	r2, #6
 800592e:	2300      	movs	r3, #0
 8005930:	e7d8      	b.n	80058e4 <UART_SetConfig+0x364>
 8005932:	2208      	movs	r2, #8
 8005934:	2300      	movs	r3, #0
 8005936:	e7d5      	b.n	80058e4 <UART_SetConfig+0x364>
 8005938:	220a      	movs	r2, #10
 800593a:	2300      	movs	r3, #0
 800593c:	e7d2      	b.n	80058e4 <UART_SetConfig+0x364>
 800593e:	220c      	movs	r2, #12
 8005940:	2300      	movs	r3, #0
 8005942:	e7cf      	b.n	80058e4 <UART_SetConfig+0x364>
 8005944:	2210      	movs	r2, #16
 8005946:	2300      	movs	r3, #0
 8005948:	e7cc      	b.n	80058e4 <UART_SetConfig+0x364>
 800594a:	2220      	movs	r2, #32
 800594c:	2300      	movs	r3, #0
 800594e:	e7c9      	b.n	80058e4 <UART_SetConfig+0x364>
 8005950:	2240      	movs	r2, #64	; 0x40
 8005952:	2300      	movs	r3, #0
 8005954:	e7c6      	b.n	80058e4 <UART_SetConfig+0x364>
 8005956:	2280      	movs	r2, #128	; 0x80
 8005958:	2300      	movs	r3, #0
 800595a:	e7c3      	b.n	80058e4 <UART_SetConfig+0x364>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800595e:	b1fb      	cbz	r3, 80059a0 <UART_SetConfig+0x420>
 8005960:	2b01      	cmp	r3, #1
 8005962:	d02d      	beq.n	80059c0 <UART_SetConfig+0x440>
 8005964:	2b02      	cmp	r3, #2
 8005966:	d030      	beq.n	80059ca <UART_SetConfig+0x44a>
 8005968:	2b03      	cmp	r3, #3
 800596a:	d033      	beq.n	80059d4 <UART_SetConfig+0x454>
 800596c:	2b04      	cmp	r3, #4
 800596e:	d036      	beq.n	80059de <UART_SetConfig+0x45e>
 8005970:	2b05      	cmp	r3, #5
 8005972:	d039      	beq.n	80059e8 <UART_SetConfig+0x468>
 8005974:	2b06      	cmp	r3, #6
 8005976:	d03c      	beq.n	80059f2 <UART_SetConfig+0x472>
 8005978:	2b07      	cmp	r3, #7
 800597a:	d03f      	beq.n	80059fc <UART_SetConfig+0x47c>
 800597c:	2b08      	cmp	r3, #8
 800597e:	d042      	beq.n	8005a06 <UART_SetConfig+0x486>
 8005980:	2b09      	cmp	r3, #9
 8005982:	d045      	beq.n	8005a10 <UART_SetConfig+0x490>
 8005984:	2b0a      	cmp	r3, #10
 8005986:	d048      	beq.n	8005a1a <UART_SetConfig+0x49a>
 8005988:	2b0b      	cmp	r3, #11
 800598a:	d004      	beq.n	8005996 <UART_SetConfig+0x416>
 800598c:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005b14 <UART_SetConfig+0x594>
 8005990:	f04f 0c00 	mov.w	ip, #0
 8005994:	e008      	b.n	80059a8 <UART_SetConfig+0x428>
 8005996:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005b18 <UART_SetConfig+0x598>
 800599a:	f04f 0c00 	mov.w	ip, #0
 800599e:	e003      	b.n	80059a8 <UART_SetConfig+0x428>
 80059a0:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005b14 <UART_SetConfig+0x594>
 80059a4:	f04f 0c00 	mov.w	ip, #0
 80059a8:	0856      	lsrs	r6, r2, #1
 80059aa:	2500      	movs	r5, #0
 80059ac:	462b      	mov	r3, r5
 80059ae:	eb1b 0006 	adds.w	r0, fp, r6
 80059b2:	f14c 0100 	adc.w	r1, ip, #0
 80059b6:	f7fa fbed 	bl	8000194 <__aeabi_uldivmod>
 80059ba:	4603      	mov	r3, r0
            break;
 80059bc:	4628      	mov	r0, r5
 80059be:	e7a6      	b.n	800590e <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c0:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005b1c <UART_SetConfig+0x59c>
 80059c4:	f04f 0c00 	mov.w	ip, #0
 80059c8:	e7ee      	b.n	80059a8 <UART_SetConfig+0x428>
 80059ca:	f8df b154 	ldr.w	fp, [pc, #340]	; 8005b20 <UART_SetConfig+0x5a0>
 80059ce:	f04f 0c00 	mov.w	ip, #0
 80059d2:	e7e9      	b.n	80059a8 <UART_SetConfig+0x428>
 80059d4:	f20f 1c00 	addw	ip, pc, #256	; 0x100
 80059d8:	e9dc bc00 	ldrd	fp, ip, [ip]
 80059dc:	e7e4      	b.n	80059a8 <UART_SetConfig+0x428>
 80059de:	f8df b144 	ldr.w	fp, [pc, #324]	; 8005b24 <UART_SetConfig+0x5a4>
 80059e2:	f04f 0c00 	mov.w	ip, #0
 80059e6:	e7df      	b.n	80059a8 <UART_SetConfig+0x428>
 80059e8:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8005b28 <UART_SetConfig+0x5a8>
 80059ec:	f04f 0c00 	mov.w	ip, #0
 80059f0:	e7da      	b.n	80059a8 <UART_SetConfig+0x428>
 80059f2:	f20f 0cec 	addw	ip, pc, #236	; 0xec
 80059f6:	e9dc bc00 	ldrd	fp, ip, [ip]
 80059fa:	e7d5      	b.n	80059a8 <UART_SetConfig+0x428>
 80059fc:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005b2c <UART_SetConfig+0x5ac>
 8005a00:	f04f 0c00 	mov.w	ip, #0
 8005a04:	e7d0      	b.n	80059a8 <UART_SetConfig+0x428>
 8005a06:	f8df b128 	ldr.w	fp, [pc, #296]	; 8005b30 <UART_SetConfig+0x5b0>
 8005a0a:	f04f 0c00 	mov.w	ip, #0
 8005a0e:	e7cb      	b.n	80059a8 <UART_SetConfig+0x428>
 8005a10:	f8df b120 	ldr.w	fp, [pc, #288]	; 8005b34 <UART_SetConfig+0x5b4>
 8005a14:	f04f 0c00 	mov.w	ip, #0
 8005a18:	e7c6      	b.n	80059a8 <UART_SetConfig+0x428>
 8005a1a:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8005b38 <UART_SetConfig+0x5b8>
 8005a1e:	f04f 0c00 	mov.w	ip, #0
 8005a22:	e7c1      	b.n	80059a8 <UART_SetConfig+0x428>
            pclk = HAL_RCC_GetSysClockFreq();
 8005a24:	f7fe fa46 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a2a:	b1e3      	cbz	r3, 8005a66 <UART_SetConfig+0x4e6>
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d032      	beq.n	8005a96 <UART_SetConfig+0x516>
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d033      	beq.n	8005a9c <UART_SetConfig+0x51c>
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d034      	beq.n	8005aa2 <UART_SetConfig+0x522>
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d035      	beq.n	8005aa8 <UART_SetConfig+0x528>
 8005a3c:	2b05      	cmp	r3, #5
 8005a3e:	d036      	beq.n	8005aae <UART_SetConfig+0x52e>
 8005a40:	2b06      	cmp	r3, #6
 8005a42:	d037      	beq.n	8005ab4 <UART_SetConfig+0x534>
 8005a44:	2b07      	cmp	r3, #7
 8005a46:	d038      	beq.n	8005aba <UART_SetConfig+0x53a>
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d039      	beq.n	8005ac0 <UART_SetConfig+0x540>
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d03a      	beq.n	8005ac6 <UART_SetConfig+0x546>
 8005a50:	2b0a      	cmp	r3, #10
 8005a52:	d03b      	beq.n	8005acc <UART_SetConfig+0x54c>
 8005a54:	2b0b      	cmp	r3, #11
 8005a56:	d002      	beq.n	8005a5e <UART_SetConfig+0x4de>
 8005a58:	2201      	movs	r2, #1
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e005      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a62:	2300      	movs	r3, #0
 8005a64:	e001      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005a66:	2201      	movs	r2, #1
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	f7fa fb92 	bl	8000194 <__aeabi_uldivmod>
 8005a70:	020f      	lsls	r7, r1, #8
 8005a72:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8005a76:	0206      	lsls	r6, r0, #8
 8005a78:	6862      	ldr	r2, [r4, #4]
 8005a7a:	0850      	lsrs	r0, r2, #1
 8005a7c:	2500      	movs	r5, #0
 8005a7e:	462b      	mov	r3, r5
 8005a80:	eb16 0b00 	adds.w	fp, r6, r0
 8005a84:	f147 0c00 	adc.w	ip, r7, #0
 8005a88:	4658      	mov	r0, fp
 8005a8a:	4661      	mov	r1, ip
 8005a8c:	f7fa fb82 	bl	8000194 <__aeabi_uldivmod>
 8005a90:	4603      	mov	r3, r0
            break;
 8005a92:	4628      	mov	r0, r5
 8005a94:	e73b      	b.n	800590e <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a96:	2202      	movs	r2, #2
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e7e6      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e7e3      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005aa2:	2206      	movs	r2, #6
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e7e0      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e7dd      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005aae:	220a      	movs	r2, #10
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e7da      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005ab4:	220c      	movs	r2, #12
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e7d7      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005aba:	2210      	movs	r2, #16
 8005abc:	2300      	movs	r3, #0
 8005abe:	e7d4      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e7d1      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e7ce      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005acc:	2280      	movs	r2, #128	; 0x80
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e7cb      	b.n	8005a6a <UART_SetConfig+0x4ea>
 8005ad2:	bf00      	nop
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	28b0aa00 	.word	0x28b0aa00
 8005adc:	00000000 	.word	0x00000000
 8005ae0:	14585500 	.word	0x14585500
 8005ae4:	00000000 	.word	0x00000000
 8005ae8:	007a1200 	.word	0x007a1200
 8005aec:	003d0900 	.word	0x003d0900
 8005af0:	0028b0aa 	.word	0x0028b0aa
 8005af4:	001e8480 	.word	0x001e8480
 8005af8:	00186a00 	.word	0x00186a00
 8005afc:	00145855 	.word	0x00145855
 8005b00:	000f4240 	.word	0x000f4240
 8005b04:	0007a120 	.word	0x0007a120
 8005b08:	0003d090 	.word	0x0003d090
 8005b0c:	0001e848 	.word	0x0001e848
 8005b10:	000ffcff 	.word	0x000ffcff
 8005b14:	f4240000 	.word	0xf4240000
 8005b18:	00f42400 	.word	0x00f42400
 8005b1c:	7a120000 	.word	0x7a120000
 8005b20:	3d090000 	.word	0x3d090000
 8005b24:	1e848000 	.word	0x1e848000
 8005b28:	186a0000 	.word	0x186a0000
 8005b2c:	0f424000 	.word	0x0f424000
 8005b30:	07a12000 	.word	0x07a12000
 8005b34:	03d09000 	.word	0x03d09000
 8005b38:	01e84800 	.word	0x01e84800
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b3e:	b1fb      	cbz	r3, 8005b80 <UART_SetConfig+0x600>
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d02d      	beq.n	8005ba0 <UART_SetConfig+0x620>
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d030      	beq.n	8005baa <UART_SetConfig+0x62a>
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d033      	beq.n	8005bb4 <UART_SetConfig+0x634>
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d036      	beq.n	8005bbe <UART_SetConfig+0x63e>
 8005b50:	2b05      	cmp	r3, #5
 8005b52:	d039      	beq.n	8005bc8 <UART_SetConfig+0x648>
 8005b54:	2b06      	cmp	r3, #6
 8005b56:	d03c      	beq.n	8005bd2 <UART_SetConfig+0x652>
 8005b58:	2b07      	cmp	r3, #7
 8005b5a:	d03f      	beq.n	8005bdc <UART_SetConfig+0x65c>
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d042      	beq.n	8005be6 <UART_SetConfig+0x666>
 8005b60:	2b09      	cmp	r3, #9
 8005b62:	d045      	beq.n	8005bf0 <UART_SetConfig+0x670>
 8005b64:	2b0a      	cmp	r3, #10
 8005b66:	d048      	beq.n	8005bfa <UART_SetConfig+0x67a>
 8005b68:	2b0b      	cmp	r3, #11
 8005b6a:	d004      	beq.n	8005b76 <UART_SetConfig+0x5f6>
 8005b6c:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 8005b70:	f04f 0c00 	mov.w	ip, #0
 8005b74:	e008      	b.n	8005b88 <UART_SetConfig+0x608>
 8005b76:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
 8005b7a:	f04f 0c00 	mov.w	ip, #0
 8005b7e:	e003      	b.n	8005b88 <UART_SetConfig+0x608>
 8005b80:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 8005b84:	f04f 0c00 	mov.w	ip, #0
 8005b88:	0856      	lsrs	r6, r2, #1
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	462b      	mov	r3, r5
 8005b8e:	eb1b 0006 	adds.w	r0, fp, r6
 8005b92:	f14c 0100 	adc.w	r1, ip, #0
 8005b96:	f7fa fafd 	bl	8000194 <__aeabi_uldivmod>
 8005b9a:	4603      	mov	r3, r0
            break;
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	e6b6      	b.n	800590e <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ba0:	f44f 0b80 	mov.w	fp, #4194304	; 0x400000
 8005ba4:	f04f 0c00 	mov.w	ip, #0
 8005ba8:	e7ee      	b.n	8005b88 <UART_SetConfig+0x608>
 8005baa:	f44f 1b00 	mov.w	fp, #2097152	; 0x200000
 8005bae:	f04f 0c00 	mov.w	ip, #0
 8005bb2:	e7e9      	b.n	8005b88 <UART_SetConfig+0x608>
 8005bb4:	f8df b3d8 	ldr.w	fp, [pc, #984]	; 8005f90 <UART_SetConfig+0xa10>
 8005bb8:	f04f 0c00 	mov.w	ip, #0
 8005bbc:	e7e4      	b.n	8005b88 <UART_SetConfig+0x608>
 8005bbe:	f44f 1b80 	mov.w	fp, #1048576	; 0x100000
 8005bc2:	f04f 0c00 	mov.w	ip, #0
 8005bc6:	e7df      	b.n	8005b88 <UART_SetConfig+0x608>
 8005bc8:	f8df b3c8 	ldr.w	fp, [pc, #968]	; 8005f94 <UART_SetConfig+0xa14>
 8005bcc:	f04f 0c00 	mov.w	ip, #0
 8005bd0:	e7da      	b.n	8005b88 <UART_SetConfig+0x608>
 8005bd2:	f8df b3c4 	ldr.w	fp, [pc, #964]	; 8005f98 <UART_SetConfig+0xa18>
 8005bd6:	f04f 0c00 	mov.w	ip, #0
 8005bda:	e7d5      	b.n	8005b88 <UART_SetConfig+0x608>
 8005bdc:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
 8005be0:	f04f 0c00 	mov.w	ip, #0
 8005be4:	e7d0      	b.n	8005b88 <UART_SetConfig+0x608>
 8005be6:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 8005bea:	f04f 0c00 	mov.w	ip, #0
 8005bee:	e7cb      	b.n	8005b88 <UART_SetConfig+0x608>
 8005bf0:	f44f 3b00 	mov.w	fp, #131072	; 0x20000
 8005bf4:	f04f 0c00 	mov.w	ip, #0
 8005bf8:	e7c6      	b.n	8005b88 <UART_SetConfig+0x608>
 8005bfa:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
 8005bfe:	f04f 0c00 	mov.w	ip, #0
 8005c02:	e7c1      	b.n	8005b88 <UART_SetConfig+0x608>
            ret = HAL_ERROR;
 8005c04:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e681      	b.n	800590e <UART_SetConfig+0x38e>
    switch (clocksource)
 8005c0a:	3d01      	subs	r5, #1
 8005c0c:	2d07      	cmp	r5, #7
 8005c0e:	f200 8116 	bhi.w	8005e3e <UART_SetConfig+0x8be>
 8005c12:	e8df f015 	tbh	[pc, r5, lsl #1]
 8005c16:	0008      	.short	0x0008
 8005c18:	01140056 	.word	0x01140056
 8005c1c:	0114008f 	.word	0x0114008f
 8005c20:	01140114 	.word	0x01140114
 8005c24:	00ce      	.short	0x00ce
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c26:	f7fe f9c5 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c2c:	b1d3      	cbz	r3, 8005c64 <UART_SetConfig+0x6e4>
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d033      	beq.n	8005c9a <UART_SetConfig+0x71a>
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d033      	beq.n	8005c9e <UART_SetConfig+0x71e>
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d033      	beq.n	8005ca2 <UART_SetConfig+0x722>
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d033      	beq.n	8005ca6 <UART_SetConfig+0x726>
 8005c3e:	2b05      	cmp	r3, #5
 8005c40:	d033      	beq.n	8005caa <UART_SetConfig+0x72a>
 8005c42:	2b06      	cmp	r3, #6
 8005c44:	d033      	beq.n	8005cae <UART_SetConfig+0x72e>
 8005c46:	2b07      	cmp	r3, #7
 8005c48:	d033      	beq.n	8005cb2 <UART_SetConfig+0x732>
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d033      	beq.n	8005cb6 <UART_SetConfig+0x736>
 8005c4e:	2b09      	cmp	r3, #9
 8005c50:	d033      	beq.n	8005cba <UART_SetConfig+0x73a>
 8005c52:	2b0a      	cmp	r3, #10
 8005c54:	d033      	beq.n	8005cbe <UART_SetConfig+0x73e>
 8005c56:	2b0b      	cmp	r3, #11
 8005c58:	d001      	beq.n	8005c5e <UART_SetConfig+0x6de>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e003      	b.n	8005c66 <UART_SetConfig+0x6e6>
 8005c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c62:	e000      	b.n	8005c66 <UART_SetConfig+0x6e6>
 8005c64:	2301      	movs	r3, #1
 8005c66:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c6a:	6862      	ldr	r2, [r4, #4]
 8005c6c:	0853      	lsrs	r3, r2, #1
 8005c6e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c76:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c78:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c7a:	f1a3 0110 	sub.w	r1, r3, #16
 8005c7e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005c82:	4291      	cmp	r1, r2
 8005c84:	f200 821a 	bhi.w	80060bc <UART_SetConfig+0xb3c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c8e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005c92:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	60d3      	str	r3, [r2, #12]
 8005c98:	e106      	b.n	8005ea8 <UART_SetConfig+0x928>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e7e3      	b.n	8005c66 <UART_SetConfig+0x6e6>
 8005c9e:	2304      	movs	r3, #4
 8005ca0:	e7e1      	b.n	8005c66 <UART_SetConfig+0x6e6>
 8005ca2:	2306      	movs	r3, #6
 8005ca4:	e7df      	b.n	8005c66 <UART_SetConfig+0x6e6>
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	e7dd      	b.n	8005c66 <UART_SetConfig+0x6e6>
 8005caa:	230a      	movs	r3, #10
 8005cac:	e7db      	b.n	8005c66 <UART_SetConfig+0x6e6>
 8005cae:	230c      	movs	r3, #12
 8005cb0:	e7d9      	b.n	8005c66 <UART_SetConfig+0x6e6>
 8005cb2:	2310      	movs	r3, #16
 8005cb4:	e7d7      	b.n	8005c66 <UART_SetConfig+0x6e6>
 8005cb6:	2320      	movs	r3, #32
 8005cb8:	e7d5      	b.n	8005c66 <UART_SetConfig+0x6e6>
 8005cba:	2340      	movs	r3, #64	; 0x40
 8005cbc:	e7d3      	b.n	8005c66 <UART_SetConfig+0x6e6>
 8005cbe:	2380      	movs	r3, #128	; 0x80
 8005cc0:	e7d1      	b.n	8005c66 <UART_SetConfig+0x6e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc4:	b1cb      	cbz	r3, 8005cfa <UART_SetConfig+0x77a>
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d020      	beq.n	8005d0c <UART_SetConfig+0x78c>
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d020      	beq.n	8005d10 <UART_SetConfig+0x790>
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d020      	beq.n	8005d14 <UART_SetConfig+0x794>
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d020      	beq.n	8005d18 <UART_SetConfig+0x798>
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d020      	beq.n	8005d1c <UART_SetConfig+0x79c>
 8005cda:	2b06      	cmp	r3, #6
 8005cdc:	d020      	beq.n	8005d20 <UART_SetConfig+0x7a0>
 8005cde:	2b07      	cmp	r3, #7
 8005ce0:	d020      	beq.n	8005d24 <UART_SetConfig+0x7a4>
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d020      	beq.n	8005d28 <UART_SetConfig+0x7a8>
 8005ce6:	2b09      	cmp	r3, #9
 8005ce8:	d020      	beq.n	8005d2c <UART_SetConfig+0x7ac>
 8005cea:	2b0a      	cmp	r3, #10
 8005cec:	d020      	beq.n	8005d30 <UART_SetConfig+0x7b0>
 8005cee:	2b0b      	cmp	r3, #11
 8005cf0:	d001      	beq.n	8005cf6 <UART_SetConfig+0x776>
 8005cf2:	4b99      	ldr	r3, [pc, #612]	; (8005f58 <UART_SetConfig+0x9d8>)
 8005cf4:	e002      	b.n	8005cfc <UART_SetConfig+0x77c>
 8005cf6:	4b99      	ldr	r3, [pc, #612]	; (8005f5c <UART_SetConfig+0x9dc>)
 8005cf8:	e000      	b.n	8005cfc <UART_SetConfig+0x77c>
 8005cfa:	4b97      	ldr	r3, [pc, #604]	; (8005f58 <UART_SetConfig+0x9d8>)
 8005cfc:	6862      	ldr	r2, [r4, #4]
 8005cfe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d06:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d08:	2000      	movs	r0, #0
        break;
 8005d0a:	e7b6      	b.n	8005c7a <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0c:	4b94      	ldr	r3, [pc, #592]	; (8005f60 <UART_SetConfig+0x9e0>)
 8005d0e:	e7f5      	b.n	8005cfc <UART_SetConfig+0x77c>
 8005d10:	4b94      	ldr	r3, [pc, #592]	; (8005f64 <UART_SetConfig+0x9e4>)
 8005d12:	e7f3      	b.n	8005cfc <UART_SetConfig+0x77c>
 8005d14:	4b94      	ldr	r3, [pc, #592]	; (8005f68 <UART_SetConfig+0x9e8>)
 8005d16:	e7f1      	b.n	8005cfc <UART_SetConfig+0x77c>
 8005d18:	4b94      	ldr	r3, [pc, #592]	; (8005f6c <UART_SetConfig+0x9ec>)
 8005d1a:	e7ef      	b.n	8005cfc <UART_SetConfig+0x77c>
 8005d1c:	4b94      	ldr	r3, [pc, #592]	; (8005f70 <UART_SetConfig+0x9f0>)
 8005d1e:	e7ed      	b.n	8005cfc <UART_SetConfig+0x77c>
 8005d20:	4b94      	ldr	r3, [pc, #592]	; (8005f74 <UART_SetConfig+0x9f4>)
 8005d22:	e7eb      	b.n	8005cfc <UART_SetConfig+0x77c>
 8005d24:	4b94      	ldr	r3, [pc, #592]	; (8005f78 <UART_SetConfig+0x9f8>)
 8005d26:	e7e9      	b.n	8005cfc <UART_SetConfig+0x77c>
 8005d28:	4b94      	ldr	r3, [pc, #592]	; (8005f7c <UART_SetConfig+0x9fc>)
 8005d2a:	e7e7      	b.n	8005cfc <UART_SetConfig+0x77c>
 8005d2c:	4b94      	ldr	r3, [pc, #592]	; (8005f80 <UART_SetConfig+0xa00>)
 8005d2e:	e7e5      	b.n	8005cfc <UART_SetConfig+0x77c>
 8005d30:	4b94      	ldr	r3, [pc, #592]	; (8005f84 <UART_SetConfig+0xa04>)
 8005d32:	e7e3      	b.n	8005cfc <UART_SetConfig+0x77c>
        pclk = HAL_RCC_GetSysClockFreq();
 8005d34:	f7fe f8be 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d3a:	b1d3      	cbz	r3, 8005d72 <UART_SetConfig+0x7f2>
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d024      	beq.n	8005d8a <UART_SetConfig+0x80a>
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d024      	beq.n	8005d8e <UART_SetConfig+0x80e>
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d024      	beq.n	8005d92 <UART_SetConfig+0x812>
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d024      	beq.n	8005d96 <UART_SetConfig+0x816>
 8005d4c:	2b05      	cmp	r3, #5
 8005d4e:	d024      	beq.n	8005d9a <UART_SetConfig+0x81a>
 8005d50:	2b06      	cmp	r3, #6
 8005d52:	d024      	beq.n	8005d9e <UART_SetConfig+0x81e>
 8005d54:	2b07      	cmp	r3, #7
 8005d56:	d024      	beq.n	8005da2 <UART_SetConfig+0x822>
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d024      	beq.n	8005da6 <UART_SetConfig+0x826>
 8005d5c:	2b09      	cmp	r3, #9
 8005d5e:	d024      	beq.n	8005daa <UART_SetConfig+0x82a>
 8005d60:	2b0a      	cmp	r3, #10
 8005d62:	d024      	beq.n	8005dae <UART_SetConfig+0x82e>
 8005d64:	2b0b      	cmp	r3, #11
 8005d66:	d001      	beq.n	8005d6c <UART_SetConfig+0x7ec>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e003      	b.n	8005d74 <UART_SetConfig+0x7f4>
 8005d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d70:	e000      	b.n	8005d74 <UART_SetConfig+0x7f4>
 8005d72:	2301      	movs	r3, #1
 8005d74:	fbb0 f0f3 	udiv	r0, r0, r3
 8005d78:	6862      	ldr	r2, [r4, #4]
 8005d7a:	0853      	lsrs	r3, r2, #1
 8005d7c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d84:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d86:	2000      	movs	r0, #0
        break;
 8005d88:	e777      	b.n	8005c7a <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e7f2      	b.n	8005d74 <UART_SetConfig+0x7f4>
 8005d8e:	2304      	movs	r3, #4
 8005d90:	e7f0      	b.n	8005d74 <UART_SetConfig+0x7f4>
 8005d92:	2306      	movs	r3, #6
 8005d94:	e7ee      	b.n	8005d74 <UART_SetConfig+0x7f4>
 8005d96:	2308      	movs	r3, #8
 8005d98:	e7ec      	b.n	8005d74 <UART_SetConfig+0x7f4>
 8005d9a:	230a      	movs	r3, #10
 8005d9c:	e7ea      	b.n	8005d74 <UART_SetConfig+0x7f4>
 8005d9e:	230c      	movs	r3, #12
 8005da0:	e7e8      	b.n	8005d74 <UART_SetConfig+0x7f4>
 8005da2:	2310      	movs	r3, #16
 8005da4:	e7e6      	b.n	8005d74 <UART_SetConfig+0x7f4>
 8005da6:	2320      	movs	r3, #32
 8005da8:	e7e4      	b.n	8005d74 <UART_SetConfig+0x7f4>
 8005daa:	2340      	movs	r3, #64	; 0x40
 8005dac:	e7e2      	b.n	8005d74 <UART_SetConfig+0x7f4>
 8005dae:	2380      	movs	r3, #128	; 0x80
 8005db0:	e7e0      	b.n	8005d74 <UART_SetConfig+0x7f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005db4:	b1db      	cbz	r3, 8005dee <UART_SetConfig+0x86e>
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d023      	beq.n	8005e02 <UART_SetConfig+0x882>
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d024      	beq.n	8005e08 <UART_SetConfig+0x888>
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d025      	beq.n	8005e0e <UART_SetConfig+0x88e>
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d026      	beq.n	8005e14 <UART_SetConfig+0x894>
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d027      	beq.n	8005e1a <UART_SetConfig+0x89a>
 8005dca:	2b06      	cmp	r3, #6
 8005dcc:	d028      	beq.n	8005e20 <UART_SetConfig+0x8a0>
 8005dce:	2b07      	cmp	r3, #7
 8005dd0:	d029      	beq.n	8005e26 <UART_SetConfig+0x8a6>
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d02a      	beq.n	8005e2c <UART_SetConfig+0x8ac>
 8005dd6:	2b09      	cmp	r3, #9
 8005dd8:	d02b      	beq.n	8005e32 <UART_SetConfig+0x8b2>
 8005dda:	2b0a      	cmp	r3, #10
 8005ddc:	d02c      	beq.n	8005e38 <UART_SetConfig+0x8b8>
 8005dde:	2b0b      	cmp	r3, #11
 8005de0:	d002      	beq.n	8005de8 <UART_SetConfig+0x868>
 8005de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005de6:	e004      	b.n	8005df2 <UART_SetConfig+0x872>
 8005de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dec:	e001      	b.n	8005df2 <UART_SetConfig+0x872>
 8005dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005df2:	6862      	ldr	r2, [r4, #4]
 8005df4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dfc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dfe:	2000      	movs	r0, #0
        break;
 8005e00:	e73b      	b.n	8005c7a <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e06:	e7f4      	b.n	8005df2 <UART_SetConfig+0x872>
 8005e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e0c:	e7f1      	b.n	8005df2 <UART_SetConfig+0x872>
 8005e0e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005e12:	e7ee      	b.n	8005df2 <UART_SetConfig+0x872>
 8005e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e18:	e7eb      	b.n	8005df2 <UART_SetConfig+0x872>
 8005e1a:	f641 1398 	movw	r3, #6552	; 0x1998
 8005e1e:	e7e8      	b.n	8005df2 <UART_SetConfig+0x872>
 8005e20:	f241 5354 	movw	r3, #5460	; 0x1554
 8005e24:	e7e5      	b.n	8005df2 <UART_SetConfig+0x872>
 8005e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e2a:	e7e2      	b.n	8005df2 <UART_SetConfig+0x872>
 8005e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e30:	e7df      	b.n	8005df2 <UART_SetConfig+0x872>
 8005e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e36:	e7dc      	b.n	8005df2 <UART_SetConfig+0x872>
 8005e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e3c:	e7d9      	b.n	8005df2 <UART_SetConfig+0x872>
        ret = HAL_ERROR;
 8005e3e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	e71a      	b.n	8005c7a <UART_SetConfig+0x6fa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e44:	f7fe f8b6 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e4a:	b1d3      	cbz	r3, 8005e82 <UART_SetConfig+0x902>
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d035      	beq.n	8005ebc <UART_SetConfig+0x93c>
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d035      	beq.n	8005ec0 <UART_SetConfig+0x940>
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d035      	beq.n	8005ec4 <UART_SetConfig+0x944>
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d035      	beq.n	8005ec8 <UART_SetConfig+0x948>
 8005e5c:	2b05      	cmp	r3, #5
 8005e5e:	d035      	beq.n	8005ecc <UART_SetConfig+0x94c>
 8005e60:	2b06      	cmp	r3, #6
 8005e62:	d035      	beq.n	8005ed0 <UART_SetConfig+0x950>
 8005e64:	2b07      	cmp	r3, #7
 8005e66:	d035      	beq.n	8005ed4 <UART_SetConfig+0x954>
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d035      	beq.n	8005ed8 <UART_SetConfig+0x958>
 8005e6c:	2b09      	cmp	r3, #9
 8005e6e:	d035      	beq.n	8005edc <UART_SetConfig+0x95c>
 8005e70:	2b0a      	cmp	r3, #10
 8005e72:	d035      	beq.n	8005ee0 <UART_SetConfig+0x960>
 8005e74:	2b0b      	cmp	r3, #11
 8005e76:	d001      	beq.n	8005e7c <UART_SetConfig+0x8fc>
 8005e78:	2201      	movs	r2, #1
 8005e7a:	e003      	b.n	8005e84 <UART_SetConfig+0x904>
 8005e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e80:	e000      	b.n	8005e84 <UART_SetConfig+0x904>
 8005e82:	2201      	movs	r2, #1
 8005e84:	fbb0 f2f2 	udiv	r2, r0, r2
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8005e8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e92:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e94:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e96:	f1a2 0110 	sub.w	r1, r2, #16
 8005e9a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005e9e:	4299      	cmp	r1, r3
 8005ea0:	f200 810e 	bhi.w	80060c0 <UART_SetConfig+0xb40>
      huart->Instance->BRR = usartdiv;
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	60da      	str	r2, [r3, #12]
  huart->NbTxDataToProcess = 1;
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005eae:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	66e2      	str	r2, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8005eb6:	6722      	str	r2, [r4, #112]	; 0x70
}
 8005eb8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	e7e1      	b.n	8005e84 <UART_SetConfig+0x904>
 8005ec0:	2204      	movs	r2, #4
 8005ec2:	e7df      	b.n	8005e84 <UART_SetConfig+0x904>
 8005ec4:	2206      	movs	r2, #6
 8005ec6:	e7dd      	b.n	8005e84 <UART_SetConfig+0x904>
 8005ec8:	2208      	movs	r2, #8
 8005eca:	e7db      	b.n	8005e84 <UART_SetConfig+0x904>
 8005ecc:	220a      	movs	r2, #10
 8005ece:	e7d9      	b.n	8005e84 <UART_SetConfig+0x904>
 8005ed0:	220c      	movs	r2, #12
 8005ed2:	e7d7      	b.n	8005e84 <UART_SetConfig+0x904>
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	e7d5      	b.n	8005e84 <UART_SetConfig+0x904>
 8005ed8:	2220      	movs	r2, #32
 8005eda:	e7d3      	b.n	8005e84 <UART_SetConfig+0x904>
 8005edc:	2240      	movs	r2, #64	; 0x40
 8005ede:	e7d1      	b.n	8005e84 <UART_SetConfig+0x904>
 8005ee0:	2280      	movs	r2, #128	; 0x80
 8005ee2:	e7cf      	b.n	8005e84 <UART_SetConfig+0x904>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ee6:	b1d3      	cbz	r3, 8005f1e <UART_SetConfig+0x99e>
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d021      	beq.n	8005f30 <UART_SetConfig+0x9b0>
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d021      	beq.n	8005f34 <UART_SetConfig+0x9b4>
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d021      	beq.n	8005f38 <UART_SetConfig+0x9b8>
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d021      	beq.n	8005f3c <UART_SetConfig+0x9bc>
 8005ef8:	2b05      	cmp	r3, #5
 8005efa:	d021      	beq.n	8005f40 <UART_SetConfig+0x9c0>
 8005efc:	2b06      	cmp	r3, #6
 8005efe:	d021      	beq.n	8005f44 <UART_SetConfig+0x9c4>
 8005f00:	2b07      	cmp	r3, #7
 8005f02:	d021      	beq.n	8005f48 <UART_SetConfig+0x9c8>
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d021      	beq.n	8005f4c <UART_SetConfig+0x9cc>
 8005f08:	2b09      	cmp	r3, #9
 8005f0a:	d021      	beq.n	8005f50 <UART_SetConfig+0x9d0>
 8005f0c:	2b0a      	cmp	r3, #10
 8005f0e:	d021      	beq.n	8005f54 <UART_SetConfig+0x9d4>
 8005f10:	2b0b      	cmp	r3, #11
 8005f12:	d001      	beq.n	8005f18 <UART_SetConfig+0x998>
 8005f14:	4a12      	ldr	r2, [pc, #72]	; (8005f60 <UART_SetConfig+0x9e0>)
 8005f16:	e003      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f18:	f24f 4224 	movw	r2, #62500	; 0xf424
 8005f1c:	e000      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f1e:	4a10      	ldr	r2, [pc, #64]	; (8005f60 <UART_SetConfig+0x9e0>)
 8005f20:	6863      	ldr	r3, [r4, #4]
 8005f22:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8005f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f2a:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f2c:	2000      	movs	r0, #0
        break;
 8005f2e:	e7b2      	b.n	8005e96 <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f30:	4a0c      	ldr	r2, [pc, #48]	; (8005f64 <UART_SetConfig+0x9e4>)
 8005f32:	e7f5      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f34:	4a0d      	ldr	r2, [pc, #52]	; (8005f6c <UART_SetConfig+0x9ec>)
 8005f36:	e7f3      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f38:	4a0e      	ldr	r2, [pc, #56]	; (8005f74 <UART_SetConfig+0x9f4>)
 8005f3a:	e7f1      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f3c:	4a0e      	ldr	r2, [pc, #56]	; (8005f78 <UART_SetConfig+0x9f8>)
 8005f3e:	e7ef      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f40:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <UART_SetConfig+0xa08>)
 8005f42:	e7ed      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f44:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <UART_SetConfig+0xa0c>)
 8005f46:	e7eb      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f48:	4a0c      	ldr	r2, [pc, #48]	; (8005f7c <UART_SetConfig+0x9fc>)
 8005f4a:	e7e9      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f4c:	4a0c      	ldr	r2, [pc, #48]	; (8005f80 <UART_SetConfig+0xa00>)
 8005f4e:	e7e7      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f50:	4a0c      	ldr	r2, [pc, #48]	; (8005f84 <UART_SetConfig+0xa04>)
 8005f52:	e7e5      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f54:	4a01      	ldr	r2, [pc, #4]	; (8005f5c <UART_SetConfig+0x9dc>)
 8005f56:	e7e3      	b.n	8005f20 <UART_SetConfig+0x9a0>
 8005f58:	01e84800 	.word	0x01e84800
 8005f5c:	0001e848 	.word	0x0001e848
 8005f60:	00f42400 	.word	0x00f42400
 8005f64:	007a1200 	.word	0x007a1200
 8005f68:	00516154 	.word	0x00516154
 8005f6c:	003d0900 	.word	0x003d0900
 8005f70:	0030d400 	.word	0x0030d400
 8005f74:	0028b0aa 	.word	0x0028b0aa
 8005f78:	001e8480 	.word	0x001e8480
 8005f7c:	000f4240 	.word	0x000f4240
 8005f80:	0007a120 	.word	0x0007a120
 8005f84:	0003d090 	.word	0x0003d090
 8005f88:	00186a00 	.word	0x00186a00
 8005f8c:	00145855 	.word	0x00145855
 8005f90:	00155500 	.word	0x00155500
 8005f94:	000ccc00 	.word	0x000ccc00
 8005f98:	000aaa00 	.word	0x000aaa00
        pclk = HAL_RCC_GetSysClockFreq();
 8005f9c:	f7fd ff8a 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa2:	b1d3      	cbz	r3, 8005fda <UART_SetConfig+0xa5a>
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d023      	beq.n	8005ff0 <UART_SetConfig+0xa70>
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d023      	beq.n	8005ff4 <UART_SetConfig+0xa74>
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d023      	beq.n	8005ff8 <UART_SetConfig+0xa78>
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d023      	beq.n	8005ffc <UART_SetConfig+0xa7c>
 8005fb4:	2b05      	cmp	r3, #5
 8005fb6:	d023      	beq.n	8006000 <UART_SetConfig+0xa80>
 8005fb8:	2b06      	cmp	r3, #6
 8005fba:	d023      	beq.n	8006004 <UART_SetConfig+0xa84>
 8005fbc:	2b07      	cmp	r3, #7
 8005fbe:	d023      	beq.n	8006008 <UART_SetConfig+0xa88>
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d023      	beq.n	800600c <UART_SetConfig+0xa8c>
 8005fc4:	2b09      	cmp	r3, #9
 8005fc6:	d023      	beq.n	8006010 <UART_SetConfig+0xa90>
 8005fc8:	2b0a      	cmp	r3, #10
 8005fca:	d023      	beq.n	8006014 <UART_SetConfig+0xa94>
 8005fcc:	2b0b      	cmp	r3, #11
 8005fce:	d001      	beq.n	8005fd4 <UART_SetConfig+0xa54>
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	e003      	b.n	8005fdc <UART_SetConfig+0xa5c>
 8005fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fd8:	e000      	b.n	8005fdc <UART_SetConfig+0xa5c>
 8005fda:	2201      	movs	r2, #1
 8005fdc:	fbb0 f2f2 	udiv	r2, r0, r2
 8005fe0:	6863      	ldr	r3, [r4, #4]
 8005fe2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8005fe6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fea:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fec:	2000      	movs	r0, #0
        break;
 8005fee:	e752      	b.n	8005e96 <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	e7f3      	b.n	8005fdc <UART_SetConfig+0xa5c>
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	e7f1      	b.n	8005fdc <UART_SetConfig+0xa5c>
 8005ff8:	2206      	movs	r2, #6
 8005ffa:	e7ef      	b.n	8005fdc <UART_SetConfig+0xa5c>
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	e7ed      	b.n	8005fdc <UART_SetConfig+0xa5c>
 8006000:	220a      	movs	r2, #10
 8006002:	e7eb      	b.n	8005fdc <UART_SetConfig+0xa5c>
 8006004:	220c      	movs	r2, #12
 8006006:	e7e9      	b.n	8005fdc <UART_SetConfig+0xa5c>
 8006008:	2210      	movs	r2, #16
 800600a:	e7e7      	b.n	8005fdc <UART_SetConfig+0xa5c>
 800600c:	2220      	movs	r2, #32
 800600e:	e7e5      	b.n	8005fdc <UART_SetConfig+0xa5c>
 8006010:	2240      	movs	r2, #64	; 0x40
 8006012:	e7e3      	b.n	8005fdc <UART_SetConfig+0xa5c>
 8006014:	2280      	movs	r2, #128	; 0x80
 8006016:	e7e1      	b.n	8005fdc <UART_SetConfig+0xa5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800601a:	b1d3      	cbz	r3, 8006052 <UART_SetConfig+0xad2>
 800601c:	2b01      	cmp	r3, #1
 800601e:	d022      	beq.n	8006066 <UART_SetConfig+0xae6>
 8006020:	2b02      	cmp	r3, #2
 8006022:	d023      	beq.n	800606c <UART_SetConfig+0xaec>
 8006024:	2b03      	cmp	r3, #3
 8006026:	d024      	beq.n	8006072 <UART_SetConfig+0xaf2>
 8006028:	2b04      	cmp	r3, #4
 800602a:	d025      	beq.n	8006078 <UART_SetConfig+0xaf8>
 800602c:	2b05      	cmp	r3, #5
 800602e:	d026      	beq.n	800607e <UART_SetConfig+0xafe>
 8006030:	2b06      	cmp	r3, #6
 8006032:	d027      	beq.n	8006084 <UART_SetConfig+0xb04>
 8006034:	2b07      	cmp	r3, #7
 8006036:	d028      	beq.n	800608a <UART_SetConfig+0xb0a>
 8006038:	2b08      	cmp	r3, #8
 800603a:	d029      	beq.n	8006090 <UART_SetConfig+0xb10>
 800603c:	2b09      	cmp	r3, #9
 800603e:	d02a      	beq.n	8006096 <UART_SetConfig+0xb16>
 8006040:	2b0a      	cmp	r3, #10
 8006042:	d02b      	beq.n	800609c <UART_SetConfig+0xb1c>
 8006044:	2b0b      	cmp	r3, #11
 8006046:	d002      	beq.n	800604e <UART_SetConfig+0xace>
 8006048:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800604c:	e003      	b.n	8006056 <UART_SetConfig+0xad6>
 800604e:	2280      	movs	r2, #128	; 0x80
 8006050:	e001      	b.n	8006056 <UART_SetConfig+0xad6>
 8006052:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800605c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006060:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8006062:	2000      	movs	r0, #0
        break;
 8006064:	e717      	b.n	8005e96 <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800606a:	e7f4      	b.n	8006056 <UART_SetConfig+0xad6>
 800606c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006070:	e7f1      	b.n	8006056 <UART_SetConfig+0xad6>
 8006072:	f241 5255 	movw	r2, #5461	; 0x1555
 8006076:	e7ee      	b.n	8006056 <UART_SetConfig+0xad6>
 8006078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800607c:	e7eb      	b.n	8006056 <UART_SetConfig+0xad6>
 800607e:	f640 42cc 	movw	r2, #3276	; 0xccc
 8006082:	e7e8      	b.n	8006056 <UART_SetConfig+0xad6>
 8006084:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8006088:	e7e5      	b.n	8006056 <UART_SetConfig+0xad6>
 800608a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800608e:	e7e2      	b.n	8006056 <UART_SetConfig+0xad6>
 8006090:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006094:	e7df      	b.n	8006056 <UART_SetConfig+0xad6>
 8006096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800609a:	e7dc      	b.n	8006056 <UART_SetConfig+0xad6>
 800609c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060a0:	e7d9      	b.n	8006056 <UART_SetConfig+0xad6>
        ret = HAL_ERROR;
 80060a2:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80060a4:	2200      	movs	r2, #0
 80060a6:	e6f6      	b.n	8005e96 <UART_SetConfig+0x916>
        ret = HAL_ERROR;
 80060a8:	2001      	movs	r0, #1
 80060aa:	e6fd      	b.n	8005ea8 <UART_SetConfig+0x928>
 80060ac:	2000      	movs	r0, #0
 80060ae:	e6fb      	b.n	8005ea8 <UART_SetConfig+0x928>
        ret = HAL_ERROR;
 80060b0:	2001      	movs	r0, #1
 80060b2:	e6f9      	b.n	8005ea8 <UART_SetConfig+0x928>
 80060b4:	2001      	movs	r0, #1
 80060b6:	e6f7      	b.n	8005ea8 <UART_SetConfig+0x928>
          ret = HAL_ERROR;
 80060b8:	2001      	movs	r0, #1
 80060ba:	e6f5      	b.n	8005ea8 <UART_SetConfig+0x928>
      ret = HAL_ERROR;
 80060bc:	2001      	movs	r0, #1
 80060be:	e6f3      	b.n	8005ea8 <UART_SetConfig+0x928>
      ret = HAL_ERROR;
 80060c0:	2001      	movs	r0, #1
 80060c2:	e6f1      	b.n	8005ea8 <UART_SetConfig+0x928>

080060c4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060c6:	f013 0f01 	tst.w	r3, #1
 80060ca:	d006      	beq.n	80060da <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060cc:	6802      	ldr	r2, [r0, #0]
 80060ce:	6853      	ldr	r3, [r2, #4]
 80060d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80060d4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80060d6:	430b      	orrs	r3, r1
 80060d8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060dc:	f013 0f02 	tst.w	r3, #2
 80060e0:	d006      	beq.n	80060f0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e2:	6802      	ldr	r2, [r0, #0]
 80060e4:	6853      	ldr	r3, [r2, #4]
 80060e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80060ec:	430b      	orrs	r3, r1
 80060ee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060f2:	f013 0f04 	tst.w	r3, #4
 80060f6:	d006      	beq.n	8006106 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060f8:	6802      	ldr	r2, [r0, #0]
 80060fa:	6853      	ldr	r3, [r2, #4]
 80060fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006100:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006102:	430b      	orrs	r3, r1
 8006104:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006106:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006108:	f013 0f08 	tst.w	r3, #8
 800610c:	d006      	beq.n	800611c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800610e:	6802      	ldr	r2, [r0, #0]
 8006110:	6853      	ldr	r3, [r2, #4]
 8006112:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006116:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006118:	430b      	orrs	r3, r1
 800611a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800611c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800611e:	f013 0f10 	tst.w	r3, #16
 8006122:	d006      	beq.n	8006132 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006124:	6802      	ldr	r2, [r0, #0]
 8006126:	6893      	ldr	r3, [r2, #8]
 8006128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800612c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800612e:	430b      	orrs	r3, r1
 8006130:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006132:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006134:	f013 0f20 	tst.w	r3, #32
 8006138:	d006      	beq.n	8006148 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800613a:	6802      	ldr	r2, [r0, #0]
 800613c:	6893      	ldr	r3, [r2, #8]
 800613e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006142:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006144:	430b      	orrs	r3, r1
 8006146:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006148:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800614a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800614e:	d00a      	beq.n	8006166 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006150:	6802      	ldr	r2, [r0, #0]
 8006152:	6853      	ldr	r3, [r2, #4]
 8006154:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006158:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800615a:	430b      	orrs	r3, r1
 800615c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800615e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006164:	d00b      	beq.n	800617e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006166:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006168:	f013 0f80 	tst.w	r3, #128	; 0x80
 800616c:	d006      	beq.n	800617c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800616e:	6802      	ldr	r2, [r0, #0]
 8006170:	6853      	ldr	r3, [r2, #4]
 8006172:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006176:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006178:	430b      	orrs	r3, r1
 800617a:	6053      	str	r3, [r2, #4]
}
 800617c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800617e:	6802      	ldr	r2, [r0, #0]
 8006180:	6853      	ldr	r3, [r2, #4]
 8006182:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006186:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006188:	430b      	orrs	r3, r1
 800618a:	6053      	str	r3, [r2, #4]
 800618c:	e7eb      	b.n	8006166 <UART_AdvFeatureConfig+0xa2>

0800618e <UART_WaitOnFlagUntilTimeout>:
{
 800618e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006192:	4604      	mov	r4, r0
 8006194:	460f      	mov	r7, r1
 8006196:	4616      	mov	r6, r2
 8006198:	4698      	mov	r8, r3
 800619a:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	ea37 0303 	bics.w	r3, r7, r3
 80061a4:	bf0c      	ite	eq
 80061a6:	2301      	moveq	r3, #1
 80061a8:	2300      	movne	r3, #0
 80061aa:	42b3      	cmp	r3, r6
 80061ac:	d13f      	bne.n	800622e <UART_WaitOnFlagUntilTimeout+0xa0>
    if (Timeout != HAL_MAX_DELAY)
 80061ae:	f1b5 3fff 	cmp.w	r5, #4294967295
 80061b2:	d0f3      	beq.n	800619c <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b4:	f7fb fe60 	bl	8001e78 <HAL_GetTick>
 80061b8:	eba0 0008 	sub.w	r0, r0, r8
 80061bc:	42a8      	cmp	r0, r5
 80061be:	d822      	bhi.n	8006206 <UART_WaitOnFlagUntilTimeout+0x78>
 80061c0:	b30d      	cbz	r5, 8006206 <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	f012 0f04 	tst.w	r2, #4
 80061ca:	d0e7      	beq.n	800619c <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80061d2:	d0e3      	beq.n	800619c <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061d8:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	6813      	ldr	r3, [r2, #0]
 80061de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061e2:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	6893      	ldr	r3, [r2, #8]
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80061ee:	2320      	movs	r3, #32
 80061f0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80061f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 80061fc:	2300      	movs	r3, #0
 80061fe:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8006202:	2003      	movs	r0, #3
 8006204:	e014      	b.n	8006230 <UART_WaitOnFlagUntilTimeout+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	6813      	ldr	r3, [r2, #0]
 800620a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800620e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	6893      	ldr	r3, [r2, #8]
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800621a:	2320      	movs	r3, #32
 800621c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006220:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8006224:	2300      	movs	r3, #0
 8006226:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 800622a:	2003      	movs	r0, #3
 800622c:	e000      	b.n	8006230 <UART_WaitOnFlagUntilTimeout+0xa2>
  return HAL_OK;
 800622e:	2000      	movs	r0, #0
}
 8006230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006234 <UART_CheckIdleState>:
{
 8006234:	b530      	push	{r4, r5, lr}
 8006236:	b083      	sub	sp, #12
 8006238:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623a:	2300      	movs	r3, #0
 800623c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8006240:	f7fb fe1a 	bl	8001e78 <HAL_GetTick>
 8006244:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f013 0f08 	tst.w	r3, #8
 800624e:	d10e      	bne.n	800626e <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f013 0f04 	tst.w	r3, #4
 8006258:	d117      	bne.n	800628a <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 800625a:	2320      	movs	r3, #32
 800625c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006260:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006264:	2000      	movs	r0, #0
 8006266:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800626a:	b003      	add	sp, #12
 800626c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800626e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	4603      	mov	r3, r0
 8006276:	2200      	movs	r2, #0
 8006278:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800627c:	4620      	mov	r0, r4
 800627e:	f7ff ff86 	bl	800618e <UART_WaitOnFlagUntilTimeout>
 8006282:	2800      	cmp	r0, #0
 8006284:	d0e4      	beq.n	8006250 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006286:	2003      	movs	r0, #3
 8006288:	e7ef      	b.n	800626a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800628a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	462b      	mov	r3, r5
 8006292:	2200      	movs	r2, #0
 8006294:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006298:	4620      	mov	r0, r4
 800629a:	f7ff ff78 	bl	800618e <UART_WaitOnFlagUntilTimeout>
 800629e:	2800      	cmp	r0, #0
 80062a0:	d0db      	beq.n	800625a <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80062a2:	2003      	movs	r0, #3
 80062a4:	e7e1      	b.n	800626a <UART_CheckIdleState+0x36>

080062a6 <HAL_UART_Init>:
  if (huart == NULL)
 80062a6:	b378      	cbz	r0, 8006308 <HAL_UART_Init+0x62>
{
 80062a8:	b510      	push	{r4, lr}
 80062aa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80062ac:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80062b0:	b30b      	cbz	r3, 80062f6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80062b2:	2324      	movs	r3, #36	; 0x24
 80062b4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80062b8:	6822      	ldr	r2, [r4, #0]
 80062ba:	6813      	ldr	r3, [r2, #0]
 80062bc:	f023 0301 	bic.w	r3, r3, #1
 80062c0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062c2:	4620      	mov	r0, r4
 80062c4:	f7ff f95c 	bl	8005580 <UART_SetConfig>
 80062c8:	2801      	cmp	r0, #1
 80062ca:	d013      	beq.n	80062f4 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062ce:	b9bb      	cbnz	r3, 8006300 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062d0:	6822      	ldr	r2, [r4, #0]
 80062d2:	6853      	ldr	r3, [r2, #4]
 80062d4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80062d8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062da:	6822      	ldr	r2, [r4, #0]
 80062dc:	6893      	ldr	r3, [r2, #8]
 80062de:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80062e2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	6813      	ldr	r3, [r2, #0]
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80062ee:	4620      	mov	r0, r4
 80062f0:	f7ff ffa0 	bl	8006234 <UART_CheckIdleState>
}
 80062f4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80062f6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80062fa:	f7fb fd31 	bl	8001d60 <HAL_UART_MspInit>
 80062fe:	e7d8      	b.n	80062b2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006300:	4620      	mov	r0, r4
 8006302:	f7ff fedf 	bl	80060c4 <UART_AdvFeatureConfig>
 8006306:	e7e3      	b.n	80062d0 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006308:	2001      	movs	r0, #1
}
 800630a:	4770      	bx	lr

0800630c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800630c:	b410      	push	{r4}
 800630e:	b085      	sub	sp, #20
 8006310:	4602      	mov	r2, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006312:	4b1a      	ldr	r3, [pc, #104]	; (800637c <UARTEx_SetNbDataToProcess+0x70>)
 8006314:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006318:	ac04      	add	r4, sp, #16
 800631a:	e904 0003 	stmdb	r4, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800631e:	466c      	mov	r4, sp
 8006320:	3308      	adds	r3, #8
 8006322:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006326:	e884 0003 	stmia.w	r4, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800632a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800632c:	b1fb      	cbz	r3, 800636e <UARTEx_SetNbDataToProcess+0x62>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800632e:	6811      	ldr	r1, [r2, #0]
 8006330:	688b      	ldr	r3, [r1, #8]
 8006332:	f3c3 6342 	ubfx	r3, r3, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006336:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006338:	a904      	add	r1, sp, #16
 800633a:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 800633e:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 8006342:	00c9      	lsls	r1, r1, #3
 8006344:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8006348:	fb91 f1f0 	sdiv	r1, r1, r0
 800634c:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006350:	a904      	add	r1, sp, #16
 8006352:	440b      	add	r3, r1
 8006354:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8006358:	00c9      	lsls	r1, r1, #3
 800635a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800635e:	fb91 f3f3 	sdiv	r3, r1, r3
 8006362:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
  }
}
 8006366:	b005      	add	sp, #20
 8006368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800636c:	4770      	bx	lr
    huart->NbTxDataToProcess = 1U;
 800636e:	2301      	movs	r3, #1
 8006370:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006374:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 8006378:	e7f5      	b.n	8006366 <UARTEx_SetNbDataToProcess+0x5a>
 800637a:	bf00      	nop
 800637c:	0800ae1c 	.word	0x0800ae1c

08006380 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006380:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d018      	beq.n	80063ba <HAL_UARTEx_DisableFifoMode+0x3a>
 8006388:	2301      	movs	r3, #1
 800638a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800638e:	2324      	movs	r3, #36	; 0x24
 8006390:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006394:	6803      	ldr	r3, [r0, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006398:	6819      	ldr	r1, [r3, #0]
 800639a:	f021 0101 	bic.w	r1, r1, #1
 800639e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063a0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063a8:	6801      	ldr	r1, [r0, #0]
 80063aa:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80063b2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 80063b6:	4618      	mov	r0, r3
 80063b8:	4770      	bx	lr
  __HAL_LOCK(huart);
 80063ba:	2002      	movs	r0, #2
}
 80063bc:	4770      	bx	lr

080063be <HAL_UARTEx_SetTxFifoThreshold>:
{
 80063be:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80063c0:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d01d      	beq.n	8006404 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80063c8:	4604      	mov	r4, r0
 80063ca:	2301      	movs	r3, #1
 80063cc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	2324      	movs	r3, #36	; 0x24
 80063d2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063d6:	6803      	ldr	r3, [r0, #0]
 80063d8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063e2:	6802      	ldr	r2, [r0, #0]
 80063e4:	6893      	ldr	r3, [r2, #8]
 80063e6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80063ea:	4319      	orrs	r1, r3
 80063ec:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80063ee:	f7ff ff8d 	bl	800630c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80063f6:	2320      	movs	r3, #32
 80063f8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80063fc:	2000      	movs	r0, #0
 80063fe:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8006402:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006404:	2002      	movs	r0, #2
 8006406:	e7fc      	b.n	8006402 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006408 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006408:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800640a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800640e:	2b01      	cmp	r3, #1
 8006410:	d01d      	beq.n	800644e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006412:	4604      	mov	r4, r0
 8006414:	2301      	movs	r3, #1
 8006416:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800641a:	2324      	movs	r3, #36	; 0x24
 800641c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006420:	6803      	ldr	r3, [r0, #0]
 8006422:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	f022 0201 	bic.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800642c:	6802      	ldr	r2, [r0, #0]
 800642e:	6893      	ldr	r3, [r2, #8]
 8006430:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006434:	4319      	orrs	r1, r3
 8006436:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006438:	f7ff ff68 	bl	800630c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006440:	2320      	movs	r3, #32
 8006442:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8006446:	2000      	movs	r0, #0
 8006448:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800644c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800644e:	2002      	movs	r0, #2
 8006450:	e7fc      	b.n	800644c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006454 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006454:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006458:	b99b      	cbnz	r3, 8006482 <osKernelInitialize+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645a:	f3ef 8310 	mrs	r3, PRIMASK
 800645e:	b99b      	cbnz	r3, 8006488 <osKernelInitialize+0x34>
 8006460:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <osKernelInitialize+0x40>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d005      	beq.n	8006474 <osKernelInitialize+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8006468:	b98b      	cbnz	r3, 800648e <osKernelInitialize+0x3a>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800646a:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <osKernelInitialize+0x40>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006470:	2000      	movs	r0, #0
 8006472:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006474:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8006478:	2a00      	cmp	r2, #0
 800647a:	d0f5      	beq.n	8006468 <osKernelInitialize+0x14>
    stat = osErrorISR;
 800647c:	f06f 0005 	mvn.w	r0, #5
 8006480:	4770      	bx	lr
 8006482:	f06f 0005 	mvn.w	r0, #5
 8006486:	4770      	bx	lr
 8006488:	f06f 0005 	mvn.w	r0, #5
 800648c:	4770      	bx	lr
    } else {
      stat = osError;
 800648e:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006492:	4770      	bx	lr
 8006494:	20000c00 	.word	0x20000c00

08006498 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006498:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800649a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800649e:	b9b3      	cbnz	r3, 80064ce <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a0:	f3ef 8310 	mrs	r3, PRIMASK
 80064a4:	b9b3      	cbnz	r3, 80064d4 <osKernelStart+0x3c>
 80064a6:	4b0e      	ldr	r3, [pc, #56]	; (80064e0 <osKernelStart+0x48>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d008      	beq.n	80064c0 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d113      	bne.n	80064da <osKernelStart+0x42>
      KernelState = osKernelRunning;
 80064b2:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <osKernelStart+0x48>)
 80064b4:	2202      	movs	r2, #2
 80064b6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80064b8:	f001 ff14 	bl	80082e4 <vTaskStartScheduler>
      stat = osOK;
 80064bc:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80064be:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064c0:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	d0f2      	beq.n	80064ae <osKernelStart+0x16>
    stat = osErrorISR;
 80064c8:	f06f 0005 	mvn.w	r0, #5
 80064cc:	e7f7      	b.n	80064be <osKernelStart+0x26>
 80064ce:	f06f 0005 	mvn.w	r0, #5
 80064d2:	e7f4      	b.n	80064be <osKernelStart+0x26>
 80064d4:	f06f 0005 	mvn.w	r0, #5
 80064d8:	e7f1      	b.n	80064be <osKernelStart+0x26>
      stat = osError;
 80064da:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80064de:	e7ee      	b.n	80064be <osKernelStart+0x26>
 80064e0:	20000c00 	.word	0x20000c00

080064e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064e6:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064e8:	2400      	movs	r4, #0
 80064ea:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ec:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80064f0:	bb4c      	cbnz	r4, 8006546 <osThreadNew+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064f2:	f3ef 8310 	mrs	r3, PRIMASK
 80064f6:	bb33      	cbnz	r3, 8006546 <osThreadNew+0x62>
 80064f8:	4b33      	ldr	r3, [pc, #204]	; (80065c8 <osThreadNew+0xe4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d025      	beq.n	800654c <osThreadNew+0x68>
 8006500:	b308      	cbz	r0, 8006546 <osThreadNew+0x62>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8006502:	2300      	movs	r3, #0
 8006504:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8006508:	b392      	cbz	r2, 8006570 <osThreadNew+0x8c>
      if (attr->name != NULL) {
 800650a:	6816      	ldr	r6, [r2, #0]
 800650c:	b31e      	cbz	r6, 8006556 <osThreadNew+0x72>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800650e:	6994      	ldr	r4, [r2, #24]
 8006510:	b904      	cbnz	r4, 8006514 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 8006512:	2418      	movs	r4, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006514:	1e63      	subs	r3, r4, #1
 8006516:	2b37      	cmp	r3, #55	; 0x37
 8006518:	d852      	bhi.n	80065c0 <osThreadNew+0xdc>
 800651a:	6853      	ldr	r3, [r2, #4]
 800651c:	f013 0f01 	tst.w	r3, #1
 8006520:	d150      	bne.n	80065c4 <osThreadNew+0xe0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006522:	6955      	ldr	r5, [r2, #20]
 8006524:	b1d5      	cbz	r5, 800655c <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006526:	ea4f 0c95 	mov.w	ip, r5, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800652a:	6893      	ldr	r3, [r2, #8]
 800652c:	b12b      	cbz	r3, 800653a <osThreadNew+0x56>
 800652e:	68d7      	ldr	r7, [r2, #12]
 8006530:	2f5b      	cmp	r7, #91	; 0x5b
 8006532:	d902      	bls.n	800653a <osThreadNew+0x56>
 8006534:	6917      	ldr	r7, [r2, #16]
 8006536:	b107      	cbz	r7, 800653a <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006538:	bb0d      	cbnz	r5, 800657e <osThreadNew+0x9a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800653a:	b193      	cbz	r3, 8006562 <osThreadNew+0x7e>
    mem   = -1;
 800653c:	f04f 35ff 	mov.w	r5, #4294967295
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8006540:	2d01      	cmp	r5, #1
 8006542:	d023      	beq.n	800658c <osThreadNew+0xa8>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8006544:	b375      	cbz	r5, 80065a4 <osThreadNew+0xc0>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006546:	9804      	ldr	r0, [sp, #16]
}
 8006548:	b007      	add	sp, #28
 800654a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800654c:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f8      	bne.n	8006546 <osThreadNew+0x62>
 8006554:	e7d4      	b.n	8006500 <osThreadNew+0x1c>
    name  = &empty;
 8006556:	f10d 0617 	add.w	r6, sp, #23
 800655a:	e7d8      	b.n	800650e <osThreadNew+0x2a>
    stack = configMINIMAL_STACK_SIZE;
 800655c:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8006560:	e7e3      	b.n	800652a <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006562:	68d3      	ldr	r3, [r2, #12]
 8006564:	b96b      	cbnz	r3, 8006582 <osThreadNew+0x9e>
 8006566:	6913      	ldr	r3, [r2, #16]
 8006568:	b173      	cbz	r3, 8006588 <osThreadNew+0xa4>
    mem   = -1;
 800656a:	f04f 35ff 	mov.w	r5, #4294967295
 800656e:	e7e7      	b.n	8006540 <osThreadNew+0x5c>
      mem = 0;
 8006570:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8006572:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 8006574:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8006578:	f10d 0617 	add.w	r6, sp, #23
 800657c:	e7e0      	b.n	8006540 <osThreadNew+0x5c>
        mem = 1;
 800657e:	2501      	movs	r5, #1
 8006580:	e7de      	b.n	8006540 <osThreadNew+0x5c>
    mem   = -1;
 8006582:	f04f 35ff 	mov.w	r5, #4294967295
 8006586:	e7db      	b.n	8006540 <osThreadNew+0x5c>
          mem = 0;
 8006588:	2500      	movs	r5, #0
 800658a:	e7d9      	b.n	8006540 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800658c:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800658e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006590:	9202      	str	r2, [sp, #8]
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	9400      	str	r4, [sp, #0]
 8006596:	460b      	mov	r3, r1
 8006598:	4662      	mov	r2, ip
 800659a:	4631      	mov	r1, r6
 800659c:	f001 fe36 	bl	800820c <xTaskCreateStatic>
 80065a0:	9004      	str	r0, [sp, #16]
 80065a2:	e7d0      	b.n	8006546 <osThreadNew+0x62>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065a4:	aa04      	add	r2, sp, #16
 80065a6:	9201      	str	r2, [sp, #4]
 80065a8:	9400      	str	r4, [sp, #0]
 80065aa:	460b      	mov	r3, r1
 80065ac:	fa1f f28c 	uxth.w	r2, ip
 80065b0:	4631      	mov	r1, r6
 80065b2:	f001 fe64 	bl	800827e <xTaskCreate>
 80065b6:	2801      	cmp	r0, #1
 80065b8:	d0c5      	beq.n	8006546 <osThreadNew+0x62>
          hTask = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	9304      	str	r3, [sp, #16]
 80065be:	e7c2      	b.n	8006546 <osThreadNew+0x62>
        return (NULL);
 80065c0:	2000      	movs	r0, #0
 80065c2:	e7c1      	b.n	8006548 <osThreadNew+0x64>
 80065c4:	2000      	movs	r0, #0
 80065c6:	e7bf      	b.n	8006548 <osThreadNew+0x64>
 80065c8:	20000c00 	.word	0x20000c00

080065cc <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80065cc:	b530      	push	{r4, r5, lr}
 80065ce:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80065d0:	b370      	cbz	r0, 8006630 <osThreadFlagsSet+0x64>
 80065d2:	4605      	mov	r5, r0
 80065d4:	2900      	cmp	r1, #0
 80065d6:	db2b      	blt.n	8006630 <osThreadFlagsSet+0x64>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295
 80065dc:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065de:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 80065e2:	b94b      	cbnz	r3, 80065f8 <osThreadFlagsSet+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e4:	f3ef 8310 	mrs	r3, PRIMASK
 80065e8:	b933      	cbnz	r3, 80065f8 <osThreadFlagsSet+0x2c>
 80065ea:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <osThreadFlagsSet+0x88>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d124      	bne.n	800663c <osThreadFlagsSet+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065f2:	f3ef 8311 	mrs	r3, BASEPRI
 80065f6:	b30b      	cbz	r3, 800663c <osThreadFlagsSet+0x70>
      yield = pdFALSE;
 80065f8:	2400      	movs	r4, #0
 80065fa:	ab04      	add	r3, sp, #16
 80065fc:	f843 4d08 	str.w	r4, [r3, #-8]!

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	4623      	mov	r3, r4
 8006604:	2201      	movs	r2, #1
 8006606:	4628      	mov	r0, r5
 8006608:	f002 fb40 	bl	8008c8c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800660c:	9400      	str	r4, [sp, #0]
 800660e:	ab03      	add	r3, sp, #12
 8006610:	4622      	mov	r2, r4
 8006612:	4621      	mov	r1, r4
 8006614:	4628      	mov	r0, r5
 8006616:	f002 fb39 	bl	8008c8c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800661a:	9b02      	ldr	r3, [sp, #8]
 800661c:	b15b      	cbz	r3, 8006636 <osThreadFlagsSet+0x6a>
 800661e:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <osThreadFlagsSet+0x8c>)
 8006620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	e002      	b.n	8006636 <osThreadFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8006630:	f06f 0303 	mvn.w	r3, #3
 8006634:	9303      	str	r3, [sp, #12]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 8006636:	9803      	ldr	r0, [sp, #12]
 8006638:	b005      	add	sp, #20
 800663a:	bd30      	pop	{r4, r5, pc}
      (void)xTaskNotify (hTask, flags, eSetBits);
 800663c:	2300      	movs	r3, #0
 800663e:	2201      	movs	r2, #1
 8006640:	4628      	mov	r0, r5
 8006642:	f002 fab1 	bl	8008ba8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8006646:	ab03      	add	r3, sp, #12
 8006648:	2200      	movs	r2, #0
 800664a:	4611      	mov	r1, r2
 800664c:	4628      	mov	r0, r5
 800664e:	f002 faab 	bl	8008ba8 <xTaskGenericNotify>
 8006652:	e7f0      	b.n	8006636 <osThreadFlagsSet+0x6a>
 8006654:	20000c00 	.word	0x20000c00
 8006658:	e000ed04 	.word	0xe000ed04

0800665c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800665c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006660:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006662:	f3ef 8305 	mrs	r3, IPSR
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8006666:	2b00      	cmp	r3, #0
 8006668:	d14d      	bne.n	8006706 <osThreadFlagsWait+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800666a:	f3ef 8710 	mrs	r7, PRIMASK
 800666e:	463d      	mov	r5, r7
 8006670:	2f00      	cmp	r7, #0
 8006672:	d14e      	bne.n	8006712 <osThreadFlagsWait+0xb6>
 8006674:	4b2b      	ldr	r3, [pc, #172]	; (8006724 <osThreadFlagsWait+0xc8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d00d      	beq.n	8006698 <osThreadFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800667c:	2800      	cmp	r0, #0
 800667e:	db4b      	blt.n	8006718 <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8006680:	f011 0f02 	tst.w	r1, #2
 8006684:	d00f      	beq.n	80066a6 <osThreadFlagsWait+0x4a>
      clear = 0U;
 8006686:	46b8      	mov	r8, r7
 8006688:	4617      	mov	r7, r2
 800668a:	468a      	mov	sl, r1
 800668c:	4681      	mov	r9, r0
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 800668e:	f001 fe7b 	bl	8008388 <xTaskGetTickCount>
 8006692:	4683      	mov	fp, r0
    tout   = timeout;
 8006694:	463e      	mov	r6, r7
 8006696:	e028      	b.n	80066ea <osThreadFlagsWait+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006698:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0ed      	beq.n	800667c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80066a0:	f06f 0505 	mvn.w	r5, #5
 80066a4:	e031      	b.n	800670a <osThreadFlagsWait+0xae>
      clear = flags;
 80066a6:	4680      	mov	r8, r0
 80066a8:	e7ee      	b.n	8006688 <osThreadFlagsWait+0x2c>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 80066aa:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 80066ae:	9b01      	ldr	r3, [sp, #4]
 80066b0:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80066b2:	f01a 0f01 	tst.w	sl, #1
 80066b6:	d00b      	beq.n	80066d0 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 80066b8:	ea39 0305 	bics.w	r3, r9, r5
 80066bc:	d025      	beq.n	800670a <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 80066be:	b377      	cbz	r7, 800671e <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80066c0:	f001 fe62 	bl	8008388 <xTaskGetTickCount>
 80066c4:	eba0 000b 	sub.w	r0, r0, fp

        if (td > tout) {
 80066c8:	4286      	cmp	r6, r0
 80066ca:	d309      	bcc.n	80066e0 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 80066cc:	1a36      	subs	r6, r6, r0
 80066ce:	e00b      	b.n	80066e8 <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 80066d0:	ea19 0f05 	tst.w	r9, r5
 80066d4:	d119      	bne.n	800670a <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 80066d6:	2f00      	cmp	r7, #0
 80066d8:	d1f2      	bne.n	80066c0 <osThreadFlagsWait+0x64>
              rflags = (uint32_t)osErrorResource;
 80066da:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 80066de:	e014      	b.n	800670a <osThreadFlagsWait+0xae>
          tout  = 0;
 80066e0:	2600      	movs	r6, #0
 80066e2:	e001      	b.n	80066e8 <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 80066e4:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 80066e8:	b17c      	cbz	r4, 800670a <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80066ea:	4633      	mov	r3, r6
 80066ec:	aa01      	add	r2, sp, #4
 80066ee:	4641      	mov	r1, r8
 80066f0:	2000      	movs	r0, #0
 80066f2:	f002 fa0d 	bl	8008b10 <xTaskNotifyWait>
 80066f6:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 80066f8:	2801      	cmp	r0, #1
 80066fa:	d0d6      	beq.n	80066aa <osThreadFlagsWait+0x4e>
        if (timeout == 0) {
 80066fc:	2f00      	cmp	r7, #0
 80066fe:	d1f1      	bne.n	80066e4 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 8006700:	f06f 0502 	mvn.w	r5, #2
 8006704:	e7f0      	b.n	80066e8 <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 8006706:	f06f 0505 	mvn.w	r5, #5
}
 800670a:	4628      	mov	r0, r5
 800670c:	b003      	add	sp, #12
 800670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 8006712:	f06f 0505 	mvn.w	r5, #5
 8006716:	e7f8      	b.n	800670a <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 8006718:	f06f 0503 	mvn.w	r5, #3
 800671c:	e7f5      	b.n	800670a <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 800671e:	f06f 0502 	mvn.w	r5, #2
 8006722:	e7f2      	b.n	800670a <osThreadFlagsWait+0xae>
 8006724:	20000c00 	.word	0x20000c00

08006728 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8006728:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800672a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800672e:	b9a3      	cbnz	r3, 800675a <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006730:	f3ef 8310 	mrs	r3, PRIMASK
 8006734:	b9a3      	cbnz	r3, 8006760 <osDelay+0x38>
 8006736:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <osDelay+0x40>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d002      	beq.n	8006744 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800673e:	b940      	cbnz	r0, 8006752 <osDelay+0x2a>
    stat = osOK;
 8006740:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006742:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006744:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0f8      	beq.n	800673e <osDelay+0x16>
    stat = osErrorISR;
 800674c:	f06f 0005 	mvn.w	r0, #5
 8006750:	e7f7      	b.n	8006742 <osDelay+0x1a>
      vTaskDelay(ticks);
 8006752:	f001 ff3f 	bl	80085d4 <vTaskDelay>
    stat = osOK;
 8006756:	2000      	movs	r0, #0
 8006758:	e7f3      	b.n	8006742 <osDelay+0x1a>
    stat = osErrorISR;
 800675a:	f06f 0005 	mvn.w	r0, #5
 800675e:	e7f0      	b.n	8006742 <osDelay+0x1a>
 8006760:	f06f 0005 	mvn.w	r0, #5
 8006764:	e7ed      	b.n	8006742 <osDelay+0x1a>
 8006766:	bf00      	nop
 8006768:	20000c00 	.word	0x20000c00

0800676c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800676c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800676e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8006772:	2b00      	cmp	r3, #0
 8006774:	d150      	bne.n	8006818 <osMutexNew+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006776:	f3ef 8310 	mrs	r3, PRIMASK
 800677a:	461e      	mov	r6, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d14d      	bne.n	800681c <osMutexNew+0xb0>
 8006780:	4a28      	ldr	r2, [pc, #160]	; (8006824 <osMutexNew+0xb8>)
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	2a02      	cmp	r2, #2
 8006786:	d024      	beq.n	80067d2 <osMutexNew+0x66>
    if (attr != NULL) {
 8006788:	b100      	cbz	r0, 800678c <osMutexNew+0x20>
      type = attr->attr_bits;
 800678a:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800678c:	f013 0f01 	tst.w	r3, #1
 8006790:	d000      	beq.n	8006794 <osMutexNew+0x28>
      rmtx = 1U;
 8006792:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006794:	f013 0f08 	tst.w	r3, #8
 8006798:	d142      	bne.n	8006820 <osMutexNew+0xb4>
 800679a:	4604      	mov	r4, r0
      mem = -1;

      if (attr != NULL) {
 800679c:	b378      	cbz	r0, 80067fe <osMutexNew+0x92>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800679e:	6881      	ldr	r1, [r0, #8]
 80067a0:	b111      	cbz	r1, 80067a8 <osMutexNew+0x3c>
 80067a2:	68c3      	ldr	r3, [r0, #12]
 80067a4:	2b4f      	cmp	r3, #79	; 0x4f
 80067a6:	d81f      	bhi.n	80067e8 <osMutexNew+0x7c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80067a8:	b1c9      	cbz	r1, 80067de <osMutexNew+0x72>
      mem = -1;
 80067aa:	f04f 33ff 	mov.w	r3, #4294967295
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 80067ae:	bb8b      	cbnz	r3, 8006814 <osMutexNew+0xa8>
          if (rmtx != 0U) {
 80067b0:	b34e      	cbz	r6, 8006806 <osMutexNew+0x9a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80067b2:	2004      	movs	r0, #4
 80067b4:	f001 f846 	bl	8007844 <xQueueCreateMutex>
 80067b8:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80067ba:	b125      	cbz	r5, 80067c6 <osMutexNew+0x5a>
        if (attr != NULL) {
 80067bc:	b344      	cbz	r4, 8006810 <osMutexNew+0xa4>
          name = attr->name;
 80067be:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80067c0:	4628      	mov	r0, r5
 80067c2:	f001 fb2b 	bl	8007e1c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80067c6:	b115      	cbz	r5, 80067ce <osMutexNew+0x62>
 80067c8:	b10e      	cbz	r6, 80067ce <osMutexNew+0x62>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80067ca:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80067ce:	4628      	mov	r0, r5
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067d2:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 80067d6:	2a00      	cmp	r2, #0
 80067d8:	d0d6      	beq.n	8006788 <osMutexNew+0x1c>
  hMutex = NULL;
 80067da:	2500      	movs	r5, #0
 80067dc:	e7f7      	b.n	80067ce <osMutexNew+0x62>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80067de:	68e3      	ldr	r3, [r4, #12]
 80067e0:	b17b      	cbz	r3, 8006802 <osMutexNew+0x96>
      mem = -1;
 80067e2:	f04f 33ff 	mov.w	r3, #4294967295
 80067e6:	e7e2      	b.n	80067ae <osMutexNew+0x42>
        if (rmtx != 0U) {
 80067e8:	b126      	cbz	r6, 80067f4 <osMutexNew+0x88>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80067ea:	2004      	movs	r0, #4
 80067ec:	f001 f835 	bl	800785a <xQueueCreateMutexStatic>
 80067f0:	4605      	mov	r5, r0
 80067f2:	e7e2      	b.n	80067ba <osMutexNew+0x4e>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80067f4:	2001      	movs	r0, #1
 80067f6:	f001 f830 	bl	800785a <xQueueCreateMutexStatic>
 80067fa:	4605      	mov	r5, r0
 80067fc:	e7dd      	b.n	80067ba <osMutexNew+0x4e>
        mem = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	e7d5      	b.n	80067ae <osMutexNew+0x42>
            mem = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	e7d3      	b.n	80067ae <osMutexNew+0x42>
            hMutex = xSemaphoreCreateMutex ();
 8006806:	2001      	movs	r0, #1
 8006808:	f001 f81c 	bl	8007844 <xQueueCreateMutex>
 800680c:	4605      	mov	r5, r0
 800680e:	e7d4      	b.n	80067ba <osMutexNew+0x4e>
          name = NULL;
 8006810:	2100      	movs	r1, #0
 8006812:	e7d5      	b.n	80067c0 <osMutexNew+0x54>
  hMutex = NULL;
 8006814:	2500      	movs	r5, #0
 8006816:	e7d6      	b.n	80067c6 <osMutexNew+0x5a>
 8006818:	2500      	movs	r5, #0
 800681a:	e7d8      	b.n	80067ce <osMutexNew+0x62>
 800681c:	2500      	movs	r5, #0
 800681e:	e7d6      	b.n	80067ce <osMutexNew+0x62>
 8006820:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8006822:	e7d4      	b.n	80067ce <osMutexNew+0x62>
 8006824:	20000c00 	.word	0x20000c00

08006828 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006828:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800682c:	f000 0301 	and.w	r3, r0, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006830:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006834:	bb18      	cbnz	r0, 800687e <osMutexAcquire+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006836:	f3ef 8010 	mrs	r0, PRIMASK
 800683a:	bb18      	cbnz	r0, 8006884 <osMutexAcquire+0x5c>
 800683c:	4819      	ldr	r0, [pc, #100]	; (80068a4 <osMutexAcquire+0x7c>)
 800683e:	6800      	ldr	r0, [r0, #0]
 8006840:	2802      	cmp	r0, #2
 8006842:	d00c      	beq.n	800685e <osMutexAcquire+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8006844:	b30a      	cbz	r2, 800688a <osMutexAcquire+0x62>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006846:	b510      	push	{r4, lr}
 8006848:	460c      	mov	r4, r1
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800684a:	b17b      	cbz	r3, 800686c <osMutexAcquire+0x44>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800684c:	4610      	mov	r0, r2
 800684e:	f001 fa6d 	bl	8007d2c <xQueueTakeMutexRecursive>
 8006852:	2801      	cmp	r0, #1
 8006854:	d01c      	beq.n	8006890 <osMutexAcquire+0x68>
        if (timeout != 0U) {
 8006856:	b1ec      	cbz	r4, 8006894 <osMutexAcquire+0x6c>
          stat = osErrorTimeout;
 8006858:	f06f 0001 	mvn.w	r0, #1
      }
    }
  }

  return (stat);
}
 800685c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800685e:	f3ef 8011 	mrs	r0, BASEPRI
  if (IS_IRQ()) {
 8006862:	2800      	cmp	r0, #0
 8006864:	d0ee      	beq.n	8006844 <osMutexAcquire+0x1c>
    stat = osErrorISR;
 8006866:	f06f 0005 	mvn.w	r0, #5
 800686a:	4770      	bx	lr
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800686c:	4610      	mov	r0, r2
 800686e:	f001 f98f 	bl	8007b90 <xQueueSemaphoreTake>
 8006872:	2801      	cmp	r0, #1
 8006874:	d011      	beq.n	800689a <osMutexAcquire+0x72>
        if (timeout != 0U) {
 8006876:	b194      	cbz	r4, 800689e <osMutexAcquire+0x76>
          stat = osErrorTimeout;
 8006878:	f06f 0001 	mvn.w	r0, #1
 800687c:	e7ee      	b.n	800685c <osMutexAcquire+0x34>
    stat = osErrorISR;
 800687e:	f06f 0005 	mvn.w	r0, #5
 8006882:	4770      	bx	lr
 8006884:	f06f 0005 	mvn.w	r0, #5
 8006888:	4770      	bx	lr
    stat = osErrorParameter;
 800688a:	f06f 0003 	mvn.w	r0, #3
}
 800688e:	4770      	bx	lr
  stat = osOK;
 8006890:	2000      	movs	r0, #0
 8006892:	e7e3      	b.n	800685c <osMutexAcquire+0x34>
          stat = osErrorResource;
 8006894:	f06f 0002 	mvn.w	r0, #2
 8006898:	e7e0      	b.n	800685c <osMutexAcquire+0x34>
  stat = osOK;
 800689a:	2000      	movs	r0, #0
 800689c:	e7de      	b.n	800685c <osMutexAcquire+0x34>
          stat = osErrorResource;
 800689e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80068a2:	e7db      	b.n	800685c <osMutexAcquire+0x34>
 80068a4:	20000c00 	.word	0x20000c00

080068a8 <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068a8:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80068ac:	bb2a      	cbnz	r2, 80068fa <osMutexRelease+0x52>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80068ae:	b510      	push	{r4, lr}
 80068b0:	f020 0401 	bic.w	r4, r0, #1
 80068b4:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b8:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80068bc:	bb02      	cbnz	r2, 8006900 <osMutexRelease+0x58>
 80068be:	4a16      	ldr	r2, [pc, #88]	; (8006918 <osMutexRelease+0x70>)
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	2a02      	cmp	r2, #2
 80068c4:	d008      	beq.n	80068d8 <osMutexRelease+0x30>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80068c6:	b1f4      	cbz	r4, 8006906 <osMutexRelease+0x5e>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80068c8:	b168      	cbz	r0, 80068e6 <osMutexRelease+0x3e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 ffd4 	bl	8007878 <xQueueGiveMutexRecursive>
 80068d0:	2801      	cmp	r0, #1
 80068d2:	d11b      	bne.n	800690c <osMutexRelease+0x64>
  stat = osOK;
 80068d4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80068d6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068d8:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80068dc:	2a00      	cmp	r2, #0
 80068de:	d0f2      	beq.n	80068c6 <osMutexRelease+0x1e>
    stat = osErrorISR;
 80068e0:	f06f 0005 	mvn.w	r0, #5
 80068e4:	e7f7      	b.n	80068d6 <osMutexRelease+0x2e>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80068e6:	2300      	movs	r3, #0
 80068e8:	461a      	mov	r2, r3
 80068ea:	4619      	mov	r1, r3
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fedf 	bl	80076b0 <xQueueGenericSend>
 80068f2:	2801      	cmp	r0, #1
 80068f4:	d10d      	bne.n	8006912 <osMutexRelease+0x6a>
  stat = osOK;
 80068f6:	2000      	movs	r0, #0
 80068f8:	e7ed      	b.n	80068d6 <osMutexRelease+0x2e>
    stat = osErrorISR;
 80068fa:	f06f 0005 	mvn.w	r0, #5
}
 80068fe:	4770      	bx	lr
    stat = osErrorISR;
 8006900:	f06f 0005 	mvn.w	r0, #5
 8006904:	e7e7      	b.n	80068d6 <osMutexRelease+0x2e>
    stat = osErrorParameter;
 8006906:	f06f 0003 	mvn.w	r0, #3
 800690a:	e7e4      	b.n	80068d6 <osMutexRelease+0x2e>
        stat = osErrorResource;
 800690c:	f06f 0002 	mvn.w	r0, #2
 8006910:	e7e1      	b.n	80068d6 <osMutexRelease+0x2e>
        stat = osErrorResource;
 8006912:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8006916:	e7de      	b.n	80068d6 <osMutexRelease+0x2e>
 8006918:	20000c00 	.word	0x20000c00

0800691c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006920:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006924:	2b00      	cmp	r3, #0
 8006926:	d15b      	bne.n	80069e0 <osSemaphoreNew+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006928:	f3ef 8310 	mrs	r3, PRIMASK
 800692c:	2b00      	cmp	r3, #0
 800692e:	d159      	bne.n	80069e4 <osSemaphoreNew+0xc8>
 8006930:	4b31      	ldr	r3, [pc, #196]	; (80069f8 <osSemaphoreNew+0xdc>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b02      	cmp	r3, #2
 8006936:	d021      	beq.n	800697c <osSemaphoreNew+0x60>
 8006938:	2800      	cmp	r0, #0
 800693a:	d055      	beq.n	80069e8 <osSemaphoreNew+0xcc>
 800693c:	4288      	cmp	r0, r1
 800693e:	d355      	bcc.n	80069ec <osSemaphoreNew+0xd0>
    mem = -1;

    if (attr != NULL) {
 8006940:	b312      	cbz	r2, 8006988 <osSemaphoreNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006942:	6893      	ldr	r3, [r2, #8]
 8006944:	b113      	cbz	r3, 800694c <osSemaphoreNew+0x30>
 8006946:	68d4      	ldr	r4, [r2, #12]
 8006948:	2c4f      	cmp	r4, #79	; 0x4f
 800694a:	d81f      	bhi.n	800698c <osSemaphoreNew+0x70>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800694c:	2b00      	cmp	r3, #0
 800694e:	d14f      	bne.n	80069f0 <osSemaphoreNew+0xd4>
 8006950:	68d3      	ldr	r3, [r2, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d14e      	bne.n	80069f4 <osSemaphoreNew+0xd8>
 8006956:	4614      	mov	r4, r2
 8006958:	460d      	mov	r5, r1
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800695a:	2801      	cmp	r0, #1
 800695c:	d018      	beq.n	8006990 <osSemaphoreNew+0x74>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800695e:	2b00      	cmp	r3, #0
 8006960:	d137      	bne.n	80069d2 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006962:	f000 fe84 	bl	800766e <xQueueCreateCountingSemaphore>
 8006966:	4606      	mov	r6, r0
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006968:	b12e      	cbz	r6, 8006976 <osSemaphoreNew+0x5a>
        if (attr != NULL) {
 800696a:	2c00      	cmp	r4, #0
 800696c:	d036      	beq.n	80069dc <osSemaphoreNew+0xc0>
          name = attr->name;
 800696e:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006970:	4630      	mov	r0, r6
 8006972:	f001 fa53 	bl	8007e1c <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006976:	4630      	mov	r0, r6
 8006978:	b002      	add	sp, #8
 800697a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800697c:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0d9      	beq.n	8006938 <osSemaphoreNew+0x1c>
  hSemaphore = NULL;
 8006984:	2600      	movs	r6, #0
 8006986:	e7f6      	b.n	8006976 <osSemaphoreNew+0x5a>
      mem = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	e7e4      	b.n	8006956 <osSemaphoreNew+0x3a>
        mem = 1;
 800698c:	2301      	movs	r3, #1
 800698e:	e7e2      	b.n	8006956 <osSemaphoreNew+0x3a>
        if (mem == 1) {
 8006990:	b9b3      	cbnz	r3, 80069c0 <osSemaphoreNew+0xa4>
          hSemaphore = xSemaphoreCreateBinary();
 8006992:	2203      	movs	r2, #3
 8006994:	2100      	movs	r1, #0
 8006996:	2001      	movs	r0, #1
 8006998:	f000 fe1d 	bl	80075d6 <xQueueGenericCreate>
 800699c:	4606      	mov	r6, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800699e:	2e00      	cmp	r6, #0
 80069a0:	d0e2      	beq.n	8006968 <osSemaphoreNew+0x4c>
 80069a2:	2d00      	cmp	r5, #0
 80069a4:	d0e0      	beq.n	8006968 <osSemaphoreNew+0x4c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80069a6:	2300      	movs	r3, #0
 80069a8:	461a      	mov	r2, r3
 80069aa:	4619      	mov	r1, r3
 80069ac:	4630      	mov	r0, r6
 80069ae:	f000 fe7f 	bl	80076b0 <xQueueGenericSend>
 80069b2:	2801      	cmp	r0, #1
 80069b4:	d0d8      	beq.n	8006968 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 80069b6:	4630      	mov	r0, r6
 80069b8:	f001 fa5a 	bl	8007e70 <vQueueDelete>
            hSemaphore = NULL;
 80069bc:	2600      	movs	r6, #0
 80069be:	e7da      	b.n	8006976 <osSemaphoreNew+0x5a>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80069c0:	2303      	movs	r3, #3
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	6893      	ldr	r3, [r2, #8]
 80069c6:	2200      	movs	r2, #0
 80069c8:	4611      	mov	r1, r2
 80069ca:	f000 fdbc 	bl	8007546 <xQueueGenericCreateStatic>
 80069ce:	4606      	mov	r6, r0
 80069d0:	e7e5      	b.n	800699e <osSemaphoreNew+0x82>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80069d2:	6892      	ldr	r2, [r2, #8]
 80069d4:	f000 fe26 	bl	8007624 <xQueueCreateCountingSemaphoreStatic>
 80069d8:	4606      	mov	r6, r0
 80069da:	e7c5      	b.n	8006968 <osSemaphoreNew+0x4c>
          name = NULL;
 80069dc:	2100      	movs	r1, #0
 80069de:	e7c7      	b.n	8006970 <osSemaphoreNew+0x54>
  hSemaphore = NULL;
 80069e0:	2600      	movs	r6, #0
 80069e2:	e7c8      	b.n	8006976 <osSemaphoreNew+0x5a>
 80069e4:	2600      	movs	r6, #0
 80069e6:	e7c6      	b.n	8006976 <osSemaphoreNew+0x5a>
 80069e8:	2600      	movs	r6, #0
 80069ea:	e7c4      	b.n	8006976 <osSemaphoreNew+0x5a>
 80069ec:	2600      	movs	r6, #0
 80069ee:	e7c2      	b.n	8006976 <osSemaphoreNew+0x5a>
 80069f0:	2600      	movs	r6, #0
 80069f2:	e7c0      	b.n	8006976 <osSemaphoreNew+0x5a>
 80069f4:	2600      	movs	r6, #0
  return ((osSemaphoreId_t)hSemaphore);
 80069f6:	e7be      	b.n	8006976 <osSemaphoreNew+0x5a>
 80069f8:	20000c00 	.word	0x20000c00

080069fc <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80069fc:	b370      	cbz	r0, 8006a5c <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80069fe:	b510      	push	{r4, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a04:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006a08:	b94b      	cbnz	r3, 8006a1e <osSemaphoreAcquire+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a0e:	b933      	cbnz	r3, 8006a1e <osSemaphoreAcquire+0x22>
 8006a10:	4b1a      	ldr	r3, [pc, #104]	; (8006a7c <osSemaphoreAcquire+0x80>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d118      	bne.n	8006a4a <osSemaphoreAcquire+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a18:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1c:	b1ab      	cbz	r3, 8006a4a <osSemaphoreAcquire+0x4e>
    if (timeout != 0U) {
 8006a1e:	bb04      	cbnz	r4, 8006a62 <osSemaphoreAcquire+0x66>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8006a20:	2100      	movs	r1, #0
 8006a22:	aa02      	add	r2, sp, #8
 8006a24:	f842 1d04 	str.w	r1, [r2, #-4]!

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006a28:	f001 f9a2 	bl	8007d70 <xQueueReceiveFromISR>
 8006a2c:	2801      	cmp	r0, #1
 8006a2e:	d11b      	bne.n	8006a68 <osSemaphoreAcquire+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8006a30:	9b01      	ldr	r3, [sp, #4]
 8006a32:	b1e3      	cbz	r3, 8006a6e <osSemaphoreAcquire+0x72>
 8006a34:	4b12      	ldr	r3, [pc, #72]	; (8006a80 <osSemaphoreAcquire+0x84>)
 8006a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006a44:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006a46:	b002      	add	sp, #8
 8006a48:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	f001 f8a0 	bl	8007b90 <xQueueSemaphoreTake>
 8006a50:	2801      	cmp	r0, #1
 8006a52:	d00e      	beq.n	8006a72 <osSemaphoreAcquire+0x76>
      if (timeout != 0U) {
 8006a54:	b17c      	cbz	r4, 8006a76 <osSemaphoreAcquire+0x7a>
        stat = osErrorTimeout;
 8006a56:	f06f 0001 	mvn.w	r0, #1
 8006a5a:	e7f4      	b.n	8006a46 <osSemaphoreAcquire+0x4a>
    stat = osErrorParameter;
 8006a5c:	f06f 0003 	mvn.w	r0, #3
}
 8006a60:	4770      	bx	lr
      stat = osErrorParameter;
 8006a62:	f06f 0003 	mvn.w	r0, #3
 8006a66:	e7ee      	b.n	8006a46 <osSemaphoreAcquire+0x4a>
        stat = osErrorResource;
 8006a68:	f06f 0002 	mvn.w	r0, #2
 8006a6c:	e7eb      	b.n	8006a46 <osSemaphoreAcquire+0x4a>
  stat = osOK;
 8006a6e:	2000      	movs	r0, #0
 8006a70:	e7e9      	b.n	8006a46 <osSemaphoreAcquire+0x4a>
 8006a72:	2000      	movs	r0, #0
 8006a74:	e7e7      	b.n	8006a46 <osSemaphoreAcquire+0x4a>
        stat = osErrorResource;
 8006a76:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8006a7a:	e7e4      	b.n	8006a46 <osSemaphoreAcquire+0x4a>
 8006a7c:	20000c00 	.word	0x20000c00
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006a84:	b368      	cbz	r0, 8006ae2 <osSemaphoreRelease+0x5e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006a86:	b500      	push	{lr}
 8006a88:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a8a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006a8e:	b94b      	cbnz	r3, 8006aa4 <osSemaphoreRelease+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a90:	f3ef 8310 	mrs	r3, PRIMASK
 8006a94:	b933      	cbnz	r3, 8006aa4 <osSemaphoreRelease+0x20>
 8006a96:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <osSemaphoreRelease+0x74>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d118      	bne.n	8006ad0 <osSemaphoreRelease+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa2:	b1ab      	cbz	r3, 8006ad0 <osSemaphoreRelease+0x4c>
    yield = pdFALSE;
 8006aa4:	a902      	add	r1, sp, #8
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f841 3d04 	str.w	r3, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006aac:	f000 ff6a 	bl	8007984 <xQueueGiveFromISR>
 8006ab0:	2801      	cmp	r0, #1
 8006ab2:	d119      	bne.n	8006ae8 <osSemaphoreRelease+0x64>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	b1d3      	cbz	r3, 8006aee <osSemaphoreRelease+0x6a>
 8006ab8:	4b10      	ldr	r3, [pc, #64]	; (8006afc <osSemaphoreRelease+0x78>)
 8006aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006ac8:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8006aca:	b003      	add	sp, #12
 8006acc:	f85d fb04 	ldr.w	pc, [sp], #4
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f000 fdeb 	bl	80076b0 <xQueueGenericSend>
 8006ada:	2801      	cmp	r0, #1
 8006adc:	d109      	bne.n	8006af2 <osSemaphoreRelease+0x6e>
  stat = osOK;
 8006ade:	2000      	movs	r0, #0
 8006ae0:	e7f3      	b.n	8006aca <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8006ae2:	f06f 0003 	mvn.w	r0, #3
}
 8006ae6:	4770      	bx	lr
      stat = osErrorResource;
 8006ae8:	f06f 0002 	mvn.w	r0, #2
 8006aec:	e7ed      	b.n	8006aca <osSemaphoreRelease+0x46>
  stat = osOK;
 8006aee:	2000      	movs	r0, #0
 8006af0:	e7eb      	b.n	8006aca <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 8006af2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8006af6:	e7e8      	b.n	8006aca <osSemaphoreRelease+0x46>
 8006af8:	20000c00 	.word	0x20000c00
 8006afc:	e000ed04 	.word	0xe000ed04

08006b00 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b04:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d14c      	bne.n	8006ba6 <osMessageQueueNew+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d14a      	bne.n	8006baa <osMessageQueueNew+0xaa>
 8006b14:	4b29      	ldr	r3, [pc, #164]	; (8006bbc <osMessageQueueNew+0xbc>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d023      	beq.n	8006b64 <osMessageQueueNew+0x64>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d046      	beq.n	8006bae <osMessageQueueNew+0xae>
 8006b20:	2900      	cmp	r1, #0
 8006b22:	d046      	beq.n	8006bb2 <osMessageQueueNew+0xb2>
 8006b24:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	d034      	beq.n	8006b94 <osMessageQueueNew+0x94>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006b2a:	6893      	ldr	r3, [r2, #8]
 8006b2c:	b14b      	cbz	r3, 8006b42 <osMessageQueueNew+0x42>
 8006b2e:	68d2      	ldr	r2, [r2, #12]
 8006b30:	2a4f      	cmp	r2, #79	; 0x4f
 8006b32:	d906      	bls.n	8006b42 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006b34:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006b36:	b122      	cbz	r2, 8006b42 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006b38:	6966      	ldr	r6, [r4, #20]
 8006b3a:	fb01 f500 	mul.w	r5, r1, r0
 8006b3e:	42ae      	cmp	r6, r5
 8006b40:	d222      	bcs.n	8006b88 <osMessageQueueNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b42:	b1ab      	cbz	r3, 8006b70 <osMessageQueueNew+0x70>
    mem = -1;
 8006b44:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8006b48:	bbab      	cbnz	r3, 8006bb6 <osMessageQueueNew+0xb6>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f000 fd43 	bl	80075d6 <xQueueGenericCreate>
 8006b50:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006b52:	b125      	cbz	r5, 8006b5e <osMessageQueueNew+0x5e>
      if (attr != NULL) {
 8006b54:	b32c      	cbz	r4, 8006ba2 <osMessageQueueNew+0xa2>
        name = attr->name;
 8006b56:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f001 f95f 	bl	8007e1c <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8006b5e:	4628      	mov	r0, r5
 8006b60:	b002      	add	sp, #8
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b64:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0d7      	beq.n	8006b1c <osMessageQueueNew+0x1c>
  hQueue = NULL;
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	e7f6      	b.n	8006b5e <osMessageQueueNew+0x5e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b70:	68e3      	ldr	r3, [r4, #12]
 8006b72:	b98b      	cbnz	r3, 8006b98 <osMessageQueueNew+0x98>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b74:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b76:	b113      	cbz	r3, 8006b7e <osMessageQueueNew+0x7e>
    mem = -1;
 8006b78:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7c:	e7e4      	b.n	8006b48 <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b7e:	6963      	ldr	r3, [r4, #20]
 8006b80:	b16b      	cbz	r3, 8006b9e <osMessageQueueNew+0x9e>
    mem = -1;
 8006b82:	f04f 33ff 	mov.w	r3, #4294967295
 8006b86:	e7df      	b.n	8006b48 <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006b88:	2500      	movs	r5, #0
 8006b8a:	9500      	str	r5, [sp, #0]
 8006b8c:	f000 fcdb 	bl	8007546 <xQueueGenericCreateStatic>
 8006b90:	4605      	mov	r5, r0
 8006b92:	e7de      	b.n	8006b52 <osMessageQueueNew+0x52>
      mem = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	e7d7      	b.n	8006b48 <osMessageQueueNew+0x48>
    mem = -1;
 8006b98:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9c:	e7d4      	b.n	8006b48 <osMessageQueueNew+0x48>
          mem = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e7d2      	b.n	8006b48 <osMessageQueueNew+0x48>
        name = NULL;
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	e7d8      	b.n	8006b58 <osMessageQueueNew+0x58>
  hQueue = NULL;
 8006ba6:	2500      	movs	r5, #0
 8006ba8:	e7d9      	b.n	8006b5e <osMessageQueueNew+0x5e>
 8006baa:	2500      	movs	r5, #0
 8006bac:	e7d7      	b.n	8006b5e <osMessageQueueNew+0x5e>
 8006bae:	2500      	movs	r5, #0
 8006bb0:	e7d5      	b.n	8006b5e <osMessageQueueNew+0x5e>
 8006bb2:	2500      	movs	r5, #0
 8006bb4:	e7d3      	b.n	8006b5e <osMessageQueueNew+0x5e>
 8006bb6:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8006bb8:	e7d1      	b.n	8006b5e <osMessageQueueNew+0x5e>
 8006bba:	bf00      	nop
 8006bbc:	20000c00 	.word	0x20000c00

08006bc0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006bca:	b9b3      	cbnz	r3, 8006bfa <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd0:	b99b      	cbnz	r3, 8006bfa <osMessageQueuePut+0x3a>
 8006bd2:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <osMessageQueuePut+0x9c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d00b      	beq.n	8006bf2 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006bda:	b3a0      	cbz	r0, 8006c46 <osMessageQueuePut+0x86>
 8006bdc:	b3b1      	cbz	r1, 8006c4c <osMessageQueuePut+0x8c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006bde:	2300      	movs	r3, #0
 8006be0:	4622      	mov	r2, r4
 8006be2:	f000 fd65 	bl	80076b0 <xQueueGenericSend>
 8006be6:	2801      	cmp	r0, #1
 8006be8:	d033      	beq.n	8006c52 <osMessageQueuePut+0x92>
        if (timeout != 0U) {
 8006bea:	b3a4      	cbz	r4, 8006c56 <osMessageQueuePut+0x96>
          stat = osErrorTimeout;
 8006bec:	f06f 0001 	mvn.w	r0, #1
 8006bf0:	e027      	b.n	8006c42 <osMessageQueuePut+0x82>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bf2:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0ef      	beq.n	8006bda <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bfa:	b1a8      	cbz	r0, 8006c28 <osMessageQueuePut+0x68>
 8006bfc:	b1b9      	cbz	r1, 8006c2e <osMessageQueuePut+0x6e>
 8006bfe:	b9cc      	cbnz	r4, 8006c34 <osMessageQueuePut+0x74>
      yield = pdFALSE;
 8006c00:	2300      	movs	r3, #0
 8006c02:	aa02      	add	r2, sp, #8
 8006c04:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006c08:	f000 fe56 	bl	80078b8 <xQueueGenericSendFromISR>
 8006c0c:	2801      	cmp	r0, #1
 8006c0e:	d114      	bne.n	8006c3a <osMessageQueuePut+0x7a>
        portYIELD_FROM_ISR (yield);
 8006c10:	9b01      	ldr	r3, [sp, #4]
 8006c12:	b1ab      	cbz	r3, 8006c40 <osMessageQueuePut+0x80>
 8006c14:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <osMessageQueuePut+0xa0>)
 8006c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006c24:	2000      	movs	r0, #0
 8006c26:	e00c      	b.n	8006c42 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 8006c28:	f06f 0003 	mvn.w	r0, #3
 8006c2c:	e009      	b.n	8006c42 <osMessageQueuePut+0x82>
 8006c2e:	f06f 0003 	mvn.w	r0, #3
 8006c32:	e006      	b.n	8006c42 <osMessageQueuePut+0x82>
 8006c34:	f06f 0003 	mvn.w	r0, #3
 8006c38:	e003      	b.n	8006c42 <osMessageQueuePut+0x82>
        stat = osErrorResource;
 8006c3a:	f06f 0002 	mvn.w	r0, #2
 8006c3e:	e000      	b.n	8006c42 <osMessageQueuePut+0x82>
  stat = osOK;
 8006c40:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006c42:	b002      	add	sp, #8
 8006c44:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8006c46:	f06f 0003 	mvn.w	r0, #3
 8006c4a:	e7fa      	b.n	8006c42 <osMessageQueuePut+0x82>
 8006c4c:	f06f 0003 	mvn.w	r0, #3
 8006c50:	e7f7      	b.n	8006c42 <osMessageQueuePut+0x82>
  stat = osOK;
 8006c52:	2000      	movs	r0, #0
 8006c54:	e7f5      	b.n	8006c42 <osMessageQueuePut+0x82>
          stat = osErrorResource;
 8006c56:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8006c5a:	e7f2      	b.n	8006c42 <osMessageQueuePut+0x82>
 8006c5c:	20000c00 	.word	0x20000c00
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006c64:	b510      	push	{r4, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c6a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006c6e:	b9ab      	cbnz	r3, 8006c9c <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c70:	f3ef 8310 	mrs	r3, PRIMASK
 8006c74:	b993      	cbnz	r3, 8006c9c <osMessageQueueGet+0x38>
 8006c76:	4b22      	ldr	r3, [pc, #136]	; (8006d00 <osMessageQueueGet+0x9c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d00a      	beq.n	8006c94 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c7e:	b398      	cbz	r0, 8006ce8 <osMessageQueueGet+0x84>
 8006c80:	b3a9      	cbz	r1, 8006cee <osMessageQueueGet+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c82:	4622      	mov	r2, r4
 8006c84:	f000 fed8 	bl	8007a38 <xQueueReceive>
 8006c88:	2801      	cmp	r0, #1
 8006c8a:	d033      	beq.n	8006cf4 <osMessageQueueGet+0x90>
        if (timeout != 0U) {
 8006c8c:	b3a4      	cbz	r4, 8006cf8 <osMessageQueueGet+0x94>
          stat = osErrorTimeout;
 8006c8e:	f06f 0001 	mvn.w	r0, #1
 8006c92:	e027      	b.n	8006ce4 <osMessageQueueGet+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c94:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c9c:	b1a8      	cbz	r0, 8006cca <osMessageQueueGet+0x66>
 8006c9e:	b1b9      	cbz	r1, 8006cd0 <osMessageQueueGet+0x6c>
 8006ca0:	b9cc      	cbnz	r4, 8006cd6 <osMessageQueueGet+0x72>
      yield = pdFALSE;
 8006ca2:	aa02      	add	r2, sp, #8
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006caa:	f001 f861 	bl	8007d70 <xQueueReceiveFromISR>
 8006cae:	2801      	cmp	r0, #1
 8006cb0:	d114      	bne.n	8006cdc <osMessageQueueGet+0x78>
        portYIELD_FROM_ISR (yield);
 8006cb2:	9b01      	ldr	r3, [sp, #4]
 8006cb4:	b1ab      	cbz	r3, 8006ce2 <osMessageQueueGet+0x7e>
 8006cb6:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <osMessageQueueGet+0xa0>)
 8006cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e00c      	b.n	8006ce4 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 8006cca:	f06f 0003 	mvn.w	r0, #3
 8006cce:	e009      	b.n	8006ce4 <osMessageQueueGet+0x80>
 8006cd0:	f06f 0003 	mvn.w	r0, #3
 8006cd4:	e006      	b.n	8006ce4 <osMessageQueueGet+0x80>
 8006cd6:	f06f 0003 	mvn.w	r0, #3
 8006cda:	e003      	b.n	8006ce4 <osMessageQueueGet+0x80>
        stat = osErrorResource;
 8006cdc:	f06f 0002 	mvn.w	r0, #2
 8006ce0:	e000      	b.n	8006ce4 <osMessageQueueGet+0x80>
  stat = osOK;
 8006ce2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006ce4:	b002      	add	sp, #8
 8006ce6:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8006ce8:	f06f 0003 	mvn.w	r0, #3
 8006cec:	e7fa      	b.n	8006ce4 <osMessageQueueGet+0x80>
 8006cee:	f06f 0003 	mvn.w	r0, #3
 8006cf2:	e7f7      	b.n	8006ce4 <osMessageQueueGet+0x80>
  stat = osOK;
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	e7f5      	b.n	8006ce4 <osMessageQueueGet+0x80>
          stat = osErrorResource;
 8006cf8:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8006cfc:	e7f2      	b.n	8006ce4 <osMessageQueueGet+0x80>
 8006cfe:	bf00      	nop
 8006d00:	20000c00 	.word	0x20000c00
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d08:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <vApplicationGetIdleTaskMemory+0x10>)
 8006d0a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d0c:	4b03      	ldr	r3, [pc, #12]	; (8006d1c <vApplicationGetIdleTaskMemory+0x14>)
 8006d0e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d10:	2380      	movs	r3, #128	; 0x80
 8006d12:	6013      	str	r3, [r2, #0]
}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	20000ba4 	.word	0x20000ba4
 8006d1c:	200009a4 	.word	0x200009a4

08006d20 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <vApplicationGetTimerTaskMemory+0x10>)
 8006d22:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d24:	4b03      	ldr	r3, [pc, #12]	; (8006d34 <vApplicationGetTimerTaskMemory+0x14>)
 8006d26:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d2c:	6013      	str	r3, [r2, #0]
}
 8006d2e:	4770      	bx	lr
 8006d30:	20001004 	.word	0x20001004
 8006d34:	20000c04 	.word	0x20000c04

08006d38 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d3a:	f012 0f07 	tst.w	r2, #7
 8006d3e:	d01f      	beq.n	8006d80 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d40:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d42:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d46:	f5c1 531c 	rsb	r3, r1, #9984	; 0x2700
 8006d4a:	3310      	adds	r3, #16
 8006d4c:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d4e:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d50:	480e      	ldr	r0, [pc, #56]	; (8006d8c <prvHeapInit+0x54>)
 8006d52:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d54:	2100      	movs	r1, #0
 8006d56:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d58:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006d5a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d5c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8006d60:	480b      	ldr	r0, [pc, #44]	; (8006d90 <prvHeapInit+0x58>)
 8006d62:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006d64:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d66:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d68:	1a99      	subs	r1, r3, r2
 8006d6a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d6c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d6e:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <prvHeapInit+0x5c>)
 8006d70:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d72:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <prvHeapInit+0x60>)
 8006d74:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d76:	4b09      	ldr	r3, [pc, #36]	; (8006d9c <prvHeapInit+0x64>)
 8006d78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d7c:	601a      	str	r2, [r3, #0]
}
 8006d7e:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d80:	f242 7310 	movw	r3, #10000	; 0x2710
 8006d84:	e7e4      	b.n	8006d50 <prvHeapInit+0x18>
 8006d86:	bf00      	nop
 8006d88:	20001064 	.word	0x20001064
 8006d8c:	20003780 	.word	0x20003780
 8006d90:	20001060 	.word	0x20001060
 8006d94:	2000377c 	.word	0x2000377c
 8006d98:	20003778 	.word	0x20003778
 8006d9c:	20003774 	.word	0x20003774

08006da0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006da0:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <prvInsertBlockIntoFreeList+0x50>)
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	4282      	cmp	r2, r0
 8006da8:	d31b      	bcc.n	8006de2 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006daa:	6859      	ldr	r1, [r3, #4]
 8006dac:	185c      	adds	r4, r3, r1
 8006dae:	4284      	cmp	r4, r0
 8006db0:	d103      	bne.n	8006dba <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006db2:	6840      	ldr	r0, [r0, #4]
 8006db4:	4401      	add	r1, r0
 8006db6:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006db8:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dba:	6841      	ldr	r1, [r0, #4]
 8006dbc:	1844      	adds	r4, r0, r1
 8006dbe:	42a2      	cmp	r2, r4
 8006dc0:	d113      	bne.n	8006dea <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dc2:	4c0c      	ldr	r4, [pc, #48]	; (8006df4 <prvInsertBlockIntoFreeList+0x54>)
 8006dc4:	6824      	ldr	r4, [r4, #0]
 8006dc6:	42a2      	cmp	r2, r4
 8006dc8:	d00d      	beq.n	8006de6 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dca:	6852      	ldr	r2, [r2, #4]
 8006dcc:	4411      	add	r1, r2
 8006dce:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	6812      	ldr	r2, [r2, #0]
 8006dd4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006dd6:	4298      	cmp	r0, r3
 8006dd8:	d000      	beq.n	8006ddc <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006dda:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006de0:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006de2:	4613      	mov	r3, r2
 8006de4:	e7de      	b.n	8006da4 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006de6:	6004      	str	r4, [r0, #0]
 8006de8:	e7f5      	b.n	8006dd6 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dea:	6002      	str	r2, [r0, #0]
 8006dec:	e7f3      	b.n	8006dd6 <prvInsertBlockIntoFreeList+0x36>
 8006dee:	bf00      	nop
 8006df0:	20003780 	.word	0x20003780
 8006df4:	20001060 	.word	0x20001060

08006df8 <pvPortMalloc>:
{
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006dfc:	f001 fabc 	bl	8008378 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006e00:	4b3a      	ldr	r3, [pc, #232]	; (8006eec <pvPortMalloc+0xf4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	b1bb      	cbz	r3, 8006e36 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e06:	4b3a      	ldr	r3, [pc, #232]	; (8006ef0 <pvPortMalloc+0xf8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	421c      	tst	r4, r3
 8006e0c:	d163      	bne.n	8006ed6 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8006e0e:	b1ac      	cbz	r4, 8006e3c <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8006e10:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e12:	f014 0f07 	tst.w	r4, #7
 8006e16:	d011      	beq.n	8006e3c <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e18:	f024 0407 	bic.w	r4, r4, #7
 8006e1c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e1e:	f004 0307 	and.w	r3, r4, #7
 8006e22:	b15b      	cbz	r3, 8006e3c <pvPortMalloc+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	e7fe      	b.n	8006e34 <pvPortMalloc+0x3c>
			prvHeapInit();
 8006e36:	f7ff ff7f 	bl	8006d38 <prvHeapInit>
 8006e3a:	e7e4      	b.n	8006e06 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e3c:	2c00      	cmp	r4, #0
 8006e3e:	d04c      	beq.n	8006eda <pvPortMalloc+0xe2>
 8006e40:	4b2c      	ldr	r3, [pc, #176]	; (8006ef4 <pvPortMalloc+0xfc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	42a3      	cmp	r3, r4
 8006e46:	d34a      	bcc.n	8006ede <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8006e48:	4b2b      	ldr	r3, [pc, #172]	; (8006ef8 <pvPortMalloc+0x100>)
 8006e4a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e4c:	e001      	b.n	8006e52 <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8006e4e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e50:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e52:	686a      	ldr	r2, [r5, #4]
 8006e54:	42a2      	cmp	r2, r4
 8006e56:	d202      	bcs.n	8006e5e <pvPortMalloc+0x66>
 8006e58:	682a      	ldr	r2, [r5, #0]
 8006e5a:	2a00      	cmp	r2, #0
 8006e5c:	d1f7      	bne.n	8006e4e <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8006e5e:	4a23      	ldr	r2, [pc, #140]	; (8006eec <pvPortMalloc+0xf4>)
 8006e60:	6812      	ldr	r2, [r2, #0]
 8006e62:	42aa      	cmp	r2, r5
 8006e64:	d03d      	beq.n	8006ee2 <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e66:	681e      	ldr	r6, [r3, #0]
 8006e68:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e6a:	682a      	ldr	r2, [r5, #0]
 8006e6c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e6e:	686b      	ldr	r3, [r5, #4]
 8006e70:	1b1b      	subs	r3, r3, r4
 8006e72:	2b10      	cmp	r3, #16
 8006e74:	d910      	bls.n	8006e98 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e76:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e78:	f010 0f07 	tst.w	r0, #7
 8006e7c:	d008      	beq.n	8006e90 <pvPortMalloc+0x98>
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	e7fe      	b.n	8006e8e <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e90:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e92:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e94:	f7ff ff84 	bl	8006da0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e98:	686a      	ldr	r2, [r5, #4]
 8006e9a:	4916      	ldr	r1, [pc, #88]	; (8006ef4 <pvPortMalloc+0xfc>)
 8006e9c:	680b      	ldr	r3, [r1, #0]
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ea2:	4916      	ldr	r1, [pc, #88]	; (8006efc <pvPortMalloc+0x104>)
 8006ea4:	6809      	ldr	r1, [r1, #0]
 8006ea6:	428b      	cmp	r3, r1
 8006ea8:	d201      	bcs.n	8006eae <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006eaa:	4914      	ldr	r1, [pc, #80]	; (8006efc <pvPortMalloc+0x104>)
 8006eac:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006eae:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <pvPortMalloc+0xf8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8006eba:	f001 fb11 	bl	80084e0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ebe:	f016 0f07 	tst.w	r6, #7
 8006ec2:	d010      	beq.n	8006ee6 <pvPortMalloc+0xee>
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	e7fe      	b.n	8006ed4 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8006ed6:	2600      	movs	r6, #0
 8006ed8:	e7ef      	b.n	8006eba <pvPortMalloc+0xc2>
 8006eda:	2600      	movs	r6, #0
 8006edc:	e7ed      	b.n	8006eba <pvPortMalloc+0xc2>
 8006ede:	2600      	movs	r6, #0
 8006ee0:	e7eb      	b.n	8006eba <pvPortMalloc+0xc2>
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	e7e9      	b.n	8006eba <pvPortMalloc+0xc2>
}
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
 8006eea:	bf00      	nop
 8006eec:	20001060 	.word	0x20001060
 8006ef0:	20003774 	.word	0x20003774
 8006ef4:	20003778 	.word	0x20003778
 8006ef8:	20003780 	.word	0x20003780
 8006efc:	2000377c 	.word	0x2000377c

08006f00 <vPortFree>:
	if( pv != NULL )
 8006f00:	b380      	cbz	r0, 8006f64 <vPortFree+0x64>
{
 8006f02:	b538      	push	{r3, r4, r5, lr}
 8006f04:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006f06:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f0a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006f0e:	4916      	ldr	r1, [pc, #88]	; (8006f68 <vPortFree+0x68>)
 8006f10:	6809      	ldr	r1, [r1, #0]
 8006f12:	420a      	tst	r2, r1
 8006f14:	d108      	bne.n	8006f28 <vPortFree+0x28>
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	e7fe      	b.n	8006f26 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f28:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8006f2c:	b140      	cbz	r0, 8006f40 <vPortFree+0x40>
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	e7fe      	b.n	8006f3e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f40:	ea22 0201 	bic.w	r2, r2, r1
 8006f44:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8006f48:	f001 fa16 	bl	8008378 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f4c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006f50:	4a06      	ldr	r2, [pc, #24]	; (8006f6c <vPortFree+0x6c>)
 8006f52:	6813      	ldr	r3, [r2, #0]
 8006f54:	440b      	add	r3, r1
 8006f56:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f58:	4628      	mov	r0, r5
 8006f5a:	f7ff ff21 	bl	8006da0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8006f5e:	f001 fabf 	bl	80084e0 <xTaskResumeAll>
}
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20003774 	.word	0x20003774
 8006f6c:	20003778 	.word	0x20003778

08006f70 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f70:	f100 0308 	add.w	r3, r0, #8
 8006f74:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f76:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f7c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f7e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f84:	4770      	bx	lr

08006f86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f8a:	4770      	bx	lr

08006f8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f8c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f8e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f98:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f9a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006f9c:	6803      	ldr	r3, [r0, #0]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	6003      	str	r3, [r0, #0]
}
 8006fa2:	4770      	bx	lr

08006fa4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fa4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fa6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fa8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006fac:	d002      	beq.n	8006fb4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fae:	f100 0208 	add.w	r2, r0, #8
 8006fb2:	e002      	b.n	8006fba <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fb4:	6902      	ldr	r2, [r0, #16]
 8006fb6:	e004      	b.n	8006fc2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6853      	ldr	r3, [r2, #4]
 8006fbc:	681c      	ldr	r4, [r3, #0]
 8006fbe:	42ac      	cmp	r4, r5
 8006fc0:	d9fa      	bls.n	8006fb8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fc2:	6853      	ldr	r3, [r2, #4]
 8006fc4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fc6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fc8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fca:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006fcc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006fce:	6803      	ldr	r3, [r0, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	6003      	str	r3, [r0, #0]
}
 8006fd4:	bc30      	pop	{r4, r5}
 8006fd6:	4770      	bx	lr

08006fd8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006fd8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fda:	6842      	ldr	r2, [r0, #4]
 8006fdc:	6881      	ldr	r1, [r0, #8]
 8006fde:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fe0:	6882      	ldr	r2, [r0, #8]
 8006fe2:	6841      	ldr	r1, [r0, #4]
 8006fe4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	4282      	cmp	r2, r0
 8006fea:	d006      	beq.n	8006ffa <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006fec:	2200      	movs	r2, #0
 8006fee:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	3a01      	subs	r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ff6:	6818      	ldr	r0, [r3, #0]
}
 8006ff8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ffa:	6882      	ldr	r2, [r0, #8]
 8006ffc:	605a      	str	r2, [r3, #4]
 8006ffe:	e7f5      	b.n	8006fec <uxListRemove+0x14>

08007000 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007000:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007006:	4b0d      	ldr	r3, [pc, #52]	; (800703c <prvTaskExitError+0x3c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d008      	beq.n	8007022 <prvTaskExitError+0x22>
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	e7fe      	b.n	8007020 <prvTaskExitError+0x20>
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007032:	9b01      	ldr	r3, [sp, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0fc      	beq.n	8007032 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007038:	b002      	add	sp, #8
 800703a:	4770      	bx	lr
 800703c:	2000001c 	.word	0x2000001c

08007040 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007040:	4808      	ldr	r0, [pc, #32]	; (8007064 <prvPortStartFirstTask+0x24>)
 8007042:	6800      	ldr	r0, [r0, #0]
 8007044:	6800      	ldr	r0, [r0, #0]
 8007046:	f380 8808 	msr	MSP, r0
 800704a:	f04f 0000 	mov.w	r0, #0
 800704e:	f380 8814 	msr	CONTROL, r0
 8007052:	b662      	cpsie	i
 8007054:	b661      	cpsie	f
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	df00      	svc	0
 8007060:	bf00      	nop
 8007062:	0000      	.short	0x0000
 8007064:	e000ed08 	.word	0xe000ed08

08007068 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007068:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007078 <vPortEnableVFP+0x10>
 800706c:	6801      	ldr	r1, [r0, #0]
 800706e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007072:	6001      	str	r1, [r0, #0]
 8007074:	4770      	bx	lr
 8007076:	0000      	.short	0x0000
 8007078:	e000ed88 	.word	0xe000ed88

0800707c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800707c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007080:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007084:	f021 0101 	bic.w	r1, r1, #1
 8007088:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <pxPortInitialiseStack+0x28>)
 800708e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007092:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007096:	f06f 0302 	mvn.w	r3, #2
 800709a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800709e:	3844      	subs	r0, #68	; 0x44
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	08007001 	.word	0x08007001
	...

080070b0 <SVC_Handler>:
	__asm volatile (
 80070b0:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <pxCurrentTCBConst2>)
 80070b2:	6819      	ldr	r1, [r3, #0]
 80070b4:	6808      	ldr	r0, [r1, #0]
 80070b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ba:	f380 8809 	msr	PSP, r0
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f04f 0000 	mov.w	r0, #0
 80070c6:	f380 8811 	msr	BASEPRI, r0
 80070ca:	4770      	bx	lr
 80070cc:	f3af 8000 	nop.w

080070d0 <pxCurrentTCBConst2>:
 80070d0:	20003790 	.word	0x20003790

080070d4 <vPortEnterCritical>:
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80070e4:	4a0a      	ldr	r2, [pc, #40]	; (8007110 <vPortEnterCritical+0x3c>)
 80070e6:	6813      	ldr	r3, [r2, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d000      	beq.n	80070f2 <vPortEnterCritical+0x1e>
}
 80070f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070f2:	4b08      	ldr	r3, [pc, #32]	; (8007114 <vPortEnterCritical+0x40>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80070fa:	d0f9      	beq.n	80070f0 <vPortEnterCritical+0x1c>
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	e7fe      	b.n	800710c <vPortEnterCritical+0x38>
 800710e:	bf00      	nop
 8007110:	2000001c 	.word	0x2000001c
 8007114:	e000ed04 	.word	0xe000ed04

08007118 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007118:	4b09      	ldr	r3, [pc, #36]	; (8007140 <vPortExitCritical+0x28>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	b943      	cbnz	r3, 8007130 <vPortExitCritical+0x18>
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	e7fe      	b.n	800712e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007130:	3b01      	subs	r3, #1
 8007132:	4a03      	ldr	r2, [pc, #12]	; (8007140 <vPortExitCritical+0x28>)
 8007134:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007136:	b90b      	cbnz	r3, 800713c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007138:	f383 8811 	msr	BASEPRI, r3
}
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	2000001c 	.word	0x2000001c
	...

08007150 <PendSV_Handler>:
	__asm volatile
 8007150:	f3ef 8009 	mrs	r0, PSP
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <pxCurrentTCBConst>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f01e 0f10 	tst.w	lr, #16
 8007160:	bf08      	it	eq
 8007162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	6010      	str	r0, [r2, #0]
 800716c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007174:	f380 8811 	msr	BASEPRI, r0
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f001 fa86 	bl	8008690 <vTaskSwitchContext>
 8007184:	f04f 0000 	mov.w	r0, #0
 8007188:	f380 8811 	msr	BASEPRI, r0
 800718c:	bc09      	pop	{r0, r3}
 800718e:	6819      	ldr	r1, [r3, #0]
 8007190:	6808      	ldr	r0, [r1, #0]
 8007192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007196:	f01e 0f10 	tst.w	lr, #16
 800719a:	bf08      	it	eq
 800719c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071a0:	f380 8809 	msr	PSP, r0
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w

080071b0 <pxCurrentTCBConst>:
 80071b0:	20003790 	.word	0x20003790

080071b4 <SysTick_Handler>:
{
 80071b4:	b508      	push	{r3, lr}
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80071c6:	f001 f8ff 	bl	80083c8 <xTaskIncrementTick>
 80071ca:	b118      	cbz	r0, 80071d4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071cc:	4b03      	ldr	r3, [pc, #12]	; (80071dc <SysTick_Handler+0x28>)
 80071ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80071d4:	2300      	movs	r3, #0
 80071d6:	f383 8811 	msr	BASEPRI, r3
}
 80071da:	bd08      	pop	{r3, pc}
 80071dc:	e000ed04 	.word	0xe000ed04

080071e0 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071e0:	4b3a      	ldr	r3, [pc, #232]	; (80072cc <xPortStartScheduler+0xec>)
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	4b3a      	ldr	r3, [pc, #232]	; (80072d0 <xPortStartScheduler+0xf0>)
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d00d      	beq.n	8007206 <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071ea:	4b38      	ldr	r3, [pc, #224]	; (80072cc <xPortStartScheduler+0xec>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b39      	ldr	r3, [pc, #228]	; (80072d4 <xPortStartScheduler+0xf4>)
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d111      	bne.n	8007218 <xPortStartScheduler+0x38>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	e7fe      	b.n	8007204 <xPortStartScheduler+0x24>
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	e7fe      	b.n	8007216 <xPortStartScheduler+0x36>
{
 8007218:	b510      	push	{r4, lr}
 800721a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800721c:	4b2e      	ldr	r3, [pc, #184]	; (80072d8 <xPortStartScheduler+0xf8>)
 800721e:	781a      	ldrb	r2, [r3, #0]
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007224:	22ff      	movs	r2, #255	; 0xff
 8007226:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007230:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007238:	4a28      	ldr	r2, [pc, #160]	; (80072dc <xPortStartScheduler+0xfc>)
 800723a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800723c:	4b28      	ldr	r3, [pc, #160]	; (80072e0 <xPortStartScheduler+0x100>)
 800723e:	2207      	movs	r2, #7
 8007240:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007242:	e009      	b.n	8007258 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 8007244:	4a26      	ldr	r2, [pc, #152]	; (80072e0 <xPortStartScheduler+0x100>)
 8007246:	6813      	ldr	r3, [r2, #0]
 8007248:	3b01      	subs	r3, #1
 800724a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800724c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007258:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800725c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007260:	d1f0      	bne.n	8007244 <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007262:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <xPortStartScheduler+0x100>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b03      	cmp	r3, #3
 8007268:	d008      	beq.n	800727c <xPortStartScheduler+0x9c>
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	e7fe      	b.n	800727a <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800727c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800727e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007282:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <xPortStartScheduler+0x100>)
 8007284:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007286:	9b01      	ldr	r3, [sp, #4]
 8007288:	b2db      	uxtb	r3, r3
 800728a:	4a13      	ldr	r2, [pc, #76]	; (80072d8 <xPortStartScheduler+0xf8>)
 800728c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800728e:	4b15      	ldr	r3, [pc, #84]	; (80072e4 <xPortStartScheduler+0x104>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007296:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800729e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80072a0:	f7f9 fc3e 	bl	8000b20 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80072a4:	2400      	movs	r4, #0
 80072a6:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <xPortStartScheduler+0x108>)
 80072a8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80072aa:	f7ff fedd 	bl	8007068 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072ae:	4a0f      	ldr	r2, [pc, #60]	; (80072ec <xPortStartScheduler+0x10c>)
 80072b0:	6813      	ldr	r3, [r2, #0]
 80072b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072b6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80072b8:	f7ff fec2 	bl	8007040 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80072bc:	f001 f9e8 	bl	8008690 <vTaskSwitchContext>
	prvTaskExitError();
 80072c0:	f7ff fe9e 	bl	8007000 <prvTaskExitError>
}
 80072c4:	4620      	mov	r0, r4
 80072c6:	b002      	add	sp, #8
 80072c8:	bd10      	pop	{r4, pc}
 80072ca:	bf00      	nop
 80072cc:	e000ed00 	.word	0xe000ed00
 80072d0:	410fc271 	.word	0x410fc271
 80072d4:	410fc270 	.word	0x410fc270
 80072d8:	e000e400 	.word	0xe000e400
 80072dc:	20003788 	.word	0x20003788
 80072e0:	2000378c 	.word	0x2000378c
 80072e4:	e000ed20 	.word	0xe000ed20
 80072e8:	2000001c 	.word	0x2000001c
 80072ec:	e000ef34 	.word	0xe000ef34

080072f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072f4:	2b0f      	cmp	r3, #15
 80072f6:	d90f      	bls.n	8007318 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072f8:	4a10      	ldr	r2, [pc, #64]	; (800733c <vPortValidateInterruptPriority+0x4c>)
 80072fa:	5c9b      	ldrb	r3, [r3, r2]
 80072fc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072fe:	4a10      	ldr	r2, [pc, #64]	; (8007340 <vPortValidateInterruptPriority+0x50>)
 8007300:	7812      	ldrb	r2, [r2, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d908      	bls.n	8007318 <vPortValidateInterruptPriority+0x28>
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	e7fe      	b.n	8007316 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007318:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <vPortValidateInterruptPriority+0x54>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007320:	4a09      	ldr	r2, [pc, #36]	; (8007348 <vPortValidateInterruptPriority+0x58>)
 8007322:	6812      	ldr	r2, [r2, #0]
 8007324:	4293      	cmp	r3, r2
 8007326:	d908      	bls.n	800733a <vPortValidateInterruptPriority+0x4a>
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	e7fe      	b.n	8007338 <vPortValidateInterruptPriority+0x48>
	}
 800733a:	4770      	bx	lr
 800733c:	e000e3f0 	.word	0xe000e3f0
 8007340:	20003788 	.word	0x20003788
 8007344:	e000ed0c 	.word	0xe000ed0c
 8007348:	2000378c 	.word	0x2000378c

0800734c <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800734c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800734e:	b123      	cbz	r3, 800735a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007350:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
 8007358:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800735a:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800735c:	4770      	bx	lr

0800735e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800735e:	b510      	push	{r4, lr}
 8007360:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007362:	f7ff feb7 	bl	80070d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007366:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007368:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800736a:	429a      	cmp	r2, r3
 800736c:	d004      	beq.n	8007378 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800736e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8007370:	f7ff fed2 	bl	8007118 <vPortExitCritical>

	return xReturn;
}
 8007374:	4620      	mov	r0, r4
 8007376:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007378:	2401      	movs	r4, #1
 800737a:	e7f9      	b.n	8007370 <prvIsQueueFull+0x12>

0800737c <prvIsQueueEmpty>:
{
 800737c:	b510      	push	{r4, lr}
 800737e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007380:	f7ff fea8 	bl	80070d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007384:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007386:	b123      	cbz	r3, 8007392 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8007388:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800738a:	f7ff fec5 	bl	8007118 <vPortExitCritical>
}
 800738e:	4620      	mov	r0, r4
 8007390:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007392:	2401      	movs	r4, #1
 8007394:	e7f9      	b.n	800738a <prvIsQueueEmpty+0xe>

08007396 <prvCopyDataToQueue>:
{
 8007396:	b570      	push	{r4, r5, r6, lr}
 8007398:	4604      	mov	r4, r0
 800739a:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800739c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800739e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80073a0:	b95a      	cbnz	r2, 80073ba <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073a2:	6803      	ldr	r3, [r0, #0]
 80073a4:	b11b      	cbz	r3, 80073ae <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80073a6:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073a8:	3501      	adds	r5, #1
 80073aa:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80073ac:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80073ae:	6840      	ldr	r0, [r0, #4]
 80073b0:	f001 fb08 	bl	80089c4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	6063      	str	r3, [r4, #4]
 80073b8:	e7f6      	b.n	80073a8 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80073ba:	b96e      	cbnz	r6, 80073d8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80073bc:	6880      	ldr	r0, [r0, #8]
 80073be:	f003 fcf7 	bl	800adb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80073c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80073c4:	68a3      	ldr	r3, [r4, #8]
 80073c6:	4413      	add	r3, r2
 80073c8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073ca:	6862      	ldr	r2, [r4, #4]
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d319      	bcc.n	8007404 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80073d4:	2000      	movs	r0, #0
 80073d6:	e7e7      	b.n	80073a8 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d8:	68c0      	ldr	r0, [r0, #12]
 80073da:	f003 fce9 	bl	800adb0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80073de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80073e0:	4252      	negs	r2, r2
 80073e2:	68e3      	ldr	r3, [r4, #12]
 80073e4:	4413      	add	r3, r2
 80073e6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073e8:	6821      	ldr	r1, [r4, #0]
 80073ea:	428b      	cmp	r3, r1
 80073ec:	d202      	bcs.n	80073f4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80073ee:	6863      	ldr	r3, [r4, #4]
 80073f0:	441a      	add	r2, r3
 80073f2:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80073f4:	2e02      	cmp	r6, #2
 80073f6:	d001      	beq.n	80073fc <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80073f8:	2000      	movs	r0, #0
 80073fa:	e7d5      	b.n	80073a8 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073fc:	b125      	cbz	r5, 8007408 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80073fe:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8007400:	2000      	movs	r0, #0
 8007402:	e7d1      	b.n	80073a8 <prvCopyDataToQueue+0x12>
 8007404:	2000      	movs	r0, #0
 8007406:	e7cf      	b.n	80073a8 <prvCopyDataToQueue+0x12>
 8007408:	2000      	movs	r0, #0
 800740a:	e7cd      	b.n	80073a8 <prvCopyDataToQueue+0x12>

0800740c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800740c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800740e:	b172      	cbz	r2, 800742e <prvCopyDataFromQueue+0x22>
{
 8007410:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007412:	68c3      	ldr	r3, [r0, #12]
 8007414:	4413      	add	r3, r2
 8007416:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007418:	6844      	ldr	r4, [r0, #4]
 800741a:	42a3      	cmp	r3, r4
 800741c:	d301      	bcc.n	8007422 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800741e:	6803      	ldr	r3, [r0, #0]
 8007420:	60c3      	str	r3, [r0, #12]
 8007422:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007424:	68c1      	ldr	r1, [r0, #12]
 8007426:	4620      	mov	r0, r4
 8007428:	f003 fcc2 	bl	800adb0 <memcpy>
}
 800742c:	bd10      	pop	{r4, pc}
 800742e:	4770      	bx	lr

08007430 <prvUnlockQueue>:
{
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007434:	f7ff fe4e 	bl	80070d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007438:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800743c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800743e:	e003      	b.n	8007448 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8007440:	f001 fa3a 	bl	80088b8 <vTaskMissedYield>
			--cTxLock;
 8007444:	3c01      	subs	r4, #1
 8007446:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007448:	2c00      	cmp	r4, #0
 800744a:	dd08      	ble.n	800745e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800744c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800744e:	b133      	cbz	r3, 800745e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007450:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007454:	f001 f99c 	bl	8008790 <xTaskRemoveFromEventList>
 8007458:	2800      	cmp	r0, #0
 800745a:	d0f3      	beq.n	8007444 <prvUnlockQueue+0x14>
 800745c:	e7f0      	b.n	8007440 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800745e:	23ff      	movs	r3, #255	; 0xff
 8007460:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007464:	f7ff fe58 	bl	8007118 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007468:	f7ff fe34 	bl	80070d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800746c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8007470:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007472:	e003      	b.n	800747c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8007474:	f001 fa20 	bl	80088b8 <vTaskMissedYield>
				--cRxLock;
 8007478:	3c01      	subs	r4, #1
 800747a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800747c:	2c00      	cmp	r4, #0
 800747e:	dd08      	ble.n	8007492 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007480:	692b      	ldr	r3, [r5, #16]
 8007482:	b133      	cbz	r3, 8007492 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007484:	f105 0010 	add.w	r0, r5, #16
 8007488:	f001 f982 	bl	8008790 <xTaskRemoveFromEventList>
 800748c:	2800      	cmp	r0, #0
 800748e:	d0f3      	beq.n	8007478 <prvUnlockQueue+0x48>
 8007490:	e7f0      	b.n	8007474 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8007492:	23ff      	movs	r3, #255	; 0xff
 8007494:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007498:	f7ff fe3e 	bl	8007118 <vPortExitCritical>
}
 800749c:	bd38      	pop	{r3, r4, r5, pc}
	...

080074a0 <xQueueGenericReset>:
{
 80074a0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80074a2:	b940      	cbnz	r0, 80074b6 <xQueueGenericReset+0x16>
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	e7fe      	b.n	80074b4 <xQueueGenericReset+0x14>
 80074b6:	4604      	mov	r4, r0
 80074b8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80074ba:	f7ff fe0b 	bl	80070d4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80074be:	6821      	ldr	r1, [r4, #0]
 80074c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80074c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074c4:	fb03 1002 	mla	r0, r3, r2, r1
 80074c8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80074ca:	2000      	movs	r0, #0
 80074cc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074ce:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80074d0:	3a01      	subs	r2, #1
 80074d2:	fb02 1303 	mla	r3, r2, r3, r1
 80074d6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80074d8:	23ff      	movs	r3, #255	; 0xff
 80074da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80074de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80074e2:	b9a5      	cbnz	r5, 800750e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	b91b      	cbnz	r3, 80074f0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80074e8:	f7ff fe16 	bl	8007118 <vPortExitCritical>
}
 80074ec:	2001      	movs	r0, #1
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f0:	f104 0010 	add.w	r0, r4, #16
 80074f4:	f001 f94c 	bl	8008790 <xTaskRemoveFromEventList>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d0f5      	beq.n	80074e8 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 80074fc:	4b08      	ldr	r3, [pc, #32]	; (8007520 <xQueueGenericReset+0x80>)
 80074fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	e7ec      	b.n	80074e8 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800750e:	f104 0010 	add.w	r0, r4, #16
 8007512:	f7ff fd2d 	bl	8006f70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007516:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800751a:	f7ff fd29 	bl	8006f70 <vListInitialise>
 800751e:	e7e3      	b.n	80074e8 <xQueueGenericReset+0x48>
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <prvInitialiseNewQueue>:
{
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	461d      	mov	r5, r3
 8007528:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800752a:	460b      	mov	r3, r1
 800752c:	b149      	cbz	r1, 8007542 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800752e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8007530:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007532:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007534:	2101      	movs	r1, #1
 8007536:	4620      	mov	r0, r4
 8007538:	f7ff ffb2 	bl	80074a0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800753c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8007540:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007542:	6024      	str	r4, [r4, #0]
 8007544:	e7f4      	b.n	8007530 <prvInitialiseNewQueue+0xc>

08007546 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007546:	b940      	cbnz	r0, 800755a <xQueueGenericCreateStatic+0x14>
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	e7fe      	b.n	8007558 <xQueueGenericCreateStatic+0x12>
	{
 800755a:	b510      	push	{r4, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8007560:	b153      	cbz	r3, 8007578 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007562:	b192      	cbz	r2, 800758a <xQueueGenericCreateStatic+0x44>
 8007564:	b989      	cbnz	r1, 800758a <xQueueGenericCreateStatic+0x44>
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	e7fe      	b.n	8007576 <xQueueGenericCreateStatic+0x30>
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	e7fe      	b.n	8007588 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800758a:	b94a      	cbnz	r2, 80075a0 <xQueueGenericCreateStatic+0x5a>
 800758c:	b141      	cbz	r1, 80075a0 <xQueueGenericCreateStatic+0x5a>
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	e7fe      	b.n	800759e <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075a0:	2050      	movs	r0, #80	; 0x50
 80075a2:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075a4:	9803      	ldr	r0, [sp, #12]
 80075a6:	2850      	cmp	r0, #80	; 0x50
 80075a8:	d008      	beq.n	80075bc <xQueueGenericCreateStatic+0x76>
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	e7fe      	b.n	80075ba <xQueueGenericCreateStatic+0x74>
 80075bc:	4620      	mov	r0, r4
 80075be:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075c6:	9400      	str	r4, [sp, #0]
 80075c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80075cc:	f7ff ffaa 	bl	8007524 <prvInitialiseNewQueue>
	}
 80075d0:	4620      	mov	r0, r4
 80075d2:	b004      	add	sp, #16
 80075d4:	bd10      	pop	{r4, pc}

080075d6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075d6:	b940      	cbnz	r0, 80075ea <xQueueGenericCreate+0x14>
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	e7fe      	b.n	80075e8 <xQueueGenericCreate+0x12>
	{
 80075ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ec:	b083      	sub	sp, #12
 80075ee:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 80075f0:	b111      	cbz	r1, 80075f8 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f2:	fb01 f000 	mul.w	r0, r1, r0
 80075f6:	e000      	b.n	80075fa <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 80075f8:	2000      	movs	r0, #0
 80075fa:	4617      	mov	r7, r2
 80075fc:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80075fe:	3050      	adds	r0, #80	; 0x50
 8007600:	f7ff fbfa 	bl	8006df8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007604:	4605      	mov	r5, r0
 8007606:	b150      	cbz	r0, 800761e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007608:	2300      	movs	r3, #0
 800760a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800760e:	9000      	str	r0, [sp, #0]
 8007610:	463b      	mov	r3, r7
 8007612:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8007616:	4621      	mov	r1, r4
 8007618:	4630      	mov	r0, r6
 800761a:	f7ff ff83 	bl	8007524 <prvInitialiseNewQueue>
	}
 800761e:	4628      	mov	r0, r5
 8007620:	b003      	add	sp, #12
 8007622:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007624 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8007624:	b940      	cbnz	r0, 8007638 <xQueueCreateCountingSemaphoreStatic+0x14>
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	e7fe      	b.n	8007636 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007638:	4288      	cmp	r0, r1
 800763a:	d208      	bcs.n	800764e <xQueueCreateCountingSemaphoreStatic+0x2a>
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	e7fe      	b.n	800764c <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 800764e:	b510      	push	{r4, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	4613      	mov	r3, r2
 8007654:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007656:	2202      	movs	r2, #2
 8007658:	9200      	str	r2, [sp, #0]
 800765a:	2200      	movs	r2, #0
 800765c:	4611      	mov	r1, r2
 800765e:	f7ff ff72 	bl	8007546 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007662:	4603      	mov	r3, r0
 8007664:	b100      	cbz	r0, 8007668 <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007666:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007668:	4618      	mov	r0, r3
 800766a:	b002      	add	sp, #8
 800766c:	bd10      	pop	{r4, pc}

0800766e <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800766e:	b940      	cbnz	r0, 8007682 <xQueueCreateCountingSemaphore+0x14>
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	e7fe      	b.n	8007680 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007682:	4288      	cmp	r0, r1
 8007684:	d208      	bcs.n	8007698 <xQueueCreateCountingSemaphore+0x2a>
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	e7fe      	b.n	8007696 <xQueueCreateCountingSemaphore+0x28>
	{
 8007698:	b510      	push	{r4, lr}
 800769a:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800769c:	2202      	movs	r2, #2
 800769e:	2100      	movs	r1, #0
 80076a0:	f7ff ff99 	bl	80075d6 <xQueueGenericCreate>
		if( xHandle != NULL )
 80076a4:	4603      	mov	r3, r0
 80076a6:	b100      	cbz	r0, 80076aa <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80076a8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80076aa:	4618      	mov	r0, r3
 80076ac:	bd10      	pop	{r4, pc}
	...

080076b0 <xQueueGenericSend>:
{
 80076b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076b2:	b085      	sub	sp, #20
 80076b4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80076b6:	b160      	cbz	r0, 80076d2 <xQueueGenericSend+0x22>
 80076b8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ba:	b999      	cbnz	r1, 80076e4 <xQueueGenericSend+0x34>
 80076bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80076be:	b18a      	cbz	r2, 80076e4 <xQueueGenericSend+0x34>
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	e7fe      	b.n	80076d0 <xQueueGenericSend+0x20>
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	e7fe      	b.n	80076e2 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d10b      	bne.n	8007700 <xQueueGenericSend+0x50>
 80076e8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80076ea:	2a01      	cmp	r2, #1
 80076ec:	d008      	beq.n	8007700 <xQueueGenericSend+0x50>
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	e7fe      	b.n	80076fe <xQueueGenericSend+0x4e>
 8007700:	461e      	mov	r6, r3
 8007702:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007704:	f001 f902 	bl	800890c <xTaskGetSchedulerState>
 8007708:	b950      	cbnz	r0, 8007720 <xQueueGenericSend+0x70>
 800770a:	9b01      	ldr	r3, [sp, #4]
 800770c:	b153      	cbz	r3, 8007724 <xQueueGenericSend+0x74>
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	e7fe      	b.n	800771e <xQueueGenericSend+0x6e>
 8007720:	2500      	movs	r5, #0
 8007722:	e03a      	b.n	800779a <xQueueGenericSend+0xea>
 8007724:	2500      	movs	r5, #0
 8007726:	e038      	b.n	800779a <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007728:	4632      	mov	r2, r6
 800772a:	4639      	mov	r1, r7
 800772c:	4620      	mov	r0, r4
 800772e:	f7ff fe32 	bl	8007396 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007734:	b94b      	cbnz	r3, 800774a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8007736:	b1a8      	cbz	r0, 8007764 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8007738:	4b3b      	ldr	r3, [pc, #236]	; (8007828 <xQueueGenericSend+0x178>)
 800773a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	e00c      	b.n	8007764 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800774a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800774e:	f001 f81f 	bl	8008790 <xTaskRemoveFromEventList>
 8007752:	b138      	cbz	r0, 8007764 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8007754:	4b34      	ldr	r3, [pc, #208]	; (8007828 <xQueueGenericSend+0x178>)
 8007756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007764:	f7ff fcd8 	bl	8007118 <vPortExitCritical>
				return pdPASS;
 8007768:	2001      	movs	r0, #1
}
 800776a:	b005      	add	sp, #20
 800776c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800776e:	f7ff fcd3 	bl	8007118 <vPortExitCritical>
					return errQUEUE_FULL;
 8007772:	2000      	movs	r0, #0
 8007774:	e7f9      	b.n	800776a <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007776:	a802      	add	r0, sp, #8
 8007778:	f001 f852 	bl	8008820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800777c:	2501      	movs	r5, #1
 800777e:	e019      	b.n	80077b4 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8007780:	2300      	movs	r3, #0
 8007782:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007786:	e021      	b.n	80077cc <xQueueGenericSend+0x11c>
 8007788:	2300      	movs	r3, #0
 800778a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800778e:	e023      	b.n	80077d8 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8007790:	4620      	mov	r0, r4
 8007792:	f7ff fe4d 	bl	8007430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007796:	f000 fea3 	bl	80084e0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800779a:	f7ff fc9b 	bl	80070d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800779e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80077a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d3c0      	bcc.n	8007728 <xQueueGenericSend+0x78>
 80077a6:	2e02      	cmp	r6, #2
 80077a8:	d0be      	beq.n	8007728 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 80077aa:	9b01      	ldr	r3, [sp, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d0de      	beq.n	800776e <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 80077b0:	2d00      	cmp	r5, #0
 80077b2:	d0e0      	beq.n	8007776 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 80077b4:	f7ff fcb0 	bl	8007118 <vPortExitCritical>
		vTaskSuspendAll();
 80077b8:	f000 fdde 	bl	8008378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077bc:	f7ff fc8a 	bl	80070d4 <vPortEnterCritical>
 80077c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80077c4:	b25b      	sxtb	r3, r3
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ca:	d0d9      	beq.n	8007780 <xQueueGenericSend+0xd0>
 80077cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80077d0:	b25b      	sxtb	r3, r3
 80077d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d6:	d0d7      	beq.n	8007788 <xQueueGenericSend+0xd8>
 80077d8:	f7ff fc9e 	bl	8007118 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077dc:	a901      	add	r1, sp, #4
 80077de:	a802      	add	r0, sp, #8
 80077e0:	f001 f82a 	bl	8008838 <xTaskCheckForTimeOut>
 80077e4:	b9c8      	cbnz	r0, 800781a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80077e6:	4620      	mov	r0, r4
 80077e8:	f7ff fdb9 	bl	800735e <prvIsQueueFull>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d0cf      	beq.n	8007790 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077f0:	9901      	ldr	r1, [sp, #4]
 80077f2:	f104 0010 	add.w	r0, r4, #16
 80077f6:	f000 ff97 	bl	8008728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077fa:	4620      	mov	r0, r4
 80077fc:	f7ff fe18 	bl	8007430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007800:	f000 fe6e 	bl	80084e0 <xTaskResumeAll>
 8007804:	2800      	cmp	r0, #0
 8007806:	d1c8      	bne.n	800779a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8007808:	4b07      	ldr	r3, [pc, #28]	; (8007828 <xQueueGenericSend+0x178>)
 800780a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	e7bf      	b.n	800779a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800781a:	4620      	mov	r0, r4
 800781c:	f7ff fe08 	bl	8007430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007820:	f000 fe5e 	bl	80084e0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8007824:	2000      	movs	r0, #0
 8007826:	e7a0      	b.n	800776a <xQueueGenericSend+0xba>
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800782c:	b148      	cbz	r0, 8007842 <prvInitialiseMutex+0x16>
	{
 800782e:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8007830:	2100      	movs	r1, #0
 8007832:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007834:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007836:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007838:	460b      	mov	r3, r1
 800783a:	460a      	mov	r2, r1
 800783c:	f7ff ff38 	bl	80076b0 <xQueueGenericSend>
	}
 8007840:	bd08      	pop	{r3, pc}
 8007842:	4770      	bx	lr

08007844 <xQueueCreateMutex>:
	{
 8007844:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007846:	4602      	mov	r2, r0
 8007848:	2100      	movs	r1, #0
 800784a:	2001      	movs	r0, #1
 800784c:	f7ff fec3 	bl	80075d6 <xQueueGenericCreate>
 8007850:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8007852:	f7ff ffeb 	bl	800782c <prvInitialiseMutex>
	}
 8007856:	4620      	mov	r0, r4
 8007858:	bd10      	pop	{r4, pc}

0800785a <xQueueCreateMutexStatic>:
	{
 800785a:	b510      	push	{r4, lr}
 800785c:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800785e:	9000      	str	r0, [sp, #0]
 8007860:	460b      	mov	r3, r1
 8007862:	2200      	movs	r2, #0
 8007864:	4611      	mov	r1, r2
 8007866:	2001      	movs	r0, #1
 8007868:	f7ff fe6d 	bl	8007546 <xQueueGenericCreateStatic>
 800786c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800786e:	f7ff ffdd 	bl	800782c <prvInitialiseMutex>
	}
 8007872:	4620      	mov	r0, r4
 8007874:	b002      	add	sp, #8
 8007876:	bd10      	pop	{r4, pc}

08007878 <xQueueGiveMutexRecursive>:
	{
 8007878:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800787a:	b940      	cbnz	r0, 800788e <xQueueGiveMutexRecursive+0x16>
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	e7fe      	b.n	800788c <xQueueGiveMutexRecursive+0x14>
 800788e:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8007890:	6845      	ldr	r5, [r0, #4]
 8007892:	f001 f835 	bl	8008900 <xTaskGetCurrentTaskHandle>
 8007896:	4285      	cmp	r5, r0
 8007898:	d001      	beq.n	800789e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800789a:	2000      	movs	r0, #0
	}
 800789c:	bd38      	pop	{r3, r4, r5, pc}
			( pxMutex->u.uxRecursiveCallCount )--;
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80078a4:	b933      	cbnz	r3, 80078b4 <xQueueGiveMutexRecursive+0x3c>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80078a6:	461a      	mov	r2, r3
 80078a8:	4619      	mov	r1, r3
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7ff ff00 	bl	80076b0 <xQueueGenericSend>
			xReturn = pdPASS;
 80078b0:	2001      	movs	r0, #1
 80078b2:	e7f3      	b.n	800789c <xQueueGiveMutexRecursive+0x24>
 80078b4:	2001      	movs	r0, #1
		return xReturn;
 80078b6:	e7f1      	b.n	800789c <xQueueGiveMutexRecursive+0x24>

080078b8 <xQueueGenericSendFromISR>:
{
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80078bc:	b160      	cbz	r0, 80078d8 <xQueueGenericSendFromISR+0x20>
 80078be:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078c0:	b999      	cbnz	r1, 80078ea <xQueueGenericSendFromISR+0x32>
 80078c2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80078c4:	b188      	cbz	r0, 80078ea <xQueueGenericSendFromISR+0x32>
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	e7fe      	b.n	80078d6 <xQueueGenericSendFromISR+0x1e>
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	e7fe      	b.n	80078e8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d10b      	bne.n	8007906 <xQueueGenericSendFromISR+0x4e>
 80078ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80078f0:	2801      	cmp	r0, #1
 80078f2:	d008      	beq.n	8007906 <xQueueGenericSendFromISR+0x4e>
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	e7fe      	b.n	8007904 <xQueueGenericSendFromISR+0x4c>
 8007906:	461f      	mov	r7, r3
 8007908:	4690      	mov	r8, r2
 800790a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800790c:	f7ff fcf0 	bl	80072f0 <vPortValidateInterruptPriority>
	__asm volatile
 8007910:	f3ef 8611 	mrs	r6, BASEPRI
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007924:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007926:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007928:	429a      	cmp	r2, r3
 800792a:	d303      	bcc.n	8007934 <xQueueGenericSendFromISR+0x7c>
 800792c:	2f02      	cmp	r7, #2
 800792e:	d001      	beq.n	8007934 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8007930:	2000      	movs	r0, #0
 8007932:	e00f      	b.n	8007954 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007934:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8007938:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800793a:	463a      	mov	r2, r7
 800793c:	4649      	mov	r1, r9
 800793e:	4620      	mov	r0, r4
 8007940:	f7ff fd29 	bl	8007396 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007944:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007948:	d008      	beq.n	800795c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800794a:	1c6b      	adds	r3, r5, #1
 800794c:	b25b      	sxtb	r3, r3
 800794e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8007952:	2001      	movs	r0, #1
	__asm volatile
 8007954:	f386 8811 	msr	BASEPRI, r6
}
 8007958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800795c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800795e:	b15b      	cbz	r3, 8007978 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007960:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007964:	f000 ff14 	bl	8008790 <xTaskRemoveFromEventList>
 8007968:	b140      	cbz	r0, 800797c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 800796a:	f1b8 0f00 	cmp.w	r8, #0
 800796e:	d007      	beq.n	8007980 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007970:	2001      	movs	r0, #1
 8007972:	f8c8 0000 	str.w	r0, [r8]
 8007976:	e7ed      	b.n	8007954 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8007978:	2001      	movs	r0, #1
 800797a:	e7eb      	b.n	8007954 <xQueueGenericSendFromISR+0x9c>
 800797c:	2001      	movs	r0, #1
 800797e:	e7e9      	b.n	8007954 <xQueueGenericSendFromISR+0x9c>
 8007980:	2001      	movs	r0, #1
 8007982:	e7e7      	b.n	8007954 <xQueueGenericSendFromISR+0x9c>

08007984 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8007984:	b160      	cbz	r0, 80079a0 <xQueueGiveFromISR+0x1c>
{
 8007986:	b570      	push	{r4, r5, r6, lr}
 8007988:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800798a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800798c:	b18b      	cbz	r3, 80079b2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	e7fe      	b.n	800799e <xQueueGiveFromISR+0x1a>
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	e7fe      	b.n	80079b0 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80079b2:	6803      	ldr	r3, [r0, #0]
 80079b4:	b32b      	cbz	r3, 8007a02 <xQueueGiveFromISR+0x7e>
 80079b6:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079b8:	f7ff fc9a 	bl	80072f0 <vPortValidateInterruptPriority>
	__asm volatile
 80079bc:	f3ef 8511 	mrs	r5, BASEPRI
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80079d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d926      	bls.n	8007a26 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80079d8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80079dc:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079de:	3201      	adds	r2, #1
 80079e0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80079e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e6:	d118      	bne.n	8007a1a <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ea:	b1f3      	cbz	r3, 8007a2a <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80079f0:	f000 fece 	bl	8008790 <xTaskRemoveFromEventList>
 80079f4:	b1d8      	cbz	r0, 8007a2e <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 80079f6:	b1e6      	cbz	r6, 8007a32 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079f8:	2001      	movs	r0, #1
 80079fa:	6030      	str	r0, [r6, #0]
	__asm volatile
 80079fc:	f385 8811 	msr	BASEPRI, r5
}
 8007a00:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007a02:	6843      	ldr	r3, [r0, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0d6      	beq.n	80079b6 <xQueueGiveFromISR+0x32>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	e7fe      	b.n	8007a18 <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	b25b      	sxtb	r3, r3
 8007a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8007a22:	2001      	movs	r0, #1
 8007a24:	e7ea      	b.n	80079fc <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
 8007a26:	2000      	movs	r0, #0
 8007a28:	e7e8      	b.n	80079fc <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	e7e6      	b.n	80079fc <xQueueGiveFromISR+0x78>
 8007a2e:	2001      	movs	r0, #1
 8007a30:	e7e4      	b.n	80079fc <xQueueGiveFromISR+0x78>
 8007a32:	2001      	movs	r0, #1
 8007a34:	e7e2      	b.n	80079fc <xQueueGiveFromISR+0x78>
	...

08007a38 <xQueueReceive>:
{
 8007a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007a3e:	b160      	cbz	r0, 8007a5a <xQueueReceive+0x22>
 8007a40:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a42:	b999      	cbnz	r1, 8007a6c <xQueueReceive+0x34>
 8007a44:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007a46:	b18b      	cbz	r3, 8007a6c <xQueueReceive+0x34>
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	e7fe      	b.n	8007a58 <xQueueReceive+0x20>
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	e7fe      	b.n	8007a6a <xQueueReceive+0x32>
 8007a6c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a6e:	f000 ff4d 	bl	800890c <xTaskGetSchedulerState>
 8007a72:	b950      	cbnz	r0, 8007a8a <xQueueReceive+0x52>
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	b153      	cbz	r3, 8007a8e <xQueueReceive+0x56>
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	e7fe      	b.n	8007a88 <xQueueReceive+0x50>
 8007a8a:	2600      	movs	r6, #0
 8007a8c:	e03e      	b.n	8007b0c <xQueueReceive+0xd4>
 8007a8e:	2600      	movs	r6, #0
 8007a90:	e03c      	b.n	8007b0c <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a92:	4639      	mov	r1, r7
 8007a94:	4620      	mov	r0, r4
 8007a96:	f7ff fcb9 	bl	800740c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a9a:	3d01      	subs	r5, #1
 8007a9c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	b923      	cbnz	r3, 8007aac <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 8007aa2:	f7ff fb39 	bl	8007118 <vPortExitCritical>
				return pdPASS;
 8007aa6:	2001      	movs	r0, #1
}
 8007aa8:	b005      	add	sp, #20
 8007aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aac:	f104 0010 	add.w	r0, r4, #16
 8007ab0:	f000 fe6e 	bl	8008790 <xTaskRemoveFromEventList>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d0f4      	beq.n	8007aa2 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8007ab8:	4b34      	ldr	r3, [pc, #208]	; (8007b8c <xQueueReceive+0x154>)
 8007aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	e7eb      	b.n	8007aa2 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8007aca:	f7ff fb25 	bl	8007118 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007ace:	2000      	movs	r0, #0
 8007ad0:	e7ea      	b.n	8007aa8 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ad2:	a802      	add	r0, sp, #8
 8007ad4:	f000 fea4 	bl	8008820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ad8:	2601      	movs	r6, #1
 8007ada:	e021      	b.n	8007b20 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8007adc:	2300      	movs	r3, #0
 8007ade:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007ae2:	e029      	b.n	8007b38 <xQueueReceive+0x100>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007aea:	e02b      	b.n	8007b44 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8007aec:	4620      	mov	r0, r4
 8007aee:	f7ff fc9f 	bl	8007430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007af2:	f000 fcf5 	bl	80084e0 <xTaskResumeAll>
 8007af6:	e009      	b.n	8007b0c <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8007af8:	4620      	mov	r0, r4
 8007afa:	f7ff fc99 	bl	8007430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007afe:	f000 fcef 	bl	80084e0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b02:	4620      	mov	r0, r4
 8007b04:	f7ff fc3a 	bl	800737c <prvIsQueueEmpty>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d13d      	bne.n	8007b88 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8007b0c:	f7ff fae2 	bl	80070d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b10:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	d1bd      	bne.n	8007a92 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b16:	9b01      	ldr	r3, [sp, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0d6      	beq.n	8007aca <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8007b1c:	2e00      	cmp	r6, #0
 8007b1e:	d0d8      	beq.n	8007ad2 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 8007b20:	f7ff fafa 	bl	8007118 <vPortExitCritical>
		vTaskSuspendAll();
 8007b24:	f000 fc28 	bl	8008378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b28:	f7ff fad4 	bl	80070d4 <vPortEnterCritical>
 8007b2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007b30:	b25b      	sxtb	r3, r3
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d0d1      	beq.n	8007adc <xQueueReceive+0xa4>
 8007b38:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007b3c:	b25b      	sxtb	r3, r3
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b42:	d0cf      	beq.n	8007ae4 <xQueueReceive+0xac>
 8007b44:	f7ff fae8 	bl	8007118 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b48:	a901      	add	r1, sp, #4
 8007b4a:	a802      	add	r0, sp, #8
 8007b4c:	f000 fe74 	bl	8008838 <xTaskCheckForTimeOut>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d1d1      	bne.n	8007af8 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b54:	4620      	mov	r0, r4
 8007b56:	f7ff fc11 	bl	800737c <prvIsQueueEmpty>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d0c6      	beq.n	8007aec <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b5e:	9901      	ldr	r1, [sp, #4]
 8007b60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b64:	f000 fde0 	bl	8008728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f7ff fc61 	bl	8007430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b6e:	f000 fcb7 	bl	80084e0 <xTaskResumeAll>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d1ca      	bne.n	8007b0c <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <xQueueReceive+0x154>)
 8007b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	e7c1      	b.n	8007b0c <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8007b88:	2000      	movs	r0, #0
 8007b8a:	e78d      	b.n	8007aa8 <xQueueReceive+0x70>
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <xQueueSemaphoreTake>:
{
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007b96:	b940      	cbnz	r0, 8007baa <xQueueSemaphoreTake+0x1a>
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	e7fe      	b.n	8007ba8 <xQueueSemaphoreTake+0x18>
 8007baa:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8007bac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007bae:	b143      	cbz	r3, 8007bc2 <xQueueSemaphoreTake+0x32>
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	e7fe      	b.n	8007bc0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bc2:	f000 fea3 	bl	800890c <xTaskGetSchedulerState>
 8007bc6:	b950      	cbnz	r0, 8007bde <xQueueSemaphoreTake+0x4e>
 8007bc8:	9b01      	ldr	r3, [sp, #4]
 8007bca:	b15b      	cbz	r3, 8007be4 <xQueueSemaphoreTake+0x54>
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	e7fe      	b.n	8007bdc <xQueueSemaphoreTake+0x4c>
 8007bde:	2500      	movs	r5, #0
 8007be0:	462e      	mov	r6, r5
 8007be2:	e051      	b.n	8007c88 <xQueueSemaphoreTake+0xf8>
 8007be4:	2500      	movs	r5, #0
 8007be6:	462e      	mov	r6, r5
 8007be8:	e04e      	b.n	8007c88 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007bea:	3b01      	subs	r3, #1
 8007bec:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	b913      	cbnz	r3, 8007bf8 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007bf2:	f000 ff7f 	bl	8008af4 <pvTaskIncrementMutexHeldCount>
 8007bf6:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	b163      	cbz	r3, 8007c16 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bfc:	f104 0010 	add.w	r0, r4, #16
 8007c00:	f000 fdc6 	bl	8008790 <xTaskRemoveFromEventList>
 8007c04:	b138      	cbz	r0, 8007c16 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 8007c06:	4b48      	ldr	r3, [pc, #288]	; (8007d28 <xQueueSemaphoreTake+0x198>)
 8007c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007c16:	f7ff fa7f 	bl	8007118 <vPortExitCritical>
				return pdPASS;
 8007c1a:	2501      	movs	r5, #1
}
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	b004      	add	sp, #16
 8007c20:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007c22:	b145      	cbz	r5, 8007c36 <xQueueSemaphoreTake+0xa6>
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	e7fe      	b.n	8007c34 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 8007c36:	f7ff fa6f 	bl	8007118 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007c3a:	e7ef      	b.n	8007c1c <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c3c:	a802      	add	r0, sp, #8
 8007c3e:	f000 fdef 	bl	8008820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c42:	2601      	movs	r6, #1
 8007c44:	e02a      	b.n	8007c9c <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 8007c46:	2300      	movs	r3, #0
 8007c48:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007c4c:	e032      	b.n	8007cb4 <xQueueSemaphoreTake+0x124>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c54:	e034      	b.n	8007cc0 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 8007c56:	f7ff fa3d 	bl	80070d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007c5a:	6860      	ldr	r0, [r4, #4]
 8007c5c:	f000 fe66 	bl	800892c <xTaskPriorityInherit>
 8007c60:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007c62:	f7ff fa59 	bl	8007118 <vPortExitCritical>
 8007c66:	e03b      	b.n	8007ce0 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f7ff fbe1 	bl	8007430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c6e:	f000 fc37 	bl	80084e0 <xTaskResumeAll>
 8007c72:	e009      	b.n	8007c88 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 8007c74:	4620      	mov	r0, r4
 8007c76:	f7ff fbdb 	bl	8007430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c7a:	f000 fc31 	bl	80084e0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f7ff fb7c 	bl	800737c <prvIsQueueEmpty>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d140      	bne.n	8007d0a <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 8007c88:	f7ff fa24 	bl	80070d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1ab      	bne.n	8007bea <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c92:	9b01      	ldr	r3, [sp, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0c4      	beq.n	8007c22 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8007c98:	2e00      	cmp	r6, #0
 8007c9a:	d0cf      	beq.n	8007c3c <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 8007c9c:	f7ff fa3c 	bl	8007118 <vPortExitCritical>
		vTaskSuspendAll();
 8007ca0:	f000 fb6a 	bl	8008378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ca4:	f7ff fa16 	bl	80070d4 <vPortEnterCritical>
 8007ca8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007cac:	b25b      	sxtb	r3, r3
 8007cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb2:	d0c8      	beq.n	8007c46 <xQueueSemaphoreTake+0xb6>
 8007cb4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007cb8:	b25b      	sxtb	r3, r3
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d0c6      	beq.n	8007c4e <xQueueSemaphoreTake+0xbe>
 8007cc0:	f7ff fa2a 	bl	8007118 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cc4:	a901      	add	r1, sp, #4
 8007cc6:	a802      	add	r0, sp, #8
 8007cc8:	f000 fdb6 	bl	8008838 <xTaskCheckForTimeOut>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d1d1      	bne.n	8007c74 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f7ff fb53 	bl	800737c <prvIsQueueEmpty>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d0c6      	beq.n	8007c68 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0ba      	beq.n	8007c56 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ce0:	9901      	ldr	r1, [sp, #4]
 8007ce2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ce6:	f000 fd1f 	bl	8008728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cea:	4620      	mov	r0, r4
 8007cec:	f7ff fba0 	bl	8007430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cf0:	f000 fbf6 	bl	80084e0 <xTaskResumeAll>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d1c7      	bne.n	8007c88 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	; (8007d28 <xQueueSemaphoreTake+0x198>)
 8007cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	e7be      	b.n	8007c88 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 8007d0a:	2d00      	cmp	r5, #0
 8007d0c:	d086      	beq.n	8007c1c <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 8007d0e:	f7ff f9e1 	bl	80070d4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007d12:	4620      	mov	r0, r4
 8007d14:	f7ff fb1a 	bl	800734c <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007d18:	4601      	mov	r1, r0
 8007d1a:	6860      	ldr	r0, [r4, #4]
 8007d1c:	f000 fe9a 	bl	8008a54 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007d20:	f7ff f9fa 	bl	8007118 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007d24:	2500      	movs	r5, #0
 8007d26:	e779      	b.n	8007c1c <xQueueSemaphoreTake+0x8c>
 8007d28:	e000ed04 	.word	0xe000ed04

08007d2c <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8007d2c:	b940      	cbnz	r0, 8007d40 <xQueueTakeMutexRecursive+0x14>
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	e7fe      	b.n	8007d3e <xQueueTakeMutexRecursive+0x12>
	{
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	4604      	mov	r4, r0
 8007d44:	460d      	mov	r5, r1
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007d46:	6846      	ldr	r6, [r0, #4]
 8007d48:	f000 fdda 	bl	8008900 <xTaskGetCurrentTaskHandle>
 8007d4c:	4286      	cmp	r6, r0
 8007d4e:	d009      	beq.n	8007d64 <xQueueTakeMutexRecursive+0x38>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007d50:	4629      	mov	r1, r5
 8007d52:	4620      	mov	r0, r4
 8007d54:	f7ff ff1c 	bl	8007b90 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8007d58:	4602      	mov	r2, r0
 8007d5a:	b138      	cbz	r0, 8007d6c <xQueueTakeMutexRecursive+0x40>
				( pxMutex->u.uxRecursiveCallCount )++;
 8007d5c:	68e3      	ldr	r3, [r4, #12]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8007d62:	e003      	b.n	8007d6c <xQueueTakeMutexRecursive+0x40>
			( pxMutex->u.uxRecursiveCallCount )++;
 8007d64:	68e3      	ldr	r3, [r4, #12]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8007d6a:	2201      	movs	r2, #1
	}
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	bd70      	pop	{r4, r5, r6, pc}

08007d70 <xQueueReceiveFromISR>:
{
 8007d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007d74:	b160      	cbz	r0, 8007d90 <xQueueReceiveFromISR+0x20>
 8007d76:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d78:	b999      	cbnz	r1, 8007da2 <xQueueReceiveFromISR+0x32>
 8007d7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007d7c:	b18b      	cbz	r3, 8007da2 <xQueueReceiveFromISR+0x32>
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	e7fe      	b.n	8007d8e <xQueueReceiveFromISR+0x1e>
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	e7fe      	b.n	8007da0 <xQueueReceiveFromISR+0x30>
 8007da2:	4617      	mov	r7, r2
 8007da4:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007da6:	f7ff faa3 	bl	80072f0 <vPortValidateInterruptPriority>
	__asm volatile
 8007daa:	f3ef 8611 	mrs	r6, BASEPRI
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dbe:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dc2:	f1b8 0f00 	cmp.w	r8, #0
 8007dc6:	d01d      	beq.n	8007e04 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007dc8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8007dcc:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dce:	4649      	mov	r1, r9
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f7ff fb1b 	bl	800740c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007dd6:	f108 33ff 	add.w	r3, r8, #4294967295
 8007dda:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8007ddc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007de0:	d005      	beq.n	8007dee <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007de2:	1c6b      	adds	r3, r5, #1
 8007de4:	b25b      	sxtb	r3, r3
 8007de6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8007dea:	2001      	movs	r0, #1
 8007dec:	e00b      	b.n	8007e06 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	b16b      	cbz	r3, 8007e0e <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007df2:	f104 0010 	add.w	r0, r4, #16
 8007df6:	f000 fccb 	bl	8008790 <xTaskRemoveFromEventList>
 8007dfa:	b150      	cbz	r0, 8007e12 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 8007dfc:	b15f      	cbz	r7, 8007e16 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007dfe:	2001      	movs	r0, #1
 8007e00:	6038      	str	r0, [r7, #0]
 8007e02:	e000      	b.n	8007e06 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 8007e04:	2000      	movs	r0, #0
	__asm volatile
 8007e06:	f386 8811 	msr	BASEPRI, r6
}
 8007e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 8007e0e:	2001      	movs	r0, #1
 8007e10:	e7f9      	b.n	8007e06 <xQueueReceiveFromISR+0x96>
 8007e12:	2001      	movs	r0, #1
 8007e14:	e7f7      	b.n	8007e06 <xQueueReceiveFromISR+0x96>
 8007e16:	2001      	movs	r0, #1
 8007e18:	e7f5      	b.n	8007e06 <xQueueReceiveFromISR+0x96>
	...

08007e1c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	2b07      	cmp	r3, #7
 8007e20:	d80c      	bhi.n	8007e3c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e22:	4a07      	ldr	r2, [pc, #28]	; (8007e40 <vQueueAddToRegistry+0x24>)
 8007e24:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007e28:	b10a      	cbz	r2, 8007e2e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	e7f7      	b.n	8007e1e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e2e:	4a04      	ldr	r2, [pc, #16]	; (8007e40 <vQueueAddToRegistry+0x24>)
 8007e30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e38:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e3a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	200044f0 	.word	0x200044f0

08007e44 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e44:	2300      	movs	r3, #0
 8007e46:	2b07      	cmp	r3, #7
 8007e48:	d80f      	bhi.n	8007e6a <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e4a:	4a08      	ldr	r2, [pc, #32]	; (8007e6c <vQueueUnregisterQueue+0x28>)
 8007e4c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007e50:	6852      	ldr	r2, [r2, #4]
 8007e52:	4282      	cmp	r2, r0
 8007e54:	d001      	beq.n	8007e5a <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e56:	3301      	adds	r3, #1
 8007e58:	e7f5      	b.n	8007e46 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e5a:	4a04      	ldr	r2, [pc, #16]	; (8007e6c <vQueueUnregisterQueue+0x28>)
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e62:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e66:	6059      	str	r1, [r3, #4]
				break;
 8007e68:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e6a:	4770      	bx	lr
 8007e6c:	200044f0 	.word	0x200044f0

08007e70 <vQueueDelete>:
	configASSERT( pxQueue );
 8007e70:	b940      	cbnz	r0, 8007e84 <vQueueDelete+0x14>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	e7fe      	b.n	8007e82 <vQueueDelete+0x12>
{
 8007e84:	b510      	push	{r4, lr}
 8007e86:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8007e88:	f7ff ffdc 	bl	8007e44 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e8c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007e90:	b103      	cbz	r3, 8007e94 <vQueueDelete+0x24>
}
 8007e92:	bd10      	pop	{r4, pc}
			vPortFree( pxQueue );
 8007e94:	4620      	mov	r0, r4
 8007e96:	f7ff f833 	bl	8006f00 <vPortFree>
}
 8007e9a:	e7fa      	b.n	8007e92 <vQueueDelete+0x22>

08007e9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e9c:	b570      	push	{r4, r5, r6, lr}
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	460d      	mov	r5, r1
 8007ea2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ea4:	f7ff f916 	bl	80070d4 <vPortEnterCritical>
 8007ea8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007eac:	b25b      	sxtb	r3, r3
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d00d      	beq.n	8007ed0 <vQueueWaitForMessageRestricted+0x34>
 8007eb4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007eb8:	b25b      	sxtb	r3, r3
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebe:	d00b      	beq.n	8007ed8 <vQueueWaitForMessageRestricted+0x3c>
 8007ec0:	f7ff f92a 	bl	8007118 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ec6:	b15b      	cbz	r3, 8007ee0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f7ff fab1 	bl	8007430 <prvUnlockQueue>
	}
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007ed6:	e7ed      	b.n	8007eb4 <vQueueWaitForMessageRestricted+0x18>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ede:	e7ef      	b.n	8007ec0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ee0:	4632      	mov	r2, r6
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ee8:	f000 fc36 	bl	8008758 <vTaskPlaceOnEventListRestricted>
 8007eec:	e7ec      	b.n	8007ec8 <vQueueWaitForMessageRestricted+0x2c>
	...

08007ef0 <prvGetExpectedIdleTime>:
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8007ef0:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <prvGetExpectedIdleTime+0x38>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	b953      	cbnz	r3, 8007f0c <prvGetExpectedIdleTime+0x1c>
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8007ef6:	2200      	movs	r2, #0
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8007ef8:	4b0c      	ldr	r3, [pc, #48]	; (8007f2c <prvGetExpectedIdleTime+0x3c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	b973      	cbnz	r3, 8007f1e <prvGetExpectedIdleTime+0x2e>
		{
			xReturn = 0;
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8007f00:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <prvGetExpectedIdleTime+0x40>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d903      	bls.n	8007f10 <prvGetExpectedIdleTime+0x20>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8007f08:	2000      	movs	r0, #0
 8007f0a:	4770      	bx	lr
				uxHigherPriorityReadyTasks = pdTRUE;
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	e7f3      	b.n	8007ef8 <prvGetExpectedIdleTime+0x8>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8007f10:	b93a      	cbnz	r2, 8007f22 <prvGetExpectedIdleTime+0x32>
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8007f12:	4b08      	ldr	r3, [pc, #32]	; (8007f34 <prvGetExpectedIdleTime+0x44>)
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	4b08      	ldr	r3, [pc, #32]	; (8007f38 <prvGetExpectedIdleTime+0x48>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	1ac0      	subs	r0, r0, r3
 8007f1c:	4770      	bx	lr
			xReturn = 0;
 8007f1e:	2000      	movs	r0, #0
 8007f20:	4770      	bx	lr
			xReturn = 0;
 8007f22:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	20003c10 	.word	0x20003c10
 8007f2c:	20003790 	.word	0x20003790
 8007f30:	2000379c 	.word	0x2000379c
 8007f34:	20003c3c 	.word	0x20003c3c
 8007f38:	20003c84 	.word	0x20003c84

08007f3c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f3c:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <prvResetNextTaskUnblockTime+0x24>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	b13b      	cbz	r3, 8007f54 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f44:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <prvResetNextTaskUnblockTime+0x24>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <prvResetNextTaskUnblockTime+0x28>)
 8007f50:	601a      	str	r2, [r3, #0]
	}
}
 8007f52:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f54:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <prvResetNextTaskUnblockTime+0x28>)
 8007f56:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	20003794 	.word	0x20003794
 8007f64:	20003c3c 	.word	0x20003c3c

08007f68 <prvInitialiseNewTask>:
{
 8007f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	4681      	mov	r9, r0
 8007f6e:	460d      	mov	r5, r1
 8007f70:	4617      	mov	r7, r2
 8007f72:	469a      	mov	sl, r3
 8007f74:	9e08      	ldr	r6, [sp, #32]
 8007f76:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8007f7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f7c:	0092      	lsls	r2, r2, #2
 8007f7e:	21a5      	movs	r1, #165	; 0xa5
 8007f80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007f82:	f002 ff20 	bl	800adc6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007f86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007f88:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8007f8c:	3a01      	subs	r2, #1
 8007f8e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007f92:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f96:	2300      	movs	r3, #0
 8007f98:	2b0f      	cmp	r3, #15
 8007f9a:	d807      	bhi.n	8007fac <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f9c:	5ce9      	ldrb	r1, [r5, r3]
 8007f9e:	18e2      	adds	r2, r4, r3
 8007fa0:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8007fa4:	5cea      	ldrb	r2, [r5, r3]
 8007fa6:	b10a      	cbz	r2, 8007fac <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fa8:	3301      	adds	r3, #1
 8007faa:	e7f5      	b.n	8007f98 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fac:	2300      	movs	r3, #0
 8007fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fb2:	2e37      	cmp	r6, #55	; 0x37
 8007fb4:	d900      	bls.n	8007fb8 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fb6:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8007fb8:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007fba:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007fbc:	2500      	movs	r5, #0
 8007fbe:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fc0:	1d20      	adds	r0, r4, #4
 8007fc2:	f7fe ffe0 	bl	8006f86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fc6:	f104 0018 	add.w	r0, r4, #24
 8007fca:	f7fe ffdc 	bl	8006f86 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fce:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fd0:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8007fd4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fd6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8007fd8:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fda:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fde:	4652      	mov	r2, sl
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f7ff f84a 	bl	800707c <pxPortInitialiseStack>
 8007fe8:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8007fea:	f1b8 0f00 	cmp.w	r8, #0
 8007fee:	d001      	beq.n	8007ff4 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ff0:	f8c8 4000 	str.w	r4, [r8]
}
 8007ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007ff8 <prvInitialiseTaskLists>:
{
 8007ff8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ffa:	2400      	movs	r4, #0
 8007ffc:	e007      	b.n	800800e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ffe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008002:	0093      	lsls	r3, r2, #2
 8008004:	480e      	ldr	r0, [pc, #56]	; (8008040 <prvInitialiseTaskLists+0x48>)
 8008006:	4418      	add	r0, r3
 8008008:	f7fe ffb2 	bl	8006f70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800800c:	3401      	adds	r4, #1
 800800e:	2c37      	cmp	r4, #55	; 0x37
 8008010:	d9f5      	bls.n	8007ffe <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8008012:	4d0c      	ldr	r5, [pc, #48]	; (8008044 <prvInitialiseTaskLists+0x4c>)
 8008014:	4628      	mov	r0, r5
 8008016:	f7fe ffab 	bl	8006f70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800801a:	4c0b      	ldr	r4, [pc, #44]	; (8008048 <prvInitialiseTaskLists+0x50>)
 800801c:	4620      	mov	r0, r4
 800801e:	f7fe ffa7 	bl	8006f70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008022:	480a      	ldr	r0, [pc, #40]	; (800804c <prvInitialiseTaskLists+0x54>)
 8008024:	f7fe ffa4 	bl	8006f70 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008028:	4809      	ldr	r0, [pc, #36]	; (8008050 <prvInitialiseTaskLists+0x58>)
 800802a:	f7fe ffa1 	bl	8006f70 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800802e:	4809      	ldr	r0, [pc, #36]	; (8008054 <prvInitialiseTaskLists+0x5c>)
 8008030:	f7fe ff9e 	bl	8006f70 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008034:	4b08      	ldr	r3, [pc, #32]	; (8008058 <prvInitialiseTaskLists+0x60>)
 8008036:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008038:	4b08      	ldr	r3, [pc, #32]	; (800805c <prvInitialiseTaskLists+0x64>)
 800803a:	601c      	str	r4, [r3, #0]
}
 800803c:	bd38      	pop	{r3, r4, r5, pc}
 800803e:	bf00      	nop
 8008040:	2000379c 	.word	0x2000379c
 8008044:	20003c14 	.word	0x20003c14
 8008048:	20003c28 	.word	0x20003c28
 800804c:	20003c44 	.word	0x20003c44
 8008050:	20003c70 	.word	0x20003c70
 8008054:	20003c5c 	.word	0x20003c5c
 8008058:	20003794 	.word	0x20003794
 800805c:	20003798 	.word	0x20003798

08008060 <prvAddNewTaskToReadyList>:
{
 8008060:	b510      	push	{r4, lr}
 8008062:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008064:	f7ff f836 	bl	80070d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008068:	4a21      	ldr	r2, [pc, #132]	; (80080f0 <prvAddNewTaskToReadyList+0x90>)
 800806a:	6813      	ldr	r3, [r2, #0]
 800806c:	3301      	adds	r3, #1
 800806e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008070:	4b20      	ldr	r3, [pc, #128]	; (80080f4 <prvAddNewTaskToReadyList+0x94>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	b15b      	cbz	r3, 800808e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8008076:	4b20      	ldr	r3, [pc, #128]	; (80080f8 <prvAddNewTaskToReadyList+0x98>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	b96b      	cbnz	r3, 8008098 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800807c:	4b1d      	ldr	r3, [pc, #116]	; (80080f4 <prvAddNewTaskToReadyList+0x94>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008082:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008084:	429a      	cmp	r2, r3
 8008086:	d807      	bhi.n	8008098 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8008088:	4b1a      	ldr	r3, [pc, #104]	; (80080f4 <prvAddNewTaskToReadyList+0x94>)
 800808a:	601c      	str	r4, [r3, #0]
 800808c:	e004      	b.n	8008098 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800808e:	4b19      	ldr	r3, [pc, #100]	; (80080f4 <prvAddNewTaskToReadyList+0x94>)
 8008090:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008092:	6813      	ldr	r3, [r2, #0]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d027      	beq.n	80080e8 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 8008098:	4a18      	ldr	r2, [pc, #96]	; (80080fc <prvAddNewTaskToReadyList+0x9c>)
 800809a:	6813      	ldr	r3, [r2, #0]
 800809c:	3301      	adds	r3, #1
 800809e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080a0:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80080a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80080a4:	4a16      	ldr	r2, [pc, #88]	; (8008100 <prvAddNewTaskToReadyList+0xa0>)
 80080a6:	6812      	ldr	r2, [r2, #0]
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d901      	bls.n	80080b0 <prvAddNewTaskToReadyList+0x50>
 80080ac:	4a14      	ldr	r2, [pc, #80]	; (8008100 <prvAddNewTaskToReadyList+0xa0>)
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80080b4:	009a      	lsls	r2, r3, #2
 80080b6:	1d21      	adds	r1, r4, #4
 80080b8:	4812      	ldr	r0, [pc, #72]	; (8008104 <prvAddNewTaskToReadyList+0xa4>)
 80080ba:	4410      	add	r0, r2
 80080bc:	f7fe ff66 	bl	8006f8c <vListInsertEnd>
	taskEXIT_CRITICAL();
 80080c0:	f7ff f82a 	bl	8007118 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80080c4:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <prvAddNewTaskToReadyList+0x98>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	b16b      	cbz	r3, 80080e6 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080ca:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <prvAddNewTaskToReadyList+0x94>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d207      	bcs.n	80080e6 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 80080d6:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <prvAddNewTaskToReadyList+0xa8>)
 80080d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	f3bf 8f6f 	isb	sy
}
 80080e6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80080e8:	f7ff ff86 	bl	8007ff8 <prvInitialiseTaskLists>
 80080ec:	e7d4      	b.n	8008098 <prvAddNewTaskToReadyList+0x38>
 80080ee:	bf00      	nop
 80080f0:	20003bfc 	.word	0x20003bfc
 80080f4:	20003790 	.word	0x20003790
 80080f8:	20003c58 	.word	0x20003c58
 80080fc:	20003c0c 	.word	0x20003c0c
 8008100:	20003c10 	.word	0x20003c10
 8008104:	2000379c 	.word	0x2000379c
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <prvDeleteTCB>:
	{
 800810c:	b510      	push	{r4, lr}
 800810e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008110:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8008114:	b933      	cbnz	r3, 8008124 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8008116:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008118:	f7fe fef2 	bl	8006f00 <vPortFree>
				vPortFree( pxTCB );
 800811c:	4620      	mov	r0, r4
 800811e:	f7fe feef 	bl	8006f00 <vPortFree>
	}
 8008122:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008124:	2b01      	cmp	r3, #1
 8008126:	d00a      	beq.n	800813e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008128:	2b02      	cmp	r3, #2
 800812a:	d0fa      	beq.n	8008122 <prvDeleteTCB+0x16>
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	e7fe      	b.n	800813c <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 800813e:	f7fe fedf 	bl	8006f00 <vPortFree>
 8008142:	e7ee      	b.n	8008122 <prvDeleteTCB+0x16>

08008144 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008144:	4b0f      	ldr	r3, [pc, #60]	; (8008184 <prvCheckTasksWaitingTermination+0x40>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	b1d3      	cbz	r3, 8008180 <prvCheckTasksWaitingTermination+0x3c>
{
 800814a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800814c:	f7fe ffc2 	bl	80070d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008150:	4b0d      	ldr	r3, [pc, #52]	; (8008188 <prvCheckTasksWaitingTermination+0x44>)
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008156:	1d20      	adds	r0, r4, #4
 8008158:	f7fe ff3e 	bl	8006fd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800815c:	4a0b      	ldr	r2, [pc, #44]	; (800818c <prvCheckTasksWaitingTermination+0x48>)
 800815e:	6813      	ldr	r3, [r2, #0]
 8008160:	3b01      	subs	r3, #1
 8008162:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008164:	4a07      	ldr	r2, [pc, #28]	; (8008184 <prvCheckTasksWaitingTermination+0x40>)
 8008166:	6813      	ldr	r3, [r2, #0]
 8008168:	3b01      	subs	r3, #1
 800816a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800816c:	f7fe ffd4 	bl	8007118 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008170:	4620      	mov	r0, r4
 8008172:	f7ff ffcb 	bl	800810c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008176:	4b03      	ldr	r3, [pc, #12]	; (8008184 <prvCheckTasksWaitingTermination+0x40>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1e6      	bne.n	800814c <prvCheckTasksWaitingTermination+0x8>
}
 800817e:	bd10      	pop	{r4, pc}
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	20003c00 	.word	0x20003c00
 8008188:	20003c70 	.word	0x20003c70
 800818c:	20003bfc 	.word	0x20003bfc

08008190 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	4604      	mov	r4, r0
 8008194:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008196:	4b17      	ldr	r3, [pc, #92]	; (80081f4 <prvAddCurrentTaskToDelayedList+0x64>)
 8008198:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800819a:	4b17      	ldr	r3, [pc, #92]	; (80081f8 <prvAddCurrentTaskToDelayedList+0x68>)
 800819c:	6818      	ldr	r0, [r3, #0]
 800819e:	3004      	adds	r0, #4
 80081a0:	f7fe ff1a 	bl	8006fd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081a4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80081a8:	d013      	beq.n	80081d2 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081aa:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081ac:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <prvAddCurrentTaskToDelayedList+0x68>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80081b2:	42a5      	cmp	r5, r4
 80081b4:	d816      	bhi.n	80081e4 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081b6:	4b11      	ldr	r3, [pc, #68]	; (80081fc <prvAddCurrentTaskToDelayedList+0x6c>)
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	4b0f      	ldr	r3, [pc, #60]	; (80081f8 <prvAddCurrentTaskToDelayedList+0x68>)
 80081bc:	6819      	ldr	r1, [r3, #0]
 80081be:	3104      	adds	r1, #4
 80081c0:	f7fe fef0 	bl	8006fa4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80081c4:	4b0e      	ldr	r3, [pc, #56]	; (8008200 <prvAddCurrentTaskToDelayedList+0x70>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	d912      	bls.n	80081f2 <prvAddCurrentTaskToDelayedList+0x62>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80081cc:	4b0c      	ldr	r3, [pc, #48]	; (8008200 <prvAddCurrentTaskToDelayedList+0x70>)
 80081ce:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081d0:	e00f      	b.n	80081f2 <prvAddCurrentTaskToDelayedList+0x62>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081d2:	2e00      	cmp	r6, #0
 80081d4:	d0e9      	beq.n	80081aa <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081d6:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <prvAddCurrentTaskToDelayedList+0x68>)
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	3104      	adds	r1, #4
 80081dc:	4809      	ldr	r0, [pc, #36]	; (8008204 <prvAddCurrentTaskToDelayedList+0x74>)
 80081de:	f7fe fed5 	bl	8006f8c <vListInsertEnd>
 80081e2:	e006      	b.n	80081f2 <prvAddCurrentTaskToDelayedList+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081e4:	4b08      	ldr	r3, [pc, #32]	; (8008208 <prvAddCurrentTaskToDelayedList+0x78>)
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <prvAddCurrentTaskToDelayedList+0x68>)
 80081ea:	6819      	ldr	r1, [r3, #0]
 80081ec:	3104      	adds	r1, #4
 80081ee:	f7fe fed9 	bl	8006fa4 <vListInsert>
}
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
 80081f4:	20003c84 	.word	0x20003c84
 80081f8:	20003790 	.word	0x20003790
 80081fc:	20003794 	.word	0x20003794
 8008200:	20003c3c 	.word	0x20003c3c
 8008204:	20003c5c 	.word	0x20003c5c
 8008208:	20003798 	.word	0x20003798

0800820c <xTaskCreateStatic>:
	{
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008212:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8008214:	b945      	cbnz	r5, 8008228 <xTaskCreateStatic+0x1c>
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	e7fe      	b.n	8008226 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008228:	b944      	cbnz	r4, 800823c <xTaskCreateStatic+0x30>
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	e7fe      	b.n	800823a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800823c:	265c      	movs	r6, #92	; 0x5c
 800823e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008240:	9e04      	ldr	r6, [sp, #16]
 8008242:	2e5c      	cmp	r6, #92	; 0x5c
 8008244:	d008      	beq.n	8008258 <xTaskCreateStatic+0x4c>
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	e7fe      	b.n	8008256 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008258:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800825a:	2502      	movs	r5, #2
 800825c:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008260:	2500      	movs	r5, #0
 8008262:	9503      	str	r5, [sp, #12]
 8008264:	9402      	str	r4, [sp, #8]
 8008266:	ad05      	add	r5, sp, #20
 8008268:	9501      	str	r5, [sp, #4]
 800826a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800826c:	9500      	str	r5, [sp, #0]
 800826e:	f7ff fe7b 	bl	8007f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008272:	4620      	mov	r0, r4
 8008274:	f7ff fef4 	bl	8008060 <prvAddNewTaskToReadyList>
	}
 8008278:	9805      	ldr	r0, [sp, #20]
 800827a:	b006      	add	sp, #24
 800827c:	bd70      	pop	{r4, r5, r6, pc}

0800827e <xTaskCreate>:
	{
 800827e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008282:	b085      	sub	sp, #20
 8008284:	4607      	mov	r7, r0
 8008286:	4688      	mov	r8, r1
 8008288:	4615      	mov	r5, r2
 800828a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800828c:	0090      	lsls	r0, r2, #2
 800828e:	f7fe fdb3 	bl	8006df8 <pvPortMalloc>
			if( pxStack != NULL )
 8008292:	b308      	cbz	r0, 80082d8 <xTaskCreate+0x5a>
 8008294:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008296:	205c      	movs	r0, #92	; 0x5c
 8008298:	f7fe fdae 	bl	8006df8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800829c:	4604      	mov	r4, r0
 800829e:	b1b8      	cbz	r0, 80082d0 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 80082a0:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80082a2:	b1e4      	cbz	r4, 80082de <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082a4:	2300      	movs	r3, #0
 80082a6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	9402      	str	r4, [sp, #8]
 80082ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	464b      	mov	r3, r9
 80082b8:	462a      	mov	r2, r5
 80082ba:	4641      	mov	r1, r8
 80082bc:	4638      	mov	r0, r7
 80082be:	f7ff fe53 	bl	8007f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082c2:	4620      	mov	r0, r4
 80082c4:	f7ff fecc 	bl	8008060 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082c8:	2001      	movs	r0, #1
	}
 80082ca:	b005      	add	sp, #20
 80082cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80082d0:	4630      	mov	r0, r6
 80082d2:	f7fe fe15 	bl	8006f00 <vPortFree>
 80082d6:	e7e4      	b.n	80082a2 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	e7f5      	b.n	80082ca <xTaskCreate+0x4c>
 80082de:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80082e2:	e7f2      	b.n	80082ca <xTaskCreate+0x4c>

080082e4 <vTaskStartScheduler>:
{
 80082e4:	b510      	push	{r4, lr}
 80082e6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082e8:	2400      	movs	r4, #0
 80082ea:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082ec:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ee:	aa07      	add	r2, sp, #28
 80082f0:	a906      	add	r1, sp, #24
 80082f2:	a805      	add	r0, sp, #20
 80082f4:	f7fe fd08 	bl	8006d08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082f8:	9b05      	ldr	r3, [sp, #20]
 80082fa:	9302      	str	r3, [sp, #8]
 80082fc:	9b06      	ldr	r3, [sp, #24]
 80082fe:	9301      	str	r3, [sp, #4]
 8008300:	9400      	str	r4, [sp, #0]
 8008302:	4623      	mov	r3, r4
 8008304:	9a07      	ldr	r2, [sp, #28]
 8008306:	4917      	ldr	r1, [pc, #92]	; (8008364 <vTaskStartScheduler+0x80>)
 8008308:	4817      	ldr	r0, [pc, #92]	; (8008368 <vTaskStartScheduler+0x84>)
 800830a:	f7ff ff7f 	bl	800820c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800830e:	b140      	cbz	r0, 8008322 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 8008310:	f000 fdb8 	bl	8008e84 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008314:	2801      	cmp	r0, #1
 8008316:	d006      	beq.n	8008326 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008318:	f1b0 3fff 	cmp.w	r0, #4294967295
 800831c:	d018      	beq.n	8008350 <vTaskStartScheduler+0x6c>
}
 800831e:	b008      	add	sp, #32
 8008320:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8008322:	2000      	movs	r0, #0
 8008324:	e7f6      	b.n	8008314 <vTaskStartScheduler+0x30>
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008336:	4b0d      	ldr	r3, [pc, #52]	; (800836c <vTaskStartScheduler+0x88>)
 8008338:	f04f 32ff 	mov.w	r2, #4294967295
 800833c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800833e:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <vTaskStartScheduler+0x8c>)
 8008340:	2201      	movs	r2, #1
 8008342:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008344:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <vTaskStartScheduler+0x90>)
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800834a:	f7fe ff49 	bl	80071e0 <xPortStartScheduler>
 800834e:	e7e6      	b.n	800831e <vTaskStartScheduler+0x3a>
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	e7fe      	b.n	8008360 <vTaskStartScheduler+0x7c>
 8008362:	bf00      	nop
 8008364:	0800afb0 	.word	0x0800afb0
 8008368:	08008621 	.word	0x08008621
 800836c:	20003c3c 	.word	0x20003c3c
 8008370:	20003c58 	.word	0x20003c58
 8008374:	20003c84 	.word	0x20003c84

08008378 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008378:	4a02      	ldr	r2, [pc, #8]	; (8008384 <vTaskSuspendAll+0xc>)
 800837a:	6813      	ldr	r3, [r2, #0]
 800837c:	3301      	adds	r3, #1
 800837e:	6013      	str	r3, [r2, #0]
}
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20003c08 	.word	0x20003c08

08008388 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008388:	4b01      	ldr	r3, [pc, #4]	; (8008390 <xTaskGetTickCount+0x8>)
 800838a:	6818      	ldr	r0, [r3, #0]
}
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	20003c84 	.word	0x20003c84

08008394 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8008394:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <vTaskStepTick+0x2c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4403      	add	r3, r0
 800839a:	4a0a      	ldr	r2, [pc, #40]	; (80083c4 <vTaskStepTick+0x30>)
 800839c:	6812      	ldr	r2, [r2, #0]
 800839e:	4293      	cmp	r3, r2
 80083a0:	d908      	bls.n	80083b4 <vTaskStepTick+0x20>
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	e7fe      	b.n	80083b2 <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 80083b4:	4a02      	ldr	r2, [pc, #8]	; (80083c0 <vTaskStepTick+0x2c>)
 80083b6:	6813      	ldr	r3, [r2, #0]
 80083b8:	4403      	add	r3, r0
 80083ba:	6013      	str	r3, [r2, #0]
	}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	20003c84 	.word	0x20003c84
 80083c4:	20003c3c 	.word	0x20003c3c

080083c8 <xTaskIncrementTick>:
{
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ca:	4b3a      	ldr	r3, [pc, #232]	; (80084b4 <xTaskIncrementTick+0xec>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d164      	bne.n	800849c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083d2:	4b39      	ldr	r3, [pc, #228]	; (80084b8 <xTaskIncrementTick+0xf0>)
 80083d4:	681d      	ldr	r5, [r3, #0]
 80083d6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80083d8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083da:	b9c5      	cbnz	r5, 800840e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80083dc:	4b37      	ldr	r3, [pc, #220]	; (80084bc <xTaskIncrementTick+0xf4>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	b143      	cbz	r3, 80083f6 <xTaskIncrementTick+0x2e>
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	e7fe      	b.n	80083f4 <xTaskIncrementTick+0x2c>
 80083f6:	4a31      	ldr	r2, [pc, #196]	; (80084bc <xTaskIncrementTick+0xf4>)
 80083f8:	6811      	ldr	r1, [r2, #0]
 80083fa:	4b31      	ldr	r3, [pc, #196]	; (80084c0 <xTaskIncrementTick+0xf8>)
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	6010      	str	r0, [r2, #0]
 8008400:	6019      	str	r1, [r3, #0]
 8008402:	4a30      	ldr	r2, [pc, #192]	; (80084c4 <xTaskIncrementTick+0xfc>)
 8008404:	6813      	ldr	r3, [r2, #0]
 8008406:	3301      	adds	r3, #1
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	f7ff fd97 	bl	8007f3c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800840e:	4b2e      	ldr	r3, [pc, #184]	; (80084c8 <xTaskIncrementTick+0x100>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	42ab      	cmp	r3, r5
 8008414:	d938      	bls.n	8008488 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8008416:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008418:	4b2c      	ldr	r3, [pc, #176]	; (80084cc <xTaskIncrementTick+0x104>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008422:	009a      	lsls	r2, r3, #2
 8008424:	4b2a      	ldr	r3, [pc, #168]	; (80084d0 <xTaskIncrementTick+0x108>)
 8008426:	589b      	ldr	r3, [r3, r2]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d93c      	bls.n	80084a6 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800842c:	2401      	movs	r4, #1
 800842e:	e03a      	b.n	80084a6 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8008430:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008432:	4b22      	ldr	r3, [pc, #136]	; (80084bc <xTaskIncrementTick+0xf4>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	b343      	cbz	r3, 800848c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800843a:	4b20      	ldr	r3, [pc, #128]	; (80084bc <xTaskIncrementTick+0xf4>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008442:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8008444:	429d      	cmp	r5, r3
 8008446:	d326      	bcc.n	8008496 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008448:	1d37      	adds	r7, r6, #4
 800844a:	4638      	mov	r0, r7
 800844c:	f7fe fdc4 	bl	8006fd8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008450:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008452:	b11b      	cbz	r3, 800845c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008454:	f106 0018 	add.w	r0, r6, #24
 8008458:	f7fe fdbe 	bl	8006fd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800845c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800845e:	4a1d      	ldr	r2, [pc, #116]	; (80084d4 <xTaskIncrementTick+0x10c>)
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	4293      	cmp	r3, r2
 8008464:	d901      	bls.n	800846a <xTaskIncrementTick+0xa2>
 8008466:	4a1b      	ldr	r2, [pc, #108]	; (80084d4 <xTaskIncrementTick+0x10c>)
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800846e:	009a      	lsls	r2, r3, #2
 8008470:	4639      	mov	r1, r7
 8008472:	4817      	ldr	r0, [pc, #92]	; (80084d0 <xTaskIncrementTick+0x108>)
 8008474:	4410      	add	r0, r2
 8008476:	f7fe fd89 	bl	8006f8c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800847a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800847c:	4b13      	ldr	r3, [pc, #76]	; (80084cc <xTaskIncrementTick+0x104>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	429a      	cmp	r2, r3
 8008484:	d2d4      	bcs.n	8008430 <xTaskIncrementTick+0x68>
 8008486:	e7d4      	b.n	8008432 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8008488:	2400      	movs	r4, #0
 800848a:	e7d2      	b.n	8008432 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800848c:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <xTaskIncrementTick+0x100>)
 800848e:	f04f 32ff 	mov.w	r2, #4294967295
 8008492:	601a      	str	r2, [r3, #0]
					break;
 8008494:	e7c0      	b.n	8008418 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8008496:	4a0c      	ldr	r2, [pc, #48]	; (80084c8 <xTaskIncrementTick+0x100>)
 8008498:	6013      	str	r3, [r2, #0]
						break;
 800849a:	e7bd      	b.n	8008418 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800849c:	4a0e      	ldr	r2, [pc, #56]	; (80084d8 <xTaskIncrementTick+0x110>)
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	3301      	adds	r3, #1
 80084a2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80084a4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80084a6:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <xTaskIncrementTick+0x114>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	b103      	cbz	r3, 80084ae <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 80084ac:	2401      	movs	r4, #1
}
 80084ae:	4620      	mov	r0, r4
 80084b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b2:	bf00      	nop
 80084b4:	20003c08 	.word	0x20003c08
 80084b8:	20003c84 	.word	0x20003c84
 80084bc:	20003794 	.word	0x20003794
 80084c0:	20003798 	.word	0x20003798
 80084c4:	20003c40 	.word	0x20003c40
 80084c8:	20003c3c 	.word	0x20003c3c
 80084cc:	20003790 	.word	0x20003790
 80084d0:	2000379c 	.word	0x2000379c
 80084d4:	20003c10 	.word	0x20003c10
 80084d8:	20003c04 	.word	0x20003c04
 80084dc:	20003c88 	.word	0x20003c88

080084e0 <xTaskResumeAll>:
{
 80084e0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80084e2:	4b33      	ldr	r3, [pc, #204]	; (80085b0 <xTaskResumeAll+0xd0>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	b943      	cbnz	r3, 80084fa <xTaskResumeAll+0x1a>
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	e7fe      	b.n	80084f8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80084fa:	f7fe fdeb 	bl	80070d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80084fe:	4b2c      	ldr	r3, [pc, #176]	; (80085b0 <xTaskResumeAll+0xd0>)
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	3a01      	subs	r2, #1
 8008504:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d14d      	bne.n	80085a8 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800850c:	4b29      	ldr	r3, [pc, #164]	; (80085b4 <xTaskResumeAll+0xd4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	b923      	cbnz	r3, 800851c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8008512:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008514:	f7fe fe00 	bl	8007118 <vPortExitCritical>
}
 8008518:	4620      	mov	r0, r4
 800851a:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 800851c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800851e:	4b26      	ldr	r3, [pc, #152]	; (80085b8 <xTaskResumeAll+0xd8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	b31b      	cbz	r3, 800856c <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008524:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <xTaskResumeAll+0xd8>)
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800852a:	f104 0018 	add.w	r0, r4, #24
 800852e:	f7fe fd53 	bl	8006fd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008532:	1d25      	adds	r5, r4, #4
 8008534:	4628      	mov	r0, r5
 8008536:	f7fe fd4f 	bl	8006fd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800853a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800853c:	4a1f      	ldr	r2, [pc, #124]	; (80085bc <xTaskResumeAll+0xdc>)
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	4293      	cmp	r3, r2
 8008542:	d901      	bls.n	8008548 <xTaskResumeAll+0x68>
 8008544:	4a1d      	ldr	r2, [pc, #116]	; (80085bc <xTaskResumeAll+0xdc>)
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800854c:	009a      	lsls	r2, r3, #2
 800854e:	4629      	mov	r1, r5
 8008550:	481b      	ldr	r0, [pc, #108]	; (80085c0 <xTaskResumeAll+0xe0>)
 8008552:	4410      	add	r0, r2
 8008554:	f7fe fd1a 	bl	8006f8c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008558:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800855a:	4b1a      	ldr	r3, [pc, #104]	; (80085c4 <xTaskResumeAll+0xe4>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	429a      	cmp	r2, r3
 8008562:	d3dc      	bcc.n	800851e <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8008564:	4b18      	ldr	r3, [pc, #96]	; (80085c8 <xTaskResumeAll+0xe8>)
 8008566:	2201      	movs	r2, #1
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	e7d8      	b.n	800851e <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 800856c:	b10c      	cbz	r4, 8008572 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800856e:	f7ff fce5 	bl	8007f3c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008572:	4b16      	ldr	r3, [pc, #88]	; (80085cc <xTaskResumeAll+0xec>)
 8008574:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008576:	b154      	cbz	r4, 800858e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8008578:	f7ff ff26 	bl	80083c8 <xTaskIncrementTick>
 800857c:	b110      	cbz	r0, 8008584 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800857e:	4b12      	ldr	r3, [pc, #72]	; (80085c8 <xTaskResumeAll+0xe8>)
 8008580:	2201      	movs	r2, #1
 8008582:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008584:	3c01      	subs	r4, #1
 8008586:	d1f7      	bne.n	8008578 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8008588:	4b10      	ldr	r3, [pc, #64]	; (80085cc <xTaskResumeAll+0xec>)
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800858e:	4b0e      	ldr	r3, [pc, #56]	; (80085c8 <xTaskResumeAll+0xe8>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	b15b      	cbz	r3, 80085ac <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8008594:	4b0e      	ldr	r3, [pc, #56]	; (80085d0 <xTaskResumeAll+0xf0>)
 8008596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80085a4:	2401      	movs	r4, #1
 80085a6:	e7b5      	b.n	8008514 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 80085a8:	2400      	movs	r4, #0
 80085aa:	e7b3      	b.n	8008514 <xTaskResumeAll+0x34>
 80085ac:	2400      	movs	r4, #0
 80085ae:	e7b1      	b.n	8008514 <xTaskResumeAll+0x34>
 80085b0:	20003c08 	.word	0x20003c08
 80085b4:	20003bfc 	.word	0x20003bfc
 80085b8:	20003c44 	.word	0x20003c44
 80085bc:	20003c10 	.word	0x20003c10
 80085c0:	2000379c 	.word	0x2000379c
 80085c4:	20003790 	.word	0x20003790
 80085c8:	20003c88 	.word	0x20003c88
 80085cc:	20003c04 	.word	0x20003c04
 80085d0:	e000ed04 	.word	0xe000ed04

080085d4 <vTaskDelay>:
	{
 80085d4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085d6:	b1a8      	cbz	r0, 8008604 <vTaskDelay+0x30>
 80085d8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80085da:	4b0f      	ldr	r3, [pc, #60]	; (8008618 <vTaskDelay+0x44>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	b143      	cbz	r3, 80085f2 <vTaskDelay+0x1e>
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	e7fe      	b.n	80085f0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80085f2:	f7ff fec1 	bl	8008378 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085f6:	2100      	movs	r1, #0
 80085f8:	4620      	mov	r0, r4
 80085fa:	f7ff fdc9 	bl	8008190 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80085fe:	f7ff ff6f 	bl	80084e0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008602:	b938      	cbnz	r0, 8008614 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <vTaskDelay+0x48>)
 8008606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	f3bf 8f6f 	isb	sy
	}
 8008614:	bd10      	pop	{r4, pc}
 8008616:	bf00      	nop
 8008618:	20003c08 	.word	0x20003c08
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <prvIdleTask>:
{
 8008620:	b508      	push	{r3, lr}
 8008622:	e003      	b.n	800862c <prvIdleTask+0xc>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8008624:	f7ff fc64 	bl	8007ef0 <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8008628:	2801      	cmp	r0, #1
 800862a:	d80e      	bhi.n	800864a <prvIdleTask+0x2a>
		prvCheckTasksWaitingTermination();
 800862c:	f7ff fd8a 	bl	8008144 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008630:	4b13      	ldr	r3, [pc, #76]	; (8008680 <prvIdleTask+0x60>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d9f5      	bls.n	8008624 <prvIdleTask+0x4>
				taskYIELD();
 8008638:	4b12      	ldr	r3, [pc, #72]	; (8008684 <prvIdleTask+0x64>)
 800863a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	e7ec      	b.n	8008624 <prvIdleTask+0x4>
				vTaskSuspendAll();
 800864a:	f7ff fe95 	bl	8008378 <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800864e:	4b0e      	ldr	r3, [pc, #56]	; (8008688 <prvIdleTask+0x68>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4b0e      	ldr	r3, [pc, #56]	; (800868c <prvIdleTask+0x6c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d308      	bcc.n	800866c <prvIdleTask+0x4c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800865a:	f7ff fc49 	bl	8007ef0 <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800865e:	2801      	cmp	r0, #1
 8008660:	d901      	bls.n	8008666 <prvIdleTask+0x46>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8008662:	f7f8 fa23 	bl	8000aac <vPortSuppressTicksAndSleep>
				( void ) xTaskResumeAll();
 8008666:	f7ff ff3b 	bl	80084e0 <xTaskResumeAll>
 800866a:	e7df      	b.n	800862c <prvIdleTask+0xc>
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	e7fe      	b.n	800867c <prvIdleTask+0x5c>
 800867e:	bf00      	nop
 8008680:	2000379c 	.word	0x2000379c
 8008684:	e000ed04 	.word	0xe000ed04
 8008688:	20003c3c 	.word	0x20003c3c
 800868c:	20003c84 	.word	0x20003c84

08008690 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008690:	4b20      	ldr	r3, [pc, #128]	; (8008714 <vTaskSwitchContext+0x84>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	b11b      	cbz	r3, 800869e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8008696:	4b20      	ldr	r3, [pc, #128]	; (8008718 <vTaskSwitchContext+0x88>)
 8008698:	2201      	movs	r2, #1
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800869e:	4b1e      	ldr	r3, [pc, #120]	; (8008718 <vTaskSwitchContext+0x88>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80086a4:	4b1d      	ldr	r3, [pc, #116]	; (800871c <vTaskSwitchContext+0x8c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80086ac:	008a      	lsls	r2, r1, #2
 80086ae:	491c      	ldr	r1, [pc, #112]	; (8008720 <vTaskSwitchContext+0x90>)
 80086b0:	588a      	ldr	r2, [r1, r2]
 80086b2:	b95a      	cbnz	r2, 80086cc <vTaskSwitchContext+0x3c>
 80086b4:	b10b      	cbz	r3, 80086ba <vTaskSwitchContext+0x2a>
 80086b6:	3b01      	subs	r3, #1
 80086b8:	e7f6      	b.n	80086a8 <vTaskSwitchContext+0x18>
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	e7fe      	b.n	80086ca <vTaskSwitchContext+0x3a>
{
 80086cc:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80086ce:	4608      	mov	r0, r1
 80086d0:	009a      	lsls	r2, r3, #2
 80086d2:	18d4      	adds	r4, r2, r3
 80086d4:	00a1      	lsls	r1, r4, #2
 80086d6:	4401      	add	r1, r0
 80086d8:	684c      	ldr	r4, [r1, #4]
 80086da:	6864      	ldr	r4, [r4, #4]
 80086dc:	604c      	str	r4, [r1, #4]
 80086de:	441a      	add	r2, r3
 80086e0:	0091      	lsls	r1, r2, #2
 80086e2:	3108      	adds	r1, #8
 80086e4:	4408      	add	r0, r1
 80086e6:	4284      	cmp	r4, r0
 80086e8:	d00d      	beq.n	8008706 <vTaskSwitchContext+0x76>
 80086ea:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80086ee:	0091      	lsls	r1, r2, #2
 80086f0:	4a0b      	ldr	r2, [pc, #44]	; (8008720 <vTaskSwitchContext+0x90>)
 80086f2:	440a      	add	r2, r1
 80086f4:	6852      	ldr	r2, [r2, #4]
 80086f6:	68d1      	ldr	r1, [r2, #12]
 80086f8:	4a0a      	ldr	r2, [pc, #40]	; (8008724 <vTaskSwitchContext+0x94>)
 80086fa:	6011      	str	r1, [r2, #0]
 80086fc:	4a07      	ldr	r2, [pc, #28]	; (800871c <vTaskSwitchContext+0x8c>)
 80086fe:	6013      	str	r3, [r2, #0]
}
 8008700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008704:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008706:	6861      	ldr	r1, [r4, #4]
 8008708:	4805      	ldr	r0, [pc, #20]	; (8008720 <vTaskSwitchContext+0x90>)
 800870a:	2214      	movs	r2, #20
 800870c:	fb02 0203 	mla	r2, r2, r3, r0
 8008710:	6051      	str	r1, [r2, #4]
 8008712:	e7ea      	b.n	80086ea <vTaskSwitchContext+0x5a>
 8008714:	20003c08 	.word	0x20003c08
 8008718:	20003c88 	.word	0x20003c88
 800871c:	20003c10 	.word	0x20003c10
 8008720:	2000379c 	.word	0x2000379c
 8008724:	20003790 	.word	0x20003790

08008728 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008728:	b940      	cbnz	r0, 800873c <vTaskPlaceOnEventList+0x14>
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	e7fe      	b.n	800873a <vTaskPlaceOnEventList+0x12>
{
 800873c:	b510      	push	{r4, lr}
 800873e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008740:	4b04      	ldr	r3, [pc, #16]	; (8008754 <vTaskPlaceOnEventList+0x2c>)
 8008742:	6819      	ldr	r1, [r3, #0]
 8008744:	3118      	adds	r1, #24
 8008746:	f7fe fc2d 	bl	8006fa4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800874a:	2101      	movs	r1, #1
 800874c:	4620      	mov	r0, r4
 800874e:	f7ff fd1f 	bl	8008190 <prvAddCurrentTaskToDelayedList>
}
 8008752:	bd10      	pop	{r4, pc}
 8008754:	20003790 	.word	0x20003790

08008758 <vTaskPlaceOnEventListRestricted>:
	{
 8008758:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800875a:	b940      	cbnz	r0, 800876e <vTaskPlaceOnEventListRestricted+0x16>
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	e7fe      	b.n	800876c <vTaskPlaceOnEventListRestricted+0x14>
 800876e:	460c      	mov	r4, r1
 8008770:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008772:	4a06      	ldr	r2, [pc, #24]	; (800878c <vTaskPlaceOnEventListRestricted+0x34>)
 8008774:	6811      	ldr	r1, [r2, #0]
 8008776:	3118      	adds	r1, #24
 8008778:	f7fe fc08 	bl	8006f8c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800877c:	b10d      	cbz	r5, 8008782 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 800877e:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008782:	4629      	mov	r1, r5
 8008784:	4620      	mov	r0, r4
 8008786:	f7ff fd03 	bl	8008190 <prvAddCurrentTaskToDelayedList>
	}
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	20003790 	.word	0x20003790

08008790 <xTaskRemoveFromEventList>:
{
 8008790:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008792:	68c3      	ldr	r3, [r0, #12]
 8008794:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008796:	b944      	cbnz	r4, 80087aa <xTaskRemoveFromEventList+0x1a>
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	e7fe      	b.n	80087a8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087aa:	f104 0518 	add.w	r5, r4, #24
 80087ae:	4628      	mov	r0, r5
 80087b0:	f7fe fc12 	bl	8006fd8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087b4:	4b14      	ldr	r3, [pc, #80]	; (8008808 <xTaskRemoveFromEventList+0x78>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	b9fb      	cbnz	r3, 80087fa <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087ba:	1d25      	adds	r5, r4, #4
 80087bc:	4628      	mov	r0, r5
 80087be:	f7fe fc0b 	bl	8006fd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80087c4:	4a11      	ldr	r2, [pc, #68]	; (800880c <xTaskRemoveFromEventList+0x7c>)
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d901      	bls.n	80087d0 <xTaskRemoveFromEventList+0x40>
 80087cc:	4a0f      	ldr	r2, [pc, #60]	; (800880c <xTaskRemoveFromEventList+0x7c>)
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80087d4:	009a      	lsls	r2, r3, #2
 80087d6:	4629      	mov	r1, r5
 80087d8:	480d      	ldr	r0, [pc, #52]	; (8008810 <xTaskRemoveFromEventList+0x80>)
 80087da:	4410      	add	r0, r2
 80087dc:	f7fe fbd6 	bl	8006f8c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80087e2:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <xTaskRemoveFromEventList+0x84>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d90b      	bls.n	8008804 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 80087ec:	2401      	movs	r4, #1
 80087ee:	4b0a      	ldr	r3, [pc, #40]	; (8008818 <xTaskRemoveFromEventList+0x88>)
 80087f0:	601c      	str	r4, [r3, #0]
		prvResetNextTaskUnblockTime();
 80087f2:	f7ff fba3 	bl	8007f3c <prvResetNextTaskUnblockTime>
}
 80087f6:	4620      	mov	r0, r4
 80087f8:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087fa:	4629      	mov	r1, r5
 80087fc:	4807      	ldr	r0, [pc, #28]	; (800881c <xTaskRemoveFromEventList+0x8c>)
 80087fe:	f7fe fbc5 	bl	8006f8c <vListInsertEnd>
 8008802:	e7ed      	b.n	80087e0 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8008804:	2400      	movs	r4, #0
 8008806:	e7f4      	b.n	80087f2 <xTaskRemoveFromEventList+0x62>
 8008808:	20003c08 	.word	0x20003c08
 800880c:	20003c10 	.word	0x20003c10
 8008810:	2000379c 	.word	0x2000379c
 8008814:	20003790 	.word	0x20003790
 8008818:	20003c88 	.word	0x20003c88
 800881c:	20003c44 	.word	0x20003c44

08008820 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008820:	4b03      	ldr	r3, [pc, #12]	; (8008830 <vTaskInternalSetTimeOutState+0x10>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008826:	4b03      	ldr	r3, [pc, #12]	; (8008834 <vTaskInternalSetTimeOutState+0x14>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6043      	str	r3, [r0, #4]
}
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	20003c40 	.word	0x20003c40
 8008834:	20003c84 	.word	0x20003c84

08008838 <xTaskCheckForTimeOut>:
{
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800883a:	b150      	cbz	r0, 8008852 <xTaskCheckForTimeOut+0x1a>
 800883c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800883e:	b989      	cbnz	r1, 8008864 <xTaskCheckForTimeOut+0x2c>
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	e7fe      	b.n	8008850 <xTaskCheckForTimeOut+0x18>
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	e7fe      	b.n	8008862 <xTaskCheckForTimeOut+0x2a>
 8008864:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8008866:	f7fe fc35 	bl	80070d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800886a:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <xTaskCheckForTimeOut+0x78>)
 800886c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800886e:	6868      	ldr	r0, [r5, #4]
 8008870:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d016      	beq.n	80088a8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800887a:	682f      	ldr	r7, [r5, #0]
 800887c:	4e0d      	ldr	r6, [pc, #52]	; (80088b4 <xTaskCheckForTimeOut+0x7c>)
 800887e:	6836      	ldr	r6, [r6, #0]
 8008880:	42b7      	cmp	r7, r6
 8008882:	d001      	beq.n	8008888 <xTaskCheckForTimeOut+0x50>
 8008884:	4288      	cmp	r0, r1
 8008886:	d911      	bls.n	80088ac <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008888:	4293      	cmp	r3, r2
 800888a:	d803      	bhi.n	8008894 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008890:	2401      	movs	r4, #1
 8008892:	e005      	b.n	80088a0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008898:	4628      	mov	r0, r5
 800889a:	f7ff ffc1 	bl	8008820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800889e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80088a0:	f7fe fc3a 	bl	8007118 <vPortExitCritical>
}
 80088a4:	4620      	mov	r0, r4
 80088a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 80088a8:	2400      	movs	r4, #0
 80088aa:	e7f9      	b.n	80088a0 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 80088ac:	2401      	movs	r4, #1
 80088ae:	e7f7      	b.n	80088a0 <xTaskCheckForTimeOut+0x68>
 80088b0:	20003c84 	.word	0x20003c84
 80088b4:	20003c40 	.word	0x20003c40

080088b8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80088b8:	4b01      	ldr	r3, [pc, #4]	; (80088c0 <vTaskMissedYield+0x8>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
}
 80088be:	4770      	bx	lr
 80088c0:	20003c88 	.word	0x20003c88

080088c4 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80088c4:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <eTaskConfirmSleepModeStatus+0x2c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	b95b      	cbnz	r3, 80088e2 <eTaskConfirmSleepModeStatus+0x1e>
		else if( xYieldPending != pdFALSE )
 80088ca:	4b0a      	ldr	r3, [pc, #40]	; (80088f4 <eTaskConfirmSleepModeStatus+0x30>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	b953      	cbnz	r3, 80088e6 <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80088d0:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <eTaskConfirmSleepModeStatus+0x34>)
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	4b09      	ldr	r3, [pc, #36]	; (80088fc <eTaskConfirmSleepModeStatus+0x38>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3b01      	subs	r3, #1
 80088da:	429a      	cmp	r2, r3
 80088dc:	d005      	beq.n	80088ea <eTaskConfirmSleepModeStatus+0x26>
	eSleepModeStatus eReturn = eStandardSleep;
 80088de:	2001      	movs	r0, #1
 80088e0:	4770      	bx	lr
			eReturn = eAbortSleep;
 80088e2:	2000      	movs	r0, #0
 80088e4:	4770      	bx	lr
			eReturn = eAbortSleep;
 80088e6:	2000      	movs	r0, #0
 80088e8:	4770      	bx	lr
				eReturn = eNoTasksWaitingTimeout;
 80088ea:	2002      	movs	r0, #2
	}
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	20003c44 	.word	0x20003c44
 80088f4:	20003c88 	.word	0x20003c88
 80088f8:	20003c5c 	.word	0x20003c5c
 80088fc:	20003bfc 	.word	0x20003bfc

08008900 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8008900:	4b01      	ldr	r3, [pc, #4]	; (8008908 <xTaskGetCurrentTaskHandle+0x8>)
 8008902:	6818      	ldr	r0, [r3, #0]
	}
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	20003790 	.word	0x20003790

0800890c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800890c:	4b05      	ldr	r3, [pc, #20]	; (8008924 <xTaskGetSchedulerState+0x18>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	b133      	cbz	r3, 8008920 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008912:	4b05      	ldr	r3, [pc, #20]	; (8008928 <xTaskGetSchedulerState+0x1c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	b10b      	cbz	r3, 800891c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8008918:	2000      	movs	r0, #0
	}
 800891a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800891c:	2002      	movs	r0, #2
 800891e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008920:	2001      	movs	r0, #1
 8008922:	4770      	bx	lr
 8008924:	20003c58 	.word	0x20003c58
 8008928:	20003c08 	.word	0x20003c08

0800892c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800892c:	2800      	cmp	r0, #0
 800892e:	d040      	beq.n	80089b2 <xTaskPriorityInherit+0x86>
	{
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4605      	mov	r5, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008934:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008936:	4920      	ldr	r1, [pc, #128]	; (80089b8 <xTaskPriorityInherit+0x8c>)
 8008938:	6809      	ldr	r1, [r1, #0]
 800893a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800893c:	428a      	cmp	r2, r1
 800893e:	d22e      	bcs.n	800899e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008940:	6981      	ldr	r1, [r0, #24]
 8008942:	2900      	cmp	r1, #0
 8008944:	db05      	blt.n	8008952 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008946:	491c      	ldr	r1, [pc, #112]	; (80089b8 <xTaskPriorityInherit+0x8c>)
 8008948:	6809      	ldr	r1, [r1, #0]
 800894a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800894c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 8008950:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008952:	6968      	ldr	r0, [r5, #20]
 8008954:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008958:	0091      	lsls	r1, r2, #2
 800895a:	4a18      	ldr	r2, [pc, #96]	; (80089bc <xTaskPriorityInherit+0x90>)
 800895c:	440a      	add	r2, r1
 800895e:	4290      	cmp	r0, r2
 8008960:	d005      	beq.n	800896e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008962:	4a15      	ldr	r2, [pc, #84]	; (80089b8 <xTaskPriorityInherit+0x8c>)
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008968:	62ea      	str	r2, [r5, #44]	; 0x2c
				xReturn = pdTRUE;
 800896a:	2001      	movs	r0, #1
	}
 800896c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800896e:	1d2c      	adds	r4, r5, #4
 8008970:	4620      	mov	r0, r4
 8008972:	f7fe fb31 	bl	8006fd8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008976:	4b10      	ldr	r3, [pc, #64]	; (80089b8 <xTaskPriorityInherit+0x8c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800897e:	4a10      	ldr	r2, [pc, #64]	; (80089c0 <xTaskPriorityInherit+0x94>)
 8008980:	6812      	ldr	r2, [r2, #0]
 8008982:	4293      	cmp	r3, r2
 8008984:	d901      	bls.n	800898a <xTaskPriorityInherit+0x5e>
 8008986:	4a0e      	ldr	r2, [pc, #56]	; (80089c0 <xTaskPriorityInherit+0x94>)
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800898e:	009a      	lsls	r2, r3, #2
 8008990:	4621      	mov	r1, r4
 8008992:	480a      	ldr	r0, [pc, #40]	; (80089bc <xTaskPriorityInherit+0x90>)
 8008994:	4410      	add	r0, r2
 8008996:	f7fe faf9 	bl	8006f8c <vListInsertEnd>
				xReturn = pdTRUE;
 800899a:	2001      	movs	r0, #1
 800899c:	e7e6      	b.n	800896c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800899e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80089a0:	4b05      	ldr	r3, [pc, #20]	; (80089b8 <xTaskPriorityInherit+0x8c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d201      	bcs.n	80089ae <xTaskPriorityInherit+0x82>
					xReturn = pdTRUE;
 80089aa:	2001      	movs	r0, #1
		return xReturn;
 80089ac:	e7de      	b.n	800896c <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 80089ae:	2000      	movs	r0, #0
 80089b0:	e7dc      	b.n	800896c <xTaskPriorityInherit+0x40>
 80089b2:	2000      	movs	r0, #0
	}
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	20003790 	.word	0x20003790
 80089bc:	2000379c 	.word	0x2000379c
 80089c0:	20003c10 	.word	0x20003c10

080089c4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d038      	beq.n	8008a3a <xTaskPriorityDisinherit+0x76>
	{
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80089cc:	4a1e      	ldr	r2, [pc, #120]	; (8008a48 <xTaskPriorityDisinherit+0x84>)
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	4282      	cmp	r2, r0
 80089d2:	d008      	beq.n	80089e6 <xTaskPriorityDisinherit+0x22>
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	e7fe      	b.n	80089e4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80089e6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80089e8:	b942      	cbnz	r2, 80089fc <xTaskPriorityDisinherit+0x38>
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	e7fe      	b.n	80089fa <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80089fc:	3a01      	subs	r2, #1
 80089fe:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a00:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008a02:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008a04:	4288      	cmp	r0, r1
 8008a06:	d01a      	beq.n	8008a3e <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a08:	b9da      	cbnz	r2, 8008a42 <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a0a:	1d25      	adds	r5, r4, #4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f7fe fae3 	bl	8006fd8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008a14:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a1a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a1c:	4a0b      	ldr	r2, [pc, #44]	; (8008a4c <xTaskPriorityDisinherit+0x88>)
 8008a1e:	6812      	ldr	r2, [r2, #0]
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d901      	bls.n	8008a28 <xTaskPriorityDisinherit+0x64>
 8008a24:	4a09      	ldr	r2, [pc, #36]	; (8008a4c <xTaskPriorityDisinherit+0x88>)
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4a09      	ldr	r2, [pc, #36]	; (8008a50 <xTaskPriorityDisinherit+0x8c>)
 8008a2c:	2014      	movs	r0, #20
 8008a2e:	fb00 2003 	mla	r0, r0, r3, r2
 8008a32:	f7fe faab 	bl	8006f8c <vListInsertEnd>
					xReturn = pdTRUE;
 8008a36:	2001      	movs	r0, #1
	}
 8008a38:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8008a3a:	2000      	movs	r0, #0
	}
 8008a3c:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008a3e:	2000      	movs	r0, #0
 8008a40:	e7fa      	b.n	8008a38 <xTaskPriorityDisinherit+0x74>
 8008a42:	2000      	movs	r0, #0
		return xReturn;
 8008a44:	e7f8      	b.n	8008a38 <xTaskPriorityDisinherit+0x74>
 8008a46:	bf00      	nop
 8008a48:	20003790 	.word	0x20003790
 8008a4c:	20003c10 	.word	0x20003c10
 8008a50:	2000379c 	.word	0x2000379c

08008a54 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d045      	beq.n	8008ae4 <vTaskPriorityDisinheritAfterTimeout+0x90>
	{
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8008a5c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8008a5e:	b940      	cbnz	r0, 8008a72 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	e7fe      	b.n	8008a70 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a74:	428a      	cmp	r2, r1
 8008a76:	d200      	bcs.n	8008a7a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a78:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008a7c:	4291      	cmp	r1, r2
 8008a7e:	d001      	beq.n	8008a84 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a80:	2801      	cmp	r0, #1
 8008a82:	d000      	beq.n	8008a86 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8008a84:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8008a86:	4818      	ldr	r0, [pc, #96]	; (8008ae8 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8008a88:	6800      	ldr	r0, [r0, #0]
 8008a8a:	4298      	cmp	r0, r3
 8008a8c:	d108      	bne.n	8008aa0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	e7fe      	b.n	8008a9e <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 8008aa0:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008aa2:	6998      	ldr	r0, [r3, #24]
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	db02      	blt.n	8008aae <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aa8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008aac:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	480e      	ldr	r0, [pc, #56]	; (8008aec <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8008ab2:	2414      	movs	r4, #20
 8008ab4:	fb04 0101 	mla	r1, r4, r1, r0
 8008ab8:	428a      	cmp	r2, r1
 8008aba:	d1e3      	bne.n	8008a84 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8008abc:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008abe:	1d1d      	adds	r5, r3, #4
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	f7fe fa89 	bl	8006fd8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008ac6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ac8:	4a09      	ldr	r2, [pc, #36]	; (8008af0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8008aca:	6812      	ldr	r2, [r2, #0]
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d901      	bls.n	8008ad4 <vTaskPriorityDisinheritAfterTimeout+0x80>
 8008ad0:	4a07      	ldr	r2, [pc, #28]	; (8008af0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	4a05      	ldr	r2, [pc, #20]	; (8008aec <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8008ad8:	2014      	movs	r0, #20
 8008ada:	fb00 2003 	mla	r0, r0, r3, r2
 8008ade:	f7fe fa55 	bl	8006f8c <vListInsertEnd>
	}
 8008ae2:	e7cf      	b.n	8008a84 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	20003790 	.word	0x20003790
 8008aec:	2000379c 	.word	0x2000379c
 8008af0:	20003c10 	.word	0x20003c10

08008af4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008af4:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <pvTaskIncrementMutexHeldCount+0x18>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	b123      	cbz	r3, 8008b04 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008afa:	4b04      	ldr	r3, [pc, #16]	; (8008b0c <pvTaskIncrementMutexHeldCount+0x18>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008b00:	3301      	adds	r3, #1
 8008b02:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8008b04:	4b01      	ldr	r3, [pc, #4]	; (8008b0c <pvTaskIncrementMutexHeldCount+0x18>)
 8008b06:	6818      	ldr	r0, [r3, #0]
	}
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	20003790 	.word	0x20003790

08008b10 <xTaskNotifyWait>:
	{
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	4607      	mov	r7, r0
 8008b14:	460d      	mov	r5, r1
 8008b16:	4614      	mov	r4, r2
 8008b18:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 8008b1a:	f7fe fadb 	bl	80070d4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008b1e:	4b20      	ldr	r3, [pc, #128]	; (8008ba0 <xTaskNotifyWait+0x90>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d00a      	beq.n	8008b42 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008b2c:	4b1c      	ldr	r3, [pc, #112]	; (8008ba0 <xTaskNotifyWait+0x90>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8008b32:	ea20 0007 	bic.w	r0, r0, r7
 8008b36:	6550      	str	r0, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 8008b40:	b9ce      	cbnz	r6, 8008b76 <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 8008b42:	f7fe fae9 	bl	8007118 <vPortExitCritical>
		taskENTER_CRITICAL();
 8008b46:	f7fe fac5 	bl	80070d4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8008b4a:	b11c      	cbz	r4, 8008b54 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008b4c:	4b14      	ldr	r3, [pc, #80]	; (8008ba0 <xTaskNotifyWait+0x90>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b52:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008b54:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <xTaskNotifyWait+0x90>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d016      	beq.n	8008b90 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 8008b62:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b64:	4b0e      	ldr	r3, [pc, #56]	; (8008ba0 <xTaskNotifyWait+0x90>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 8008b6e:	f7fe fad3 	bl	8007118 <vPortExitCritical>
	}
 8008b72:	4620      	mov	r0, r4
 8008b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b76:	4611      	mov	r1, r2
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f7ff fb09 	bl	8008190 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8008b7e:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <xTaskNotifyWait+0x94>)
 8008b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b84:	601a      	str	r2, [r3, #0]
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	e7d8      	b.n	8008b42 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008b90:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <xTaskNotifyWait+0x90>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008b96:	ea23 0505 	bic.w	r5, r3, r5
 8008b9a:	6555      	str	r5, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 8008b9c:	2401      	movs	r4, #1
 8008b9e:	e7e1      	b.n	8008b64 <xTaskNotifyWait+0x54>
 8008ba0:	20003790 	.word	0x20003790
 8008ba4:	e000ed04 	.word	0xe000ed04

08008ba8 <xTaskGenericNotify>:
	{
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8008baa:	b940      	cbnz	r0, 8008bbe <xTaskGenericNotify+0x16>
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	e7fe      	b.n	8008bbc <xTaskGenericNotify+0x14>
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	461f      	mov	r7, r3
 8008bc2:	4615      	mov	r5, r2
 8008bc4:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
 8008bc6:	f7fe fa85 	bl	80070d4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8008bca:	b10f      	cbz	r7, 8008bd0 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008bcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008bce:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008bd0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8008bd4:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 8008bdc:	1e6a      	subs	r2, r5, #1
 8008bde:	2a03      	cmp	r2, #3
 8008be0:	d81a      	bhi.n	8008c18 <xTaskGenericNotify+0x70>
 8008be2:	e8df f002 	tbb	[pc, r2]
 8008be6:	0c02      	.short	0x0c02
 8008be8:	1411      	.short	0x1411
					pxTCB->ulNotifiedValue |= ulValue;
 8008bea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008bec:	4316      	orrs	r6, r2
 8008bee:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8008bf0:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d014      	beq.n	8008c20 <xTaskGenericNotify+0x78>
		taskEXIT_CRITICAL();
 8008bf6:	f7fe fa8f 	bl	8007118 <vPortExitCritical>
	}
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8008bfe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008c00:	3201      	adds	r2, #1
 8008c02:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8008c04:	2501      	movs	r5, #1
					break;
 8008c06:	e7f4      	b.n	8008bf2 <xTaskGenericNotify+0x4a>
					pxTCB->ulNotifiedValue = ulValue;
 8008c08:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8008c0a:	2501      	movs	r5, #1
					break;
 8008c0c:	e7f1      	b.n	8008bf2 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d004      	beq.n	8008c1c <xTaskGenericNotify+0x74>
						pxTCB->ulNotifiedValue = ulValue;
 8008c12:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8008c14:	2501      	movs	r5, #1
 8008c16:	e7ec      	b.n	8008bf2 <xTaskGenericNotify+0x4a>
 8008c18:	2501      	movs	r5, #1
 8008c1a:	e7ea      	b.n	8008bf2 <xTaskGenericNotify+0x4a>
						xReturn = pdFAIL;
 8008c1c:	2500      	movs	r5, #0
 8008c1e:	e7e8      	b.n	8008bf2 <xTaskGenericNotify+0x4a>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c20:	1d26      	adds	r6, r4, #4
 8008c22:	4630      	mov	r0, r6
 8008c24:	f7fe f9d8 	bl	8006fd8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008c28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c2a:	4a14      	ldr	r2, [pc, #80]	; (8008c7c <xTaskGenericNotify+0xd4>)
 8008c2c:	6812      	ldr	r2, [r2, #0]
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d901      	bls.n	8008c36 <xTaskGenericNotify+0x8e>
 8008c32:	4a12      	ldr	r2, [pc, #72]	; (8008c7c <xTaskGenericNotify+0xd4>)
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	4631      	mov	r1, r6
 8008c38:	4a11      	ldr	r2, [pc, #68]	; (8008c80 <xTaskGenericNotify+0xd8>)
 8008c3a:	2014      	movs	r0, #20
 8008c3c:	fb00 2003 	mla	r0, r0, r3, r2
 8008c40:	f7fe f9a4 	bl	8006f8c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008c44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c46:	b143      	cbz	r3, 8008c5a <xTaskGenericNotify+0xb2>
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	e7fe      	b.n	8008c58 <xTaskGenericNotify+0xb0>
					prvResetNextTaskUnblockTime();
 8008c5a:	f7ff f96f 	bl	8007f3c <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008c60:	4b08      	ldr	r3, [pc, #32]	; (8008c84 <xTaskGenericNotify+0xdc>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d9c5      	bls.n	8008bf6 <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 8008c6a:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <xTaskGenericNotify+0xe0>)
 8008c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	e7bc      	b.n	8008bf6 <xTaskGenericNotify+0x4e>
 8008c7c:	20003c10 	.word	0x20003c10
 8008c80:	2000379c 	.word	0x2000379c
 8008c84:	20003790 	.word	0x20003790
 8008c88:	e000ed04 	.word	0xe000ed04

08008c8c <xTaskGenericNotifyFromISR>:
	{
 8008c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c90:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 8008c92:	b940      	cbnz	r0, 8008ca6 <xTaskGenericNotifyFromISR+0x1a>
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	e7fe      	b.n	8008ca4 <xTaskGenericNotifyFromISR+0x18>
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	4699      	mov	r9, r3
 8008caa:	4615      	mov	r5, r2
 8008cac:	4688      	mov	r8, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cae:	f7fe fb1f 	bl	80072f0 <vPortValidateInterruptPriority>
	__asm volatile
 8008cb2:	f3ef 8711 	mrs	r7, BASEPRI
 8008cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8008cc6:	f1b9 0f00 	cmp.w	r9, #0
 8008cca:	d002      	beq.n	8008cd2 <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008ccc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008cce:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008cd2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8008cd6:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008cd8:	2202      	movs	r2, #2
 8008cda:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 8008cde:	1e6a      	subs	r2, r5, #1
 8008ce0:	2a03      	cmp	r2, #3
 8008ce2:	d81e      	bhi.n	8008d22 <xTaskGenericNotifyFromISR+0x96>
 8008ce4:	e8df f002 	tbb	[pc, r2]
 8008ce8:	17130e02 	.word	0x17130e02
					pxTCB->ulNotifiedValue |= ulValue;
 8008cec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008cee:	ea42 0208 	orr.w	r2, r2, r8
 8008cf2:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8008cf4:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d017      	beq.n	8008d2a <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
 8008cfa:	f387 8811 	msr	BASEPRI, r7
	}
 8008cfe:	4628      	mov	r0, r5
 8008d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 8008d04:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008d06:	3201      	adds	r2, #1
 8008d08:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8008d0a:	2501      	movs	r5, #1
					break;
 8008d0c:	e7f3      	b.n	8008cf6 <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 8008d0e:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8008d12:	2501      	movs	r5, #1
					break;
 8008d14:	e7ef      	b.n	8008cf6 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d005      	beq.n	8008d26 <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
 8008d1a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8008d1e:	2501      	movs	r5, #1
 8008d20:	e7e9      	b.n	8008cf6 <xTaskGenericNotifyFromISR+0x6a>
 8008d22:	2501      	movs	r5, #1
 8008d24:	e7e7      	b.n	8008cf6 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 8008d26:	2500      	movs	r5, #0
 8008d28:	e7e5      	b.n	8008cf6 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008d2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d2c:	b143      	cbz	r3, 8008d40 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	e7fe      	b.n	8008d3e <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d40:	4b14      	ldr	r3, [pc, #80]	; (8008d94 <xTaskGenericNotifyFromISR+0x108>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	b9e3      	cbnz	r3, 8008d80 <xTaskGenericNotifyFromISR+0xf4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d46:	f104 0804 	add.w	r8, r4, #4
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f7fe f944 	bl	8006fd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d52:	4a11      	ldr	r2, [pc, #68]	; (8008d98 <xTaskGenericNotifyFromISR+0x10c>)
 8008d54:	6812      	ldr	r2, [r2, #0]
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d901      	bls.n	8008d5e <xTaskGenericNotifyFromISR+0xd2>
 8008d5a:	4a0f      	ldr	r2, [pc, #60]	; (8008d98 <xTaskGenericNotifyFromISR+0x10c>)
 8008d5c:	6013      	str	r3, [r2, #0]
 8008d5e:	4641      	mov	r1, r8
 8008d60:	4a0e      	ldr	r2, [pc, #56]	; (8008d9c <xTaskGenericNotifyFromISR+0x110>)
 8008d62:	2014      	movs	r0, #20
 8008d64:	fb00 2003 	mla	r0, r0, r3, r2
 8008d68:	f7fe f910 	bl	8006f8c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <xTaskGenericNotifyFromISR+0x114>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d9c0      	bls.n	8008cfa <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 8008d78:	b146      	cbz	r6, 8008d8c <xTaskGenericNotifyFromISR+0x100>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	6033      	str	r3, [r6, #0]
 8008d7e:	e7bc      	b.n	8008cfa <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008d80:	f104 0118 	add.w	r1, r4, #24
 8008d84:	4807      	ldr	r0, [pc, #28]	; (8008da4 <xTaskGenericNotifyFromISR+0x118>)
 8008d86:	f7fe f901 	bl	8006f8c <vListInsertEnd>
 8008d8a:	e7ef      	b.n	8008d6c <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
 8008d8c:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <xTaskGenericNotifyFromISR+0x11c>)
 8008d8e:	2201      	movs	r2, #1
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	e7b2      	b.n	8008cfa <xTaskGenericNotifyFromISR+0x6e>
 8008d94:	20003c08 	.word	0x20003c08
 8008d98:	20003c10 	.word	0x20003c10
 8008d9c:	2000379c 	.word	0x2000379c
 8008da0:	20003790 	.word	0x20003790
 8008da4:	20003c44 	.word	0x20003c44
 8008da8:	20003c88 	.word	0x20003c88

08008dac <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <prvGetNextExpireTime+0x1c>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	6813      	ldr	r3, [r2, #0]
 8008db2:	fab3 f383 	clz	r3, r3
 8008db6:	095b      	lsrs	r3, r3, #5
 8008db8:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008dba:	b913      	cbnz	r3, 8008dc2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dbc:	68d3      	ldr	r3, [r2, #12]
 8008dbe:	6818      	ldr	r0, [r3, #0]
 8008dc0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008dc2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	20003c8c 	.word	0x20003c8c

08008dcc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008dcc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008dce:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dd0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008dd2:	4291      	cmp	r1, r2
 8008dd4:	d80c      	bhi.n	8008df0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd6:	1ad2      	subs	r2, r2, r3
 8008dd8:	6983      	ldr	r3, [r0, #24]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d301      	bcc.n	8008de2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008dde:	2001      	movs	r0, #1
 8008de0:	e010      	b.n	8008e04 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008de2:	1d01      	adds	r1, r0, #4
 8008de4:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <prvInsertTimerInActiveList+0x40>)
 8008de6:	6818      	ldr	r0, [r3, #0]
 8008de8:	f7fe f8dc 	bl	8006fa4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008dec:	2000      	movs	r0, #0
 8008dee:	e009      	b.n	8008e04 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d201      	bcs.n	8008df8 <prvInsertTimerInActiveList+0x2c>
 8008df4:	4299      	cmp	r1, r3
 8008df6:	d206      	bcs.n	8008e06 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008df8:	1d01      	adds	r1, r0, #4
 8008dfa:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <prvInsertTimerInActiveList+0x44>)
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	f7fe f8d1 	bl	8006fa4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008e02:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8008e04:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 8008e06:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008e08:	e7fc      	b.n	8008e04 <prvInsertTimerInActiveList+0x38>
 8008e0a:	bf00      	nop
 8008e0c:	20003c90 	.word	0x20003c90
 8008e10:	20003c8c 	.word	0x20003c8c

08008e14 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e14:	b530      	push	{r4, r5, lr}
 8008e16:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e18:	f7fe f95c 	bl	80070d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e1c:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <prvCheckForValidListAndQueue+0x50>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	b11b      	cbz	r3, 8008e2a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e22:	f7fe f979 	bl	8007118 <vPortExitCritical>
}
 8008e26:	b003      	add	sp, #12
 8008e28:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8008e2a:	4d0f      	ldr	r5, [pc, #60]	; (8008e68 <prvCheckForValidListAndQueue+0x54>)
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f7fe f89f 	bl	8006f70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e32:	4c0e      	ldr	r4, [pc, #56]	; (8008e6c <prvCheckForValidListAndQueue+0x58>)
 8008e34:	4620      	mov	r0, r4
 8008e36:	f7fe f89b 	bl	8006f70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <prvCheckForValidListAndQueue+0x5c>)
 8008e3c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	; (8008e74 <prvCheckForValidListAndQueue+0x60>)
 8008e40:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e42:	2300      	movs	r3, #0
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <prvCheckForValidListAndQueue+0x64>)
 8008e48:	4a0c      	ldr	r2, [pc, #48]	; (8008e7c <prvCheckForValidListAndQueue+0x68>)
 8008e4a:	2110      	movs	r1, #16
 8008e4c:	200a      	movs	r0, #10
 8008e4e:	f7fe fb7a 	bl	8007546 <xQueueGenericCreateStatic>
 8008e52:	4b04      	ldr	r3, [pc, #16]	; (8008e64 <prvCheckForValidListAndQueue+0x50>)
 8008e54:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d0e3      	beq.n	8008e22 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e5a:	4909      	ldr	r1, [pc, #36]	; (8008e80 <prvCheckForValidListAndQueue+0x6c>)
 8008e5c:	f7fe ffde 	bl	8007e1c <vQueueAddToRegistry>
 8008e60:	e7df      	b.n	8008e22 <prvCheckForValidListAndQueue+0xe>
 8008e62:	bf00      	nop
 8008e64:	20003db0 	.word	0x20003db0
 8008e68:	20003d34 	.word	0x20003d34
 8008e6c:	20003d48 	.word	0x20003d48
 8008e70:	20003c8c 	.word	0x20003c8c
 8008e74:	20003c90 	.word	0x20003c90
 8008e78:	20003d60 	.word	0x20003d60
 8008e7c:	20003c94 	.word	0x20003c94
 8008e80:	0800afb8 	.word	0x0800afb8

08008e84 <xTimerCreateTimerTask>:
{
 8008e84:	b510      	push	{r4, lr}
 8008e86:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008e88:	f7ff ffc4 	bl	8008e14 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008e8c:	4b12      	ldr	r3, [pc, #72]	; (8008ed8 <xTimerCreateTimerTask+0x54>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	b1cb      	cbz	r3, 8008ec6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e92:	2400      	movs	r4, #0
 8008e94:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e96:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e98:	aa07      	add	r2, sp, #28
 8008e9a:	a906      	add	r1, sp, #24
 8008e9c:	a805      	add	r0, sp, #20
 8008e9e:	f7fd ff3f 	bl	8006d20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ea2:	9b05      	ldr	r3, [sp, #20]
 8008ea4:	9302      	str	r3, [sp, #8]
 8008ea6:	9b06      	ldr	r3, [sp, #24]
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	2302      	movs	r3, #2
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	4623      	mov	r3, r4
 8008eb0:	9a07      	ldr	r2, [sp, #28]
 8008eb2:	490a      	ldr	r1, [pc, #40]	; (8008edc <xTimerCreateTimerTask+0x58>)
 8008eb4:	480a      	ldr	r0, [pc, #40]	; (8008ee0 <xTimerCreateTimerTask+0x5c>)
 8008eb6:	f7ff f9a9 	bl	800820c <xTaskCreateStatic>
 8008eba:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <xTimerCreateTimerTask+0x60>)
 8008ebc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008ebe:	b110      	cbz	r0, 8008ec6 <xTimerCreateTimerTask+0x42>
}
 8008ec0:	2001      	movs	r0, #1
 8008ec2:	b008      	add	sp, #32
 8008ec4:	bd10      	pop	{r4, pc}
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	e7fe      	b.n	8008ed6 <xTimerCreateTimerTask+0x52>
 8008ed8:	20003db0 	.word	0x20003db0
 8008edc:	0800afc0 	.word	0x0800afc0
 8008ee0:	080091c9 	.word	0x080091c9
 8008ee4:	20003db4 	.word	0x20003db4

08008ee8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8008ee8:	b1c8      	cbz	r0, 8008f1e <xTimerGenericCommand+0x36>
{
 8008eea:	b530      	push	{r4, r5, lr}
 8008eec:	b085      	sub	sp, #20
 8008eee:	4615      	mov	r5, r2
 8008ef0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 8008ef2:	4a17      	ldr	r2, [pc, #92]	; (8008f50 <xTimerGenericCommand+0x68>)
 8008ef4:	6810      	ldr	r0, [r2, #0]
 8008ef6:	b340      	cbz	r0, 8008f4a <xTimerGenericCommand+0x62>
 8008ef8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 8008efa:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008efc:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008efe:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f00:	2905      	cmp	r1, #5
 8008f02:	dc1d      	bgt.n	8008f40 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f04:	f7ff fd02 	bl	800890c <xTaskGetSchedulerState>
 8008f08:	2802      	cmp	r0, #2
 8008f0a:	d011      	beq.n	8008f30 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	461a      	mov	r2, r3
 8008f10:	4669      	mov	r1, sp
 8008f12:	480f      	ldr	r0, [pc, #60]	; (8008f50 <xTimerGenericCommand+0x68>)
 8008f14:	6800      	ldr	r0, [r0, #0]
 8008f16:	f7fe fbcb 	bl	80076b0 <xQueueGenericSend>
}
 8008f1a:	b005      	add	sp, #20
 8008f1c:	bd30      	pop	{r4, r5, pc}
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	e7fe      	b.n	8008f2e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f30:	2300      	movs	r3, #0
 8008f32:	9a08      	ldr	r2, [sp, #32]
 8008f34:	4669      	mov	r1, sp
 8008f36:	4806      	ldr	r0, [pc, #24]	; (8008f50 <xTimerGenericCommand+0x68>)
 8008f38:	6800      	ldr	r0, [r0, #0]
 8008f3a:	f7fe fbb9 	bl	80076b0 <xQueueGenericSend>
 8008f3e:	e7ec      	b.n	8008f1a <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f40:	2300      	movs	r3, #0
 8008f42:	4669      	mov	r1, sp
 8008f44:	f7fe fcb8 	bl	80078b8 <xQueueGenericSendFromISR>
 8008f48:	e7e7      	b.n	8008f1a <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 8008f4a:	2000      	movs	r0, #0
	return xReturn;
 8008f4c:	e7e5      	b.n	8008f1a <xTimerGenericCommand+0x32>
 8008f4e:	bf00      	nop
 8008f50:	20003db0 	.word	0x20003db0

08008f54 <prvSwitchTimerLists>:
{
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f58:	4b1a      	ldr	r3, [pc, #104]	; (8008fc4 <prvSwitchTimerLists+0x70>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	b352      	cbz	r2, 8008fb6 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f64:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f66:	1d25      	adds	r5, r4, #4
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f7fe f835 	bl	8006fd8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f70:	4620      	mov	r0, r4
 8008f72:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008f74:	69e3      	ldr	r3, [r4, #28]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d1ee      	bne.n	8008f58 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f7a:	69a3      	ldr	r3, [r4, #24]
 8008f7c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8008f7e:	429e      	cmp	r6, r3
 8008f80:	d207      	bcs.n	8008f92 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f82:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f84:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f86:	4629      	mov	r1, r5
 8008f88:	4b0e      	ldr	r3, [pc, #56]	; (8008fc4 <prvSwitchTimerLists+0x70>)
 8008f8a:	6818      	ldr	r0, [r3, #0]
 8008f8c:	f7fe f80a 	bl	8006fa4 <vListInsert>
 8008f90:	e7e2      	b.n	8008f58 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f92:	2100      	movs	r1, #0
 8008f94:	9100      	str	r1, [sp, #0]
 8008f96:	460b      	mov	r3, r1
 8008f98:	4632      	mov	r2, r6
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f7ff ffa4 	bl	8008ee8 <xTimerGenericCommand>
				configASSERT( xResult );
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d1d9      	bne.n	8008f58 <prvSwitchTimerLists+0x4>
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	e7fe      	b.n	8008fb4 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8008fb6:	4a04      	ldr	r2, [pc, #16]	; (8008fc8 <prvSwitchTimerLists+0x74>)
 8008fb8:	6810      	ldr	r0, [r2, #0]
 8008fba:	4902      	ldr	r1, [pc, #8]	; (8008fc4 <prvSwitchTimerLists+0x70>)
 8008fbc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8008fbe:	6013      	str	r3, [r2, #0]
}
 8008fc0:	b002      	add	sp, #8
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	20003c8c 	.word	0x20003c8c
 8008fc8:	20003c90 	.word	0x20003c90

08008fcc <prvSampleTimeNow>:
{
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8008fd0:	f7ff f9da 	bl	8008388 <xTaskGetTickCount>
 8008fd4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8008fd6:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <prvSampleTimeNow+0x28>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4283      	cmp	r3, r0
 8008fdc:	d805      	bhi.n	8008fea <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8008fe2:	4b04      	ldr	r3, [pc, #16]	; (8008ff4 <prvSampleTimeNow+0x28>)
 8008fe4:	601c      	str	r4, [r3, #0]
}
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8008fea:	f7ff ffb3 	bl	8008f54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	e7f6      	b.n	8008fe2 <prvSampleTimeNow+0x16>
 8008ff4:	20003d5c 	.word	0x20003d5c

08008ff8 <prvProcessExpiredTimer>:
{
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009000:	4b14      	ldr	r3, [pc, #80]	; (8009054 <prvProcessExpiredTimer+0x5c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009008:	1d20      	adds	r0, r4, #4
 800900a:	f7fd ffe5 	bl	8006fd8 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800900e:	69e3      	ldr	r3, [r4, #28]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d004      	beq.n	800901e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009016:	4620      	mov	r0, r4
 8009018:	4798      	blx	r3
}
 800901a:	b002      	add	sp, #8
 800901c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800901e:	69a1      	ldr	r1, [r4, #24]
 8009020:	462b      	mov	r3, r5
 8009022:	4632      	mov	r2, r6
 8009024:	4429      	add	r1, r5
 8009026:	4620      	mov	r0, r4
 8009028:	f7ff fed0 	bl	8008dcc <prvInsertTimerInActiveList>
 800902c:	2800      	cmp	r0, #0
 800902e:	d0f1      	beq.n	8009014 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009030:	2100      	movs	r1, #0
 8009032:	9100      	str	r1, [sp, #0]
 8009034:	460b      	mov	r3, r1
 8009036:	462a      	mov	r2, r5
 8009038:	4620      	mov	r0, r4
 800903a:	f7ff ff55 	bl	8008ee8 <xTimerGenericCommand>
			configASSERT( xResult );
 800903e:	2800      	cmp	r0, #0
 8009040:	d1e8      	bne.n	8009014 <prvProcessExpiredTimer+0x1c>
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	e7fe      	b.n	8009052 <prvProcessExpiredTimer+0x5a>
 8009054:	20003c8c 	.word	0x20003c8c

08009058 <prvProcessTimerOrBlockTask>:
{
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	4606      	mov	r6, r0
 800905e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009060:	f7ff f98a 	bl	8008378 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009064:	a801      	add	r0, sp, #4
 8009066:	f7ff ffb1 	bl	8008fcc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800906a:	9b01      	ldr	r3, [sp, #4]
 800906c:	bb1b      	cbnz	r3, 80090b6 <prvProcessTimerOrBlockTask+0x5e>
 800906e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009070:	b90c      	cbnz	r4, 8009076 <prvProcessTimerOrBlockTask+0x1e>
 8009072:	42b0      	cmp	r0, r6
 8009074:	d218      	bcs.n	80090a8 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 8009076:	b12c      	cbz	r4, 8009084 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009078:	4b11      	ldr	r3, [pc, #68]	; (80090c0 <prvProcessTimerOrBlockTask+0x68>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681c      	ldr	r4, [r3, #0]
 800907e:	fab4 f484 	clz	r4, r4
 8009082:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009084:	4622      	mov	r2, r4
 8009086:	1b71      	subs	r1, r6, r5
 8009088:	4b0e      	ldr	r3, [pc, #56]	; (80090c4 <prvProcessTimerOrBlockTask+0x6c>)
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	f7fe ff06 	bl	8007e9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009090:	f7ff fa26 	bl	80084e0 <xTaskResumeAll>
 8009094:	b988      	cbnz	r0, 80090ba <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 8009096:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <prvProcessTimerOrBlockTask+0x70>)
 8009098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	e008      	b.n	80090ba <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 80090a8:	f7ff fa1a 	bl	80084e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090ac:	4629      	mov	r1, r5
 80090ae:	4630      	mov	r0, r6
 80090b0:	f7ff ffa2 	bl	8008ff8 <prvProcessExpiredTimer>
 80090b4:	e001      	b.n	80090ba <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 80090b6:	f7ff fa13 	bl	80084e0 <xTaskResumeAll>
}
 80090ba:	b002      	add	sp, #8
 80090bc:	bd70      	pop	{r4, r5, r6, pc}
 80090be:	bf00      	nop
 80090c0:	20003c90 	.word	0x20003c90
 80090c4:	20003db0 	.word	0x20003db0
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <prvProcessReceivedCommands>:
{
 80090cc:	b530      	push	{r4, r5, lr}
 80090ce:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090d0:	e002      	b.n	80090d8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80090d2:	9b04      	ldr	r3, [sp, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	da0f      	bge.n	80090f8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090d8:	2200      	movs	r2, #0
 80090da:	a904      	add	r1, sp, #16
 80090dc:	4b39      	ldr	r3, [pc, #228]	; (80091c4 <prvProcessReceivedCommands+0xf8>)
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	f7fe fcaa 	bl	8007a38 <xQueueReceive>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d06a      	beq.n	80091be <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090e8:	9b04      	ldr	r3, [sp, #16]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	daf1      	bge.n	80090d2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80090ee:	9907      	ldr	r1, [sp, #28]
 80090f0:	9806      	ldr	r0, [sp, #24]
 80090f2:	9b05      	ldr	r3, [sp, #20]
 80090f4:	4798      	blx	r3
 80090f6:	e7ec      	b.n	80090d2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80090f8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80090fa:	6963      	ldr	r3, [r4, #20]
 80090fc:	b113      	cbz	r3, 8009104 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090fe:	1d20      	adds	r0, r4, #4
 8009100:	f7fd ff6a 	bl	8006fd8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009104:	a803      	add	r0, sp, #12
 8009106:	f7ff ff61 	bl	8008fcc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800910a:	9b04      	ldr	r3, [sp, #16]
 800910c:	2b09      	cmp	r3, #9
 800910e:	d8e3      	bhi.n	80090d8 <prvProcessReceivedCommands+0xc>
 8009110:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <prvProcessReceivedCommands+0x4c>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	08009141 	.word	0x08009141
 800911c:	08009141 	.word	0x08009141
 8009120:	08009141 	.word	0x08009141
 8009124:	080090d9 	.word	0x080090d9
 8009128:	08009189 	.word	0x08009189
 800912c:	080091af 	.word	0x080091af
 8009130:	08009141 	.word	0x08009141
 8009134:	08009141 	.word	0x08009141
 8009138:	080090d9 	.word	0x080090d9
 800913c:	08009189 	.word	0x08009189
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009140:	9905      	ldr	r1, [sp, #20]
 8009142:	69a5      	ldr	r5, [r4, #24]
 8009144:	460b      	mov	r3, r1
 8009146:	4602      	mov	r2, r0
 8009148:	4429      	add	r1, r5
 800914a:	4620      	mov	r0, r4
 800914c:	f7ff fe3e 	bl	8008dcc <prvInsertTimerInActiveList>
 8009150:	2800      	cmp	r0, #0
 8009152:	d0c1      	beq.n	80090d8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009156:	4620      	mov	r0, r4
 8009158:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800915a:	69e3      	ldr	r3, [r4, #28]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d1bb      	bne.n	80090d8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009160:	69a2      	ldr	r2, [r4, #24]
 8009162:	2100      	movs	r1, #0
 8009164:	9100      	str	r1, [sp, #0]
 8009166:	460b      	mov	r3, r1
 8009168:	9805      	ldr	r0, [sp, #20]
 800916a:	4402      	add	r2, r0
 800916c:	4620      	mov	r0, r4
 800916e:	f7ff febb 	bl	8008ee8 <xTimerGenericCommand>
							configASSERT( xResult );
 8009172:	2800      	cmp	r0, #0
 8009174:	d1b0      	bne.n	80090d8 <prvProcessReceivedCommands+0xc>
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	e7fe      	b.n	8009186 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009188:	9905      	ldr	r1, [sp, #20]
 800918a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800918c:	b131      	cbz	r1, 800919c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800918e:	4603      	mov	r3, r0
 8009190:	4602      	mov	r2, r0
 8009192:	4401      	add	r1, r0
 8009194:	4620      	mov	r0, r4
 8009196:	f7ff fe19 	bl	8008dcc <prvInsertTimerInActiveList>
					break;
 800919a:	e79d      	b.n	80090d8 <prvProcessReceivedCommands+0xc>
 800919c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	e7fe      	b.n	80091ac <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091ae:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d190      	bne.n	80090d8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 80091b6:	4620      	mov	r0, r4
 80091b8:	f7fd fea2 	bl	8006f00 <vPortFree>
 80091bc:	e78c      	b.n	80090d8 <prvProcessReceivedCommands+0xc>
}
 80091be:	b009      	add	sp, #36	; 0x24
 80091c0:	bd30      	pop	{r4, r5, pc}
 80091c2:	bf00      	nop
 80091c4:	20003db0 	.word	0x20003db0

080091c8 <prvTimerTask>:
{
 80091c8:	b500      	push	{lr}
 80091ca:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091cc:	a801      	add	r0, sp, #4
 80091ce:	f7ff fded 	bl	8008dac <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80091d2:	9901      	ldr	r1, [sp, #4]
 80091d4:	f7ff ff40 	bl	8009058 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80091d8:	f7ff ff78 	bl	80090cc <prvProcessReceivedCommands>
 80091dc:	e7f6      	b.n	80091cc <prvTimerTask+0x4>

080091de <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 80091de:	b570      	push	{r4, r5, r6, lr}
 80091e0:	4606      	mov	r6, r0
 80091e2:	460d      	mov	r5, r1
 80091e4:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 80091e6:	f001 fb8d 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80091ea:	f001 fb59 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 80091ee:	2300      	movs	r3, #0
 80091f0:	f06f 0260 	mvn.w	r2, #96	; 0x60
 80091f4:	7002      	strb	r2, [r0, #0]
 80091f6:	7043      	strb	r3, [r0, #1]
 80091f8:	7083      	strb	r3, [r0, #2]
 80091fa:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 80091fc:	2203      	movs	r2, #3
 80091fe:	7102      	strb	r2, [r0, #4]
 8009200:	7143      	strb	r3, [r0, #5]
 8009202:	7183      	strb	r3, [r0, #6]
 8009204:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009206:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = aType;
 8009208:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800920a:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 800920c:	f001 fb5a 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009210:	f001 fb4c 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
}
 8009214:	bd70      	pop	{r4, r5, r6, pc}

08009216 <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8009216:	b570      	push	{r4, r5, r6, lr}
 8009218:	4606      	mov	r6, r0
 800921a:	460d      	mov	r5, r1
 800921c:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800921e:	f001 fb71 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009222:	f001 fb3d 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8009226:	2300      	movs	r3, #0
 8009228:	f06f 025f 	mvn.w	r2, #95	; 0x5f
 800922c:	7002      	strb	r2, [r0, #0]
 800922e:	7043      	strb	r3, [r0, #1]
 8009230:	7083      	strb	r3, [r0, #2]
 8009232:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 8009234:	2203      	movs	r2, #3
 8009236:	7102      	strb	r2, [r0, #4]
 8009238:	7143      	strb	r3, [r0, #5]
 800923a:	7183      	strb	r3, [r0, #6]
 800923c:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800923e:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8009240:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8009242:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 8009244:	f001 fb3e 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009248:	f001 fb30 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800924c:	bd70      	pop	{r4, r5, r6, pc}

0800924e <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800924e:	b538      	push	{r3, r4, r5, lr}
 8009250:	4605      	mov	r5, r0
 8009252:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 8009254:	f001 fb56 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009258:	f001 fb22 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800925c:	2300      	movs	r3, #0
 800925e:	f06f 025e 	mvn.w	r2, #94	; 0x5e
 8009262:	7002      	strb	r2, [r0, #0]
 8009264:	7043      	strb	r3, [r0, #1]
 8009266:	7083      	strb	r3, [r0, #2]
 8009268:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800926a:	2202      	movs	r2, #2
 800926c:	7102      	strb	r2, [r0, #4]
 800926e:	7143      	strb	r3, [r0, #5]
 8009270:	7183      	strb	r3, [r0, #6]
 8009272:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009274:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8009276:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 8009278:	f001 fb24 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800927c:	f001 fb16 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
}
 8009280:	bd38      	pop	{r3, r4, r5, pc}

08009282 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8009282:	b538      	push	{r3, r4, r5, lr}
 8009284:	4605      	mov	r5, r0
 8009286:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 8009288:	f001 fb3c 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800928c:	f001 fb08 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 8009290:	2300      	movs	r3, #0
 8009292:	f06f 025d 	mvn.w	r2, #93	; 0x5d
 8009296:	7002      	strb	r2, [r0, #0]
 8009298:	7043      	strb	r3, [r0, #1]
 800929a:	7083      	strb	r3, [r0, #2]
 800929c:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800929e:	2202      	movs	r2, #2
 80092a0:	7102      	strb	r2, [r0, #4]
 80092a2:	7143      	strb	r3, [r0, #5]
 80092a4:	7183      	strb	r3, [r0, #6]
 80092a6:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80092a8:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 80092aa:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 80092ac:	f001 fb0a 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80092b0:	f001 fafc 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError) p_ot_req->Data[0];
 80092b4:	6880      	ldr	r0, [r0, #8]
}
 80092b6:	b2c0      	uxtb	r0, r0
 80092b8:	bd38      	pop	{r3, r4, r5, pc}

080092ba <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 80092ba:	b538      	push	{r3, r4, r5, lr}
 80092bc:	4605      	mov	r5, r0
 80092be:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 80092c0:	f001 fb20 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80092c4:	f001 faec 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 80092c8:	2300      	movs	r3, #0
 80092ca:	f06f 0250 	mvn.w	r2, #80	; 0x50
 80092ce:	7002      	strb	r2, [r0, #0]
 80092d0:	7043      	strb	r3, [r0, #1]
 80092d2:	7083      	strb	r3, [r0, #2]
 80092d4:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 80092d6:	2202      	movs	r2, #2
 80092d8:	7102      	strb	r2, [r0, #4]
 80092da:	7143      	strb	r3, [r0, #5]
 80092dc:	7183      	strb	r3, [r0, #6]
 80092de:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80092e0:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 80092e2:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 80092e4:	f001 faee 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80092e8:	f001 fae0 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError) p_ot_req->Data[0];
 80092ec:	6880      	ldr	r0, [r0, #8]
}
 80092ee:	b2c0      	uxtb	r0, r0
 80092f0:	bd38      	pop	{r3, r4, r5, pc}

080092f2 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 80092f2:	b510      	push	{r4, lr}
 80092f4:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 80092f6:	f001 fb05 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80092fa:	f001 fad1 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 80092fe:	2300      	movs	r3, #0
 8009300:	f06f 024d 	mvn.w	r2, #77	; 0x4d
 8009304:	7002      	strb	r2, [r0, #0]
 8009306:	7043      	strb	r3, [r0, #1]
 8009308:	7083      	strb	r3, [r0, #2]
 800930a:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800930c:	2201      	movs	r2, #1
 800930e:	7102      	strb	r2, [r0, #4]
 8009310:	7143      	strb	r3, [r0, #5]
 8009312:	7183      	strb	r3, [r0, #6]
 8009314:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009316:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 8009318:	f001 fad4 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800931c:	f001 fac6 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError) p_ot_req->Data[0];
 8009320:	6880      	ldr	r0, [r0, #8]
}
 8009322:	b2c0      	uxtb	r0, r0
 8009324:	bd10      	pop	{r4, pc}

08009326 <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8009326:	b538      	push	{r3, r4, r5, lr}
 8009328:	4605      	mov	r5, r0
 800932a:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800932c:	f001 faea 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009330:	f001 fab6 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8009334:	2300      	movs	r3, #0
 8009336:	f06f 0256 	mvn.w	r2, #86	; 0x56
 800933a:	7002      	strb	r2, [r0, #0]
 800933c:	7043      	strb	r3, [r0, #1]
 800933e:	7083      	strb	r3, [r0, #2]
 8009340:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 8009342:	2202      	movs	r2, #2
 8009344:	7102      	strb	r2, [r0, #4]
 8009346:	7143      	strb	r3, [r0, #5]
 8009348:	7183      	strb	r3, [r0, #6]
 800934a:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800934c:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800934e:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 8009350:	f001 fab8 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009354:	f001 faaa 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
}
 8009358:	bd38      	pop	{r3, r4, r5, pc}

0800935a <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800935a:	b510      	push	{r4, lr}
 800935c:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800935e:	f001 fad1 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009362:	f001 fa9d 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8009366:	2300      	movs	r3, #0
 8009368:	f06f 0261 	mvn.w	r2, #97	; 0x61
 800936c:	7002      	strb	r2, [r0, #0]
 800936e:	7043      	strb	r3, [r0, #1]
 8009370:	7083      	strb	r3, [r0, #2]
 8009372:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 8009374:	2201      	movs	r2, #1
 8009376:	7102      	strb	r2, [r0, #4]
 8009378:	7143      	strb	r3, [r0, #5]
 800937a:	7183      	strb	r3, [r0, #6]
 800937c:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800937e:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 8009380:	f001 faa0 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009384:	f001 fa92 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otCoapType)p_ot_req->Data[0];
 8009388:	6880      	ldr	r0, [r0, #8]
}
 800938a:	b2c0      	uxtb	r0, r0
 800938c:	bd10      	pop	{r4, pc}

0800938e <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800938e:	b510      	push	{r4, lr}
 8009390:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 8009392:	f001 fab7 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009396:	f001 fa83 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800939a:	2300      	movs	r3, #0
 800939c:	f06f 024c 	mvn.w	r2, #76	; 0x4c
 80093a0:	7002      	strb	r2, [r0, #0]
 80093a2:	7043      	strb	r3, [r0, #1]
 80093a4:	7083      	strb	r3, [r0, #2]
 80093a6:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 80093a8:	2201      	movs	r2, #1
 80093aa:	7102      	strb	r2, [r0, #4]
 80093ac:	7143      	strb	r3, [r0, #5]
 80093ae:	7183      	strb	r3, [r0, #6]
 80093b0:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80093b2:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 80093b4:	f001 fa86 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80093b8:	f001 fa78 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otCoapCode)p_ot_req->Data[0];
 80093bc:	6880      	ldr	r0, [r0, #8]
}
 80093be:	b2c0      	uxtb	r0, r0
 80093c0:	bd10      	pop	{r4, pc}

080093c2 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 80093c2:	b510      	push	{r4, lr}
 80093c4:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 80093c6:	f001 fa9d 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80093ca:	f001 fa69 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 80093ce:	2300      	movs	r3, #0
 80093d0:	f06f 0255 	mvn.w	r2, #85	; 0x55
 80093d4:	7002      	strb	r2, [r0, #0]
 80093d6:	7043      	strb	r3, [r0, #1]
 80093d8:	7083      	strb	r3, [r0, #2]
 80093da:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 80093dc:	2201      	movs	r2, #1
 80093de:	7102      	strb	r2, [r0, #4]
 80093e0:	7143      	strb	r3, [r0, #5]
 80093e2:	7183      	strb	r3, [r0, #6]
 80093e4:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80093e6:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 80093e8:	f001 fa6c 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80093ec:	f001 fa5e 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint16_t)p_ot_req->Data[0];
 80093f0:	6880      	ldr	r0, [r0, #8]
}
 80093f2:	b280      	uxth	r0, r0
 80093f4:	bd10      	pop	{r4, pc}

080093f6 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 80093f6:	b510      	push	{r4, lr}
 80093f8:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 80093fa:	f001 fa83 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80093fe:	f001 fa4f 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8009402:	2300      	movs	r3, #0
 8009404:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8009408:	7002      	strb	r2, [r0, #0]
 800940a:	7043      	strb	r3, [r0, #1]
 800940c:	7083      	strb	r3, [r0, #2]
 800940e:	70c3      	strb	r3, [r0, #3]

   p_ot_req->Size=1;
 8009410:	2201      	movs	r2, #1
 8009412:	7102      	strb	r2, [r0, #4]
 8009414:	7143      	strb	r3, [r0, #5]
 8009416:	7183      	strb	r3, [r0, #6]
 8009418:	71c3      	strb	r3, [r0, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800941a:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800941c:	f001 fa52 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009420:	f001 fa44 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
   return (uint8_t)p_ot_req->Data[0];
 8009424:	6880      	ldr	r0, [r0, #8]
}
 8009426:	b2c0      	uxtb	r0, r0
 8009428:	bd10      	pop	{r4, pc}

0800942a <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800942a:	b510      	push	{r4, lr}
 800942c:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800942e:	f001 fa69 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009432:	f001 fa35 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8009436:	2300      	movs	r3, #0
 8009438:	f06f 0253 	mvn.w	r2, #83	; 0x53
 800943c:	7002      	strb	r2, [r0, #0]
 800943e:	7043      	strb	r3, [r0, #1]
 8009440:	7083      	strb	r3, [r0, #2]
 8009442:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 8009444:	2201      	movs	r2, #1
 8009446:	7102      	strb	r2, [r0, #4]
 8009448:	7143      	strb	r3, [r0, #5]
 800944a:	7183      	strb	r3, [r0, #6]
 800944c:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800944e:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 8009450:	f001 fa38 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009454:	f001 fa2a 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint8_t *)p_ot_req->Data[0];
}
 8009458:	6880      	ldr	r0, [r0, #8]
 800945a:	bd10      	pop	{r4, pc}

0800945c <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800945c:	b510      	push	{r4, lr}
 800945e:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 8009460:	f001 fa50 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009464:	f001 fa1c 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8009468:	2300      	movs	r3, #0
 800946a:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800946e:	7002      	strb	r2, [r0, #0]
 8009470:	7043      	strb	r3, [r0, #1]
 8009472:	7083      	strb	r3, [r0, #2]
 8009474:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 8009476:	2201      	movs	r2, #1
 8009478:	7102      	strb	r2, [r0, #4]
 800947a:	7143      	strb	r3, [r0, #5]
 800947c:	7183      	strb	r3, [r0, #6]
 800947e:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8009480:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 8009482:	f001 fa1f 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009486:	f001 fa11 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otMessage *)p_ot_req->Data[0];

}
 800948a:	6880      	ldr	r0, [r0, #8]
 800948c:	bd10      	pop	{r4, pc}

0800948e <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 800948e:	b570      	push	{r4, r5, r6, lr}
 8009490:	460e      	mov	r6, r1
 8009492:	4615      	mov	r5, r2
 8009494:	461c      	mov	r4, r3
    Pre_OtCmdProcessing();
 8009496:	f001 fa35 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800949a:	f001 fa01 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 800949e:	2300      	movs	r3, #0
 80094a0:	f06f 0258 	mvn.w	r2, #88	; 0x58
 80094a4:	7002      	strb	r2, [r0, #0]
 80094a6:	7043      	strb	r3, [r0, #1]
 80094a8:	7083      	strb	r3, [r0, #2]
 80094aa:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 80094ac:	2203      	movs	r2, #3
 80094ae:	7102      	strb	r2, [r0, #4]
 80094b0:	7143      	strb	r3, [r0, #5]
 80094b2:	7183      	strb	r3, [r0, #6]
 80094b4:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80094b6:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80094b8:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 80094ba:	6104      	str	r4, [r0, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 80094bc:	9b04      	ldr	r3, [sp, #16]
 80094be:	6143      	str	r3, [r0, #20]

    Ot_Cmd_Transfer();
 80094c0:	f001 fa00 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80094c4:	f001 f9f2 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 80094c8:	6880      	ldr	r0, [r0, #8]
}
 80094ca:	b2c0      	uxtb	r0, r0
 80094cc:	bd70      	pop	{r4, r5, r6, pc}

080094ce <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 80094ce:	b510      	push	{r4, lr}
 80094d0:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 80094d2:	f001 fa17 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80094d6:	f001 f9e3 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 80094da:	2300      	movs	r3, #0
 80094dc:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80094e0:	7002      	strb	r2, [r0, #0]
 80094e2:	7043      	strb	r3, [r0, #1]
 80094e4:	7083      	strb	r3, [r0, #2]
 80094e6:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 80094e8:	2201      	movs	r2, #1
 80094ea:	7102      	strb	r2, [r0, #4]
 80094ec:	7143      	strb	r3, [r0, #5]
 80094ee:	7183      	strb	r3, [r0, #6]
 80094f0:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 80094f2:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 80094f4:	f001 f9e6 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80094f8:	f001 f9d8 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 80094fc:	6880      	ldr	r0, [r0, #8]
}
 80094fe:	b2c0      	uxtb	r0, r0
 8009500:	bd10      	pop	{r4, pc}

08009502 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8009502:	b510      	push	{r4, lr}
 8009504:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 8009506:	f001 f9fd 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800950a:	f001 f9c9 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800950e:	2300      	movs	r3, #0
 8009510:	f06f 0249 	mvn.w	r2, #73	; 0x49
 8009514:	7002      	strb	r2, [r0, #0]
 8009516:	7043      	strb	r3, [r0, #1]
 8009518:	7083      	strb	r3, [r0, #2]
 800951a:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800951c:	2201      	movs	r2, #1
 800951e:	7102      	strb	r2, [r0, #4]
 8009520:	7143      	strb	r3, [r0, #5]
 8009522:	7183      	strb	r3, [r0, #6]
 8009524:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8009526:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 8009528:	f001 f9cc 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800952c:	f001 f9be 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 8009530:	6880      	ldr	r0, [r0, #8]
}
 8009532:	b2c0      	uxtb	r0, r0
 8009534:	bd10      	pop	{r4, pc}

08009536 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8009536:	b538      	push	{r3, r4, r5, lr}
 8009538:	460d      	mov	r5, r1
 800953a:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800953c:	f001 f9e2 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009540:	f001 f9ae 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 8009544:	2300      	movs	r3, #0
 8009546:	f06f 0257 	mvn.w	r2, #87	; 0x57
 800954a:	7002      	strb	r2, [r0, #0]
 800954c:	7043      	strb	r3, [r0, #1]
 800954e:	7083      	strb	r3, [r0, #2]
 8009550:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 8009552:	2202      	movs	r2, #2
 8009554:	7102      	strb	r2, [r0, #4]
 8009556:	7143      	strb	r3, [r0, #5]
 8009558:	7183      	strb	r3, [r0, #6]
 800955a:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800955c:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800955e:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 8009560:	f001 f9b0 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009564:	f001 f9a2 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 8009568:	6880      	ldr	r0, [r0, #8]
}
 800956a:	b2c0      	uxtb	r0, r0
 800956c:	bd38      	pop	{r3, r4, r5, pc}

0800956e <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800956e:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 8009570:	f001 f9c8 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009574:	f001 f994 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8009578:	2300      	movs	r3, #0
 800957a:	f06f 026b 	mvn.w	r2, #107	; 0x6b
 800957e:	7002      	strb	r2, [r0, #0]
 8009580:	7043      	strb	r3, [r0, #1]
 8009582:	7083      	strb	r3, [r0, #2]
 8009584:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 8009586:	7103      	strb	r3, [r0, #4]
 8009588:	7143      	strb	r3, [r0, #5]
 800958a:	7183      	strb	r3, [r0, #6]
 800958c:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 800958e:	f001 f999 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009592:	f001 f98b 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otInstance *)p_ot_req->Data[0];
}
 8009596:	6880      	ldr	r0, [r0, #8]
 8009598:	bd08      	pop	{r3, pc}

0800959a <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800959a:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 800959c:	f001 f9b2 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80095a0:	f001 f97e 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 80095a4:	2300      	movs	r3, #0
 80095a6:	f06f 0269 	mvn.w	r2, #105	; 0x69
 80095aa:	7002      	strb	r2, [r0, #0]
 80095ac:	7043      	strb	r3, [r0, #1]
 80095ae:	7083      	strb	r3, [r0, #2]
 80095b0:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 80095b2:	7103      	strb	r3, [r0, #4]
 80095b4:	7143      	strb	r3, [r0, #5]
 80095b6:	7183      	strb	r3, [r0, #6]
 80095b8:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 80095ba:	f001 f983 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80095be:	f001 f975 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
}
 80095c2:	bd08      	pop	{r3, pc}

080095c4 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	460d      	mov	r5, r1
 80095c8:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 80095ca:	f001 f99b 	bl	800a904 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 80095ce:	4b0c      	ldr	r3, [pc, #48]	; (8009600 <otSetStateChangedCallback+0x3c>)
 80095d0:	601d      	str	r5, [r3, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80095d2:	f001 f965 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	f06f 0268 	mvn.w	r2, #104	; 0x68
 80095dc:	7002      	strb	r2, [r0, #0]
 80095de:	7043      	strb	r3, [r0, #1]
 80095e0:	7083      	strb	r3, [r0, #2]
 80095e2:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 80095e4:	2201      	movs	r2, #1
 80095e6:	7102      	strb	r2, [r0, #4]
 80095e8:	7143      	strb	r3, [r0, #5]
 80095ea:	7183      	strb	r3, [r0, #6]
 80095ec:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 80095ee:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 80095f0:	f001 f968 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80095f4:	f001 f95a 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 80095f8:	6880      	ldr	r0, [r0, #8]
}
 80095fa:	b2c0      	uxtb	r0, r0
 80095fc:	bd38      	pop	{r3, r4, r5, pc}
 80095fe:	bf00      	nop
 8009600:	20003df4 	.word	0x20003df4

08009604 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8009604:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 8009606:	f001 f97d 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800960a:	f001 f949 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800960e:	2300      	movs	r3, #0
 8009610:	f06f 0264 	mvn.w	r2, #100	; 0x64
 8009614:	7002      	strb	r2, [r0, #0]
 8009616:	7043      	strb	r3, [r0, #1]
 8009618:	7083      	strb	r3, [r0, #2]
 800961a:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 800961c:	7103      	strb	r3, [r0, #4]
 800961e:	7143      	strb	r3, [r0, #5]
 8009620:	7183      	strb	r3, [r0, #6]
 8009622:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 8009624:	f001 f94e 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009628:	f001 f940 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800962c:	6880      	ldr	r0, [r0, #8]
}
 800962e:	b2c0      	uxtb	r0, r0
 8009630:	bd08      	pop	{r3, pc}

08009632 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8009632:	b510      	push	{r4, lr}
 8009634:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 8009636:	f001 f965 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800963a:	f001 f931 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800963e:	2300      	movs	r3, #0
 8009640:	2227      	movs	r2, #39	; 0x27
 8009642:	7002      	strb	r2, [r0, #0]
 8009644:	7043      	strb	r3, [r0, #1]
 8009646:	7083      	strb	r3, [r0, #2]
 8009648:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800964a:	2201      	movs	r2, #1
 800964c:	7102      	strb	r2, [r0, #4]
 800964e:	7143      	strb	r3, [r0, #5]
 8009650:	7183      	strb	r3, [r0, #6]
 8009652:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8009654:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 8009656:	f001 f935 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800965a:	f001 f927 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800965e:	6880      	ldr	r0, [r0, #8]
}
 8009660:	b2c0      	uxtb	r0, r0
 8009662:	bd10      	pop	{r4, pc}

08009664 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 8009664:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 8009666:	f001 f94d 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800966a:	f001 f919 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800966e:	2300      	movs	r3, #0
 8009670:	2228      	movs	r2, #40	; 0x28
 8009672:	7002      	strb	r2, [r0, #0]
 8009674:	7043      	strb	r3, [r0, #1]
 8009676:	7083      	strb	r3, [r0, #2]
 8009678:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800967a:	7103      	strb	r3, [r0, #4]
 800967c:	7143      	strb	r3, [r0, #5]
 800967e:	7183      	strb	r3, [r0, #6]
 8009680:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 8009682:	f001 f91f 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009686:	f001 f911 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (bool)p_ot_req->Data[0];
 800968a:	6880      	ldr	r0, [r0, #8]
}
 800968c:	3000      	adds	r0, #0
 800968e:	bf18      	it	ne
 8009690:	2001      	movne	r0, #1
 8009692:	bd08      	pop	{r3, pc}

08009694 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 8009694:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 8009696:	f001 f935 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800969a:	f001 f901 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800969e:	2300      	movs	r3, #0
 80096a0:	222b      	movs	r2, #43	; 0x2b
 80096a2:	7002      	strb	r2, [r0, #0]
 80096a4:	7043      	strb	r3, [r0, #1]
 80096a6:	7083      	strb	r3, [r0, #2]
 80096a8:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 80096aa:	7103      	strb	r3, [r0, #4]
 80096ac:	7143      	strb	r3, [r0, #5]
 80096ae:	7183      	strb	r3, [r0, #6]
 80096b0:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 80096b2:	f001 f907 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80096b6:	f001 f8f9 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otNetifAddress *)p_ot_req->Data[0];
}
 80096ba:	6880      	ldr	r0, [r0, #8]
 80096bc:	bd08      	pop	{r3, pc}

080096be <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 80096be:	b538      	push	{r3, r4, r5, lr}
 80096c0:	4605      	mov	r5, r0
 80096c2:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 80096c4:	f001 f91e 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80096c8:	f001 f8ea 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 80096cc:	2300      	movs	r3, #0
 80096ce:	223f      	movs	r2, #63	; 0x3f
 80096d0:	7002      	strb	r2, [r0, #0]
 80096d2:	7043      	strb	r3, [r0, #1]
 80096d4:	7083      	strb	r3, [r0, #2]
 80096d6:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=2;
 80096d8:	2202      	movs	r2, #2
 80096da:	7102      	strb	r2, [r0, #4]
 80096dc:	7143      	strb	r3, [r0, #5]
 80096de:	7183      	strb	r3, [r0, #6]
 80096e0:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 80096e2:	6085      	str	r5, [r0, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 80096e4:	60c4      	str	r4, [r0, #12]

  Ot_Cmd_Transfer();
 80096e6:	f001 f8ed 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80096ea:	f001 f8df 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 80096ee:	6880      	ldr	r0, [r0, #8]
}
 80096f0:	b2c0      	uxtb	r0, r0
 80096f2:	bd38      	pop	{r3, r4, r5, pc}

080096f4 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 80096f4:	b510      	push	{r4, lr}
 80096f6:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 80096f8:	f001 f904 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80096fc:	f001 f8d0 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8009700:	2300      	movs	r3, #0
 8009702:	2208      	movs	r2, #8
 8009704:	7002      	strb	r2, [r0, #0]
 8009706:	7043      	strb	r3, [r0, #1]
 8009708:	7083      	strb	r3, [r0, #2]
 800970a:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800970c:	2201      	movs	r2, #1
 800970e:	7102      	strb	r2, [r0, #4]
 8009710:	7143      	strb	r3, [r0, #5]
 8009712:	7183      	strb	r3, [r0, #6]
 8009714:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8009716:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 8009718:	f001 f8d4 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800971c:	f001 f8c6 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 8009720:	6880      	ldr	r0, [r0, #8]
}
 8009722:	b2c0      	uxtb	r0, r0
 8009724:	bd10      	pop	{r4, pc}

08009726 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8009726:	b510      	push	{r4, lr}
 8009728:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800972a:	f001 f8eb 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800972e:	f001 f8b7 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8009732:	2300      	movs	r3, #0
 8009734:	220f      	movs	r2, #15
 8009736:	7002      	strb	r2, [r0, #0]
 8009738:	7043      	strb	r3, [r0, #1]
 800973a:	7083      	strb	r3, [r0, #2]
 800973c:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800973e:	2201      	movs	r2, #1
 8009740:	7102      	strb	r2, [r0, #4]
 8009742:	7143      	strb	r3, [r0, #5]
 8009744:	7183      	strb	r3, [r0, #6]
 8009746:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8009748:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800974a:	f001 f8bb 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800974e:	f001 f8ad 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 8009752:	6880      	ldr	r0, [r0, #8]
}
 8009754:	b2c0      	uxtb	r0, r0
 8009756:	bd10      	pop	{r4, pc}

08009758 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8009758:	b510      	push	{r4, lr}
 800975a:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800975c:	f001 f8d2 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009760:	f001 f89e 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8009764:	2300      	movs	r3, #0
 8009766:	f06f 0246 	mvn.w	r2, #70	; 0x46
 800976a:	7002      	strb	r2, [r0, #0]
 800976c:	7043      	strb	r3, [r0, #1]
 800976e:	7083      	strb	r3, [r0, #2]
 8009770:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 8009772:	2201      	movs	r2, #1
 8009774:	7102      	strb	r2, [r0, #4]
 8009776:	7143      	strb	r3, [r0, #5]
 8009778:	7183      	strb	r3, [r0, #6]
 800977a:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800977c:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800977e:	f001 f8a1 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009782:	f001 f893 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
}
 8009786:	bd10      	pop	{r4, pc}

08009788 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8009788:	b510      	push	{r4, lr}
 800978a:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800978c:	f001 f8ba 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009790:	f001 f886 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8009794:	2300      	movs	r3, #0
 8009796:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800979a:	7002      	strb	r2, [r0, #0]
 800979c:	7043      	strb	r3, [r0, #1]
 800979e:	7083      	strb	r3, [r0, #2]
 80097a0:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 80097a2:	2201      	movs	r2, #1
 80097a4:	7102      	strb	r2, [r0, #4]
 80097a6:	7143      	strb	r3, [r0, #5]
 80097a8:	7183      	strb	r3, [r0, #6]
 80097aa:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80097ac:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 80097ae:	f001 f889 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80097b2:	f001 f87b 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint16_t)p_ot_req->Data[0];
 80097b6:	6880      	ldr	r0, [r0, #8]
}
 80097b8:	b280      	uxth	r0, r0
 80097ba:	bd10      	pop	{r4, pc}

080097bc <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 80097bc:	b570      	push	{r4, r5, r6, lr}
 80097be:	4606      	mov	r6, r0
 80097c0:	460d      	mov	r5, r1
 80097c2:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 80097c4:	f001 f89e 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80097c8:	f001 f86a 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 80097cc:	2300      	movs	r3, #0
 80097ce:	f06f 023e 	mvn.w	r2, #62	; 0x3e
 80097d2:	7002      	strb	r2, [r0, #0]
 80097d4:	7043      	strb	r3, [r0, #1]
 80097d6:	7083      	strb	r3, [r0, #2]
 80097d8:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 80097da:	2203      	movs	r2, #3
 80097dc:	7102      	strb	r2, [r0, #4]
 80097de:	7143      	strb	r3, [r0, #5]
 80097e0:	7183      	strb	r3, [r0, #6]
 80097e2:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80097e4:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 80097e6:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 80097e8:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 80097ea:	f001 f86b 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80097ee:	f001 f85d 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 80097f2:	6880      	ldr	r0, [r0, #8]
}
 80097f4:	b2c0      	uxtb	r0, r0
 80097f6:	bd70      	pop	{r4, r5, r6, pc}

080097f8 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	4607      	mov	r7, r0
 80097fc:	460e      	mov	r6, r1
 80097fe:	4615      	mov	r5, r2
 8009800:	461c      	mov	r4, r3
    Pre_OtCmdProcessing();
 8009802:	f001 f87f 	bl	800a904 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009806:	f001 f84b 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800980a:	2300      	movs	r3, #0
 800980c:	f06f 023d 	mvn.w	r2, #61	; 0x3d
 8009810:	7002      	strb	r2, [r0, #0]
 8009812:	7043      	strb	r3, [r0, #1]
 8009814:	7083      	strb	r3, [r0, #2]
 8009816:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=4;
 8009818:	2204      	movs	r2, #4
 800981a:	7102      	strb	r2, [r0, #4]
 800981c:	7143      	strb	r3, [r0, #5]
 800981e:	7183      	strb	r3, [r0, #6]
 8009820:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8009822:	6087      	str	r7, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8009824:	60c6      	str	r6, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8009826:	6105      	str	r5, [r0, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 8009828:	6144      	str	r4, [r0, #20]

    Ot_Cmd_Transfer();
 800982a:	f001 f84b 	bl	800a8c4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800982e:	f001 f83d 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
    return (int)p_ot_req->Data[0];
}
 8009832:	6880      	ldr	r0, [r0, #8]
 8009834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009838 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	b082      	sub	sp, #8
    HAL_StatusTypeDef status = HAL_OK;

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800983c:	f001 f83c 	bl	800a8b8 <THREAD_Get_NotificationPayloadBuffer>

    switch(p_notification->ID)
 8009840:	6803      	ldr	r3, [r0, #0]
 8009842:	3b01      	subs	r3, #1
 8009844:	2b14      	cmp	r3, #20
 8009846:	f200 80e6 	bhi.w	8009a16 <OpenThread_CallBack_Processing+0x1de>
 800984a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800984e:	0015      	.short	0x0015
 8009850:	002b001f 	.word	0x002b001f
 8009854:	00440039 	.word	0x00440039
 8009858:	0059004e 	.word	0x0059004e
 800985c:	006d0063 	.word	0x006d0063
 8009860:	00810077 	.word	0x00810077
 8009864:	00e4008b 	.word	0x00e4008b
 8009868:	00a60097 	.word	0x00a60097
 800986c:	00bb00b1 	.word	0x00bb00b1
 8009870:	00d200c6 	.word	0x00d200c6
 8009874:	00db00e4 	.word	0x00db00e4
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8009878:	4b7a      	ldr	r3, [pc, #488]	; (8009a64 <OpenThread_CallBack_Processing+0x22c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 80cc 	beq.w	8009a1a <OpenThread_CallBack_Processing+0x1e2>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8009882:	68c1      	ldr	r1, [r0, #12]
 8009884:	6880      	ldr	r0, [r0, #8]
 8009886:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 8009888:	2400      	movs	r4, #0
 800988a:	e01f      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
                    (void*) p_notification->Data[1]);
        }
        break;
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 800988c:	6883      	ldr	r3, [r0, #8]
 800988e:	4a76      	ldr	r2, [pc, #472]	; (8009a68 <OpenThread_CallBack_Processing+0x230>)
 8009890:	6013      	str	r3, [r2, #0]

        if (coapRequestHandlerCb != NULL)
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80c3 	beq.w	8009a1e <OpenThread_CallBack_Processing+0x1e6>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8009898:	6942      	ldr	r2, [r0, #20]
 800989a:	6901      	ldr	r1, [r0, #16]
 800989c:	68c0      	ldr	r0, [r0, #12]
 800989e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 80098a0:	2400      	movs	r4, #0
 80098a2:	e013      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
                    (otMessage *) p_notification->Data[2],
                    (otMessageInfo *) p_notification->Data[3]);
        }
        break;
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 80098a4:	6884      	ldr	r4, [r0, #8]
 80098a6:	4b71      	ldr	r3, [pc, #452]	; (8009a6c <OpenThread_CallBack_Processing+0x234>)
 80098a8:	601c      	str	r4, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 80098aa:	2c00      	cmp	r4, #0
 80098ac:	f000 80b9 	beq.w	8009a22 <OpenThread_CallBack_Processing+0x1ea>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
                    (otMessage *) p_notification->Data[2],
                    (otMessageInfo *) p_notification->Data[3],
                    (otError) p_notification->Data[4]);
 80098b0:	6983      	ldr	r3, [r0, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	6942      	ldr	r2, [r0, #20]
 80098b6:	6901      	ldr	r1, [r0, #16]
 80098b8:	68c0      	ldr	r0, [r0, #12]
 80098ba:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 80098bc:	2400      	movs	r4, #0
 80098be:	e005      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        }
        break;
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 80098c0:	2001      	movs	r0, #1
 80098c2:	f000 f901 	bl	8009ac8 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 80098c6:	f7f9 f857 	bl	8002978 <HAL_NVIC_SystemReset>
    HAL_StatusTypeDef status = HAL_OK;
 80098ca:	2400      	movs	r4, #0
    default:
        status = HAL_ERROR;
        break;
    }

    TL_THREAD_SendAck();
 80098cc:	f000 fbc8 	bl	800a060 <TL_THREAD_SendAck>
    return status;

}
 80098d0:	4620      	mov	r0, r4
 80098d2:	b002      	add	sp, #8
 80098d4:	bd70      	pop	{r4, r5, r6, pc}
        if (otIp6ReceiveCb != NULL)
 80098d6:	4b66      	ldr	r3, [pc, #408]	; (8009a70 <OpenThread_CallBack_Processing+0x238>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 80a3 	beq.w	8009a26 <OpenThread_CallBack_Processing+0x1ee>
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80098e0:	68c1      	ldr	r1, [r0, #12]
 80098e2:	6880      	ldr	r0, [r0, #8]
 80098e4:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 80098e6:	2400      	movs	r4, #0
 80098e8:	e7f0      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (aIidCreateCb != NULL)
 80098ea:	4b62      	ldr	r3, [pc, #392]	; (8009a74 <OpenThread_CallBack_Processing+0x23c>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 809b 	beq.w	8009a2a <OpenThread_CallBack_Processing+0x1f2>
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80098f4:	68c2      	ldr	r2, [r0, #12]
 80098f6:	6881      	ldr	r1, [r0, #8]
 80098f8:	2000      	movs	r0, #0
 80098fa:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 80098fc:	2400      	movs	r4, #0
 80098fe:	e7e5      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otHandleActiveScanResultCb != NULL)
 8009900:	4b5d      	ldr	r3, [pc, #372]	; (8009a78 <OpenThread_CallBack_Processing+0x240>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 8092 	beq.w	8009a2e <OpenThread_CallBack_Processing+0x1f6>
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800990a:	68c1      	ldr	r1, [r0, #12]
 800990c:	6880      	ldr	r0, [r0, #8]
 800990e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 8009910:	2400      	movs	r4, #0
 8009912:	e7db      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otHandleEnergyScanResultCb != NULL)
 8009914:	4b59      	ldr	r3, [pc, #356]	; (8009a7c <OpenThread_CallBack_Processing+0x244>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 808a 	beq.w	8009a32 <OpenThread_CallBack_Processing+0x1fa>
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800991e:	68c1      	ldr	r1, [r0, #12]
 8009920:	6880      	ldr	r0, [r0, #8]
 8009922:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 8009924:	2400      	movs	r4, #0
 8009926:	e7d1      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otLinkPcapCb != NULL)
 8009928:	4b55      	ldr	r3, [pc, #340]	; (8009a80 <OpenThread_CallBack_Processing+0x248>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 8082 	beq.w	8009a36 <OpenThread_CallBack_Processing+0x1fe>
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8009932:	68c1      	ldr	r1, [r0, #12]
 8009934:	6880      	ldr	r0, [r0, #8]
 8009936:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 8009938:	2400      	movs	r4, #0
 800993a:	e7c7      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otReceiveDiagnosticGetCb != NULL)
 800993c:	4b51      	ldr	r3, [pc, #324]	; (8009a84 <OpenThread_CallBack_Processing+0x24c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d07a      	beq.n	8009a3a <OpenThread_CallBack_Processing+0x202>
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8009944:	6902      	ldr	r2, [r0, #16]
 8009946:	68c1      	ldr	r1, [r0, #12]
 8009948:	6880      	ldr	r0, [r0, #8]
 800994a:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800994c:	2400      	movs	r4, #0
 800994e:	e7bd      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otThreadChildTableCallbackCb != NULL)
 8009950:	4b4d      	ldr	r3, [pc, #308]	; (8009a88 <OpenThread_CallBack_Processing+0x250>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d072      	beq.n	8009a3e <OpenThread_CallBack_Processing+0x206>
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8009958:	6882      	ldr	r2, [r0, #8]
 800995a:	68c1      	ldr	r1, [r0, #12]
 800995c:	b2d0      	uxtb	r0, r2
 800995e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 8009960:	2400      	movs	r4, #0
 8009962:	e7b3      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otCommissionerEnergyReportCb != NULL)
 8009964:	4b49      	ldr	r3, [pc, #292]	; (8009a8c <OpenThread_CallBack_Processing+0x254>)
 8009966:	681c      	ldr	r4, [r3, #0]
 8009968:	2c00      	cmp	r4, #0
 800996a:	d06a      	beq.n	8009a42 <OpenThread_CallBack_Processing+0x20a>
                    (uint8_t) p_notification->Data[2],
 800996c:	6902      	ldr	r2, [r0, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800996e:	6943      	ldr	r3, [r0, #20]
 8009970:	b2d2      	uxtb	r2, r2
 8009972:	68c1      	ldr	r1, [r0, #12]
 8009974:	6880      	ldr	r0, [r0, #8]
 8009976:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 8009978:	2400      	movs	r4, #0
 800997a:	e7a7      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otDnsResponseHandlerCb != NULL)
 800997c:	4b44      	ldr	r3, [pc, #272]	; (8009a90 <OpenThread_CallBack_Processing+0x258>)
 800997e:	681d      	ldr	r5, [r3, #0]
 8009980:	2d00      	cmp	r5, #0
 8009982:	d060      	beq.n	8009a46 <OpenThread_CallBack_Processing+0x20e>
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8009984:	6886      	ldr	r6, [r0, #8]
                    (char*) p_notification->Data[1],
 8009986:	68c1      	ldr	r1, [r0, #12]
                    (otIp6Address*) p_notification->Data[2],
 8009988:	6902      	ldr	r2, [r0, #16]
                    (uint32_t) p_notification->Data[3],
 800998a:	6943      	ldr	r3, [r0, #20]
                    (otError) p_notification->Data[4]);
 800998c:	6984      	ldr	r4, [r0, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800998e:	b2e4      	uxtb	r4, r4
 8009990:	9400      	str	r4, [sp, #0]
 8009992:	4630      	mov	r0, r6
 8009994:	47a8      	blx	r5
    HAL_StatusTypeDef status = HAL_OK;
 8009996:	2400      	movs	r4, #0
 8009998:	e798      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otIcmp6ReceiveCb != NULL)
 800999a:	4b3e      	ldr	r3, [pc, #248]	; (8009a94 <OpenThread_CallBack_Processing+0x25c>)
 800999c:	681c      	ldr	r4, [r3, #0]
 800999e:	2c00      	cmp	r4, #0
 80099a0:	d053      	beq.n	8009a4a <OpenThread_CallBack_Processing+0x212>
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80099a2:	6943      	ldr	r3, [r0, #20]
 80099a4:	6902      	ldr	r2, [r0, #16]
 80099a6:	68c1      	ldr	r1, [r0, #12]
 80099a8:	6880      	ldr	r0, [r0, #8]
 80099aa:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 80099ac:	2400      	movs	r4, #0
 80099ae:	e78d      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otJoinerCb != NULL)
 80099b0:	4b39      	ldr	r3, [pc, #228]	; (8009a98 <OpenThread_CallBack_Processing+0x260>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d04a      	beq.n	8009a4e <OpenThread_CallBack_Processing+0x216>
            otJoinerCb((otError) p_notification->Data[0],
 80099b8:	6882      	ldr	r2, [r0, #8]
 80099ba:	68c1      	ldr	r1, [r0, #12]
 80099bc:	b2d0      	uxtb	r0, r2
 80099be:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 80099c0:	2400      	movs	r4, #0
 80099c2:	e783      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawReceiveDoneCb != NULL)
 80099c4:	4b35      	ldr	r3, [pc, #212]	; (8009a9c <OpenThread_CallBack_Processing+0x264>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d042      	beq.n	8009a52 <OpenThread_CallBack_Processing+0x21a>
                    (otError) p_notification->Data[2]);
 80099cc:	6902      	ldr	r2, [r0, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	68c1      	ldr	r1, [r0, #12]
 80099d2:	6880      	ldr	r0, [r0, #8]
 80099d4:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 80099d6:	2400      	movs	r4, #0
 80099d8:	e778      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawTransmitDoneCb != NULL)
 80099da:	4b31      	ldr	r3, [pc, #196]	; (8009aa0 <OpenThread_CallBack_Processing+0x268>)
 80099dc:	681c      	ldr	r4, [r3, #0]
 80099de:	2c00      	cmp	r4, #0
 80099e0:	d039      	beq.n	8009a56 <OpenThread_CallBack_Processing+0x21e>
                    (otError) p_notification->Data[3]);
 80099e2:	6943      	ldr	r3, [r0, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	6902      	ldr	r2, [r0, #16]
 80099e8:	68c1      	ldr	r1, [r0, #12]
 80099ea:	6880      	ldr	r0, [r0, #8]
 80099ec:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 80099ee:	2400      	movs	r4, #0
 80099f0:	e76c      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawEnergyScanDoneCb != NULL)
 80099f2:	4b2c      	ldr	r3, [pc, #176]	; (8009aa4 <OpenThread_CallBack_Processing+0x26c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	b383      	cbz	r3, 8009a5a <OpenThread_CallBack_Processing+0x222>
                    (int8_t) p_notification->Data[1]);
 80099f8:	68c1      	ldr	r1, [r0, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80099fa:	b249      	sxtb	r1, r1
 80099fc:	6880      	ldr	r0, [r0, #8]
 80099fe:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 8009a00:	2400      	movs	r4, #0
 8009a02:	e763      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        if (otUdpReceiveCb != NULL)
 8009a04:	4b28      	ldr	r3, [pc, #160]	; (8009aa8 <OpenThread_CallBack_Processing+0x270>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	b34b      	cbz	r3, 8009a5e <OpenThread_CallBack_Processing+0x226>
            otUdpReceiveCb((void*) p_notification->Data[0],
 8009a0a:	6902      	ldr	r2, [r0, #16]
 8009a0c:	68c1      	ldr	r1, [r0, #12]
 8009a0e:	6880      	ldr	r0, [r0, #8]
 8009a10:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 8009a12:	2400      	movs	r4, #0
 8009a14:	e75a      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
        status = HAL_ERROR;
 8009a16:	2401      	movs	r4, #1
 8009a18:	e758      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
    HAL_StatusTypeDef status = HAL_OK;
 8009a1a:	2400      	movs	r4, #0
 8009a1c:	e756      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a1e:	2400      	movs	r4, #0
 8009a20:	e754      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a22:	2400      	movs	r4, #0
 8009a24:	e752      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a26:	2400      	movs	r4, #0
 8009a28:	e750      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a2a:	2400      	movs	r4, #0
 8009a2c:	e74e      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a2e:	2400      	movs	r4, #0
 8009a30:	e74c      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a32:	2400      	movs	r4, #0
 8009a34:	e74a      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a36:	2400      	movs	r4, #0
 8009a38:	e748      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a3a:	2400      	movs	r4, #0
 8009a3c:	e746      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a3e:	2400      	movs	r4, #0
 8009a40:	e744      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a42:	2400      	movs	r4, #0
 8009a44:	e742      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a46:	2400      	movs	r4, #0
 8009a48:	e740      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a4a:	2400      	movs	r4, #0
 8009a4c:	e73e      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a4e:	2400      	movs	r4, #0
 8009a50:	e73c      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a52:	2400      	movs	r4, #0
 8009a54:	e73a      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a56:	2400      	movs	r4, #0
 8009a58:	e738      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a5a:	2400      	movs	r4, #0
 8009a5c:	e736      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a5e:	2400      	movs	r4, #0
 8009a60:	e734      	b.n	80098cc <OpenThread_CallBack_Processing+0x94>
 8009a62:	bf00      	nop
 8009a64:	20003df4 	.word	0x20003df4
 8009a68:	20003dbc 	.word	0x20003dbc
 8009a6c:	20003dc0 	.word	0x20003dc0
 8009a70:	20003dd8 	.word	0x20003dd8
 8009a74:	20003db8 	.word	0x20003db8
 8009a78:	20003dcc 	.word	0x20003dcc
 8009a7c:	20003dd0 	.word	0x20003dd0
 8009a80:	20003de0 	.word	0x20003de0
 8009a84:	20003df0 	.word	0x20003df0
 8009a88:	20003df8 	.word	0x20003df8
 8009a8c:	20003dc4 	.word	0x20003dc4
 8009a90:	20003dc8 	.word	0x20003dc8
 8009a94:	20003dd4 	.word	0x20003dd4
 8009a98:	20003ddc 	.word	0x20003ddc
 8009a9c:	20003de8 	.word	0x20003de8
 8009aa0:	20003dec 	.word	0x20003dec
 8009aa4:	20003de4 	.word	0x20003de4
 8009aa8:	20003dfc 	.word	0x20003dfc

08009aac <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8009aac:	b500      	push	{lr}
 8009aae:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8009ab0:	466b      	mov	r3, sp
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8009aba:	f000 f8e3 	bl	8009c84 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8009abe:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8009ac2:	b005      	add	sp, #20
 8009ac4:	f85d fb04 	ldr.w	pc, [sp], #4

08009ac8 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8009ac8:	b500      	push	{lr}
 8009aca:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  local_buffer[0] = Ip;
 8009acc:	aa04      	add	r2, sp, #16
 8009ace:	f802 0d10 	strb.w	r0, [r2, #-16]!

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8009ada:	f000 f8d3 	bl	8009c84 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8009ade:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8009ae2:	b005      	add	sp, #20
 8009ae4:	f85d fb04 	ldr.w	pc, [sp], #4

08009ae8 <SHCI_GetWirelessFwInfo>:
  MB_RefTable_t * p_RefTable = NULL;
  uint32_t version = 0;
  uint32_t memorySize = 0;
  uint32_t infoStack = 0;

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009ae8:	4b19      	ldr	r3, [pc, #100]	; (8009b50 <SHCI_GetWirelessFwInfo+0x68>)
 8009aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009af4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	6912      	ldr	r2, [r2, #16]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009afc:	0e11      	lsrs	r1, r2, #24
 8009afe:	7001      	strb	r1, [r0, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009b00:	0c11      	lsrs	r1, r2, #16
 8009b02:	7041      	strb	r1, [r0, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009b04:	0a11      	lsrs	r1, r2, #8
 8009b06:	7081      	strb	r1, [r0, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009b08:	f3c2 1103 	ubfx	r1, r2, #4, #4
 8009b0c:	70c1      	strb	r1, [r0, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009b0e:	f002 020f 	and.w	r2, r2, #15
 8009b12:	7102      	strb	r2, [r0, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	6952      	ldr	r2, [r2, #20]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009b18:	0e11      	lsrs	r1, r2, #24
 8009b1a:	7141      	strb	r1, [r0, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009b1c:	0c11      	lsrs	r1, r2, #16
 8009b1e:	7181      	strb	r1, [r0, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009b20:	0a11      	lsrs	r1, r2, #8
 8009b22:	71c1      	strb	r1, [r0, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009b24:	7202      	strb	r2, [r0, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	6992      	ldr	r2, [r2, #24]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009b2a:	7242      	strb	r2, [r0, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	6852      	ldr	r2, [r2, #4]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009b30:	0e11      	lsrs	r1, r2, #24
 8009b32:	7281      	strb	r1, [r0, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009b34:	0c11      	lsrs	r1, r2, #16
 8009b36:	72c1      	strb	r1, [r0, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009b38:	0a12      	lsrs	r2, r2, #8
 8009b3a:	7302      	strb	r2, [r0, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	689b      	ldr	r3, [r3, #8]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009b40:	0e1a      	lsrs	r2, r3, #24
 8009b42:	7342      	strb	r2, [r0, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009b44:	0c1a      	lsrs	r2, r3, #16
 8009b46:	7382      	strb	r2, [r0, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009b48:	73c3      	strb	r3, [r0, #15]

  return (SHCI_Success);
}
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	58004000 	.word	0x58004000

08009b54 <Cmd_SetStatus>:

  return;
}

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009b54:	b508      	push	{r3, lr}
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009b56:	b938      	cbnz	r0, 8009b68 <Cmd_SetStatus+0x14>
  {
    if(StatusNotCallBackFunction != 0)
 8009b58:	4b08      	ldr	r3, [pc, #32]	; (8009b7c <Cmd_SetStatus+0x28>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	b103      	cbz	r3, 8009b60 <Cmd_SetStatus+0xc>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009b5e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <Cmd_SetStatus+0x2c>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	701a      	strb	r2, [r3, #0]
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
}
 8009b66:	bd08      	pop	{r3, pc}
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009b68:	4b05      	ldr	r3, [pc, #20]	; (8009b80 <Cmd_SetStatus+0x2c>)
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009b6e:	4b03      	ldr	r3, [pc, #12]	; (8009b7c <Cmd_SetStatus+0x28>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0f7      	beq.n	8009b66 <Cmd_SetStatus+0x12>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009b76:	4610      	mov	r0, r2
 8009b78:	4798      	blx	r3
  return;
 8009b7a:	e7f4      	b.n	8009b66 <Cmd_SetStatus+0x12>
 8009b7c:	20003e00 	.word	0x20003e00
 8009b80:	20000104 	.word	0x20000104

08009b84 <TlInit>:
{
 8009b84:	b530      	push	{r4, r5, lr}
 8009b86:	b085      	sub	sp, #20
 8009b88:	4605      	mov	r5, r0
  pCmdBuffer = p_cmdbuffer;
 8009b8a:	4c0b      	ldr	r4, [pc, #44]	; (8009bb8 <TlInit+0x34>)
 8009b8c:	6060      	str	r0, [r4, #4]
  LST_init_head (&SHciAsynchEventQueue);
 8009b8e:	f104 0008 	add.w	r0, r4, #8
 8009b92:	f000 f8ad 	bl	8009cf0 <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009b96:	2001      	movs	r0, #1
 8009b98:	f7ff ffdc 	bl	8009b54 <Cmd_SetStatus>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	7423      	strb	r3, [r4, #16]
  if (shciContext.io.Init)
 8009ba0:	4b06      	ldr	r3, [pc, #24]	; (8009bbc <TlInit+0x38>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	b133      	cbz	r3, 8009bb4 <TlInit+0x30>
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009ba6:	9503      	str	r5, [sp, #12]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009ba8:	4a05      	ldr	r2, [pc, #20]	; (8009bc0 <TlInit+0x3c>)
 8009baa:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009bac:	4a05      	ldr	r2, [pc, #20]	; (8009bc4 <TlInit+0x40>)
 8009bae:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 8009bb0:	a801      	add	r0, sp, #4
 8009bb2:	4798      	blx	r3
}
 8009bb4:	b005      	add	sp, #20
 8009bb6:	bd30      	pop	{r4, r5, pc}
 8009bb8:	20000104 	.word	0x20000104
 8009bbc:	20003e04 	.word	0x20003e04
 8009bc0:	08009be1 	.word	0x08009be1
 8009bc4:	08009bc9 	.word	0x08009bc9

08009bc8 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009bc8:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009bca:	4c04      	ldr	r4, [pc, #16]	; (8009bdc <TlUserEvtReceived+0x14>)
 8009bcc:	4601      	mov	r1, r0
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 f8a9 	bl	8009d26 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f7f6 fd9f 	bl	8000718 <shci_notify_asynch_evt>

  return;
}
 8009bda:	bd10      	pop	{r4, pc}
 8009bdc:	2000010c 	.word	0x2000010c

08009be0 <TlCmdEvtReceived>:
{
 8009be0:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009be2:	2000      	movs	r0, #0
 8009be4:	f7f6 fda2 	bl	800072c <shci_cmd_resp_release>
}
 8009be8:	bd08      	pop	{r3, pc}
	...

08009bec <shci_init>:
{
 8009bec:	b510      	push	{r4, lr}
 8009bee:	460c      	mov	r4, r1
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009bf0:	684a      	ldr	r2, [r1, #4]
 8009bf2:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <shci_init+0x1c>)
 8009bf4:	601a      	str	r2, [r3, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009bf6:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <shci_init+0x20>)
 8009bf8:	61d8      	str	r0, [r3, #28]
  shci_register_io_bus (&shciContext.io);
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f86e 	bl	8009cdc <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009c00:	6820      	ldr	r0, [r4, #0]
 8009c02:	f7ff ffbf 	bl	8009b84 <TlInit>
}
 8009c06:	bd10      	pop	{r4, pc}
 8009c08:	20003e00 	.word	0x20003e00
 8009c0c:	20003e04 	.word	0x20003e04

08009c10 <shci_user_evt_proc>:
{
 8009c10:	b510      	push	{r4, lr}
 8009c12:	b084      	sub	sp, #16
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009c14:	4818      	ldr	r0, [pc, #96]	; (8009c78 <shci_user_evt_proc+0x68>)
 8009c16:	f000 f86e 	bl	8009cf6 <LST_is_empty>
 8009c1a:	b910      	cbnz	r0, 8009c22 <shci_user_evt_proc+0x12>
 8009c1c:	4b17      	ldr	r3, [pc, #92]	; (8009c7c <shci_user_evt_proc+0x6c>)
 8009c1e:	7c1b      	ldrb	r3, [r3, #16]
 8009c20:	b943      	cbnz	r3, 8009c34 <shci_user_evt_proc+0x24>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009c22:	4815      	ldr	r0, [pc, #84]	; (8009c78 <shci_user_evt_proc+0x68>)
 8009c24:	f000 f867 	bl	8009cf6 <LST_is_empty>
 8009c28:	b910      	cbnz	r0, 8009c30 <shci_user_evt_proc+0x20>
 8009c2a:	4b14      	ldr	r3, [pc, #80]	; (8009c7c <shci_user_evt_proc+0x6c>)
 8009c2c:	7c1b      	ldrb	r3, [r3, #16]
 8009c2e:	b9fb      	cbnz	r3, 8009c70 <shci_user_evt_proc+0x60>
}
 8009c30:	b004      	add	sp, #16
 8009c32:	bd10      	pop	{r4, pc}
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009c34:	4c11      	ldr	r4, [pc, #68]	; (8009c7c <shci_user_evt_proc+0x6c>)
 8009c36:	a903      	add	r1, sp, #12
 8009c38:	f104 0008 	add.w	r0, r4, #8
 8009c3c:	f000 f88b 	bl	8009d56 <LST_remove_head>
    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009c40:	2301      	movs	r3, #1
 8009c42:	7423      	strb	r3, [r4, #16]
    if (shciContext.UserEvtRx != NULL)
 8009c44:	4b0e      	ldr	r3, [pc, #56]	; (8009c80 <shci_user_evt_proc+0x70>)
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	b133      	cbz	r3, 8009c58 <shci_user_evt_proc+0x48>
      UserEvtRxParam.pckt = phcievtbuffer;
 8009c4a:	9a03      	ldr	r2, [sp, #12]
 8009c4c:	9202      	str	r2, [sp, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009c4e:	a801      	add	r0, sp, #4
 8009c50:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009c52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009c56:	7422      	strb	r2, [r4, #16]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009c58:	4b08      	ldr	r3, [pc, #32]	; (8009c7c <shci_user_evt_proc+0x6c>)
 8009c5a:	7c1b      	ldrb	r3, [r3, #16]
 8009c5c:	b11b      	cbz	r3, 8009c66 <shci_user_evt_proc+0x56>
      TL_MM_EvtDone( phcievtbuffer );
 8009c5e:	9803      	ldr	r0, [sp, #12]
 8009c60:	f000 fa54 	bl	800a10c <TL_MM_EvtDone>
 8009c64:	e7dd      	b.n	8009c22 <shci_user_evt_proc+0x12>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009c66:	9903      	ldr	r1, [sp, #12]
 8009c68:	4803      	ldr	r0, [pc, #12]	; (8009c78 <shci_user_evt_proc+0x68>)
 8009c6a:	f000 f850 	bl	8009d0e <LST_insert_head>
 8009c6e:	e7d8      	b.n	8009c22 <shci_user_evt_proc+0x12>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009c70:	4801      	ldr	r0, [pc, #4]	; (8009c78 <shci_user_evt_proc+0x68>)
 8009c72:	f7f6 fd51 	bl	8000718 <shci_notify_asynch_evt>
  return;
 8009c76:	e7db      	b.n	8009c30 <shci_user_evt_proc+0x20>
 8009c78:	2000010c 	.word	0x2000010c
 8009c7c:	20000104 	.word	0x20000104
 8009c80:	20003e04 	.word	0x20003e04

08009c84 <shci_send>:
{
 8009c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c88:	4680      	mov	r8, r0
 8009c8a:	460d      	mov	r5, r1
 8009c8c:	4617      	mov	r7, r2
 8009c8e:	461e      	mov	r6, r3
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009c90:	2000      	movs	r0, #0
 8009c92:	f7ff ff5f 	bl	8009b54 <Cmd_SetStatus>
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009c96:	4c0f      	ldr	r4, [pc, #60]	; (8009cd4 <shci_send+0x50>)
 8009c98:	6860      	ldr	r0, [r4, #4]
 8009c9a:	f8a0 8009 	strh.w	r8, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009c9e:	72c5      	strb	r5, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009ca0:	462a      	mov	r2, r5
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	300c      	adds	r0, #12
 8009ca6:	f001 f883 	bl	800adb0 <memcpy>
  shciContext.io.Send(0,0);
 8009caa:	4b0b      	ldr	r3, [pc, #44]	; (8009cd8 <shci_send+0x54>)
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	2100      	movs	r1, #0
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009cb4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009cb8:	f7f6 fd40 	bl	800073c <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009cbc:	6861      	ldr	r1, [r4, #4]
 8009cbe:	788a      	ldrb	r2, [r1, #2]
 8009cc0:	3203      	adds	r2, #3
 8009cc2:	f106 0008 	add.w	r0, r6, #8
 8009cc6:	f001 f873 	bl	800adb0 <memcpy>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009cca:	2001      	movs	r0, #1
 8009ccc:	f7ff ff42 	bl	8009b54 <Cmd_SetStatus>
}
 8009cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd4:	20000104 	.word	0x20000104
 8009cd8:	20003e04 	.word	0x20003e04

08009cdc <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009cdc:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <shci_register_io_bus+0xc>)
 8009cde:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009ce0:	4b02      	ldr	r3, [pc, #8]	; (8009cec <shci_register_io_bus+0x10>)
 8009ce2:	6103      	str	r3, [r0, #16]

  return;
}
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	08009f79 	.word	0x08009f79
 8009cec:	08009fb5 	.word	0x08009fb5

08009cf0 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8009cf0:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 8009cf2:	6040      	str	r0, [r0, #4]
}
 8009cf4:	4770      	bx	lr

08009cf6 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cf6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009cfa:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009cfc:	6802      	ldr	r2, [r0, #0]
 8009cfe:	4282      	cmp	r2, r0
 8009d00:	d003      	beq.n	8009d0a <LST_is_empty+0x14>
  {
    return_value = TRUE;
  }
  else
  {
    return_value = FALSE;
 8009d02:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d04:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8009d08:	4770      	bx	lr
    return_value = TRUE;
 8009d0a:	2001      	movs	r0, #1
 8009d0c:	e7fa      	b.n	8009d04 <LST_is_empty+0xe>

08009d0e <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d0e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009d12:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009d14:	6802      	ldr	r2, [r0, #0]
 8009d16:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8009d18:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8009d1a:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8009d1c:	680a      	ldr	r2, [r1, #0]
 8009d1e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d20:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009d24:	4770      	bx	lr

08009d26 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d26:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009d2a:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009d2c:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8009d2e:	6842      	ldr	r2, [r0, #4]
 8009d30:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8009d32:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8009d34:	684a      	ldr	r2, [r1, #4]
 8009d36:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d38:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009d3c:	4770      	bx	lr

08009d3e <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d3e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009d42:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009d44:	6842      	ldr	r2, [r0, #4]
 8009d46:	6801      	ldr	r1, [r0, #0]
 8009d48:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 8009d4a:	6802      	ldr	r2, [r0, #0]
 8009d4c:	6841      	ldr	r1, [r0, #4]
 8009d4e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d50:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009d54:	4770      	bx	lr

08009d56 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009d56:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d58:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009d5c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009d5e:	6803      	ldr	r3, [r0, #0]
 8009d60:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 8009d62:	6800      	ldr	r0, [r0, #0]
 8009d64:	f7ff ffeb 	bl	8009d3e <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d68:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009d6c:	bd10      	pop	{r4, pc}

08009d6e <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8009d6e:	b510      	push	{r4, lr}
 8009d70:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 8009d72:	f000 fdc7 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d76:	f000 fd93 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	2242      	movs	r2, #66	; 0x42
 8009d7e:	7002      	strb	r2, [r0, #0]
 8009d80:	7043      	strb	r3, [r0, #1]
 8009d82:	7083      	strb	r3, [r0, #2]
 8009d84:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 8009d86:	2201      	movs	r2, #1
 8009d88:	7102      	strb	r2, [r0, #4]
 8009d8a:	7143      	strb	r3, [r0, #5]
 8009d8c:	7183      	strb	r3, [r0, #6]
 8009d8e:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8009d90:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 8009d92:	f000 fd97 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009d96:	f000 fd89 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 8009d9a:	6880      	ldr	r0, [r0, #8]
}
 8009d9c:	b2c0      	uxtb	r0, r0
 8009d9e:	bd10      	pop	{r4, pc}

08009da0 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 8009da0:	b510      	push	{r4, lr}
 8009da2:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 8009da4:	f000 fdae 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009da8:	f000 fd7a 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 8009dac:	2300      	movs	r3, #0
 8009dae:	224b      	movs	r2, #75	; 0x4b
 8009db0:	7002      	strb	r2, [r0, #0]
 8009db2:	7043      	strb	r3, [r0, #1]
 8009db4:	7083      	strb	r3, [r0, #2]
 8009db6:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 8009db8:	2201      	movs	r2, #1
 8009dba:	7102      	strb	r2, [r0, #4]
 8009dbc:	7143      	strb	r3, [r0, #5]
 8009dbe:	7183      	strb	r3, [r0, #6]
 8009dc0:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 8009dc2:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 8009dc4:	f000 fd7e 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009dc8:	f000 fd70 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 8009dcc:	6880      	ldr	r0, [r0, #8]
}
 8009dce:	b2c0      	uxtb	r0, r0
 8009dd0:	bd10      	pop	{r4, pc}

08009dd2 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 8009dd2:	b510      	push	{r4, lr}
 8009dd4:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 8009dd6:	f000 fd95 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009dda:	f000 fd61 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 8009dde:	2300      	movs	r3, #0
 8009de0:	2250      	movs	r2, #80	; 0x50
 8009de2:	7002      	strb	r2, [r0, #0]
 8009de4:	7043      	strb	r3, [r0, #1]
 8009de6:	7083      	strb	r3, [r0, #2]
 8009de8:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 8009dea:	2201      	movs	r2, #1
 8009dec:	7102      	strb	r2, [r0, #4]
 8009dee:	7143      	strb	r3, [r0, #5]
 8009df0:	7183      	strb	r3, [r0, #6]
 8009df2:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8009df4:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 8009df6:	f000 fd65 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009dfa:	f000 fd57 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 8009dfe:	6880      	ldr	r0, [r0, #8]
}
 8009e00:	b2c0      	uxtb	r0, r0
 8009e02:	bd10      	pop	{r4, pc}

08009e04 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 8009e04:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 8009e06:	f000 fd7d 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e0a:	f000 fd49 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	2251      	movs	r2, #81	; 0x51
 8009e12:	7002      	strb	r2, [r0, #0]
 8009e14:	7043      	strb	r3, [r0, #1]
 8009e16:	7083      	strb	r3, [r0, #2]
 8009e18:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 8009e1a:	7103      	strb	r3, [r0, #4]
 8009e1c:	7143      	strb	r3, [r0, #5]
 8009e1e:	7183      	strb	r3, [r0, #6]
 8009e20:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 8009e22:	f000 fd4f 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e26:	f000 fd41 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otIp6Address *)p_ot_req->Data[0];
}
 8009e2a:	6880      	ldr	r0, [r0, #8]
 8009e2c:	bd08      	pop	{r3, pc}

08009e2e <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8009e2e:	b510      	push	{r4, lr}
 8009e30:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 8009e32:	f000 fd67 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e36:	f000 fd33 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	2256      	movs	r2, #86	; 0x56
 8009e3e:	7002      	strb	r2, [r0, #0]
 8009e40:	7043      	strb	r3, [r0, #1]
 8009e42:	7083      	strb	r3, [r0, #2]
 8009e44:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 8009e46:	2201      	movs	r2, #1
 8009e48:	7102      	strb	r2, [r0, #4]
 8009e4a:	7143      	strb	r3, [r0, #5]
 8009e4c:	7183      	strb	r3, [r0, #6]
 8009e4e:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8009e50:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 8009e52:	f000 fd37 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e56:	f000 fd29 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 8009e5a:	6880      	ldr	r0, [r0, #8]
}
 8009e5c:	b2c0      	uxtb	r0, r0
 8009e5e:	bd10      	pop	{r4, pc}

08009e60 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8009e60:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 8009e62:	f000 fd4f 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e66:	f000 fd1b 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	225e      	movs	r2, #94	; 0x5e
 8009e6e:	7002      	strb	r2, [r0, #0]
 8009e70:	7043      	strb	r3, [r0, #1]
 8009e72:	7083      	strb	r3, [r0, #2]
 8009e74:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 8009e76:	7103      	strb	r3, [r0, #4]
 8009e78:	7143      	strb	r3, [r0, #5]
 8009e7a:	7183      	strb	r3, [r0, #6]
 8009e7c:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 8009e7e:	f000 fd21 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e82:	f000 fd13 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otDeviceRole)p_ot_req->Data[0];
 8009e86:	6880      	ldr	r0, [r0, #8]
}
 8009e88:	b2c0      	uxtb	r0, r0
 8009e8a:	bd08      	pop	{r3, pc}

08009e8c <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 8009e8c:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 8009e8e:	f000 fd39 	bl	800a904 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e92:	f000 fd05 	bl	800a8a0 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 8009e96:	2300      	movs	r3, #0
 8009e98:	2263      	movs	r2, #99	; 0x63
 8009e9a:	7002      	strb	r2, [r0, #0]
 8009e9c:	7043      	strb	r3, [r0, #1]
 8009e9e:	7083      	strb	r3, [r0, #2]
 8009ea0:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 8009ea2:	7103      	strb	r3, [r0, #4]
 8009ea4:	7143      	strb	r3, [r0, #5]
 8009ea6:	7183      	strb	r3, [r0, #6]
 8009ea8:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 8009eaa:	f000 fd0b 	bl	800a8c4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009eae:	f000 fcfd 	bl	800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>
  return (uint16_t)p_ot_req->Data[0];
 8009eb2:	6880      	ldr	r0, [r0, #8]
}
 8009eb4:	b280      	uxth	r0, r0
 8009eb6:	bd08      	pop	{r3, pc}

08009eb8 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 8009eb8:	b500      	push	{lr}
 8009eba:	b083      	sub	sp, #12
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009ebc:	e009      	b.n	8009ed2 <SendFreeBuf+0x1a>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009ebe:	a901      	add	r1, sp, #4
 8009ec0:	4808      	ldr	r0, [pc, #32]	; (8009ee4 <SendFreeBuf+0x2c>)
 8009ec2:	f7ff ff48 	bl	8009d56 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009ec6:	4b08      	ldr	r3, [pc, #32]	; (8009ee8 <SendFreeBuf+0x30>)
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	9901      	ldr	r1, [sp, #4]
 8009ecc:	6918      	ldr	r0, [r3, #16]
 8009ece:	f7ff ff2a 	bl	8009d26 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009ed2:	4804      	ldr	r0, [pc, #16]	; (8009ee4 <SendFreeBuf+0x2c>)
 8009ed4:	f7ff ff0f 	bl	8009cf6 <LST_is_empty>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d0f0      	beq.n	8009ebe <SendFreeBuf+0x6>
  }

  return;
}
 8009edc:	b003      	add	sp, #12
 8009ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ee2:	bf00      	nop
 8009ee4:	20003e2c 	.word	0x20003e2c
 8009ee8:	20030000 	.word	0x20030000

08009eec <TL_Enable>:
{
 8009eec:	b508      	push	{r3, lr}
  HW_IPCC_Enable();
 8009eee:	f000 fdad 	bl	800aa4c <HW_IPCC_Enable>
}
 8009ef2:	bd08      	pop	{r3, pc}

08009ef4 <TL_Init>:
{
 8009ef4:	b508      	push	{r3, lr}
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009ef6:	4a0e      	ldr	r2, [pc, #56]	; (8009f30 <TL_Init+0x3c>)
 8009ef8:	4b0e      	ldr	r3, [pc, #56]	; (8009f34 <TL_Init+0x40>)
 8009efa:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009efc:	f103 0120 	add.w	r1, r3, #32
 8009f00:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009f02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f06:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009f08:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009f0c:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009f0e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8009f12:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009f14:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8009f18:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009f1a:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8009f1e:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009f20:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8009f24:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009f26:	3378      	adds	r3, #120	; 0x78
 8009f28:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 8009f2a:	f000 fd99 	bl	800aa60 <HW_IPCC_Init>
}
 8009f2e:	bd08      	pop	{r3, pc}
 8009f30:	20030000 	.word	0x20030000
 8009f34:	20030024 	.word	0x20030024

08009f38 <HW_IPCC_BLE_RxEvtNot>:
{
 8009f38:	b500      	push	{lr}
 8009f3a:	b083      	sub	sp, #12
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009f3c:	e007      	b.n	8009f4e <HW_IPCC_BLE_RxEvtNot+0x16>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009f3e:	a901      	add	r1, sp, #4
 8009f40:	4807      	ldr	r0, [pc, #28]	; (8009f60 <HW_IPCC_BLE_RxEvtNot+0x28>)
 8009f42:	f7ff ff08 	bl	8009d56 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 8009f46:	4b07      	ldr	r3, [pc, #28]	; (8009f64 <HW_IPCC_BLE_RxEvtNot+0x2c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	9801      	ldr	r0, [sp, #4]
 8009f4c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009f4e:	4804      	ldr	r0, [pc, #16]	; (8009f60 <HW_IPCC_BLE_RxEvtNot+0x28>)
 8009f50:	f7ff fed1 	bl	8009cf6 <LST_is_empty>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d0f2      	beq.n	8009f3e <HW_IPCC_BLE_RxEvtNot+0x6>
}
 8009f58:	b003      	add	sp, #12
 8009f5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f5e:	bf00      	nop
 8009f60:	20030818 	.word	0x20030818
 8009f64:	20003e28 	.word	0x20003e28

08009f68 <HW_IPCC_BLE_AclDataAckNot>:
{
 8009f68:	b508      	push	{r3, lr}
  BLE_IoBusAclDataTxAck( );
 8009f6a:	4b02      	ldr	r3, [pc, #8]	; (8009f74 <HW_IPCC_BLE_AclDataAckNot+0xc>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4798      	blx	r3
}
 8009f70:	bd08      	pop	{r3, pc}
 8009f72:	bf00      	nop
 8009f74:	20003e24 	.word	0x20003e24

08009f78 <TL_SYS_Init>:
{
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 8009f7c:	4d09      	ldr	r5, [pc, #36]	; (8009fa4 <TL_SYS_Init+0x2c>)
 8009f7e:	4628      	mov	r0, r5
 8009f80:	f7ff feb6 	bl	8009cf0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009f84:	4b08      	ldr	r3, [pc, #32]	; (8009fa8 <TL_SYS_Init+0x30>)
 8009f86:	68db      	ldr	r3, [r3, #12]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009f88:	68a2      	ldr	r2, [r4, #8]
 8009f8a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009f8c:	605d      	str	r5, [r3, #4]
  HW_IPCC_SYS_Init();
 8009f8e:	f000 fd9f 	bl	800aad0 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009f92:	6822      	ldr	r2, [r4, #0]
 8009f94:	4b05      	ldr	r3, [pc, #20]	; (8009fac <TL_SYS_Init+0x34>)
 8009f96:	601a      	str	r2, [r3, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009f98:	6862      	ldr	r2, [r4, #4]
 8009f9a:	4b05      	ldr	r3, [pc, #20]	; (8009fb0 <TL_SYS_Init+0x38>)
 8009f9c:	601a      	str	r2, [r3, #0]
}
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	bd38      	pop	{r3, r4, r5, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20030830 	.word	0x20030830
 8009fa8:	20030000 	.word	0x20030000
 8009fac:	20003e34 	.word	0x20003e34
 8009fb0:	20003e38 	.word	0x20003e38

08009fb4 <TL_SYS_SendCmd>:
{
 8009fb4:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009fb6:	4b04      	ldr	r3, [pc, #16]	; (8009fc8 <TL_SYS_SendCmd+0x14>)
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2210      	movs	r2, #16
 8009fbe:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 8009fc0:	f000 fd8e 	bl	800aae0 <HW_IPCC_SYS_SendCmd>
}
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	bd08      	pop	{r3, pc}
 8009fc8:	20030000 	.word	0x20030000

08009fcc <HW_IPCC_SYS_CmdEvtNot>:
{
 8009fcc:	b508      	push	{r3, lr}
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009fce:	4b03      	ldr	r3, [pc, #12]	; (8009fdc <HW_IPCC_SYS_CmdEvtNot+0x10>)
 8009fd0:	68da      	ldr	r2, [r3, #12]
 8009fd2:	4b03      	ldr	r3, [pc, #12]	; (8009fe0 <HW_IPCC_SYS_CmdEvtNot+0x14>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6810      	ldr	r0, [r2, #0]
 8009fd8:	4798      	blx	r3
}
 8009fda:	bd08      	pop	{r3, pc}
 8009fdc:	20030000 	.word	0x20030000
 8009fe0:	20003e34 	.word	0x20003e34

08009fe4 <HW_IPCC_SYS_EvtNot>:
{
 8009fe4:	b500      	push	{lr}
 8009fe6:	b083      	sub	sp, #12
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009fe8:	e007      	b.n	8009ffa <HW_IPCC_SYS_EvtNot+0x16>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009fea:	a901      	add	r1, sp, #4
 8009fec:	4807      	ldr	r0, [pc, #28]	; (800a00c <HW_IPCC_SYS_EvtNot+0x28>)
 8009fee:	f7ff feb2 	bl	8009d56 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009ff2:	4b07      	ldr	r3, [pc, #28]	; (800a010 <HW_IPCC_SYS_EvtNot+0x2c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	9801      	ldr	r0, [sp, #4]
 8009ff8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009ffa:	4804      	ldr	r0, [pc, #16]	; (800a00c <HW_IPCC_SYS_EvtNot+0x28>)
 8009ffc:	f7ff fe7b 	bl	8009cf6 <LST_is_empty>
 800a000:	2800      	cmp	r0, #0
 800a002:	d0f2      	beq.n	8009fea <HW_IPCC_SYS_EvtNot+0x6>
}
 800a004:	b003      	add	sp, #12
 800a006:	f85d fb04 	ldr.w	pc, [sp], #4
 800a00a:	bf00      	nop
 800a00c:	20030830 	.word	0x20030830
 800a010:	20003e38 	.word	0x20003e38

0800a014 <TL_THREAD_Init>:
{
 800a014:	b508      	push	{r3, lr}
  p_thread_table = TL_RefTable.p_thread_table;
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <TL_THREAD_Init+0x18>)
 800a018:	689b      	ldr	r3, [r3, #8]
  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800a01a:	6842      	ldr	r2, [r0, #4]
 800a01c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800a01e:	6802      	ldr	r2, [r0, #0]
 800a020:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800a022:	6882      	ldr	r2, [r0, #8]
 800a024:	601a      	str	r2, [r3, #0]
  HW_IPCC_THREAD_Init();
 800a026:	f000 fd7d 	bl	800ab24 <HW_IPCC_THREAD_Init>
}
 800a02a:	bd08      	pop	{r3, pc}
 800a02c:	20030000 	.word	0x20030000

0800a030 <TL_OT_SendCmd>:
{
 800a030:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800a032:	4b04      	ldr	r3, [pc, #16]	; (800a044 <TL_OT_SendCmd+0x14>)
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	2208      	movs	r2, #8
 800a03a:	721a      	strb	r2, [r3, #8]
  HW_IPCC_OT_SendCmd();
 800a03c:	f000 fd7e 	bl	800ab3c <HW_IPCC_OT_SendCmd>
}
 800a040:	bd08      	pop	{r3, pc}
 800a042:	bf00      	nop
 800a044:	20030000 	.word	0x20030000

0800a048 <TL_CLI_SendCmd>:
{
 800a048:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800a04a:	4b04      	ldr	r3, [pc, #16]	; (800a05c <TL_CLI_SendCmd+0x14>)
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	220a      	movs	r2, #10
 800a052:	721a      	strb	r2, [r3, #8]
  HW_IPCC_CLI_SendCmd();
 800a054:	f000 fd7e 	bl	800ab54 <HW_IPCC_CLI_SendCmd>
}
 800a058:	bd08      	pop	{r3, pc}
 800a05a:	bf00      	nop
 800a05c:	20030000 	.word	0x20030000

0800a060 <TL_THREAD_SendAck>:
{
 800a060:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a062:	4b04      	ldr	r3, [pc, #16]	; (800a074 <TL_THREAD_SendAck+0x14>)
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	220d      	movs	r2, #13
 800a06a:	721a      	strb	r2, [r3, #8]
  HW_IPCC_THREAD_SendAck();
 800a06c:	f000 fd7a 	bl	800ab64 <HW_IPCC_THREAD_SendAck>
}
 800a070:	bd08      	pop	{r3, pc}
 800a072:	bf00      	nop
 800a074:	20030000 	.word	0x20030000

0800a078 <TL_THREAD_CliSendAck>:
{
 800a078:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a07a:	4b04      	ldr	r3, [pc, #16]	; (800a08c <TL_THREAD_CliSendAck+0x14>)
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	220d      	movs	r2, #13
 800a082:	721a      	strb	r2, [r3, #8]
  HW_IPCC_THREAD_CliSendAck();
 800a084:	f000 fd78 	bl	800ab78 <HW_IPCC_THREAD_CliSendAck>
}
 800a088:	bd08      	pop	{r3, pc}
 800a08a:	bf00      	nop
 800a08c:	20030000 	.word	0x20030000

0800a090 <HW_IPCC_OT_CmdEvtNot>:
{
 800a090:	b508      	push	{r3, lr}
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800a092:	4b03      	ldr	r3, [pc, #12]	; (800a0a0 <HW_IPCC_OT_CmdEvtNot+0x10>)
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	6898      	ldr	r0, [r3, #8]
 800a098:	f000 fc28 	bl	800a8ec <TL_OT_CmdEvtReceived>
}
 800a09c:	bd08      	pop	{r3, pc}
 800a09e:	bf00      	nop
 800a0a0:	20030000 	.word	0x20030000

0800a0a4 <HW_IPCC_THREAD_EvtNot>:
{
 800a0a4:	b508      	push	{r3, lr}
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800a0a6:	4b03      	ldr	r3, [pc, #12]	; (800a0b4 <HW_IPCC_THREAD_EvtNot+0x10>)
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	f000 fc22 	bl	800a8f4 <TL_THREAD_NotReceived>
}
 800a0b0:	bd08      	pop	{r3, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20030000 	.word	0x20030000

0800a0b8 <HW_IPCC_THREAD_CliEvtNot>:
{
 800a0b8:	b508      	push	{r3, lr}
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800a0ba:	4b03      	ldr	r3, [pc, #12]	; (800a0c8 <HW_IPCC_THREAD_CliEvtNot+0x10>)
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	6858      	ldr	r0, [r3, #4]
 800a0c0:	f000 fc72 	bl	800a9a8 <TL_THREAD_CliNotReceived>
}
 800a0c4:	bd08      	pop	{r3, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20030000 	.word	0x20030000

0800a0cc <TL_MM_Init>:
{
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 800a0d0:	4d0b      	ldr	r5, [pc, #44]	; (800a100 <TL_MM_Init+0x34>)
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f7ff fe0c 	bl	8009cf0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a0d8:	480a      	ldr	r0, [pc, #40]	; (800a104 <TL_MM_Init+0x38>)
 800a0da:	f7ff fe09 	bl	8009cf0 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a0de:	4b0a      	ldr	r3, [pc, #40]	; (800a108 <TL_MM_Init+0x3c>)
 800a0e0:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a0e2:	68a2      	ldr	r2, [r4, #8]
 800a0e4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a0e6:	68e2      	ldr	r2, [r4, #12]
 800a0e8:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a0ea:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a0ec:	6822      	ldr	r2, [r4, #0]
 800a0ee:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a0f0:	6862      	ldr	r2, [r4, #4]
 800a0f2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a0f4:	6922      	ldr	r2, [r4, #16]
 800a0f6:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a0f8:	6962      	ldr	r2, [r4, #20]
 800a0fa:	619a      	str	r2, [r3, #24]
}
 800a0fc:	bd38      	pop	{r3, r4, r5, pc}
 800a0fe:	bf00      	nop
 800a100:	200300a8 	.word	0x200300a8
 800a104:	20003e2c 	.word	0x20003e2c
 800a108:	20030000 	.word	0x20030000

0800a10c <TL_MM_EvtDone>:
{
 800a10c:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a10e:	4601      	mov	r1, r0
 800a110:	4803      	ldr	r0, [pc, #12]	; (800a120 <TL_MM_EvtDone+0x14>)
 800a112:	f7ff fe08 	bl	8009d26 <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a116:	4803      	ldr	r0, [pc, #12]	; (800a124 <TL_MM_EvtDone+0x18>)
 800a118:	f000 fd96 	bl	800ac48 <HW_IPCC_MM_SendFreeBuf>
}
 800a11c:	bd08      	pop	{r3, pc}
 800a11e:	bf00      	nop
 800a120:	20003e2c 	.word	0x20003e2c
 800a124:	08009eb9 	.word	0x08009eb9

0800a128 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a128:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 800a12a:	4c05      	ldr	r4, [pc, #20]	; (800a140 <TL_TRACES_Init+0x18>)
 800a12c:	4620      	mov	r0, r4
 800a12e:	f7ff fddf 	bl	8009cf0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a132:	4b04      	ldr	r3, [pc, #16]	; (800a144 <TL_TRACES_Init+0x1c>)
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a138:	f000 fd9e 	bl	800ac78 <HW_IPCC_TRACES_Init>

  return;
}
 800a13c:	bd10      	pop	{r4, pc}
 800a13e:	bf00      	nop
 800a140:	200300b0 	.word	0x200300b0
 800a144:	20030000 	.word	0x20030000

0800a148 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a148:	b500      	push	{lr}
 800a14a:	b083      	sub	sp, #12
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a14c:	e006      	b.n	800a15c <HW_IPCC_TRACES_EvtNot+0x14>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a14e:	a901      	add	r1, sp, #4
 800a150:	4806      	ldr	r0, [pc, #24]	; (800a16c <HW_IPCC_TRACES_EvtNot+0x24>)
 800a152:	f7ff fe00 	bl	8009d56 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a156:	9801      	ldr	r0, [sp, #4]
 800a158:	f7f6 fafa 	bl	8000750 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a15c:	4803      	ldr	r0, [pc, #12]	; (800a16c <HW_IPCC_TRACES_EvtNot+0x24>)
 800a15e:	f7ff fdca 	bl	8009cf6 <LST_is_empty>
 800a162:	2800      	cmp	r0, #0
 800a164:	d0f3      	beq.n	800a14e <HW_IPCC_TRACES_EvtNot+0x6>
  }

  return;
}
 800a166:	b003      	add	sp, #12
 800a168:	f85d fb04 	ldr.w	pc, [sp], #4
 800a16c:	200300b0 	.word	0x200300b0

0800a170 <APP_THREAD_DummyReqHandler>:
static void APP_THREAD_DummyReqHandler(void            * p_context,
                                   otCoapHeader        * pHeader,
                                   otMessage           * pMessage,
                                   const otMessageInfo * pMessageInfo)
{
    tempMessageInfo = pMessageInfo;
 800a170:	4902      	ldr	r1, [pc, #8]	; (800a17c <APP_THREAD_DummyReqHandler+0xc>)
 800a172:	600b      	str	r3, [r1, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800a174:	4b02      	ldr	r3, [pc, #8]	; (800a180 <APP_THREAD_DummyReqHandler+0x10>)
 800a176:	601a      	str	r2, [r3, #0]
}
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	20004530 	.word	0x20004530
 800a180:	20004574 	.word	0x20004574

0800a184 <Wait_Getting_Ack_From_M0>:
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
  while (FlagReceiveAckFromM0 == 0)
 800a184:	4b03      	ldr	r3, [pc, #12]	; (800a194 <Wait_Getting_Ack_From_M0+0x10>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d0fb      	beq.n	800a184 <Wait_Getting_Ack_From_M0>
  {
  }
  FlagReceiveAckFromM0 = 0;
 800a18c:	4b01      	ldr	r3, [pc, #4]	; (800a194 <Wait_Getting_Ack_From_M0+0x10>)
 800a18e:	2200      	movs	r2, #0
 800a190:	601a      	str	r2, [r3, #0]
}
 800a192:	4770      	bx	lr
 800a194:	20003f44 	.word	0x20003f44

0800a198 <Receive_Ack_From_M0>:
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
  FlagReceiveAckFromM0 = 1;
 800a198:	4b01      	ldr	r3, [pc, #4]	; (800a1a0 <Receive_Ack_From_M0+0x8>)
 800a19a:	2201      	movs	r2, #1
 800a19c:	601a      	str	r2, [r3, #0]
}
 800a19e:	4770      	bx	lr
 800a1a0:	20003f44 	.word	0x20003f44

0800a1a4 <APP_THREAD_CheckWirelessFirmwareInfo>:
{
 800a1a4:	b500      	push	{lr}
 800a1a6:	b087      	sub	sp, #28
  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800a1a8:	a802      	add	r0, sp, #8
 800a1aa:	f7ff fc9d 	bl	8009ae8 <SHCI_GetWirelessFwInfo>
 800a1ae:	b110      	cbz	r0, 800a1b6 <APP_THREAD_CheckWirelessFirmwareInfo+0x12>
}
 800a1b0:	b007      	add	sp, #28
 800a1b2:	f85d fb04 	ldr.w	pc, [sp], #4
    APP_DBG("**********************************************************");
 800a1b6:	4a1b      	ldr	r2, [pc, #108]	; (800a224 <APP_THREAD_CheckWirelessFirmwareInfo+0x80>)
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	f7f7 fc6d 	bl	8001a98 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800a1be:	4a1a      	ldr	r2, [pc, #104]	; (800a228 <APP_THREAD_CheckWirelessFirmwareInfo+0x84>)
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	f7f7 fc68 	bl	8001a98 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800a1c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a1cc:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800a1d0:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800a1d4:	9101      	str	r1, [sp, #4]
 800a1d6:	9200      	str	r2, [sp, #0]
 800a1d8:	4a14      	ldr	r2, [pc, #80]	; (800a22c <APP_THREAD_CheckWirelessFirmwareInfo+0x88>)
 800a1da:	2101      	movs	r1, #1
 800a1dc:	2000      	movs	r0, #0
 800a1de:	f7f7 fc5b 	bl	8001a98 <logApplication>
    switch(p_wireless_info->StackType)
 800a1e2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800a1e6:	2b11      	cmp	r3, #17
 800a1e8:	d00f      	beq.n	800a20a <APP_THREAD_CheckWirelessFirmwareInfo+0x66>
 800a1ea:	2b50      	cmp	r3, #80	; 0x50
 800a1ec:	d013      	beq.n	800a216 <APP_THREAD_CheckWirelessFirmwareInfo+0x72>
 800a1ee:	2b10      	cmp	r3, #16
 800a1f0:	d005      	beq.n	800a1fe <APP_THREAD_CheckWirelessFirmwareInfo+0x5a>
    APP_DBG("**********************************************************");
 800a1f2:	4a0c      	ldr	r2, [pc, #48]	; (800a224 <APP_THREAD_CheckWirelessFirmwareInfo+0x80>)
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	f7f7 fc4e 	bl	8001a98 <logApplication>
}
 800a1fc:	e7d8      	b.n	800a1b0 <APP_THREAD_CheckWirelessFirmwareInfo+0xc>
      APP_DBG("FW Type : Thread FTD");
 800a1fe:	4a0c      	ldr	r2, [pc, #48]	; (800a230 <APP_THREAD_CheckWirelessFirmwareInfo+0x8c>)
 800a200:	2101      	movs	r1, #1
 800a202:	2000      	movs	r0, #0
 800a204:	f7f7 fc48 	bl	8001a98 <logApplication>
      break;
 800a208:	e7f3      	b.n	800a1f2 <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
      APP_DBG("FW Type : Thread MTD");
 800a20a:	4a0a      	ldr	r2, [pc, #40]	; (800a234 <APP_THREAD_CheckWirelessFirmwareInfo+0x90>)
 800a20c:	2101      	movs	r1, #1
 800a20e:	2000      	movs	r0, #0
 800a210:	f7f7 fc42 	bl	8001a98 <logApplication>
      break;
 800a214:	e7ed      	b.n	800a1f2 <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 800a216:	4a08      	ldr	r2, [pc, #32]	; (800a238 <APP_THREAD_CheckWirelessFirmwareInfo+0x94>)
 800a218:	2101      	movs	r1, #1
 800a21a:	2000      	movs	r0, #0
 800a21c:	f7f7 fc3c 	bl	8001a98 <logApplication>
      break;
 800a220:	e7e7      	b.n	800a1f2 <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
 800a222:	bf00      	nop
 800a224:	0800afc8 	.word	0x0800afc8
 800a228:	0800b004 	.word	0x0800b004
 800a22c:	0800b020 	.word	0x0800b020
 800a230:	0800b038 	.word	0x0800b038
 800a234:	0800b050 	.word	0x0800b050
 800a238:	0800b068 	.word	0x0800b068

0800a23c <APP_THREAD_DeviceConfig>:
{
 800a23c:	b508      	push	{r3, lr}
  error = otInstanceErasePersistentInfo(NULL);
 800a23e:	2000      	movs	r0, #0
 800a240:	f7ff f9e0 	bl	8009604 <otInstanceErasePersistentInfo>
  otInstanceFinalize(NULL);
 800a244:	2000      	movs	r0, #0
 800a246:	f7ff f9a8 	bl	800959a <otInstanceFinalize>
  otInstanceInitSingle();
 800a24a:	f7ff f990 	bl	800956e <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800a24e:	2200      	movs	r2, #0
 800a250:	491f      	ldr	r1, [pc, #124]	; (800a2d0 <APP_THREAD_DeviceConfig+0x94>)
 800a252:	4610      	mov	r0, r2
 800a254:	f7ff f9b6 	bl	80095c4 <otSetStateChangedCallback>
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 800a258:	211a      	movs	r1, #26
 800a25a:	2000      	movs	r0, #0
 800a25c:	f7ff fa4a 	bl	80096f4 <otLinkSetChannel>
  error = otLinkSetPanId(NULL, C_PANID);
 800a260:	f241 2134 	movw	r1, #4660	; 0x1234
 800a264:	2000      	movs	r0, #0
 800a266:	f7ff fa5e 	bl	8009726 <otLinkSetPanId>
  error = otIp6SetEnabled(NULL, true);
 800a26a:	2101      	movs	r1, #1
 800a26c:	2000      	movs	r0, #0
 800a26e:	f7ff f9e0 	bl	8009632 <otIp6SetEnabled>
  error = otThreadSetEnabled(NULL, true);
 800a272:	2101      	movs	r1, #1
 800a274:	2000      	movs	r0, #0
 800a276:	f7ff fd7a 	bl	8009d6e <otThreadSetEnabled>
  error = otThreadSetEnabled(NULL, false);
 800a27a:	2100      	movs	r1, #0
 800a27c:	4608      	mov	r0, r1
 800a27e:	f7ff fd76 	bl	8009d6e <otThreadSetEnabled>
    error = otThreadSetMasterKey(NULL, &masterKey);
 800a282:	4914      	ldr	r1, [pc, #80]	; (800a2d4 <APP_THREAD_DeviceConfig+0x98>)
 800a284:	2000      	movs	r0, #0
 800a286:	f7ff fda4 	bl	8009dd2 <otThreadSetMasterKey>
    error = otThreadSetNetworkName(NULL, networkName);
 800a28a:	4913      	ldr	r1, [pc, #76]	; (800a2d8 <APP_THREAD_DeviceConfig+0x9c>)
 800a28c:	2000      	movs	r0, #0
 800a28e:	f7ff fdce 	bl	8009e2e <otThreadSetNetworkName>
    error = otThreadSetExtendedPanId(NULL , &extendedPanId);
 800a292:	4912      	ldr	r1, [pc, #72]	; (800a2dc <APP_THREAD_DeviceConfig+0xa0>)
 800a294:	2000      	movs	r0, #0
 800a296:	f7ff fd83 	bl	8009da0 <otThreadSetExtendedPanId>
    error = otThreadSetEnabled(NULL, true);
 800a29a:	2101      	movs	r1, #1
 800a29c:	2000      	movs	r0, #0
 800a29e:	f7ff fd66 	bl	8009d6e <otThreadSetEnabled>
    error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 800a2a2:	f241 6133 	movw	r1, #5683	; 0x1633
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	f7ff f911 	bl	80094ce <otCoapStart>
    error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 800a2ac:	490c      	ldr	r1, [pc, #48]	; (800a2e0 <APP_THREAD_DeviceConfig+0xa4>)
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	f7ff f927 	bl	8009502 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 800a2b4:	490b      	ldr	r1, [pc, #44]	; (800a2e4 <APP_THREAD_DeviceConfig+0xa8>)
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	f7ff f923 	bl	8009502 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 800a2bc:	490a      	ldr	r1, [pc, #40]	; (800a2e8 <APP_THREAD_DeviceConfig+0xac>)
 800a2be:	2000      	movs	r0, #0
 800a2c0:	f7ff f91f 	bl	8009502 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 800a2c4:	4909      	ldr	r1, [pc, #36]	; (800a2ec <APP_THREAD_DeviceConfig+0xb0>)
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	f7ff f91b 	bl	8009502 <otCoapAddResource>
}
 800a2cc:	bd08      	pop	{r3, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800a82d 	.word	0x0800a82d
 800a2d4:	0800b134 	.word	0x0800b134
 800a2d8:	0800b144 	.word	0x0800b144
 800a2dc:	0800b12c 	.word	0x0800b12c
 800a2e0:	20000030 	.word	0x20000030
 800a2e4:	20000040 	.word	0x20000040
 800a2e8:	20000020 	.word	0x20000020
 800a2ec:	20000050 	.word	0x20000050

0800a2f0 <APP_THREAD_SendDataResponse>:
{
 800a2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	460e      	mov	r6, r1
  APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
 800a2f6:	4a18      	ldr	r2, [pc, #96]	; (800a358 <APP_THREAD_SendDataResponse+0x68>)
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	f7f7 fbcc 	bl	8001a98 <logApplication>
  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 800a300:	4c16      	ldr	r4, [pc, #88]	; (800a35c <APP_THREAD_SendDataResponse+0x6c>)
 800a302:	2244      	movs	r2, #68	; 0x44
 800a304:	2120      	movs	r1, #32
 800a306:	4620      	mov	r0, r4
 800a308:	f7fe ff69 	bl	80091de <otCoapHeaderInit>
  otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 800a30c:	4628      	mov	r0, r5
 800a30e:	f7ff f858 	bl	80093c2 <otCoapHeaderGetMessageId>
 800a312:	4601      	mov	r1, r0
 800a314:	4620      	mov	r0, r4
 800a316:	f7ff f806 	bl	8009326 <otCoapHeaderSetMessageId>
  otCoapHeaderSetToken(&OT_Header,
 800a31a:	4628      	mov	r0, r5
 800a31c:	f7ff f885 	bl	800942a <otCoapHeaderGetToken>
 800a320:	4607      	mov	r7, r0
 800a322:	4628      	mov	r0, r5
 800a324:	f7ff f867 	bl	80093f6 <otCoapHeaderGetTokenLength>
 800a328:	4602      	mov	r2, r0
 800a32a:	4639      	mov	r1, r7
 800a32c:	4620      	mov	r0, r4
 800a32e:	f7fe ff72 	bl	8009216 <otCoapHeaderSetToken>
  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800a332:	4621      	mov	r1, r4
 800a334:	2000      	movs	r0, #0
 800a336:	f7ff f891 	bl	800945c <otCoapNewMessage>
 800a33a:	4601      	mov	r1, r0
 800a33c:	4b08      	ldr	r3, [pc, #32]	; (800a360 <APP_THREAD_SendDataResponse+0x70>)
 800a33e:	6018      	str	r0, [r3, #0]
  error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 800a340:	4632      	mov	r2, r6
 800a342:	2000      	movs	r0, #0
 800a344:	f7ff f8f7 	bl	8009536 <otCoapSendResponse>
  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800a348:	b120      	cbz	r0, 800a354 <APP_THREAD_SendDataResponse+0x64>
 800a34a:	4b05      	ldr	r3, [pc, #20]	; (800a360 <APP_THREAD_SendDataResponse+0x70>)
 800a34c:	6818      	ldr	r0, [r3, #0]
 800a34e:	b108      	cbz	r0, 800a354 <APP_THREAD_SendDataResponse+0x64>
    otMessageFree(pOT_Message);
 800a350:	f7ff fa02 	bl	8009758 <otMessageFree>
}
 800a354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a356:	bf00      	nop
 800a358:	0800b094 	.word	0x0800b094
 800a35c:	20003f48 	.word	0x20003f48
 800a360:	20004154 	.word	0x20004154

0800a364 <APP_THREAD_CoapToggleLoggingRequestHandler>:
{
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	4605      	mov	r5, r0
 800a368:	460c      	mov	r4, r1
 800a36a:	4616      	mov	r6, r2
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage))
 800a36c:	4608      	mov	r0, r1
 800a36e:	f7ff fa0b 	bl	8009788 <otMessageGetOffset>
 800a372:	2306      	movs	r3, #6
 800a374:	4a17      	ldr	r2, [pc, #92]	; (800a3d4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x70>)
 800a376:	4601      	mov	r1, r0
 800a378:	4620      	mov	r0, r4
 800a37a:	f7ff fa3d 	bl	80097f8 <otMessageRead>
 800a37e:	2806      	cmp	r0, #6
 800a380:	d01b      	beq.n	800a3ba <APP_THREAD_CoapToggleLoggingRequestHandler+0x56>
    tempMessageInfo = pMessageInfo;
 800a382:	4b15      	ldr	r3, [pc, #84]	; (800a3d8 <APP_THREAD_CoapToggleLoggingRequestHandler+0x74>)
 800a384:	601e      	str	r6, [r3, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800a386:	4b15      	ldr	r3, [pc, #84]	; (800a3dc <APP_THREAD_CoapToggleLoggingRequestHandler+0x78>)
 800a388:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800a38a:	4628      	mov	r0, r5
 800a38c:	f7fe ffe5 	bl	800935a <otCoapHeaderGetType>
 800a390:	b1d8      	cbz	r0, 800a3ca <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800a392:	4628      	mov	r0, r5
 800a394:	f7fe ffe1 	bl	800935a <otCoapHeaderGetType>
 800a398:	2810      	cmp	r0, #16
 800a39a:	d11a      	bne.n	800a3d2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800a39c:	4628      	mov	r0, r5
 800a39e:	f7fe fff6 	bl	800938e <otCoapHeaderGetCode>
 800a3a2:	2803      	cmp	r0, #3
 800a3a4:	d115      	bne.n	800a3d2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f7ff f9ee 	bl	8009788 <otMessageGetOffset>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	4a0c      	ldr	r2, [pc, #48]	; (800a3e0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x7c>)
 800a3b0:	4601      	mov	r1, r0
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f7ff fa20 	bl	80097f8 <otMessageRead>
}
 800a3b8:	e00b      	b.n	800a3d2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    	osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	461a      	mov	r2, r3
 800a3be:	4905      	ldr	r1, [pc, #20]	; (800a3d4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x70>)
 800a3c0:	4808      	ldr	r0, [pc, #32]	; (800a3e4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>)
 800a3c2:	6800      	ldr	r0, [r0, #0]
 800a3c4:	f7fc fbfc 	bl	8006bc0 <osMessageQueuePut>
 800a3c8:	e7db      	b.n	800a382 <APP_THREAD_CoapToggleLoggingRequestHandler+0x1e>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f7ff ff8f 	bl	800a2f0 <APP_THREAD_SendDataResponse>
}
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	20004548 	.word	0x20004548
 800a3d8:	20004530 	.word	0x20004530
 800a3dc:	20004574 	.word	0x20004574
 800a3e0:	20004004 	.word	0x20004004
 800a3e4:	20004240 	.word	0x20004240

0800a3e8 <APP_THREAD_CoapLightsSimpleRequestHandler>:
{
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	460c      	mov	r4, r1
 800a3ee:	4617      	mov	r7, r2
	lightsSimpleMessage = 0;
 800a3f0:	4e1a      	ldr	r6, [pc, #104]	; (800a45c <APP_THREAD_CoapLightsSimpleRequestHandler+0x74>)
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	6033      	str	r3, [r6, #0]
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage)) == 4U)
 800a3f6:	4608      	mov	r0, r1
 800a3f8:	f7ff f9c6 	bl	8009788 <otMessageGetOffset>
 800a3fc:	2304      	movs	r3, #4
 800a3fe:	4632      	mov	r2, r6
 800a400:	4601      	mov	r1, r0
 800a402:	4620      	mov	r0, r4
 800a404:	f7ff f9f8 	bl	80097f8 <otMessageRead>
 800a408:	2804      	cmp	r0, #4
 800a40a:	d019      	beq.n	800a440 <APP_THREAD_CoapLightsSimpleRequestHandler+0x58>
    receivedMessage = (otMessageInfo *) pMessage;
 800a40c:	4b14      	ldr	r3, [pc, #80]	; (800a460 <APP_THREAD_CoapLightsSimpleRequestHandler+0x78>)
 800a40e:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800a410:	4628      	mov	r0, r5
 800a412:	f7fe ffa2 	bl	800935a <otCoapHeaderGetType>
 800a416:	b1d8      	cbz	r0, 800a450 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800a418:	4628      	mov	r0, r5
 800a41a:	f7fe ff9e 	bl	800935a <otCoapHeaderGetType>
 800a41e:	2810      	cmp	r0, #16
 800a420:	d11a      	bne.n	800a458 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800a422:	4628      	mov	r0, r5
 800a424:	f7fe ffb3 	bl	800938e <otCoapHeaderGetCode>
 800a428:	2803      	cmp	r0, #3
 800a42a:	d115      	bne.n	800a458 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800a42c:	4620      	mov	r0, r4
 800a42e:	f7ff f9ab 	bl	8009788 <otMessageGetOffset>
 800a432:	2301      	movs	r3, #1
 800a434:	4a0b      	ldr	r2, [pc, #44]	; (800a464 <APP_THREAD_CoapLightsSimpleRequestHandler+0x7c>)
 800a436:	4601      	mov	r1, r0
 800a438:	4620      	mov	r0, r4
 800a43a:	f7ff f9dd 	bl	80097f8 <otMessageRead>
}
 800a43e:	e00b      	b.n	800a458 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    	osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 800a440:	2300      	movs	r3, #0
 800a442:	461a      	mov	r2, r3
 800a444:	4631      	mov	r1, r6
 800a446:	4808      	ldr	r0, [pc, #32]	; (800a468 <APP_THREAD_CoapLightsSimpleRequestHandler+0x80>)
 800a448:	6800      	ldr	r0, [r0, #0]
 800a44a:	f7fc fbb9 	bl	8006bc0 <osMessageQueuePut>
 800a44e:	e7dd      	b.n	800a40c <APP_THREAD_CoapLightsSimpleRequestHandler+0x24>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800a450:	4639      	mov	r1, r7
 800a452:	4628      	mov	r0, r5
 800a454:	f7ff ff4c 	bl	800a2f0 <APP_THREAD_SendDataResponse>
}
 800a458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20004258 	.word	0x20004258
 800a460:	20004574 	.word	0x20004574
 800a464:	20004004 	.word	0x20004004
 800a468:	20004250 	.word	0x20004250

0800a46c <APP_THREAD_CoapLightsComplexRequestHandler>:
{
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	4605      	mov	r5, r0
 800a470:	460c      	mov	r4, r1
 800a472:	4616      	mov	r6, r2
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex)) == sizeof(lightMessageComplex))
 800a474:	4608      	mov	r0, r1
 800a476:	f7ff f987 	bl	8009788 <otMessageGetOffset>
 800a47a:	2312      	movs	r3, #18
 800a47c:	4a11      	ldr	r2, [pc, #68]	; (800a4c4 <APP_THREAD_CoapLightsComplexRequestHandler+0x58>)
 800a47e:	4601      	mov	r1, r0
 800a480:	4620      	mov	r0, r4
 800a482:	f7ff f9b9 	bl	80097f8 <otMessageRead>
 800a486:	2812      	cmp	r0, #18
 800a488:	d009      	beq.n	800a49e <APP_THREAD_CoapLightsComplexRequestHandler+0x32>
    tempMessageInfo = pMessageInfo;
 800a48a:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <APP_THREAD_CoapLightsComplexRequestHandler+0x5c>)
 800a48c:	601e      	str	r6, [r3, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800a48e:	4b0f      	ldr	r3, [pc, #60]	; (800a4cc <APP_THREAD_CoapLightsComplexRequestHandler+0x60>)
 800a490:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800a492:	4628      	mov	r0, r5
 800a494:	f7fe ff61 	bl	800935a <otCoapHeaderGetType>
 800a498:	2810      	cmp	r0, #16
 800a49a:	d004      	beq.n	800a4a6 <APP_THREAD_CoapLightsComplexRequestHandler+0x3a>
}
 800a49c:	bd70      	pop	{r4, r5, r6, pc}
    	FrontLightsSet(&lightMessageComplex);
 800a49e:	4809      	ldr	r0, [pc, #36]	; (800a4c4 <APP_THREAD_CoapLightsComplexRequestHandler+0x58>)
 800a4a0:	f7f7 f868 	bl	8001574 <FrontLightsSet>
 800a4a4:	e7f1      	b.n	800a48a <APP_THREAD_CoapLightsComplexRequestHandler+0x1e>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f7fe ff71 	bl	800938e <otCoapHeaderGetCode>
 800a4ac:	2803      	cmp	r0, #3
 800a4ae:	d1f5      	bne.n	800a49c <APP_THREAD_CoapLightsComplexRequestHandler+0x30>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f7ff f969 	bl	8009788 <otMessageGetOffset>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	4a05      	ldr	r2, [pc, #20]	; (800a4d0 <APP_THREAD_CoapLightsComplexRequestHandler+0x64>)
 800a4ba:	4601      	mov	r1, r0
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f7ff f99b 	bl	80097f8 <otMessageRead>
}
 800a4c2:	e7eb      	b.n	800a49c <APP_THREAD_CoapLightsComplexRequestHandler+0x30>
 800a4c4:	20004560 	.word	0x20004560
 800a4c8:	20004530 	.word	0x20004530
 800a4cc:	20004574 	.word	0x20004574
 800a4d0:	20004004 	.word	0x20004004

0800a4d4 <APP_THREAD_SendCoapUnicastRequest>:
{
 800a4d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	4607      	mov	r7, r0
 800a4dc:	4688      	mov	r8, r1
 800a4de:	4615      	mov	r5, r2
 800a4e0:	4699      	mov	r9, r3
			  myRloc16 = otThreadGetRloc16(NULL);
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	f7ff fcd2 	bl	8009e8c <otThreadGetRloc16>
 800a4e8:	4b36      	ldr	r3, [pc, #216]	; (800a5c4 <APP_THREAD_SendCoapUnicastRequest+0xf0>)
 800a4ea:	8018      	strh	r0, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	f7ff f8b9 	bl	8009664 <otIp6IsEnabled>
 800a4f2:	4b35      	ldr	r3, [pc, #212]	; (800a5c8 <APP_THREAD_SendCoapUnicastRequest+0xf4>)
 800a4f4:	7018      	strb	r0, [r3, #0]
			  memcpy(&meshLocalEID, otThreadGetMeshLocalEid(NULL) ,sizeof(otIp6Address));
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	f7ff fc84 	bl	8009e04 <otThreadGetMeshLocalEid>
 800a4fc:	4b33      	ldr	r3, [pc, #204]	; (800a5cc <APP_THREAD_SendCoapUnicastRequest+0xf8>)
 800a4fe:	6806      	ldr	r6, [r0, #0]
 800a500:	6844      	ldr	r4, [r0, #4]
 800a502:	6881      	ldr	r1, [r0, #8]
 800a504:	68c2      	ldr	r2, [r0, #12]
 800a506:	601e      	str	r6, [r3, #0]
 800a508:	605c      	str	r4, [r3, #4]
 800a50a:	6099      	str	r1, [r3, #8]
 800a50c:	60da      	str	r2, [r3, #12]
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 800a50e:	4c30      	ldr	r4, [pc, #192]	; (800a5d0 <APP_THREAD_SendCoapUnicastRequest+0xfc>)
 800a510:	222c      	movs	r2, #44	; 0x2c
 800a512:	2100      	movs	r1, #0
 800a514:	4620      	mov	r0, r4
 800a516:	f000 fc56 	bl	800adc6 <memset>
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 800a51a:	f104 0110 	add.w	r1, r4, #16
 800a51e:	4628      	mov	r0, r5
 800a520:	f7ff f8cd 	bl	80096be <otIp6AddressFromString>
 800a524:	4e2b      	ldr	r6, [pc, #172]	; (800a5d4 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800a526:	7030      	strb	r0, [r6, #0]
			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 800a528:	2000      	movs	r0, #0
 800a52a:	f7ff fc6b 	bl	8009e04 <otThreadGetMeshLocalEid>
 800a52e:	4603      	mov	r3, r0
 800a530:	4625      	mov	r5, r4
 800a532:	6800      	ldr	r0, [r0, #0]
 800a534:	6859      	ldr	r1, [r3, #4]
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 800a53c:	2301      	movs	r3, #1
 800a53e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 800a542:	f241 6333 	movw	r3, #5683	; 0x1633
 800a546:	8463      	strh	r3, [r4, #34]	; 0x22
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 800a548:	2000      	movs	r0, #0
 800a54a:	f7ff f8a3 	bl	8009694 <otIp6GetUnicastAddresses>
 800a54e:	4b22      	ldr	r3, [pc, #136]	; (800a5d8 <APP_THREAD_SendCoapUnicastRequest+0x104>)
 800a550:	6018      	str	r0, [r3, #0]
			  OT_MessageInfo.mSockAddr = unicastAddresses->mAddress;
 800a552:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800a554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 800a558:	4c20      	ldr	r4, [pc, #128]	; (800a5dc <APP_THREAD_SendCoapUnicastRequest+0x108>)
 800a55a:	2203      	movs	r2, #3
 800a55c:	2110      	movs	r1, #16
 800a55e:	4620      	mov	r0, r4
 800a560:	f7fe fe3d 	bl	80091de <otCoapHeaderInit>
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 800a564:	2102      	movs	r1, #2
 800a566:	4620      	mov	r0, r4
 800a568:	f7fe fe71 	bl	800924e <otCoapHeaderGenerateToken>
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 800a56c:	4649      	mov	r1, r9
 800a56e:	4620      	mov	r0, r4
 800a570:	f7fe fea3 	bl	80092ba <otCoapHeaderAppendUriPathOptions>
 800a574:	7030      	strb	r0, [r6, #0]
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 800a576:	4620      	mov	r0, r4
 800a578:	f7fe febb 	bl	80092f2 <otCoapHeaderSetPayloadMarker>
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800a57c:	4621      	mov	r1, r4
 800a57e:	2000      	movs	r0, #0
 800a580:	f7fe ff6c 	bl	800945c <otCoapNewMessage>
 800a584:	4b16      	ldr	r3, [pc, #88]	; (800a5e0 <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800a586:	6018      	str	r0, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 800a588:	b900      	cbnz	r0, 800a58c <APP_THREAD_SendCoapUnicastRequest+0xb8>
 800a58a:	e7fe      	b.n	800a58a <APP_THREAD_SendCoapUnicastRequest+0xb6>
			  error = otMessageAppend(pOT_Message, message, message_length);
 800a58c:	4642      	mov	r2, r8
 800a58e:	4639      	mov	r1, r7
 800a590:	f7ff f914 	bl	80097bc <otMessageAppend>
 800a594:	4b0f      	ldr	r3, [pc, #60]	; (800a5d4 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800a596:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE) while(1);
 800a598:	b100      	cbz	r0, 800a59c <APP_THREAD_SendCoapUnicastRequest+0xc8>
 800a59a:	e7fe      	b.n	800a59a <APP_THREAD_SendCoapUnicastRequest+0xc6>
			  error = otCoapSendRequest(NULL,
 800a59c:	2000      	movs	r0, #0
 800a59e:	9000      	str	r0, [sp, #0]
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	4a0b      	ldr	r2, [pc, #44]	; (800a5d0 <APP_THREAD_SendCoapUnicastRequest+0xfc>)
 800a5a4:	490e      	ldr	r1, [pc, #56]	; (800a5e0 <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800a5a6:	6809      	ldr	r1, [r1, #0]
 800a5a8:	f7fe ff71 	bl	800948e <otCoapSendRequest>
 800a5ac:	4b09      	ldr	r3, [pc, #36]	; (800a5d4 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800a5ae:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800a5b0:	b120      	cbz	r0, 800a5bc <APP_THREAD_SendCoapUnicastRequest+0xe8>
 800a5b2:	4b0b      	ldr	r3, [pc, #44]	; (800a5e0 <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800a5b4:	6818      	ldr	r0, [r3, #0]
 800a5b6:	b108      	cbz	r0, 800a5bc <APP_THREAD_SendCoapUnicastRequest+0xe8>
				otMessageFree(pOT_Message);
 800a5b8:	f7ff f8ce 	bl	8009758 <otMessageFree>
}
 800a5bc:	b003      	add	sp, #12
 800a5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5c2:	bf00      	nop
 800a5c4:	200045f2 	.word	0x200045f2
 800a5c8:	20004572 	.word	0x20004572
 800a5cc:	200045e0 	.word	0x200045e0
 800a5d0:	20003fd8 	.word	0x20003fd8
 800a5d4:	20004150 	.word	0x20004150
 800a5d8:	200045f4 	.word	0x200045f4
 800a5dc:	20003f48 	.word	0x20003f48
 800a5e0:	20004154 	.word	0x20004154

0800a5e4 <APP_THREAD_SendCoapUnicastMsg>:
{
 800a5e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5e8:	b083      	sub	sp, #12
 800a5ea:	4607      	mov	r7, r0
 800a5ec:	4688      	mov	r8, r1
 800a5ee:	4614      	mov	r4, r2
 800a5f0:	4699      	mov	r9, r3
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 800a5f2:	4d2b      	ldr	r5, [pc, #172]	; (800a6a0 <APP_THREAD_SendCoapUnicastMsg+0xbc>)
 800a5f4:	222c      	movs	r2, #44	; 0x2c
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f000 fbe4 	bl	800adc6 <memset>
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 800a5fe:	f105 0110 	add.w	r1, r5, #16
 800a602:	4620      	mov	r0, r4
 800a604:	f7ff f85b 	bl	80096be <otIp6AddressFromString>
 800a608:	4e26      	ldr	r6, [pc, #152]	; (800a6a4 <APP_THREAD_SendCoapUnicastMsg+0xc0>)
 800a60a:	7030      	strb	r0, [r6, #0]
			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 800a60c:	2000      	movs	r0, #0
 800a60e:	f7ff fbf9 	bl	8009e04 <otThreadGetMeshLocalEid>
 800a612:	4603      	mov	r3, r0
 800a614:	462c      	mov	r4, r5
 800a616:	6800      	ldr	r0, [r0, #0]
 800a618:	6859      	ldr	r1, [r3, #4]
 800a61a:	689a      	ldr	r2, [r3, #8]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 800a620:	2301      	movs	r3, #1
 800a622:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 800a626:	f241 6333 	movw	r3, #5683	; 0x1633
 800a62a:	846b      	strh	r3, [r5, #34]	; 0x22
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 800a62c:	4c1e      	ldr	r4, [pc, #120]	; (800a6a8 <APP_THREAD_SendCoapUnicastMsg+0xc4>)
 800a62e:	2203      	movs	r2, #3
 800a630:	2110      	movs	r1, #16
 800a632:	4620      	mov	r0, r4
 800a634:	f7fe fdd3 	bl	80091de <otCoapHeaderInit>
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 800a638:	2102      	movs	r1, #2
 800a63a:	4620      	mov	r0, r4
 800a63c:	f7fe fe07 	bl	800924e <otCoapHeaderGenerateToken>
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 800a640:	4649      	mov	r1, r9
 800a642:	4620      	mov	r0, r4
 800a644:	f7fe fe39 	bl	80092ba <otCoapHeaderAppendUriPathOptions>
 800a648:	7030      	strb	r0, [r6, #0]
			  otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 800a64a:	212a      	movs	r1, #42	; 0x2a
 800a64c:	4620      	mov	r0, r4
 800a64e:	f7fe fe18 	bl	8009282 <otCoapHeaderAppendContentFormatOption>
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 800a652:	4620      	mov	r0, r4
 800a654:	f7fe fe4d 	bl	80092f2 <otCoapHeaderSetPayloadMarker>
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800a658:	4621      	mov	r1, r4
 800a65a:	2000      	movs	r0, #0
 800a65c:	f7fe fefe 	bl	800945c <otCoapNewMessage>
 800a660:	4b12      	ldr	r3, [pc, #72]	; (800a6ac <APP_THREAD_SendCoapUnicastMsg+0xc8>)
 800a662:	6018      	str	r0, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 800a664:	b900      	cbnz	r0, 800a668 <APP_THREAD_SendCoapUnicastMsg+0x84>
 800a666:	e7fe      	b.n	800a666 <APP_THREAD_SendCoapUnicastMsg+0x82>
			  error = otMessageAppend(pOT_Message, message, msgSize);
 800a668:	4642      	mov	r2, r8
 800a66a:	4639      	mov	r1, r7
 800a66c:	f7ff f8a6 	bl	80097bc <otMessageAppend>
 800a670:	4b0c      	ldr	r3, [pc, #48]	; (800a6a4 <APP_THREAD_SendCoapUnicastMsg+0xc0>)
 800a672:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE) while(1);
 800a674:	b100      	cbz	r0, 800a678 <APP_THREAD_SendCoapUnicastMsg+0x94>
 800a676:	e7fe      	b.n	800a676 <APP_THREAD_SendCoapUnicastMsg+0x92>
			  error = otCoapSendRequest(NULL,
 800a678:	2000      	movs	r0, #0
 800a67a:	9000      	str	r0, [sp, #0]
 800a67c:	4603      	mov	r3, r0
 800a67e:	4a08      	ldr	r2, [pc, #32]	; (800a6a0 <APP_THREAD_SendCoapUnicastMsg+0xbc>)
 800a680:	490a      	ldr	r1, [pc, #40]	; (800a6ac <APP_THREAD_SendCoapUnicastMsg+0xc8>)
 800a682:	6809      	ldr	r1, [r1, #0]
 800a684:	f7fe ff03 	bl	800948e <otCoapSendRequest>
 800a688:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <APP_THREAD_SendCoapUnicastMsg+0xc0>)
 800a68a:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800a68c:	b120      	cbz	r0, 800a698 <APP_THREAD_SendCoapUnicastMsg+0xb4>
 800a68e:	4b07      	ldr	r3, [pc, #28]	; (800a6ac <APP_THREAD_SendCoapUnicastMsg+0xc8>)
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	b108      	cbz	r0, 800a698 <APP_THREAD_SendCoapUnicastMsg+0xb4>
				otMessageFree(pOT_Message);
 800a694:	f7ff f860 	bl	8009758 <otMessageFree>
}
 800a698:	b003      	add	sp, #12
 800a69a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a69e:	bf00      	nop
 800a6a0:	20003fd8 	.word	0x20003fd8
 800a6a4:	20004150 	.word	0x20004150
 800a6a8:	20003f48 	.word	0x20003f48
 800a6ac:	20004154 	.word	0x20004154

0800a6b0 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 800a6b0:	b508      	push	{r3, lr}
  CptReceiveMsgFromM0++;
 800a6b2:	4a05      	ldr	r2, [pc, #20]	; (800a6c8 <Receive_Notification_From_M0+0x18>)
 800a6b4:	6813      	ldr	r3, [r2, #0]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	4b03      	ldr	r3, [pc, #12]	; (800a6cc <Receive_Notification_From_M0+0x1c>)
 800a6be:	6818      	ldr	r0, [r3, #0]
 800a6c0:	f7fb ff84 	bl	80065cc <osThreadFlagsSet>
}
 800a6c4:	bd08      	pop	{r3, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20003f40 	.word	0x20003f40
 800a6cc:	2000400c 	.word	0x2000400c

0800a6d0 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 800a6d0:	b508      	push	{r3, lr}
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800a6d2:	4b10      	ldr	r3, [pc, #64]	; (800a714 <RxCpltCallback+0x44>)
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	2bff      	cmp	r3, #255	; 0xff
 800a6da:	d80b      	bhi.n	800a6f4 <RxCpltCallback+0x24>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 800a6dc:	490d      	ldr	r1, [pc, #52]	; (800a714 <RxCpltCallback+0x44>)
 800a6de:	880b      	ldrh	r3, [r1, #0]
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	1c5a      	adds	r2, r3, #1
 800a6e4:	b292      	uxth	r2, r2
 800a6e6:	800a      	strh	r2, [r1, #0]
 800a6e8:	4a0b      	ldr	r2, [pc, #44]	; (800a718 <RxCpltCallback+0x48>)
 800a6ea:	7812      	ldrb	r2, [r2, #0]
 800a6ec:	490b      	ldr	r1, [pc, #44]	; (800a71c <RxCpltCallback+0x4c>)
 800a6ee:	54ca      	strb	r2, [r1, r3]
    if (aRxBuffer[0] == '\r')
 800a6f0:	2a0d      	cmp	r2, #13
 800a6f2:	d006      	beq.n	800a702 <RxCpltCallback+0x32>
      osThreadFlagsSet(OsTaskCliId,1);
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 800a6f4:	4b0a      	ldr	r3, [pc, #40]	; (800a720 <RxCpltCallback+0x50>)
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	4907      	ldr	r1, [pc, #28]	; (800a718 <RxCpltCallback+0x48>)
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	f7f6 fe32 	bl	8001364 <HW_UART_Receive_IT>
}
 800a700:	bd08      	pop	{r3, pc}
      CptReceiveCmdFromUser = 1U;
 800a702:	2101      	movs	r1, #1
 800a704:	4b07      	ldr	r3, [pc, #28]	; (800a724 <RxCpltCallback+0x54>)
 800a706:	8019      	strh	r1, [r3, #0]
      osThreadFlagsSet(OsTaskCliId,1);
 800a708:	4b07      	ldr	r3, [pc, #28]	; (800a728 <RxCpltCallback+0x58>)
 800a70a:	6818      	ldr	r0, [r3, #0]
 800a70c:	f7fb ff5e 	bl	80065cc <osThreadFlagsSet>
 800a710:	e7f0      	b.n	800a6f4 <RxCpltCallback+0x24>
 800a712:	bf00      	nop
 800a714:	20004152 	.word	0x20004152
 800a718:	20004010 	.word	0x20004010
 800a71c:	20003e3c 	.word	0x20003e3c
 800a720:	0800a6d1 	.word	0x0800a6d1
 800a724:	20003f3c 	.word	0x20003f3c
 800a728:	20004008 	.word	0x20004008

0800a72c <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 800a72e:	4c0f      	ldr	r4, [pc, #60]	; (800a76c <Send_CLI_To_M0+0x40>)
 800a730:	f104 070c 	add.w	r7, r4, #12
 800a734:	22ff      	movs	r2, #255	; 0xff
 800a736:	2100      	movs	r1, #0
 800a738:	4638      	mov	r0, r7
 800a73a:	f000 fb44 	bl	800adc6 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 800a73e:	4d0c      	ldr	r5, [pc, #48]	; (800a770 <Send_CLI_To_M0+0x44>)
 800a740:	882a      	ldrh	r2, [r5, #0]
 800a742:	4e0c      	ldr	r6, [pc, #48]	; (800a774 <Send_CLI_To_M0+0x48>)
 800a744:	4631      	mov	r1, r6
 800a746:	4638      	mov	r0, r7
 800a748:	f000 fb32 	bl	800adb0 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 800a74c:	882b      	ldrh	r3, [r5, #0]
 800a74e:	72e3      	strb	r3, [r4, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 800a750:	2100      	movs	r1, #0
 800a752:	7261      	strb	r1, [r4, #9]
 800a754:	72a1      	strb	r1, [r4, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 800a756:	4b08      	ldr	r3, [pc, #32]	; (800a778 <Send_CLI_To_M0+0x4c>)
 800a758:	8019      	strh	r1, [r3, #0]
  indexReceiveChar = 0;
 800a75a:	8029      	strh	r1, [r5, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 800a75c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a760:	4630      	mov	r0, r6
 800a762:	f000 fb30 	bl	800adc6 <memset>

  TL_CLI_SendCmd();
 800a766:	f7ff fc6f 	bl	800a048 <TL_CLI_SendCmd>
}
 800a76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a76c:	20030838 	.word	0x20030838
 800a770:	20004152 	.word	0x20004152
 800a774:	20003e3c 	.word	0x20003e3c
 800a778:	20003f3c 	.word	0x20003f3c

0800a77c <APP_THREAD_FreeRTOSSendCLIToM0Task>:
{
 800a77c:	b508      	push	{r3, lr}
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800a77e:	f04f 32ff 	mov.w	r2, #4294967295
 800a782:	2101      	movs	r1, #1
 800a784:	4608      	mov	r0, r1
 800a786:	f7fb ff69 	bl	800665c <osThreadFlagsWait>
    Send_CLI_To_M0();
 800a78a:	f7ff ffcf 	bl	800a72c <Send_CLI_To_M0>
 800a78e:	e7f6      	b.n	800a77e <APP_THREAD_FreeRTOSSendCLIToM0Task+0x2>

0800a790 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 800a790:	b508      	push	{r3, lr}

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800a792:	f7ff fc71 	bl	800a078 <TL_THREAD_CliSendAck>
}
 800a796:	bd08      	pop	{r3, pc}

0800a798 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 800a798:	b508      	push	{r3, lr}
  Send_CLI_Ack_For_OT();
 800a79a:	f7ff fff9 	bl	800a790 <Send_CLI_Ack_For_OT>
}
 800a79e:	bd08      	pop	{r3, pc}

0800a7a0 <APP_THREAD_SendMyIP>:
void APP_THREAD_SendMyIP(){
 800a7a0:	b508      	push	{r3, lr}
	APP_THREAD_SendCoapUnicastRequest(msgSendMyIP, sizeof(msgSendMyIP), borderRouter.ipv6, borderSyncResource);
 800a7a2:	4b03      	ldr	r3, [pc, #12]	; (800a7b0 <APP_THREAD_SendMyIP+0x10>)
 800a7a4:	4a03      	ldr	r2, [pc, #12]	; (800a7b4 <APP_THREAD_SendMyIP+0x14>)
 800a7a6:	2105      	movs	r1, #5
 800a7a8:	4803      	ldr	r0, [pc, #12]	; (800a7b8 <APP_THREAD_SendMyIP+0x18>)
 800a7aa:	f7ff fe93 	bl	800a4d4 <APP_THREAD_SendCoapUnicastRequest>
}
 800a7ae:	bd08      	pop	{r3, pc}
 800a7b0:	0800b11c 	.word	0x0800b11c
 800a7b4:	20004110 	.word	0x20004110
 800a7b8:	20000060 	.word	0x20000060

0800a7bc <APP_THREAD_CoapBorderTimeRequestHandler>:
{
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	4605      	mov	r5, r0
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	4616      	mov	r6, r2
	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &borderRouter, sizeof(borderRouter)) == sizeof(borderRouter))
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	f7fe ffdf 	bl	8009788 <otMessageGetOffset>
 800a7ca:	2340      	movs	r3, #64	; 0x40
 800a7cc:	4a14      	ldr	r2, [pc, #80]	; (800a820 <APP_THREAD_CoapBorderTimeRequestHandler+0x64>)
 800a7ce:	4601      	mov	r1, r0
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f7ff f811 	bl	80097f8 <otMessageRead>
 800a7d6:	2840      	cmp	r0, #64	; 0x40
 800a7d8:	d019      	beq.n	800a80e <APP_THREAD_CoapBorderTimeRequestHandler+0x52>
    receivedMessage = (otMessageInfo *) pMessage;
 800a7da:	4b12      	ldr	r3, [pc, #72]	; (800a824 <APP_THREAD_CoapBorderTimeRequestHandler+0x68>)
 800a7dc:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f7fe fdbb 	bl	800935a <otCoapHeaderGetType>
 800a7e4:	b1b0      	cbz	r0, 800a814 <APP_THREAD_CoapBorderTimeRequestHandler+0x58>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f7fe fdb7 	bl	800935a <otCoapHeaderGetType>
 800a7ec:	2810      	cmp	r0, #16
 800a7ee:	d115      	bne.n	800a81c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f7fe fdcc 	bl	800938e <otCoapHeaderGetCode>
 800a7f6:	2803      	cmp	r0, #3
 800a7f8:	d110      	bne.n	800a81c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f7fe ffc4 	bl	8009788 <otMessageGetOffset>
 800a800:	2301      	movs	r3, #1
 800a802:	4a09      	ldr	r2, [pc, #36]	; (800a828 <APP_THREAD_CoapBorderTimeRequestHandler+0x6c>)
 800a804:	4601      	mov	r1, r0
 800a806:	4620      	mov	r0, r4
 800a808:	f7fe fff6 	bl	80097f8 <otMessageRead>
}
 800a80c:	e006      	b.n	800a81c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    	APP_THREAD_SendMyIP();
 800a80e:	f7ff ffc7 	bl	800a7a0 <APP_THREAD_SendMyIP>
 800a812:	e7e2      	b.n	800a7da <APP_THREAD_CoapBorderTimeRequestHandler+0x1e>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800a814:	4631      	mov	r1, r6
 800a816:	4628      	mov	r0, r5
 800a818:	f7ff fd6a 	bl	800a2f0 <APP_THREAD_SendDataResponse>
}
 800a81c:	bd70      	pop	{r4, r5, r6, pc}
 800a81e:	bf00      	nop
 800a820:	20004110 	.word	0x20004110
 800a824:	20004574 	.word	0x20004574
 800a828:	20004004 	.word	0x20004004

0800a82c <APP_THREAD_StateNotif>:
  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 800a82c:	f010 0f04 	tst.w	r0, #4
 800a830:	d100      	bne.n	800a834 <APP_THREAD_StateNotif+0x8>
 800a832:	4770      	bx	lr
{
 800a834:	b508      	push	{r3, lr}
    switch (otThreadGetDeviceRole(NULL))
 800a836:	2000      	movs	r0, #0
 800a838:	f7ff fb12 	bl	8009e60 <otThreadGetDeviceRole>
 800a83c:	2804      	cmp	r0, #4
 800a83e:	d813      	bhi.n	800a868 <APP_THREAD_StateNotif+0x3c>
 800a840:	e8df f000 	tbb	[pc, r0]
 800a844:	0c090308 	.word	0x0c090308
 800a848:	0f          	.byte	0x0f
 800a849:	00          	.byte	0x00
    	borderRouter.epoch = 0;
 800a84a:	4b09      	ldr	r3, [pc, #36]	; (800a870 <APP_THREAD_StateNotif+0x44>)
 800a84c:	2000      	movs	r0, #0
 800a84e:	2100      	movs	r1, #0
 800a850:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
}
 800a854:	bd08      	pop	{r3, pc}
    	APP_THREAD_SendMyIP();
 800a856:	f7ff ffa3 	bl	800a7a0 <APP_THREAD_SendMyIP>
      break;
 800a85a:	e7fb      	b.n	800a854 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800a85c:	f7ff ffa0 	bl	800a7a0 <APP_THREAD_SendMyIP>
      break;
 800a860:	e7f8      	b.n	800a854 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800a862:	f7ff ff9d 	bl	800a7a0 <APP_THREAD_SendMyIP>
      break;
 800a866:	e7f5      	b.n	800a854 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800a868:	f7ff ff9a 	bl	800a7a0 <APP_THREAD_SendMyIP>
}
 800a86c:	e7f2      	b.n	800a854 <APP_THREAD_StateNotif+0x28>
 800a86e:	bf00      	nop
 800a870:	20004110 	.word	0x20004110

0800a874 <APP_THREAD_SendBorderPacket>:
void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket){
 800a874:	b500      	push	{lr}
 800a876:	b083      	sub	sp, #12
	APP_THREAD_SendCoapUnicastMsg(sensorPacket, sizeof(struct LogPacket), borderRouter.ipv6  , borderPacket, 1U);
 800a878:	2301      	movs	r3, #1
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	4b03      	ldr	r3, [pc, #12]	; (800a88c <APP_THREAD_SendBorderPacket+0x18>)
 800a87e:	4a04      	ldr	r2, [pc, #16]	; (800a890 <APP_THREAD_SendBorderPacket+0x1c>)
 800a880:	2174      	movs	r1, #116	; 0x74
 800a882:	f7ff feaf 	bl	800a5e4 <APP_THREAD_SendCoapUnicastMsg>
}
 800a886:	b003      	add	sp, #12
 800a888:	f85d fb04 	ldr.w	pc, [sp], #4
 800a88c:	0800b10c 	.word	0x0800b10c
 800a890:	20004110 	.word	0x20004110

0800a894 <APP_THREAD_RegisterCmdBuffer>:
  p_thread_otcmdbuffer = p_buffer;
 800a894:	4b01      	ldr	r3, [pc, #4]	; (800a89c <APP_THREAD_RegisterCmdBuffer+0x8>)
 800a896:	6018      	str	r0, [r3, #0]
}
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	2000415c 	.word	0x2000415c

0800a8a0 <THREAD_Get_OTCmdPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 800a8a0:	4b01      	ldr	r3, [pc, #4]	; (800a8a8 <THREAD_Get_OTCmdPayloadBuffer+0x8>)
 800a8a2:	6818      	ldr	r0, [r3, #0]
}
 800a8a4:	300c      	adds	r0, #12
 800a8a6:	4770      	bx	lr
 800a8a8:	2000415c 	.word	0x2000415c

0800a8ac <THREAD_Get_OTCmdRspPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 800a8ac:	4b01      	ldr	r3, [pc, #4]	; (800a8b4 <THREAD_Get_OTCmdRspPayloadBuffer+0x8>)
 800a8ae:	6818      	ldr	r0, [r3, #0]
}
 800a8b0:	300b      	adds	r0, #11
 800a8b2:	4770      	bx	lr
 800a8b4:	2000415c 	.word	0x2000415c

0800a8b8 <THREAD_Get_NotificationPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 800a8b8:	4b01      	ldr	r3, [pc, #4]	; (800a8c0 <THREAD_Get_NotificationPayloadBuffer+0x8>)
 800a8ba:	6818      	ldr	r0, [r3, #0]
}
 800a8bc:	300b      	adds	r0, #11
 800a8be:	4770      	bx	lr
 800a8c0:	20004158 	.word	0x20004158

0800a8c4 <Ot_Cmd_Transfer>:
{
 800a8c4:	b508      	push	{r3, lr}
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800a8c6:	4b08      	ldr	r3, [pc, #32]	; (800a8e8 <Ot_Cmd_Transfer+0x24>)
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800a8ce:	7253      	strb	r3, [r2, #9]
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	7293      	strb	r3, [r2, #10]
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 800a8d4:	6913      	ldr	r3, [r2, #16]
 800a8d6:	3302      	adds	r3, #2
 800a8d8:	009b      	lsls	r3, r3, #2
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 800a8da:	72d3      	strb	r3, [r2, #11]
  TL_OT_SendCmd();
 800a8dc:	f7ff fba8 	bl	800a030 <TL_OT_SendCmd>
  Wait_Getting_Ack_From_M0();
 800a8e0:	f7ff fc50 	bl	800a184 <Wait_Getting_Ack_From_M0>
}
 800a8e4:	bd08      	pop	{r3, pc}
 800a8e6:	bf00      	nop
 800a8e8:	2000415c 	.word	0x2000415c

0800a8ec <TL_OT_CmdEvtReceived>:
{
 800a8ec:	b508      	push	{r3, lr}
  Receive_Ack_From_M0();
 800a8ee:	f7ff fc53 	bl	800a198 <Receive_Ack_From_M0>
}
 800a8f2:	bd08      	pop	{r3, pc}

0800a8f4 <TL_THREAD_NotReceived>:
{
 800a8f4:	b508      	push	{r3, lr}
  p_thread_notif_M0_to_M4 = Notbuffer;
 800a8f6:	4b02      	ldr	r3, [pc, #8]	; (800a900 <TL_THREAD_NotReceived+0xc>)
 800a8f8:	6018      	str	r0, [r3, #0]
  Receive_Notification_From_M0();
 800a8fa:	f7ff fed9 	bl	800a6b0 <Receive_Notification_From_M0>
}
 800a8fe:	bd08      	pop	{r3, pc}
 800a900:	20004158 	.word	0x20004158

0800a904 <Pre_OtCmdProcessing>:
}
 800a904:	4770      	bx	lr
	...

0800a908 <APP_THREAD_Init_UART_CLI>:
{
 800a908:	b508      	push	{r3, lr}
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 800a90a:	4a08      	ldr	r2, [pc, #32]	; (800a92c <APP_THREAD_Init_UART_CLI+0x24>)
 800a90c:	2100      	movs	r1, #0
 800a90e:	4808      	ldr	r0, [pc, #32]	; (800a930 <APP_THREAD_Init_UART_CLI+0x28>)
 800a910:	f7fb fde8 	bl	80064e4 <osThreadNew>
 800a914:	4b07      	ldr	r3, [pc, #28]	; (800a934 <APP_THREAD_Init_UART_CLI+0x2c>)
 800a916:	6018      	str	r0, [r3, #0]
  MX_USART1_UART_Init();
 800a918:	f7f7 f9ec 	bl	8001cf4 <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 800a91c:	4b06      	ldr	r3, [pc, #24]	; (800a938 <APP_THREAD_Init_UART_CLI+0x30>)
 800a91e:	2201      	movs	r2, #1
 800a920:	4906      	ldr	r1, [pc, #24]	; (800a93c <APP_THREAD_Init_UART_CLI+0x34>)
 800a922:	2000      	movs	r0, #0
 800a924:	f7f6 fd1e 	bl	8001364 <HW_UART_Receive_IT>
}
 800a928:	bd08      	pop	{r3, pc}
 800a92a:	bf00      	nop
 800a92c:	0800b0c4 	.word	0x0800b0c4
 800a930:	0800a77d 	.word	0x0800a77d
 800a934:	20004008 	.word	0x20004008
 800a938:	0800a6d1 	.word	0x0800a6d1
 800a93c:	20004010 	.word	0x20004010

0800a940 <APP_THREAD_TL_THREAD_INIT>:
{
 800a940:	b508      	push	{r3, lr}
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 800a942:	4806      	ldr	r0, [pc, #24]	; (800a95c <APP_THREAD_TL_THREAD_INIT+0x1c>)
 800a944:	4b06      	ldr	r3, [pc, #24]	; (800a960 <APP_THREAD_TL_THREAD_INIT+0x20>)
 800a946:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 800a94a:	6002      	str	r2, [r0, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800a94c:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800a950:	6082      	str	r2, [r0, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 800a952:	6043      	str	r3, [r0, #4]
  TL_THREAD_Init( &ThreadConfigBuffer );
 800a954:	f7ff fb5e 	bl	800a014 <TL_THREAD_Init>
}
 800a958:	bd08      	pop	{r3, pc}
 800a95a:	bf00      	nop
 800a95c:	200300b8 	.word	0x200300b8
 800a960:	20030838 	.word	0x20030838

0800a964 <APP_THREAD_Init>:
{
 800a964:	b508      	push	{r3, lr}
  APP_THREAD_CheckWirelessFirmwareInfo();
 800a966:	f7ff fc1d 	bl	800a1a4 <APP_THREAD_CheckWirelessFirmwareInfo>
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 800a96a:	480b      	ldr	r0, [pc, #44]	; (800a998 <APP_THREAD_Init+0x34>)
 800a96c:	f7ff ff92 	bl	800a894 <APP_THREAD_RegisterCmdBuffer>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 800a970:	2101      	movs	r1, #1
 800a972:	2002      	movs	r0, #2
 800a974:	f000 f9e2 	bl	800ad3c <UTIL_LPM_SetOffMode>
  APP_THREAD_TL_THREAD_INIT();
 800a978:	f7ff ffe2 	bl	800a940 <APP_THREAD_TL_THREAD_INIT>
  APP_THREAD_Init_UART_CLI();
 800a97c:	f7ff ffc4 	bl	800a908 <APP_THREAD_Init_UART_CLI>
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 800a980:	f7ff f894 	bl	8009aac <SHCI_C2_THREAD_Init>
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 800a984:	4a05      	ldr	r2, [pc, #20]	; (800a99c <APP_THREAD_Init+0x38>)
 800a986:	2100      	movs	r1, #0
 800a988:	4805      	ldr	r0, [pc, #20]	; (800a9a0 <APP_THREAD_Init+0x3c>)
 800a98a:	f7fb fdab 	bl	80064e4 <osThreadNew>
 800a98e:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <APP_THREAD_Init+0x40>)
 800a990:	6018      	str	r0, [r3, #0]
  APP_THREAD_DeviceConfig();
 800a992:	f7ff fc53 	bl	800a23c <APP_THREAD_DeviceConfig>
}
 800a996:	bd08      	pop	{r3, pc}
 800a998:	20030944 	.word	0x20030944
 800a99c:	0800b0e8 	.word	0x0800b0e8
 800a9a0:	0800a9fd 	.word	0x0800a9fd
 800a9a4:	2000400c 	.word	0x2000400c

0800a9a8 <TL_THREAD_CliNotReceived>:
{
 800a9a8:	b538      	push	{r3, r4, r5, lr}
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800a9aa:	7ac5      	ldrb	r5, [r0, #11]
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800a9ac:	f100 040c 	add.w	r4, r0, #12
 800a9b0:	4907      	ldr	r1, [pc, #28]	; (800a9d0 <TL_THREAD_CliNotReceived+0x28>)
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f7f5 fbe4 	bl	8000180 <strcmp>
 800a9b8:	b910      	cbnz	r0, 800a9c0 <TL_THREAD_CliNotReceived+0x18>
    Send_CLI_Ack_For_OT();
 800a9ba:	f7ff fee9 	bl	800a790 <Send_CLI_Ack_For_OT>
}
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 800a9c0:	4b04      	ldr	r3, [pc, #16]	; (800a9d4 <TL_THREAD_CliNotReceived+0x2c>)
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	f7f6 fcde 	bl	8001388 <HW_UART_Transmit_IT>
 800a9cc:	e7f7      	b.n	800a9be <TL_THREAD_CliNotReceived+0x16>
 800a9ce:	bf00      	nop
 800a9d0:	0800b0c0 	.word	0x0800b0c0
 800a9d4:	0800a799 	.word	0x0800a799

0800a9d8 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 800a9d8:	b508      	push	{r3, lr}
  if (CptReceiveMsgFromM0 != 0)
 800a9da:	4b07      	ldr	r3, [pc, #28]	; (800a9f8 <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	b133      	cbz	r3, 800a9ee <APP_THREAD_ProcessMsgM0ToM4+0x16>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 800a9e0:	4b05      	ldr	r3, [pc, #20]	; (800a9f8 <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d903      	bls.n	800a9f0 <APP_THREAD_ProcessMsgM0ToM4+0x18>
    else
    {
      OpenThread_CallBack_Processing();
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 800a9e8:	4b03      	ldr	r3, [pc, #12]	; (800a9f8 <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	601a      	str	r2, [r3, #0]
  }
}
 800a9ee:	bd08      	pop	{r3, pc}
      OpenThread_CallBack_Processing();
 800a9f0:	f7fe ff22 	bl	8009838 <OpenThread_CallBack_Processing>
 800a9f4:	e7f8      	b.n	800a9e8 <APP_THREAD_ProcessMsgM0ToM4+0x10>
 800a9f6:	bf00      	nop
 800a9f8:	20003f40 	.word	0x20003f40

0800a9fc <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
{
 800a9fc:	b508      	push	{r3, lr}
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800a9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800aa02:	2101      	movs	r1, #1
 800aa04:	4608      	mov	r0, r1
 800aa06:	f7fb fe29 	bl	800665c <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 800aa0a:	f7ff ffe5 	bl	800a9d8 <APP_THREAD_ProcessMsgM0ToM4>
 800aa0e:	e7f6      	b.n	800a9fe <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x2>

0800aa10 <HW_IPCC_MM_FreeBufHandler>:

  return;
}

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800aa10:	b510      	push	{r4, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800aa12:	4c06      	ldr	r4, [pc, #24]	; (800aa2c <HW_IPCC_MM_FreeBufHandler+0x1c>)
 800aa14:	6863      	ldr	r3, [r4, #4]
 800aa16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa1a:	6063      	str	r3, [r4, #4]
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 800aa1c:	4b04      	ldr	r3, [pc, #16]	; (800aa30 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4798      	blx	r3
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800aa22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa26:	60a3      	str	r3, [r4, #8]

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  return;
}
 800aa28:	bd10      	pop	{r4, pc}
 800aa2a:	bf00      	nop
 800aa2c:	58000c00 	.word	0x58000c00
 800aa30:	20004160 	.word	0x20004160

0800aa34 <HW_IPCC_THREAD_CliNotEvtHandler>:
{
 800aa34:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel);
 800aa36:	4a04      	ldr	r2, [pc, #16]	; (800aa48 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800aa38:	6853      	ldr	r3, [r2, #4]
 800aa3a:	f043 0310 	orr.w	r3, r3, #16
 800aa3e:	6053      	str	r3, [r2, #4]
  HW_IPCC_THREAD_CliEvtNot();
 800aa40:	f7ff fb3a 	bl	800a0b8 <HW_IPCC_THREAD_CliEvtNot>
}
 800aa44:	bd08      	pop	{r3, pc}
 800aa46:	bf00      	nop
 800aa48:	58000c00 	.word	0x58000c00

0800aa4c <HW_IPCC_Enable>:
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800aa4c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800aa4e:	bf20      	wfe
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800aa50:	4a02      	ldr	r2, [pc, #8]	; (800aa5c <HW_IPCC_Enable+0x10>)
 800aa52:	68d3      	ldr	r3, [r2, #12]
 800aa54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa58:	60d3      	str	r3, [r2, #12]
}
 800aa5a:	4770      	bx	lr
 800aa5c:	58000400 	.word	0x58000400

0800aa60 <HW_IPCC_Init>:
{
 800aa60:	b500      	push	{lr}
 800aa62:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 800aa64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aa6e:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800aa70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa76:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800aa78:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800aa7a:	4b09      	ldr	r3, [pc, #36]	; (800aaa0 <HW_IPCC_Init+0x40>)
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	f042 0201 	orr.w	r2, r2, #1
 800aa82:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800aa8a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800aa8c:	202c      	movs	r0, #44	; 0x2c
 800aa8e:	f7f7 ff53 	bl	8002938 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800aa92:	202d      	movs	r0, #45	; 0x2d
 800aa94:	f7f7 ff50 	bl	8002938 <HAL_NVIC_EnableIRQ>
}
 800aa98:	b003      	add	sp, #12
 800aa9a:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa9e:	bf00      	nop
 800aaa0:	58000c00 	.word	0x58000c00

0800aaa4 <HW_IPCC_BLE_AclDataEvtHandler>:
{
 800aaa4:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800aaa6:	4a04      	ldr	r2, [pc, #16]	; (800aab8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800aaa8:	6853      	ldr	r3, [r2, #4]
 800aaaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aaae:	6053      	str	r3, [r2, #4]
  HW_IPCC_BLE_AclDataAckNot();
 800aab0:	f7ff fa5a 	bl	8009f68 <HW_IPCC_BLE_AclDataAckNot>
}
 800aab4:	bd08      	pop	{r3, pc}
 800aab6:	bf00      	nop
 800aab8:	58000c00 	.word	0x58000c00

0800aabc <HW_IPCC_BLE_EvtHandler>:
{
 800aabc:	b508      	push	{r3, lr}
  HW_IPCC_BLE_RxEvtNot();
 800aabe:	f7ff fa3b 	bl	8009f38 <HW_IPCC_BLE_RxEvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800aac2:	4b02      	ldr	r3, [pc, #8]	; (800aacc <HW_IPCC_BLE_EvtHandler+0x10>)
 800aac4:	2201      	movs	r2, #1
 800aac6:	609a      	str	r2, [r3, #8]
}
 800aac8:	bd08      	pop	{r3, pc}
 800aaca:	bf00      	nop
 800aacc:	58000c00 	.word	0x58000c00

0800aad0 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800aad0:	4a02      	ldr	r2, [pc, #8]	; (800aadc <HW_IPCC_SYS_Init+0xc>)
 800aad2:	6853      	ldr	r3, [r2, #4]
 800aad4:	f023 0302 	bic.w	r3, r3, #2
 800aad8:	6053      	str	r3, [r2, #4]
}
 800aada:	4770      	bx	lr
 800aadc:	58000c00 	.word	0x58000c00

0800aae0 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800aae0:	4b04      	ldr	r3, [pc, #16]	; (800aaf4 <HW_IPCC_SYS_SendCmd+0x14>)
 800aae2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800aae6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800aaee:	605a      	str	r2, [r3, #4]
}
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	58000c00 	.word	0x58000c00

0800aaf8 <HW_IPCC_SYS_CmdEvtHandler>:
{
 800aaf8:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800aafa:	4a04      	ldr	r2, [pc, #16]	; (800ab0c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800aafc:	6853      	ldr	r3, [r2, #4]
 800aafe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab02:	6053      	str	r3, [r2, #4]
  HW_IPCC_SYS_CmdEvtNot();
 800ab04:	f7ff fa62 	bl	8009fcc <HW_IPCC_SYS_CmdEvtNot>
}
 800ab08:	bd08      	pop	{r3, pc}
 800ab0a:	bf00      	nop
 800ab0c:	58000c00 	.word	0x58000c00

0800ab10 <HW_IPCC_SYS_EvtHandler>:
{
 800ab10:	b508      	push	{r3, lr}
  HW_IPCC_SYS_EvtNot();
 800ab12:	f7ff fa67 	bl	8009fe4 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800ab16:	4b02      	ldr	r3, [pc, #8]	; (800ab20 <HW_IPCC_SYS_EvtHandler+0x10>)
 800ab18:	2202      	movs	r2, #2
 800ab1a:	609a      	str	r2, [r3, #8]
}
 800ab1c:	bd08      	pop	{r3, pc}
 800ab1e:	bf00      	nop
 800ab20:	58000c00 	.word	0x58000c00

0800ab24 <HW_IPCC_THREAD_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800ab24:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <HW_IPCC_THREAD_Init+0x14>)
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	f022 0204 	bic.w	r2, r2, #4
 800ab2c:	605a      	str	r2, [r3, #4]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	f022 0210 	bic.w	r2, r2, #16
 800ab34:	605a      	str	r2, [r3, #4]
}
 800ab36:	4770      	bx	lr
 800ab38:	58000c00 	.word	0x58000c00

0800ab3c <HW_IPCC_OT_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800ab3c:	4b04      	ldr	r3, [pc, #16]	; (800ab50 <HW_IPCC_OT_SendCmd+0x14>)
 800ab3e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ab42:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab4a:	605a      	str	r2, [r3, #4]
}
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	58000c00 	.word	0x58000c00

0800ab54 <HW_IPCC_CLI_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800ab54:	4b02      	ldr	r3, [pc, #8]	; (800ab60 <HW_IPCC_CLI_SendCmd+0xc>)
 800ab56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ab5a:	609a      	str	r2, [r3, #8]
}
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	58000c00 	.word	0x58000c00

0800ab64 <HW_IPCC_THREAD_SendAck>:
  WRITE_REG(IPCCx->C1SCR, Channel);
 800ab64:	4b03      	ldr	r3, [pc, #12]	; (800ab74 <HW_IPCC_THREAD_SendAck+0x10>)
 800ab66:	2204      	movs	r2, #4
 800ab68:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800ab6a:	685a      	ldr	r2, [r3, #4]
 800ab6c:	f022 0204 	bic.w	r2, r2, #4
 800ab70:	605a      	str	r2, [r3, #4]
}
 800ab72:	4770      	bx	lr
 800ab74:	58000c00 	.word	0x58000c00

0800ab78 <HW_IPCC_THREAD_CliSendAck>:
  WRITE_REG(IPCCx->C1SCR, Channel);
 800ab78:	4b03      	ldr	r3, [pc, #12]	; (800ab88 <HW_IPCC_THREAD_CliSendAck+0x10>)
 800ab7a:	2210      	movs	r2, #16
 800ab7c:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800ab7e:	685a      	ldr	r2, [r3, #4]
 800ab80:	f022 0210 	bic.w	r2, r2, #16
 800ab84:	605a      	str	r2, [r3, #4]
}
 800ab86:	4770      	bx	lr
 800ab88:	58000c00 	.word	0x58000c00

0800ab8c <HW_IPCC_OT_CmdEvtHandler>:
{
 800ab8c:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ab8e:	4a04      	ldr	r2, [pc, #16]	; (800aba0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800ab90:	6853      	ldr	r3, [r2, #4]
 800ab92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab96:	6053      	str	r3, [r2, #4]
  HW_IPCC_OT_CmdEvtNot();
 800ab98:	f7ff fa7a 	bl	800a090 <HW_IPCC_OT_CmdEvtNot>
}
 800ab9c:	bd08      	pop	{r3, pc}
 800ab9e:	bf00      	nop
 800aba0:	58000c00 	.word	0x58000c00

0800aba4 <HW_IPCC_Tx_Handler>:
{
 800aba4:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800aba6:	4b21      	ldr	r3, [pc, #132]	; (800ac2c <HW_IPCC_Tx_Handler+0x88>)
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	f013 0f02 	tst.w	r3, #2
 800abae:	d104      	bne.n	800abba <HW_IPCC_Tx_Handler+0x16>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800abb0:	4b1e      	ldr	r3, [pc, #120]	; (800ac2c <HW_IPCC_Tx_Handler+0x88>)
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800abb8:	d028      	beq.n	800ac0c <HW_IPCC_Tx_Handler+0x68>
 800abba:	4b1c      	ldr	r3, [pc, #112]	; (800ac2c <HW_IPCC_Tx_Handler+0x88>)
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	f013 0f04 	tst.w	r3, #4
 800abc2:	d104      	bne.n	800abce <HW_IPCC_Tx_Handler+0x2a>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 800abc4:	4b19      	ldr	r3, [pc, #100]	; (800ac2c <HW_IPCC_Tx_Handler+0x88>)
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800abcc:	d021      	beq.n	800ac12 <HW_IPCC_Tx_Handler+0x6e>
 800abce:	4b17      	ldr	r3, [pc, #92]	; (800ac2c <HW_IPCC_Tx_Handler+0x88>)
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f013 0f02 	tst.w	r3, #2
 800abd6:	d104      	bne.n	800abe2 <HW_IPCC_Tx_Handler+0x3e>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800abd8:	4b14      	ldr	r3, [pc, #80]	; (800ac2c <HW_IPCC_Tx_Handler+0x88>)
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800abe0:	d01a      	beq.n	800ac18 <HW_IPCC_Tx_Handler+0x74>
 800abe2:	4b12      	ldr	r3, [pc, #72]	; (800ac2c <HW_IPCC_Tx_Handler+0x88>)
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	f013 0f08 	tst.w	r3, #8
 800abea:	d104      	bne.n	800abf6 <HW_IPCC_Tx_Handler+0x52>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800abec:	4b0f      	ldr	r3, [pc, #60]	; (800ac2c <HW_IPCC_Tx_Handler+0x88>)
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800abf4:	d013      	beq.n	800ac1e <HW_IPCC_Tx_Handler+0x7a>
 800abf6:	4b0d      	ldr	r3, [pc, #52]	; (800ac2c <HW_IPCC_Tx_Handler+0x88>)
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	f013 0f20 	tst.w	r3, #32
 800abfe:	d104      	bne.n	800ac0a <HW_IPCC_Tx_Handler+0x66>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800ac00:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <HW_IPCC_Tx_Handler+0x88>)
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800ac08:	d00c      	beq.n	800ac24 <HW_IPCC_Tx_Handler+0x80>
}
 800ac0a:	bd08      	pop	{r3, pc}
    HW_IPCC_SYS_CmdEvtHandler();
 800ac0c:	f7ff ff74 	bl	800aaf8 <HW_IPCC_SYS_CmdEvtHandler>
 800ac10:	e7fb      	b.n	800ac0a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_OT_CmdEvtHandler();
 800ac12:	f7ff ffbb 	bl	800ab8c <HW_IPCC_OT_CmdEvtHandler>
 800ac16:	e7f8      	b.n	800ac0a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_SYS_CmdEvtHandler();
 800ac18:	f7ff ff6e 	bl	800aaf8 <HW_IPCC_SYS_CmdEvtHandler>
 800ac1c:	e7f5      	b.n	800ac0a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_MM_FreeBufHandler();
 800ac1e:	f7ff fef7 	bl	800aa10 <HW_IPCC_MM_FreeBufHandler>
 800ac22:	e7f2      	b.n	800ac0a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_BLE_AclDataEvtHandler();
 800ac24:	f7ff ff3e 	bl	800aaa4 <HW_IPCC_BLE_AclDataEvtHandler>
  return;
 800ac28:	e7ef      	b.n	800ac0a <HW_IPCC_Tx_Handler+0x66>
 800ac2a:	bf00      	nop
 800ac2c:	58000c00 	.word	0x58000c00

0800ac30 <HW_IPCC_THREAD_NotEvtHandler>:
{
 800ac30:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel);
 800ac32:	4a04      	ldr	r2, [pc, #16]	; (800ac44 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 800ac34:	6853      	ldr	r3, [r2, #4]
 800ac36:	f043 0304 	orr.w	r3, r3, #4
 800ac3a:	6053      	str	r3, [r2, #4]
  HW_IPCC_THREAD_EvtNot();
 800ac3c:	f7ff fa32 	bl	800a0a4 <HW_IPCC_THREAD_EvtNot>
}
 800ac40:	bd08      	pop	{r3, pc}
 800ac42:	bf00      	nop
 800ac44:	58000c00 	.word	0x58000c00

0800ac48 <HW_IPCC_MM_SendFreeBuf>:
{
 800ac48:	b508      	push	{r3, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ac4a:	4b09      	ldr	r3, [pc, #36]	; (800ac70 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	f013 0f08 	tst.w	r3, #8
 800ac52:	d105      	bne.n	800ac60 <HW_IPCC_MM_SendFreeBuf+0x18>
    cb();
 800ac54:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800ac56:	4b06      	ldr	r3, [pc, #24]	; (800ac70 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800ac58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ac5c:	609a      	str	r2, [r3, #8]
}
 800ac5e:	bd08      	pop	{r3, pc}
    FreeBufCb = cb;
 800ac60:	4b04      	ldr	r3, [pc, #16]	; (800ac74 <HW_IPCC_MM_SendFreeBuf+0x2c>)
 800ac62:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ac64:	4a02      	ldr	r2, [pc, #8]	; (800ac70 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800ac66:	6853      	ldr	r3, [r2, #4]
 800ac68:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800ac6c:	6053      	str	r3, [r2, #4]
 800ac6e:	e7f6      	b.n	800ac5e <HW_IPCC_MM_SendFreeBuf+0x16>
 800ac70:	58000c00 	.word	0x58000c00
 800ac74:	20004160 	.word	0x20004160

0800ac78 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800ac78:	4a02      	ldr	r2, [pc, #8]	; (800ac84 <HW_IPCC_TRACES_Init+0xc>)
 800ac7a:	6853      	ldr	r3, [r2, #4]
 800ac7c:	f023 0308 	bic.w	r3, r3, #8
 800ac80:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 800ac82:	4770      	bx	lr
 800ac84:	58000c00 	.word	0x58000c00

0800ac88 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800ac88:	b508      	push	{r3, lr}
  HW_IPCC_TRACES_EvtNot();
 800ac8a:	f7ff fa5d 	bl	800a148 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800ac8e:	4b02      	ldr	r3, [pc, #8]	; (800ac98 <HW_IPCC_TRACES_EvtHandler+0x10>)
 800ac90:	2208      	movs	r2, #8
 800ac92:	609a      	str	r2, [r3, #8]

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 800ac94:	bd08      	pop	{r3, pc}
 800ac96:	bf00      	nop
 800ac98:	58000c00 	.word	0x58000c00

0800ac9c <HW_IPCC_Rx_Handler>:
{
 800ac9c:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ac9e:	4b21      	ldr	r3, [pc, #132]	; (800ad24 <HW_IPCC_Rx_Handler+0x88>)
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	f013 0f02 	tst.w	r3, #2
 800aca6:	d004      	beq.n	800acb2 <HW_IPCC_Rx_Handler+0x16>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800aca8:	4b1e      	ldr	r3, [pc, #120]	; (800ad24 <HW_IPCC_Rx_Handler+0x88>)
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	f013 0f02 	tst.w	r3, #2
 800acb0:	d028      	beq.n	800ad04 <HW_IPCC_Rx_Handler+0x68>
 800acb2:	4b1c      	ldr	r3, [pc, #112]	; (800ad24 <HW_IPCC_Rx_Handler+0x88>)
 800acb4:	69db      	ldr	r3, [r3, #28]
 800acb6:	f013 0f04 	tst.w	r3, #4
 800acba:	d004      	beq.n	800acc6 <HW_IPCC_Rx_Handler+0x2a>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800acbc:	4b19      	ldr	r3, [pc, #100]	; (800ad24 <HW_IPCC_Rx_Handler+0x88>)
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	f013 0f04 	tst.w	r3, #4
 800acc4:	d021      	beq.n	800ad0a <HW_IPCC_Rx_Handler+0x6e>
 800acc6:	4b17      	ldr	r3, [pc, #92]	; (800ad24 <HW_IPCC_Rx_Handler+0x88>)
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	f013 0f10 	tst.w	r3, #16
 800acce:	d004      	beq.n	800acda <HW_IPCC_Rx_Handler+0x3e>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 800acd0:	4b14      	ldr	r3, [pc, #80]	; (800ad24 <HW_IPCC_Rx_Handler+0x88>)
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f013 0f10 	tst.w	r3, #16
 800acd8:	d01a      	beq.n	800ad10 <HW_IPCC_Rx_Handler+0x74>
 800acda:	4b12      	ldr	r3, [pc, #72]	; (800ad24 <HW_IPCC_Rx_Handler+0x88>)
 800acdc:	69db      	ldr	r3, [r3, #28]
 800acde:	f013 0f01 	tst.w	r3, #1
 800ace2:	d004      	beq.n	800acee <HW_IPCC_Rx_Handler+0x52>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800ace4:	4b0f      	ldr	r3, [pc, #60]	; (800ad24 <HW_IPCC_Rx_Handler+0x88>)
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	f013 0f01 	tst.w	r3, #1
 800acec:	d013      	beq.n	800ad16 <HW_IPCC_Rx_Handler+0x7a>
 800acee:	4b0d      	ldr	r3, [pc, #52]	; (800ad24 <HW_IPCC_Rx_Handler+0x88>)
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	f013 0f08 	tst.w	r3, #8
 800acf6:	d004      	beq.n	800ad02 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800acf8:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <HW_IPCC_Rx_Handler+0x88>)
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	f013 0f08 	tst.w	r3, #8
 800ad00:	d00c      	beq.n	800ad1c <HW_IPCC_Rx_Handler+0x80>
}
 800ad02:	bd08      	pop	{r3, pc}
      HW_IPCC_SYS_EvtHandler();
 800ad04:	f7ff ff04 	bl	800ab10 <HW_IPCC_SYS_EvtHandler>
 800ad08:	e7fb      	b.n	800ad02 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_THREAD_NotEvtHandler();
 800ad0a:	f7ff ff91 	bl	800ac30 <HW_IPCC_THREAD_NotEvtHandler>
 800ad0e:	e7f8      	b.n	800ad02 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_THREAD_CliNotEvtHandler();
 800ad10:	f7ff fe90 	bl	800aa34 <HW_IPCC_THREAD_CliNotEvtHandler>
 800ad14:	e7f5      	b.n	800ad02 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_BLE_EvtHandler();
 800ad16:	f7ff fed1 	bl	800aabc <HW_IPCC_BLE_EvtHandler>
 800ad1a:	e7f2      	b.n	800ad02 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_TRACES_EvtHandler();
 800ad1c:	f7ff ffb4 	bl	800ac88 <HW_IPCC_TRACES_EvtHandler>
  return;
 800ad20:	e7ef      	b.n	800ad02 <HW_IPCC_Rx_Handler+0x66>
 800ad22:	bf00      	nop
 800ad24:	58000c00 	.word	0x58000c00

0800ad28 <UTIL_LPM_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4a02      	ldr	r2, [pc, #8]	; (800ad34 <UTIL_LPM_Init+0xc>)
 800ad2c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ad2e:	4a02      	ldr	r2, [pc, #8]	; (800ad38 <UTIL_LPM_Init+0x10>)
 800ad30:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ad32:	4770      	bx	lr
 800ad34:	20004168 	.word	0x20004168
 800ad38:	20004164 	.word	0x20004164

0800ad3c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad3c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ad40:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800ad42:	b141      	cbz	r1, 800ad56 <UTIL_LPM_SetOffMode+0x1a>
 800ad44:	2901      	cmp	r1, #1
 800ad46:	d103      	bne.n	800ad50 <UTIL_LPM_SetOffMode+0x14>
  {
    case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ad48:	4906      	ldr	r1, [pc, #24]	; (800ad64 <UTIL_LPM_SetOffMode+0x28>)
 800ad4a:	680a      	ldr	r2, [r1, #0]
 800ad4c:	4310      	orrs	r0, r2
 800ad4e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad50:	f383 8810 	msr	PRIMASK, r3
    default:
      break;
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ad54:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800ad56:	4903      	ldr	r1, [pc, #12]	; (800ad64 <UTIL_LPM_SetOffMode+0x28>)
 800ad58:	680a      	ldr	r2, [r1, #0]
 800ad5a:	ea22 0000 	bic.w	r0, r2, r0
 800ad5e:	6008      	str	r0, [r1, #0]
      break;
 800ad60:	e7f6      	b.n	800ad50 <UTIL_LPM_SetOffMode+0x14>
 800ad62:	bf00      	nop
 800ad64:	20004164 	.word	0x20004164

0800ad68 <__libc_init_array>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	4e0d      	ldr	r6, [pc, #52]	; (800ada0 <__libc_init_array+0x38>)
 800ad6c:	4c0d      	ldr	r4, [pc, #52]	; (800ada4 <__libc_init_array+0x3c>)
 800ad6e:	1ba4      	subs	r4, r4, r6
 800ad70:	10a4      	asrs	r4, r4, #2
 800ad72:	2500      	movs	r5, #0
 800ad74:	42a5      	cmp	r5, r4
 800ad76:	d109      	bne.n	800ad8c <__libc_init_array+0x24>
 800ad78:	4e0b      	ldr	r6, [pc, #44]	; (800ada8 <__libc_init_array+0x40>)
 800ad7a:	4c0c      	ldr	r4, [pc, #48]	; (800adac <__libc_init_array+0x44>)
 800ad7c:	f000 f82c 	bl	800add8 <_init>
 800ad80:	1ba4      	subs	r4, r4, r6
 800ad82:	10a4      	asrs	r4, r4, #2
 800ad84:	2500      	movs	r5, #0
 800ad86:	42a5      	cmp	r5, r4
 800ad88:	d105      	bne.n	800ad96 <__libc_init_array+0x2e>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad90:	4798      	blx	r3
 800ad92:	3501      	adds	r5, #1
 800ad94:	e7ee      	b.n	800ad74 <__libc_init_array+0xc>
 800ad96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad9a:	4798      	blx	r3
 800ad9c:	3501      	adds	r5, #1
 800ad9e:	e7f2      	b.n	800ad86 <__libc_init_array+0x1e>
 800ada0:	0800b1b4 	.word	0x0800b1b4
 800ada4:	0800b1b4 	.word	0x0800b1b4
 800ada8:	0800b1b4 	.word	0x0800b1b4
 800adac:	0800b1b8 	.word	0x0800b1b8

0800adb0 <memcpy>:
 800adb0:	b510      	push	{r4, lr}
 800adb2:	1e43      	subs	r3, r0, #1
 800adb4:	440a      	add	r2, r1
 800adb6:	4291      	cmp	r1, r2
 800adb8:	d100      	bne.n	800adbc <memcpy+0xc>
 800adba:	bd10      	pop	{r4, pc}
 800adbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adc4:	e7f7      	b.n	800adb6 <memcpy+0x6>

0800adc6 <memset>:
 800adc6:	4402      	add	r2, r0
 800adc8:	4603      	mov	r3, r0
 800adca:	4293      	cmp	r3, r2
 800adcc:	d100      	bne.n	800add0 <memset+0xa>
 800adce:	4770      	bx	lr
 800add0:	f803 1b01 	strb.w	r1, [r3], #1
 800add4:	e7f9      	b.n	800adca <memset+0x4>
	...

0800add8 <_init>:
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	bf00      	nop
 800addc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adde:	bc08      	pop	{r3}
 800ade0:	469e      	mov	lr, r3
 800ade2:	4770      	bx	lr

0800ade4 <_fini>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	bf00      	nop
 800ade8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adea:	bc08      	pop	{r3}
 800adec:	469e      	mov	lr, r3
 800adee:	4770      	bx	lr
