
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b03c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001298  0801b180  0801b180  0002b180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c418  0801c418  0002c418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c420  0801c420  0002c420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c424  0801c424  0002c424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  20000004  0801c428  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200002d8  0801c6fc  000302d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000374  0801c795  00030374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00029db8  20000388  0801c7a6  00030388  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2002a140  0801c7a6  0003a140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030385  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   00072b80  00000000  00000000  000303b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000c974  00000000  00000000  000a2f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00004200  00000000  00000000  000af8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003c68  00000000  00000000  000b3ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002bbce  00000000  00000000  000b7718  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0001a206  00000000  00000000  000e32e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000fd4ec  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00011028  00000000  00000000  000fd5dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  0010e604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000388 	.word	0x20000388
 800015c:	00000000 	.word	0x00000000
 8000160:	0801b164 	.word	0x0801b164

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000038c 	.word	0x2000038c
 800017c:	0801b164 	.word	0x0801b164

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e58:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e9e:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec2:	4811      	ldr	r0, [pc, #68]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000ec4:	f005 fae6 	bl	8006494 <HAL_ADC_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ece:	f002 fe15 	bl	8003afc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_ADC1_Init+0xd0>)
 8000ed4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000eda:	2306      	movs	r3, #6
 8000edc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ede:	237f      	movs	r3, #127	; 0x7f
 8000ee0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eea:	463b      	mov	r3, r7
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000ef0:	f005 fd06 	bl	8006900 <HAL_ADC_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000efa:	f002 fdff 	bl	8003afc <Error_Handler>
  }

}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20027a7c 	.word	0x20027a7c
 8000f0c:	50040000 	.word	0x50040000
 8000f10:	14f00020 	.word	0x14f00020

08000f14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <HAL_ADC_MspInit+0xa4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d13c      	bne.n	8000fb0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f36:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f3a:	f7ff ff67 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f7ff ff64 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f44:	2301      	movs	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f007 f8f9 	bl	8008150 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_ADC_MspInit+0xac>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f66:	2205      	movs	r2, #5
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000f96:	f006 fd9d 	bl	8007ad4 <HAL_DMA_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000fa0:	f002 fdac 	bl	8003afc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000fa8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_ADC_MspInit+0xa8>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	50040000 	.word	0x50040000
 8000fbc:	20027ae0 	.word	0x20027ae0
 8000fc0:	40020008 	.word	0x40020008

08000fc4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000ff0:	f000 f80a 	bl	8001008 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff4:	4903      	ldr	r1, [pc, #12]	; (8001004 <APPE_Init+0x18>)
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f001 fe3c 	bl	8002c74 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ffc:	f000 f80e 	bl	800101c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001000:	bf00      	nop
}
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200287e8 	.word	0x200287e8

08001008 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800100c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001010:	f7ff ffd8 	bl	8000fc4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001014:	f018 fc06 	bl	8019824 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001018:	bf00      	nop
}
 800101a:	bd80      	pop	{r7, pc}

0800101c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001022:	f014 fdf1 	bl	8015c08 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001026:	2000      	movs	r0, #0
 8001028:	f00f f9e4 	bl	80103f4 <osMutexNew>
 800102c:	4602      	mov	r2, r0
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <appe_Tl_Init+0x70>)
 8001030:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2001      	movs	r0, #1
 8001038:	f00f fb24 	bl	8010684 <osSemaphoreNew>
 800103c:	4602      	mov	r2, r0
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <appe_Tl_Init+0x74>)
 8001040:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <appe_Tl_Init+0x78>)
 8001044:	2100      	movs	r1, #0
 8001046:	4814      	ldr	r0, [pc, #80]	; (8001098 <appe_Tl_Init+0x7c>)
 8001048:	f00e fe96 	bl	800fd78 <osThreadNew>
 800104c:	4602      	mov	r2, r0
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x80>)
 8001050:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x84>)
 8001054:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <appe_Tl_Init+0x88>)
 8001058:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	4812      	ldr	r0, [pc, #72]	; (80010a8 <appe_Tl_Init+0x8c>)
 8001060:	f014 fb0c 	bl	801567c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x90>)
 800106a:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <appe_Tl_Init+0x94>)
 800106e:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001070:	f240 533c 	movw	r3, #1340	; 0x53c
 8001074:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4618      	mov	r0, r3
 800107c:	f014 ff02 	bl	8015e84 <TL_MM_Init>

  TL_Enable();
 8001080:	f014 fdbb 	bl	8015bfa <TL_Enable>

  return;
 8001084:	bf00      	nop
}
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20027b40 	.word	0x20027b40
 8001090:	20027b58 	.word	0x20027b58
 8001094:	0801b68c 	.word	0x0801b68c
 8001098:	0800119d 	.word	0x0800119d
 800109c:	20027b44 	.word	0x20027b44
 80010a0:	20030600 	.word	0x20030600
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010f5 	.word	0x080010f5
 80010ac:	2003070c 	.word	0x2003070c
 80010b0:	200300c4 	.word	0x200300c4

080010b4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <APPE_SysStatusNot+0x16>
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d008      	beq.n	80010da <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c8:	e00d      	b.n	80010e6 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <APPE_SysStatusNot+0x3c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f04f 31ff 	mov.w	r1, #4294967295
 80010d2:	4618      	mov	r0, r3
 80010d4:	f00f fa28 	bl	8010528 <osMutexAcquire>
      break;
 80010d8:	e005      	b.n	80010e6 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <APPE_SysStatusNot+0x3c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f00f fa80 	bl	80105e4 <osMutexRelease>
      break;
 80010e4:	bf00      	nop
  }
  return;
 80010e6:	bf00      	nop
}
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20027b40 	.word	0x20027b40

080010f4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	330b      	adds	r3, #11
 8001102:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110e:	d004      	beq.n	800111a <APPE_SysUserEvtRx+0x26>
 8001110:	f249 2201 	movw	r2, #37377	; 0x9201
 8001114:	4293      	cmp	r3, r2
 8001116:	d003      	beq.n	8001120 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001118:	e008      	b.n	800112c <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 800111a:	f000 f833 	bl	8001184 <APPE_SysEvtReadyProcessing>
         break;
 800111e:	e005      	b.n	800112c <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	789b      	ldrb	r3, [r3, #2]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f805 	bl	8001134 <APPE_SysEvtError>
         break;
 800112a:	bf00      	nop
  }
  return;
 800112c:	bf00      	nop
}
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b7d      	cmp	r3, #125	; 0x7d
 8001142:	d002      	beq.n	800114a <APPE_SysEvtError+0x16>
 8001144:	2b7e      	cmp	r3, #126	; 0x7e
 8001146:	d006      	beq.n	8001156 <APPE_SysEvtError+0x22>
 8001148:	e00b      	b.n	8001162 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <APPE_SysEvtError+0x44>)
 800114c:	2101      	movs	r1, #1
 800114e:	2000      	movs	r0, #0
 8001150:	f004 f858 	bl	8005204 <logApplication>
       break;
 8001154:	e00c      	b.n	8001170 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <APPE_SysEvtError+0x48>)
 8001158:	2101      	movs	r1, #1
 800115a:	2000      	movs	r0, #0
 800115c:	f004 f852 	bl	8005204 <logApplication>
       break;
 8001160:	e006      	b.n	8001170 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <APPE_SysEvtError+0x4c>)
 8001166:	2101      	movs	r1, #1
 8001168:	2000      	movs	r0, #0
 800116a:	f004 f84b 	bl	8005204 <logApplication>
       break;
 800116e:	bf00      	nop
  }
  return;
 8001170:	bf00      	nop
}
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	0801b198 	.word	0x0801b198
 800117c:	0801b1bc 	.word	0x0801b1bc
 8001180:	0801b1dc 	.word	0x0801b1dc

08001184 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001188:	f014 feec 	bl	8015f64 <TL_TRACES_Init>

  APP_THREAD_Init();
 800118c:	f016 fa8c 	bl	80176a8 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001190:	2100      	movs	r1, #0
 8001192:	2001      	movs	r0, #1
 8001194:	f018 fb58 	bl	8019848 <UTIL_LPM_SetOffMode>
  return;
 8001198:	bf00      	nop
}
 800119a:	bd80      	pop	{r7, pc}

0800119c <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	2100      	movs	r1, #0
 80011aa:	2001      	movs	r0, #1
 80011ac:	f00e ff3c 	bl	8010028 <osThreadFlagsWait>
     shci_user_evt_proc();
 80011b0:	f014 fa80 	bl	80156b4 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b4:	e7f6      	b.n	80011a4 <ShciUserEvtProcess+0x8>
	...

080011b8 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <shci_notify_asynch_evt+0x1c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00e fe7c 	bl	800fec4 <osThreadFlagsSet>
  return;
 80011cc:	bf00      	nop
}
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20027b44 	.word	0x20027b44

080011d8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <shci_cmd_resp_release+0x1c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00f fb51 	bl	801088c <osSemaphoreRelease>
  return;
 80011ea:	bf00      	nop
}
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20027b58 	.word	0x20027b58

080011f8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <shci_cmd_resp_wait+0x20>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	4618      	mov	r0, r3
 800120a:	f00f fad9 	bl	80107c0 <osSemaphoreAcquire>
  return;
 800120e:	bf00      	nop
}
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20027b58 	.word	0x20027b58

0800121c <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f014 fe69 	bl	8015efc <TL_MM_EvtDone>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001244:	f004 fee4 	bl	8006010 <HAL_GetTick>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}

0800124e <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <vApplicationStackOverflowHook+0x24>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	3301      	adds	r3, #1
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <vApplicationStackOverflowHook+0x24>)
 8001272:	701a      	strb	r2, [r3, #0]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	200003a4 	.word	0x200003a4

08001284 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <vApplicationMallocFailedHook+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	3301      	adds	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <vApplicationMallocFailedHook+0x1c>)
 8001294:	701a      	strb	r2, [r3, #0]

}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	200003a4 	.word	0x200003a4

080012a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a8:	4a70      	ldr	r2, [pc, #448]	; (800146c <MX_FREERTOS_Init+0x1c8>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	2001      	movs	r0, #1
 80012ae:	f00f f9e9 	bl	8010684 <osSemaphoreNew>
 80012b2:	4602      	mov	r2, r0
 80012b4:	4b6e      	ldr	r3, [pc, #440]	; (8001470 <MX_FREERTOS_Init+0x1cc>)
 80012b6:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012b8:	4a6e      	ldr	r2, [pc, #440]	; (8001474 <MX_FREERTOS_Init+0x1d0>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	2001      	movs	r0, #1
 80012be:	f00f f9e1 	bl	8010684 <osSemaphoreNew>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <MX_FREERTOS_Init+0x1d4>)
 80012c6:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012c8:	4a6c      	ldr	r2, [pc, #432]	; (800147c <MX_FREERTOS_Init+0x1d8>)
 80012ca:	2101      	movs	r1, #1
 80012cc:	2001      	movs	r0, #1
 80012ce:	f00f f9d9 	bl	8010684 <osSemaphoreNew>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <MX_FREERTOS_Init+0x1dc>)
 80012d6:	601a      	str	r2, [r3, #0]

  /* creation of lightingLabDemoEnd */
  lightingLabDemoEndHandle = osSemaphoreNew(1, 1, &lightingLabDemoEnd_attributes);
 80012d8:	4a6a      	ldr	r2, [pc, #424]	; (8001484 <MX_FREERTOS_Init+0x1e0>)
 80012da:	2101      	movs	r1, #1
 80012dc:	2001      	movs	r0, #1
 80012de:	f00f f9d1 	bl	8010684 <osSemaphoreNew>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b68      	ldr	r3, [pc, #416]	; (8001488 <MX_FREERTOS_Init+0x1e4>)
 80012e6:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, (void*) &viveStateVar, &viveTimer_attributes);
 80012e8:	4b68      	ldr	r3, [pc, #416]	; (800148c <MX_FREERTOS_Init+0x1e8>)
 80012ea:	4a69      	ldr	r2, [pc, #420]	; (8001490 <MX_FREERTOS_Init+0x1ec>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	4869      	ldr	r0, [pc, #420]	; (8001494 <MX_FREERTOS_Init+0x1f0>)
 80012f0:	f00e ff72 	bl	80101d8 <osTimerNew>
 80012f4:	4602      	mov	r2, r0
 80012f6:	4b68      	ldr	r3, [pc, #416]	; (8001498 <MX_FREERTOS_Init+0x1f4>)
 80012f8:	601a      	str	r2, [r3, #0]

  /* creation of watchDogTimer */
  watchDogTimerHandle = osTimerNew(watchDogReset, osTimerPeriodic, NULL, &watchDogTimer_attributes);
 80012fa:	4b68      	ldr	r3, [pc, #416]	; (800149c <MX_FREERTOS_Init+0x1f8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	2101      	movs	r1, #1
 8001300:	4867      	ldr	r0, [pc, #412]	; (80014a0 <MX_FREERTOS_Init+0x1fc>)
 8001302:	f00e ff69 	bl	80101d8 <osTimerNew>
 8001306:	4602      	mov	r2, r0
 8001308:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <MX_FREERTOS_Init+0x200>)
 800130a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
//  /* start timers, add new ones, ... */
  osTimerStart(watchDogTimerHandle, WATCHDOG_PERIOD);
 800130c:	4b65      	ldr	r3, [pc, #404]	; (80014a4 <MX_FREERTOS_Init+0x200>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f241 3188 	movw	r1, #5000	; 0x1388
 8001314:	4618      	mov	r0, r3
 8001316:	f00e ffe3 	bl	80102e0 <osTimerStart>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 800131a:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <MX_FREERTOS_Init+0x204>)
 800131c:	216c      	movs	r1, #108	; 0x6c
 800131e:	200a      	movs	r0, #10
 8001320:	f00f fb0c 	bl	801093c <osMessageQueueNew>
 8001324:	4602      	mov	r2, r0
 8001326:	4b61      	ldr	r3, [pc, #388]	; (80014ac <MX_FREERTOS_Init+0x208>)
 8001328:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 800132a:	4a61      	ldr	r2, [pc, #388]	; (80014b0 <MX_FREERTOS_Init+0x20c>)
 800132c:	2104      	movs	r1, #4
 800132e:	2003      	movs	r0, #3
 8001330:	f00f fb04 	bl	801093c <osMessageQueueNew>
 8001334:	4602      	mov	r2, r0
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <MX_FREERTOS_Init+0x210>)
 8001338:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 800133a:	4a5f      	ldr	r2, [pc, #380]	; (80014b8 <MX_FREERTOS_Init+0x214>)
 800133c:	2106      	movs	r1, #6
 800133e:	2004      	movs	r0, #4
 8001340:	f00f fafc 	bl	801093c <osMessageQueueNew>
 8001344:	4602      	mov	r2, r0
 8001346:	4b5d      	ldr	r3, [pc, #372]	; (80014bc <MX_FREERTOS_Init+0x218>)
 8001348:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 800134a:	4a5d      	ldr	r2, [pc, #372]	; (80014c0 <MX_FREERTOS_Init+0x21c>)
 800134c:	2118      	movs	r1, #24
 800134e:	200a      	movs	r0, #10
 8001350:	f00f faf4 	bl	801093c <osMessageQueueNew>
 8001354:	4602      	mov	r2, r0
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <MX_FREERTOS_Init+0x220>)
 8001358:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 800135a:	4a5b      	ldr	r2, [pc, #364]	; (80014c8 <MX_FREERTOS_Init+0x224>)
 800135c:	2128      	movs	r1, #40	; 0x28
 800135e:	200a      	movs	r0, #10
 8001360:	f00f faec 	bl	801093c <osMessageQueueNew>
 8001364:	4602      	mov	r2, r0
 8001366:	4b59      	ldr	r3, [pc, #356]	; (80014cc <MX_FREERTOS_Init+0x228>)
 8001368:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 800136a:	4a59      	ldr	r2, [pc, #356]	; (80014d0 <MX_FREERTOS_Init+0x22c>)
 800136c:	2110      	movs	r1, #16
 800136e:	200a      	movs	r0, #10
 8001370:	f00f fae4 	bl	801093c <osMessageQueueNew>
 8001374:	4602      	mov	r2, r0
 8001376:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <MX_FREERTOS_Init+0x230>)
 8001378:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 800137a:	4a57      	ldr	r2, [pc, #348]	; (80014d8 <MX_FREERTOS_Init+0x234>)
 800137c:	2118      	movs	r1, #24
 800137e:	2003      	movs	r0, #3
 8001380:	f00f fadc 	bl	801093c <osMessageQueueNew>
 8001384:	4602      	mov	r2, r0
 8001386:	4b55      	ldr	r3, [pc, #340]	; (80014dc <MX_FREERTOS_Init+0x238>)
 8001388:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 800138a:	4a55      	ldr	r2, [pc, #340]	; (80014e0 <MX_FREERTOS_Init+0x23c>)
 800138c:	2106      	movs	r1, #6
 800138e:	200a      	movs	r0, #10
 8001390:	f00f fad4 	bl	801093c <osMessageQueueNew>
 8001394:	4602      	mov	r2, r0
 8001396:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <MX_FREERTOS_Init+0x240>)
 8001398:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 800139a:	4a53      	ldr	r2, [pc, #332]	; (80014e8 <MX_FREERTOS_Init+0x244>)
 800139c:	2118      	movs	r1, #24
 800139e:	200a      	movs	r0, #10
 80013a0:	f00f facc 	bl	801093c <osMessageQueueNew>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b51      	ldr	r3, [pc, #324]	; (80014ec <MX_FREERTOS_Init+0x248>)
 80013a8:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 80013aa:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <MX_FREERTOS_Init+0x24c>)
 80013ac:	2104      	movs	r1, #4
 80013ae:	2001      	movs	r0, #1
 80013b0:	f00f fac4 	bl	801093c <osMessageQueueNew>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <MX_FREERTOS_Init+0x250>)
 80013b8:	601a      	str	r2, [r3, #0]

  /* creation of msgPasssingUSB_Queue */
  msgPasssingUSB_QueueHandle = osMessageQueueNew (5, 11, &msgPasssingUSB_Queue_attributes);
 80013ba:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <MX_FREERTOS_Init+0x254>)
 80013bc:	210b      	movs	r1, #11
 80013be:	2005      	movs	r0, #5
 80013c0:	f00f fabc 	bl	801093c <osMessageQueueNew>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b4d      	ldr	r3, [pc, #308]	; (80014fc <MX_FREERTOS_Init+0x258>)
 80013c8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 80013ca:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <MX_FREERTOS_Init+0x25c>)
 80013cc:	2100      	movs	r1, #0
 80013ce:	484d      	ldr	r0, [pc, #308]	; (8001504 <MX_FREERTOS_Init+0x260>)
 80013d0:	f00e fcd2 	bl	800fd78 <osThreadNew>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <MX_FREERTOS_Init+0x264>)
 80013d8:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 80013da:	4a4c      	ldr	r2, [pc, #304]	; (800150c <MX_FREERTOS_Init+0x268>)
 80013dc:	2100      	movs	r1, #0
 80013de:	484c      	ldr	r0, [pc, #304]	; (8001510 <MX_FREERTOS_Init+0x26c>)
 80013e0:	f00e fcca 	bl	800fd78 <osThreadNew>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <MX_FREERTOS_Init+0x270>)
 80013e8:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80013ea:	4a4b      	ldr	r2, [pc, #300]	; (8001518 <MX_FREERTOS_Init+0x274>)
 80013ec:	2100      	movs	r1, #0
 80013ee:	484b      	ldr	r0, [pc, #300]	; (800151c <MX_FREERTOS_Init+0x278>)
 80013f0:	f00e fcc2 	bl	800fd78 <osThreadNew>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <MX_FREERTOS_Init+0x27c>)
 80013f8:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80013fa:	4a4a      	ldr	r2, [pc, #296]	; (8001524 <MX_FREERTOS_Init+0x280>)
 80013fc:	2100      	movs	r1, #0
 80013fe:	484a      	ldr	r0, [pc, #296]	; (8001528 <MX_FREERTOS_Init+0x284>)
 8001400:	f00e fcba 	bl	800fd78 <osThreadNew>
 8001404:	4602      	mov	r2, r0
 8001406:	4b49      	ldr	r3, [pc, #292]	; (800152c <MX_FREERTOS_Init+0x288>)
 8001408:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 800140a:	4a49      	ldr	r2, [pc, #292]	; (8001530 <MX_FREERTOS_Init+0x28c>)
 800140c:	2100      	movs	r1, #0
 800140e:	4849      	ldr	r0, [pc, #292]	; (8001534 <MX_FREERTOS_Init+0x290>)
 8001410:	f00e fcb2 	bl	800fd78 <osThreadNew>
 8001414:	4602      	mov	r2, r0
 8001416:	4b48      	ldr	r3, [pc, #288]	; (8001538 <MX_FREERTOS_Init+0x294>)
 8001418:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 800141a:	4a48      	ldr	r2, [pc, #288]	; (800153c <MX_FREERTOS_Init+0x298>)
 800141c:	2100      	movs	r1, #0
 800141e:	4848      	ldr	r0, [pc, #288]	; (8001540 <MX_FREERTOS_Init+0x29c>)
 8001420:	f00e fcaa 	bl	800fd78 <osThreadNew>
 8001424:	4602      	mov	r2, r0
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <MX_FREERTOS_Init+0x2a0>)
 8001428:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 800142a:	4a47      	ldr	r2, [pc, #284]	; (8001548 <MX_FREERTOS_Init+0x2a4>)
 800142c:	2100      	movs	r1, #0
 800142e:	4847      	ldr	r0, [pc, #284]	; (800154c <MX_FREERTOS_Init+0x2a8>)
 8001430:	f00e fca2 	bl	800fd78 <osThreadNew>
 8001434:	4602      	mov	r2, r0
 8001436:	4b46      	ldr	r3, [pc, #280]	; (8001550 <MX_FREERTOS_Init+0x2ac>)
 8001438:	601a      	str	r2, [r3, #0]

  /* creation of msgPassingUSB_T */
  msgPassingUSB_THandle = osThreadNew(msgPassingUSB, NULL, &msgPassingUSB_T_attributes);
 800143a:	4a46      	ldr	r2, [pc, #280]	; (8001554 <MX_FREERTOS_Init+0x2b0>)
 800143c:	2100      	movs	r1, #0
 800143e:	4846      	ldr	r0, [pc, #280]	; (8001558 <MX_FREERTOS_Init+0x2b4>)
 8001440:	f00e fc9a 	bl	800fd78 <osThreadNew>
 8001444:	4602      	mov	r2, r0
 8001446:	4b45      	ldr	r3, [pc, #276]	; (800155c <MX_FREERTOS_Init+0x2b8>)
 8001448:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_FREERTOS_Init+0x1d4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f00f f9b5 	bl	80107c0 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_FREERTOS_Init+0x1dc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f00f f9af 	bl	80107c0 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 8001462:	f7ff fdc3 	bl	8000fec <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	0801b8f8 	.word	0x0801b8f8
 8001470:	20027c50 	.word	0x20027c50
 8001474:	0801b908 	.word	0x0801b908
 8001478:	20028098 	.word	0x20028098
 800147c:	0801b918 	.word	0x0801b918
 8001480:	20028090 	.word	0x20028090
 8001484:	0801b928 	.word	0x0801b928
 8001488:	20027c5c 	.word	0x20027c5c
 800148c:	0801b8d8 	.word	0x0801b8d8
 8001490:	20000c6c 	.word	0x20000c6c
 8001494:	0800327d 	.word	0x0800327d
 8001498:	20027c3c 	.word	0x20027c3c
 800149c:	0801b8e8 	.word	0x0801b8e8
 80014a0:	080015e5 	.word	0x080015e5
 80014a4:	200280a8 	.word	0x200280a8
 80014a8:	0801b7d0 	.word	0x0801b7d0
 80014ac:	200280a4 	.word	0x200280a4
 80014b0:	0801b7e8 	.word	0x0801b7e8
 80014b4:	20027c58 	.word	0x20027c58
 80014b8:	0801b800 	.word	0x0801b800
 80014bc:	20028088 	.word	0x20028088
 80014c0:	0801b818 	.word	0x0801b818
 80014c4:	20027c60 	.word	0x20027c60
 80014c8:	0801b830 	.word	0x0801b830
 80014cc:	20027c54 	.word	0x20027c54
 80014d0:	0801b848 	.word	0x0801b848
 80014d4:	20027c44 	.word	0x20027c44
 80014d8:	0801b860 	.word	0x0801b860
 80014dc:	20027c68 	.word	0x20027c68
 80014e0:	0801b878 	.word	0x0801b878
 80014e4:	20027b48 	.word	0x20027b48
 80014e8:	0801b890 	.word	0x0801b890
 80014ec:	20027b4c 	.word	0x20027b4c
 80014f0:	0801b8a8 	.word	0x0801b8a8
 80014f4:	20027c64 	.word	0x20027c64
 80014f8:	0801b8c0 	.word	0x0801b8c0
 80014fc:	20027c4c 	.word	0x20027c4c
 8001500:	0801b6b0 	.word	0x0801b6b0
 8001504:	08001561 	.word	0x08001561
 8001508:	20027c30 	.word	0x20027c30
 800150c:	0801b6d4 	.word	0x0801b6d4
 8001510:	0800381d 	.word	0x0800381d
 8001514:	20027c40 	.word	0x20027c40
 8001518:	0801b6f8 	.word	0x0801b6f8
 800151c:	08003b0d 	.word	0x08003b0d
 8001520:	2002808c 	.word	0x2002808c
 8001524:	0801b71c 	.word	0x0801b71c
 8001528:	08003075 	.word	0x08003075
 800152c:	200280ac 	.word	0x200280ac
 8001530:	0801b740 	.word	0x0801b740
 8001534:	080031ed 	.word	0x080031ed
 8001538:	2002809c 	.word	0x2002809c
 800153c:	0801b764 	.word	0x0801b764
 8001540:	080033f5 	.word	0x080033f5
 8001544:	20028094 	.word	0x20028094
 8001548:	0801b788 	.word	0x0801b788
 800154c:	080015f9 	.word	0x080015f9
 8001550:	20027c34 	.word	0x20027c34
 8001554:	0801b7ac 	.word	0x0801b7ac
 8001558:	08001571 	.word	0x08001571
 800155c:	20027c38 	.word	0x20027c38

08001560 <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001568:	2001      	movs	r0, #1
 800156a:	f00e fdf1 	bl	8010150 <osDelay>
 800156e:	e7fb      	b.n	8001568 <DefaultTask+0x8>

08001570 <msgPassingUSB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_msgPassingUSB */
__weak void msgPassingUSB(void *argument)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af04      	add	r7, sp, #16
 8001576:	6078      	str	r0, [r7, #4]
	struct USB_msgPass receivedPacket;
  /* Infinite loop */
  for(;;)
  {
    while(1){
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <msgPassingUSB+0x64>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	f107 010c 	add.w	r1, r7, #12
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	2200      	movs	r2, #0
 8001586:	f00f fad3 	bl	8010b30 <osMessageQueueGet>

    	if(receivedPacket.len == 6){
 800158a:	7b3b      	ldrb	r3, [r7, #12]
 800158c:	2b06      	cmp	r3, #6
 800158e:	d10e      	bne.n	80015ae <msgPassingUSB+0x3e>
//    		  logReceivedMessage.blinkEnabled = Buf[2] - '0';
//    		  logReceivedMessage.tempEnabled = Buf[3] - '0';
//    		  logReceivedMessage.intertialEnabled = Buf[4] - '0';
//    		  logReceivedMessage.positionEnabled  = Buf[5] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 6, &multicastAddr, "togLog", NO_ACK, OT_COAP_CODE_PUT, 1U);
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	1c58      	adds	r0, r3, #1
 8001596:	2301      	movs	r3, #1
 8001598:	9302      	str	r3, [sp, #8]
 800159a:	2303      	movs	r3, #3
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	2300      	movs	r3, #0
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <msgPassingUSB+0x68>)
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <msgPassingUSB+0x6c>)
 80015a6:	2106      	movs	r1, #6
 80015a8:	f016 fd8c 	bl	80180c4 <APP_THREAD_SendCoapMsg>
 80015ac:	e7e4      	b.n	8001578 <msgPassingUSB+0x8>
    	  }
    	  else if(receivedPacket.len == 1){
 80015ae:	7b3b      	ldrb	r3, [r7, #12]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d1e1      	bne.n	8001578 <msgPassingUSB+0x8>
//    		  lightsSimpleReceivedMessage = Buf[0] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 4, &multicastAddr, "lightS", NO_ACK, OT_COAP_CODE_PUT, 1U);
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	1c58      	adds	r0, r3, #1
 80015ba:	2301      	movs	r3, #1
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	2303      	movs	r3, #3
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	2300      	movs	r3, #0
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <msgPassingUSB+0x70>)
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <msgPassingUSB+0x6c>)
 80015ca:	2104      	movs	r1, #4
 80015cc:	f016 fd7a 	bl	80180c4 <APP_THREAD_SendCoapMsg>
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 80015d0:	e7d2      	b.n	8001578 <msgPassingUSB+0x8>
 80015d2:	bf00      	nop
 80015d4:	20027c4c 	.word	0x20027c4c
 80015d8:	0801b38c 	.word	0x0801b38c
 80015dc:	200289d0 	.word	0x200289d0
 80015e0:	0801b394 	.word	0x0801b394

080015e4 <watchDogReset>:
  /* USER CODE END msgPassingUSB */
}

/* watchDogReset function */
void watchDogReset(void *argument)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchDogReset */
//	 HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END watchDogReset */
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	2100      	movs	r1, #0
 8001606:	2001      	movs	r0, #1
 8001608:	f00e fd0e 	bl	8010028 <osThreadFlagsWait>
 800160c:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f3      	beq.n	8001600 <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001618:	4b66      	ldr	r3, [pc, #408]	; (80017b4 <BlinkTask+0x1bc>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
 8001620:	2200      	movs	r2, #0
 8001622:	4965      	ldr	r1, [pc, #404]	; (80017b8 <BlinkTask+0x1c0>)
 8001624:	f00f fa84 	bl	8010b30 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 8001628:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <BlinkTask+0x1c0>)
 800162a:	2201      	movs	r2, #1
 800162c:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800162e:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <BlinkTask+0x1bc>)
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	2200      	movs	r2, #0
 8001636:	4960      	ldr	r1, [pc, #384]	; (80017b8 <BlinkTask+0x1c0>)
 8001638:	f00f fa06 	bl	8010a48 <osMessageQueuePut>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 800163c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001640:	495e      	ldr	r1, [pc, #376]	; (80017bc <BlinkTask+0x1c4>)
 8001642:	485f      	ldr	r0, [pc, #380]	; (80017c0 <BlinkTask+0x1c8>)
 8001644:	f005 f86c 	bl	8006720 <HAL_ADC_Start_DMA>

			// start timer for ADC to sample at 1kHz
//			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_float_buffer, sizeof(blink_float_buffer));

			// start  PWM channel for blink LED
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001648:	2104      	movs	r1, #4
 800164a:	485e      	ldr	r0, [pc, #376]	; (80017c4 <BlinkTask+0x1cc>)
 800164c:	f00c f982 	bl	800d954 <HAL_TIM_PWM_Start>

			// start timer
			HAL_TIM_Base_Start(&htim2);
 8001650:	485c      	ldr	r0, [pc, #368]	; (80017c4 <BlinkTask+0x1cc>)
 8001652:	f00c f895 	bl	800d780 <HAL_TIM_Base_Start>
			//      is passed by reference via queue to masterThread for packetization

			while (1) {

				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 8001656:	f04f 32ff 	mov.w	r2, #4294967295
 800165a:	2100      	movs	r1, #0
 800165c:	2006      	movs	r0, #6
 800165e:	f00e fce3 	bl	8010028 <osThreadFlagsWait>
 8001662:	60f8      	str	r0, [r7, #12]
				blink_ptr_copy = blink_ptr;
 8001664:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <BlinkTask+0x1d0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a58      	ldr	r2, [pc, #352]	; (80017cc <BlinkTask+0x1d4>)
 800166a:	6013      	str	r3, [r2, #0]

				if ((evt & 0x00000004U) == 0x00000004U) {
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	2b00      	cmp	r3, #0
 8001674:	d065      	beq.n	8001742 <BlinkTask+0x14a>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 8001676:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <BlinkTask+0x1d8>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	d108      	bne.n	8001698 <BlinkTask+0xa0>
						previousTick_ms = HAL_GetTick();
 8001686:	f004 fcc3 	bl	8006010 <HAL_GetTick>
 800168a:	ee07 0a90 	vmov	s15, r0
 800168e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001692:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <BlinkTask+0x1d8>)
 8001694:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 8001698:	f004 fcba 	bl	8006010 <HAL_GetTick>
 800169c:	ee07 0a90 	vmov	s15, r0
 80016a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016a4:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <BlinkTask+0x1d8>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <BlinkTask+0x1dc>)
 80016b8:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 80016bc:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <BlinkTask+0x1e0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e03a      	b.n	800173a <BlinkTask+0x142>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_ptr_copy[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80016c4:	4b41      	ldr	r3, [pc, #260]	; (80017cc <BlinkTask+0x1d4>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <BlinkTask+0x1e0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2164      	movs	r1, #100	; 0x64
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	4a41      	ldr	r2, [pc, #260]	; (80017dc <BlinkTask+0x1e4>)
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	2364      	movs	r3, #100	; 0x64
 80016dc:	461a      	mov	r2, r3
 80016de:	f018 fc85 	bl	8019fec <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <BlinkTask+0x1d8>)
 80016e4:	ed93 7a00 	vldr	s14, [r3]
 80016e8:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <BlinkTask+0x1dc>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f6:	ee17 2a90 	vmov	r2, s15
 80016fa:	4b38      	ldr	r3, [pc, #224]	; (80017dc <BlinkTask+0x1e4>)
 80016fc:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 80016fe:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <BlinkTask+0x1e8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a36      	ldr	r2, [pc, #216]	; (80017dc <BlinkTask+0x1e4>)
 8001704:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 8001706:	4b35      	ldr	r3, [pc, #212]	; (80017dc <BlinkTask+0x1e4>)
 8001708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001712:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <BlinkTask+0x1d8>)
 8001714:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <BlinkTask+0x1e8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a30      	ldr	r2, [pc, #192]	; (80017e0 <BlinkTask+0x1e8>)
 8001720:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 8001722:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <BlinkTask+0x1ec>)
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	2300      	movs	r3, #0
 8001728:	2200      	movs	r2, #0
 800172a:	492c      	ldr	r1, [pc, #176]	; (80017dc <BlinkTask+0x1e4>)
 800172c:	f00f f98c 	bl	8010a48 <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <BlinkTask+0x1e0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <BlinkTask+0x1e0>)
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <BlinkTask+0x1e0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b09      	cmp	r3, #9
 8001740:	d9c0      	bls.n	80016c4 <BlinkTask+0xcc>
				}



				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d084      	beq.n	8001656 <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 800174c:	481c      	ldr	r0, [pc, #112]	; (80017c0 <BlinkTask+0x1c8>)
 800174e:	f005 f86b 	bl	8006828 <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001752:	2104      	movs	r1, #4
 8001754:	481b      	ldr	r0, [pc, #108]	; (80017c4 <BlinkTask+0x1cc>)
 8001756:	f00c f947 	bl	800d9e8 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 800175a:	481a      	ldr	r0, [pc, #104]	; (80017c4 <BlinkTask+0x1cc>)
 800175c:	f00c f83a 	bl	800d7d4 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <BlinkTask+0x1d8>)
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <BlinkTask+0x1bc>)
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	2200      	movs	r2, #0
 8001772:	4911      	ldr	r1, [pc, #68]	; (80017b8 <BlinkTask+0x1c0>)
 8001774:	f00f f9dc 	bl	8010b30 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <BlinkTask+0x1c0>)
 800177a:	2200      	movs	r2, #0
 800177c:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <BlinkTask+0x1c0>)
 8001780:	795b      	ldrb	r3, [r3, #5]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d104      	bne.n	8001790 <BlinkTask+0x198>
						osSemaphoreRelease(locNotifyHandle);
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <BlinkTask+0x1f0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f00f f87e 	bl	801088c <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <BlinkTask+0x1bc>)
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	2200      	movs	r2, #0
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <BlinkTask+0x1c0>)
 800179a:	f00f f955 	bl	8010a48 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <BlinkTask+0x1ec>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f00f fa36 	bl	8010c14 <osMessageQueueReset>

					// clear any flags
					osThreadFlagsClear(0x0000000EU);
 80017a8:	200e      	movs	r0, #14
 80017aa:	f00e fbed 	bl	800ff88 <osThreadFlagsClear>

					break;
 80017ae:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80017b0:	e726      	b.n	8001600 <BlinkTask+0x8>
 80017b2:	bf00      	nop
 80017b4:	20027c64 	.word	0x20027c64
 80017b8:	200280b4 	.word	0x200280b4
 80017bc:	20000414 	.word	0x20000414
 80017c0:	20027a7c 	.word	0x20027a7c
 80017c4:	2002884c 	.word	0x2002884c
 80017c8:	200280b0 	.word	0x200280b0
 80017cc:	200280bc 	.word	0x200280bc
 80017d0:	20000bec 	.word	0x20000bec
 80017d4:	20000bf0 	.word	0x20000bf0
 80017d8:	20000be8 	.word	0x20000be8
 80017dc:	200003a8 	.word	0x200003a8
 80017e0:	20000be4 	.word	0x20000be4
 80017e4:	200280a4 	.word	0x200280a4
 80017e8:	20028098 	.word	0x20028098

080017ec <HAL_ADC_ConvCpltCallback>:
//
//volatile uint8_t low_adc_sample = 0;
//volatile uint8_t random_sample = 0;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
//	if(low_adc_sample){
//		HAL_ADC_Stop(&hadc1);
//		low_adc_sample = 0;
//		return;
//	}
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_ADC_ConvCpltCallback+0x24>)
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_ADC_ConvCpltCallback+0x28>)
 80017f8:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_ADC_ConvCpltCallback+0x2c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2104      	movs	r1, #4
 8001800:	4618      	mov	r0, r3
 8001802:	f00e fb5f 	bl	800fec4 <osThreadFlagsSet>

}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200280b0 	.word	0x200280b0
 8001814:	200007fc 	.word	0x200007fc
 8001818:	20027c34 	.word	0x20027c34

0800181c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001826:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001828:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2104      	movs	r1, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f00e fb47 	bl	800fec4 <osThreadFlagsSet>

}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200280b0 	.word	0x200280b0
 8001844:	20000414 	.word	0x20000414
 8001848:	20027c34 	.word	0x20027c34

0800184c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
//	}
//	pwm_tracker++;

//	low_adc_sample = 1;
//	HAL_ADC_Start(&hadc1);
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_AHB2_GRP1_EnableClock>:
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800186e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4313      	orrs	r3, r2
 8001876:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_COMP1_Init+0x50>)
 800189a:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <MX_COMP1_Init+0x54>)
 800189c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_COMP1_Init+0x50>)
 80018a0:	4a12      	ldr	r2, [pc, #72]	; (80018ec <MX_COMP1_Init+0x58>)
 80018a2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_COMP1_Init+0x50>)
 80018a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018aa:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <MX_COMP1_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_COMP1_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <MX_COMP1_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_COMP1_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <MX_COMP1_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_COMP1_Init+0x50>)
 80018cc:	2231      	movs	r2, #49	; 0x31
 80018ce:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <MX_COMP1_Init+0x50>)
 80018d2:	f005 fe0f 	bl	80074f4 <HAL_COMP_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80018dc:	f002 f90e 	bl	8003afc <Error_Handler>
  }

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200280c0 	.word	0x200280c0
 80018e8:	40010200 	.word	0x40010200
 80018ec:	00c00010 	.word	0x00c00010

080018f0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_COMP_MspInit+0x5c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d117      	bne.n	8001942 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff ffa4 	bl	8001860 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 8001918:	2302      	movs	r3, #2
 800191a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191c:	2303      	movs	r3, #3
 800191e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192e:	f006 fc0f 	bl	8008150 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2105      	movs	r1, #5
 8001936:	2016      	movs	r0, #22
 8001938:	f006 f883 	bl	8007a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800193c:	2016      	movs	r0, #22
 800193e:	f006 f89a 	bl	8007a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40010200 	.word	0x40010200

08001950 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 800195c:	f04f 33ff 	mov.w	r3, #4294967295
 8001960:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d02a      	beq.n	80019c0 <process_pulse_lengths+0x70>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3302      	adds	r3, #2
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d025      	beq.n	80019c0 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3302      	adds	r3, #2
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	bf8c      	ite	hi
 8001982:	2301      	movhi	r3, #1
 8001984:	2300      	movls	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	429a      	cmp	r2, r3
 8001994:	d10e      	bne.n	80019b4 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	005a      	lsls	r2, r3, #1
 800199c:	7efb      	ldrb	r3, [r7, #27]
 800199e:	431a      	orrs	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <process_pulse_lengths+0xd0>)
 80019ae:	5cd3      	ldrb	r3, [r2, r3]
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e002      	b.n	80019ba <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 80019b4:	7efa      	ldrb	r2, [r7, #27]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db26      	blt.n	8001a14 <process_pulse_lengths+0xc4>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	dc22      	bgt.n	8001a14 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f003 0203 	and.w	r2, r3, #3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 80019ea:	e013      	b.n	8001a14 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4413      	add	r3, r2
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	69f9      	ldr	r1, [r7, #28]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	4291      	cmp	r1, r2
 8001a04:	d101      	bne.n	8001a0a <process_pulse_lengths+0xba>
 8001a06:	2201      	movs	r2, #1
 8001a08:	e001      	b.n	8001a0e <process_pulse_lengths+0xbe>
 8001a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0e:	441a      	add	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	609a      	str	r2, [r3, #8]
}
 8001a14:	bf00      	nop
 8001a16:	3724      	adds	r7, #36	; 0x24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	0801b938 	.word	0x0801b938

08001a24 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	dd06      	ble.n	8001a44 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	e001      	b.n	8001a48 <get_phase+0x24>
    } else {
        return -1;
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <reset>:

void reset(CyclePhaseClassifier * self) {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <reset+0x30>)
 8001a6e:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	427a0000 	.word	0x427a0000

08001a88 <LL_AHB1_GRP1_EnableClock>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aac:	68fb      	ldr	r3, [r7, #12]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001abe:	2004      	movs	r0, #4
 8001ac0:	f7ff ffe2 	bl	8001a88 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f7ff ffdf 	bl	8001a88 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2105      	movs	r1, #5
 8001ace:	200b      	movs	r0, #11
 8001ad0:	f005 ffb7 	bl	8007a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ad4:	200b      	movs	r0, #11
 8001ad6:	f005 ffce 	bl	8007a76 <HAL_NVIC_EnableIRQ>

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	603a      	str	r2, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
 8001aec:	460b      	mov	r3, r1
 8001aee:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <IMU_begin+0x60>)
 8001af8:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <IMU_begin+0x64>)
 8001afc:	79bb      	ldrb	r3, [r7, #6]
 8001afe:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 8001b00:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <IMU_begin+0x68>)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 8001b06:	f000 fa85 	bl	8002014 <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <IMU_begin+0x6c>)
 8001b0c:	22f9      	movs	r2, #249	; 0xf9
 8001b0e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <IMU_begin+0x6c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8001b16:	2302      	movs	r3, #2
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fc80 	bl	8002420 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 8001b20:	f000 fbd6 	bl	80022d0 <IMU_receivePacket>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <IMU_begin+0x6c>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2bf8      	cmp	r3, #248	; 0xf8
 8001b30:	d101      	bne.n	8001b36 <IMU_begin+0x56>
		{
			return (true);
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000006 	.word	0x20000006
 8001b44:	20028142 	.word	0x20028142
 8001b48:	20028208 	.word	0x20028208
 8001b4c:	20028180 	.word	0x20028180

08001b50 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <IMU_dataAvailable+0x64>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2bff      	cmp	r3, #255	; 0xff
 8001b5a:	d00d      	beq.n	8001b78 <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <IMU_dataAvailable+0x68>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <IMU_dataAvailable+0x64>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4619      	mov	r1, r3
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f006 fc61 	bl	8008430 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <IMU_dataAvailable+0x28>
			return (false);
 8001b74:	2300      	movs	r3, #0
 8001b76:	e01b      	b.n	8001bb0 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001b78:	f000 fbaa 	bl	80022d0 <IMU_receivePacket>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d015      	beq.n	8001bae <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <IMU_dataAvailable+0x6c>)
 8001b84:	789b      	ldrb	r3, [r3, #2]
 8001b86:	2203      	movs	r2, #3
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d107      	bne.n	8001b9c <IMU_dataAvailable+0x4c>
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <IMU_dataAvailable+0x70>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2bfb      	cmp	r3, #251	; 0xfb
 8001b92:	d103      	bne.n	8001b9c <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001b94:	f000 f832 	bl	8001bfc <IMU_parseInputReport>
			return (true);
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e009      	b.n	8001bb0 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <IMU_dataAvailable+0x6c>)
 8001b9e:	789b      	ldrb	r3, [r3, #2]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d103      	bne.n	8001bae <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001ba6:	f000 f80d 	bl	8001bc4 <IMU_parseCommandReport>
			return (true);
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20028142 	.word	0x20028142
 8001bb8:	20028208 	.word	0x20028208
 8001bbc:	200280f0 	.word	0x200280f0
 8001bc0:	20028180 	.word	0x20028180

08001bc4 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <IMU_parseCommandReport+0x30>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2bf1      	cmp	r3, #241	; 0xf1
 8001bd0:	d109      	bne.n	8001be6 <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <IMU_parseCommandReport+0x30>)
 8001bd4:	789b      	ldrb	r3, [r3, #2]
 8001bd6:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b07      	cmp	r3, #7
 8001bdc:	d103      	bne.n	8001be6 <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <IMU_parseCommandReport+0x30>)
 8001be0:	795a      	ldrb	r2, [r3, #5]
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <IMU_parseCommandReport+0x34>)
 8001be4:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20028180 	.word	0x20028180
 8001bf8:	20028233 	.word	0x20028233

08001bfc <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001c02:	4b96      	ldr	r3, [pc, #600]	; (8001e5c <IMU_parseInputReport+0x260>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	4b94      	ldr	r3, [pc, #592]	; (8001e5c <IMU_parseInputReport+0x260>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001c14:	8a3b      	ldrh	r3, [r7, #16]
 8001c16:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c1a:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001c1c:	8a3b      	ldrh	r3, [r7, #16]
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001c24:	4b8e      	ldr	r3, [pc, #568]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c26:	791b      	ldrb	r3, [r3, #4]
 8001c28:	061a      	lsls	r2, r3, #24
 8001c2a:	4b8d      	ldr	r3, [pc, #564]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c2c:	78db      	ldrb	r3, [r3, #3]
 8001c2e:	041b      	lsls	r3, r3, #16
 8001c30:	431a      	orrs	r2, r3
 8001c32:	4b8b      	ldr	r3, [pc, #556]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c34:	789b      	ldrb	r3, [r3, #2]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	4a89      	ldr	r2, [pc, #548]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c3c:	7852      	ldrb	r2, [r2, #1]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	4a88      	ldr	r2, [pc, #544]	; (8001e64 <IMU_parseInputReport+0x268>)
 8001c42:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001c44:	4b86      	ldr	r3, [pc, #536]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c46:	79db      	ldrb	r3, [r3, #7]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001c4e:	4b84      	ldr	r3, [pc, #528]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c50:	7a9b      	ldrb	r3, [r3, #10]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c58:	7a5b      	ldrb	r3, [r3, #9]
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001c62:	4b7f      	ldr	r3, [pc, #508]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c64:	7b1b      	ldrb	r3, [r3, #12]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21a      	sxth	r2, r3
 8001c6a:	4b7d      	ldr	r3, [pc, #500]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c6c:	7adb      	ldrb	r3, [r3, #11]
 8001c6e:	b21b      	sxth	r3, r3
 8001c70:	4313      	orrs	r3, r2
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001c76:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c78:	7b9b      	ldrb	r3, [r3, #14]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	b21a      	sxth	r2, r3
 8001c7e:	4b78      	ldr	r3, [pc, #480]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c80:	7b5b      	ldrb	r3, [r3, #13]
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001c8e:	2300      	movs	r3, #0
 8001c90:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001c92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c96:	3b05      	subs	r3, #5
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	dd09      	ble.n	8001cb0 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001c9c:	4b70      	ldr	r3, [pc, #448]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001c9e:	7c1b      	ldrb	r3, [r3, #16]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	4b6e      	ldr	r3, [pc, #440]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001ca6:	7bdb      	ldrb	r3, [r3, #15]
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	4313      	orrs	r3, r2
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001cb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cb4:	3b05      	subs	r3, #5
 8001cb6:	2b0b      	cmp	r3, #11
 8001cb8:	dd09      	ble.n	8001cce <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001cba:	4b69      	ldr	r3, [pc, #420]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001cbc:	7c9b      	ldrb	r3, [r3, #18]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001cc4:	7c5b      	ldrb	r3, [r3, #17]
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001cce:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001cd0:	795b      	ldrb	r3, [r3, #5]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10d      	bne.n	8001cf2 <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <IMU_parseInputReport+0x26c>)
 8001cdc:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001cde:	4a63      	ldr	r2, [pc, #396]	; (8001e6c <IMU_parseInputReport+0x270>)
 8001ce0:	89bb      	ldrh	r3, [r7, #12]
 8001ce2:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001ce4:	4a62      	ldr	r2, [pc, #392]	; (8001e70 <IMU_parseInputReport+0x274>)
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001cea:	4a62      	ldr	r2, [pc, #392]	; (8001e74 <IMU_parseInputReport+0x278>)
 8001cec:	893b      	ldrh	r3, [r7, #8]
 8001cee:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001cf0:	e16a      	b.n	8001fc8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001cf2:	4b5b      	ldr	r3, [pc, #364]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001cf4:	795b      	ldrb	r3, [r3, #5]
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d10d      	bne.n	8001d16 <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	4b5e      	ldr	r3, [pc, #376]	; (8001e78 <IMU_parseInputReport+0x27c>)
 8001d00:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001d02:	4a5e      	ldr	r2, [pc, #376]	; (8001e7c <IMU_parseInputReport+0x280>)
 8001d04:	89bb      	ldrh	r3, [r7, #12]
 8001d06:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001d08:	4a5d      	ldr	r2, [pc, #372]	; (8001e80 <IMU_parseInputReport+0x284>)
 8001d0a:	897b      	ldrh	r3, [r7, #10]
 8001d0c:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001d0e:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <IMU_parseInputReport+0x288>)
 8001d10:	893b      	ldrh	r3, [r7, #8]
 8001d12:	8013      	strh	r3, [r2, #0]
}
 8001d14:	e158      	b.n	8001fc8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001d16:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001d18:	795b      	ldrb	r3, [r3, #5]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d10d      	bne.n	8001d3a <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <IMU_parseInputReport+0x28c>)
 8001d24:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001d26:	4a59      	ldr	r2, [pc, #356]	; (8001e8c <IMU_parseInputReport+0x290>)
 8001d28:	89bb      	ldrh	r3, [r7, #12]
 8001d2a:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001d2c:	4a58      	ldr	r2, [pc, #352]	; (8001e90 <IMU_parseInputReport+0x294>)
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001d32:	4a58      	ldr	r2, [pc, #352]	; (8001e94 <IMU_parseInputReport+0x298>)
 8001d34:	893b      	ldrh	r3, [r7, #8]
 8001d36:	8013      	strh	r3, [r2, #0]
}
 8001d38:	e146      	b.n	8001fc8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001d3a:	4b49      	ldr	r3, [pc, #292]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001d3c:	795b      	ldrb	r3, [r3, #5]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d10d      	bne.n	8001d5e <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b54      	ldr	r3, [pc, #336]	; (8001e98 <IMU_parseInputReport+0x29c>)
 8001d48:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001d4a:	4a54      	ldr	r2, [pc, #336]	; (8001e9c <IMU_parseInputReport+0x2a0>)
 8001d4c:	89bb      	ldrh	r3, [r7, #12]
 8001d4e:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001d50:	4a53      	ldr	r2, [pc, #332]	; (8001ea0 <IMU_parseInputReport+0x2a4>)
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001d56:	4a53      	ldr	r2, [pc, #332]	; (8001ea4 <IMU_parseInputReport+0x2a8>)
 8001d58:	893b      	ldrh	r3, [r7, #8]
 8001d5a:	8013      	strh	r3, [r2, #0]
}
 8001d5c:	e134      	b.n	8001fc8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001d5e:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001d60:	795b      	ldrb	r3, [r3, #5]
 8001d62:	2b05      	cmp	r3, #5
 8001d64:	d003      	beq.n	8001d6e <IMU_parseInputReport+0x172>
 8001d66:	4b3e      	ldr	r3, [pc, #248]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001d68:	795b      	ldrb	r3, [r3, #5]
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d166      	bne.n	8001e3c <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001d6e:	f004 f94f 	bl	8006010 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <IMU_parseInputReport+0x2ac>)
 8001d76:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001d78:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <IMU_parseInputReport+0x2b0>)
 8001d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f000 f966 	bl	8002058 <IMU_qToFloat>
 8001d8c:	eef0 7a40 	vmov.f32	s15, s0
 8001d90:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <IMU_parseInputReport+0x2ac>)
 8001d92:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001d96:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d9a:	4b44      	ldr	r3, [pc, #272]	; (8001eac <IMU_parseInputReport+0x2b0>)
 8001d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4619      	mov	r1, r3
 8001da4:	4610      	mov	r0, r2
 8001da6:	f000 f957 	bl	8002058 <IMU_qToFloat>
 8001daa:	eef0 7a40 	vmov.f32	s15, s0
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <IMU_parseInputReport+0x2ac>)
 8001db0:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001db4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001db8:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <IMU_parseInputReport+0x2b0>)
 8001dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f000 f948 	bl	8002058 <IMU_qToFloat>
 8001dc8:	eef0 7a40 	vmov.f32	s15, s0
 8001dcc:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <IMU_parseInputReport+0x2ac>)
 8001dce:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001dd2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001dd6:	4b35      	ldr	r3, [pc, #212]	; (8001eac <IMU_parseInputReport+0x2b0>)
 8001dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f000 f939 	bl	8002058 <IMU_qToFloat>
 8001de6:	eef0 7a40 	vmov.f32	s15, s0
 8001dea:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <IMU_parseInputReport+0x2ac>)
 8001dec:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001df0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001df4:	210c      	movs	r1, #12
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f92e 	bl	8002058 <IMU_qToFloat>
 8001dfc:	eef0 7a40 	vmov.f32	s15, s0
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <IMU_parseInputReport+0x2ac>)
 8001e02:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001e06:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <IMU_parseInputReport+0x2b4>)
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4926      	ldr	r1, [pc, #152]	; (8001ea8 <IMU_parseInputReport+0x2ac>)
 8001e10:	f00e fe1a 	bl	8010a48 <osMessageQueuePut>
		quatAccuracy = status;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <IMU_parseInputReport+0x2b8>)
 8001e1a:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001e1c:	4a26      	ldr	r2, [pc, #152]	; (8001eb8 <IMU_parseInputReport+0x2bc>)
 8001e1e:	89bb      	ldrh	r3, [r7, #12]
 8001e20:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001e22:	4a26      	ldr	r2, [pc, #152]	; (8001ebc <IMU_parseInputReport+0x2c0>)
 8001e24:	897b      	ldrh	r3, [r7, #10]
 8001e26:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001e28:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <IMU_parseInputReport+0x2c4>)
 8001e2a:	893b      	ldrh	r3, [r7, #8]
 8001e2c:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001e2e:	4a25      	ldr	r2, [pc, #148]	; (8001ec4 <IMU_parseInputReport+0x2c8>)
 8001e30:	8afb      	ldrh	r3, [r7, #22]
 8001e32:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001e34:	4a24      	ldr	r2, [pc, #144]	; (8001ec8 <IMU_parseInputReport+0x2cc>)
 8001e36:	8abb      	ldrh	r3, [r7, #20]
 8001e38:	8013      	strh	r3, [r2, #0]
}
 8001e3a:	e0c5      	b.n	8001fc8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <IMU_parseInputReport+0x264>)
 8001e3e:	795b      	ldrb	r3, [r3, #5]
 8001e40:	2b11      	cmp	r3, #17
 8001e42:	d147      	bne.n	8001ed4 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001e44:	f004 f8e4 	bl	8006010 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <IMU_parseInputReport+0x2d0>)
 8001e4c:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001e4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ecc <IMU_parseInputReport+0x2d0>)
 8001e50:	893b      	ldrh	r3, [r7, #8]
 8001e52:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001e54:	4a1e      	ldr	r2, [pc, #120]	; (8001ed0 <IMU_parseInputReport+0x2d4>)
 8001e56:	893b      	ldrh	r3, [r7, #8]
 8001e58:	8013      	strh	r3, [r2, #0]
}
 8001e5a:	e0b5      	b.n	8001fc8 <IMU_parseInputReport+0x3cc>
 8001e5c:	200280f0 	.word	0x200280f0
 8001e60:	20028180 	.word	0x20028180
 8001e64:	2002810c 	.word	0x2002810c
 8001e68:	20028248 	.word	0x20028248
 8001e6c:	20028230 	.word	0x20028230
 8001e70:	2002824c 	.word	0x2002824c
 8001e74:	20028148 	.word	0x20028148
 8001e78:	20028144 	.word	0x20028144
 8001e7c:	20028116 	.word	0x20028116
 8001e80:	20028234 	.word	0x20028234
 8001e84:	20028172 	.word	0x20028172
 8001e88:	20028174 	.word	0x20028174
 8001e8c:	20028176 	.word	0x20028176
 8001e90:	2002813e 	.word	0x2002813e
 8001e94:	2002813c 	.word	0x2002813c
 8001e98:	200280f4 	.word	0x200280f4
 8001e9c:	20028140 	.word	0x20028140
 8001ea0:	20028236 	.word	0x20028236
 8001ea4:	20028146 	.word	0x20028146
 8001ea8:	20028158 	.word	0x20028158
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	20027c68 	.word	0x20027c68
 8001eb4:	20028112 	.word	0x20028112
 8001eb8:	2002824a 	.word	0x2002824a
 8001ebc:	20028170 	.word	0x20028170
 8001ec0:	200280ec 	.word	0x200280ec
 8001ec4:	20028108 	.word	0x20028108
 8001ec8:	2002814a 	.word	0x2002814a
 8001ecc:	200280f8 	.word	0x200280f8
 8001ed0:	2002824e 	.word	0x2002824e
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001ed4:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001ed6:	795b      	ldrb	r3, [r3, #5]
 8001ed8:	2b13      	cmp	r3, #19
 8001eda:	d10d      	bne.n	8001ef8 <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001edc:	f004 f898 	bl	8006010 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <IMU_parseInputReport+0x3d8>)
 8001ee4:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001ee8:	7a5a      	ldrb	r2, [r3, #9]
 8001eea:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <IMU_parseInputReport+0x3d8>)
 8001eec:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001ef0:	7a5a      	ldrb	r2, [r3, #9]
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <IMU_parseInputReport+0x3dc>)
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	e067      	b.n	8001fc8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001efa:	795b      	ldrb	r3, [r3, #5]
 8001efc:	2b1e      	cmp	r3, #30
 8001efe:	d12b      	bne.n	8001f58 <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001f00:	f004 f886 	bl	8006010 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <IMU_parseInputReport+0x3e0>)
 8001f08:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	74fb      	strb	r3, [r7, #19]
 8001f0e:	e00c      	b.n	8001f2a <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	f103 020b 	add.w	r2, r3, #11
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <IMU_parseInputReport+0x3e4>)
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	440b      	add	r3, r1
 8001f1e:	492c      	ldr	r1, [pc, #176]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001f20:	5c8a      	ldrb	r2, [r1, r2]
 8001f22:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001f24:	7cfb      	ldrb	r3, [r7, #19]
 8001f26:	3301      	adds	r3, #1
 8001f28:	74fb      	strb	r3, [r7, #19]
 8001f2a:	7cfb      	ldrb	r3, [r7, #19]
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d9ef      	bls.n	8001f10 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001f32:	7a9a      	ldrb	r2, [r3, #10]
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <IMU_parseInputReport+0x3e8>)
 8001f36:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001f38:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <IMU_parseInputReport+0x3e4>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <IMU_parseInputReport+0x3e0>)
 8001f3e:	6810      	ldr	r0, [r2, #0]
 8001f40:	6851      	ldr	r1, [r2, #4]
 8001f42:	c303      	stmia	r3!, {r0, r1}
 8001f44:	7a12      	ldrb	r2, [r2, #8]
 8001f46:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <IMU_parseInputReport+0x3ec>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4922      	ldr	r1, [pc, #136]	; (8001fdc <IMU_parseInputReport+0x3e0>)
 8001f52:	f00e fd79 	bl	8010a48 <osMessageQueuePut>
}
 8001f56:	e037      	b.n	8001fc8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001f5a:	795b      	ldrb	r3, [r3, #5]
 8001f5c:	2b14      	cmp	r3, #20
 8001f5e:	d109      	bne.n	8001f74 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001f60:	4a22      	ldr	r2, [pc, #136]	; (8001fec <IMU_parseInputReport+0x3f0>)
 8001f62:	89bb      	ldrh	r3, [r7, #12]
 8001f64:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001f66:	4a22      	ldr	r2, [pc, #136]	; (8001ff0 <IMU_parseInputReport+0x3f4>)
 8001f68:	897b      	ldrh	r3, [r7, #10]
 8001f6a:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001f6c:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <IMU_parseInputReport+0x3f8>)
 8001f6e:	893b      	ldrh	r3, [r7, #8]
 8001f70:	8013      	strh	r3, [r2, #0]
}
 8001f72:	e029      	b.n	8001fc8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001f76:	795b      	ldrb	r3, [r3, #5]
 8001f78:	2b15      	cmp	r3, #21
 8001f7a:	d109      	bne.n	8001f90 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001f7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <IMU_parseInputReport+0x3fc>)
 8001f7e:	89bb      	ldrh	r3, [r7, #12]
 8001f80:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001f82:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <IMU_parseInputReport+0x400>)
 8001f84:	897b      	ldrh	r3, [r7, #10]
 8001f86:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001f88:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <IMU_parseInputReport+0x404>)
 8001f8a:	893b      	ldrh	r3, [r7, #8]
 8001f8c:	8013      	strh	r3, [r2, #0]
}
 8001f8e:	e01b      	b.n	8001fc8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001f92:	795b      	ldrb	r3, [r3, #5]
 8001f94:	2b16      	cmp	r3, #22
 8001f96:	d109      	bne.n	8001fac <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001f98:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <IMU_parseInputReport+0x408>)
 8001f9a:	89bb      	ldrh	r3, [r7, #12]
 8001f9c:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001f9e:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <IMU_parseInputReport+0x40c>)
 8001fa0:	897b      	ldrh	r3, [r7, #10]
 8001fa2:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001fa4:	4a19      	ldr	r2, [pc, #100]	; (800200c <IMU_parseInputReport+0x410>)
 8001fa6:	893b      	ldrh	r3, [r7, #8]
 8001fa8:	8013      	strh	r3, [r2, #0]
}
 8001faa:	e00d      	b.n	8001fc8 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001fae:	795b      	ldrb	r3, [r3, #5]
 8001fb0:	2bf1      	cmp	r3, #241	; 0xf1
 8001fb2:	d109      	bne.n	8001fc8 <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001fb6:	79db      	ldrb	r3, [r3, #7]
 8001fb8:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	2b07      	cmp	r3, #7
 8001fbe:	d103      	bne.n	8001fc8 <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <IMU_parseInputReport+0x3d4>)
 8001fc2:	7a9a      	ldrb	r2, [r3, #10]
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <IMU_parseInputReport+0x414>)
 8001fc6:	701a      	strb	r2, [r3, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20028180 	.word	0x20028180
 8001fd4:	20028100 	.word	0x20028100
 8001fd8:	2002817a 	.word	0x2002817a
 8001fdc:	20028238 	.word	0x20028238
 8001fe0:	20028154 	.word	0x20028154
 8001fe4:	20028232 	.word	0x20028232
 8001fe8:	20027c44 	.word	0x20027c44
 8001fec:	20028178 	.word	0x20028178
 8001ff0:	20028152 	.word	0x20028152
 8001ff4:	20028202 	.word	0x20028202
 8001ff8:	200280f6 	.word	0x200280f6
 8001ffc:	2002817c 	.word	0x2002817c
 8002000:	2002814c 	.word	0x2002814c
 8002004:	20028150 	.word	0x20028150
 8002008:	2002814e 	.word	0x2002814e
 800200c:	20028114 	.word	0x20028114
 8002010:	20028233 	.word	0x20028233

08002014 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <IMU_softReset+0x3c>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 800201e:	2301      	movs	r3, #1
 8002020:	2101      	movs	r1, #1
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f9fc 	bl	8002420 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8002028:	20c8      	movs	r0, #200	; 0xc8
 800202a:	f004 f809 	bl	8006040 <HAL_Delay>
	while (IMU_receivePacket() == true)
 800202e:	bf00      	nop
 8002030:	f000 f94e 	bl	80022d0 <IMU_receivePacket>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1fa      	bne.n	8002030 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 800203a:	20c8      	movs	r0, #200	; 0xc8
 800203c:	f004 f800 	bl	8006040 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8002040:	bf00      	nop
 8002042:	f000 f945 	bl	80022d0 <IMU_receivePacket>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1fa      	bne.n	8002042 <IMU_softReset+0x2e>
		;
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20028180 	.word	0x20028180
 8002054:	00000000 	.word	0x00000000

08002058 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8002058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	460a      	mov	r2, r1
 8002062:	80fb      	strh	r3, [r7, #6]
 8002064:	4613      	mov	r3, r2
 8002066:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8002068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002074:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8002078:	797b      	ldrb	r3, [r7, #5]
 800207a:	425b      	negs	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe f9db 	bl	8000438 <__aeabi_i2d>
 8002082:	4603      	mov	r3, r0
 8002084:	460c      	mov	r4, r1
 8002086:	ec44 3b11 	vmov	d1, r3, r4
 800208a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80020d0 <IMU_qToFloat+0x78>
 800208e:	f017 ffc1 	bl	801a014 <pow>
 8002092:	ec56 5b10 	vmov	r5, r6, d0
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f7fe f9e0 	bl	800045c <__aeabi_f2d>
 800209c:	4603      	mov	r3, r0
 800209e:	460c      	mov	r4, r1
 80020a0:	461a      	mov	r2, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	4628      	mov	r0, r5
 80020a6:	4631      	mov	r1, r6
 80020a8:	f7fe fa30 	bl	800050c <__aeabi_dmul>
 80020ac:	4603      	mov	r3, r0
 80020ae:	460c      	mov	r4, r1
 80020b0:	4618      	mov	r0, r3
 80020b2:	4621      	mov	r1, r4
 80020b4:	f7fe fcda 	bl	8000a6c <__aeabi_d2f>
 80020b8:	4603      	mov	r3, r0
 80020ba:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	ee07 3a90 	vmov	s15, r3
}
 80020c2:	eeb0 0a67 	vmov.f32	s0, s15
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020cc:	f3af 8000 	nop.w
 80020d0:	00000000 	.word	0x00000000
 80020d4:	40000000 	.word	0x40000000

080020d8 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	4619      	mov	r1, r3
 80020e6:	2005      	movs	r0, #5
 80020e8:	f000 f81a 	bl	8002120 <IMU_setFeatureCommand_2>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8002102:	4a06      	ldr	r2, [pc, #24]	; (800211c <IMU_enableActivityClassifier+0x28>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	4619      	mov	r1, r3
 800210e:	201e      	movs	r0, #30
 8002110:	f000 f818 	bl	8002144 <IMU_setFeatureCommand_3>
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20028154 	.word	0x20028154

08002120 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	460a      	mov	r2, r1
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	4613      	mov	r3, r2
 800212e:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8002130:	88b9      	ldrh	r1, [r7, #4]
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	2200      	movs	r2, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f804 	bl	8002144 <IMU_setFeatureCommand_3>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	603a      	str	r2, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
 8002150:	460b      	mov	r3, r1
 8002152:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 8002154:	88bb      	ldrh	r3, [r7, #4]
 8002156:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8002160:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 8002162:	22fd      	movs	r2, #253	; 0xfd
 8002164:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8002166:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 800216c:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 800216e:	2200      	movs	r2, #0
 8002170:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 8002174:	2200      	movs	r2, #0
 8002176:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8002178:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 800217a:	2200      	movs	r2, #0
 800217c:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 8002184:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	121b      	asrs	r3, r3, #8
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 800218e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	141b      	asrs	r3, r3, #16
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 8002198:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	0e1b      	lsrs	r3, r3, #24
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 80021a2:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80021b0:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 80021c2:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 80021cc:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 80021d6:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	0e1b      	lsrs	r3, r3, #24
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <IMU_setFeatureCommand_3+0xb0>)
 80021e0:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 80021e2:	2302      	movs	r3, #2
 80021e4:	2111      	movs	r1, #17
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f91a 	bl	8002420 <IMU_sendPacket>
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20028180 	.word	0x20028180

080021f8 <IMU_sendTareNow>:
	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
}

void IMU_sendTareNow(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <IMU_sendTareNow+0x64>)
 80021fe:	22f2      	movs	r2, #242	; 0xf2
 8002200:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <IMU_sendTareNow+0x68>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	b2d1      	uxtb	r1, r2
 800220a:	4a15      	ldr	r2, [pc, #84]	; (8002260 <IMU_sendTareNow+0x68>)
 800220c:	7011      	strb	r1, [r2, #0]
 800220e:	4a13      	ldr	r2, [pc, #76]	; (800225c <IMU_sendTareNow+0x64>)
 8002210:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <IMU_sendTareNow+0x64>)
 8002214:	2203      	movs	r2, #3
 8002216:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0; // Tare Now
 8002218:	4b10      	ldr	r3, [pc, #64]	; (800225c <IMU_sendTareNow+0x64>)
 800221a:	2200      	movs	r2, #0
 800221c:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0x07; // All 3 axes
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <IMU_sendTareNow+0x64>)
 8002220:	2207      	movs	r2, #7
 8002222:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0; // Rotation Vector
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <IMU_sendTareNow+0x64>)
 8002226:	2200      	movs	r2, #0
 8002228:	715a      	strb	r2, [r3, #5]


	// RESERVED
	shtpData[6] = 0;
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <IMU_sendTareNow+0x64>)
 800222c:	2200      	movs	r2, #0
 800222e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <IMU_sendTareNow+0x64>)
 8002232:	2200      	movs	r2, #0
 8002234:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <IMU_sendTareNow+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <IMU_sendTareNow+0x64>)
 800223e:	2200      	movs	r2, #0
 8002240:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <IMU_sendTareNow+0x64>)
 8002244:	2200      	movs	r2, #0
 8002246:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <IMU_sendTareNow+0x64>)
 800224a:	2200      	movs	r2, #0
 800224c:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 800224e:	2302      	movs	r3, #2
 8002250:	210c      	movs	r1, #12
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f8e4 	bl	8002420 <IMU_sendPacket>
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20028180 	.word	0x20028180
 8002260:	20000bfa 	.word	0x20000bfa

08002264 <IMU_sendPersistTare>:

void IMU_sendPersistTare(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <IMU_sendPersistTare+0x64>)
 800226a:	22f2      	movs	r2, #242	; 0xf2
 800226c:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <IMU_sendPersistTare+0x68>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	b2d1      	uxtb	r1, r2
 8002276:	4a15      	ldr	r2, [pc, #84]	; (80022cc <IMU_sendPersistTare+0x68>)
 8002278:	7011      	strb	r1, [r2, #0]
 800227a:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <IMU_sendPersistTare+0x64>)
 800227c:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <IMU_sendPersistTare+0x64>)
 8002280:	2203      	movs	r2, #3
 8002282:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0x01; // Persist Tare
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <IMU_sendPersistTare+0x64>)
 8002286:	2201      	movs	r2, #1
 8002288:	70da      	strb	r2, [r3, #3]


	// RESERVED
	shtpData[4] = 0;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <IMU_sendPersistTare+0x64>)
 800228c:	2200      	movs	r2, #0
 800228e:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0;
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <IMU_sendPersistTare+0x64>)
 8002292:	2200      	movs	r2, #0
 8002294:	715a      	strb	r2, [r3, #5]
	shtpData[6] = 0;
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <IMU_sendPersistTare+0x64>)
 8002298:	2200      	movs	r2, #0
 800229a:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <IMU_sendPersistTare+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <IMU_sendPersistTare+0x64>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <IMU_sendPersistTare+0x64>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <IMU_sendPersistTare+0x64>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <IMU_sendPersistTare+0x64>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 80022ba:	2302      	movs	r3, #2
 80022bc:	210c      	movs	r1, #12
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f8ae 	bl	8002420 <IMU_sendPacket>
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20028180 	.word	0x20028180
 80022cc:	20000bfa 	.word	0x20000bfa

080022d0 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80022d6:	4b22      	ldr	r3, [pc, #136]	; (8002360 <IMU_receivePacket+0x90>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4b22      	ldr	r3, [pc, #136]	; (8002364 <IMU_receivePacket+0x94>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	4610      	mov	r0, r2
 80022e4:	f006 f8a4 	bl	8008430 <HAL_GPIO_ReadPin>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <IMU_receivePacket+0x22>
		return (false);
 80022ee:	2300      	movs	r3, #0
 80022f0:	e031      	b.n	8002356 <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <IMU_receivePacket+0x98>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f04f 31ff 	mov.w	r1, #4294967295
 80022fa:	4618      	mov	r0, r3
 80022fc:	f00e fa60 	bl	80107c0 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <IMU_receivePacket+0x9c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b299      	uxth	r1, r3
 8002306:	2364      	movs	r3, #100	; 0x64
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2304      	movs	r3, #4
 800230c:	4a18      	ldr	r2, [pc, #96]	; (8002370 <IMU_receivePacket+0xa0>)
 800230e:	4819      	ldr	r0, [pc, #100]	; (8002374 <IMU_receivePacket+0xa4>)
 8002310:	f006 fa5a 	bl	80087c8 <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <IMU_receivePacket+0x98>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f00e fab7 	bl	801088c <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <IMU_receivePacket+0xa0>)
 8002320:	785b      	ldrb	r3, [r3, #1]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	b21a      	sxth	r2, r3
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <IMU_receivePacket+0xa0>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b21b      	sxth	r3, r3
 800232c:	4313      	orrs	r3, r2
 800232e:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002336:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002340:	2300      	movs	r3, #0
 8002342:	e008      	b.n	8002356 <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	3b04      	subs	r3, #4
 8002348:	b29b      	uxth	r3, r3
 800234a:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f812 	bl	8002378 <IMU_getData>


	return (true); //We're done!
 8002354:	2301      	movs	r3, #1
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20028208 	.word	0x20028208
 8002364:	20028142 	.word	0x20028142
 8002368:	20027c50 	.word	0x20027c50
 800236c:	20000006 	.word	0x20000006
 8002370:	200280f0 	.word	0x200280f0
 8002374:	20028250 	.word	0x20028250

08002378 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af02      	add	r7, sp, #8
 800237e:	4603      	mov	r3, r0
 8002380:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 8002382:	2300      	movs	r3, #0
 8002384:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 8002386:	e036      	b.n	80023f6 <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 800238c:	89bb      	ldrh	r3, [r7, #12]
 800238e:	2b1c      	cmp	r3, #28
 8002390:	d901      	bls.n	8002396 <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 8002392:	231c      	movs	r3, #28
 8002394:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002396:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <IMU_getData+0x90>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 31ff 	mov.w	r1, #4294967295
 800239e:	4618      	mov	r0, r3
 80023a0:	f00e fa0e 	bl	80107c0 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <IMU_getData+0x94>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	b299      	uxth	r1, r3
 80023aa:	89bb      	ldrh	r3, [r7, #12]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	3304      	adds	r3, #4
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	2364      	movs	r3, #100	; 0x64
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	4a15      	ldr	r2, [pc, #84]	; (8002410 <IMU_getData+0x98>)
 80023bc:	4815      	ldr	r0, [pc, #84]	; (8002414 <IMU_getData+0x9c>)
 80023be:	f006 fa03 	bl	80087c8 <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <IMU_getData+0x90>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f00e fa60 	bl	801088c <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 80023cc:	89fa      	ldrh	r2, [r7, #14]
 80023ce:	89bb      	ldrh	r3, [r7, #12]
 80023d0:	4413      	add	r3, r2
 80023d2:	2b7f      	cmp	r3, #127	; 0x7f
 80023d4:	dc07      	bgt.n	80023e6 <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 80023d6:	89fb      	ldrh	r3, [r7, #14]
 80023d8:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <IMU_getData+0xa0>)
 80023da:	4413      	add	r3, r2
 80023dc:	89ba      	ldrh	r2, [r7, #12]
 80023de:	490f      	ldr	r1, [pc, #60]	; (800241c <IMU_getData+0xa4>)
 80023e0:	4618      	mov	r0, r3
 80023e2:	f017 fe03 	bl	8019fec <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 80023e6:	89fa      	ldrh	r2, [r7, #14]
 80023e8:	89bb      	ldrh	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	89bb      	ldrh	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1c5      	bne.n	8002388 <IMU_getData+0x10>
	}
	return (true); //Done!
 80023fc:	2301      	movs	r3, #1
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20027c50 	.word	0x20027c50
 800240c:	20000006 	.word	0x20000006
 8002410:	20000bfc 	.word	0x20000bfc
 8002414:	20028250 	.word	0x20028250
 8002418:	20028180 	.word	0x20028180
 800241c:	20000c00 	.word	0x20000c00

08002420 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af02      	add	r7, sp, #8
 8002426:	4603      	mov	r3, r0
 8002428:	460a      	mov	r2, r1
 800242a:	71fb      	strb	r3, [r7, #7]
 800242c:	4613      	mov	r3, r2
 800242e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	3304      	adds	r3, #4
 8002434:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 8002436:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <IMU_sendPacket+0x84>)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	121b      	asrs	r3, r3, #8
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <IMU_sendPacket+0x84>)
 8002444:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 8002446:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <IMU_sendPacket+0x84>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	4a16      	ldr	r2, [pc, #88]	; (80024a8 <IMU_sendPacket+0x88>)
 8002450:	5cd2      	ldrb	r2, [r2, r3]
 8002452:	1c51      	adds	r1, r2, #1
 8002454:	b2c8      	uxtb	r0, r1
 8002456:	4914      	ldr	r1, [pc, #80]	; (80024a8 <IMU_sendPacket+0x88>)
 8002458:	54c8      	strb	r0, [r1, r3]
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <IMU_sendPacket+0x84>)
 800245c:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 800245e:	79bb      	ldrb	r3, [r7, #6]
 8002460:	461a      	mov	r2, r3
 8002462:	4912      	ldr	r1, [pc, #72]	; (80024ac <IMU_sendPacket+0x8c>)
 8002464:	4812      	ldr	r0, [pc, #72]	; (80024b0 <IMU_sendPacket+0x90>)
 8002466:	f017 fdc1 	bl	8019fec <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <IMU_sendPacket+0x94>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f04f 31ff 	mov.w	r1, #4294967295
 8002472:	4618      	mov	r0, r3
 8002474:	f00e f9a4 	bl	80107c0 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <IMU_sendPacket+0x98>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b299      	uxth	r1, r3
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	b29a      	uxth	r2, r3
 8002482:	2364      	movs	r3, #100	; 0x64
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <IMU_sendPacket+0x84>)
 800248a:	480c      	ldr	r0, [pc, #48]	; (80024bc <IMU_sendPacket+0x9c>)
 800248c:	f006 f8a8 	bl	80085e0 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <IMU_sendPacket+0x94>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f00e f9f9 	bl	801088c <osSemaphoreRelease>

	return (true);
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2002820c 	.word	0x2002820c
 80024a8:	20000bf4 	.word	0x20000bf4
 80024ac:	20028180 	.word	0x20028180
 80024b0:	20028210 	.word	0x20028210
 80024b4:	20027c50 	.word	0x20027c50
 80024b8:	20000006 	.word	0x20000006
 80024bc:	20028250 	.word	0x20028250

080024c0 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  LpTimerInit( );
 80024d8:	f000 f828 	bl	800252c <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <vPortSetupTimerInterrupt+0x40>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0d      	ldr	r2, [pc, #52]	; (8002518 <vPortSetupTimerInterrupt+0x44>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	099b      	lsrs	r3, r3, #6
 80024e8:	4a0c      	ldr	r2, [pc, #48]	; (800251c <vPortSetupTimerInterrupt+0x48>)
 80024ea:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <vPortSetupTimerInterrupt+0x4c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <vPortSetupTimerInterrupt+0x50>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <vPortSetupTimerInterrupt+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a06      	ldr	r2, [pc, #24]	; (8002518 <vPortSetupTimerInterrupt+0x44>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	099b      	lsrs	r3, r3, #6
 8002504:	4a08      	ldr	r2, [pc, #32]	; (8002528 <vPortSetupTimerInterrupt+0x54>)
 8002506:	3b01      	subs	r3, #1
 8002508:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <vPortSetupTimerInterrupt+0x4c>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000078 	.word	0x20000078
 8002518:	10624dd3 	.word	0x10624dd3
 800251c:	20000c1c 	.word	0x20000c1c
 8002520:	e000e010 	.word	0xe000e010
 8002524:	e000e018 	.word	0xe000e018
 8002528:	e000e014 	.word	0xe000e014

0800252c <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <LpTimerInit+0x14>)
 8002532:	2200      	movs	r2, #0
 8002534:	4903      	ldr	r1, [pc, #12]	; (8002544 <LpTimerInit+0x18>)
 8002536:	2000      	movs	r0, #0
 8002538:	f000 fc7c 	bl	8002e34 <HW_TS_Create>

  return;
 800253c:	bf00      	nop
}
 800253e:	bd80      	pop	{r7, pc}
 8002540:	08002549 	.word	0x08002549
 8002544:	20000c24 	.word	0x20000c24

08002548 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 800254c:	bf00      	nop
}
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 8002558:	b4b0      	push	{r4, r5, r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <_GeometryBuilder+0x54>)
 8002564:	461c      	mov	r4, r3
 8002566:	4615      	mov	r5, r2
 8002568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800256c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002570:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <_GeometryBuilder+0x58>)
 800257c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002580:	4615      	mov	r5, r2
 8002582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800258a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800258e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <_GeometryBuilder+0x5c>)
 8002596:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800259a:	4613      	mov	r3, r2
 800259c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800259e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bcb0      	pop	{r4, r5, r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000008 	.word	0x20000008
 80025b0:	20000038 	.word	0x20000038
 80025b4:	20000c28 	.word	0x20000c28

080025b8 <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 80025b8:	b5b0      	push	{r4, r5, r7, lr}
 80025ba:	b096      	sub	sp, #88	; 0x58
 80025bc:	af02      	add	r7, sp, #8
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2bc7      	cmp	r3, #199	; 0xc7
 80025c8:	f340 8093 	ble.w	80026f2 <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3360      	adds	r3, #96	; 0x60
 80025d0:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 80025d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	3310      	adds	r3, #16
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80025e4:	2300      	movs	r3, #0
 80025e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80025e8:	e011      	b.n	800260e <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80025f2:	3104      	adds	r1, #4
 80025f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002600:	4293      	cmp	r3, r2
 8002602:	bf38      	it	cc
 8002604:	4613      	movcc	r3, r2
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8002608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260a:	3301      	adds	r3, #1
 800260c:	64bb      	str	r3, [r7, #72]	; 0x48
 800260e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002610:	2b03      	cmp	r3, #3
 8002612:	ddea      	ble.n	80025ea <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 8002614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002616:	2b0b      	cmp	r3, #11
 8002618:	d86b      	bhi.n	80026f2 <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002624:	ed93 7a01 	vldr	s14, [r3, #4]
 8002628:	f107 0214 	add.w	r2, r7, #20
 800262c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002630:	4619      	mov	r1, r3
 8002632:	eef0 0a47 	vmov.f32	s1, s14
 8002636:	eeb0 0a67 	vmov.f32	s0, s15
 800263a:	f000 f8e5 	bl	8002808 <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002646:	edd3 7a02 	vldr	s15, [r3, #8]
 800264a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002650:	f107 0208 	add.w	r2, r7, #8
 8002654:	f107 0320 	add.w	r3, r7, #32
 8002658:	4619      	mov	r1, r3
 800265a:	eef0 0a47 	vmov.f32	s1, s14
 800265e:	eeb0 0a67 	vmov.f32	s0, s15
 8002662:	f000 f8d1 	bl	8002808 <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3370      	adds	r3, #112	; 0x70
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	327c      	adds	r2, #124	; 0x7c
 800266e:	f107 0520 	add.w	r5, r7, #32
 8002672:	f107 0408 	add.w	r4, r7, #8
 8002676:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800267a:	f107 0014 	add.w	r0, r7, #20
 800267e:	9201      	str	r2, [sp, #4]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	462b      	mov	r3, r5
 8002684:	4622      	mov	r2, r4
 8002686:	f000 f945 	bl	8002914 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 800268a:	2300      	movs	r3, #0
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
 800268e:	e019      	b.n	80026c4 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002694:	331c      	adds	r3, #28
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	ed93 7a00 	vldr	s14, [r3]
 800269e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3304      	adds	r3, #4
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b4:	331c      	adds	r3, #28
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 80026be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c0:	3301      	adds	r3, #1
 80026c2:	647b      	str	r3, [r7, #68]	; 0x44
 80026c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	dde2      	ble.n	8002690 <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 80026ca:	f003 fca1 	bl	8006010 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <consume_angles+0x144>)
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80026e0:	2300      	movs	r3, #0
 80026e2:	2200      	movs	r2, #0
 80026e4:	f00e f9b0 	bl	8010a48 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <consume_angles+0x148>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f00e f8cd 	bl	801088c <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 80026f2:	bf00      	nop
 80026f4:	3750      	adds	r7, #80	; 0x50
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bdb0      	pop	{r4, r5, r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20027b4c 	.word	0x20027b4c
 8002700:	20028090 	.word	0x20028090

08002704 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3304      	adds	r3, #4
 8002714:	ed93 7a00 	vldr	s14, [r3]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3308      	adds	r3, #8
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3308      	adds	r3, #8
 8002728:	edd3 6a00 	vldr	s13, [r3]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	3304      	adds	r3, #4
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3308      	adds	r3, #8
 8002746:	ed93 7a00 	vldr	s14, [r3]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	edd3 6a00 	vldr	s13, [r3]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3308      	adds	r3, #8
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276e:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	ed93 7a00 	vldr	s14, [r3]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	3304      	adds	r3, #4
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3304      	adds	r3, #4
 8002788:	edd3 6a00 	vldr	s13, [r3]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3308      	adds	r3, #8
 800279a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279e:	edc3 7a00 	vstr	s15, [r3]
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <vec_length>:

float vec_length(float *vec) {
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	461a      	mov	r2, r3
 80027bc:	2103      	movs	r1, #3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f017 f924 	bl	8019a0c <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	f107 0308 	add.w	r3, r7, #8
 80027cc:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80027ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	db09      	blt.n	80027f0 <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80027dc:	ed97 0a05 	vldr	s0, [r7, #20]
 80027e0:	f017 fd88 	bl	801a2f4 <sqrtf>
 80027e4:	eef0 7a40 	vmov.f32	s15, s0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	edc3 7a00 	vstr	s15, [r3]
 80027ee:	e003      	b.n	80027f8 <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

    return res;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	ee07 3a90 	vmov	s15, r3
}
 80027fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b09a      	sub	sp, #104	; 0x68
 800280c:	af00      	add	r7, sp, #0
 800280e:	6178      	str	r0, [r7, #20]
 8002810:	ed87 0a04 	vstr	s0, [r7, #16]
 8002814:	edc7 0a03 	vstr	s1, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 800281c:	ed97 0a04 	vldr	s0, [r7, #16]
 8002820:	f017 fa20 	bl	8019c64 <arm_cos_f32>
 8002824:	eef0 7a40 	vmov.f32	s15, s0
 8002828:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002832:	ed97 0a04 	vldr	s0, [r7, #16]
 8002836:	f017 f9cf 	bl	8019bd8 <arm_sin_f32>
 800283a:	eef0 7a40 	vmov.f32	s15, s0
 800283e:	eef1 7a67 	vneg.f32	s15, s15
 8002842:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800284c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002850:	f017 fa08 	bl	8019c64 <arm_cos_f32>
 8002854:	eef0 7a40 	vmov.f32	s15, s0
 8002858:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 800285c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002860:	f017 f9ba 	bl	8019bd8 <arm_sin_f32>
 8002864:	eef0 7a40 	vmov.f32	s15, s0
 8002868:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 800286c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 8002878:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800287c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002880:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff3d 	bl	8002704 <vec_cross_product>
    float len = vec_length(ray);
 800288a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff8d 	bl	80027ae <vec_length>
 8002894:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 8002898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800289c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80028a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80028a4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80028a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028ac:	2203      	movs	r2, #3
 80028ae:	eeb0 0a66 	vmov.f32	s0, s13
 80028b2:	4618      	mov	r0, r3
 80028b4:	f017 fa7a 	bl	8019dac <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 80028b8:	2303      	movs	r3, #3
 80028ba:	873b      	strh	r3, [r7, #56]	; 0x38
 80028bc:	2303      	movs	r3, #3
 80028be:	877b      	strh	r3, [r7, #58]	; 0x3a
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	330c      	adds	r3, #12
 80028c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 80028c6:	2303      	movs	r3, #3
 80028c8:	863b      	strh	r3, [r7, #48]	; 0x30
 80028ca:	2301      	movs	r3, #1
 80028cc:	867b      	strh	r3, [r7, #50]	; 0x32
 80028ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 80028d4:	2303      	movs	r3, #3
 80028d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80028d8:	2301      	movs	r3, #1
 80028da:	857b      	strh	r3, [r7, #42]	; 0x2a
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 80028e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028e4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80028e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028ec:	4618      	mov	r0, r3
 80028ee:	f017 f8d3 	bl	8019a98 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 80028f2:	f107 031c 	add.w	r3, r7, #28
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f107 011c 	add.w	r1, r7, #28
 8002904:	2303      	movs	r3, #3
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	f017 faec 	bl	8019ee4 <arm_add_f32>
}
 800290c:	bf00      	nop
 800290e:	3768      	adds	r7, #104	; 0x68
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b098      	sub	sp, #96	; 0x60
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 8002922:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 800292e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002932:	2303      	movs	r3, #3
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f017 f9de 	bl	8019cf8 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 800293c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002940:	2203      	movs	r2, #3
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	68b8      	ldr	r0, [r7, #8]
 8002946:	f017 fa75 	bl	8019e34 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 800294a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800294e:	2203      	movs	r2, #3
 8002950:	6839      	ldr	r1, [r7, #0]
 8002952:	68b8      	ldr	r0, [r7, #8]
 8002954:	f017 fa6e 	bl	8019e34 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 8002958:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800295c:	2203      	movs	r2, #3
 800295e:	6839      	ldr	r1, [r7, #0]
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	f017 fa67 	bl	8019e34 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 8002966:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800296a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800296e:	2203      	movs	r2, #3
 8002970:	68b8      	ldr	r0, [r7, #8]
 8002972:	f017 fa5f 	bl	8019e34 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 8002976:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800297a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800297e:	2203      	movs	r2, #3
 8002980:	6838      	ldr	r0, [r7, #0]
 8002982:	f017 fa57 	bl	8019e34 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 8002986:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800298a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800298e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002992:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002996:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800299a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800299e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 80029a6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80029aa:	eef0 7ae7 	vabs.f32	s15, s15
 80029ae:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002acc <intersect_lines+0x1b8>
 80029b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	d501      	bpl.n	80029c0 <intersect_lines+0xac>
        return 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	e081      	b.n	8002ac4 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 80029c0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80029c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029cc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80029d0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029dc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80029e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029e4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 80029e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 80029f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f8:	2203      	movs	r2, #3
 80029fa:	4619      	mov	r1, r3
 80029fc:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8002a00:	68b8      	ldr	r0, [r7, #8]
 8002a02:	f017 f9d3 	bl	8019dac <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 8002a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a0a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a0e:	2303      	movs	r3, #3
 8002a10:	68f9      	ldr	r1, [r7, #12]
 8002a12:	f017 fa67 	bl	8019ee4 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 8002a16:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002a1a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a22:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002a26:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a32:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a3a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8002a3e:	f107 031c 	add.w	r3, r7, #28
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	2203      	movs	r2, #3
 8002a50:	4619      	mov	r1, r3
 8002a52:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002a56:	6838      	ldr	r0, [r7, #0]
 8002a58:	f017 f9a8 	bl	8019dac <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002a5c:	f107 021c 	add.w	r2, r7, #28
 8002a60:	f107 001c 	add.w	r0, r7, #28
 8002a64:	2303      	movs	r3, #3
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	f017 fa3c 	bl	8019ee4 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002a6c:	f107 0310 	add.w	r3, r7, #16
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a78:	f107 0210 	add.w	r2, r7, #16
 8002a7c:	f107 011c 	add.w	r1, r7, #28
 8002a80:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a84:	2303      	movs	r3, #3
 8002a86:	f017 fa2d 	bl	8019ee4 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	2203      	movs	r2, #3
 8002a90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a92:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002a96:	4618      	mov	r0, r3
 8002a98:	f017 f988 	bl	8019dac <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a9c:	f107 0210 	add.w	r2, r7, #16
 8002aa0:	f107 011c 	add.w	r1, r7, #28
 8002aa4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	f017 f925 	bl	8019cf8 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002aae:	f107 0310 	add.w	r3, r7, #16
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fe7b 	bl	80027ae <vec_length>
 8002ab8:	eef0 7a40 	vmov.f32	s15, s0
 8002abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abe:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002ac2:	2301      	movs	r3, #1
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3760      	adds	r7, #96	; 0x60
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	3727c5ac 	.word	0x3727c5ac

08002ad0 <LL_AHB2_GRP1_EnableClock>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002af4:	68fb      	ldr	r3, [r7, #12]
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b18:	2004      	movs	r0, #4
 8002b1a:	f7ff ffd9 	bl	8002ad0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b1e:	2080      	movs	r0, #128	; 0x80
 8002b20:	f7ff ffd6 	bl	8002ad0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b24:	2002      	movs	r0, #2
 8002b26:	f7ff ffd3 	bl	8002ad0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	f7ff ffd0 	bl	8002ad0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b30:	2010      	movs	r0, #16
 8002b32:	f7ff ffcd 	bl	8002ad0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DONGLE_DEBUG_PIN_GPIO_Port, DONGLE_DEBUG_PIN_Pin, GPIO_PIN_RESET);
 8002b36:	2200      	movs	r2, #0
 8002b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b3c:	4835      	ldr	r0, [pc, #212]	; (8002c14 <MX_GPIO_Init+0x110>)
 8002b3e:	f005 fc8f 	bl	8008460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b42:	2308      	movs	r3, #8
 8002b44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b46:	2303      	movs	r3, #3
 8002b48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	4619      	mov	r1, r3
 8002b52:	4831      	ldr	r0, [pc, #196]	; (8002c18 <MX_GPIO_Init+0x114>)
 8002b54:	f005 fafc 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DONGLE_DEBUG_PIN_Pin;
 8002b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DONGLE_DEBUG_PIN_GPIO_Port, &GPIO_InitStruct);
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4829      	ldr	r0, [pc, #164]	; (8002c14 <MX_GPIO_Init+0x110>)
 8002b70:	f005 faee 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB0 PB1 PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 8002b74:	f240 23f3 	movw	r3, #755	; 0x2f3
 8002b78:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4823      	ldr	r0, [pc, #140]	; (8002c14 <MX_GPIO_Init+0x110>)
 8002b88:	f005 fae2 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002b8c:	f248 13dc 	movw	r3, #33244	; 0x81dc
 8002b90:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b92:	2303      	movs	r3, #3
 8002b94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba2:	f005 fad5 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <MX_GPIO_Init+0x118>)
 8002bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bba:	f005 fac9 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bc2:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <MX_GPIO_Init+0x11c>)
 8002bc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4811      	ldr	r0, [pc, #68]	; (8002c14 <MX_GPIO_Init+0x110>)
 8002bd0:	f005 fabe 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	4619      	mov	r1, r3
 8002be4:	480f      	ldr	r0, [pc, #60]	; (8002c24 <MX_GPIO_Init+0x120>)
 8002be6:	f005 fab3 	bl	8008150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2105      	movs	r1, #5
 8002bee:	2008      	movs	r0, #8
 8002bf0:	f004 ff27 	bl	8007a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002bf4:	2008      	movs	r0, #8
 8002bf6:	f004 ff3e 	bl	8007a76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2105      	movs	r1, #5
 8002bfe:	2017      	movs	r0, #23
 8002c00:	f004 ff1f 	bl	8007a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c04:	2017      	movs	r0, #23
 8002c06:	f004 ff36 	bl	8007a76 <HAL_NVIC_EnableIRQ>

}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	48000400 	.word	0x48000400
 8002c18:	48001c00 	.word	0x48001c00
 8002c1c:	10210000 	.word	0x10210000
 8002c20:	10110000 	.word	0x10110000
 8002c24:	48001000 	.word	0x48001000

08002c28 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <LL_EXTI_EnableIT_0_31+0x24>)
 8002c32:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c36:	4905      	ldr	r1, [pc, #20]	; (8002c4c <LL_EXTI_EnableIT_0_31+0x24>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	58000800 	.word	0x58000800

08002c50 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4904      	ldr	r1, [pc, #16]	; (8002c70 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]

}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	58000800 	.word	0x58000800

08002c74 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8002c80:	4a61      	ldr	r2, [pc, #388]	; (8002e08 <HW_TS_Init+0x194>)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002c86:	4b60      	ldr	r3, [pc, #384]	; (8002e08 <HW_TS_Init+0x194>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	22ca      	movs	r2, #202	; 0xca
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c90:	4b5d      	ldr	r3, [pc, #372]	; (8002e08 <HW_TS_Init+0x194>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2253      	movs	r2, #83	; 0x53
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c9a:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <HW_TS_Init+0x198>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	4a5b      	ldr	r2, [pc, #364]	; (8002e0c <HW_TS_Init+0x198>)
 8002ca0:	f043 0320 	orr.w	r3, r3, #32
 8002ca4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002ca6:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HW_TS_Init+0x198>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f1c3 0304 	rsb	r3, r3, #4
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	4b55      	ldr	r3, [pc, #340]	; (8002e10 <HW_TS_Init+0x19c>)
 8002cba:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HW_TS_Init+0x198>)
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cc4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002cc8:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	fa92 f2a2 	rbit	r2, r2
 8002cd0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	fab2 f282 	clz	r2, r2
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	40d3      	lsrs	r3, r2
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <HW_TS_Init+0x1a0>)
 8002ce4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002ce6:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <HW_TS_Init+0x198>)
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <HW_TS_Init+0x1a4>)
 8002cf8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HW_TS_Init+0x1a4>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	4a44      	ldr	r2, [pc, #272]	; (8002e14 <HW_TS_Init+0x1a0>)
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	fb02 f303 	mul.w	r3, r2, r3
 8002d08:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d0c:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <HW_TS_Init+0x19c>)
 8002d0e:	7812      	ldrb	r2, [r2, #0]
 8002d10:	40d3      	lsrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d904      	bls.n	8002d28 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <HW_TS_Init+0x1a8>)
 8002d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d24:	801a      	strh	r2, [r3, #0]
 8002d26:	e003      	b.n	8002d30 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <HW_TS_Init+0x1a8>)
 8002d2e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002d30:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d34:	f7ff ff8c 	bl	8002c50 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002d38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d3c:	f7ff ff74 	bl	8002c28 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d143      	bne.n	8002dce <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HW_TS_Init+0x1ac>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002d4c:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <HW_TS_Init+0x1b0>)
 8002d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d52:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	75fb      	strb	r3, [r7, #23]
 8002d58:	e00c      	b.n	8002d74 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002d5a:	7dfa      	ldrb	r2, [r7, #23]
 8002d5c:	4932      	ldr	r1, [pc, #200]	; (8002e28 <HW_TS_Init+0x1b4>)
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	330c      	adds	r3, #12
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
 8002d70:	3301      	adds	r3, #1
 8002d72:	75fb      	strb	r3, [r7, #23]
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d9ef      	bls.n	8002d5a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HW_TS_Init+0x1b8>)
 8002d7c:	2206      	movs	r2, #6
 8002d7e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HW_TS_Init+0x194>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <HW_TS_Init+0x194>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d92:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002d94:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <HW_TS_Init+0x194>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <HW_TS_Init+0x194>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002da8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002daa:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <HW_TS_Init+0x1bc>)
 8002dac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002db0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002db2:	2003      	movs	r0, #3
 8002db4:	f004 fe7f 	bl	8007ab6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <HW_TS_Init+0x194>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HW_TS_Init+0x194>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	e00a      	b.n	8002de4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HW_TS_Init+0x194>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002dde:	2003      	movs	r0, #3
 8002de0:	f004 fe5b 	bl	8007a9a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HW_TS_Init+0x194>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	22ff      	movs	r2, #255	; 0xff
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002dee:	2200      	movs	r2, #0
 8002df0:	2106      	movs	r1, #6
 8002df2:	2003      	movs	r0, #3
 8002df4:	f004 fe25 	bl	8007a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002df8:	2003      	movs	r0, #3
 8002dfa:	f004 fe3c 	bl	8007a76 <HAL_NVIC_EnableIRQ>

  return;
 8002dfe:	bf00      	nop
}
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000c38 	.word	0x20000c38
 8002e0c:	40002800 	.word	0x40002800
 8002e10:	20000c3c 	.word	0x20000c3c
 8002e14:	20000c3d 	.word	0x20000c3d
 8002e18:	20000c3e 	.word	0x20000c3e
 8002e1c:	20000c40 	.word	0x20000c40
 8002e20:	20000370 	.word	0x20000370
 8002e24:	2000036c 	.word	0x2000036c
 8002e28:	200002d8 	.word	0x200002d8
 8002e2c:	20000368 	.word	0x20000368
 8002e30:	58000800 	.word	0x58000800

08002e34 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b08b      	sub	sp, #44	; 0x2c
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e50:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002e52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e54:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002e56:	e004      	b.n	8002e62 <HW_TS_Create+0x2e>
  {
    loop++;
 8002e58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002e62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d80c      	bhi.n	8002e84 <HW_TS_Create+0x50>
 8002e6a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002e6e:	492b      	ldr	r1, [pc, #172]	; (8002f1c <HW_TS_Create+0xe8>)
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e9      	bne.n	8002e58 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e88:	2b06      	cmp	r3, #6
 8002e8a:	d037      	beq.n	8002efc <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002e8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002e90:	4922      	ldr	r1, [pc, #136]	; (8002f1c <HW_TS_Create+0xe8>)
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002eac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002eb0:	491a      	ldr	r1, [pc, #104]	; (8002f1c <HW_TS_Create+0xe8>)
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	3310      	adds	r3, #16
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002ec2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ec6:	4915      	ldr	r1, [pc, #84]	; (8002f1c <HW_TS_Create+0xe8>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	330d      	adds	r3, #13
 8002ed4:	79fa      	ldrb	r2, [r7, #7]
 8002ed6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002ed8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002edc:	490f      	ldr	r1, [pc, #60]	; (8002f1c <HW_TS_Create+0xe8>)
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ef2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002efa:	e007      	b.n	8002f0c <HW_TS_Create+0xd8>
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	372c      	adds	r7, #44	; 0x2c
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	200002d8 	.word	0x200002d8

08002f20 <LL_AHB2_GRP1_EnableClock>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4013      	ands	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f44:	68fb      	ldr	r3, [r7, #12]
}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002f8a:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <MX_I2C1_Init+0x78>)
 8002f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002f90:	4a1b      	ldr	r2, [pc, #108]	; (8003000 <MX_I2C1_Init+0x7c>)
 8002f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f94:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f9a:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fa0:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002fa6:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fac:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fb2:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fbe:	480e      	ldr	r0, [pc, #56]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002fc0:	f005 fa7e 	bl	80084c0 <HAL_I2C_Init>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002fca:	f000 fd97 	bl	8003afc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4809      	ldr	r0, [pc, #36]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002fd2:	f007 fa37 	bl	800a444 <HAL_I2CEx_ConfigAnalogFilter>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002fdc:	f000 fd8e 	bl	8003afc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <MX_I2C1_Init+0x74>)
 8002fe4:	f007 fa79 	bl	800a4da <HAL_I2CEx_ConfigDigitalFilter>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002fee:	f000 fd85 	bl	8003afc <Error_Handler>
  }

}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20028250 	.word	0x20028250
 8002ffc:	40005400 	.word	0x40005400
 8003000:	00e27cae 	.word	0x00e27cae

08003004 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 030c 	add.w	r3, r7, #12
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a13      	ldr	r2, [pc, #76]	; (8003070 <HAL_I2C_MspInit+0x6c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d120      	bne.n	8003068 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003026:	2001      	movs	r0, #1
 8003028:	f7ff ff7a 	bl	8002f20 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800302c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003030:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003032:	2312      	movs	r3, #18
 8003034:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800303e:	2304      	movs	r3, #4
 8003040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003042:	f107 030c 	add.w	r3, r7, #12
 8003046:	4619      	mov	r1, r3
 8003048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800304c:	f005 f880 	bl	8008150 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003050:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003054:	f7ff ff7d 	bl	8002f52 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	2105      	movs	r1, #5
 800305c:	201e      	movs	r0, #30
 800305e:	f004 fcf0 	bl	8007a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003062:	201e      	movs	r0, #30
 8003064:	f004 fd07 	bl	8007a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003068:	bf00      	nop
 800306a:	3720      	adds	r7, #32
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40005400 	.word	0x40005400

08003074 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <InertialSensingTask+0xec>)
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 8003082:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003086:	2120      	movs	r1, #32
 8003088:	204a      	movs	r0, #74	; 0x4a
 800308a:	f7fe fd29 	bl	8001ae0 <IMU_begin>
#endif

	uint32_t evt = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003092:	f04f 32ff 	mov.w	r2, #4294967295
 8003096:	2100      	movs	r1, #0
 8003098:	2001      	movs	r0, #1
 800309a:	f00c ffc5 	bl	8010028 <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 800309e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030a2:	f00d f855 	bl	8010150 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 80030a6:	2064      	movs	r0, #100	; 0x64
 80030a8:	f7ff f816 	bl	80020d8 <IMU_enableRotationVector>
		osDelay(100);
 80030ac:	2064      	movs	r0, #100	; 0x64
 80030ae:	f00d f84f 	bl	8010150 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <InertialSensingTask+0xf0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a2c      	ldr	r2, [pc, #176]	; (8003168 <InertialSensingTask+0xf4>)
 80030b8:	4619      	mov	r1, r3
 80030ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030be:	f7ff f819 	bl	80020f4 <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 80030c2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80030c6:	f00d f843 	bl	8010150 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 80030ca:	2064      	movs	r0, #100	; 0x64
 80030cc:	f00d f840 	bl	8010150 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 80030d0:	4b26      	ldr	r3, [pc, #152]	; (800316c <InertialSensingTask+0xf8>)
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	2364      	movs	r3, #100	; 0x64
 80030d6:	2200      	movs	r2, #0
 80030d8:	4925      	ldr	r1, [pc, #148]	; (8003170 <InertialSensingTask+0xfc>)
 80030da:	f00d fd29 	bl	8010b30 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 80030de:	4b25      	ldr	r3, [pc, #148]	; (8003174 <InertialSensingTask+0x100>)
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	2300      	movs	r3, #0
 80030e4:	2200      	movs	r2, #0
 80030e6:	4924      	ldr	r1, [pc, #144]	; (8003178 <InertialSensingTask+0x104>)
 80030e8:	f00d fd22 	bl	8010b30 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <InertialSensingTask+0x108>)
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	2300      	movs	r3, #0
 80030f2:	2200      	movs	r2, #0
 80030f4:	491e      	ldr	r1, [pc, #120]	; (8003170 <InertialSensingTask+0xfc>)
 80030f6:	f00d fca7 	bl	8010a48 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 80030fa:	2120      	movs	r1, #32
 80030fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003100:	f005 f996 	bl	8008430 <HAL_GPIO_ReadPin>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <InertialSensingTask+0x9a>
 800310a:	f7fe fd21 	bl	8001b50 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2100      	movs	r1, #0
 8003112:	2002      	movs	r0, #2
 8003114:	f00c ff88 	bl	8010028 <osThreadFlagsWait>
 8003118:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0d2      	beq.n	80030ca <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 8003124:	f7fe ff76 	bl	8002014 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8003128:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800312c:	f00d f810 	bl	8010150 <osDelay>

				inertialEnabled = 0;
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <InertialSensingTask+0xec>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <InertialSensingTask+0x108>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f00d fd6a 	bl	8010c14 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <InertialSensingTask+0x100>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f00d fd65 	bl	8010c14 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <InertialSensingTask+0xf8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f00d fd60 	bl	8010c14 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8003154:	200e      	movs	r0, #14
 8003156:	f00c ff17 	bl	800ff88 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 800315a:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 800315c:	e799      	b.n	8003092 <InertialSensingTask+0x1e>
 800315e:	bf00      	nop
 8003160:	20000c42 	.word	0x20000c42
 8003164:	20000068 	.word	0x20000068
 8003168:	200282e0 	.word	0x200282e0
 800316c:	20027c68 	.word	0x20027c68
 8003170:	200282a4 	.word	0x200282a4
 8003174:	20027c44 	.word	0x20027c44
 8003178:	200282bc 	.word	0x200282bc
 800317c:	20027c54 	.word	0x20027c54

08003180 <HAL_GPIO_EXTI_Callback>:
//
//
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	2b20      	cmp	r3, #32
 800318e:	d105      	bne.n	800319c <HAL_GPIO_EXTI_Callback+0x1c>
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x24>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003198:	f7fe fcda 	bl	8001b50 <IMU_dataAvailable>
	}
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000c42 	.word	0x20000c42

080031a8 <_Input>:
#include "string.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 80031b4:	480b      	ldr	r0, [pc, #44]	; (80031e4 <_Input+0x3c>)
 80031b6:	f7ff f9cf 	bl	8002558 <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 80031ba:	2101      	movs	r1, #1
 80031bc:	480a      	ldr	r0, [pc, #40]	; (80031e8 <_Input+0x40>)
 80031be:	f000 ffa1 	bl	8004104 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <_Input+0x40>)
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <_Input+0x3c>)
 80031c6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a06      	ldr	r2, [pc, #24]	; (80031e8 <_Input+0x40>)
 80031ce:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2002830c 	.word	0x2002830c
 80031e8:	20028394 	.word	0x20028394

080031ec <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	2100      	movs	r1, #0
 80031fe:	2001      	movs	r0, #1
 8003200:	f00c ff12 	bl	8010028 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003204:	4818      	ldr	r0, [pc, #96]	; (8003268 <PulseHandlerTask+0x7c>)
 8003206:	f00a fabb 	bl	800d780 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 800320a:	4818      	ldr	r0, [pc, #96]	; (800326c <PulseHandlerTask+0x80>)
 800320c:	f004 fa54 	bl	80076b8 <HAL_COMP_Start>
		_Input(&input0, 0);
 8003210:	2100      	movs	r1, #0
 8003212:	4817      	ldr	r0, [pc, #92]	; (8003270 <PulseHandlerTask+0x84>)
 8003214:	f7ff ffc8 	bl	80031a8 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <PulseHandlerTask+0x88>)
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
 8003220:	2200      	movs	r2, #0
 8003222:	4915      	ldr	r1, [pc, #84]	; (8003278 <PulseHandlerTask+0x8c>)
 8003224:	f00d fc84 	bl	8010b30 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <PulseHandlerTask+0x84>)
 800322a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800322e:	4912      	ldr	r1, [pc, #72]	; (8003278 <PulseHandlerTask+0x8c>)
 8003230:	4618      	mov	r0, r3
 8003232:	f000 ff9b 	bl	800416c <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	2100      	movs	r1, #0
 800323a:	2002      	movs	r0, #2
 800323c:	f00c fef4 	bl	8010028 <osThreadFlagsWait>
 8003240:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0e5      	beq.n	8003218 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 800324c:	4807      	ldr	r0, [pc, #28]	; (800326c <PulseHandlerTask+0x80>)
 800324e:	f004 fa7d 	bl	800774c <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003252:	4805      	ldr	r0, [pc, #20]	; (8003268 <PulseHandlerTask+0x7c>)
 8003254:	f00a fabe 	bl	800d7d4 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <PulseHandlerTask+0x88>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f00d fcd9 	bl	8010c14 <osMessageQueueReset>
				break;
 8003262:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003264:	e7c8      	b.n	80031f8 <PulseHandlerTask+0xc>
 8003266:	bf00      	nop
 8003268:	2002888c 	.word	0x2002888c
 800326c:	200280c0 	.word	0x200280c0
 8003270:	20027c6c 	.word	0x20027c6c
 8003274:	20027b48 	.word	0x20027b48
 8003278:	200282ec 	.word	0x200282ec

0800327c <get3D_location>:

VIVEVars vive_vars;
struct LogMessage statusMessage;
struct VIVEVars vive_loc_demo;

void get3D_location(void *arguments){
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
	uint32_t blinkState;

	memcpy(&blinkState, arguments, sizeof(blinkState));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60bb      	str	r3, [r7, #8]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 800328e:	4b3f      	ldr	r3, [pc, #252]	; (800338c <get3D_location+0x110>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f00d fa93 	bl	80107c0 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 800329a:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <get3D_location+0x114>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2100      	movs	r1, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f00d fa8d 	bl	80107c0 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 80032a6:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <get3D_location+0x118>)
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	2200      	movs	r2, #0
 80032b0:	4939      	ldr	r1, [pc, #228]	; (8003398 <get3D_location+0x11c>)
 80032b2:	f00d fc3d 	bl	8010b30 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 80032b6:	4b38      	ldr	r3, [pc, #224]	; (8003398 <get3D_location+0x11c>)
 80032b8:	789b      	ldrb	r3, [r3, #2]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d116      	bne.n	80032ec <get3D_location+0x70>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 80032be:	4b35      	ldr	r3, [pc, #212]	; (8003394 <get3D_location+0x118>)
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	2300      	movs	r3, #0
 80032c4:	2200      	movs	r2, #0
 80032c6:	4934      	ldr	r1, [pc, #208]	; (8003398 <get3D_location+0x11c>)
 80032c8:	f00d fbbe 	bl	8010a48 <osMessageQueuePut>

		blinkActive = 1;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 80032d0:	4b32      	ldr	r3, [pc, #200]	; (800339c <get3D_location+0x120>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2102      	movs	r1, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f00c fdf4 	bl	800fec4 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 80032dc:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <get3D_location+0x114>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295
 80032e4:	4618      	mov	r0, r3
 80032e6:	f00d fa6b 	bl	80107c0 <osSemaphoreAcquire>
 80032ea:	e006      	b.n	80032fa <get3D_location+0x7e>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 80032ec:	4b29      	ldr	r3, [pc, #164]	; (8003394 <get3D_location+0x118>)
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	2300      	movs	r3, #0
 80032f2:	2200      	movs	r2, #0
 80032f4:	4928      	ldr	r1, [pc, #160]	; (8003398 <get3D_location+0x11c>)
 80032f6:	f00d fba7 	bl	8010a48 <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80032fa:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <get3D_location+0x124>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f04f 31ff 	mov.w	r1, #4294967295
 8003302:	4618      	mov	r0, r3
 8003304:	f00d fa5c 	bl	80107c0 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003308:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <get3D_location+0x128>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2101      	movs	r1, #1
 800330e:	4618      	mov	r0, r3
 8003310:	f00c fdd8 	bl	800fec4 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <get3D_location+0x110>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800331c:	4618      	mov	r0, r3
 800331e:	f00d fa4f 	bl	80107c0 <osSemaphoreAcquire>

#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	if(blinkState == LIGHT_LAB_DEMO){
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d119      	bne.n	800335c <get3D_location+0xe0>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003328:	e00f      	b.n	800334a <get3D_location+0xce>
			if(osOK == osMessageQueueGet(viveQueueHandle, &vive_loc_demo, 0U, 1000)){
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <get3D_location+0x12c>)
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003332:	2200      	movs	r2, #0
 8003334:	491d      	ldr	r1, [pc, #116]	; (80033ac <get3D_location+0x130>)
 8003336:	f00d fbfb 	bl	8010b30 <osMessageQueueGet>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d104      	bne.n	800334a <get3D_location+0xce>
				APP_THREAD_SendBorderMessage(&vive_loc_demo, sizeof(VIVEVars), "capLoc");
 8003340:	4a1b      	ldr	r2, [pc, #108]	; (80033b0 <get3D_location+0x134>)
 8003342:	2118      	movs	r1, #24
 8003344:	4819      	ldr	r0, [pc, #100]	; (80033ac <get3D_location+0x130>)
 8003346:	f014 fd07 	bl	8017d58 <APP_THREAD_SendBorderMessage>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <get3D_location+0x138>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f00d fa35 	bl	80107c0 <osSemaphoreAcquire>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e6      	bne.n	800332a <get3D_location+0xae>
//			}
		}
	}

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 800335c:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <get3D_location+0x124>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f00d fa93 	bl	801088c <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <get3D_location+0x128>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2102      	movs	r1, #2
 800336c:	4618      	mov	r0, r3
 800336e:	f00c fda9 	bl	800fec4 <osThreadFlagsSet>

	if(blinkActive){
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <get3D_location+0x108>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <get3D_location+0x120>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f00c fda0 	bl	800fec4 <osThreadFlagsSet>
	}

}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20028090 	.word	0x20028090
 8003390:	20028098 	.word	0x20028098
 8003394:	20027c64 	.word	0x20027c64
 8003398:	200280b4 	.word	0x200280b4
 800339c:	20027c34 	.word	0x20027c34
 80033a0:	20027c50 	.word	0x20027c50
 80033a4:	2002809c 	.word	0x2002809c
 80033a8:	20027b4c 	.word	0x20027b4c
 80033ac:	20028664 	.word	0x20028664
 80033b0:	0801b39c 	.word	0x0801b39c
 80033b4:	20027c5c 	.word	0x20027c5c

080033b8 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
 80033c4:	4613      	mov	r3, r2
 80033c6:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80033ce:	723b      	strb	r3, [r7, #8]
 80033d0:	887b      	ldrh	r3, [r7, #2]
 80033d2:	817b      	strh	r3, [r7, #10]
 80033d4:	883b      	ldrh	r3, [r7, #0]
 80033d6:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <enqueue_pulse+0x38>)
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	f107 0108 	add.w	r1, r7, #8
 80033e0:	2300      	movs	r3, #0
 80033e2:	2200      	movs	r2, #0
 80033e4:	f00d fb30 	bl	8010a48 <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20027b48 	.word	0x20027b48

080033f4 <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
#ifndef DONGLE_CODE
	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003400:	4b8e      	ldr	r3, [pc, #568]	; (800363c <InterProcessorTask+0x248>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f04f 31ff 	mov.w	r1, #4294967295
 8003408:	4618      	mov	r0, r3
 800340a:	f00d f9d9 	bl	80107c0 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 800340e:	e00e      	b.n	800342e <InterProcessorTask+0x3a>
		osSemaphoreRelease(messageI2C_LockHandle);
 8003410:	4b8a      	ldr	r3, [pc, #552]	; (800363c <InterProcessorTask+0x248>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f00d fa39 	bl	801088c <osSemaphoreRelease>
		osDelay(100);
 800341a:	2064      	movs	r0, #100	; 0x64
 800341c:	f00c fe98 	bl	8010150 <osDelay>
		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003420:	4b86      	ldr	r3, [pc, #536]	; (800363c <InterProcessorTask+0x248>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	4618      	mov	r0, r3
 800342a:	f00d f9c9 	bl	80107c0 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 800342e:	2364      	movs	r3, #100	; 0x64
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	2306      	movs	r3, #6
 8003434:	4a82      	ldr	r2, [pc, #520]	; (8003640 <InterProcessorTask+0x24c>)
 8003436:	21e6      	movs	r1, #230	; 0xe6
 8003438:	4882      	ldr	r0, [pc, #520]	; (8003644 <InterProcessorTask+0x250>)
 800343a:	f005 f8d1 	bl	80085e0 <HAL_I2C_Master_Transmit>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e5      	bne.n	8003410 <InterProcessorTask+0x1c>
	};
	osSemaphoreRelease(messageI2C_LockHandle);
 8003444:	4b7d      	ldr	r3, [pc, #500]	; (800363c <InterProcessorTask+0x248>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f00d fa1f 	bl	801088c <osSemaphoreRelease>
#endif
	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 800344e:	f04f 32ff 	mov.w	r2, #4294967295
 8003452:	2100      	movs	r1, #0
 8003454:	2001      	movs	r0, #1
 8003456:	f00c fde7 	bl	8010028 <osThreadFlagsWait>
 800345a:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f3      	beq.n	800344e <InterProcessorTask+0x5a>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003466:	4b78      	ldr	r3, [pc, #480]	; (8003648 <InterProcessorTask+0x254>)
 8003468:	4a78      	ldr	r2, [pc, #480]	; (800364c <InterProcessorTask+0x258>)
 800346a:	6811      	ldr	r1, [r2, #0]
 800346c:	6019      	str	r1, [r3, #0]
 800346e:	8892      	ldrh	r2, [r2, #4]
 8003470:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003472:	4b72      	ldr	r3, [pc, #456]	; (800363c <InterProcessorTask+0x248>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f04f 31ff 	mov.w	r1, #4294967295
 800347a:	4618      	mov	r0, r3
 800347c:	f00d f9a0 	bl	80107c0 <osSemaphoreAcquire>
			//while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK){
 8003480:	e00e      	b.n	80034a0 <InterProcessorTask+0xac>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003482:	4b6e      	ldr	r3, [pc, #440]	; (800363c <InterProcessorTask+0x248>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f00d fa00 	bl	801088c <osSemaphoreRelease>
					osDelay(100);
 800348c:	2064      	movs	r0, #100	; 0x64
 800348e:	f00c fe5f 	bl	8010150 <osDelay>
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003492:	4b6a      	ldr	r3, [pc, #424]	; (800363c <InterProcessorTask+0x248>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f04f 31ff 	mov.w	r1, #4294967295
 800349a:	4618      	mov	r0, r3
 800349c:	f00d f990 	bl	80107c0 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK){
 80034a0:	2364      	movs	r3, #100	; 0x64
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2306      	movs	r3, #6
 80034a6:	4a68      	ldr	r2, [pc, #416]	; (8003648 <InterProcessorTask+0x254>)
 80034a8:	21e6      	movs	r1, #230	; 0xe6
 80034aa:	4866      	ldr	r0, [pc, #408]	; (8003644 <InterProcessorTask+0x250>)
 80034ac:	f005 f898 	bl	80085e0 <HAL_I2C_Master_Transmit>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e5      	bne.n	8003482 <InterProcessorTask+0x8e>
				}
			osDelay(100);
 80034b6:	2064      	movs	r0, #100	; 0x64
 80034b8:	f00c fe4a 	bl	8010150 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 80034bc:	4b5f      	ldr	r3, [pc, #380]	; (800363c <InterProcessorTask+0x248>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f00d f9e3 	bl	801088c <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 80034c6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ca:	2100      	movs	r1, #0
 80034cc:	2006      	movs	r0, #6
 80034ce:	f00c fdab 	bl	8010028 <osThreadFlagsWait>
 80034d2:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d079      	beq.n	80035d2 <InterProcessorTask+0x1de>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80034de:	4b57      	ldr	r3, [pc, #348]	; (800363c <InterProcessorTask+0x248>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f04f 31ff 	mov.w	r1, #4294967295
 80034e6:	4618      	mov	r0, r3
 80034e8:	f00d f96a 	bl	80107c0 <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 80034ec:	e00e      	b.n	800350c <InterProcessorTask+0x118>
 						osSemaphoreRelease(messageI2C_LockHandle);
 80034ee:	4b53      	ldr	r3, [pc, #332]	; (800363c <InterProcessorTask+0x248>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f00d f9ca 	bl	801088c <osSemaphoreRelease>
 						osDelay(100);
 80034f8:	2064      	movs	r0, #100	; 0x64
 80034fa:	f00c fe29 	bl	8010150 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80034fe:	4b4f      	ldr	r3, [pc, #316]	; (800363c <InterProcessorTask+0x248>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f04f 31ff 	mov.w	r1, #4294967295
 8003506:	4618      	mov	r0, r3
 8003508:	f00d f95a 	bl	80107c0 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 800350c:	2364      	movs	r3, #100	; 0x64
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2306      	movs	r3, #6
 8003512:	4a4d      	ldr	r2, [pc, #308]	; (8003648 <InterProcessorTask+0x254>)
 8003514:	21e6      	movs	r1, #230	; 0xe6
 8003516:	484b      	ldr	r0, [pc, #300]	; (8003644 <InterProcessorTask+0x250>)
 8003518:	f005 f862 	bl	80085e0 <HAL_I2C_Master_Transmit>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e5      	bne.n	80034ee <InterProcessorTask+0xfa>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003522:	2008      	movs	r0, #8
 8003524:	f00c fd30 	bl	800ff88 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003528:	e00e      	b.n	8003548 <InterProcessorTask+0x154>
 						osSemaphoreRelease(messageI2C_LockHandle);
 800352a:	4b44      	ldr	r3, [pc, #272]	; (800363c <InterProcessorTask+0x248>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f00d f9ac 	bl	801088c <osSemaphoreRelease>
 						osDelay(100);
 8003534:	2064      	movs	r0, #100	; 0x64
 8003536:	f00c fe0b 	bl	8010150 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800353a:	4b40      	ldr	r3, [pc, #256]	; (800363c <InterProcessorTask+0x248>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f04f 31ff 	mov.w	r1, #4294967295
 8003542:	4618      	mov	r0, r3
 8003544:	f00d f93c 	bl	80107c0 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003548:	2358      	movs	r3, #88	; 0x58
 800354a:	4a41      	ldr	r2, [pc, #260]	; (8003650 <InterProcessorTask+0x25c>)
 800354c:	21e6      	movs	r1, #230	; 0xe6
 800354e:	483d      	ldr	r0, [pc, #244]	; (8003644 <InterProcessorTask+0x250>)
 8003550:	f005 fa30 	bl	80089b4 <HAL_I2C_Master_Receive_IT>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e7      	bne.n	800352a <InterProcessorTask+0x136>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 800355a:	f04f 32ff 	mov.w	r2, #4294967295
 800355e:	2100      	movs	r1, #0
 8003560:	200a      	movs	r0, #10
 8003562:	f00c fd61 	bl	8010028 <osThreadFlagsWait>
 8003566:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003568:	4b34      	ldr	r3, [pc, #208]	; (800363c <InterProcessorTask+0x248>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f00d f98d 	bl	801088c <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d15d      	bne.n	8003638 <InterProcessorTask+0x244>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 800357c:	4b34      	ldr	r3, [pc, #208]	; (8003650 <InterProcessorTask+0x25c>)
 800357e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003580:	4a34      	ldr	r2, [pc, #208]	; (8003654 <InterProcessorTask+0x260>)
 8003582:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003584:	4b32      	ldr	r3, [pc, #200]	; (8003650 <InterProcessorTask+0x25c>)
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	4a32      	ldr	r2, [pc, #200]	; (8003654 <InterProcessorTask+0x260>)
 800358a:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	e01c      	b.n	80035cc <InterProcessorTask+0x1d8>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4a2e      	ldr	r2, [pc, #184]	; (8003650 <InterProcessorTask+0x25c>)
 8003598:	4413      	add	r3, r2
 800359a:	2208      	movs	r2, #8
 800359c:	4619      	mov	r1, r3
 800359e:	482d      	ldr	r0, [pc, #180]	; (8003654 <InterProcessorTask+0x260>)
 80035a0:	f016 fd24 	bl	8019fec <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	3305      	adds	r3, #5
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4a29      	ldr	r2, [pc, #164]	; (8003650 <InterProcessorTask+0x25c>)
 80035ac:	4413      	add	r3, r2
 80035ae:	2208      	movs	r2, #8
 80035b0:	4619      	mov	r1, r3
 80035b2:	4829      	ldr	r0, [pc, #164]	; (8003658 <InterProcessorTask+0x264>)
 80035b4:	f016 fd1a 	bl	8019fec <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 80035b8:	4b28      	ldr	r3, [pc, #160]	; (800365c <InterProcessorTask+0x268>)
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	2300      	movs	r3, #0
 80035be:	2200      	movs	r2, #0
 80035c0:	4924      	ldr	r1, [pc, #144]	; (8003654 <InterProcessorTask+0x260>)
 80035c2:	f00d fa41 	bl	8010a48 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3301      	adds	r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	dddf      	ble.n	8003592 <InterProcessorTask+0x19e>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f43f af74 	beq.w	80034c6 <InterProcessorTask+0xd2>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <InterProcessorTask+0x248>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f04f 31ff 	mov.w	r1, #4294967295
 80035e6:	4618      	mov	r0, r3
 80035e8:	f00d f8ea 	bl	80107c0 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 80035ec:	e00e      	b.n	800360c <InterProcessorTask+0x218>
 						osSemaphoreRelease(messageI2C_LockHandle);
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <InterProcessorTask+0x248>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f00d f94a 	bl	801088c <osSemaphoreRelease>
 						osDelay(100);
 80035f8:	2064      	movs	r0, #100	; 0x64
 80035fa:	f00c fda9 	bl	8010150 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80035fe:	4b0f      	ldr	r3, [pc, #60]	; (800363c <InterProcessorTask+0x248>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f04f 31ff 	mov.w	r1, #4294967295
 8003606:	4618      	mov	r0, r3
 8003608:	f00d f8da 	bl	80107c0 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 800360c:	2364      	movs	r3, #100	; 0x64
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2306      	movs	r3, #6
 8003612:	4a0b      	ldr	r2, [pc, #44]	; (8003640 <InterProcessorTask+0x24c>)
 8003614:	21e6      	movs	r1, #230	; 0xe6
 8003616:	480b      	ldr	r0, [pc, #44]	; (8003644 <InterProcessorTask+0x250>)
 8003618:	f004 ffe2 	bl	80085e0 <HAL_I2C_Master_Transmit>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1e5      	bne.n	80035ee <InterProcessorTask+0x1fa>
 					};
					osSemaphoreRelease(messageI2C_LockHandle);
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <InterProcessorTask+0x248>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f00d f930 	bl	801088c <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <InterProcessorTask+0x268>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f00d faef 	bl	8010c14 <osMessageQueueReset>

					break;
 8003636:	e000      	b.n	800363a <InterProcessorTask+0x246>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003638:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 800363a:	e708      	b.n	800344e <InterProcessorTask+0x5a>
 800363c:	20027c50 	.word	0x20027c50
 8003640:	0801b93c 	.word	0x0801b93c
 8003644:	20028250 	.word	0x20028250
 8003648:	200286d4 	.word	0x200286d4
 800364c:	20027b50 	.word	0x20027b50
 8003650:	2002867c 	.word	0x2002867c
 8003654:	200286dc 	.word	0x200286dc
 8003658:	200286e4 	.word	0x200286e4
 800365c:	20027c60 	.word	0x20027c60

08003660 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_I2C_MasterTxCpltCallback+0x24>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2110      	movs	r1, #16
 800366e:	4618      	mov	r0, r3
 8003670:	f00c fc28 	bl	800fec4 <osThreadFlagsSet>
	test_1 = 1;
 8003674:	4b04      	ldr	r3, [pc, #16]	; (8003688 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20028094 	.word	0x20028094
 8003688:	20000c43 	.word	0x20000c43

0800368c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2108      	movs	r1, #8
 800369a:	4618      	mov	r0, r3
 800369c:	f00c fc12 	bl	800fec4 <osThreadFlagsSet>
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20028094 	.word	0x20028094

080036ac <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af04      	add	r7, sp, #16
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	4b2e      	ldr	r3, [pc, #184]	; (8003778 <setup_LP5523+0xcc>)
 80036be:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80036c0:	4b2e      	ldr	r3, [pc, #184]	; (800377c <setup_LP5523+0xd0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f04f 31ff 	mov.w	r1, #4294967295
 80036c8:	4618      	mov	r0, r3
 80036ca:	f00d f879 	bl	80107c0 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 80036ce:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <setup_LP5523+0xd4>)
 80036d0:	2240      	movs	r2, #64	; 0x40
 80036d2:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 80036d4:	4b28      	ldr	r3, [pc, #160]	; (8003778 <setup_LP5523+0xcc>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	b299      	uxth	r1, r3
 80036da:	2364      	movs	r3, #100	; 0x64
 80036dc:	9302      	str	r3, [sp, #8]
 80036de:	2301      	movs	r3, #1
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	4b27      	ldr	r3, [pc, #156]	; (8003780 <setup_LP5523+0xd4>)
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	2301      	movs	r3, #1
 80036e8:	2200      	movs	r2, #0
 80036ea:	4826      	ldr	r0, [pc, #152]	; (8003784 <setup_LP5523+0xd8>)
 80036ec:	f005 f9d2 	bl	8008a94 <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <setup_LP5523+0xd4>)
 80036f2:	224f      	movs	r2, #79	; 0x4f
 80036f4:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <setup_LP5523+0xcc>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	b299      	uxth	r1, r3
 80036fc:	2364      	movs	r3, #100	; 0x64
 80036fe:	9302      	str	r3, [sp, #8]
 8003700:	2301      	movs	r3, #1
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <setup_LP5523+0xd4>)
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2301      	movs	r3, #1
 800370a:	2236      	movs	r2, #54	; 0x36
 800370c:	481d      	ldr	r0, [pc, #116]	; (8003784 <setup_LP5523+0xd8>)
 800370e:	f005 f9c1 	bl	8008a94 <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 8003712:	4b19      	ldr	r3, [pc, #100]	; (8003778 <setup_LP5523+0xcc>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b299      	uxth	r1, r3
 8003718:	2364      	movs	r3, #100	; 0x64
 800371a:	9302      	str	r3, [sp, #8]
 800371c:	2309      	movs	r3, #9
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <setup_LP5523+0xdc>)
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	2301      	movs	r3, #1
 8003726:	2216      	movs	r2, #22
 8003728:	4816      	ldr	r0, [pc, #88]	; (8003784 <setup_LP5523+0xd8>)
 800372a:	f005 f9b3 	bl	8008a94 <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <setup_LP5523+0xcc>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	b299      	uxth	r1, r3
 8003734:	2364      	movs	r3, #100	; 0x64
 8003736:	9302      	str	r3, [sp, #8]
 8003738:	2309      	movs	r3, #9
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	4b13      	ldr	r3, [pc, #76]	; (800378c <setup_LP5523+0xe0>)
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2301      	movs	r3, #1
 8003742:	2226      	movs	r2, #38	; 0x26
 8003744:	480f      	ldr	r0, [pc, #60]	; (8003784 <setup_LP5523+0xd8>)
 8003746:	f005 f9a5 	bl	8008a94 <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <setup_LP5523+0xcc>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	b299      	uxth	r1, r3
 8003750:	2364      	movs	r3, #100	; 0x64
 8003752:	9302      	str	r3, [sp, #8]
 8003754:	2309      	movs	r3, #9
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <setup_LP5523+0xe4>)
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2301      	movs	r3, #1
 800375e:	2206      	movs	r2, #6
 8003760:	4808      	ldr	r0, [pc, #32]	; (8003784 <setup_LP5523+0xd8>)
 8003762:	f005 f997 	bl	8008a94 <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <setup_LP5523+0xd0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f00d f88e 	bl	801088c <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200286f5 	.word	0x200286f5
 800377c:	20027c50 	.word	0x20027c50
 8003780:	200286f4 	.word	0x200286f4
 8003784:	20028250 	.word	0x20028250
 8003788:	20000c5c 	.word	0x20000c5c
 800378c:	2000006c 	.word	0x2000006c
 8003790:	0801b944 	.word	0x0801b944

08003794 <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af04      	add	r7, sp, #16
 800379a:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <FrontLightsSet+0x78>)
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6810      	ldr	r0, [r2, #0]
 80037a2:	6851      	ldr	r1, [r2, #4]
 80037a4:	c303      	stmia	r3!, {r0, r1}
 80037a6:	7a12      	ldrb	r2, [r2, #8]
 80037a8:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f103 0209 	add.w	r2, r3, #9
 80037b0:	4b17      	ldr	r3, [pc, #92]	; (8003810 <FrontLightsSet+0x7c>)
 80037b2:	6810      	ldr	r0, [r2, #0]
 80037b4:	6851      	ldr	r1, [r2, #4]
 80037b6:	c303      	stmia	r3!, {r0, r1}
 80037b8:	7a12      	ldrb	r2, [r2, #8]
 80037ba:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80037bc:	4b15      	ldr	r3, [pc, #84]	; (8003814 <FrontLightsSet+0x80>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f04f 31ff 	mov.w	r1, #4294967295
 80037c4:	4618      	mov	r0, r3
 80037c6:	f00c fffb 	bl	80107c0 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 80037ca:	2364      	movs	r3, #100	; 0x64
 80037cc:	9302      	str	r3, [sp, #8]
 80037ce:	2309      	movs	r3, #9
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <FrontLightsSet+0x78>)
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2301      	movs	r3, #1
 80037d8:	2216      	movs	r2, #22
 80037da:	2168      	movs	r1, #104	; 0x68
 80037dc:	480e      	ldr	r0, [pc, #56]	; (8003818 <FrontLightsSet+0x84>)
 80037de:	f005 f959 	bl	8008a94 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 80037e2:	2364      	movs	r3, #100	; 0x64
 80037e4:	9302      	str	r3, [sp, #8]
 80037e6:	2309      	movs	r3, #9
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <FrontLightsSet+0x7c>)
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	2301      	movs	r3, #1
 80037f0:	2216      	movs	r2, #22
 80037f2:	216a      	movs	r1, #106	; 0x6a
 80037f4:	4808      	ldr	r0, [pc, #32]	; (8003818 <FrontLightsSet+0x84>)
 80037f6:	f005 f94d 	bl	8008a94 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <FrontLightsSet+0x80>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f00d f844 	bl	801088c <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000c44 	.word	0x20000c44
 8003810:	20000c50 	.word	0x20000c50
 8003814:	20027c50 	.word	0x20027c50
 8003818:	20028250 	.word	0x20028250

0800381c <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af04      	add	r7, sp, #16
 8003822:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8003824:	2034      	movs	r0, #52	; 0x34
 8003826:	f7ff ff41 	bl	80036ac <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 800382a:	2035      	movs	r0, #53	; 0x35
 800382c:	f7ff ff3e 	bl	80036ac <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 8003834:	2001      	movs	r0, #1
 8003836:	f00c fc8b 	bl	8010150 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 800383a:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <ThreadFrontLightsTask+0xdc>)
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	f107 010c 	add.w	r1, r7, #12
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	2200      	movs	r2, #0
 8003848:	f00d f972 	bl	8010b30 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	e011      	b.n	8003876 <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	b2db      	uxtb	r3, r3
 800385c:	425b      	negs	r3, r3
 800385e:	b2d9      	uxtb	r1, r3
 8003860:	4a26      	ldr	r2, [pc, #152]	; (80038fc <ThreadFrontLightsTask+0xe0>)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	4413      	add	r3, r2
 8003866:	460a      	mov	r2, r1
 8003868:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	085b      	lsrs	r3, r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	3301      	adds	r3, #1
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b08      	cmp	r3, #8
 800387a:	ddea      	ble.n	8003852 <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	e011      	b.n	80038a6 <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	425b      	negs	r3, r3
 800388e:	b2d9      	uxtb	r1, r3
 8003890:	4a1b      	ldr	r2, [pc, #108]	; (8003900 <ThreadFrontLightsTask+0xe4>)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4413      	add	r3, r2
 8003896:	460a      	mov	r2, r1
 8003898:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	3301      	adds	r3, #1
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	ddea      	ble.n	8003882 <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80038ac:	4b15      	ldr	r3, [pc, #84]	; (8003904 <ThreadFrontLightsTask+0xe8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f04f 31ff 	mov.w	r1, #4294967295
 80038b4:	4618      	mov	r0, r3
 80038b6:	f00c ff83 	bl	80107c0 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 80038ba:	2364      	movs	r3, #100	; 0x64
 80038bc:	9302      	str	r3, [sp, #8]
 80038be:	2309      	movs	r3, #9
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <ThreadFrontLightsTask+0xe0>)
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	2301      	movs	r3, #1
 80038c8:	2216      	movs	r2, #22
 80038ca:	2168      	movs	r1, #104	; 0x68
 80038cc:	480e      	ldr	r0, [pc, #56]	; (8003908 <ThreadFrontLightsTask+0xec>)
 80038ce:	f005 f8e1 	bl	8008a94 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 80038d2:	2364      	movs	r3, #100	; 0x64
 80038d4:	9302      	str	r3, [sp, #8]
 80038d6:	2309      	movs	r3, #9
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <ThreadFrontLightsTask+0xe4>)
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2301      	movs	r3, #1
 80038e0:	2216      	movs	r2, #22
 80038e2:	216a      	movs	r1, #106	; 0x6a
 80038e4:	4808      	ldr	r0, [pc, #32]	; (8003908 <ThreadFrontLightsTask+0xec>)
 80038e6:	f005 f8d5 	bl	8008a94 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <ThreadFrontLightsTask+0xe8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00c ffcc 	bl	801088c <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 80038f4:	e79c      	b.n	8003830 <ThreadFrontLightsTask+0x14>
 80038f6:	bf00      	nop
 80038f8:	20027c58 	.word	0x20027c58
 80038fc:	20000c44 	.word	0x20000c44
 8003900:	20000c50 	.word	0x20000c50
 8003904:	20027c50 	.word	0x20027c50
 8003908:	20028250 	.word	0x20028250

0800390c <LL_RCC_LSE_SetDriveCapability>:
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f023 0218 	bic.w	r2, r3, #24
 8003920:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800393c:	f002 fb34 	bl	8005fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003940:	f000 f822 	bl	8003988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003944:	f7ff f8de 	bl	8002b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8003948:	f7fe f8b7 	bl	8001aba <MX_DMA_Init>
  MX_ADC1_Init();
 800394c:	f7fd fa78 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 8003950:	f000 ff48 	bl	80047e4 <MX_RTC_Init>
  MX_TIM2_Init();
 8003954:	f001 fdaa 	bl	80054ac <MX_TIM2_Init>
  MX_RF_Init();
 8003958:	f000 ff12 	bl	8004780 <MX_RF_Init>
  MX_I2C1_Init();
 800395c:	f7ff fb12 	bl	8002f84 <MX_I2C1_Init>
  MX_COMP1_Init();
 8003960:	f7fd ff98 	bl	8001894 <MX_COMP1_Init>
  MX_TIM16_Init();
 8003964:	f001 fe38 	bl	80055d8 <MX_TIM16_Init>
  MX_USB_Device_Init();
 8003968:	f015 f9f8 	bl	8018d5c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 800396c:	f002 fa5a 	bl	8005e24 <MX_TSC_Init>

#ifndef BORDER_ROUTER_NODE
  USBD_Stop(&hUsbDeviceFS);
 8003970:	4804      	ldr	r0, [pc, #16]	; (8003984 <main+0x4c>)
 8003972:	f012 fe17 	bl	80165a4 <USBD_Stop>
//  HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003976:	f00c f995 	bl	800fca4 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 800397a:	f7fd fc93 	bl	80012a4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800397e:	f00c f9c5 	bl	800fd0c <osKernelStart>
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//
//	// start timer
//	HAL_TIM_Base_Start(&htim2);

  while (1)
 8003982:	e7fe      	b.n	8003982 <main+0x4a>
 8003984:	200289fc 	.word	0x200289fc

08003988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b0ae      	sub	sp, #184	; 0xb8
 800398c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800398e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003992:	2248      	movs	r2, #72	; 0x48
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f016 fb33 	bl	801a002 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800399c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
 80039ac:	615a      	str	r2, [r3, #20]
 80039ae:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	2250      	movs	r2, #80	; 0x50
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f016 fb23 	bl	801a002 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 80039bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ca:	f043 0310 	orr.w	r3, r3, #16
 80039ce:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80039d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039da:	f043 0303 	orr.w	r3, r3, #3
 80039de:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80039e0:	f007 fd06 	bl	800b3f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7ff ff91 	bl	800390c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039ea:	4b3a      	ldr	r3, [pc, #232]	; (8003ad4 <SystemClock_Config+0x14c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039f2:	4a38      	ldr	r2, [pc, #224]	; (8003ad4 <SystemClock_Config+0x14c>)
 80039f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b36      	ldr	r3, [pc, #216]	; (8003ad4 <SystemClock_Config+0x14c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8003a06:	230f      	movs	r3, #15
 8003a08:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a0e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003a10:	2301      	movs	r3, #1
 8003a12:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a18:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a1a:	2340      	movs	r3, #64	; 0x40
 8003a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003a20:	2305      	movs	r3, #5
 8003a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a2c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a30:	4618      	mov	r0, r3
 8003a32:	f008 f8ab 	bl	800bb8c <HAL_RCC_OscConfig>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003a3c:	f000 f85e 	bl	8003afc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003a40:	236f      	movs	r3, #111	; 0x6f
 8003a42:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003a44:	2302      	movs	r3, #2
 8003a46:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a50:	2300      	movs	r3, #0
 8003a52:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003a54:	2300      	movs	r3, #0
 8003a56:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a60:	2101      	movs	r1, #1
 8003a62:	4618      	mov	r0, r3
 8003a64:	f008 fc26 	bl	800c2b4 <HAL_RCC_ClockConfig>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003a6e:	f000 f845 	bl	8003afc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8003a72:	f643 5304 	movw	r3, #15620	; 0x3d04
 8003a76:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8003a78:	2306      	movs	r3, #6
 8003a7a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8003a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a80:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a86:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8003a88:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a8c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8003a8e:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8003a92:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003a94:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003a9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003aa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003aa4:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aaa:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8003aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	4618      	mov	r0, r3
 8003abe:	f009 f850 	bl	800cb62 <HAL_RCCEx_PeriphCLKConfig>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <SystemClock_Config+0x144>
  {
    Error_Handler();
 8003ac8:	f000 f818 	bl	8003afc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003acc:	bf00      	nop
 8003ace:	37b8      	adds	r7, #184	; 0xb8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	58000400 	.word	0x58000400

08003ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003aea:	f002 fa7d 	bl	8005fe8 <HAL_IncTick>
//	 HAL_GPIO_WritePin(DONGLE_DEBUG_PIN_GPIO_Port, DONGLE_DEBUG_PIN_Pin, GPIO_PIN_RESET);
//  }
//#endif
//}
  /* USER CODE END Callback 1 */
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40012c00 	.word	0x40012c00

08003afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <MasterThreadTask>:
uint32_t startTime = 0;
uint32_t viveStateVar = 0;
uint64_t waitTime = 0;
uint32_t lightsSimpleMessageAck = 0;

void MasterThreadTask(void *argument) {
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	6078      	str	r0, [r7, #4]
#endif

	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8003b14:	4b81      	ldr	r3, [pc, #516]	; (8003d1c <MasterThreadTask+0x210>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4980      	ldr	r1, [pc, #512]	; (8003d20 <MasterThreadTask+0x214>)
 8003b20:	f00d f806 	bl	8010b30 <osMessageQueueGet>
#endif



		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 8003b24:	4b7f      	ldr	r3, [pc, #508]	; (8003d24 <MasterThreadTask+0x218>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f00d f873 	bl	8010c14 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 8003b2e:	4b7d      	ldr	r3, [pc, #500]	; (8003d24 <MasterThreadTask+0x218>)
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	2200      	movs	r2, #0
 8003b36:	497c      	ldr	r1, [pc, #496]	; (8003d28 <MasterThreadTask+0x21c>)
 8003b38:	f00c ff86 	bl	8010a48 <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 8003b3c:	4b7b      	ldr	r3, [pc, #492]	; (8003d2c <MasterThreadTask+0x220>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f040 8083 	bne.w	8003c4c <MasterThreadTask+0x140>
 8003b46:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <MasterThreadTask+0x214>)
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d17e      	bne.n	8003c4c <MasterThreadTask+0x140>
			logEnabled = 1;
 8003b4e:	4b77      	ldr	r3, [pc, #476]	; (8003d2c <MasterThreadTask+0x220>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8003b54:	4b76      	ldr	r3, [pc, #472]	; (8003d30 <MasterThreadTask+0x224>)
 8003b56:	4a72      	ldr	r2, [pc, #456]	; (8003d20 <MasterThreadTask+0x214>)
 8003b58:	6811      	ldr	r1, [r2, #0]
 8003b5a:	6019      	str	r1, [r3, #0]
 8003b5c:	8892      	ldrh	r2, [r2, #4]
 8003b5e:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 8003b60:	f000 f97e 	bl	8003e60 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 8003b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b68:	f00c faf2 	bl	8010150 <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 8003b6c:	f002 fa50 	bl	8006010 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b70      	ldr	r3, [pc, #448]	; (8003d34 <MasterThreadTask+0x228>)
 8003b74:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 8003b76:	f000 f8f5 	bl	8003d64 <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 8003b7a:	4b6f      	ldr	r3, [pc, #444]	; (8003d38 <MasterThreadTask+0x22c>)
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	4b6f      	ldr	r3, [pc, #444]	; (8003d3c <MasterThreadTask+0x230>)
 8003b80:	4a6f      	ldr	r2, [pc, #444]	; (8003d40 <MasterThreadTask+0x234>)
 8003b82:	4970      	ldr	r1, [pc, #448]	; (8003d44 <MasterThreadTask+0x238>)
 8003b84:	4870      	ldr	r0, [pc, #448]	; (8003d48 <MasterThreadTask+0x23c>)
 8003b86:	f000 f9f3 	bl	8003f70 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 8003b8a:	486f      	ldr	r0, [pc, #444]	; (8003d48 <MasterThreadTask+0x23c>)
 8003b8c:	f014 f8fe 	bl	8017d8c <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 8003b90:	4b62      	ldr	r3, [pc, #392]	; (8003d1c <MasterThreadTask+0x210>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	2300      	movs	r3, #0
 8003b96:	2200      	movs	r2, #0
 8003b98:	4961      	ldr	r1, [pc, #388]	; (8003d20 <MasterThreadTask+0x214>)
 8003b9a:	f00c ffc9 	bl	8010b30 <osMessageQueueGet>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d12c      	bne.n	8003bfe <MasterThreadTask+0xf2>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8003ba4:	4b5e      	ldr	r3, [pc, #376]	; (8003d20 <MasterThreadTask+0x214>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <MasterThreadTask+0xae>

						masterExitRoutine();
 8003bac:	f000 f9a6 	bl	8003efc <masterExitRoutine>
						logEnabled = 0;
 8003bb0:	4b5e      	ldr	r3, [pc, #376]	; (8003d2c <MasterThreadTask+0x220>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 8003bb6:	bf00      	nop
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 8003bb8:	e0ae      	b.n	8003d18 <MasterThreadTask+0x20c>
					}

					else if (togLogMessageReceived.status == TARE_NOW){
 8003bba:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <MasterThreadTask+0x214>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d11d      	bne.n	8003bfe <MasterThreadTask+0xf2>
						lightsSimpleMessageAck = 0x03; // cyan (green + blue)
 8003bc2:	4b62      	ldr	r3, [pc, #392]	; (8003d4c <MasterThreadTask+0x240>)
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 8003bc8:	4b61      	ldr	r3, [pc, #388]	; (8003d50 <MasterThreadTask+0x244>)
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2200      	movs	r2, #0
 8003bd0:	495e      	ldr	r1, [pc, #376]	; (8003d4c <MasterThreadTask+0x240>)
 8003bd2:	f00c ff39 	bl	8010a48 <osMessageQueuePut>

						IMU_sendTareNow();
 8003bd6:	f7fe fb0f 	bl	80021f8 <IMU_sendTareNow>

						osDelay(100);
 8003bda:	2064      	movs	r0, #100	; 0x64
 8003bdc:	f00c fab8 	bl	8010150 <osDelay>

						IMU_sendPersistTare();
 8003be0:	f7fe fb40 	bl	8002264 <IMU_sendPersistTare>

						osDelay(100);
 8003be4:	2064      	movs	r0, #100	; 0x64
 8003be6:	f00c fab3 	bl	8010150 <osDelay>

						lightsSimpleMessageAck = 0;
 8003bea:	4b58      	ldr	r3, [pc, #352]	; (8003d4c <MasterThreadTask+0x240>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 8003bf0:	4b57      	ldr	r3, [pc, #348]	; (8003d50 <MasterThreadTask+0x244>)
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4954      	ldr	r1, [pc, #336]	; (8003d4c <MasterThreadTask+0x240>)
 8003bfa:	f00c ff25 	bl	8010a48 <osMessageQueuePut>
					}
				}

				// add delay to wait for next transmission period
				waitTime = PACKET_SEND_PERIOD - (HAL_GetTick() - startTime);
 8003bfe:	4b4d      	ldr	r3, [pc, #308]	; (8003d34 <MasterThreadTask+0x228>)
 8003c00:	681c      	ldr	r4, [r3, #0]
 8003c02:	f002 fa05 	bl	8006010 <HAL_GetTick>
 8003c06:	4603      	mov	r3, r0
 8003c08:	1ae3      	subs	r3, r4, r3
 8003c0a:	3364      	adds	r3, #100	; 0x64
 8003c0c:	f04f 0400 	mov.w	r4, #0
 8003c10:	4a50      	ldr	r2, [pc, #320]	; (8003d54 <MasterThreadTask+0x248>)
 8003c12:	e9c2 3400 	strd	r3, r4, [r2]
				// if wait time is less than zero (i.e. the border packet send took longer than PACKET_SEND_PERIOD)
				// or greater than the allotted PACKET_SEND_PERIOD
				if( (waitTime <= 0) || (waitTime > PACKET_SEND_PERIOD)){
 8003c16:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <MasterThreadTask+0x248>)
 8003c18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c1c:	4323      	orrs	r3, r4
 8003c1e:	d006      	beq.n	8003c2e <MasterThreadTask+0x122>
 8003c20:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <MasterThreadTask+0x248>)
 8003c22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c26:	2c00      	cmp	r4, #0
 8003c28:	bf08      	it	eq
 8003c2a:	2b65      	cmpeq	r3, #101	; 0x65
 8003c2c:	d307      	bcc.n	8003c3e <MasterThreadTask+0x132>
					waitTime = 0; //set to zero (i.e. dont wait)
 8003c2e:	4a49      	ldr	r2, [pc, #292]	; (8003d54 <MasterThreadTask+0x248>)
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	f04f 0400 	mov.w	r4, #0
 8003c38:	e9c2 3400 	strd	r3, r4, [r2]
 8003c3c:	e005      	b.n	8003c4a <MasterThreadTask+0x13e>
				}
				else{
					osDelay(waitTime);
 8003c3e:	4b45      	ldr	r3, [pc, #276]	; (8003d54 <MasterThreadTask+0x248>)
 8003c40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f00c fa83 	bl	8010150 <osDelay>
				startTime = HAL_GetTick();
 8003c4a:	e78f      	b.n	8003b6c <MasterThreadTask+0x60>
				}

			}
		}
		else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 8003c4c:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <MasterThreadTask+0x220>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d109      	bne.n	8003c68 <MasterThreadTask+0x15c>
 8003c54:	4b32      	ldr	r3, [pc, #200]	; (8003d20 <MasterThreadTask+0x214>)
 8003c56:	785b      	ldrb	r3, [r3, #1]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <MasterThreadTask+0x15c>
			logEnabled = 0;
 8003c5c:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <MasterThreadTask+0x220>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 8003c62:	f000 f94b 	bl	8003efc <masterExitRoutine>
 8003c66:	e057      	b.n	8003d18 <MasterThreadTask+0x20c>
		}
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 8003c68:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <MasterThreadTask+0x24c>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d141      	bne.n	8003cf4 <MasterThreadTask+0x1e8>
 8003c70:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <MasterThreadTask+0x214>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d13d      	bne.n	8003cf4 <MasterThreadTask+0x1e8>
			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8003c78:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <MasterThreadTask+0x224>)
 8003c7a:	4a29      	ldr	r2, [pc, #164]	; (8003d20 <MasterThreadTask+0x214>)
 8003c7c:	6811      	ldr	r1, [r2, #0]
 8003c7e:	6019      	str	r1, [r3, #0]
 8003c80:	8892      	ldrh	r2, [r2, #4]
 8003c82:	809a      	strh	r2, [r3, #4]

			// if requesting another feature to be enabled but the logging is still enabled
			if(logEnabled == 1){
 8003c84:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <MasterThreadTask+0x220>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d104      	bne.n	8003c96 <MasterThreadTask+0x18a>
				logEnabled = 0;
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <MasterThreadTask+0x220>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
				masterExitRoutine();
 8003c92:	f000 f933 	bl	8003efc <masterExitRoutine>
			}

			lightLabDemoEnabled = LIGHT_LAB_DEMO;
 8003c96:	4b30      	ldr	r3, [pc, #192]	; (8003d58 <MasterThreadTask+0x24c>)
 8003c98:	2202      	movs	r2, #2
 8003c9a:	701a      	strb	r2, [r3, #0]

			// enable functionality
			osSemaphoreAcquire(lightingLabDemoEndHandle, 0);
 8003c9c:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <MasterThreadTask+0x250>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f00c fd8c 	bl	80107c0 <osSemaphoreAcquire>
			viveStateVar = lightLabDemoEnabled;
 8003ca8:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <MasterThreadTask+0x24c>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b2c      	ldr	r3, [pc, #176]	; (8003d60 <MasterThreadTask+0x254>)
 8003cb0:	601a      	str	r2, [r3, #0]

			// start all sensor subsystems
			masterEnterRoutine();
 8003cb2:	f000 f8d5 	bl	8003e60 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 8003cb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cba:	f00c fa49 	bl	8010150 <osDelay>

			while(1){
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever) == osOK) {
 8003cbe:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <MasterThreadTask+0x210>)
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	4915      	ldr	r1, [pc, #84]	; (8003d20 <MasterThreadTask+0x214>)
 8003cca:	f00c ff31 	bl	8010b30 <osMessageQueueGet>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f4      	bne.n	8003cbe <MasterThreadTask+0x1b2>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <MasterThreadTask+0x214>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <MasterThreadTask+0x1b2>

						osSemaphoreRelease(lightingLabDemoEndHandle);
 8003cdc:	4b1f      	ldr	r3, [pc, #124]	; (8003d5c <MasterThreadTask+0x250>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f00c fdd3 	bl	801088c <osSemaphoreRelease>
						masterExitRoutine();
 8003ce6:	f000 f909 	bl	8003efc <masterExitRoutine>
						lightLabDemoEnabled = 0;
 8003cea:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <MasterThreadTask+0x24c>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 8003cf0:	bf00      	nop
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 8003cf2:	e011      	b.n	8003d18 <MasterThreadTask+0x20c>
					}
				}
			}
		}
		else if ((lightLabDemoEnabled == LIGHT_LAB_DEMO) && (togLogMessageReceived.status == DISABLE_LOG)){
 8003cf4:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <MasterThreadTask+0x24c>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	f47f af0b 	bne.w	8003b14 <MasterThreadTask+0x8>
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <MasterThreadTask+0x214>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f47f af06 	bne.w	8003b14 <MasterThreadTask+0x8>

			osSemaphoreRelease(lightingLabDemoEndHandle);
 8003d08:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <MasterThreadTask+0x250>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f00c fdbd 	bl	801088c <osSemaphoreRelease>


			lightLabDemoEnabled = 0;
 8003d12:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <MasterThreadTask+0x24c>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8003d18:	e6fc      	b.n	8003b14 <MasterThreadTask+0x8>
 8003d1a:	bf00      	nop
 8003d1c:	20028088 	.word	0x20028088
 8003d20:	20027b50 	.word	0x20027b50
 8003d24:	20027c64 	.word	0x20027c64
 8003d28:	0801b950 	.word	0x0801b950
 8003d2c:	20000c65 	.word	0x20000c65
 8003d30:	20027c28 	.word	0x20027c28
 8003d34:	20000c68 	.word	0x20000c68
 8003d38:	20028778 	.word	0x20028778
 8003d3c:	20028790 	.word	0x20028790
 8003d40:	200287cc 	.word	0x200287cc
 8003d44:	2002870c 	.word	0x2002870c
 8003d48:	20027b5c 	.word	0x20027b5c
 8003d4c:	20000c78 	.word	0x20000c78
 8003d50:	20027c58 	.word	0x20027c58
 8003d54:	20000c70 	.word	0x20000c70
 8003d58:	20000c66 	.word	0x20000c66
 8003d5c:	20027c5c 	.word	0x20027c5c
 8003d60:	20000c6c 	.word	0x20000c6c

08003d64 <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 8003d64:	b5b0      	push	{r4, r5, r7, lr}
 8003d66:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8003d68:	4b30      	ldr	r3, [pc, #192]	; (8003e2c <grabSensorData+0xc8>)
 8003d6a:	789b      	ldrb	r3, [r3, #2]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d111      	bne.n	8003d94 <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 8003d70:	4b2f      	ldr	r3, [pc, #188]	; (8003e30 <grabSensorData+0xcc>)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	2300      	movs	r3, #0
 8003d76:	2200      	movs	r2, #0
 8003d78:	492e      	ldr	r1, [pc, #184]	; (8003e34 <grabSensorData+0xd0>)
 8003d7a:	f00c fed9 	bl	8010b30 <osMessageQueueGet>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 8003d84:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <grabSensorData+0xd0>)
 8003d86:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <grabSensorData+0xd4>)
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	236c      	movs	r3, #108	; 0x6c
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f016 f92c 	bl	8019fec <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8003d94:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <grabSensorData+0xc8>)
 8003d96:	78db      	ldrb	r3, [r3, #3]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d113      	bne.n	8003dc4 <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 8003d9c:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <grabSensorData+0xd8>)
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	2200      	movs	r2, #0
 8003da4:	4926      	ldr	r1, [pc, #152]	; (8003e40 <grabSensorData+0xdc>)
 8003da6:	f00c fec3 	bl	8010b30 <osMessageQueueGet>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 8003db0:	4a23      	ldr	r2, [pc, #140]	; (8003e40 <grabSensorData+0xdc>)
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <grabSensorData+0xe0>)
 8003db4:	4614      	mov	r4, r2
 8003db6:	461d      	mov	r5, r3
 8003db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003dc0:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 8003dc4:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <grabSensorData+0xc8>)
 8003dc6:	795b      	ldrb	r3, [r3, #5]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d113      	bne.n	8003df4 <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 8003dcc:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <grabSensorData+0xe4>)
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	491d      	ldr	r1, [pc, #116]	; (8003e4c <grabSensorData+0xe8>)
 8003dd6:	f00c feab 	bl	8010b30 <osMessageQueueGet>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 8003de0:	4a1a      	ldr	r2, [pc, #104]	; (8003e4c <grabSensorData+0xe8>)
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <grabSensorData+0xec>)
 8003de4:	4614      	mov	r4, r2
 8003de6:	461d      	mov	r5, r3
 8003de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003df0:	e884 0003 	stmia.w	r4, {r0, r1}

		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <grabSensorData+0xc8>)
 8003df6:	791b      	ldrb	r3, [r3, #4]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d115      	bne.n	8003e28 <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 8003dfc:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <grabSensorData+0xf0>)
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	2300      	movs	r3, #0
 8003e02:	2200      	movs	r2, #0
 8003e04:	4914      	ldr	r1, [pc, #80]	; (8003e58 <grabSensorData+0xf4>)
 8003e06:	f00c fe93 	bl	8010b30 <osMessageQueueGet>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 8003e10:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <grabSensorData+0xf4>)
 8003e12:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <grabSensorData+0xf8>)
 8003e14:	4614      	mov	r4, r2
 8003e16:	461d      	mov	r5, r3
 8003e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003e24:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 8003e28:	bf00      	nop
 8003e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e2c:	20027c28 	.word	0x20027c28
 8003e30:	200280a4 	.word	0x200280a4
 8003e34:	2002870c 	.word	0x2002870c
 8003e38:	0801b958 	.word	0x0801b958
 8003e3c:	20027c60 	.word	0x20027c60
 8003e40:	200287cc 	.word	0x200287cc
 8003e44:	0801b9c4 	.word	0x0801b9c4
 8003e48:	20027b4c 	.word	0x20027b4c
 8003e4c:	20028778 	.word	0x20028778
 8003e50:	0801ba04 	.word	0x0801ba04
 8003e54:	20027c54 	.word	0x20027c54
 8003e58:	20028790 	.word	0x20028790
 8003e5c:	0801b9dc 	.word	0x0801b9dc

08003e60 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8003e64:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <masterEnterRoutine+0x80>)
 8003e66:	789b      	ldrb	r3, [r3, #2]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003e6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <masterEnterRoutine+0x84>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2101      	movs	r1, #1
 8003e72:	4618      	mov	r0, r3
 8003e74:	f00c f826 	bl	800fec4 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8003e78:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <masterEnterRoutine+0x80>)
 8003e7a:	795b      	ldrb	r3, [r3, #5]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d118      	bne.n	8003eb2 <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <masterEnterRoutine+0x88>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4918      	ldr	r1, [pc, #96]	; (8003eec <masterEnterRoutine+0x8c>)
 8003e8c:	f00c fe50 	bl	8010b30 <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 8003e90:	4b16      	ldr	r3, [pc, #88]	; (8003eec <masterEnterRoutine+0x8c>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8003e96:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <masterEnterRoutine+0x88>)
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	4913      	ldr	r1, [pc, #76]	; (8003eec <masterEnterRoutine+0x8c>)
 8003ea0:	f00c fdd2 	bl	8010a48 <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <masterEnterRoutine+0x90>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f00c fa17 	bl	80102e0 <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <masterEnterRoutine+0x80>)
 8003eb4:	78db      	ldrb	r3, [r3, #3]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <masterEnterRoutine+0x94>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f00b ffff 	bl	800fec4 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <masterEnterRoutine+0x80>)
 8003ec8:	791b      	ldrb	r3, [r3, #4]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d105      	bne.n	8003eda <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <masterEnterRoutine+0x98>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f00b fff5 	bl	800fec4 <osThreadFlagsSet>
	}
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20027c28 	.word	0x20027c28
 8003ee4:	20027c34 	.word	0x20027c34
 8003ee8:	20027c64 	.word	0x20027c64
 8003eec:	200280b4 	.word	0x200280b4
 8003ef0:	20027c3c 	.word	0x20027c3c
 8003ef4:	20028094 	.word	0x20028094
 8003ef8:	200280ac 	.word	0x200280ac

08003efc <masterExitRoutine>:

void masterExitRoutine(void) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8003f00:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <masterExitRoutine+0x5c>)
 8003f02:	789b      	ldrb	r3, [r3, #2]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d105      	bne.n	8003f14 <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003f08:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <masterExitRoutine+0x60>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f00b ffd8 	bl	800fec4 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8003f14:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <masterExitRoutine+0x5c>)
 8003f16:	795b      	ldrb	r3, [r3, #5]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d107      	bne.n	8003f2c <masterExitRoutine+0x30>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 8003f1c:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <masterExitRoutine+0x64>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f00c fa1d 	bl	8010360 <osTimerStop>
		viveStateVar = 0;
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <masterExitRoutine+0x68>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <masterExitRoutine+0x5c>)
 8003f2e:	78db      	ldrb	r3, [r3, #3]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <masterExitRoutine+0x44>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <masterExitRoutine+0x6c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f00b ffc2 	bl	800fec4 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <masterExitRoutine+0x5c>)
 8003f42:	791b      	ldrb	r3, [r3, #4]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <masterExitRoutine+0x58>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 8003f48:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <masterExitRoutine+0x70>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f00b ffb8 	bl	800fec4 <osThreadFlagsSet>
	}

}
 8003f54:	bf00      	nop
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20027c28 	.word	0x20027c28
 8003f5c:	20027c34 	.word	0x20027c34
 8003f60:	20027c3c 	.word	0x20027c3c
 8003f64:	20000c6c 	.word	0x20000c6c
 8003f68:	20028094 	.word	0x20028094
 8003f6c:	200280ac 	.word	0x200280ac

08003f70 <packetizeData>:



void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 8003f7e:	f002 f847 	bl	8006010 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// get epoch time from RTC
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	4917      	ldr	r1, [pc, #92]	; (8003fec <packetizeData+0x7c>)
 8003f8e:	4818      	ldr	r0, [pc, #96]	; (8003ff0 <packetizeData+0x80>)
 8003f90:	f009 f9cf 	bl	800d332 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 8003f94:	2200      	movs	r2, #0
 8003f96:	4917      	ldr	r1, [pc, #92]	; (8003ff4 <packetizeData+0x84>)
 8003f98:	4815      	ldr	r0, [pc, #84]	; (8003ff0 <packetizeData+0x80>)
 8003f9a:	f009 fad4 	bl	800d546 <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 8003f9e:	4915      	ldr	r1, [pc, #84]	; (8003ff4 <packetizeData+0x84>)
 8003fa0:	4812      	ldr	r0, [pc, #72]	; (8003fec <packetizeData+0x7c>)
 8003fa2:	f000 fc5f 	bl	8004864 <RTC_ToEpoch>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	226c      	movs	r2, #108	; 0x6c
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f016 f819 	bl	8019fec <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	336c      	adds	r3, #108	; 0x6c
 8003fbe:	2218      	movs	r2, #24
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f016 f812 	bl	8019fec <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3384      	adds	r3, #132	; 0x84
 8003fcc:	2228      	movs	r2, #40	; 0x28
 8003fce:	6839      	ldr	r1, [r7, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f016 f80b 	bl	8019fec <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	33ac      	adds	r3, #172	; 0xac
 8003fda:	2218      	movs	r2, #24
 8003fdc:	69b9      	ldr	r1, [r7, #24]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f016 f804 	bl	8019fec <memcpy>
}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200287b8 	.word	0x200287b8
 8003ff0:	200287e8 	.word	0x200287e8
 8003ff4:	200287e4 	.word	0x200287e4

08003ff8 <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004006:	2b0f      	cmp	r3, #15
 8004008:	d80f      	bhi.n	800402a <vector_push+0x32>
    	self->items[self->count++] = *item;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800400e:	1c51      	adds	r1, r2, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6619      	str	r1, [r3, #96]	; 0x60
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	4413      	add	r3, r2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	440b      	add	r3, r1
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	6811      	ldr	r1, [r2, #0]
 8004024:	6019      	str	r1, [r3, #0]
 8004026:	8892      	ldrh	r2, [r2, #4]
 8004028:	809a      	strh	r2, [r3, #4]
    }
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <vector_pop>:

Pulse vector_pop(vector *self){
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01c      	beq.n	8004082 <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404c:	1e5a      	subs	r2, r3, #1
 800404e:	6839      	ldr	r1, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4413      	add	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	18ca      	adds	r2, r1, r3
 800405a:	f107 0308 	add.w	r3, r7, #8
 800405e:	6810      	ldr	r0, [r2, #0]
 8004060:	6018      	str	r0, [r3, #0]
 8004062:	8892      	ldrh	r2, [r2, #4]
 8004064:	809a      	strh	r2, [r3, #4]
		self->count--;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406a:	1e5a      	subs	r2, r3, #1
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	461a      	mov	r2, r3
 8004074:	f107 0308 	add.w	r3, r7, #8
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	6010      	str	r0, [r2, #0]
 800407c:	889b      	ldrh	r3, [r3, #4]
 800407e:	8093      	strh	r3, [r2, #4]
 8004080:	e005      	b.n	800408e <vector_pop+0x58>
	}
	return self->items[0];
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	6810      	ldr	r0, [r2, #0]
 8004088:	6018      	str	r0, [r3, #0]
 800408a:	8892      	ldrh	r2, [r2, #4]
 800408c:	809a      	strh	r2, [r3, #4]
}
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <vector_get>:

Pulse vector_get(vector *self, int index)
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	db12      	blt.n	80040d2 <vector_get+0x38>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d90d      	bls.n	80040d2 <vector_get+0x38>
    	return self->items[index];
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	4413      	add	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	18ca      	adds	r2, r1, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	6811      	ldr	r1, [r2, #0]
 80040ca:	6019      	str	r1, [r3, #0]
 80040cc:	8892      	ldrh	r2, [r2, #4]
 80040ce:	809a      	strh	r2, [r3, #4]
 80040d0:	e005      	b.n	80040de <vector_get+0x44>
    }
    return self->items[0];
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	6810      	ldr	r0, [r2, #0]
 80040d8:	6018      	str	r0, [r3, #0]
 80040da:	8892      	ldrh	r2, [r2, #4]
 80040dc:	809a      	strh	r2, [r3, #4]
}
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <vector_clear>:

void vector_clear(vector *self){
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
	self->count = 0;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e00c      	b.n	8004140 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2264      	movs	r2, #100	; 0x64
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	3310      	adds	r3, #16
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4413      	add	r3, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ffd8 	bl	80040ea <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3301      	adds	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	ddef      	ble.n	8004126 <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	33d8      	adds	r3, #216	; 0xd8
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ffcd 	bl	80040ea <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ffc7 	bl	80040ea <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	889b      	ldrh	r3, [r3, #4]
 800417a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800417e:	d303      	bcc.n	8004188 <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 8004180:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <consume_pulse+0x54>)
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 8004186:	e016      	b.n	80041b6 <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	889b      	ldrh	r3, [r3, #4]
 800418c:	2b27      	cmp	r3, #39	; 0x27
 800418e:	d907      	bls.n	80041a0 <consume_pulse+0x34>
		prev_pulse_short = 0;
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <consume_pulse+0x54>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 8004196:	6839      	ldr	r1, [r7, #0]
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f813 	bl	80041c4 <process_long_pulse>
}
 800419e:	e00a      	b.n	80041b6 <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <consume_pulse+0x54>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d006      	beq.n	80041b6 <consume_pulse+0x4a>
			process_short_pulse(self, p);
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f89c 	bl	80042e8 <process_short_pulse>
			prev_pulse_short = 1;
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <consume_pulse+0x54>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	701a      	strb	r2, [r3, #0]
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000c7c 	.word	0x20000c7c

080041c4 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d144      	bne.n	8004260 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d03f      	beq.n	8004260 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80041e6:	f107 0308 	add.w	r3, r7, #8
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff ff22 	bl	8004036 <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	885a      	ldrh	r2, [r3, #2]
 80041f6:	897b      	ldrh	r3, [r7, #10]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 8004208:	461a      	mov	r2, r3
 800420a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800420e:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 8004212:	330d      	adds	r3, #13
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f113 0f1e 	cmn.w	r3, #30
 800421e:	db1c      	blt.n	800425a <process_long_pulse+0x96>
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b1d      	cmp	r3, #29
 8004224:	dc19      	bgt.n	800425a <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	885a      	ldrh	r2, [r3, #2]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004240:	4618      	mov	r0, r3
 8004242:	f7fd fc07 	bl	8001a54 <reset>

                reset_cycle_long_pulses(self);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa64 	bl	8004714 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fa7c 	bl	800474a <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fa87 	bl	8004766 <reset_cycle_short_pulses>
 8004258:	e002      	b.n	8004260 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fa75 	bl	800474a <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d02d      	beq.n	80042c8 <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	885a      	ldrh	r2, [r3, #2]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	891b      	ldrh	r3, [r3, #8]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	e021      	b.n	80042c2 <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 800427e:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <process_long_pulse+0x120>)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004286:	8a7a      	ldrh	r2, [r7, #18]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	b29b      	uxth	r3, r3
 800428c:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 800428e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004292:	f113 0f1e 	cmn.w	r3, #30
 8004296:	db11      	blt.n	80042bc <process_long_pulse+0xf8>
 8004298:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800429c:	2b1d      	cmp	r3, #29
 800429e:	dc0d      	bgt.n	80042bc <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2264      	movs	r2, #100	; 0x64
 80042a4:	fb02 f303 	mul.w	r3, r2, r3
 80042a8:	3310      	adds	r3, #16
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	6839      	ldr	r1, [r7, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fea1 	bl	8003ff8 <vector_push>
                pulse_classified = 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	77fb      	strb	r3, [r7, #31]
                break;
 80042ba:	e005      	b.n	80042c8 <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	3301      	adds	r3, #1
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	ddda      	ble.n	800427e <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 80042c8:	7ffb      	ldrb	r3, [r7, #31]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fe8e 	bl	8003ff8 <vector_push>
    }
}
 80042dc:	bf00      	nop
 80042de:	3720      	adds	r7, #32
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	0801ba1c 	.word	0x0801ba1c

080042e8 <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00f      	beq.n	800431a <process_short_pulse+0x32>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d208      	bcs.n	800431a <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	33d8      	adds	r3, #216	; 0xd8
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fe72 	bl	8003ff8 <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f805 	bl	8004324 <process_cycle_fix>
	}
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b0a2      	sub	sp, #136	; 0x88
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 800432c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8004336:	2300      	movs	r3, #0
 8004338:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	2b00      	cmp	r3, #0
 8004340:	d105      	bne.n	800434e <process_cycle_fix+0x2a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80b7 	beq.w	80044bc <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b09      	cmp	r3, #9
 8004354:	d80d      	bhi.n	8004372 <process_cycle_fix+0x4e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <process_cycle_fix+0x4e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004372:	2300      	movs	r3, #0
 8004374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004378:	e090      	b.n	800449c <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004380:	2164      	movs	r1, #100	; 0x64
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3370      	adds	r3, #112	; 0x70
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 800438e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004390:	2b00      	cmp	r3, #0
 8004392:	d07e      	beq.n	8004492 <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	891a      	ldrh	r2, [r3, #8]
 8004398:	49c0      	ldr	r1, [pc, #768]	; (800469c <process_cycle_fix+0x378>)
 800439a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800439e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80043a2:	4413      	add	r3, r2
 80043a4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043ae:	e03e      	b.n	800442e <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 80043b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043b4:	2264      	movs	r2, #100	; 0x64
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	3310      	adds	r3, #16
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	18d1      	adds	r1, r2, r3
 80043c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fe66 	bl	800409a <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 80043ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80043d8:	4413      	add	r3, r2
 80043da:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80043de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80043e2:	4619      	mov	r1, r3
 80043e4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80043e8:	1acb      	subs	r3, r1, r3
 80043ea:	441a      	add	r2, r3
 80043ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80043f6:	440b      	add	r3, r1
 80043f8:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 80043fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004406:	4413      	add	r3, r2
 8004408:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800440c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004410:	4413      	add	r3, r2
 8004412:	b29a      	uxth	r2, r3
 8004414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800441e:	440b      	add	r3, r1
 8004420:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004428:	3301      	adds	r3, #1
 800442a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800442e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004434:	429a      	cmp	r2, r3
 8004436:	d3bb      	bcc.n	80043b0 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443a:	2b01      	cmp	r3, #1
 800443c:	d929      	bls.n	8004492 <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 800443e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004448:	4413      	add	r3, r2
 800444a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800444e:	461a      	mov	r2, r3
 8004450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	461a      	mov	r2, r3
 8004458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004462:	440b      	add	r3, r1
 8004464:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004472:	4413      	add	r3, r2
 8004474:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004478:	461a      	mov	r2, r3
 800447a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	b29a      	uxth	r2, r3
 8004482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800448c:	440b      	add	r3, r1
 800448e:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004496:	3301      	adds	r3, #1
 8004498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800449c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f77f af6a 	ble.w	800437a <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80044b4:	4619      	mov	r1, r3
 80044b6:	f7fd fa4b 	bl	8001950 <process_pulse_lengths>
 80044ba:	e008      	b.n	80044ce <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d004      	beq.n	80044ce <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	1e5a      	subs	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f7fd faa2 	bl	8001a24 <get_phase>
 80044e0:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 80044e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f2c0 80b5 	blt.w	8004654 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	2220      	movs	r2, #32
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f015 fd85 	bl	801a002 <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 80044f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004508:	105b      	asrs	r3, r3, #1
 800450a:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	891a      	ldrh	r2, [r3, #8]
 8004510:	4962      	ldr	r1, [pc, #392]	; (800469c <process_cycle_fix+0x378>)
 8004512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004514:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004518:	4413      	add	r3, r2
 800451a:	b29a      	uxth	r2, r3
 800451c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004524:	440b      	add	r3, r1
 8004526:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800452a:	b29b      	uxth	r3, r3
 800452c:	4413      	add	r3, r2
 800452e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004532:	2300      	movs	r3, #0
 8004534:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004536:	e04a      	b.n	80045ce <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 800453e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fda8 	bl	800409a <vector_get>
            uint32_t input_idx = p.input_idx;
 800454a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800454e:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004550:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004552:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	b29b      	uxth	r3, r3
 8004558:	4413      	add	r3, r2
 800455a:	b29a      	uxth	r2, r3
 800455c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004566:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800456a:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 800456e:	d32b      	bcc.n	80045c8 <process_cycle_fix+0x2a4>
 8004570:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004574:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004578:	4293      	cmp	r3, r2
 800457a:	d825      	bhi.n	80045c8 <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 800457c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004584:	4413      	add	r3, r2
 8004586:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <process_cycle_fix+0x280>
 800458e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004596:	4413      	add	r3, r2
 8004598:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800459c:	889a      	ldrh	r2, [r3, #4]
 800459e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d211      	bcs.n	80045c8 <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 80045a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80045ac:	4413      	add	r3, r2
 80045ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80045b2:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 80045b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80045be:	4413      	add	r3, r2
 80045c0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80045c4:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 80045c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045ca:	3301      	adds	r3, #1
 80045cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80045d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d3ae      	bcc.n	8004538 <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 80045da:	2300      	movs	r3, #0
 80045dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80045de:	e034      	b.n	800464a <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 80045e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80045e8:	4413      	add	r3, r2
 80045ea:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d028      	beq.n	8004644 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 80045f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f4:	015b      	lsls	r3, r3, #5
 80045f6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	4413      	add	r3, r2
 80045fe:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004608:	4413      	add	r3, r2
 800460a:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800460e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800461a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80046a0 <process_cycle_fix+0x37c>
 800461e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004622:	eddf 6a20 	vldr	s13, [pc, #128]	; 80046a4 <process_cycle_fix+0x380>
 8004626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800462a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800462c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68d9      	ldr	r1, [r3, #12]
 800463a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800463c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800463e:	3204      	adds	r2, #4
 8004640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004646:	3301      	adds	r3, #1
 8004648:	67bb      	str	r3, [r7, #120]	; 0x78
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004650:	429a      	cmp	r2, r3
 8004652:	d3c5      	bcc.n	80045e0 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8004654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004656:	2b00      	cmp	r3, #0
 8004658:	db06      	blt.n	8004668 <process_cycle_fix+0x344>
 800465a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465c:	2b03      	cmp	r3, #3
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e008      	b.n	800467a <process_cycle_fix+0x356>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d02b      	beq.n	80046d6 <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	891a      	ldrh	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8004688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468a:	2b00      	cmp	r3, #0
 800468c:	db0c      	blt.n	80046a8 <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d908      	bls.n	80046a8 <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8004696:	22c8      	movs	r2, #200	; 0xc8
 8004698:	e007      	b.n	80046aa <process_cycle_fix+0x386>
 800469a:	bf00      	nop
 800469c:	0801ba1c 	.word	0x0801ba1c
 80046a0:	40490fdb 	.word	0x40490fdb
 80046a4:	46023400 	.word	0x46023400
 80046a8:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046be:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80046ce:	4619      	mov	r1, r3
 80046d0:	4610      	mov	r0, r2
 80046d2:	f7fd ff71 	bl	80025b8 <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f81c 	bl	8004714 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f834 	bl	800474a <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f83f 	bl	8004766 <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	891a      	ldrh	r2, [r3, #8]
 80046ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80046f8:	330d      	adds	r3, #13
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
}
 800470a:	bf00      	nop
 800470c:	3788      	adds	r7, #136	; 0x88
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop

08004714 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e00c      	b.n	800473c <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2264      	movs	r2, #100	; 0x64
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	3310      	adds	r3, #16
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fcda 	bl	80040ea <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3301      	adds	r3, #1
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b01      	cmp	r3, #1
 8004740:	ddef      	ble.n	8004722 <reset_cycle_long_pulses+0xe>
	}
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff fcc6 	bl	80040ea <vector_clear>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	33d8      	adds	r3, #216	; 0xd8
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fcb9 	bl	80040ea <vector_clear>
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0

}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047a6:	bf00      	nop
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <LL_APB1_GRP1_EnableClock>:
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80047b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80047c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80047d4:	68fb      	ldr	r3, [r7, #12]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80047e8:	4b11      	ldr	r3, [pc, #68]	; (8004830 <MX_RTC_Init+0x4c>)
 80047ea:	4a12      	ldr	r2, [pc, #72]	; (8004834 <MX_RTC_Init+0x50>)
 80047ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80047ee:	4b10      	ldr	r3, [pc, #64]	; (8004830 <MX_RTC_Init+0x4c>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <MX_RTC_Init+0x4c>)
 80047f6:	220f      	movs	r2, #15
 80047f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80047fa:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <MX_RTC_Init+0x4c>)
 80047fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004800:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <MX_RTC_Init+0x4c>)
 8004804:	2200      	movs	r2, #0
 8004806:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004808:	4b09      	ldr	r3, [pc, #36]	; (8004830 <MX_RTC_Init+0x4c>)
 800480a:	2200      	movs	r2, #0
 800480c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <MX_RTC_Init+0x4c>)
 8004810:	2200      	movs	r2, #0
 8004812:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <MX_RTC_Init+0x4c>)
 8004816:	2200      	movs	r2, #0
 8004818:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800481a:	4805      	ldr	r0, [pc, #20]	; (8004830 <MX_RTC_Init+0x4c>)
 800481c:	f008 fc27 	bl	800d06e <HAL_RTC_Init>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8004826:	f7ff f969 	bl	8003afc <Error_Handler>
  }

}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	200287e8 	.word	0x200287e8
 8004834:	40002800 	.word	0x40002800

08004838 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a06      	ldr	r2, [pc, #24]	; (8004860 <HAL_RTC_MspInit+0x28>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d105      	bne.n	8004856 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800484a:	f7ff ffa0 	bl	800478e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800484e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004852:	f7ff ffad 	bl	80047b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40002800 	.word	0x40002800

08004864 <RTC_ToEpoch>:
  }
} 

/* USER CODE BEGIN 1 */
// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	785b      	ldrb	r3, [r3, #1]
 8004872:	f1c3 030e 	rsb	r3, r3, #14
 8004876:	4a44      	ldr	r2, [pc, #272]	; (8004988 <RTC_ToEpoch+0x124>)
 8004878:	fb82 1203 	smull	r1, r2, r2, r3
 800487c:	1052      	asrs	r2, r2, #1
 800487e:	17db      	asrs	r3, r3, #31
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	75fb      	strb	r3, [r7, #23]
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	78db      	ldrb	r3, [r3, #3]
 8004888:	b29a      	uxth	r2, r3
 800488a:	7dfb      	ldrb	r3, [r7, #23]
 800488c:	b29b      	uxth	r3, r3
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	b29b      	uxth	r3, r3
 8004892:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8004896:	3310      	adds	r3, #16
 8004898:	82bb      	strh	r3, [r7, #20]
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	785a      	ldrb	r2, [r3, #1]
 800489e:	7dfb      	ldrb	r3, [r7, #23]
 80048a0:	4619      	mov	r1, r3
 80048a2:	0049      	lsls	r1, r1, #1
 80048a4:	440b      	add	r3, r1
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	4413      	add	r3, r2
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	3b03      	subs	r3, #3
 80048b0:	74fb      	strb	r3, [r7, #19]

	// Gregorian calendar date compute
	JDN = date->Date;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	789b      	ldrb	r3, [r3, #2]
 80048b6:	60fb      	str	r3, [r7, #12]
	JDN += (153 * m + 2) / 5;
 80048b8:	7cfa      	ldrb	r2, [r7, #19]
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	011a      	lsls	r2, r3, #4
 80048c2:	4413      	add	r3, r2
 80048c4:	3302      	adds	r3, #2
 80048c6:	4a31      	ldr	r2, [pc, #196]	; (800498c <RTC_ToEpoch+0x128>)
 80048c8:	fb82 1203 	smull	r1, r2, r2, r3
 80048cc:	1052      	asrs	r2, r2, #1
 80048ce:	17db      	asrs	r3, r3, #31
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
	JDN += 365 * y;
 80048da:	8abb      	ldrh	r3, [r7, #20]
 80048dc:	f240 126d 	movw	r2, #365	; 0x16d
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
	JDN += y / 4;
 80048ec:	8abb      	ldrh	r3, [r7, #20]
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
	JDN += -y / 100;
 80048fa:	8abb      	ldrh	r3, [r7, #20]
 80048fc:	425b      	negs	r3, r3
 80048fe:	4a24      	ldr	r2, [pc, #144]	; (8004990 <RTC_ToEpoch+0x12c>)
 8004900:	fb82 1203 	smull	r1, r2, r2, r3
 8004904:	1152      	asrs	r2, r2, #5
 8004906:	17db      	asrs	r3, r3, #31
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	461a      	mov	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
	JDN += y / 400;
 8004912:	8abb      	ldrh	r3, [r7, #20]
 8004914:	4a1e      	ldr	r2, [pc, #120]	; (8004990 <RTC_ToEpoch+0x12c>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	09db      	lsrs	r3, r3, #7
 800491c:	b29b      	uxth	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
	JDN = JDN - 32045;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 800492c:	3b2d      	subs	r3, #45	; 0x2d
 800492e:	60fb      	str	r3, [r7, #12]
	JDN = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4b18      	ldr	r3, [pc, #96]	; (8004994 <RTC_ToEpoch+0x130>)
 8004934:	4413      	add	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
	JDN *= 86400;                     // Days to seconds
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4a17      	ldr	r2, [pc, #92]	; (8004998 <RTC_ToEpoch+0x134>)
 800493c:	fb02 f303 	mul.w	r3, r2, r3
 8004940:	60fb      	str	r3, [r7, #12]
	JDN += time->Hours * 3600;    // ... and today seconds
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800494c:	fb03 f302 	mul.w	r3, r3, r2
 8004950:	461a      	mov	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
	JDN += time->Minutes * 60;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	461a      	mov	r2, r3
 800495e:	4613      	mov	r3, r2
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	461a      	mov	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
	JDN += time->Seconds;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	789b      	ldrb	r3, [r3, #2]
 8004972:	461a      	mov	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

	return JDN;
 800497a:	68fb      	ldr	r3, [r7, #12]
}
 800497c:	4618      	mov	r0, r3
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	2aaaaaab 	.word	0x2aaaaaab
 800498c:	66666667 	.word	0x66666667
 8004990:	51eb851f 	.word	0x51eb851f
 8004994:	ffdac274 	.word	0xffdac274
 8004998:	00015180 	.word	0x00015180

0800499c <RTC_FromEpoch>:

//
//// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b095      	sub	sp, #84	; 0x54
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	uint32_t m;
	int16_t  year  = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t  month = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t  dow   = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t  mday  = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t  hour  = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  min   = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t  sec   = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint64_t JD    = 0;
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	f04f 0400 	mov.w	r4, #0
 80049da:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint64_t JDN   = 0;
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	f04f 0400 	mov.w	r4, #0
 80049e6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 80049f0:	33c0      	adds	r3, #192	; 0xc0
 80049f2:	4a7c      	ldr	r2, [pc, #496]	; (8004be4 <RTC_FromEpoch+0x248>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	0bda      	lsrs	r2, r3, #15
 80049fa:	4b7b      	ldr	r3, [pc, #492]	; (8004be8 <RTC_FromEpoch+0x24c>)
 80049fc:	4413      	add	r3, r2
 80049fe:	f04f 0400 	mov.w	r4, #0
 8004a02:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	JDN = JD >> 1;
 8004a06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004a0a:	0864      	lsrs	r4, r4, #1
 8004a0c:	ea4f 0333 	mov.w	r3, r3, rrx
 8004a10:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	4a74      	ldr	r2, [pc, #464]	; (8004bec <RTC_FromEpoch+0x250>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	0109      	lsls	r1, r1, #4
 8004a30:	1acb      	subs	r3, r1, r3
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	4a69      	ldr	r2, [pc, #420]	; (8004bec <RTC_FromEpoch+0x250>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	4619      	mov	r1, r3
 8004a58:	0109      	lsls	r1, r1, #4
 8004a5a:	1acb      	subs	r3, r1, r3
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	4a60      	ldr	r2, [pc, #384]	; (8004bf0 <RTC_FromEpoch+0x254>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	4619      	mov	r1, r3
 8004a82:	0049      	lsls	r1, r1, #1
 8004a84:	440b      	add	r3, r1
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    dow   = JDN % 7;
 8004a92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004a96:	f04f 0207 	mov.w	r2, #7
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	f7fc f835 	bl	8000b0c <__aeabi_uldivmod>
 8004aa2:	461c      	mov	r4, r3
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    a     = JDN + 32044;
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8004ab0:	332c      	adds	r3, #44	; 0x2c
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
    b     = ((4 * a) + 3) / 146097;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	3303      	adds	r3, #3
 8004aba:	4a4e      	ldr	r2, [pc, #312]	; (8004bf4 <RTC_FromEpoch+0x258>)
 8004abc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac0:	0bdb      	lsrs	r3, r3, #15
 8004ac2:	623b      	str	r3, [r7, #32]
    c     = a - ((146097 * b) / 4);
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	4a4c      	ldr	r2, [pc, #304]	; (8004bf8 <RTC_FromEpoch+0x25c>)
 8004ac8:	fb02 f303 	mul.w	r3, r2, r3
 8004acc:	089b      	lsrs	r3, r3, #2
 8004ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	61fb      	str	r3, [r7, #28]
    d     = ((4 * c) + 3) / 1461;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	3303      	adds	r3, #3
 8004ada:	4a48      	ldr	r2, [pc, #288]	; (8004bfc <RTC_FromEpoch+0x260>)
 8004adc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae0:	09db      	lsrs	r3, r3, #7
 8004ae2:	61bb      	str	r3, [r7, #24]
    e     = c - ((1461 * d) / 4);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f240 52b5 	movw	r2, #1461	; 0x5b5
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	617b      	str	r3, [r7, #20]
    m     = ((5 * e) + 2) / 153;
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	3302      	adds	r3, #2
 8004b00:	4a3f      	ldr	r2, [pc, #252]	; (8004c00 <RTC_FromEpoch+0x264>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	09db      	lsrs	r3, r3, #7
 8004b08:	613b      	str	r3, [r7, #16]
    mday  = e - (((153 * m) + 2) / 5) + 1;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	b299      	uxth	r1, r3
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4613      	mov	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4413      	add	r3, r2
 8004b16:	011a      	lsls	r2, r3, #4
 8004b18:	4413      	add	r3, r2
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	4a39      	ldr	r2, [pc, #228]	; (8004c04 <RTC_FromEpoch+0x268>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	089b      	lsrs	r3, r3, #2
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	1acb      	subs	r3, r1, r3
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    month = m + 3 - (12 * (m / 10));
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4932      	ldr	r1, [pc, #200]	; (8004c04 <RTC_FromEpoch+0x268>)
 8004b3a:	fba1 1303 	umull	r1, r3, r1, r3
 8004b3e:	08db      	lsrs	r3, r3, #3
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	4619      	mov	r1, r3
 8004b44:	0049      	lsls	r1, r1, #1
 8004b46:	440b      	add	r3, r1
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3303      	adds	r3, #3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    year  = (100 * b) + d - 4800 + (m / 10);
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	0092      	lsls	r2, r2, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	461a      	mov	r2, r3
 8004b64:	0091      	lsls	r1, r2, #2
 8004b66:	461a      	mov	r2, r3
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4922      	ldr	r1, [pc, #136]	; (8004c04 <RTC_FromEpoch+0x268>)
 8004b7c:	fba1 1303 	umull	r1, r3, r1, r3
 8004b80:	08db      	lsrs	r3, r3, #3
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    date->Year    = year - 2000;
 8004b92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	3330      	adds	r3, #48	; 0x30
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	70da      	strb	r2, [r3, #3]
    date->Month   = month;
 8004ba0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	705a      	strb	r2, [r3, #1]
    date->Date    = mday;
 8004baa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	709a      	strb	r2, [r3, #2]
    date->WeekDay = dow;
 8004bb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	701a      	strb	r2, [r3, #0]
    time->Hours   = hour;
 8004bbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	701a      	strb	r2, [r3, #0]
    time->Minutes = min;
 8004bc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	705a      	strb	r2, [r3, #1]
    time->Seconds = sec;
 8004bd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	709a      	strb	r2, [r3, #2]
}
 8004bdc:	bf00      	nop
 8004bde:	3754      	adds	r7, #84	; 0x54
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd90      	pop	{r4, r7, pc}
 8004be4:	c22e4507 	.word	0xc22e4507
 8004be8:	004a7b17 	.word	0x004a7b17
 8004bec:	88888889 	.word	0x88888889
 8004bf0:	aaaaaaab 	.word	0xaaaaaaab
 8004bf4:	396b06bd 	.word	0x396b06bd
 8004bf8:	00023ab1 	.word	0x00023ab1
 8004bfc:	166db073 	.word	0x166db073
 8004c00:	d62b80d7 	.word	0xd62b80d7
 8004c04:	cccccccd 	.word	0xcccccccd

08004c08 <LL_AHB3_GRP1_EnableClock>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8004c3e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004c42:	f7ff ffe1 	bl	8004c08 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c46:	2200      	movs	r2, #0
 8004c48:	210f      	movs	r1, #15
 8004c4a:	f06f 0001 	mvn.w	r0, #1
 8004c4e:	f002 fef8 	bl	8007a42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8004c52:	2200      	movs	r2, #0
 8004c54:	210f      	movs	r1, #15
 8004c56:	202c      	movs	r0, #44	; 0x2c
 8004c58:	f002 fef3 	bl	8007a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	210f      	movs	r1, #15
 8004c60:	202d      	movs	r0, #45	; 0x2d
 8004c62:	f002 feee 	bl	8007a42 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8004c66:	bf00      	nop
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
}
 8004c90:	bf00      	nop
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08c      	sub	sp, #48	; 0x30
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8004cac:	2200      	movs	r2, #0
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	2019      	movs	r0, #25
 8004cb2:	f002 fec6 	bl	8007a42 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8004cb6:	2019      	movs	r0, #25
 8004cb8:	f002 fedd 	bl	8007a76 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004cbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004cc0:	f7ff ffd3 	bl	8004c6a <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004cc4:	f107 0208 	add.w	r2, r7, #8
 8004cc8:	f107 030c 	add.w	r3, r7, #12
 8004ccc:	4611      	mov	r1, r2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f007 fcc0 	bl	800c654 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004cd4:	f007 fca8 	bl	800c628 <HAL_RCC_GetPCLK2Freq>
 8004cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cdc:	4a12      	ldr	r2, [pc, #72]	; (8004d28 <HAL_InitTick+0x8c>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	0c9b      	lsrs	r3, r3, #18
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004ce8:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <HAL_InitTick+0x90>)
 8004cea:	4a11      	ldr	r2, [pc, #68]	; (8004d30 <HAL_InitTick+0x94>)
 8004cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004cee:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <HAL_InitTick+0x90>)
 8004cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004cf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004cf6:	4a0d      	ldr	r2, [pc, #52]	; (8004d2c <HAL_InitTick+0x90>)
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_InitTick+0x90>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d02:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <HAL_InitTick+0x90>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004d08:	4808      	ldr	r0, [pc, #32]	; (8004d2c <HAL_InitTick+0x90>)
 8004d0a:	f008 fd0d 	bl	800d728 <HAL_TIM_Base_Init>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004d14:	4805      	ldr	r0, [pc, #20]	; (8004d2c <HAL_InitTick+0x90>)
 8004d16:	f008 fd89 	bl	800d82c <HAL_TIM_Base_Start_IT>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	e000      	b.n	8004d20 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3730      	adds	r7, #48	; 0x30
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	431bde83 	.word	0x431bde83
 8004d2c:	2002880c 	.word	0x2002880c
 8004d30:	40012c00 	.word	0x40012c00

08004d34 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e072      	b.n	8004e2c <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f001 f8a4 	bl	8005ea8 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004d7e:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8004d86:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8004d8c:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8004d92:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8004d98:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8004d9e:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8004da4:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	7b1b      	ldrb	r3, [r3, #12]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d107      	bne.n	8004dc6 <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004dc4:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	43d2      	mvns	r2, r2
 8004ddc:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004df6:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681c      	ldr	r4, [r3, #0]
 8004e00:	4610      	mov	r0, r2
 8004e02:	f000 f952 	bl	80050aa <TSC_extract_groups>
 8004e06:	4603      	mov	r3, r0
 8004e08:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0203 	bic.w	r2, r2, #3
 8004e18:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2203      	movs	r2, #3
 8004e20:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd90      	pop	{r4, r7, pc}

08004e34 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_TSC_Start_IT+0x16>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e04b      	b.n	8004ee2 <HAL_TSC_Start_IT+0xae>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d108      	bne.n	8004e86 <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0202 	orr.w	r2, r2, #2
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	e007      	b.n	8004e96 <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0202 	bic.w	r2, r2, #2
 8004e94:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d108      	bne.n	8004eb8 <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0210 	bic.w	r2, r2, #16
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e007      	b.n	8004ec8 <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0210 	orr.w	r2, r2, #16
 8004ec6:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0202 	orr.w	r2, r2, #2
 8004ed6:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	3310      	adds	r3, #16
 8004f06:	2101      	movs	r1, #1
 8004f08:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0c:	401a      	ands	r2, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	3310      	adds	r3, #16
 8004f16:	2101      	movs	r1, #1
 8004f18:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	685b      	ldr	r3, [r3, #4]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 8004f56:	b590      	push	{r4, r7, lr}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_TSC_IOConfig+0x18>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e032      	b.n	8004fd4 <HAL_TSC_IOConfig+0x7e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0202 	bic.w	r2, r2, #2
 8004f84:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	43d2      	mvns	r2, r2
 8004f9c:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6819      	ldr	r1, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	6892      	ldr	r2, [r2, #8]
 8004fb6:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681c      	ldr	r4, [r3, #0]
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f000 f872 	bl	80050aa <TSC_extract_groups>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd90      	pop	{r4, r7, pc}

08004fdc <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_TSC_IODischarge+0x1a>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e01c      	b.n	8005030 <HAL_TSC_IODischarge+0x54>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d108      	bne.n	8005016 <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0210 	bic.w	r2, r2, #16
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e007      	b.n	8005026 <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0210 	orr.w	r2, r2, #16
 8005024:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b01      	cmp	r3, #1
 8005050:	d103      	bne.n	800505a <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2201      	movs	r2, #1
 8005058:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b02      	cmp	r3, #2
 8005066:	d10b      	bne.n	8005080 <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2202      	movs	r2, #2
 800506e:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2203      	movs	r2, #3
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f80c 	bl	8005096 <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 800507e:	e006      	b.n	800508e <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fb61 	bl	8005750 <HAL_TSC_ConvCpltCallback>
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	e011      	b.n	80050e0 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	220f      	movs	r2, #15
 80050c2:	409a      	lsls	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d006      	beq.n	80050da <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 80050cc:	2201      	movs	r2, #1
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	3301      	adds	r3, #1
 80050de:	60bb      	str	r3, [r7, #8]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b06      	cmp	r3, #6
 80050e4:	d9ea      	bls.n	80050bc <TSC_extract_groups+0x12>
    }
  }

  return groups;
 80050e6:	68fb      	ldr	r3, [r7, #12]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050f8:	bf00      	nop
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005102:	b480      	push	{r7}
 8005104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005106:	e7fe      	b.n	8005106 <HardFault_Handler+0x4>

08005108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800510c:	e7fe      	b.n	800510c <MemManage_Handler+0x4>

0800510e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800510e:	b480      	push	{r7}
 8005110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005112:	e7fe      	b.n	8005112 <BusFault_Handler+0x4>

08005114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005118:	e7fe      	b.n	8005118 <UsageFault_Handler+0x4>

0800511a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800511a:	b480      	push	{r7}
 800511c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800511e:	bf00      	nop
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800512c:	2004      	movs	r0, #4
 800512e:	f003 f9af 	bl	8008490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 8005132:	4b04      	ldr	r3, [pc, #16]	; (8005144 <EXTI2_IRQHandler+0x1c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2104      	movs	r1, #4
 8005138:	4618      	mov	r0, r3
 800513a:	f00a fec3 	bl	800fec4 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20028094 	.word	0x20028094

08005148 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800514c:	4802      	ldr	r0, [pc, #8]	; (8005158 <DMA1_Channel1_IRQHandler+0x10>)
 800514e:	f002 fea2 	bl	8007e96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20027ae0 	.word	0x20027ae0

0800515c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005160:	4802      	ldr	r0, [pc, #8]	; (800516c <USB_LP_IRQHandler+0x10>)
 8005162:	f005 fb05 	bl	800a770 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005166:	bf00      	nop
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20029ecc 	.word	0x20029ecc

08005170 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8005174:	4802      	ldr	r0, [pc, #8]	; (8005180 <COMP_IRQHandler+0x10>)
 8005176:	f002 fb1d 	bl	80077b4 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 800517a:	bf00      	nop
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	200280c0 	.word	0x200280c0

08005184 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005188:	2020      	movs	r0, #32
 800518a:	f003 f981 	bl	8008490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005198:	4803      	ldr	r0, [pc, #12]	; (80051a8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800519a:	f008 fc85 	bl	800daa8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800519e:	4803      	ldr	r0, [pc, #12]	; (80051ac <TIM1_UP_TIM16_IRQHandler+0x18>)
 80051a0:	f008 fc82 	bl	800daa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80051a4:	bf00      	nop
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	2002880c 	.word	0x2002880c
 80051ac:	2002888c 	.word	0x2002888c

080051b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80051b4:	4802      	ldr	r0, [pc, #8]	; (80051c0 <TIM2_IRQHandler+0x10>)
 80051b6:	f008 fc77 	bl	800daa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	2002884c 	.word	0x2002884c

080051c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80051c8:	4802      	ldr	r0, [pc, #8]	; (80051d4 <I2C1_EV_IRQHandler+0x10>)
 80051ca:	f003 fd77 	bl	8008cbc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80051ce:	bf00      	nop
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20028250 	.word	0x20028250

080051d8 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 80051dc:	f013 fc42 	bl	8018a64 <HW_IPCC_Tx_Handler>

  return;
 80051e0:	bf00      	nop
}
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 80051e8:	f013 fbe2 	bl	80189b0 <HW_IPCC_Rx_Handler>
  return;
 80051ec:	bf00      	nop
}
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 80051f4:	4802      	ldr	r0, [pc, #8]	; (8005200 <TSC_IRQHandler+0x10>)
 80051f6:	f7ff ff21 	bl	800503c <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 80051fa:	bf00      	nop
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20028900 	.word	0x20028900

08005204 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8005204:	b40c      	push	{r2, r3}
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	4603      	mov	r3, r0
 800520e:	460a      	mov	r2, r1
 8005210:	71fb      	strb	r3, [r7, #7]
 8005212:	4613      	mov	r3, r2
 8005214:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	b002      	add	sp, #8
 8005222:	4770      	bx	lr

08005224 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005228:	4b26      	ldr	r3, [pc, #152]	; (80052c4 <SystemInit+0xa0>)
 800522a:	2200      	movs	r2, #0
 800522c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800522e:	4b25      	ldr	r3, [pc, #148]	; (80052c4 <SystemInit+0xa0>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	4a23      	ldr	r2, [pc, #140]	; (80052c4 <SystemInit+0xa0>)
 8005236:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800523a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800523e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800524e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005252:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005256:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005262:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <SystemInit+0xa4>)
 8005264:	4013      	ands	r3, r2
 8005266:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005274:	f023 0305 	bic.w	r3, r3, #5
 8005278:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800527c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005288:	f023 0301 	bic.w	r3, r3, #1
 800528c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005294:	4a0d      	ldr	r2, [pc, #52]	; (80052cc <SystemInit+0xa8>)
 8005296:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	4a0b      	ldr	r2, [pc, #44]	; (80052cc <SystemInit+0xa8>)
 800529e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80052a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b4:	2200      	movs	r2, #0
 80052b6:	619a      	str	r2, [r3, #24]
}
 80052b8:	bf00      	nop
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	e000ed00 	.word	0xe000ed00
 80052c8:	faf6fefb 	.word	0xfaf6fefb
 80052cc:	22041000 	.word	0x22041000

080052d0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	4a47      	ldr	r2, [pc, #284]	; (8005400 <SystemCoreClockUpdate+0x130>)
 80052e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 030c 	and.w	r3, r3, #12
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	d867      	bhi.n	80053c8 <SystemCoreClockUpdate+0xf8>
 80052f8:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <SystemCoreClockUpdate+0x30>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	08005335 	.word	0x08005335
 8005304:	080053c9 	.word	0x080053c9
 8005308:	080053c9 	.word	0x080053c9
 800530c:	080053c9 	.word	0x080053c9
 8005310:	0800533d 	.word	0x0800533d
 8005314:	080053c9 	.word	0x080053c9
 8005318:	080053c9 	.word	0x080053c9
 800531c:	080053c9 	.word	0x080053c9
 8005320:	08005345 	.word	0x08005345
 8005324:	080053c9 	.word	0x080053c9
 8005328:	080053c9 	.word	0x080053c9
 800532c:	080053c9 	.word	0x080053c9
 8005330:	0800534d 	.word	0x0800534d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8005334:	4a33      	ldr	r2, [pc, #204]	; (8005404 <SystemCoreClockUpdate+0x134>)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6013      	str	r3, [r2, #0]
      break;
 800533a:	e049      	b.n	80053d0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800533c:	4b31      	ldr	r3, [pc, #196]	; (8005404 <SystemCoreClockUpdate+0x134>)
 800533e:	4a32      	ldr	r2, [pc, #200]	; (8005408 <SystemCoreClockUpdate+0x138>)
 8005340:	601a      	str	r2, [r3, #0]
      break;
 8005342:	e045      	b.n	80053d0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005344:	4b2f      	ldr	r3, [pc, #188]	; (8005404 <SystemCoreClockUpdate+0x134>)
 8005346:	4a31      	ldr	r2, [pc, #196]	; (800540c <SystemCoreClockUpdate+0x13c>)
 8005348:	601a      	str	r2, [r3, #0]
      break;
 800534a:	e041      	b.n	80053d0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800534c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	091b      	lsrs	r3, r3, #4
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	3301      	adds	r3, #1
 8005366:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d105      	bne.n	800537a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800536e:	4a26      	ldr	r2, [pc, #152]	; (8005408 <SystemCoreClockUpdate+0x138>)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e00d      	b.n	8005396 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d105      	bne.n	800538c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8005380:	4a22      	ldr	r2, [pc, #136]	; (800540c <SystemCoreClockUpdate+0x13c>)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e004      	b.n	8005396 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	0a1b      	lsrs	r3, r3, #8
 800539e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	fb02 f303 	mul.w	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	0f5b      	lsrs	r3, r3, #29
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	3301      	adds	r3, #1
 80053b8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c2:	4a10      	ldr	r2, [pc, #64]	; (8005404 <SystemCoreClockUpdate+0x134>)
 80053c4:	6013      	str	r3, [r2, #0]
      break;
 80053c6:	e003      	b.n	80053d0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80053c8:	4a0e      	ldr	r2, [pc, #56]	; (8005404 <SystemCoreClockUpdate+0x134>)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	6013      	str	r3, [r2, #0]
      break;
 80053ce:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80053d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	091b      	lsrs	r3, r3, #4
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	4a0c      	ldr	r2, [pc, #48]	; (8005410 <SystemCoreClockUpdate+0x140>)
 80053de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80053e4:	4b07      	ldr	r3, [pc, #28]	; (8005404 <SystemCoreClockUpdate+0x134>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ee:	4a05      	ldr	r2, [pc, #20]	; (8005404 <SystemCoreClockUpdate+0x134>)
 80053f0:	6013      	str	r3, [r2, #0]

}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	0801ba80 	.word	0x0801ba80
 8005404:	20000078 	.word	0x20000078
 8005408:	00f42400 	.word	0x00f42400
 800540c:	01e84800 	.word	0x01e84800
 8005410:	0801ba20 	.word	0x0801ba20

08005414 <LL_AHB2_GRP1_EnableClock>:
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4313      	orrs	r3, r2
 800542a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800542c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4013      	ands	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005438:	68fb      	ldr	r3, [r7, #12]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <LL_APB1_GRP1_EnableClock>:
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800544e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005452:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4313      	orrs	r3, r2
 800545c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800545e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005462:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4013      	ands	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800546a:	68fb      	ldr	r3, [r7, #12]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <LL_APB2_GRP1_EnableClock>:
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005484:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4313      	orrs	r3, r2
 800548e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005494:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4013      	ands	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800549c:	68fb      	ldr	r3, [r7, #12]
}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08e      	sub	sp, #56	; 0x38
 80054b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	609a      	str	r2, [r3, #8]
 80054be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054c0:	f107 031c 	add.w	r3, r7, #28
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054cc:	463b      	mov	r3, r7
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	605a      	str	r2, [r3, #4]
 80054d4:	609a      	str	r2, [r3, #8]
 80054d6:	60da      	str	r2, [r3, #12]
 80054d8:	611a      	str	r2, [r3, #16]
 80054da:	615a      	str	r2, [r3, #20]
 80054dc:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80054de:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <MX_TIM2_Init+0x128>)
 80054e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3199;
 80054e6:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <MX_TIM2_Init+0x128>)
 80054e8:	f640 427f 	movw	r2, #3199	; 0xc7f
 80054ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80054ee:	4b39      	ldr	r3, [pc, #228]	; (80055d4 <MX_TIM2_Init+0x128>)
 80054f0:	2220      	movs	r2, #32
 80054f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80054f4:	4b37      	ldr	r3, [pc, #220]	; (80055d4 <MX_TIM2_Init+0x128>)
 80054f6:	220a      	movs	r2, #10
 80054f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054fa:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <MX_TIM2_Init+0x128>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005500:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <MX_TIM2_Init+0x128>)
 8005502:	2280      	movs	r2, #128	; 0x80
 8005504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005506:	4833      	ldr	r0, [pc, #204]	; (80055d4 <MX_TIM2_Init+0x128>)
 8005508:	f008 f90e 	bl	800d728 <HAL_TIM_Base_Init>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005512:	f7fe faf3 	bl	8003afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800551c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005520:	4619      	mov	r1, r3
 8005522:	482c      	ldr	r0, [pc, #176]	; (80055d4 <MX_TIM2_Init+0x128>)
 8005524:	f008 fd76 	bl	800e014 <HAL_TIM_ConfigClockSource>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800552e:	f7fe fae5 	bl	8003afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005532:	4828      	ldr	r0, [pc, #160]	; (80055d4 <MX_TIM2_Init+0x128>)
 8005534:	f008 f9d9 	bl	800d8ea <HAL_TIM_PWM_Init>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800553e:	f7fe fadd 	bl	8003afc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8005542:	4824      	ldr	r0, [pc, #144]	; (80055d4 <MX_TIM2_Init+0x128>)
 8005544:	f008 f99c 	bl	800d880 <HAL_TIM_OC_Init>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 800554e:	f7fe fad5 	bl	8003afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005552:	2320      	movs	r3, #32
 8005554:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005556:	2300      	movs	r3, #0
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800555a:	f107 031c 	add.w	r3, r7, #28
 800555e:	4619      	mov	r1, r3
 8005560:	481c      	ldr	r0, [pc, #112]	; (80055d4 <MX_TIM2_Init+0x128>)
 8005562:	f009 f9d3 	bl	800e90c <HAL_TIMEx_MasterConfigSynchronization>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 800556c:	f7fe fac6 	bl	8003afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005570:	2360      	movs	r3, #96	; 0x60
 8005572:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8005574:	230a      	movs	r3, #10
 8005576:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005578:	2300      	movs	r3, #0
 800557a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005580:	463b      	mov	r3, r7
 8005582:	2204      	movs	r2, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4813      	ldr	r0, [pc, #76]	; (80055d4 <MX_TIM2_Init+0x128>)
 8005588:	f008 fc2c 	bl	800dde4 <HAL_TIM_PWM_ConfigChannel>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8005592:	f7fe fab3 	bl	8003afc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8005596:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <MX_TIM2_Init+0x128>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699a      	ldr	r2, [r3, #24]
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <MX_TIM2_Init+0x128>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055a4:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80055a6:	2300      	movs	r3, #0
 80055a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80055ae:	463b      	mov	r3, r7
 80055b0:	220c      	movs	r2, #12
 80055b2:	4619      	mov	r1, r3
 80055b4:	4807      	ldr	r0, [pc, #28]	; (80055d4 <MX_TIM2_Init+0x128>)
 80055b6:	f008 fb97 	bl	800dce8 <HAL_TIM_OC_ConfigChannel>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80055c0:	f7fe fa9c 	bl	8003afc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80055c4:	4803      	ldr	r0, [pc, #12]	; (80055d4 <MX_TIM2_Init+0x128>)
 80055c6:	f000 f859 	bl	800567c <HAL_TIM_MspPostInit>

}
 80055ca:	bf00      	nop
 80055cc:	3738      	adds	r7, #56	; 0x38
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	2002884c 	.word	0x2002884c

080055d8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <MX_TIM16_Init+0x44>)
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <MX_TIM16_Init+0x48>)
 80055e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 80055e2:	4b0e      	ldr	r3, [pc, #56]	; (800561c <MX_TIM16_Init+0x44>)
 80055e4:	221f      	movs	r2, #31
 80055e6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <MX_TIM16_Init+0x44>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <MX_TIM16_Init+0x44>)
 80055f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055f4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <MX_TIM16_Init+0x44>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80055fc:	4b07      	ldr	r3, [pc, #28]	; (800561c <MX_TIM16_Init+0x44>)
 80055fe:	2200      	movs	r2, #0
 8005600:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <MX_TIM16_Init+0x44>)
 8005604:	2200      	movs	r2, #0
 8005606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005608:	4804      	ldr	r0, [pc, #16]	; (800561c <MX_TIM16_Init+0x44>)
 800560a:	f008 f88d 	bl	800d728 <HAL_TIM_Base_Init>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005614:	f7fe fa72 	bl	8003afc <Error_Handler>
  }

}
 8005618:	bf00      	nop
 800561a:	bd80      	pop	{r7, pc}
 800561c:	2002888c 	.word	0x2002888c
 8005620:	40014400 	.word	0x40014400

08005624 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005634:	d10b      	bne.n	800564e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005636:	2001      	movs	r0, #1
 8005638:	f7ff ff05 	bl	8005446 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800563c:	2200      	movs	r2, #0
 800563e:	2105      	movs	r1, #5
 8005640:	201c      	movs	r0, #28
 8005642:	f002 f9fe 	bl	8007a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005646:	201c      	movs	r0, #28
 8005648:	f002 fa15 	bl	8007a76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800564c:	e010      	b.n	8005670 <HAL_TIM_Base_MspInit+0x4c>
  else if(tim_baseHandle->Instance==TIM16)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a09      	ldr	r2, [pc, #36]	; (8005678 <HAL_TIM_Base_MspInit+0x54>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d10b      	bne.n	8005670 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005658:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800565c:	f7ff ff0c 	bl	8005478 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005660:	2200      	movs	r2, #0
 8005662:	2100      	movs	r1, #0
 8005664:	2019      	movs	r0, #25
 8005666:	f002 f9ec 	bl	8007a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800566a:	2019      	movs	r0, #25
 800566c:	f002 fa03 	bl	8007a76 <HAL_NVIC_EnableIRQ>
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40014400 	.word	0x40014400

0800567c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005684:	f107 030c 	add.w	r3, r7, #12
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	605a      	str	r2, [r3, #4]
 800568e:	609a      	str	r2, [r3, #8]
 8005690:	60da      	str	r2, [r3, #12]
 8005692:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569c:	d112      	bne.n	80056c4 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800569e:	2002      	movs	r0, #2
 80056a0:	f7ff feb8 	bl	8005414 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80056a4:	2308      	movs	r3, #8
 80056a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a8:	2302      	movs	r3, #2
 80056aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80056b4:	2301      	movs	r3, #1
 80056b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056b8:	f107 030c 	add.w	r3, r7, #12
 80056bc:	4619      	mov	r1, r3
 80056be:	4803      	ldr	r0, [pc, #12]	; (80056cc <HAL_TIM_MspPostInit+0x50>)
 80056c0:	f002 fd46 	bl	8008150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80056c4:	bf00      	nop
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	48000400 	.word	0x48000400

080056d0 <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 80056d8:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <HAL_COMP_TriggerCallback+0x74>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	b29a      	uxth	r2, r3
 80056e0:	4b19      	ldr	r3, [pc, #100]	; (8005748 <HAL_COMP_TriggerCallback+0x78>)
 80056e2:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f002 f893 	bl	8007810 <HAL_COMP_GetOutputLevel>
 80056ea:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d109      	bne.n	8005706 <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <HAL_COMP_TriggerCallback+0x78>)
 80056f4:	881a      	ldrh	r2, [r3, #0]
 80056f6:	4b15      	ldr	r3, [pc, #84]	; (800574c <HAL_COMP_TriggerCallback+0x7c>)
 80056f8:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 80056fc:	4b13      	ldr	r3, [pc, #76]	; (800574c <HAL_COMP_TriggerCallback+0x7c>)
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8005704:	e019      	b.n	800573a <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 8005706:	4b11      	ldr	r3, [pc, #68]	; (800574c <HAL_COMP_TriggerCallback+0x7c>)
 8005708:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d014      	beq.n	800573a <HAL_COMP_TriggerCallback+0x6a>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d111      	bne.n	800573a <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 8005716:	4b0d      	ldr	r3, [pc, #52]	; (800574c <HAL_COMP_TriggerCallback+0x7c>)
 8005718:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <HAL_COMP_TriggerCallback+0x78>)
 800571e:	881a      	ldrh	r2, [r3, #0]
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <HAL_COMP_TriggerCallback+0x7c>)
 8005722:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	b29b      	uxth	r3, r3
 800572a:	461a      	mov	r2, r3
 800572c:	4807      	ldr	r0, [pc, #28]	; (800574c <HAL_COMP_TriggerCallback+0x7c>)
 800572e:	f7fd fe43 	bl	80033b8 <enqueue_pulse>
		input0.rise_valid_ = 0;
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <HAL_COMP_TriggerCallback+0x7c>)
 8005734:	2200      	movs	r2, #0
 8005736:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 800573a:	bf00      	nop
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	2002888c 	.word	0x2002888c
 8005748:	20000c7e 	.word	0x20000c7e
 800574c:	20027c6c 	.word	0x20027c6c

08005750 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 8005750:	b5b0      	push	{r4, r5, r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 8005758:	2101      	movs	r1, #1
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fc3e 	bl	8004fdc <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 8005760:	2101      	movs	r1, #1
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff fbc3 	bl	8004eee <HAL_TSC_GroupGetStatus>
 8005768:	4603      	mov	r3, r0
 800576a:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 800576c:	7dbb      	ldrb	r3, [r7, #22]
 800576e:	2b01      	cmp	r3, #1
 8005770:	f040 8115 	bne.w	800599e <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 8005774:	2101      	movs	r1, #1
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fbdb 	bl	8004f32 <HAL_TSC_GroupGetValue>
 800577c:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 800577e:	4ba0      	ldr	r3, [pc, #640]	; (8005a00 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d17d      	bne.n	8005882 <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 8005786:	4b9f      	ldr	r3, [pc, #636]	; (8005a04 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	2b64      	cmp	r3, #100	; 0x64
 800578c:	d83a      	bhi.n	8005804 <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 8005792:	4b9c      	ldr	r3, [pc, #624]	; (8005a04 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d108      	bne.n	80057ac <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a4:	4b98      	ldr	r3, [pc, #608]	; (8005a08 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80057a6:	edc3 7a00 	vstr	s15, [r3]
 80057aa:	e024      	b.n	80057f6 <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 80057ac:	6938      	ldr	r0, [r7, #16]
 80057ae:	f7fa fe33 	bl	8000418 <__aeabi_ui2d>
 80057b2:	a38f      	add	r3, pc, #572	; (adr r3, 80059f0 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa fea8 	bl	800050c <__aeabi_dmul>
 80057bc:	4603      	mov	r3, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	4625      	mov	r5, r4
 80057c2:	461c      	mov	r4, r3
 80057c4:	4b90      	ldr	r3, [pc, #576]	; (8005a08 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fa fe47 	bl	800045c <__aeabi_f2d>
 80057ce:	a38a      	add	r3, pc, #552	; (adr r3, 80059f8 <HAL_TSC_ConvCpltCallback+0x2a8>)
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	f7fa fe9a 	bl	800050c <__aeabi_dmul>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4620      	mov	r0, r4
 80057de:	4629      	mov	r1, r5
 80057e0:	f7fa fcde 	bl	80001a0 <__adddf3>
 80057e4:	4603      	mov	r3, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	4618      	mov	r0, r3
 80057ea:	4621      	mov	r1, r4
 80057ec:	f7fb f93e 	bl	8000a6c <__aeabi_d2f>
 80057f0:	4602      	mov	r2, r0
 80057f2:	4b85      	ldr	r3, [pc, #532]	; (8005a08 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80057f4:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 80057f6:	4b83      	ldr	r3, [pc, #524]	; (8005a04 <HAL_TSC_ConvCpltCallback+0x2b4>)
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	3301      	adds	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	4b81      	ldr	r3, [pc, #516]	; (8005a04 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	e0ba      	b.n	800597a <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800580e:	4b7e      	ldr	r3, [pc, #504]	; (8005a08 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005810:	edd3 7a00 	vldr	s15, [r3]
 8005814:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8005a0c <HAL_TSC_ConvCpltCallback+0x2bc>
 8005818:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800581c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005824:	bf94      	ite	ls
 8005826:	2301      	movls	r3, #1
 8005828:	2300      	movhi	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 800582e:	7dfb      	ldrb	r3, [r7, #23]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f040 80a2 	bne.w	800597a <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8005836:	6938      	ldr	r0, [r7, #16]
 8005838:	f7fa fdee 	bl	8000418 <__aeabi_ui2d>
 800583c:	a36c      	add	r3, pc, #432	; (adr r3, 80059f0 <HAL_TSC_ConvCpltCallback+0x2a0>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fe63 	bl	800050c <__aeabi_dmul>
 8005846:	4603      	mov	r3, r0
 8005848:	460c      	mov	r4, r1
 800584a:	4625      	mov	r5, r4
 800584c:	461c      	mov	r4, r3
 800584e:	4b6e      	ldr	r3, [pc, #440]	; (8005a08 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f7fa fe02 	bl	800045c <__aeabi_f2d>
 8005858:	a367      	add	r3, pc, #412	; (adr r3, 80059f8 <HAL_TSC_ConvCpltCallback+0x2a8>)
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f7fa fe55 	bl	800050c <__aeabi_dmul>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4620      	mov	r0, r4
 8005868:	4629      	mov	r1, r5
 800586a:	f7fa fc99 	bl	80001a0 <__adddf3>
 800586e:	4603      	mov	r3, r0
 8005870:	460c      	mov	r4, r1
 8005872:	4618      	mov	r0, r3
 8005874:	4621      	mov	r1, r4
 8005876:	f7fb f8f9 	bl	8000a6c <__aeabi_d2f>
 800587a:	4602      	mov	r2, r0
 800587c:	4b62      	ldr	r3, [pc, #392]	; (8005a08 <HAL_TSC_ConvCpltCallback+0x2b8>)
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	e07b      	b.n	800597a <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 8005882:	4b63      	ldr	r3, [pc, #396]	; (8005a10 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	2b64      	cmp	r3, #100	; 0x64
 8005888:	d83a      	bhi.n	8005900 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 800588e:	4b60      	ldr	r3, [pc, #384]	; (8005a10 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d108      	bne.n	80058a8 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	ee07 3a90 	vmov	s15, r3
 800589c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a0:	4b5c      	ldr	r3, [pc, #368]	; (8005a14 <HAL_TSC_ConvCpltCallback+0x2c4>)
 80058a2:	edc3 7a00 	vstr	s15, [r3]
 80058a6:	e024      	b.n	80058f2 <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 80058a8:	6938      	ldr	r0, [r7, #16]
 80058aa:	f7fa fdb5 	bl	8000418 <__aeabi_ui2d>
 80058ae:	a350      	add	r3, pc, #320	; (adr r3, 80059f0 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f7fa fe2a 	bl	800050c <__aeabi_dmul>
 80058b8:	4603      	mov	r3, r0
 80058ba:	460c      	mov	r4, r1
 80058bc:	4625      	mov	r5, r4
 80058be:	461c      	mov	r4, r3
 80058c0:	4b54      	ldr	r3, [pc, #336]	; (8005a14 <HAL_TSC_ConvCpltCallback+0x2c4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fa fdc9 	bl	800045c <__aeabi_f2d>
 80058ca:	a34b      	add	r3, pc, #300	; (adr r3, 80059f8 <HAL_TSC_ConvCpltCallback+0x2a8>)
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f7fa fe1c 	bl	800050c <__aeabi_dmul>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4620      	mov	r0, r4
 80058da:	4629      	mov	r1, r5
 80058dc:	f7fa fc60 	bl	80001a0 <__adddf3>
 80058e0:	4603      	mov	r3, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	4618      	mov	r0, r3
 80058e6:	4621      	mov	r1, r4
 80058e8:	f7fb f8c0 	bl	8000a6c <__aeabi_d2f>
 80058ec:	4602      	mov	r2, r0
 80058ee:	4b49      	ldr	r3, [pc, #292]	; (8005a14 <HAL_TSC_ConvCpltCallback+0x2c4>)
 80058f0:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 80058f2:	4b47      	ldr	r3, [pc, #284]	; (8005a10 <HAL_TSC_ConvCpltCallback+0x2c0>)
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	3301      	adds	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	4b45      	ldr	r3, [pc, #276]	; (8005a10 <HAL_TSC_ConvCpltCallback+0x2c0>)
 80058fc:	801a      	strh	r2, [r3, #0]
 80058fe:	e03c      	b.n	800597a <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800590a:	4b42      	ldr	r3, [pc, #264]	; (8005a14 <HAL_TSC_ConvCpltCallback+0x2c4>)
 800590c:	edd3 7a00 	vldr	s15, [r3]
 8005910:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8005a0c <HAL_TSC_ConvCpltCallback+0x2bc>
 8005914:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800591c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005920:	bf94      	ite	ls
 8005922:	2301      	movls	r3, #1
 8005924:	2300      	movhi	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d124      	bne.n	800597a <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8005930:	6938      	ldr	r0, [r7, #16]
 8005932:	f7fa fd71 	bl	8000418 <__aeabi_ui2d>
 8005936:	a32e      	add	r3, pc, #184	; (adr r3, 80059f0 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fa fde6 	bl	800050c <__aeabi_dmul>
 8005940:	4603      	mov	r3, r0
 8005942:	460c      	mov	r4, r1
 8005944:	4625      	mov	r5, r4
 8005946:	461c      	mov	r4, r3
 8005948:	4b32      	ldr	r3, [pc, #200]	; (8005a14 <HAL_TSC_ConvCpltCallback+0x2c4>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f7fa fd85 	bl	800045c <__aeabi_f2d>
 8005952:	a329      	add	r3, pc, #164	; (adr r3, 80059f8 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f7fa fdd8 	bl	800050c <__aeabi_dmul>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4620      	mov	r0, r4
 8005962:	4629      	mov	r1, r5
 8005964:	f7fa fc1c 	bl	80001a0 <__adddf3>
 8005968:	4603      	mov	r3, r0
 800596a:	460c      	mov	r4, r1
 800596c:	4618      	mov	r0, r3
 800596e:	4621      	mov	r1, r4
 8005970:	f7fb f87c 	bl	8000a6c <__aeabi_d2f>
 8005974:	4602      	mov	r2, r0
 8005976:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005978:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 800597a:	f000 fb49 	bl	8006010 <HAL_GetTick>
 800597e:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 8005980:	4b1f      	ldr	r3, [pc, #124]	; (8005a00 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	4a24      	ldr	r2, [pc, #144]	; (8005a18 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8005988:	4413      	add	r3, r2
 800598a:	7df9      	ldrb	r1, [r7, #23]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f9f2 	bl	8005d78 <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4920      	ldr	r1, [pc, #128]	; (8005a18 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8005998:	4820      	ldr	r0, [pc, #128]	; (8005a1c <HAL_TSC_ConvCpltCallback+0x2cc>)
 800599a:	f000 f843 	bl	8005a24 <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 800599e:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 80059a6:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80059a8:	2280      	movs	r2, #128	; 0x80
 80059aa:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 80059ac:	4b14      	ldr	r3, [pc, #80]	; (8005a00 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	e005      	b.n	80059c0 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80059b6:	2240      	movs	r2, #64	; 0x40
 80059b8:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 80059c0:	4917      	ldr	r1, [pc, #92]	; (8005a20 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff fac7 	bl	8004f56 <HAL_TSC_IOConfig>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 80059ce:	f7fe f895 	bl	8003afc <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fa2e 	bl	8004e34 <HAL_TSC_Start_IT>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 80059de:	f7fe f88d 	bl	8003afc <Error_Handler>
	}

}
 80059e2:	bf00      	nop
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bdb0      	pop	{r4, r5, r7, pc}
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w
 80059f0:	47ae147b 	.word	0x47ae147b
 80059f4:	3f847ae1 	.word	0x3f847ae1
 80059f8:	7ae147ae 	.word	0x7ae147ae
 80059fc:	3fefae14 	.word	0x3fefae14
 8005a00:	20000c80 	.word	0x20000c80
 8005a04:	20000c94 	.word	0x20000c94
 8005a08:	200288d8 	.word	0x200288d8
 8005a0c:	42700000 	.word	0x42700000
 8005a10:	20000c96 	.word	0x20000c96
 8005a14:	200288fc 	.word	0x200288fc
 8005a18:	20000c84 	.word	0x20000c84
 8005a1c:	200288e0 	.word	0x200288e0
 8005a20:	200288cc 	.word	0x200288cc

08005a24 <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08c      	sub	sp, #48	; 0x30
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	7e1b      	ldrb	r3, [r3, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d123      	bne.n	8005a80 <process_touches+0x5c>
		if (dbs[0].clean_out) {
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	795b      	ldrb	r3, [r3, #5]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00c      	beq.n	8005a5a <process_touches+0x36>
			// front button is held

			self->touch_state = OnePressed;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 8005a52:	4b99      	ldr	r3, [pc, #612]	; (8005cb8 <process_touches+0x294>)
 8005a54:	2205      	movs	r2, #5
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	e126      	b.n	8005ca8 <process_touches+0x284>

		} else if (dbs[1].clean_out) {
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	795b      	ldrb	r3, [r3, #5]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8121 	beq.w	8005ca8 <process_touches+0x284>
			// back button is held

			self->touch_state = OnePressed;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	605a      	str	r2, [r3, #4]
			action = BackHold;
 8005a78:	4b8f      	ldr	r3, [pc, #572]	; (8005cb8 <process_touches+0x294>)
 8005a7a:	2206      	movs	r2, #6
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e113      	b.n	8005ca8 <process_touches+0x284>
		}
	} else if (self->touch_state == OnePressed) {
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	7e1b      	ldrb	r3, [r3, #24]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d12d      	bne.n	8005ae4 <process_touches+0xc0>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	f1c3 0301 	rsb	r3, r3, #1
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4413      	add	r3, r2
 8005a96:	795b      	ldrb	r3, [r3, #5]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d010      	beq.n	8005abe <process_touches+0x9a>
			self->touch_state = TwoPressed;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f1c3 0301 	rsb	r3, r3, #1
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	611a      	str	r2, [r3, #16]
			action = BothHold;
 8005ab6:	4b80      	ldr	r3, [pc, #512]	; (8005cb8 <process_touches+0x294>)
 8005ab8:	2207      	movs	r2, #7
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	e0f4      	b.n	8005ca8 <process_touches+0x284>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	795b      	ldrb	r3, [r3, #5]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 80ec 	bne.w	8005ca8 <process_touches+0x284>
			self->touch_state = OneReleasedNoPressed;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 8005adc:	4b76      	ldr	r3, [pc, #472]	; (8005cb8 <process_touches+0x294>)
 8005ade:	2208      	movs	r2, #8
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e0e1      	b.n	8005ca8 <process_touches+0x284>

		}
	} else if (self->touch_state == TwoPressed) {
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	7e1b      	ldrb	r3, [r3, #24]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d11e      	bne.n	8005b2a <process_touches+0x106>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	4413      	add	r3, r2
 8005af6:	795b      	ldrb	r3, [r3, #5]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <process_touches+0xe6>
			self->touch_state = FirstReleasedSecondPressed;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2204      	movs	r2, #4
 8005b00:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	609a      	str	r2, [r3, #8]
 8005b08:	e0ce      	b.n	8005ca8 <process_touches+0x284>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	7b1b      	ldrb	r3, [r3, #12]
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	4413      	add	r3, r2
 8005b14:	795b      	ldrb	r3, [r3, #5]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f040 80c6 	bne.w	8005ca8 <process_touches+0x284>
			self->touch_state = SecondReleasedFirstPressed;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2205      	movs	r2, #5
 8005b20:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	615a      	str	r2, [r3, #20]
 8005b28:	e0be      	b.n	8005ca8 <process_touches+0x284>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	7e1b      	ldrb	r3, [r3, #24]
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d134      	bne.n	8005b9c <process_touches+0x178>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	f1c3 0301 	rsb	r3, r3, #1
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	4413      	add	r3, r2
 8005b40:	795b      	ldrb	r3, [r3, #5]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00d      	beq.n	8005b62 <process_touches+0x13e>
			self->touch_state = FirstReleasedSecondPressed;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2204      	movs	r2, #4
 8005b4a:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f1c3 0301 	rsb	r3, r3, #1
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	611a      	str	r2, [r3, #16]
 8005b60:	e0a2      	b.n	8005ca8 <process_touches+0x284>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b0a      	cmp	r3, #10
 8005b6c:	f240 809c 	bls.w	8005ca8 <process_touches+0x284>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b28      	cmp	r3, #40	; 0x28
 8005b80:	d905      	bls.n	8005b8e <process_touches+0x16a>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2bc7      	cmp	r3, #199	; 0xc7
 8005b86:	d802      	bhi.n	8005b8e <process_touches+0x16a>
				//Register a tap
				action = BothRelease;
 8005b88:	4b4b      	ldr	r3, [pc, #300]	; (8005cb8 <process_touches+0x294>)
 8005b8a:	2208      	movs	r2, #8
 8005b8c:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8005b8e:	4b4b      	ldr	r3, [pc, #300]	; (8005cbc <process_touches+0x298>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	761a      	strb	r2, [r3, #24]
 8005b9a:	e085      	b.n	8005ca8 <process_touches+0x284>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	7e1b      	ldrb	r3, [r3, #24]
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d148      	bne.n	8005c36 <process_touches+0x212>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	7b1b      	ldrb	r3, [r3, #12]
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	795b      	ldrb	r3, [r3, #5]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d179      	bne.n	8005ca8 <process_touches+0x284>
			self->touch_state = Idle;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	615a      	str	r2, [r3, #20]
			action = None;
 8005bc0:	4b3d      	ldr	r3, [pc, #244]	; (8005cb8 <process_touches+0x294>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	695a      	ldr	r2, [r3, #20]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	695a      	ldr	r2, [r3, #20]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	2b28      	cmp	r3, #40	; 0x28
 8005bee:	d80c      	bhi.n	8005c0a <process_touches+0x1e6>
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	2b28      	cmp	r3, #40	; 0x28
 8005bf4:	d809      	bhi.n	8005c0a <process_touches+0x1e6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b28      	cmp	r3, #40	; 0x28
 8005bfa:	d906      	bls.n	8005c0a <process_touches+0x1e6>
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	2bc7      	cmp	r3, #199	; 0xc7
 8005c00:	d803      	bhi.n	8005c0a <process_touches+0x1e6>
				//Register a tap
				action = BothRelease;
 8005c02:	4b2d      	ldr	r3, [pc, #180]	; (8005cb8 <process_touches+0x294>)
 8005c04:	2208      	movs	r2, #8
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	e011      	b.n	8005c2e <process_touches+0x20a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	2b28      	cmp	r3, #40	; 0x28
 8005c0e:	d90e      	bls.n	8005c2e <process_touches+0x20a>
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b28      	cmp	r3, #40	; 0x28
 8005c14:	d90b      	bls.n	8005c2e <process_touches+0x20a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	b25a      	sxtb	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	7b1b      	ldrb	r3, [r3, #12]
 8005c22:	b25b      	sxtb	r3, r3
 8005c24:	4313      	orrs	r3, r2
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	4b23      	ldr	r3, [pc, #140]	; (8005cb8 <process_touches+0x294>)
 8005c2c:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	761a      	strb	r2, [r3, #24]
 8005c34:	e038      	b.n	8005ca8 <process_touches+0x284>
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	7e1b      	ldrb	r3, [r3, #24]
 8005c3a:	2b05      	cmp	r3, #5
 8005c3c:	d134      	bne.n	8005ca8 <process_touches+0x284>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	4413      	add	r3, r2
 8005c48:	795b      	ldrb	r3, [r3, #5]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d12c      	bne.n	8005ca8 <process_touches+0x284>
			self->touch_state = Idle;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	2b28      	cmp	r3, #40	; 0x28
 8005c82:	d80b      	bhi.n	8005c9c <process_touches+0x278>
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	2b28      	cmp	r3, #40	; 0x28
 8005c88:	d808      	bhi.n	8005c9c <process_touches+0x278>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	2b28      	cmp	r3, #40	; 0x28
 8005c8e:	d905      	bls.n	8005c9c <process_touches+0x278>
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	2bc7      	cmp	r3, #199	; 0xc7
 8005c94:	d802      	bhi.n	8005c9c <process_touches+0x278>
				//Register a tap
				action = BothRelease;
 8005c96:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <process_touches+0x294>)
 8005c98:	2208      	movs	r2, #8
 8005c9a:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <process_touches+0x298>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 8005ca8:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <process_touches+0x294>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <process_touches+0x29c>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005cb0:	4b02      	ldr	r3, [pc, #8]	; (8005cbc <process_touches+0x298>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	e042      	b.n	8005d3e <process_touches+0x31a>
 8005cb8:	20000c9c 	.word	0x20000c9c
 8005cbc:	200288dc 	.word	0x200288dc

	}else if(action == SwipeForward){
 8005cc0:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <process_touches+0x344>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d103      	bne.n	8005cd0 <process_touches+0x2ac>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 8005cc8:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <process_touches+0x348>)
 8005cca:	2203      	movs	r2, #3
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e036      	b.n	8005d3e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x03 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x03 << 4;
	}else if(action == SwipeBackward){
 8005cd0:	4b25      	ldr	r3, [pc, #148]	; (8005d68 <process_touches+0x344>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d103      	bne.n	8005ce0 <process_touches+0x2bc>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 8005cd8:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <process_touches+0x348>)
 8005cda:	2241      	movs	r2, #65	; 0x41
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	e02e      	b.n	8005d3e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == FrontRelease){
 8005ce0:	4b21      	ldr	r3, [pc, #132]	; (8005d68 <process_touches+0x344>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d103      	bne.n	8005cf0 <process_touches+0x2cc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005ce8:	4b20      	ldr	r3, [pc, #128]	; (8005d6c <process_touches+0x348>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e026      	b.n	8005d3e <process_touches+0x31a>
	}else if(action == BackRelease){
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <process_touches+0x344>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d103      	bne.n	8005d00 <process_touches+0x2dc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005cf8:	4b1c      	ldr	r3, [pc, #112]	; (8005d6c <process_touches+0x348>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	e01e      	b.n	8005d3e <process_touches+0x31a>
	}else if(action == FrontHold){
 8005d00:	4b19      	ldr	r3, [pc, #100]	; (8005d68 <process_touches+0x344>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b05      	cmp	r3, #5
 8005d06:	d103      	bne.n	8005d10 <process_touches+0x2ec>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 8005d08:	4b18      	ldr	r3, [pc, #96]	; (8005d6c <process_touches+0x348>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e016      	b.n	8005d3e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x01 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x01 << 4;
	}else if(action == BackHold){
 8005d10:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <process_touches+0x344>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b06      	cmp	r3, #6
 8005d16:	d103      	bne.n	8005d20 <process_touches+0x2fc>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 8005d18:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <process_touches+0x348>)
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e00e      	b.n	8005d3e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x02 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x02 << 4;
	}else if(action == BothHold){
 8005d20:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <process_touches+0x344>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b07      	cmp	r3, #7
 8005d26:	d103      	bne.n	8005d30 <process_touches+0x30c>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 8005d28:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <process_touches+0x348>)
 8005d2a:	2240      	movs	r2, #64	; 0x40
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e006      	b.n	8005d3e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == BothRelease){
 8005d30:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <process_touches+0x344>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d102      	bne.n	8005d3e <process_touches+0x31a>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <process_touches+0x348>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <process_touches+0x34c>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <process_touches+0x348>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d00a      	beq.n	8005d60 <process_touches+0x33c>
		prev_msg = lightsSimpleMessageReceivedTouch;
 8005d4a:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <process_touches+0x348>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a08      	ldr	r2, [pc, #32]	; (8005d70 <process_touches+0x34c>)
 8005d50:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 8005d52:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <process_touches+0x350>)
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	2300      	movs	r3, #0
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4904      	ldr	r1, [pc, #16]	; (8005d6c <process_touches+0x348>)
 8005d5c:	f00a fe74 	bl	8010a48 <osMessageQueuePut>

	}

}
 8005d60:	bf00      	nop
 8005d62:	3730      	adds	r7, #48	; 0x30
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20000c9c 	.word	0x20000c9c
 8005d6c:	200288dc 	.word	0x200288dc
 8005d70:	20000c98 	.word	0x20000c98
 8005d74:	20027c58 	.word	0x20027c58

08005d78 <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	460b      	mov	r3, r1
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	791b      	ldrb	r3, [r3, #4]
 8005d8a:	7afa      	ldrb	r2, [r7, #11]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d006      	beq.n	8005d9e <debounce+0x26>
		self->input = noisy_in;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	7afa      	ldrb	r2, [r7, #11]
 8005d94:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 8005d9c:	e009      	b.n	8005db2 <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b1e      	cmp	r3, #30
 8005da8:	d903      	bls.n	8005db2 <debounce+0x3a>
		self->clean_out = self->input;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	791a      	ldrb	r2, [r3, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	715a      	strb	r2, [r3, #5]
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <LL_AHB1_GRP1_EnableClock>:
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4013      	ands	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005de2:	68fb      	ldr	r3, [r7, #12]
}
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <LL_AHB2_GRP1_EnableClock>:
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4013      	ands	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005e14:	68fb      	ldr	r3, [r7, #12]
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 8005e28:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <MX_TSC_Init+0x80>)
 8005e2c:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 8005e2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e30:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8005e34:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 8005e36:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e38:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8005e3c:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 8005e3e:	4b18      	ldr	r3, [pc, #96]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 8005e44:	4b16      	ldr	r3, [pc, #88]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e46:	2201      	movs	r2, #1
 8005e48:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8005e4a:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8005e50:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e56:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 8005e58:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e5a:	22c0      	movs	r2, #192	; 0xc0
 8005e5c:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8005e5e:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8005e64:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8005e6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 8005e78:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e7a:	22c0      	movs	r2, #192	; 0xc0
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 8005e7e:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 8005e84:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e86:	2210      	movs	r2, #16
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8005e8a:	4805      	ldr	r0, [pc, #20]	; (8005ea0 <MX_TSC_Init+0x7c>)
 8005e8c:	f7fe ff52 	bl	8004d34 <HAL_TSC_Init>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <MX_TSC_Init+0x76>
  {
    Error_Handler();
 8005e96:	f7fd fe31 	bl	8003afc <Error_Handler>
  }

}
 8005e9a:	bf00      	nop
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20028900 	.word	0x20028900
 8005ea4:	40024000 	.word	0x40024000

08005ea8 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb0:	f107 030c 	add.w	r3, r7, #12
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1a      	ldr	r2, [pc, #104]	; (8005f30 <HAL_TSC_MspInit+0x88>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d12e      	bne.n	8005f28 <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8005eca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005ece:	f7ff ff76 	bl	8005dbe <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ed2:	2002      	movs	r0, #2
 8005ed4:	f7ff ff8c 	bl	8005df0 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005ed8:	2310      	movs	r3, #16
 8005eda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005edc:	2312      	movs	r3, #18
 8005ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8005ee8:	2309      	movs	r3, #9
 8005eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eec:	f107 030c 	add.w	r3, r7, #12
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4810      	ldr	r0, [pc, #64]	; (8005f34 <HAL_TSC_MspInit+0x8c>)
 8005ef4:	f002 f92c 	bl	8008150 <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ef8:	23c0      	movs	r3, #192	; 0xc0
 8005efa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005efc:	2302      	movs	r3, #2
 8005efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8005f08:	2309      	movs	r3, #9
 8005f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f0c:	f107 030c 	add.w	r3, r7, #12
 8005f10:	4619      	mov	r1, r3
 8005f12:	4808      	ldr	r0, [pc, #32]	; (8005f34 <HAL_TSC_MspInit+0x8c>)
 8005f14:	f002 f91c 	bl	8008150 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2105      	movs	r1, #5
 8005f1c:	2027      	movs	r0, #39	; 0x27
 8005f1e:	f001 fd90 	bl	8007a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 8005f22:	2027      	movs	r0, #39	; 0x27
 8005f24:	f001 fda7 	bl	8007a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8005f28:	bf00      	nop
 8005f2a:	3720      	adds	r7, #32
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40024000 	.word	0x40024000
 8005f34:	48000400 	.word	0x48000400

08005f38 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005f38:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f3a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f3c:	3304      	adds	r3, #4

08005f3e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f3e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f40:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8005f42:	d3f9      	bcc.n	8005f38 <CopyDataInit>
  bx lr
 8005f44:	4770      	bx	lr

08005f46 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8005f46:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005f48:	3004      	adds	r0, #4

08005f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005f4a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005f4c:	d3fb      	bcc.n	8005f46 <FillZerobss>
  bx lr
 8005f4e:	4770      	bx	lr

08005f50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8005f50:	480c      	ldr	r0, [pc, #48]	; (8005f84 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8005f52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005f54:	480c      	ldr	r0, [pc, #48]	; (8005f88 <LoopForever+0x8>)
 8005f56:	490d      	ldr	r1, [pc, #52]	; (8005f8c <LoopForever+0xc>)
 8005f58:	4a0d      	ldr	r2, [pc, #52]	; (8005f90 <LoopForever+0x10>)
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f7ff ffef 	bl	8005f3e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005f60:	480c      	ldr	r0, [pc, #48]	; (8005f94 <LoopForever+0x14>)
 8005f62:	490d      	ldr	r1, [pc, #52]	; (8005f98 <LoopForever+0x18>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	f7ff fff0 	bl	8005f4a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005f6a:	480c      	ldr	r0, [pc, #48]	; (8005f9c <LoopForever+0x1c>)
 8005f6c:	490c      	ldr	r1, [pc, #48]	; (8005fa0 <LoopForever+0x20>)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f7ff ffeb 	bl	8005f4a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005f74:	f7ff f956 	bl	8005224 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005f78:	f014 f814 	bl	8019fa4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8005f7c:	f7fd fcdc 	bl	8003938 <main>

08005f80 <LoopForever>:

LoopForever:
  b LoopForever
 8005f80:	e7fe      	b.n	8005f80 <LoopForever>
 8005f82:	0000      	.short	0x0000
Reset_Handler:  ldr   r0, =_estack
 8005f84:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8005f88:	20000004 	.word	0x20000004
 8005f8c:	200002d8 	.word	0x200002d8
 8005f90:	0801c428 	.word	0x0801c428
  INIT_BSS _sbss, _ebss
 8005f94:	20000388 	.word	0x20000388
 8005f98:	2002a140 	.word	0x2002a140
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005f9c:	200300c4 	.word	0x200300c4
 8005fa0:	20030b5b 	.word	0x20030b5b

08005fa4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005fa4:	e7fe      	b.n	8005fa4 <ADC1_IRQHandler>
	...

08005fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fb2:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <HAL_Init+0x3c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a0b      	ldr	r2, [pc, #44]	; (8005fe4 <HAL_Init+0x3c>)
 8005fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fbe:	2003      	movs	r0, #3
 8005fc0:	f001 fd34 	bl	8007a2c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f7fe fe69 	bl	8004c9c <HAL_InitTick>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	71fb      	strb	r3, [r7, #7]
 8005fd4:	e001      	b.n	8005fda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005fd6:	f7fe fe30 	bl	8004c3a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005fda:	79fb      	ldrb	r3, [r7, #7]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	58004000 	.word	0x58004000

08005fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <HAL_IncTick+0x20>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <HAL_IncTick+0x24>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	4a04      	ldr	r2, [pc, #16]	; (800600c <HAL_IncTick+0x24>)
 8005ffa:	6013      	str	r3, [r2, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000080 	.word	0x20000080
 800600c:	20028944 	.word	0x20028944

08006010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  return uwTick;
 8006014:	4b03      	ldr	r3, [pc, #12]	; (8006024 <HAL_GetTick+0x14>)
 8006016:	681b      	ldr	r3, [r3, #0]
}
 8006018:	4618      	mov	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20028944 	.word	0x20028944

08006028 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800602c:	4b03      	ldr	r3, [pc, #12]	; (800603c <HAL_GetTickPrio+0x14>)
 800602e:	681b      	ldr	r3, [r3, #0]
}
 8006030:	4618      	mov	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	2000007c 	.word	0x2000007c

08006040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8006048:	f7ff ffe2 	bl	8006010 <HAL_GetTick>
 800604c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006058:	d005      	beq.n	8006066 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800605a:	4b09      	ldr	r3, [pc, #36]	; (8006080 <HAL_Delay+0x40>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8006066:	bf00      	nop
 8006068:	f7ff ffd2 	bl	8006010 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	429a      	cmp	r2, r3
 8006076:	d8f7      	bhi.n	8006068 <HAL_Delay+0x28>
    {
    }
  }
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20000080 	.word	0x20000080

08006084 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	431a      	orrs	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	609a      	str	r2, [r3, #8]
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	609a      	str	r2, [r3, #8]
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80060ec:	b490      	push	{r4, r7}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3360      	adds	r3, #96	; 0x60
 80060fe:	461a      	mov	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006108:	6822      	ldr	r2, [r4, #0]
 800610a:	4b08      	ldr	r3, [pc, #32]	; (800612c <LL_ADC_SetOffset+0x40>)
 800610c:	4013      	ands	r3, r2
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	4313      	orrs	r3, r2
 800611a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800611e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bc90      	pop	{r4, r7}
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	03fff000 	.word	0x03fff000

08006130 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006130:	b490      	push	{r4, r7}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3360      	adds	r3, #96	; 0x60
 800613e:	461a      	mov	r2, r3
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bc90      	pop	{r4, r7}
 8006156:	4770      	bx	lr

08006158 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006158:	b490      	push	{r4, r7}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3360      	adds	r3, #96	; 0x60
 8006168:	461a      	mov	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4313      	orrs	r3, r2
 800617c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800617e:	bf00      	nop
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bc90      	pop	{r4, r7}
 8006186:	4770      	bx	lr

08006188 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80061ae:	b490      	push	{r4, r7}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3330      	adds	r3, #48	; 0x30
 80061be:	461a      	mov	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	0a1b      	lsrs	r3, r3, #8
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	f003 030c 	and.w	r3, r3, #12
 80061ca:	4413      	add	r3, r2
 80061cc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80061ce:	6822      	ldr	r2, [r4, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f003 031f 	and.w	r3, r3, #31
 80061d6:	211f      	movs	r1, #31
 80061d8:	fa01 f303 	lsl.w	r3, r1, r3
 80061dc:	43db      	mvns	r3, r3
 80061de:	401a      	ands	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	0e9b      	lsrs	r3, r3, #26
 80061e4:	f003 011f 	and.w	r1, r3, #31
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	fa01 f303 	lsl.w	r3, r1, r3
 80061f2:	4313      	orrs	r3, r2
 80061f4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc90      	pop	{r4, r7}
 80061fe:	4770      	bx	lr

08006200 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006200:	b490      	push	{r4, r7}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3314      	adds	r3, #20
 8006210:	461a      	mov	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	0e5b      	lsrs	r3, r3, #25
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	4413      	add	r3, r2
 800621e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006220:	6822      	ldr	r2, [r4, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	0d1b      	lsrs	r3, r3, #20
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2107      	movs	r1, #7
 800622c:	fa01 f303 	lsl.w	r3, r1, r3
 8006230:	43db      	mvns	r3, r3
 8006232:	401a      	ands	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	0d1b      	lsrs	r3, r3, #20
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	fa01 f303 	lsl.w	r3, r1, r3
 8006242:	4313      	orrs	r3, r2
 8006244:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bc90      	pop	{r4, r7}
 800624e:	4770      	bx	lr

08006250 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006268:	43db      	mvns	r3, r3
 800626a:	401a      	ands	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f003 0318 	and.w	r3, r3, #24
 8006272:	4908      	ldr	r1, [pc, #32]	; (8006294 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006274:	40d9      	lsrs	r1, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	400b      	ands	r3, r1
 800627a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627e:	431a      	orrs	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	0007ffff 	.word	0x0007ffff

08006298 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80062a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6093      	str	r3, [r2, #8]
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d0:	d101      	bne.n	80062d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80062f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006320:	d101      	bne.n	8006326 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006344:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006348:	f043 0201 	orr.w	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800636c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006370:	f043 0202 	orr.w	r2, r3, #2
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <LL_ADC_IsEnabled+0x18>
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <LL_ADC_IsEnabled+0x1a>
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d101      	bne.n	80063c2 <LL_ADC_IsDisableOngoing+0x18>
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <LL_ADC_IsDisableOngoing+0x1a>
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063e4:	f043 0204 	orr.w	r2, r3, #4
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800640c:	f043 0210 	orr.w	r2, r3, #16
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b04      	cmp	r3, #4
 8006432:	d101      	bne.n	8006438 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006434:	2301      	movs	r3, #1
 8006436:	e000      	b.n	800643a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006456:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800645a:	f043 0220 	orr.w	r2, r3, #32
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b08      	cmp	r3, #8
 8006480:	d101      	bne.n	8006486 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e12a      	b.n	8006704 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d109      	bne.n	80064d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fa fd29 	bl	8000f14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fef1 	bl	80062bc <LL_ADC_IsDeepPowerDownEnabled>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff fed7 	bl	8006298 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff ff0c 	bl	800630c <LL_ADC_IsInternalRegulatorEnabled>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d113      	bne.n	8006522 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff fef0 	bl	80062e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006504:	4b81      	ldr	r3, [pc, #516]	; (800670c <HAL_ADC_Init+0x278>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	099b      	lsrs	r3, r3, #6
 800650a:	4a81      	ldr	r2, [pc, #516]	; (8006710 <HAL_ADC_Init+0x27c>)
 800650c:	fba2 2303 	umull	r2, r3, r2, r3
 8006510:	099b      	lsrs	r3, r3, #6
 8006512:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006514:	e002      	b.n	800651c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	3b01      	subs	r3, #1
 800651a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f9      	bne.n	8006516 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fef0 	bl	800630c <LL_ADC_IsInternalRegulatorEnabled>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10d      	bne.n	800654e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	f043 0210 	orr.w	r2, r3, #16
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006542:	f043 0201 	orr.w	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff ff64 	bl	8006420 <LL_ADC_REG_IsConversionOngoing>
 8006558:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	f003 0310 	and.w	r3, r3, #16
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 80c5 	bne.w	80066f2 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f040 80c1 	bne.w	80066f2 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006574:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006578:	f043 0202 	orr.w	r2, r3, #2
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff fefd 	bl	8006384 <LL_ADC_IsEnabled>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006590:	4860      	ldr	r0, [pc, #384]	; (8006714 <HAL_ADC_Init+0x280>)
 8006592:	f7ff fef7 	bl	8006384 <LL_ADC_IsEnabled>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	4619      	mov	r1, r3
 80065a2:	485d      	ldr	r0, [pc, #372]	; (8006718 <HAL_ADC_Init+0x284>)
 80065a4:	f7ff fd6e 	bl	8006084 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	7e5b      	ldrb	r3, [r3, #25]
 80065ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80065b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80065be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065c8:	4313      	orrs	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d106      	bne.n	80065e4 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	3b01      	subs	r3, #1
 80065dc:	045b      	lsls	r3, r3, #17
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	4b45      	ldr	r3, [pc, #276]	; (800671c <HAL_ADC_Init+0x288>)
 8006608:	4013      	ands	r3, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6812      	ldr	r2, [r2, #0]
 800660e:	69b9      	ldr	r1, [r7, #24]
 8006610:	430b      	orrs	r3, r1
 8006612:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff ff01 	bl	8006420 <LL_ADC_REG_IsConversionOngoing>
 800661e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff ff22 	bl	800646e <LL_ADC_INJ_IsConversionOngoing>
 800662a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d13d      	bne.n	80066ae <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d13a      	bne.n	80066ae <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800663c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006644:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006646:	4313      	orrs	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006654:	f023 0302 	bic.w	r3, r3, #2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	69b9      	ldr	r1, [r7, #24]
 800665e:	430b      	orrs	r3, r1
 8006660:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006668:	2b01      	cmp	r3, #1
 800666a:	d118      	bne.n	800669e <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006676:	f023 0304 	bic.w	r3, r3, #4
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006682:	4311      	orrs	r1, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006688:	4311      	orrs	r1, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800668e:	430a      	orrs	r2, r1
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	611a      	str	r2, [r3, #16]
 800669c:	e007      	b.n	80066ae <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d10c      	bne.n	80066d0 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	f023 010f 	bic.w	r1, r3, #15
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	1e5a      	subs	r2, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
 80066ce:	e007      	b.n	80066e0 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 020f 	bic.w	r2, r2, #15
 80066de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e4:	f023 0303 	bic.w	r3, r3, #3
 80066e8:	f043 0201 	orr.w	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
 80066f0:	e007      	b.n	8006702 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	f043 0210 	orr.w	r2, r3, #16
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006702:	7ffb      	ldrb	r3, [r7, #31]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3720      	adds	r7, #32
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	20000078 	.word	0x20000078
 8006710:	053e2d63 	.word	0x053e2d63
 8006714:	50040000 	.word	0x50040000
 8006718:	50040300 	.word	0x50040300
 800671c:	fff0c007 	.word	0xfff0c007

08006720 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff fe75 	bl	8006420 <LL_ADC_REG_IsConversionOngoing>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d167      	bne.n	800680c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_ADC_Start_DMA+0x2a>
 8006746:	2302      	movs	r3, #2
 8006748:	e063      	b.n	8006812 <HAL_ADC_Start_DMA+0xf2>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fcc2 	bl	80070dc <ADC_Enable>
 8006758:	4603      	mov	r3, r0
 800675a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d14f      	bne.n	8006802 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006766:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800676a:	f023 0301 	bic.w	r3, r3, #1
 800676e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d006      	beq.n	8006790 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006786:	f023 0206 	bic.w	r2, r3, #6
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	659a      	str	r2, [r3, #88]	; 0x58
 800678e:	e002      	b.n	8006796 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679a:	4a20      	ldr	r2, [pc, #128]	; (800681c <HAL_ADC_Start_DMA+0xfc>)
 800679c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a2:	4a1f      	ldr	r2, [pc, #124]	; (8006820 <HAL_ADC_Start_DMA+0x100>)
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067aa:	4a1e      	ldr	r2, [pc, #120]	; (8006824 <HAL_ADC_Start_DMA+0x104>)
 80067ac:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	221c      	movs	r2, #28
 80067b4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f042 0210 	orr.w	r2, r2, #16
 80067cc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0201 	orr.w	r2, r2, #1
 80067dc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3340      	adds	r3, #64	; 0x40
 80067e8:	4619      	mov	r1, r3
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f001 fa19 	bl	8007c24 <HAL_DMA_Start_IT>
 80067f2:	4603      	mov	r3, r0
 80067f4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff fde8 	bl	80063d0 <LL_ADC_REG_StartConversion>
 8006800:	e006      	b.n	8006810 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800680a:	e001      	b.n	8006810 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800680c:	2302      	movs	r3, #2
 800680e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006810:	7dfb      	ldrb	r3, [r7, #23]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	08007241 	.word	0x08007241
 8006820:	08007319 	.word	0x08007319
 8006824:	08007335 	.word	0x08007335

08006828 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_ADC_Stop_DMA+0x16>
 800683a:	2302      	movs	r3, #2
 800683c:	e051      	b.n	80068e2 <HAL_ADC_Stop_DMA+0xba>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006846:	2103      	movs	r1, #3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fb93 	bl	8006f74 <ADC_ConversionStop>
 800684e:	4603      	mov	r3, r0
 8006850:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d13f      	bne.n	80068d8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0201 	bic.w	r2, r2, #1
 8006866:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d10f      	bne.n	8006896 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687a:	4618      	mov	r0, r3
 800687c:	f001 fa4d 	bl	8007d1a <HAL_DMA_Abort>
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0210 	bic.w	r2, r2, #16
 80068a4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d105      	bne.n	80068b8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fc6f 	bl	8007190 <ADC_Disable>
 80068b2:	4603      	mov	r3, r0
 80068b4:	73fb      	strb	r3, [r7, #15]
 80068b6:	e002      	b.n	80068be <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fc69 	bl	8007190 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068cc:	f023 0301 	bic.w	r3, r3, #1
 80068d0:	f043 0201 	orr.w	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
	...

08006900 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b0a6      	sub	sp, #152	; 0x98
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_ADC_ConfigChannel+0x22>
 800691e:	2302      	movs	r3, #2
 8006920:	e31e      	b.n	8006f60 <HAL_ADC_ConfigChannel+0x660>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff fd76 	bl	8006420 <LL_ADC_REG_IsConversionOngoing>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	f040 8303 	bne.w	8006f42 <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6859      	ldr	r1, [r3, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	f7ff fc30 	bl	80061ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff fd64 	bl	8006420 <LL_ADC_REG_IsConversionOngoing>
 8006958:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fd84 	bl	800646e <LL_ADC_INJ_IsConversionOngoing>
 8006966:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800696a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 8148 	bne.w	8006c04 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006978:	2b00      	cmp	r3, #0
 800697a:	f040 8143 	bne.w	8006c04 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	6819      	ldr	r1, [r3, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	461a      	mov	r2, r3
 800698c:	f7ff fc38 	bl	8006200 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695a      	ldr	r2, [r3, #20]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	08db      	lsrs	r3, r3, #3
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d00a      	beq.n	80069c8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6919      	ldr	r1, [r3, #16]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069c2:	f7ff fb93 	bl	80060ec <LL_ADC_SetOffset>
 80069c6:	e11d      	b.n	8006c04 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff fbae 	bl	8006130 <LL_ADC_GetOffsetChannel>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <HAL_ADC_ConfigChannel+0xf4>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2100      	movs	r1, #0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff fba3 	bl	8006130 <LL_ADC_GetOffsetChannel>
 80069ea:	4603      	mov	r3, r0
 80069ec:	0e9b      	lsrs	r3, r3, #26
 80069ee:	f003 021f 	and.w	r2, r3, #31
 80069f2:	e012      	b.n	8006a1a <HAL_ADC_ConfigChannel+0x11a>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2100      	movs	r1, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fb98 	bl	8006130 <LL_ADC_GetOffsetChannel>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a0a:	fa93 f3a3 	rbit	r3, r3
 8006a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a12:	fab3 f383 	clz	r3, r3
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d105      	bne.n	8006a32 <HAL_ADC_ConfigChannel+0x132>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	0e9b      	lsrs	r3, r3, #26
 8006a2c:	f003 031f 	and.w	r3, r3, #31
 8006a30:	e00a      	b.n	8006a48 <HAL_ADC_ConfigChannel+0x148>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a3a:	fa93 f3a3 	rbit	r3, r3
 8006a3e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8006a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a42:	fab3 f383 	clz	r3, r3
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d106      	bne.n	8006a5a <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2200      	movs	r2, #0
 8006a52:	2100      	movs	r1, #0
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff fb7f 	bl	8006158 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2101      	movs	r1, #1
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fb65 	bl	8006130 <LL_ADC_GetOffsetChannel>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <HAL_ADC_ConfigChannel+0x186>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2101      	movs	r1, #1
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff fb5a 	bl	8006130 <LL_ADC_GetOffsetChannel>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	0e9b      	lsrs	r3, r3, #26
 8006a80:	f003 021f 	and.w	r2, r3, #31
 8006a84:	e010      	b.n	8006aa8 <HAL_ADC_ConfigChannel+0x1a8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fb4f 	bl	8006130 <LL_ADC_GetOffsetChannel>
 8006a92:	4603      	mov	r3, r0
 8006a94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a98:	fa93 f3a3 	rbit	r3, r3
 8006a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa0:	fab3 f383 	clz	r3, r3
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <HAL_ADC_ConfigChannel+0x1c0>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	0e9b      	lsrs	r3, r3, #26
 8006aba:	f003 031f 	and.w	r3, r3, #31
 8006abe:	e00a      	b.n	8006ad6 <HAL_ADC_ConfigChannel+0x1d6>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ac8:	fa93 f3a3 	rbit	r3, r3
 8006acc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ad0:	fab3 f383 	clz	r3, r3
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d106      	bne.n	8006ae8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff fb38 	bl	8006158 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2102      	movs	r1, #2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff fb1e 	bl	8006130 <LL_ADC_GetOffsetChannel>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <HAL_ADC_ConfigChannel+0x214>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2102      	movs	r1, #2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fb13 	bl	8006130 <LL_ADC_GetOffsetChannel>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	0e9b      	lsrs	r3, r3, #26
 8006b0e:	f003 021f 	and.w	r2, r3, #31
 8006b12:	e010      	b.n	8006b36 <HAL_ADC_ConfigChannel+0x236>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2102      	movs	r1, #2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fb08 	bl	8006130 <LL_ADC_GetOffsetChannel>
 8006b20:	4603      	mov	r3, r0
 8006b22:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b26:	fa93 f3a3 	rbit	r3, r3
 8006b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8006b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b2e:	fab3 f383 	clz	r3, r3
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d105      	bne.n	8006b4e <HAL_ADC_ConfigChannel+0x24e>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	0e9b      	lsrs	r3, r3, #26
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	e00a      	b.n	8006b64 <HAL_ADC_ConfigChannel+0x264>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b56:	fa93 f3a3 	rbit	r3, r3
 8006b5a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b5e:	fab3 f383 	clz	r3, r3
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d106      	bne.n	8006b76 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2102      	movs	r1, #2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff faf1 	bl	8006158 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2103      	movs	r1, #3
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff fad7 	bl	8006130 <LL_ADC_GetOffsetChannel>
 8006b82:	4603      	mov	r3, r0
 8006b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <HAL_ADC_ConfigChannel+0x2a2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2103      	movs	r1, #3
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff facc 	bl	8006130 <LL_ADC_GetOffsetChannel>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	0e9b      	lsrs	r3, r3, #26
 8006b9c:	f003 021f 	and.w	r2, r3, #31
 8006ba0:	e010      	b.n	8006bc4 <HAL_ADC_ConfigChannel+0x2c4>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2103      	movs	r1, #3
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff fac1 	bl	8006130 <LL_ADC_GetOffsetChannel>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb4:	fa93 f3a3 	rbit	r3, r3
 8006bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbc:	fab3 f383 	clz	r3, r3
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d105      	bne.n	8006bdc <HAL_ADC_ConfigChannel+0x2dc>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	0e9b      	lsrs	r3, r3, #26
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	e00a      	b.n	8006bf2 <HAL_ADC_ConfigChannel+0x2f2>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be4:	fa93 f3a3 	rbit	r3, r3
 8006be8:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8006bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bec:	fab3 f383 	clz	r3, r3
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d106      	bne.n	8006c04 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2103      	movs	r1, #3
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff faaa 	bl	8006158 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff fbbb 	bl	8006384 <LL_ADC_IsEnabled>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 819f 	bne.w	8006f54 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6819      	ldr	r1, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	461a      	mov	r2, r3
 8006c24:	f7ff fb14 	bl	8006250 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	4aab      	ldr	r2, [pc, #684]	; (8006edc <HAL_ADC_ConfigChannel+0x5dc>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	f040 80fd 	bne.w	8006e2e <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10b      	bne.n	8006c5c <HAL_ADC_ConfigChannel+0x35c>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	0e9b      	lsrs	r3, r3, #26
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	2b09      	cmp	r3, #9
 8006c52:	bf94      	ite	ls
 8006c54:	2301      	movls	r3, #1
 8006c56:	2300      	movhi	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	e012      	b.n	8006c82 <HAL_ADC_ConfigChannel+0x382>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c64:	fa93 f3a3 	rbit	r3, r3
 8006c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6c:	fab3 f383 	clz	r3, r3
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	3301      	adds	r3, #1
 8006c74:	f003 031f 	and.w	r3, r3, #31
 8006c78:	2b09      	cmp	r3, #9
 8006c7a:	bf94      	ite	ls
 8006c7c:	2301      	movls	r3, #1
 8006c7e:	2300      	movhi	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d064      	beq.n	8006d50 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d107      	bne.n	8006ca2 <HAL_ADC_ConfigChannel+0x3a2>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	0e9b      	lsrs	r3, r3, #26
 8006c98:	3301      	adds	r3, #1
 8006c9a:	069b      	lsls	r3, r3, #26
 8006c9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ca0:	e00e      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0x3c0>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006caa:	fa93 f3a3 	rbit	r3, r3
 8006cae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb2:	fab3 f383 	clz	r3, r3
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	3301      	adds	r3, #1
 8006cba:	069b      	lsls	r3, r3, #26
 8006cbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <HAL_ADC_ConfigChannel+0x3e0>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	0e9b      	lsrs	r3, r3, #26
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	2101      	movs	r1, #1
 8006cda:	fa01 f303 	lsl.w	r3, r1, r3
 8006cde:	e010      	b.n	8006d02 <HAL_ADC_ConfigChannel+0x402>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	fa93 f3a3 	rbit	r3, r3
 8006cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	fab3 f383 	clz	r3, r3
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	f003 031f 	and.w	r3, r3, #31
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006d02:	ea42 0103 	orr.w	r1, r2, r3
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <HAL_ADC_ConfigChannel+0x428>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	0e9b      	lsrs	r3, r3, #26
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f003 021f 	and.w	r2, r3, #31
 8006d1e:	4613      	mov	r3, r2
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	4413      	add	r3, r2
 8006d24:	051b      	lsls	r3, r3, #20
 8006d26:	e011      	b.n	8006d4c <HAL_ADC_ConfigChannel+0x44c>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	fa93 f3a3 	rbit	r3, r3
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	fab3 f383 	clz	r3, r3
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	3301      	adds	r3, #1
 8006d40:	f003 021f 	and.w	r2, r3, #31
 8006d44:	4613      	mov	r3, r2
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	4413      	add	r3, r2
 8006d4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	e069      	b.n	8006e24 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d107      	bne.n	8006d6c <HAL_ADC_ConfigChannel+0x46c>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	0e9b      	lsrs	r3, r3, #26
 8006d62:	3301      	adds	r3, #1
 8006d64:	069b      	lsls	r3, r3, #26
 8006d66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d6a:	e00e      	b.n	8006d8a <HAL_ADC_ConfigChannel+0x48a>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	fa93 f3a3 	rbit	r3, r3
 8006d78:	61fb      	str	r3, [r7, #28]
  return result;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	fab3 f383 	clz	r3, r3
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	3301      	adds	r3, #1
 8006d84:	069b      	lsls	r3, r3, #26
 8006d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <HAL_ADC_ConfigChannel+0x4aa>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	0e9b      	lsrs	r3, r3, #26
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f003 031f 	and.w	r3, r3, #31
 8006da2:	2101      	movs	r1, #1
 8006da4:	fa01 f303 	lsl.w	r3, r1, r3
 8006da8:	e010      	b.n	8006dcc <HAL_ADC_ConfigChannel+0x4cc>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	fa93 f3a3 	rbit	r3, r3
 8006db6:	617b      	str	r3, [r7, #20]
  return result;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	fab3 f383 	clz	r3, r3
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	ea42 0103 	orr.w	r1, r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10d      	bne.n	8006df8 <HAL_ADC_ConfigChannel+0x4f8>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	0e9b      	lsrs	r3, r3, #26
 8006de2:	3301      	adds	r3, #1
 8006de4:	f003 021f 	and.w	r2, r3, #31
 8006de8:	4613      	mov	r3, r2
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	4413      	add	r3, r2
 8006dee:	3b1e      	subs	r3, #30
 8006df0:	051b      	lsls	r3, r3, #20
 8006df2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006df6:	e014      	b.n	8006e22 <HAL_ADC_ConfigChannel+0x522>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	fa93 f3a3 	rbit	r3, r3
 8006e04:	60fb      	str	r3, [r7, #12]
  return result;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	fab3 f383 	clz	r3, r3
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	3301      	adds	r3, #1
 8006e10:	f003 021f 	and.w	r2, r3, #31
 8006e14:	4613      	mov	r3, r2
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	4413      	add	r3, r2
 8006e1a:	3b1e      	subs	r3, #30
 8006e1c:	051b      	lsls	r3, r3, #20
 8006e1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e22:	430b      	orrs	r3, r1
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	6892      	ldr	r2, [r2, #8]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	f7ff f9e9 	bl	8006200 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	4b2b      	ldr	r3, [pc, #172]	; (8006ee0 <HAL_ADC_ConfigChannel+0x5e0>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 808c 	beq.w	8006f54 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006e3c:	4829      	ldr	r0, [pc, #164]	; (8006ee4 <HAL_ADC_ConfigChannel+0x5e4>)
 8006e3e:	f7ff f947 	bl	80060d0 <LL_ADC_GetCommonPathInternalCh>
 8006e42:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e46:	4828      	ldr	r0, [pc, #160]	; (8006ee8 <HAL_ADC_ConfigChannel+0x5e8>)
 8006e48:	f7ff fa9c 	bl	8006384 <LL_ADC_IsEnabled>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d16d      	bne.n	8006f2e <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a25      	ldr	r2, [pc, #148]	; (8006eec <HAL_ADC_ConfigChannel+0x5ec>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d126      	bne.n	8006eaa <HAL_ADC_ConfigChannel+0x5aa>
 8006e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d120      	bne.n	8006eaa <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ee8 <HAL_ADC_ConfigChannel+0x5e8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d170      	bne.n	8006f54 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4819      	ldr	r0, [pc, #100]	; (8006ee4 <HAL_ADC_ConfigChannel+0x5e4>)
 8006e7e:	f7ff f914 	bl	80060aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006e82:	4b1b      	ldr	r3, [pc, #108]	; (8006ef0 <HAL_ADC_ConfigChannel+0x5f0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	099b      	lsrs	r3, r3, #6
 8006e88:	4a1a      	ldr	r2, [pc, #104]	; (8006ef4 <HAL_ADC_ConfigChannel+0x5f4>)
 8006e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8e:	099a      	lsrs	r2, r3, #6
 8006e90:	4613      	mov	r3, r2
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8006e9a:	e002      	b.n	8006ea2 <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1f9      	bne.n	8006e9c <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ea8:	e054      	b.n	8006f54 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a12      	ldr	r2, [pc, #72]	; (8006ef8 <HAL_ADC_ConfigChannel+0x5f8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d123      	bne.n	8006efc <HAL_ADC_ConfigChannel+0x5fc>
 8006eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d11d      	bne.n	8006efc <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a08      	ldr	r2, [pc, #32]	; (8006ee8 <HAL_ADC_ConfigChannel+0x5e8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d144      	bne.n	8006f54 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4803      	ldr	r0, [pc, #12]	; (8006ee4 <HAL_ADC_ConfigChannel+0x5e4>)
 8006ed6:	f7ff f8e8 	bl	80060aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006eda:	e03b      	b.n	8006f54 <HAL_ADC_ConfigChannel+0x654>
 8006edc:	407f0000 	.word	0x407f0000
 8006ee0:	80080000 	.word	0x80080000
 8006ee4:	50040300 	.word	0x50040300
 8006ee8:	50040000 	.word	0x50040000
 8006eec:	c7520000 	.word	0xc7520000
 8006ef0:	20000078 	.word	0x20000078
 8006ef4:	053e2d63 	.word	0x053e2d63
 8006ef8:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <HAL_ADC_ConfigChannel+0x668>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d126      	bne.n	8006f54 <HAL_ADC_ConfigChannel+0x654>
 8006f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d120      	bne.n	8006f54 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <HAL_ADC_ConfigChannel+0x66c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d11b      	bne.n	8006f54 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f24:	4619      	mov	r1, r3
 8006f26:	4812      	ldr	r0, [pc, #72]	; (8006f70 <HAL_ADC_ConfigChannel+0x670>)
 8006f28:	f7ff f8bf 	bl	80060aa <LL_ADC_SetCommonPathInternalCh>
 8006f2c:	e012      	b.n	8006f54 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f32:	f043 0220 	orr.w	r2, r3, #32
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006f40:	e008      	b.n	8006f54 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f46:	f043 0220 	orr.w	r2, r3, #32
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006f5c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3798      	adds	r7, #152	; 0x98
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	80000001 	.word	0x80000001
 8006f6c:	50040000 	.word	0x50040000
 8006f70:	50040300 	.word	0x50040300

08006f74 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff fa48 	bl	8006420 <LL_ADC_REG_IsConversionOngoing>
 8006f90:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff fa69 	bl	800646e <LL_ADC_INJ_IsConversionOngoing>
 8006f9c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d103      	bne.n	8006fac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8090 	beq.w	80070cc <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d02a      	beq.n	8007010 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7e5b      	ldrb	r3, [r3, #25]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d126      	bne.n	8007010 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	7e1b      	ldrb	r3, [r3, #24]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d122      	bne.n	8007010 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006fce:	e014      	b.n	8006ffa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4a41      	ldr	r2, [pc, #260]	; (80070d8 <ADC_ConversionStop+0x164>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d90d      	bls.n	8006ff4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fdc:	f043 0210 	orr.w	r2, r3, #16
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe8:	f043 0201 	orr.w	r2, r3, #1
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e06c      	b.n	80070ce <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007004:	2b40      	cmp	r3, #64	; 0x40
 8007006:	d1e3      	bne.n	8006fd0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2240      	movs	r2, #64	; 0x40
 800700e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d014      	beq.n	8007040 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff fa00 	bl	8006420 <LL_ADC_REG_IsConversionOngoing>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00c      	beq.n	8007040 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff f9bd 	bl	80063aa <LL_ADC_IsDisableOngoing>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d104      	bne.n	8007040 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff f9dc 	bl	80063f8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d014      	beq.n	8007070 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fa0f 	bl	800646e <LL_ADC_INJ_IsConversionOngoing>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00c      	beq.n	8007070 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff f9a5 	bl	80063aa <LL_ADC_IsDisableOngoing>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d104      	bne.n	8007070 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff f9eb 	bl	8006446 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d004      	beq.n	8007080 <ADC_ConversionStop+0x10c>
 8007076:	2b03      	cmp	r3, #3
 8007078:	d105      	bne.n	8007086 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800707a:	230c      	movs	r3, #12
 800707c:	617b      	str	r3, [r7, #20]
        break;
 800707e:	e005      	b.n	800708c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007080:	2308      	movs	r3, #8
 8007082:	617b      	str	r3, [r7, #20]
        break;
 8007084:	e002      	b.n	800708c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007086:	2304      	movs	r3, #4
 8007088:	617b      	str	r3, [r7, #20]
        break;
 800708a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800708c:	f7fe ffc0 	bl	8006010 <HAL_GetTick>
 8007090:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007092:	e014      	b.n	80070be <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007094:	f7fe ffbc 	bl	8006010 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b05      	cmp	r3, #5
 80070a0:	d90d      	bls.n	80070be <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a6:	f043 0210 	orr.w	r2, r3, #16
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b2:	f043 0201 	orr.w	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e007      	b.n	80070ce <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	4013      	ands	r3, r2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e3      	bne.n	8007094 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3720      	adds	r7, #32
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	a33fffff 	.word	0xa33fffff

080070dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff f94b 	bl	8006384 <LL_ADC_IsEnabled>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d146      	bne.n	8007182 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	4b24      	ldr	r3, [pc, #144]	; (800718c <ADC_Enable+0xb0>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00d      	beq.n	800711e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007106:	f043 0210 	orr.w	r2, r3, #16
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007112:	f043 0201 	orr.w	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e032      	b.n	8007184 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff f906 	bl	8006334 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007128:	f7fe ff72 	bl	8006010 <HAL_GetTick>
 800712c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800712e:	e021      	b.n	8007174 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff f925 	bl	8006384 <LL_ADC_IsEnabled>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff f8f5 	bl	8006334 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800714a:	f7fe ff61 	bl	8006010 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d90d      	bls.n	8007174 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715c:	f043 0210 	orr.w	r2, r3, #16
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007168:	f043 0201 	orr.w	r2, r3, #1
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e007      	b.n	8007184 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b01      	cmp	r3, #1
 8007180:	d1d6      	bne.n	8007130 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	8000003f 	.word	0x8000003f

08007190 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff f904 	bl	80063aa <LL_ADC_IsDisableOngoing>
 80071a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff f8eb 	bl	8006384 <LL_ADC_IsEnabled>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d040      	beq.n	8007236 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d13d      	bne.n	8007236 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 030d 	and.w	r3, r3, #13
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d10c      	bne.n	80071e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff f8c5 	bl	800635c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2203      	movs	r2, #3
 80071d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80071da:	f7fe ff19 	bl	8006010 <HAL_GetTick>
 80071de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80071e0:	e022      	b.n	8007228 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	f043 0210 	orr.w	r2, r3, #16
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f2:	f043 0201 	orr.w	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e01c      	b.n	8007238 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80071fe:	f7fe ff07 	bl	8006010 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d90d      	bls.n	8007228 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007210:	f043 0210 	orr.w	r2, r3, #16
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721c:	f043 0201 	orr.w	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e007      	b.n	8007238 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e3      	bne.n	80071fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007252:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007256:	2b00      	cmp	r3, #0
 8007258:	d14b      	bne.n	80072f2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b00      	cmp	r3, #0
 8007272:	d021      	beq.n	80072b8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe ff85 	bl	8006188 <LL_ADC_REG_IsTriggerSourceSWStart>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d032      	beq.n	80072ea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d12b      	bne.n	80072ea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d11f      	bne.n	80072ea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ae:	f043 0201 	orr.w	r2, r3, #1
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	655a      	str	r2, [r3, #84]	; 0x54
 80072b6:	e018      	b.n	80072ea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d111      	bne.n	80072ea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d105      	bne.n	80072ea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f043 0201 	orr.w	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f7fa fa7e 	bl	80017ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80072f0:	e00e      	b.n	8007310 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff faf3 	bl	80068ea <HAL_ADC_ErrorCallback>
}
 8007304:	e004      	b.n	8007310 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
}
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007324:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f7fa fa78 	bl	800181c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800732c:	bf00      	nop
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007340:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007346:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007352:	f043 0204 	orr.w	r2, r3, #4
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fac5 	bl	80068ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <LL_EXTI_EnableIT_0_31>:
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007370:	4b06      	ldr	r3, [pc, #24]	; (800738c <LL_EXTI_EnableIT_0_31+0x24>)
 8007372:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007376:	4905      	ldr	r1, [pc, #20]	; (800738c <LL_EXTI_EnableIT_0_31+0x24>)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	58000800 	.word	0x58000800

08007390 <LL_EXTI_DisableIT_0_31>:
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007398:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <LL_EXTI_DisableIT_0_31+0x28>)
 800739a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	4905      	ldr	r1, [pc, #20]	; (80073b8 <LL_EXTI_DisableIT_0_31+0x28>)
 80073a4:	4013      	ands	r3, r2
 80073a6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	58000800 	.word	0x58000800

080073bc <LL_EXTI_EnableEvent_0_31>:
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80073c4:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <LL_EXTI_EnableEvent_0_31+0x24>)
 80073c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80073ca:	4905      	ldr	r1, [pc, #20]	; (80073e0 <LL_EXTI_EnableEvent_0_31+0x24>)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	58000800 	.word	0x58000800

080073e4 <LL_EXTI_DisableEvent_0_31>:
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80073ec:	4b07      	ldr	r3, [pc, #28]	; (800740c <LL_EXTI_DisableEvent_0_31+0x28>)
 80073ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	43db      	mvns	r3, r3
 80073f6:	4905      	ldr	r1, [pc, #20]	; (800740c <LL_EXTI_DisableEvent_0_31+0x28>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	58000800 	.word	0x58000800

08007410 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007418:	4b05      	ldr	r3, [pc, #20]	; (8007430 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	4904      	ldr	r1, [pc, #16]	; (8007430 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4313      	orrs	r3, r2
 8007422:	600b      	str	r3, [r1, #0]
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	58000800 	.word	0x58000800

08007434 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800743c:	4b06      	ldr	r3, [pc, #24]	; (8007458 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	43db      	mvns	r3, r3
 8007444:	4904      	ldr	r1, [pc, #16]	; (8007458 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007446:	4013      	ands	r3, r2
 8007448:	600b      	str	r3, [r1, #0]

}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	58000800 	.word	0x58000800

0800745c <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007464:	4b05      	ldr	r3, [pc, #20]	; (800747c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	4904      	ldr	r1, [pc, #16]	; (800747c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4313      	orrs	r3, r2
 800746e:	604b      	str	r3, [r1, #4]
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	58000800 	.word	0x58000800

08007480 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	43db      	mvns	r3, r3
 8007490:	4904      	ldr	r1, [pc, #16]	; (80074a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007492:	4013      	ands	r3, r2
 8007494:	604b      	str	r3, [r1, #4]
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	58000800 	.word	0x58000800

080074a8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80074b0:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4013      	ands	r3, r2
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d101      	bne.n	80074c2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	58000800 	.word	0x58000800

080074d4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80074dc:	4a04      	ldr	r2, [pc, #16]	; (80074f0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	60d3      	str	r3, [r2, #12]
}
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	58000800 	.word	0x58000800

080074f4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d102      	bne.n	8007510 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	77fb      	strb	r3, [r7, #31]
 800750e:	e0c4      	b.n	800769a <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800751a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800751e:	d102      	bne.n	8007526 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	77fb      	strb	r3, [r7, #31]
 8007524:	e0b9      	b.n	800769a <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7fa f9d5 	bl	80018f0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007550:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8007572:	4313      	orrs	r3, r2
 8007574:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	4b49      	ldr	r3, [pc, #292]	; (80076a4 <HAL_COMP_Init+0x1b0>)
 800757e:	4013      	ands	r3, r2
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6812      	ldr	r2, [r2, #0]
 8007584:	6979      	ldr	r1, [r7, #20]
 8007586:	430b      	orrs	r3, r1
 8007588:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007592:	d106      	bne.n	80075a2 <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007594:	4b44      	ldr	r3, [pc, #272]	; (80076a8 <HAL_COMP_Init+0x1b4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a43      	ldr	r2, [pc, #268]	; (80076a8 <HAL_COMP_Init+0x1b4>)
 800759a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	e005      	b.n	80075ae <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80075a2:	4b41      	ldr	r3, [pc, #260]	; (80076a8 <HAL_COMP_Init+0x1b4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a40      	ldr	r2, [pc, #256]	; (80076a8 <HAL_COMP_Init+0x1b4>)
 80075a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075ac:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d015      	beq.n	80075e8 <HAL_COMP_Init+0xf4>
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d112      	bne.n	80075e8 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80075c2:	4b3a      	ldr	r3, [pc, #232]	; (80076ac <HAL_COMP_Init+0x1b8>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	099b      	lsrs	r3, r3, #6
 80075c8:	4a39      	ldr	r2, [pc, #228]	; (80076b0 <HAL_COMP_Init+0x1bc>)
 80075ca:	fba2 2303 	umull	r2, r3, r2, r3
 80075ce:	099a      	lsrs	r2, r3, #6
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80075da:	e002      	b.n	80075e2 <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3b01      	subs	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1f9      	bne.n	80075dc <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a31      	ldr	r2, [pc, #196]	; (80076b4 <HAL_COMP_Init+0x1c0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d102      	bne.n	80075f8 <HAL_COMP_Init+0x104>
 80075f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80075f6:	e001      	b.n	80075fc <HAL_COMP_Init+0x108>
 80075f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80075fc:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d037      	beq.n	800767a <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007616:	6938      	ldr	r0, [r7, #16]
 8007618:	f7ff fefa 	bl	8007410 <LL_EXTI_EnableRisingTrig_0_31>
 800761c:	e002      	b.n	8007624 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800761e:	6938      	ldr	r0, [r7, #16]
 8007620:	f7ff ff08 	bl	8007434 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	f003 0320 	and.w	r3, r3, #32
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007630:	6938      	ldr	r0, [r7, #16]
 8007632:	f7ff ff13 	bl	800745c <LL_EXTI_EnableFallingTrig_0_31>
 8007636:	e002      	b.n	800763e <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007638:	6938      	ldr	r0, [r7, #16]
 800763a:	f7ff ff21 	bl	8007480 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800763e:	6938      	ldr	r0, [r7, #16]
 8007640:	f7ff ff48 	bl	80074d4 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007650:	6938      	ldr	r0, [r7, #16]
 8007652:	f7ff feb3 	bl	80073bc <LL_EXTI_EnableEvent_0_31>
 8007656:	e002      	b.n	800765e <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007658:	6938      	ldr	r0, [r7, #16]
 800765a:	f7ff fec3 	bl	80073e4 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800766a:	6938      	ldr	r0, [r7, #16]
 800766c:	f7ff fe7c 	bl	8007368 <LL_EXTI_EnableIT_0_31>
 8007670:	e009      	b.n	8007686 <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007672:	6938      	ldr	r0, [r7, #16]
 8007674:	f7ff fe8c 	bl	8007390 <LL_EXTI_DisableIT_0_31>
 8007678:	e005      	b.n	8007686 <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800767a:	6938      	ldr	r0, [r7, #16]
 800767c:	f7ff feb2 	bl	80073e4 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007680:	6938      	ldr	r0, [r7, #16]
 8007682:	f7ff fe85 	bl	8007390 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d103      	bne.n	800769a <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800769a:	7ffb      	ldrb	r3, [r7, #31]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3720      	adds	r7, #32
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	f9207c03 	.word	0xf9207c03
 80076a8:	40010204 	.word	0x40010204
 80076ac:	20000078 	.word	0x20000078
 80076b0:	053e2d63 	.word	0x053e2d63
 80076b4:	40010200 	.word	0x40010200

080076b8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	73fb      	strb	r3, [r7, #15]
 80076d2:	e02f      	b.n	8007734 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076e2:	d102      	bne.n	80076ea <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
 80076e8:	e024      	b.n	8007734 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d11c      	bne.n	8007730 <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0201 	orr.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800770e:	4b0d      	ldr	r3, [pc, #52]	; (8007744 <HAL_COMP_Start+0x8c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	099b      	lsrs	r3, r3, #6
 8007714:	4a0c      	ldr	r2, [pc, #48]	; (8007748 <HAL_COMP_Start+0x90>)
 8007716:	fba2 2303 	umull	r2, r3, r2, r3
 800771a:	099b      	lsrs	r3, r3, #6
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007720:	e002      	b.n	8007728 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	3b01      	subs	r3, #1
 8007726:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1f9      	bne.n	8007722 <HAL_COMP_Start+0x6a>
 800772e:	e001      	b.n	8007734 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	20000078 	.word	0x20000078
 8007748:	053e2d63 	.word	0x053e2d63

0800774c <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d102      	bne.n	8007764 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	73fb      	strb	r3, [r7, #15]
 8007762:	e01f      	b.n	80077a4 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800776e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007772:	d102      	bne.n	800777a <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
 8007778:	e014      	b.n	80077a4 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00c      	beq.n	80077a0 <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800779e:	e001      	b.n	80077a4 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
	...

080077b4 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a11      	ldr	r2, [pc, #68]	; (8007808 <HAL_COMP_IRQHandler+0x54>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d102      	bne.n	80077cc <HAL_COMP_IRQHandler+0x18>
 80077c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80077ca:	e001      	b.n	80077d0 <HAL_COMP_IRQHandler+0x1c>
 80077cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7ff fe68 	bl	80074a8 <LL_EXTI_IsActiveFlag_0_31>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d010      	beq.n	8007800 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 80077de:	4b0b      	ldr	r3, [pc, #44]	; (800780c <HAL_COMP_IRQHandler+0x58>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d004      	beq.n	80077f4 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 80077ea:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80077ee:	f7ff fe71 	bl	80074d4 <LL_EXTI_ClearFlag_0_31>
 80077f2:	e002      	b.n	80077fa <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f7ff fe6d 	bl	80074d4 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fd ff68 	bl	80056d0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8007800:	bf00      	nop
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	40010200 	.word	0x40010200
 800780c:	40010204 	.word	0x40010204

08007810 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	0f9b      	lsrs	r3, r3, #30
 8007820:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <__NVIC_SetPriorityGrouping+0x44>)
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800784c:	4013      	ands	r3, r2
 800784e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800785c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007862:	4a04      	ldr	r2, [pc, #16]	; (8007874 <__NVIC_SetPriorityGrouping+0x44>)
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	60d3      	str	r3, [r2, #12]
}
 8007868:	bf00      	nop
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	e000ed00 	.word	0xe000ed00

08007878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007878:	b480      	push	{r7}
 800787a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800787c:	4b04      	ldr	r3, [pc, #16]	; (8007890 <__NVIC_GetPriorityGrouping+0x18>)
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	0a1b      	lsrs	r3, r3, #8
 8007882:	f003 0307 	and.w	r3, r3, #7
}
 8007886:	4618      	mov	r0, r3
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	e000ed00 	.word	0xe000ed00

08007894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800789e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	db0b      	blt.n	80078be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	f003 021f 	and.w	r2, r3, #31
 80078ac:	4907      	ldr	r1, [pc, #28]	; (80078cc <__NVIC_EnableIRQ+0x38>)
 80078ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	2001      	movs	r0, #1
 80078b6:	fa00 f202 	lsl.w	r2, r0, r2
 80078ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	e000e100 	.word	0xe000e100

080078d0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	db0c      	blt.n	80078fc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	f003 021f 	and.w	r2, r3, #31
 80078e8:	4907      	ldr	r1, [pc, #28]	; (8007908 <__NVIC_SetPendingIRQ+0x38>)
 80078ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ee:	095b      	lsrs	r3, r3, #5
 80078f0:	2001      	movs	r0, #1
 80078f2:	fa00 f202 	lsl.w	r2, r0, r2
 80078f6:	3340      	adds	r3, #64	; 0x40
 80078f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	e000e100 	.word	0xe000e100

0800790c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800791a:	2b00      	cmp	r3, #0
 800791c:	db0c      	blt.n	8007938 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	f003 021f 	and.w	r2, r3, #31
 8007924:	4907      	ldr	r1, [pc, #28]	; (8007944 <__NVIC_ClearPendingIRQ+0x38>)
 8007926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800792a:	095b      	lsrs	r3, r3, #5
 800792c:	2001      	movs	r0, #1
 800792e:	fa00 f202 	lsl.w	r2, r0, r2
 8007932:	3360      	adds	r3, #96	; 0x60
 8007934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	e000e100 	.word	0xe000e100

08007948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	6039      	str	r1, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007958:	2b00      	cmp	r3, #0
 800795a:	db0a      	blt.n	8007972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	b2da      	uxtb	r2, r3
 8007960:	490c      	ldr	r1, [pc, #48]	; (8007994 <__NVIC_SetPriority+0x4c>)
 8007962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007966:	0112      	lsls	r2, r2, #4
 8007968:	b2d2      	uxtb	r2, r2
 800796a:	440b      	add	r3, r1
 800796c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007970:	e00a      	b.n	8007988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	b2da      	uxtb	r2, r3
 8007976:	4908      	ldr	r1, [pc, #32]	; (8007998 <__NVIC_SetPriority+0x50>)
 8007978:	79fb      	ldrb	r3, [r7, #7]
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	3b04      	subs	r3, #4
 8007980:	0112      	lsls	r2, r2, #4
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	440b      	add	r3, r1
 8007986:	761a      	strb	r2, [r3, #24]
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	e000e100 	.word	0xe000e100
 8007998:	e000ed00 	.word	0xe000ed00

0800799c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800799c:	b480      	push	{r7}
 800799e:	b089      	sub	sp, #36	; 0x24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	f1c3 0307 	rsb	r3, r3, #7
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	bf28      	it	cs
 80079ba:	2304      	movcs	r3, #4
 80079bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	3304      	adds	r3, #4
 80079c2:	2b06      	cmp	r3, #6
 80079c4:	d902      	bls.n	80079cc <NVIC_EncodePriority+0x30>
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	3b03      	subs	r3, #3
 80079ca:	e000      	b.n	80079ce <NVIC_EncodePriority+0x32>
 80079cc:	2300      	movs	r3, #0
 80079ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079d0:	f04f 32ff 	mov.w	r2, #4294967295
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	fa02 f303 	lsl.w	r3, r2, r3
 80079da:	43da      	mvns	r2, r3
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	401a      	ands	r2, r3
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079e4:	f04f 31ff 	mov.w	r1, #4294967295
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	fa01 f303 	lsl.w	r3, r1, r3
 80079ee:	43d9      	mvns	r1, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079f4:	4313      	orrs	r3, r2
         );
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3724      	adds	r7, #36	; 0x24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
	...

08007a04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007a08:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <__NVIC_SystemReset+0x20>)
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007a14:	4903      	ldr	r1, [pc, #12]	; (8007a24 <__NVIC_SystemReset+0x20>)
 8007a16:	4b04      	ldr	r3, [pc, #16]	; (8007a28 <__NVIC_SystemReset+0x24>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60cb      	str	r3, [r1, #12]
 8007a1c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007a20:	bf00      	nop
 8007a22:	e7fd      	b.n	8007a20 <__NVIC_SystemReset+0x1c>
 8007a24:	e000ed00 	.word	0xe000ed00
 8007a28:	05fa0004 	.word	0x05fa0004

08007a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fefb 	bl	8007830 <__NVIC_SetPriorityGrouping>
}
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b086      	sub	sp, #24
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	4603      	mov	r3, r0
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
 8007a4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007a50:	f7ff ff12 	bl	8007878 <__NVIC_GetPriorityGrouping>
 8007a54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	68b9      	ldr	r1, [r7, #8]
 8007a5a:	6978      	ldr	r0, [r7, #20]
 8007a5c:	f7ff ff9e 	bl	800799c <NVIC_EncodePriority>
 8007a60:	4602      	mov	r2, r0
 8007a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff ff6d 	bl	8007948 <__NVIC_SetPriority>
}
 8007a6e:	bf00      	nop
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff ff05 	bl	8007894 <__NVIC_EnableIRQ>
}
 8007a8a:	bf00      	nop
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007a96:	f7ff ffb5 	bl	8007a04 <__NVIC_SystemReset>

08007a9a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff ff11 	bl	80078d0 <__NVIC_SetPendingIRQ>
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	4603      	mov	r3, r0
 8007abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff ff21 	bl	800790c <__NVIC_ClearPendingIRQ>
}
 8007aca:	bf00      	nop
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e08d      	b.n	8007c02 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	4b47      	ldr	r3, [pc, #284]	; (8007c0c <HAL_DMA_Init+0x138>)
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d80f      	bhi.n	8007b12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	4b45      	ldr	r3, [pc, #276]	; (8007c10 <HAL_DMA_Init+0x13c>)
 8007afa:	4413      	add	r3, r2
 8007afc:	4a45      	ldr	r2, [pc, #276]	; (8007c14 <HAL_DMA_Init+0x140>)
 8007afe:	fba2 2303 	umull	r2, r3, r2, r3
 8007b02:	091b      	lsrs	r3, r3, #4
 8007b04:	009a      	lsls	r2, r3, #2
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a42      	ldr	r2, [pc, #264]	; (8007c18 <HAL_DMA_Init+0x144>)
 8007b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8007b10:	e00e      	b.n	8007b30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	4b40      	ldr	r3, [pc, #256]	; (8007c1c <HAL_DMA_Init+0x148>)
 8007b1a:	4413      	add	r3, r2
 8007b1c:	4a3d      	ldr	r2, [pc, #244]	; (8007c14 <HAL_DMA_Init+0x140>)
 8007b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b22:	091b      	lsrs	r3, r3, #4
 8007b24:	009a      	lsls	r2, r3, #2
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a3c      	ldr	r2, [pc, #240]	; (8007c20 <HAL_DMA_Init+0x14c>)
 8007b2e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa82 	bl	800808c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b90:	d102      	bne.n	8007b98 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba0:	b2d2      	uxtb	r2, r2
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007bac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d010      	beq.n	8007bd8 <HAL_DMA_Init+0x104>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d80c      	bhi.n	8007bd8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 faa2 	bl	8008108 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007bd4:	605a      	str	r2, [r3, #4]
 8007bd6:	e008      	b.n	8007bea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	40020407 	.word	0x40020407
 8007c10:	bffdfff8 	.word	0xbffdfff8
 8007c14:	cccccccd 	.word	0xcccccccd
 8007c18:	40020000 	.word	0x40020000
 8007c1c:	bffdfbf8 	.word	0xbffdfbf8
 8007c20:	40020400 	.word	0x40020400

08007c24 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d101      	bne.n	8007c44 <HAL_DMA_Start_IT+0x20>
 8007c40:	2302      	movs	r3, #2
 8007c42:	e066      	b.n	8007d12 <HAL_DMA_Start_IT+0xee>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d155      	bne.n	8007d04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0201 	bic.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 f9c7 	bl	8008010 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d008      	beq.n	8007c9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f042 020e 	orr.w	r2, r2, #14
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	e00f      	b.n	8007cbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0204 	bic.w	r2, r2, #4
 8007caa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 020a 	orr.w	r2, r2, #10
 8007cba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cd8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cf0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0201 	orr.w	r2, r2, #1
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	e005      	b.n	8007d10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e04f      	b.n	8007dcc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d008      	beq.n	8007d4a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e040      	b.n	8007dcc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 020e 	bic.w	r2, r2, #14
 8007d58:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0201 	bic.w	r2, r2, #1
 8007d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7e:	f003 021c 	and.w	r2, r3, #28
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	2101      	movs	r1, #1
 8007d88:	fa01 f202 	lsl.w	r2, r1, r2
 8007d8c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007d96:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00c      	beq.n	8007dba <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007db8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d005      	beq.n	8007dfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2204      	movs	r2, #4
 8007df4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	73fb      	strb	r3, [r7, #15]
 8007dfa:	e047      	b.n	8007e8c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 020e 	bic.w	r2, r2, #14
 8007e0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 0201 	bic.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e30:	f003 021c 	and.w	r2, r3, #28
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e38:	2101      	movs	r1, #1
 8007e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e3e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00c      	beq.n	8007e6c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007e6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	4798      	blx	r3
    }
  }
  return status;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb2:	f003 031c 	and.w	r3, r3, #28
 8007eb6:	2204      	movs	r2, #4
 8007eb8:	409a      	lsls	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d026      	beq.n	8007f10 <HAL_DMA_IRQHandler+0x7a>
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d021      	beq.n	8007f10 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d107      	bne.n	8007eea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0204 	bic.w	r2, r2, #4
 8007ee8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eee:	f003 021c 	and.w	r2, r3, #28
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	2104      	movs	r1, #4
 8007ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8007efc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d071      	beq.n	8007fea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007f0e:	e06c      	b.n	8007fea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f14:	f003 031c 	and.w	r3, r3, #28
 8007f18:	2202      	movs	r2, #2
 8007f1a:	409a      	lsls	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d02e      	beq.n	8007f82 <HAL_DMA_IRQHandler+0xec>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d029      	beq.n	8007f82 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10b      	bne.n	8007f54 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 020a 	bic.w	r2, r2, #10
 8007f4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f58:	f003 021c 	and.w	r2, r3, #28
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	2102      	movs	r1, #2
 8007f62:	fa01 f202 	lsl.w	r2, r1, r2
 8007f66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d038      	beq.n	8007fea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007f80:	e033      	b.n	8007fea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f86:	f003 031c 	and.w	r3, r3, #28
 8007f8a:	2208      	movs	r2, #8
 8007f8c:	409a      	lsls	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d02a      	beq.n	8007fec <HAL_DMA_IRQHandler+0x156>
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f003 0308 	and.w	r3, r3, #8
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d025      	beq.n	8007fec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 020e 	bic.w	r2, r2, #14
 8007fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb4:	f003 021c 	and.w	r2, r3, #28
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8007fc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d004      	beq.n	8007fec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007fea:	bf00      	nop
 8007fec:	bf00      	nop
}
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008002:	b2db      	uxtb	r3, r3
}
 8008004:	4618      	mov	r0, r3
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008026:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008038:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	f003 021c 	and.w	r2, r3, #28
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	2101      	movs	r1, #1
 8008048:	fa01 f202 	lsl.w	r2, r1, r2
 800804c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	2b10      	cmp	r3, #16
 800805c:	d108      	bne.n	8008070 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800806e:	e007      	b.n	8008080 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	60da      	str	r2, [r3, #12]
}
 8008080:	bf00      	nop
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	4b17      	ldr	r3, [pc, #92]	; (80080f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800809c:	429a      	cmp	r2, r3
 800809e:	d80a      	bhi.n	80080b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a4:	089b      	lsrs	r3, r3, #2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080ac:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	6493      	str	r3, [r2, #72]	; 0x48
 80080b4:	e007      	b.n	80080c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ba:	089b      	lsrs	r3, r3, #2
 80080bc:	009a      	lsls	r2, r3, #2
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80080c0:	4413      	add	r3, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	3b08      	subs	r3, #8
 80080ce:	4a0c      	ldr	r2, [pc, #48]	; (8008100 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80080d0:	fba2 2303 	umull	r2, r3, r2, r3
 80080d4:	091b      	lsrs	r3, r3, #4
 80080d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a0a      	ldr	r2, [pc, #40]	; (8008104 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80080dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f003 031c 	and.w	r3, r3, #28
 80080e4:	2201      	movs	r2, #1
 80080e6:	409a      	lsls	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80080ec:	bf00      	nop
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	40020407 	.word	0x40020407
 80080fc:	4002081c 	.word	0x4002081c
 8008100:	cccccccd 	.word	0xcccccccd
 8008104:	40020880 	.word	0x40020880

08008108 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	461a      	mov	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a08      	ldr	r2, [pc, #32]	; (800814c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800812a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3b01      	subs	r3, #1
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	2201      	movs	r2, #1
 8008136:	409a      	lsls	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	1000823f 	.word	0x1000823f
 800814c:	40020940 	.word	0x40020940

08008150 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800815e:	e14c      	b.n	80083fa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	2101      	movs	r1, #1
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	fa01 f303 	lsl.w	r3, r1, r3
 800816c:	4013      	ands	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 813e 	beq.w	80083f4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d00b      	beq.n	8008198 <HAL_GPIO_Init+0x48>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d007      	beq.n	8008198 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800818c:	2b11      	cmp	r3, #17
 800818e:	d003      	beq.n	8008198 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	2b12      	cmp	r3, #18
 8008196:	d130      	bne.n	80081fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	2203      	movs	r2, #3
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	43db      	mvns	r3, r3
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4013      	ands	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081ce:	2201      	movs	r2, #1
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	fa02 f303 	lsl.w	r3, r2, r3
 80081d6:	43db      	mvns	r3, r3
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	4013      	ands	r3, r2
 80081dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	091b      	lsrs	r3, r3, #4
 80081e4:	f003 0201 	and.w	r2, r3, #1
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	fa02 f303 	lsl.w	r3, r2, r3
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	2203      	movs	r2, #3
 8008206:	fa02 f303 	lsl.w	r3, r2, r3
 800820a:	43db      	mvns	r3, r3
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	4013      	ands	r3, r2
 8008210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	fa02 f303 	lsl.w	r3, r2, r3
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d003      	beq.n	800823a <HAL_GPIO_Init+0xea>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2b12      	cmp	r3, #18
 8008238:	d123      	bne.n	8008282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	08da      	lsrs	r2, r3, #3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3208      	adds	r2, #8
 8008242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f003 0307 	and.w	r3, r3, #7
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	220f      	movs	r2, #15
 8008252:	fa02 f303 	lsl.w	r3, r2, r3
 8008256:	43db      	mvns	r3, r3
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4013      	ands	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	691a      	ldr	r2, [r3, #16]
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	fa02 f303 	lsl.w	r3, r2, r3
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	4313      	orrs	r3, r2
 8008272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	08da      	lsrs	r2, r3, #3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3208      	adds	r2, #8
 800827c:	6939      	ldr	r1, [r7, #16]
 800827e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	005b      	lsls	r3, r3, #1
 800828c:	2203      	movs	r2, #3
 800828e:	fa02 f303 	lsl.w	r3, r2, r3
 8008292:	43db      	mvns	r3, r3
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4013      	ands	r3, r2
 8008298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f003 0203 	and.w	r2, r3, #3
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	fa02 f303 	lsl.w	r3, r2, r3
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 8098 	beq.w	80083f4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80082c4:	4a54      	ldr	r2, [pc, #336]	; (8008418 <HAL_GPIO_Init+0x2c8>)
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	089b      	lsrs	r3, r3, #2
 80082ca:	3302      	adds	r3, #2
 80082cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f003 0303 	and.w	r3, r3, #3
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	220f      	movs	r2, #15
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	43db      	mvns	r3, r3
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	4013      	ands	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80082ee:	d019      	beq.n	8008324 <HAL_GPIO_Init+0x1d4>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a4a      	ldr	r2, [pc, #296]	; (800841c <HAL_GPIO_Init+0x2cc>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d013      	beq.n	8008320 <HAL_GPIO_Init+0x1d0>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a49      	ldr	r2, [pc, #292]	; (8008420 <HAL_GPIO_Init+0x2d0>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00d      	beq.n	800831c <HAL_GPIO_Init+0x1cc>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a48      	ldr	r2, [pc, #288]	; (8008424 <HAL_GPIO_Init+0x2d4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d007      	beq.n	8008318 <HAL_GPIO_Init+0x1c8>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a47      	ldr	r2, [pc, #284]	; (8008428 <HAL_GPIO_Init+0x2d8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d101      	bne.n	8008314 <HAL_GPIO_Init+0x1c4>
 8008310:	2304      	movs	r3, #4
 8008312:	e008      	b.n	8008326 <HAL_GPIO_Init+0x1d6>
 8008314:	2307      	movs	r3, #7
 8008316:	e006      	b.n	8008326 <HAL_GPIO_Init+0x1d6>
 8008318:	2303      	movs	r3, #3
 800831a:	e004      	b.n	8008326 <HAL_GPIO_Init+0x1d6>
 800831c:	2302      	movs	r3, #2
 800831e:	e002      	b.n	8008326 <HAL_GPIO_Init+0x1d6>
 8008320:	2301      	movs	r3, #1
 8008322:	e000      	b.n	8008326 <HAL_GPIO_Init+0x1d6>
 8008324:	2300      	movs	r3, #0
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	f002 0203 	and.w	r2, r2, #3
 800832c:	0092      	lsls	r2, r2, #2
 800832e:	4093      	lsls	r3, r2
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4313      	orrs	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008336:	4938      	ldr	r1, [pc, #224]	; (8008418 <HAL_GPIO_Init+0x2c8>)
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	089b      	lsrs	r3, r3, #2
 800833c:	3302      	adds	r3, #2
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008344:	4b39      	ldr	r3, [pc, #228]	; (800842c <HAL_GPIO_Init+0x2dc>)
 8008346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800834a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	43db      	mvns	r3, r3
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	4013      	ands	r3, r2
 8008354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800836a:	4a30      	ldr	r2, [pc, #192]	; (800842c <HAL_GPIO_Init+0x2dc>)
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008372:	4b2e      	ldr	r3, [pc, #184]	; (800842c <HAL_GPIO_Init+0x2dc>)
 8008374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	43db      	mvns	r3, r3
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	4013      	ands	r3, r2
 8008382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008398:	4a24      	ldr	r2, [pc, #144]	; (800842c <HAL_GPIO_Init+0x2dc>)
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083a0:	4b22      	ldr	r3, [pc, #136]	; (800842c <HAL_GPIO_Init+0x2dc>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	43db      	mvns	r3, r3
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4013      	ands	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80083c4:	4a19      	ldr	r2, [pc, #100]	; (800842c <HAL_GPIO_Init+0x2dc>)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80083ca:	4b18      	ldr	r3, [pc, #96]	; (800842c <HAL_GPIO_Init+0x2dc>)
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	43db      	mvns	r3, r3
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	4013      	ands	r3, r2
 80083d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80083ee:	4a0f      	ldr	r2, [pc, #60]	; (800842c <HAL_GPIO_Init+0x2dc>)
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	3301      	adds	r3, #1
 80083f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	fa22 f303 	lsr.w	r3, r2, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	f47f aeab 	bne.w	8008160 <HAL_GPIO_Init+0x10>
  }
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	40010000 	.word	0x40010000
 800841c:	48000400 	.word	0x48000400
 8008420:	48000800 	.word	0x48000800
 8008424:	48000c00 	.word	0x48000c00
 8008428:	48001000 	.word	0x48001000
 800842c:	58000800 	.word	0x58000800

08008430 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691a      	ldr	r2, [r3, #16]
 8008440:	887b      	ldrh	r3, [r7, #2]
 8008442:	4013      	ands	r3, r2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008448:	2301      	movs	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
 800844c:	e001      	b.n	8008452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	807b      	strh	r3, [r7, #2]
 800846c:	4613      	mov	r3, r2
 800846e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008470:	787b      	ldrb	r3, [r7, #1]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008476:	887a      	ldrh	r2, [r7, #2]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800847c:	e002      	b.n	8008484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800847e:	887a      	ldrh	r2, [r7, #2]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800849a:	4b08      	ldr	r3, [pc, #32]	; (80084bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	88fb      	ldrh	r3, [r7, #6]
 80084a0:	4013      	ands	r3, r2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d006      	beq.n	80084b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80084a6:	4a05      	ldr	r2, [pc, #20]	; (80084bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80084a8:	88fb      	ldrh	r3, [r7, #6]
 80084aa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80084ac:	88fb      	ldrh	r3, [r7, #6]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fa fe66 	bl	8003180 <HAL_GPIO_EXTI_Callback>
  }
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	58000800 	.word	0x58000800

080084c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e081      	b.n	80085d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d106      	bne.n	80084ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7fa fd8c 	bl	8003004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2224      	movs	r2, #36	; 0x24
 80084f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0201 	bic.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008510:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008520:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d107      	bne.n	800853a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689a      	ldr	r2, [r3, #8]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008536:	609a      	str	r2, [r3, #8]
 8008538:	e006      	b.n	8008548 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008546:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	2b02      	cmp	r3, #2
 800854e:	d104      	bne.n	800855a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008558:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6812      	ldr	r2, [r2, #0]
 8008564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800856c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800857c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691a      	ldr	r2, [r3, #16]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	ea42 0103 	orr.w	r1, r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	021a      	lsls	r2, r3, #8
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	69d9      	ldr	r1, [r3, #28]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1a      	ldr	r2, [r3, #32]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0201 	orr.w	r2, r2, #1
 80085b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af02      	add	r7, sp, #8
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	607a      	str	r2, [r7, #4]
 80085ea:	461a      	mov	r2, r3
 80085ec:	460b      	mov	r3, r1
 80085ee:	817b      	strh	r3, [r7, #10]
 80085f0:	4613      	mov	r3, r2
 80085f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	f040 80da 	bne.w	80087b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008608:	2b01      	cmp	r3, #1
 800860a:	d101      	bne.n	8008610 <HAL_I2C_Master_Transmit+0x30>
 800860c:	2302      	movs	r3, #2
 800860e:	e0d3      	b.n	80087b8 <HAL_I2C_Master_Transmit+0x1d8>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008618:	f7fd fcfa 	bl	8006010 <HAL_GetTick>
 800861c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	2319      	movs	r3, #25
 8008624:	2201      	movs	r2, #1
 8008626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f001 fc8b 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e0be      	b.n	80087b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2221      	movs	r2, #33	; 0x21
 800863e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2210      	movs	r2, #16
 8008646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	893a      	ldrh	r2, [r7, #8]
 800865a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008666:	b29b      	uxth	r3, r3
 8008668:	2bff      	cmp	r3, #255	; 0xff
 800866a:	d90e      	bls.n	800868a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	22ff      	movs	r2, #255	; 0xff
 8008670:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008676:	b2da      	uxtb	r2, r3
 8008678:	8979      	ldrh	r1, [r7, #10]
 800867a:	4b51      	ldr	r3, [pc, #324]	; (80087c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f001 fdee 	bl	800a264 <I2C_TransferConfig>
 8008688:	e06c      	b.n	8008764 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008698:	b2da      	uxtb	r2, r3
 800869a:	8979      	ldrh	r1, [r7, #10]
 800869c:	4b48      	ldr	r3, [pc, #288]	; (80087c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f001 fddd 	bl	800a264 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80086aa:	e05b      	b.n	8008764 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	6a39      	ldr	r1, [r7, #32]
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f001 fc88 	bl	8009fc6 <I2C_WaitOnTXISFlagUntilTimeout>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e07b      	b.n	80087b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	781a      	ldrb	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086da:	b29b      	uxth	r3, r3
 80086dc:	3b01      	subs	r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d034      	beq.n	8008764 <HAL_I2C_Master_Transmit+0x184>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d130      	bne.n	8008764 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	2200      	movs	r2, #0
 800870a:	2180      	movs	r1, #128	; 0x80
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f001 fc1a 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e04d      	b.n	80087b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008720:	b29b      	uxth	r3, r3
 8008722:	2bff      	cmp	r3, #255	; 0xff
 8008724:	d90e      	bls.n	8008744 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	22ff      	movs	r2, #255	; 0xff
 800872a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008730:	b2da      	uxtb	r2, r3
 8008732:	8979      	ldrh	r1, [r7, #10]
 8008734:	2300      	movs	r3, #0
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f001 fd91 	bl	800a264 <I2C_TransferConfig>
 8008742:	e00f      	b.n	8008764 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008748:	b29a      	uxth	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008752:	b2da      	uxtb	r2, r3
 8008754:	8979      	ldrh	r1, [r7, #10]
 8008756:	2300      	movs	r3, #0
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f001 fd80 	bl	800a264 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008768:	b29b      	uxth	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d19e      	bne.n	80086ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	6a39      	ldr	r1, [r7, #32]
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f001 fc67 	bl	800a046 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e01a      	b.n	80087b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2220      	movs	r2, #32
 8008788:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6859      	ldr	r1, [r3, #4]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8008796:	400b      	ands	r3, r1
 8008798:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2220      	movs	r2, #32
 800879e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	e000      	b.n	80087b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80087b6:	2302      	movs	r3, #2
  }
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	80002000 	.word	0x80002000
 80087c4:	fe00e800 	.word	0xfe00e800

080087c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	607a      	str	r2, [r7, #4]
 80087d2:	461a      	mov	r2, r3
 80087d4:	460b      	mov	r3, r1
 80087d6:	817b      	strh	r3, [r7, #10]
 80087d8:	4613      	mov	r3, r2
 80087da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b20      	cmp	r3, #32
 80087e6:	f040 80db 	bne.w	80089a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_I2C_Master_Receive+0x30>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e0d4      	b.n	80089a2 <HAL_I2C_Master_Receive+0x1da>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008800:	f7fd fc06 	bl	8006010 <HAL_GetTick>
 8008804:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	2319      	movs	r3, #25
 800880c:	2201      	movs	r2, #1
 800880e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f001 fb97 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e0bf      	b.n	80089a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2222      	movs	r2, #34	; 0x22
 8008826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2210      	movs	r2, #16
 800882e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	893a      	ldrh	r2, [r7, #8]
 8008842:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800884e:	b29b      	uxth	r3, r3
 8008850:	2bff      	cmp	r3, #255	; 0xff
 8008852:	d90e      	bls.n	8008872 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	22ff      	movs	r2, #255	; 0xff
 8008858:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800885e:	b2da      	uxtb	r2, r3
 8008860:	8979      	ldrh	r1, [r7, #10]
 8008862:	4b52      	ldr	r3, [pc, #328]	; (80089ac <HAL_I2C_Master_Receive+0x1e4>)
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f001 fcfa 	bl	800a264 <I2C_TransferConfig>
 8008870:	e06d      	b.n	800894e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008876:	b29a      	uxth	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008880:	b2da      	uxtb	r2, r3
 8008882:	8979      	ldrh	r1, [r7, #10]
 8008884:	4b49      	ldr	r3, [pc, #292]	; (80089ac <HAL_I2C_Master_Receive+0x1e4>)
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f001 fce9 	bl	800a264 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008892:	e05c      	b.n	800894e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	6a39      	ldr	r1, [r7, #32]
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f001 fc11 	bl	800a0c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e07c      	b.n	80089a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	3b01      	subs	r3, #1
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d034      	beq.n	800894e <HAL_I2C_Master_Receive+0x186>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d130      	bne.n	800894e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	2200      	movs	r2, #0
 80088f4:	2180      	movs	r1, #128	; 0x80
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f001 fb25 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e04d      	b.n	80089a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890a:	b29b      	uxth	r3, r3
 800890c:	2bff      	cmp	r3, #255	; 0xff
 800890e:	d90e      	bls.n	800892e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	22ff      	movs	r2, #255	; 0xff
 8008914:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891a:	b2da      	uxtb	r2, r3
 800891c:	8979      	ldrh	r1, [r7, #10]
 800891e:	2300      	movs	r3, #0
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f001 fc9c 	bl	800a264 <I2C_TransferConfig>
 800892c:	e00f      	b.n	800894e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008932:	b29a      	uxth	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800893c:	b2da      	uxtb	r2, r3
 800893e:	8979      	ldrh	r1, [r7, #10]
 8008940:	2300      	movs	r3, #0
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f001 fc8b 	bl	800a264 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008952:	b29b      	uxth	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d19d      	bne.n	8008894 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	6a39      	ldr	r1, [r7, #32]
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f001 fb72 	bl	800a046 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e01a      	b.n	80089a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2220      	movs	r2, #32
 8008972:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6859      	ldr	r1, [r3, #4]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4b0c      	ldr	r3, [pc, #48]	; (80089b0 <HAL_I2C_Master_Receive+0x1e8>)
 8008980:	400b      	ands	r3, r1
 8008982:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2220      	movs	r2, #32
 8008988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	e000      	b.n	80089a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80089a0:	2302      	movs	r3, #2
  }
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3718      	adds	r7, #24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	80002400 	.word	0x80002400
 80089b0:	fe00e800 	.word	0xfe00e800

080089b4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	607a      	str	r2, [r7, #4]
 80089be:	461a      	mov	r2, r3
 80089c0:	460b      	mov	r3, r1
 80089c2:	817b      	strh	r3, [r7, #10]
 80089c4:	4613      	mov	r3, r2
 80089c6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d153      	bne.n	8008a7c <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089e2:	d101      	bne.n	80089e8 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80089e4:	2302      	movs	r3, #2
 80089e6:	e04a      	b.n	8008a7e <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d101      	bne.n	80089f6 <HAL_I2C_Master_Receive_IT+0x42>
 80089f2:	2302      	movs	r3, #2
 80089f4:	e043      	b.n	8008a7e <HAL_I2C_Master_Receive_IT+0xca>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2222      	movs	r2, #34	; 0x22
 8008a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2210      	movs	r2, #16
 8008a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	893a      	ldrh	r2, [r7, #8]
 8008a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4a19      	ldr	r2, [pc, #100]	; (8008a88 <HAL_I2C_Master_Receive_IT+0xd4>)
 8008a24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	4a18      	ldr	r2, [pc, #96]	; (8008a8c <HAL_I2C_Master_Receive_IT+0xd8>)
 8008a2a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2bff      	cmp	r3, #255	; 0xff
 8008a34:	d906      	bls.n	8008a44 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	22ff      	movs	r2, #255	; 0xff
 8008a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	e007      	b.n	8008a54 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a52:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	8979      	ldrh	r1, [r7, #10]
 8008a5c:	4b0c      	ldr	r3, [pc, #48]	; (8008a90 <HAL_I2C_Master_Receive_IT+0xdc>)
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f001 fbfe 	bl	800a264 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008a70:	2102      	movs	r1, #2
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f001 fc24 	bl	800a2c0 <I2C_Enable_IRQ>

    return HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	e000      	b.n	8008a7e <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008a7c:	2302      	movs	r3, #2
  }
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	ffff0000 	.word	0xffff0000
 8008a8c:	08008d99 	.word	0x08008d99
 8008a90:	80002400 	.word	0x80002400

08008a94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af02      	add	r7, sp, #8
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	817b      	strh	r3, [r7, #10]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	813b      	strh	r3, [r7, #8]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	f040 80f9 	bne.w	8008cae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <HAL_I2C_Mem_Write+0x34>
 8008ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d105      	bne.n	8008ad4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ace:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e0ed      	b.n	8008cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d101      	bne.n	8008ae2 <HAL_I2C_Mem_Write+0x4e>
 8008ade:	2302      	movs	r3, #2
 8008ae0:	e0e6      	b.n	8008cb0 <HAL_I2C_Mem_Write+0x21c>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008aea:	f7fd fa91 	bl	8006010 <HAL_GetTick>
 8008aee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	2319      	movs	r3, #25
 8008af6:	2201      	movs	r2, #1
 8008af8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f001 fa22 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e0d1      	b.n	8008cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2221      	movs	r2, #33	; 0x21
 8008b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2240      	movs	r2, #64	; 0x40
 8008b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a3a      	ldr	r2, [r7, #32]
 8008b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b34:	88f8      	ldrh	r0, [r7, #6]
 8008b36:	893a      	ldrh	r2, [r7, #8]
 8008b38:	8979      	ldrh	r1, [r7, #10]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4603      	mov	r3, r0
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 fd27 	bl	8009598 <I2C_RequestMemoryWrite>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d005      	beq.n	8008b5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e0a9      	b.n	8008cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	2bff      	cmp	r3, #255	; 0xff
 8008b64:	d90e      	bls.n	8008b84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	22ff      	movs	r2, #255	; 0xff
 8008b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	8979      	ldrh	r1, [r7, #10]
 8008b74:	2300      	movs	r3, #0
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f001 fb71 	bl	800a264 <I2C_TransferConfig>
 8008b82:	e00f      	b.n	8008ba4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	8979      	ldrh	r1, [r7, #10]
 8008b96:	2300      	movs	r3, #0
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f001 fb60 	bl	800a264 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f001 fa0c 	bl	8009fc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e07b      	b.n	8008cb0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbc:	781a      	ldrb	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d034      	beq.n	8008c5c <HAL_I2C_Mem_Write+0x1c8>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d130      	bne.n	8008c5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	2200      	movs	r2, #0
 8008c02:	2180      	movs	r1, #128	; 0x80
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f001 f99e 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e04d      	b.n	8008cb0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	2bff      	cmp	r3, #255	; 0xff
 8008c1c:	d90e      	bls.n	8008c3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	22ff      	movs	r2, #255	; 0xff
 8008c22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	8979      	ldrh	r1, [r7, #10]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f001 fb15 	bl	800a264 <I2C_TransferConfig>
 8008c3a:	e00f      	b.n	8008c5c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	8979      	ldrh	r1, [r7, #10]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f001 fb04 	bl	800a264 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d19e      	bne.n	8008ba4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f001 f9eb 	bl	800a046 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e01a      	b.n	8008cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6859      	ldr	r1, [r3, #4]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <HAL_I2C_Mem_Write+0x224>)
 8008c8e:	400b      	ands	r3, r1
 8008c90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	e000      	b.n	8008cb0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008cae:	2302      	movs	r3, #2
  }
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	fe00e800 	.word	0xfe00e800

08008cbc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d005      	beq.n	8008ce8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	68f9      	ldr	r1, [r7, #12]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	4798      	blx	r3
  }
}
 8008ce8:	bf00      	nop
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
 8008d24:	4613      	mov	r3, r2
 8008d26:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af02      	add	r7, sp, #8
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d101      	bne.n	8008db6 <I2C_Master_ISR_IT+0x1e>
 8008db2:	2302      	movs	r3, #2
 8008db4:	e115      	b.n	8008fe2 <I2C_Master_ISR_IT+0x24a>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	091b      	lsrs	r3, r3, #4
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d013      	beq.n	8008df2 <I2C_Master_ISR_IT+0x5a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	091b      	lsrs	r3, r3, #4
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00d      	beq.n	8008df2 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2210      	movs	r2, #16
 8008ddc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de2:	f043 0204 	orr.w	r2, r3, #4
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f001 f869 	bl	8009ec2 <I2C_Flush_TXDR>
 8008df0:	e0e2      	b.n	8008fb8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	089b      	lsrs	r3, r3, #2
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d023      	beq.n	8008e46 <I2C_Master_ISR_IT+0xae>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	089b      	lsrs	r3, r3, #2
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d01d      	beq.n	8008e46 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f023 0304 	bic.w	r3, r3, #4
 8008e10:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	b2d2      	uxtb	r2, r2
 8008e1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e44:	e0b8      	b.n	8008fb8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	085b      	lsrs	r3, r3, #1
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d01e      	beq.n	8008e90 <I2C_Master_ISR_IT+0xf8>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	085b      	lsrs	r3, r3, #1
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d018      	beq.n	8008e90 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	781a      	ldrb	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	3b01      	subs	r3, #1
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e8e:	e093      	b.n	8008fb8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	09db      	lsrs	r3, r3, #7
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d05e      	beq.n	8008f5a <I2C_Master_ISR_IT+0x1c2>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	099b      	lsrs	r3, r3, #6
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d058      	beq.n	8008f5a <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d041      	beq.n	8008f36 <I2C_Master_ISR_IT+0x19e>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d13d      	bne.n	8008f36 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ec6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	2bff      	cmp	r3, #255	; 0xff
 8008ed0:	d90e      	bls.n	8008ef0 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	22ff      	movs	r2, #255	; 0xff
 8008ed6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	8a79      	ldrh	r1, [r7, #18]
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f001 f9bb 	bl	800a264 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008eee:	e033      	b.n	8008f58 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f02:	d00c      	beq.n	8008f1e <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008f0e:	8a79      	ldrh	r1, [r7, #18]
 8008f10:	2300      	movs	r3, #0
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	4603      	mov	r3, r0
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f001 f9a4 	bl	800a264 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f1c:	e01c      	b.n	8008f58 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	8a79      	ldrh	r1, [r7, #18]
 8008f26:	2300      	movs	r3, #0
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f001 f998 	bl	800a264 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f34:	e010      	b.n	8008f58 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f44:	d003      	beq.n	8008f4e <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 fbfe 	bl	8009748 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f4c:	e034      	b.n	8008fb8 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008f4e:	2140      	movs	r1, #64	; 0x40
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 febf 	bl	8009cd4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f56:	e02f      	b.n	8008fb8 <I2C_Master_ISR_IT+0x220>
 8008f58:	e02e      	b.n	8008fb8 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	099b      	lsrs	r3, r3, #6
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d028      	beq.n	8008fb8 <I2C_Master_ISR_IT+0x220>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	099b      	lsrs	r3, r3, #6
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d022      	beq.n	8008fb8 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d119      	bne.n	8008fb0 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f8a:	d015      	beq.n	8008fb8 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f94:	d108      	bne.n	8008fa8 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fa4:	605a      	str	r2, [r3, #4]
 8008fa6:	e007      	b.n	8008fb8 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 fbcd 	bl	8009748 <I2C_ITMasterSeqCplt>
 8008fae:	e003      	b.n	8008fb8 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008fb0:	2140      	movs	r1, #64	; 0x40
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 fe8e 	bl	8009cd4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	095b      	lsrs	r3, r3, #5
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d009      	beq.n	8008fd8 <I2C_Master_ISR_IT+0x240>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	095b      	lsrs	r3, r3, #5
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008fd0:	6979      	ldr	r1, [r7, #20]
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 fc54 	bl	8009880 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b086      	sub	sp, #24
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009006:	2b01      	cmp	r3, #1
 8009008:	d101      	bne.n	800900e <I2C_Slave_ISR_IT+0x24>
 800900a:	2302      	movs	r3, #2
 800900c:	e0ec      	b.n	80091e8 <I2C_Slave_ISR_IT+0x1fe>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	095b      	lsrs	r3, r3, #5
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d009      	beq.n	8009036 <I2C_Slave_ISR_IT+0x4c>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800902e:	6939      	ldr	r1, [r7, #16]
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fcef 	bl	8009a14 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	091b      	lsrs	r3, r3, #4
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d04d      	beq.n	80090de <I2C_Slave_ISR_IT+0xf4>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	091b      	lsrs	r3, r3, #4
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d047      	beq.n	80090de <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009052:	b29b      	uxth	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d128      	bne.n	80090aa <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b28      	cmp	r3, #40	; 0x28
 8009062:	d108      	bne.n	8009076 <I2C_Slave_ISR_IT+0x8c>
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800906a:	d104      	bne.n	8009076 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800906c:	6939      	ldr	r1, [r7, #16]
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 fdda 	bl	8009c28 <I2C_ITListenCplt>
 8009074:	e032      	b.n	80090dc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b29      	cmp	r3, #41	; 0x29
 8009080:	d10e      	bne.n	80090a0 <I2C_Slave_ISR_IT+0xb6>
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009088:	d00a      	beq.n	80090a0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2210      	movs	r2, #16
 8009090:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 ff15 	bl	8009ec2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 fb92 	bl	80097c2 <I2C_ITSlaveSeqCplt>
 800909e:	e01d      	b.n	80090dc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2210      	movs	r2, #16
 80090a6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80090a8:	e096      	b.n	80091d8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2210      	movs	r2, #16
 80090b0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b6:	f043 0204 	orr.w	r2, r3, #4
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d004      	beq.n	80090ce <I2C_Slave_ISR_IT+0xe4>
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090ca:	f040 8085 	bne.w	80091d8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d2:	4619      	mov	r1, r3
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 fdfd 	bl	8009cd4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80090da:	e07d      	b.n	80091d8 <I2C_Slave_ISR_IT+0x1ee>
 80090dc:	e07c      	b.n	80091d8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	089b      	lsrs	r3, r3, #2
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d030      	beq.n	800914c <I2C_Slave_ISR_IT+0x162>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	089b      	lsrs	r3, r3, #2
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d02a      	beq.n	800914c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d018      	beq.n	8009132 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	b2d2      	uxtb	r2, r2
 800910c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911c:	3b01      	subs	r3, #1
 800911e:	b29a      	uxth	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009128:	b29b      	uxth	r3, r3
 800912a:	3b01      	subs	r3, #1
 800912c:	b29a      	uxth	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009136:	b29b      	uxth	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d14f      	bne.n	80091dc <I2C_Slave_ISR_IT+0x1f2>
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009142:	d04b      	beq.n	80091dc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fb3c 	bl	80097c2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800914a:	e047      	b.n	80091dc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	08db      	lsrs	r3, r3, #3
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00a      	beq.n	800916e <I2C_Slave_ISR_IT+0x184>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	08db      	lsrs	r3, r3, #3
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d004      	beq.n	800916e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009164:	6939      	ldr	r1, [r7, #16]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 fa6a 	bl	8009640 <I2C_ITAddrCplt>
 800916c:	e037      	b.n	80091de <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	085b      	lsrs	r3, r3, #1
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	d031      	beq.n	80091de <I2C_Slave_ISR_IT+0x1f4>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	085b      	lsrs	r3, r3, #1
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b00      	cmp	r3, #0
 8009184:	d02b      	beq.n	80091de <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800918a:	b29b      	uxth	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d018      	beq.n	80091c2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b8:	3b01      	subs	r3, #1
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	851a      	strh	r2, [r3, #40]	; 0x28
 80091c0:	e00d      	b.n	80091de <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091c8:	d002      	beq.n	80091d0 <I2C_Slave_ISR_IT+0x1e6>
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 faf6 	bl	80097c2 <I2C_ITSlaveSeqCplt>
 80091d6:	e002      	b.n	80091de <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80091d8:	bf00      	nop
 80091da:	e000      	b.n	80091de <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80091dc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b088      	sub	sp, #32
 80091f4:	af02      	add	r7, sp, #8
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009202:	2b01      	cmp	r3, #1
 8009204:	d101      	bne.n	800920a <I2C_Master_ISR_DMA+0x1a>
 8009206:	2302      	movs	r3, #2
 8009208:	e0e1      	b.n	80093ce <I2C_Master_ISR_DMA+0x1de>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	091b      	lsrs	r3, r3, #4
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b00      	cmp	r3, #0
 800921c:	d017      	beq.n	800924e <I2C_Master_ISR_DMA+0x5e>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	091b      	lsrs	r3, r3, #4
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d011      	beq.n	800924e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2210      	movs	r2, #16
 8009230:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009236:	f043 0204 	orr.w	r2, r3, #4
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800923e:	2120      	movs	r1, #32
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f001 f83d 	bl	800a2c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 fe3b 	bl	8009ec2 <I2C_Flush_TXDR>
 800924c:	e0ba      	b.n	80093c4 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	09db      	lsrs	r3, r3, #7
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d072      	beq.n	8009340 <I2C_Master_ISR_DMA+0x150>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	099b      	lsrs	r3, r3, #6
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d06c      	beq.n	8009340 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009274:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800927a:	b29b      	uxth	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d04e      	beq.n	800931e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	b29b      	uxth	r3, r3
 8009288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800928c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009292:	b29b      	uxth	r3, r3
 8009294:	2bff      	cmp	r3, #255	; 0xff
 8009296:	d906      	bls.n	80092a6 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	22ff      	movs	r2, #255	; 0xff
 800929c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800929e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092a2:	617b      	str	r3, [r7, #20]
 80092a4:	e010      	b.n	80092c8 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80092b8:	d003      	beq.n	80092c2 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	e002      	b.n	80092c8 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80092c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092c6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	8a79      	ldrh	r1, [r7, #18]
 80092d0:	2300      	movs	r3, #0
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 ffc4 	bl	800a264 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b22      	cmp	r3, #34	; 0x22
 80092f8:	d108      	bne.n	800930c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009308:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800930a:	e05b      	b.n	80093c4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800931a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800931c:	e052      	b.n	80093c4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800932c:	d003      	beq.n	8009336 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 fa0a 	bl	8009748 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009334:	e046      	b.n	80093c4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009336:	2140      	movs	r1, #64	; 0x40
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 fccb 	bl	8009cd4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800933e:	e041      	b.n	80093c4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	099b      	lsrs	r3, r3, #6
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	d029      	beq.n	80093a0 <I2C_Master_ISR_DMA+0x1b0>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	099b      	lsrs	r3, r3, #6
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	d023      	beq.n	80093a0 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800935c:	b29b      	uxth	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d119      	bne.n	8009396 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009370:	d027      	beq.n	80093c2 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009376:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800937a:	d108      	bne.n	800938e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800938a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800938c:	e019      	b.n	80093c2 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 f9da 	bl	8009748 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009394:	e015      	b.n	80093c2 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009396:	2140      	movs	r1, #64	; 0x40
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 fc9b 	bl	8009cd4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800939e:	e010      	b.n	80093c2 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	095b      	lsrs	r3, r3, #5
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00b      	beq.n	80093c4 <I2C_Master_ISR_DMA+0x1d4>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	095b      	lsrs	r3, r3, #5
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d005      	beq.n	80093c4 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80093b8:	68b9      	ldr	r1, [r7, #8]
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 fa60 	bl	8009880 <I2C_ITMasterCplt>
 80093c0:	e000      	b.n	80093c4 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80093c2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b088      	sub	sp, #32
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e6:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d101      	bne.n	80093fa <I2C_Slave_ISR_DMA+0x24>
 80093f6:	2302      	movs	r3, #2
 80093f8:	e0c9      	b.n	800958e <I2C_Slave_ISR_DMA+0x1b8>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	d009      	beq.n	8009422 <I2C_Slave_ISR_DMA+0x4c>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	095b      	lsrs	r3, r3, #5
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 faf9 	bl	8009a14 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	091b      	lsrs	r3, r3, #4
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 809a 	beq.w	8009564 <I2C_Slave_ISR_DMA+0x18e>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	091b      	lsrs	r3, r3, #4
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 8093 	beq.w	8009564 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	0b9b      	lsrs	r3, r3, #14
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	d105      	bne.n	8009456 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	0bdb      	lsrs	r3, r3, #15
 800944e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009452:	2b00      	cmp	r3, #0
 8009454:	d07f      	beq.n	8009556 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00d      	beq.n	800947a <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	0bdb      	lsrs	r3, r3, #15
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d007      	beq.n	800947a <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8009476:	2301      	movs	r3, #1
 8009478:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00d      	beq.n	800949e <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	0b9b      	lsrs	r3, r3, #14
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	2b00      	cmp	r3, #0
 800948c:	d007      	beq.n	800949e <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800949a:	2301      	movs	r3, #1
 800949c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d128      	bne.n	80094f6 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b28      	cmp	r3, #40	; 0x28
 80094ae:	d108      	bne.n	80094c2 <I2C_Slave_ISR_DMA+0xec>
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094b6:	d104      	bne.n	80094c2 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80094b8:	68b9      	ldr	r1, [r7, #8]
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f000 fbb4 	bl	8009c28 <I2C_ITListenCplt>
 80094c0:	e048      	b.n	8009554 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b29      	cmp	r3, #41	; 0x29
 80094cc:	d10e      	bne.n	80094ec <I2C_Slave_ISR_DMA+0x116>
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80094d4:	d00a      	beq.n	80094ec <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2210      	movs	r2, #16
 80094dc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f000 fcef 	bl	8009ec2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 f96c 	bl	80097c2 <I2C_ITSlaveSeqCplt>
 80094ea:	e033      	b.n	8009554 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2210      	movs	r2, #16
 80094f2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80094f4:	e034      	b.n	8009560 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2210      	movs	r2, #16
 80094fc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009502:	f043 0204 	orr.w	r2, r3, #4
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009510:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <I2C_Slave_ISR_DMA+0x14a>
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800951e:	d11f      	bne.n	8009560 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009520:	7dfb      	ldrb	r3, [r7, #23]
 8009522:	2b21      	cmp	r3, #33	; 0x21
 8009524:	d002      	beq.n	800952c <I2C_Slave_ISR_DMA+0x156>
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	2b29      	cmp	r3, #41	; 0x29
 800952a:	d103      	bne.n	8009534 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2221      	movs	r2, #33	; 0x21
 8009530:	631a      	str	r2, [r3, #48]	; 0x30
 8009532:	e008      	b.n	8009546 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	2b22      	cmp	r3, #34	; 0x22
 8009538:	d002      	beq.n	8009540 <I2C_Slave_ISR_DMA+0x16a>
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	2b2a      	cmp	r3, #42	; 0x2a
 800953e:	d102      	bne.n	8009546 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2222      	movs	r2, #34	; 0x22
 8009544:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954a:	4619      	mov	r1, r3
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 fbc1 	bl	8009cd4 <I2C_ITError>
      if (treatdmanack == 1U)
 8009552:	e005      	b.n	8009560 <I2C_Slave_ISR_DMA+0x18a>
 8009554:	e004      	b.n	8009560 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2210      	movs	r2, #16
 800955c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800955e:	e011      	b.n	8009584 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8009560:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009562:	e00f      	b.n	8009584 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	08db      	lsrs	r3, r3, #3
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	2b00      	cmp	r3, #0
 800956e:	d009      	beq.n	8009584 <I2C_Slave_ISR_DMA+0x1ae>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	08db      	lsrs	r3, r3, #3
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	d003      	beq.n	8009584 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800957c:	68b9      	ldr	r1, [r7, #8]
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 f85e 	bl	8009640 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3720      	adds	r7, #32
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af02      	add	r7, sp, #8
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	4608      	mov	r0, r1
 80095a2:	4611      	mov	r1, r2
 80095a4:	461a      	mov	r2, r3
 80095a6:	4603      	mov	r3, r0
 80095a8:	817b      	strh	r3, [r7, #10]
 80095aa:	460b      	mov	r3, r1
 80095ac:	813b      	strh	r3, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80095b2:	88fb      	ldrh	r3, [r7, #6]
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	8979      	ldrh	r1, [r7, #10]
 80095b8:	4b20      	ldr	r3, [pc, #128]	; (800963c <I2C_RequestMemoryWrite+0xa4>)
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 fe4f 	bl	800a264 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095c6:	69fa      	ldr	r2, [r7, #28]
 80095c8:	69b9      	ldr	r1, [r7, #24]
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fcfb 	bl	8009fc6 <I2C_WaitOnTXISFlagUntilTimeout>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e02c      	b.n	8009634 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095da:	88fb      	ldrh	r3, [r7, #6]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d105      	bne.n	80095ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095e0:	893b      	ldrh	r3, [r7, #8]
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	629a      	str	r2, [r3, #40]	; 0x28
 80095ea:	e015      	b.n	8009618 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80095ec:	893b      	ldrh	r3, [r7, #8]
 80095ee:	0a1b      	lsrs	r3, r3, #8
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	69b9      	ldr	r1, [r7, #24]
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 fce1 	bl	8009fc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e012      	b.n	8009634 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800960e:	893b      	ldrh	r3, [r7, #8]
 8009610:	b2da      	uxtb	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	2200      	movs	r2, #0
 8009620:	2180      	movs	r1, #128	; 0x80
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f000 fc8f 	bl	8009f46 <I2C_WaitOnFlagUntilTimeout>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e000      	b.n	8009634 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	80002000 	.word	0x80002000

08009640 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009656:	2b28      	cmp	r3, #40	; 0x28
 8009658:	d16a      	bne.n	8009730 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	0c1b      	lsrs	r3, r3, #16
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	0c1b      	lsrs	r3, r3, #16
 8009672:	b29b      	uxth	r3, r3
 8009674:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009678:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	b29b      	uxth	r3, r3
 8009682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009686:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	b29b      	uxth	r3, r3
 8009690:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009694:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	2b02      	cmp	r3, #2
 800969c:	d138      	bne.n	8009710 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800969e:	897b      	ldrh	r3, [r7, #10]
 80096a0:	09db      	lsrs	r3, r3, #7
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	89bb      	ldrh	r3, [r7, #12]
 80096a6:	4053      	eors	r3, r2
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	f003 0306 	and.w	r3, r3, #6
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d11c      	bne.n	80096ec <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80096b2:	897b      	ldrh	r3, [r7, #10]
 80096b4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096ba:	1c5a      	adds	r2, r3, #1
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d13b      	bne.n	8009740 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2208      	movs	r2, #8
 80096d4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80096de:	89ba      	ldrh	r2, [r7, #12]
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff fb17 	bl	8008d18 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80096ea:	e029      	b.n	8009740 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80096ec:	893b      	ldrh	r3, [r7, #8]
 80096ee:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80096f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fe47 	bl	800a388 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009702:	89ba      	ldrh	r2, [r7, #12]
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff fb05 	bl	8008d18 <HAL_I2C_AddrCallback>
}
 800970e:	e017      	b.n	8009740 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fe37 	bl	800a388 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009722:	89ba      	ldrh	r2, [r7, #12]
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7ff faf5 	bl	8008d18 <HAL_I2C_AddrCallback>
}
 800972e:	e007      	b.n	8009740 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2208      	movs	r2, #8
 8009736:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009740:	bf00      	nop
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b21      	cmp	r3, #33	; 0x21
 8009762:	d115      	bne.n	8009790 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2220      	movs	r2, #32
 8009768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2211      	movs	r2, #17
 8009770:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009778:	2101      	movs	r1, #1
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fe04 	bl	800a388 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7f9 ff69 	bl	8003660 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800978e:	e014      	b.n	80097ba <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2220      	movs	r2, #32
 8009794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2212      	movs	r2, #18
 800979c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80097a4:	2102      	movs	r1, #2
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fdee 	bl	800a388 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7f9 ff69 	bl	800368c <HAL_I2C_MasterRxCpltCallback>
}
 80097ba:	bf00      	nop
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	0b9b      	lsrs	r3, r3, #14
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d008      	beq.n	80097f8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	e00d      	b.n	8009814 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	0bdb      	lsrs	r3, r3, #15
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	d007      	beq.n	8009814 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009812:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800981a:	b2db      	uxtb	r3, r3
 800981c:	2b29      	cmp	r3, #41	; 0x29
 800981e:	d112      	bne.n	8009846 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2228      	movs	r2, #40	; 0x28
 8009824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2221      	movs	r2, #33	; 0x21
 800982c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800982e:	2101      	movs	r1, #1
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fda9 	bl	800a388 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7ff fa56 	bl	8008cf0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009844:	e017      	b.n	8009876 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b2a      	cmp	r3, #42	; 0x2a
 8009850:	d111      	bne.n	8009876 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2228      	movs	r2, #40	; 0x28
 8009856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2222      	movs	r2, #34	; 0x22
 800985e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009860:	2102      	movs	r1, #2
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fd90 	bl	800a388 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fa47 	bl	8008d04 <HAL_I2C_SlaveRxCpltCallback>
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2220      	movs	r2, #32
 8009894:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b21      	cmp	r3, #33	; 0x21
 80098a0:	d107      	bne.n	80098b2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80098a2:	2101      	movs	r1, #1
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fd6f 	bl	800a388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2211      	movs	r2, #17
 80098ae:	631a      	str	r2, [r3, #48]	; 0x30
 80098b0:	e00c      	b.n	80098cc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b22      	cmp	r3, #34	; 0x22
 80098bc:	d106      	bne.n	80098cc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80098be:	2102      	movs	r1, #2
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fd61 	bl	800a388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2212      	movs	r2, #18
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6859      	ldr	r1, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	4b4d      	ldr	r3, [pc, #308]	; (8009a0c <I2C_ITMasterCplt+0x18c>)
 80098d8:	400b      	ands	r3, r1
 80098da:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a4a      	ldr	r2, [pc, #296]	; (8009a10 <I2C_ITMasterCplt+0x190>)
 80098e6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	091b      	lsrs	r3, r3, #4
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2210      	movs	r2, #16
 80098fa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009900:	f043 0204 	orr.w	r2, r3, #4
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b60      	cmp	r3, #96	; 0x60
 8009912:	d10b      	bne.n	800992c <I2C_ITMasterCplt+0xac>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	089b      	lsrs	r3, r3, #2
 8009918:	f003 0301 	and.w	r3, r3, #1
 800991c:	2b00      	cmp	r3, #0
 800991e:	d005      	beq.n	800992c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	b2db      	uxtb	r3, r3
 8009928:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800992a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fac8 	bl	8009ec2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009936:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b60      	cmp	r3, #96	; 0x60
 8009942:	d002      	beq.n	800994a <I2C_ITMasterCplt+0xca>
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d006      	beq.n	8009958 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f9bf 	bl	8009cd4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009956:	e054      	b.n	8009a02 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b21      	cmp	r3, #33	; 0x21
 8009962:	d124      	bne.n	80099ae <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2220      	movs	r2, #32
 8009968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b40      	cmp	r3, #64	; 0x40
 800997c:	d10b      	bne.n	8009996 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff f9da 	bl	8008d48 <HAL_I2C_MemTxCpltCallback>
}
 8009994:	e035      	b.n	8009a02 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7f9 fe5a 	bl	8003660 <HAL_I2C_MasterTxCpltCallback>
}
 80099ac:	e029      	b.n	8009a02 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b22      	cmp	r3, #34	; 0x22
 80099b8:	d123      	bne.n	8009a02 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2220      	movs	r2, #32
 80099be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b40      	cmp	r3, #64	; 0x40
 80099d2:	d10b      	bne.n	80099ec <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff f9b9 	bl	8008d5c <HAL_I2C_MemRxCpltCallback>
}
 80099ea:	e00a      	b.n	8009a02 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7f9 fe45 	bl	800368c <HAL_I2C_MasterRxCpltCallback>
}
 8009a02:	bf00      	nop
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	fe00e800 	.word	0xfe00e800
 8009a10:	ffff0000 	.word	0xffff0000

08009a14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a30:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2220      	movs	r2, #32
 8009a38:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	2b21      	cmp	r3, #33	; 0x21
 8009a3e:	d002      	beq.n	8009a46 <I2C_ITSlaveCplt+0x32>
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b29      	cmp	r3, #41	; 0x29
 8009a44:	d108      	bne.n	8009a58 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009a46:	f248 0101 	movw	r1, #32769	; 0x8001
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fc9c 	bl	800a388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2221      	movs	r2, #33	; 0x21
 8009a54:	631a      	str	r2, [r3, #48]	; 0x30
 8009a56:	e00d      	b.n	8009a74 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	2b22      	cmp	r3, #34	; 0x22
 8009a5c:	d002      	beq.n	8009a64 <I2C_ITSlaveCplt+0x50>
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	2b2a      	cmp	r3, #42	; 0x2a
 8009a62:	d107      	bne.n	8009a74 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009a64:	f248 0102 	movw	r1, #32770	; 0x8002
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fc8d 	bl	800a388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2222      	movs	r2, #34	; 0x22
 8009a72:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a82:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6859      	ldr	r1, [r3, #4]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	4b64      	ldr	r3, [pc, #400]	; (8009c20 <I2C_ITSlaveCplt+0x20c>)
 8009a90:	400b      	ands	r3, r1
 8009a92:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fa14 	bl	8009ec2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	0b9b      	lsrs	r3, r3, #14
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d013      	beq.n	8009ace <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ab4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d020      	beq.n	8009b00 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009acc:	e018      	b.n	8009b00 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	0bdb      	lsrs	r3, r3, #15
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d012      	beq.n	8009b00 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ae8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d006      	beq.n	8009b00 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	089b      	lsrs	r3, r3, #2
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d020      	beq.n	8009b4e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f023 0304 	bic.w	r3, r3, #4
 8009b12:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	b2d2      	uxtb	r2, r2
 8009b20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00c      	beq.n	8009b4e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	3b01      	subs	r3, #1
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d005      	beq.n	8009b64 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b5c:	f043 0204 	orr.w	r2, r3, #4
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d010      	beq.n	8009b9c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f8a7 	bl	8009cd4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	2b28      	cmp	r3, #40	; 0x28
 8009b90:	d141      	bne.n	8009c16 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009b92:	6979      	ldr	r1, [r7, #20]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f847 	bl	8009c28 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009b9a:	e03c      	b.n	8009c16 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ba4:	d014      	beq.n	8009bd0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff fe0b 	bl	80097c2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a1d      	ldr	r2, [pc, #116]	; (8009c24 <I2C_ITSlaveCplt+0x210>)
 8009bb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff f8b3 	bl	8008d34 <HAL_I2C_ListenCpltCallback>
}
 8009bce:	e022      	b.n	8009c16 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b22      	cmp	r3, #34	; 0x22
 8009bda:	d10e      	bne.n	8009bfa <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2220      	movs	r2, #32
 8009be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7ff f886 	bl	8008d04 <HAL_I2C_SlaveRxCpltCallback>
}
 8009bf8:	e00d      	b.n	8009c16 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2220      	movs	r2, #32
 8009bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff f86d 	bl	8008cf0 <HAL_I2C_SlaveTxCpltCallback>
}
 8009c16:	bf00      	nop
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	fe00e800 	.word	0xfe00e800
 8009c24:	ffff0000 	.word	0xffff0000

08009c28 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a26      	ldr	r2, [pc, #152]	; (8009cd0 <I2C_ITListenCplt+0xa8>)
 8009c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2220      	movs	r2, #32
 8009c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	089b      	lsrs	r3, r3, #2
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d022      	beq.n	8009ca6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d012      	beq.n	8009ca6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	3b01      	subs	r3, #1
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c9e:	f043 0204 	orr.w	r2, r3, #4
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009ca6:	f248 0103 	movw	r1, #32771	; 0x8003
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fb6c 	bl	800a388 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2210      	movs	r2, #16
 8009cb6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7ff f837 	bl	8008d34 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	ffff0000 	.word	0xffff0000

08009cd4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a5d      	ldr	r2, [pc, #372]	; (8009e68 <I2C_ITError+0x194>)
 8009cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	431a      	orrs	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
 8009d08:	2b28      	cmp	r3, #40	; 0x28
 8009d0a:	d005      	beq.n	8009d18 <I2C_ITError+0x44>
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	2b29      	cmp	r3, #41	; 0x29
 8009d10:	d002      	beq.n	8009d18 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
 8009d14:	2b2a      	cmp	r3, #42	; 0x2a
 8009d16:	d10b      	bne.n	8009d30 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009d18:	2103      	movs	r1, #3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fb34 	bl	800a388 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2228      	movs	r2, #40	; 0x28
 8009d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a50      	ldr	r2, [pc, #320]	; (8009e6c <I2C_ITError+0x198>)
 8009d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8009d2e:	e011      	b.n	8009d54 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009d30:	f248 0103 	movw	r1, #32771	; 0x8003
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fb27 	bl	800a388 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b60      	cmp	r3, #96	; 0x60
 8009d44:	d003      	beq.n	8009d4e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2220      	movs	r2, #32
 8009d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d58:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d039      	beq.n	8009dd6 <I2C_ITError+0x102>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b11      	cmp	r3, #17
 8009d66:	d002      	beq.n	8009d6e <I2C_ITError+0x9a>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b21      	cmp	r3, #33	; 0x21
 8009d6c:	d133      	bne.n	8009dd6 <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d7c:	d107      	bne.n	8009d8e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d8c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe f92e 	bl	8007ff4 <HAL_DMA_GetState>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d017      	beq.n	8009dce <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da2:	4a33      	ldr	r2, [pc, #204]	; (8009e70 <I2C_ITError+0x19c>)
 8009da4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe f810 	bl	8007dd8 <HAL_DMA_Abort_IT>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d04d      	beq.n	8009e5a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009dcc:	e045      	b.n	8009e5a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f850 	bl	8009e74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009dd4:	e041      	b.n	8009e5a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d039      	beq.n	8009e52 <I2C_ITError+0x17e>
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2b12      	cmp	r3, #18
 8009de2:	d002      	beq.n	8009dea <I2C_ITError+0x116>
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2b22      	cmp	r3, #34	; 0x22
 8009de8:	d133      	bne.n	8009e52 <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009df8:	d107      	bne.n	8009e0a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e08:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fe f8f0 	bl	8007ff4 <HAL_DMA_GetState>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d017      	beq.n	8009e4a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1e:	4a14      	ldr	r2, [pc, #80]	; (8009e70 <I2C_ITError+0x19c>)
 8009e20:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fd ffd2 	bl	8007dd8 <HAL_DMA_Abort_IT>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d011      	beq.n	8009e5e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009e44:	4610      	mov	r0, r2
 8009e46:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009e48:	e009      	b.n	8009e5e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f812 	bl	8009e74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009e50:	e005      	b.n	8009e5e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f80e 	bl	8009e74 <I2C_TreatErrorCallback>
  }
}
 8009e58:	e002      	b.n	8009e60 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009e5a:	bf00      	nop
 8009e5c:	e000      	b.n	8009e60 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009e5e:	bf00      	nop
}
 8009e60:	bf00      	nop
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	ffff0000 	.word	0xffff0000
 8009e6c:	08008feb 	.word	0x08008feb
 8009e70:	08009f0b 	.word	0x08009f0b

08009e74 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b60      	cmp	r3, #96	; 0x60
 8009e86:	d10e      	bne.n	8009ea6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7fe ff70 	bl	8008d84 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009ea4:	e009      	b.n	8009eba <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7fe ff5b 	bl	8008d70 <HAL_I2C_ErrorCallback>
}
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d103      	bne.n	8009ee0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2200      	movs	r2, #0
 8009ede:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d007      	beq.n	8009efe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	699a      	ldr	r2, [r3, #24]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f042 0201 	orr.w	r2, r2, #1
 8009efc:	619a      	str	r2, [r3, #24]
  }
}
 8009efe:	bf00      	nop
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d003      	beq.n	8009f28 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f24:	2200      	movs	r2, #0
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f34:	2200      	movs	r2, #0
 8009f36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7ff ff9b 	bl	8009e74 <I2C_TreatErrorCallback>
}
 8009f3e:	bf00      	nop
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	60f8      	str	r0, [r7, #12]
 8009f4e:	60b9      	str	r1, [r7, #8]
 8009f50:	603b      	str	r3, [r7, #0]
 8009f52:	4613      	mov	r3, r2
 8009f54:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f56:	e022      	b.n	8009f9e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5e:	d01e      	beq.n	8009f9e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f60:	f7fc f856 	bl	8006010 <HAL_GetTick>
 8009f64:	4602      	mov	r2, r0
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d302      	bcc.n	8009f76 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d113      	bne.n	8009f9e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f7a:	f043 0220 	orr.w	r2, r3, #32
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e00f      	b.n	8009fbe <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	699a      	ldr	r2, [r3, #24]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	bf0c      	ite	eq
 8009fae:	2301      	moveq	r3, #1
 8009fb0:	2300      	movne	r3, #0
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d0cd      	beq.n	8009f58 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b084      	sub	sp, #16
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	60f8      	str	r0, [r7, #12]
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009fd2:	e02c      	b.n	800a02e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	68b9      	ldr	r1, [r7, #8]
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 f8dd 	bl	800a198 <I2C_IsAcknowledgeFailed>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e02a      	b.n	800a03e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fee:	d01e      	beq.n	800a02e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ff0:	f7fc f80e 	bl	8006010 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d302      	bcc.n	800a006 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d113      	bne.n	800a02e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00a:	f043 0220 	orr.w	r2, r3, #32
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e007      	b.n	800a03e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	f003 0302 	and.w	r3, r3, #2
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d1cb      	bne.n	8009fd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	60f8      	str	r0, [r7, #12]
 800a04e:	60b9      	str	r1, [r7, #8]
 800a050:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a052:	e028      	b.n	800a0a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	68b9      	ldr	r1, [r7, #8]
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 f89d 	bl	800a198 <I2C_IsAcknowledgeFailed>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e026      	b.n	800a0b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a068:	f7fb ffd2 	bl	8006010 <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	429a      	cmp	r2, r3
 800a076:	d302      	bcc.n	800a07e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d113      	bne.n	800a0a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a082:	f043 0220 	orr.w	r2, r3, #32
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2220      	movs	r2, #32
 800a08e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e007      	b.n	800a0b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	f003 0320 	and.w	r3, r3, #32
 800a0b0:	2b20      	cmp	r3, #32
 800a0b2:	d1cf      	bne.n	800a054 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0cc:	e055      	b.n	800a17a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	68b9      	ldr	r1, [r7, #8]
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f000 f860 	bl	800a198 <I2C_IsAcknowledgeFailed>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e053      	b.n	800a18a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	f003 0320 	and.w	r3, r3, #32
 800a0ec:	2b20      	cmp	r3, #32
 800a0ee:	d129      	bne.n	800a144 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	f003 0304 	and.w	r3, r3, #4
 800a0fa:	2b04      	cmp	r3, #4
 800a0fc:	d105      	bne.n	800a10a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	e03f      	b.n	800a18a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2220      	movs	r2, #32
 800a110:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6859      	ldr	r1, [r3, #4]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	4b1d      	ldr	r3, [pc, #116]	; (800a194 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a11e:	400b      	ands	r3, r1
 800a120:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2220      	movs	r2, #32
 800a12c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e022      	b.n	800a18a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a144:	f7fb ff64 	bl	8006010 <HAL_GetTick>
 800a148:	4602      	mov	r2, r0
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	429a      	cmp	r2, r3
 800a152:	d302      	bcc.n	800a15a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d10f      	bne.n	800a17a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15e:	f043 0220 	orr.w	r2, r3, #32
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2220      	movs	r2, #32
 800a16a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e007      	b.n	800a18a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b04      	cmp	r3, #4
 800a186:	d1a2      	bne.n	800a0ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	fe00e800 	.word	0xfe00e800

0800a198 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	f003 0310 	and.w	r3, r3, #16
 800a1ae:	2b10      	cmp	r3, #16
 800a1b0:	d151      	bne.n	800a256 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1b2:	e022      	b.n	800a1fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ba:	d01e      	beq.n	800a1fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1bc:	f7fb ff28 	bl	8006010 <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d302      	bcc.n	800a1d2 <I2C_IsAcknowledgeFailed+0x3a>
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d113      	bne.n	800a1fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d6:	f043 0220 	orr.w	r2, r3, #32
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e02e      	b.n	800a258 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	f003 0320 	and.w	r3, r3, #32
 800a204:	2b20      	cmp	r3, #32
 800a206:	d1d5      	bne.n	800a1b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2210      	movs	r2, #16
 800a20e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2220      	movs	r2, #32
 800a216:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7ff fe52 	bl	8009ec2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	6859      	ldr	r1, [r3, #4]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	4b0d      	ldr	r3, [pc, #52]	; (800a260 <I2C_IsAcknowledgeFailed+0xc8>)
 800a22a:	400b      	ands	r3, r1
 800a22c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a232:	f043 0204 	orr.w	r2, r3, #4
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e000      	b.n	800a258 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	fe00e800 	.word	0xfe00e800

0800a264 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	607b      	str	r3, [r7, #4]
 800a26e:	460b      	mov	r3, r1
 800a270:	817b      	strh	r3, [r7, #10]
 800a272:	4613      	mov	r3, r2
 800a274:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	0d5b      	lsrs	r3, r3, #21
 800a280:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a284:	4b0d      	ldr	r3, [pc, #52]	; (800a2bc <I2C_TransferConfig+0x58>)
 800a286:	430b      	orrs	r3, r1
 800a288:	43db      	mvns	r3, r3
 800a28a:	ea02 0103 	and.w	r1, r2, r3
 800a28e:	897b      	ldrh	r3, [r7, #10]
 800a290:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a294:	7a7b      	ldrb	r3, [r7, #9]
 800a296:	041b      	lsls	r3, r3, #16
 800a298:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	431a      	orrs	r2, r3
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	431a      	orrs	r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a2ae:	bf00      	nop
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	03ff63ff 	.word	0x03ff63ff

0800a2c0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d4:	4a2a      	ldr	r2, [pc, #168]	; (800a380 <I2C_Enable_IRQ+0xc0>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d004      	beq.n	800a2e4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a2de:	4a29      	ldr	r2, [pc, #164]	; (800a384 <I2C_Enable_IRQ+0xc4>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d11d      	bne.n	800a320 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a2e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	da03      	bge.n	800a2f4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a2f2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a2f4:	887b      	ldrh	r3, [r7, #2]
 800a2f6:	2b10      	cmp	r3, #16
 800a2f8:	d103      	bne.n	800a302 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a300:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a302:	887b      	ldrh	r3, [r7, #2]
 800a304:	2b20      	cmp	r3, #32
 800a306:	d103      	bne.n	800a310 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a30e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a310:	887b      	ldrh	r3, [r7, #2]
 800a312:	2b40      	cmp	r3, #64	; 0x40
 800a314:	d125      	bne.n	800a362 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a31c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a31e:	e020      	b.n	800a362 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a320:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a324:	2b00      	cmp	r3, #0
 800a326:	da03      	bge.n	800a330 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a32e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a330:	887b      	ldrh	r3, [r7, #2]
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a340:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a342:	887b      	ldrh	r3, [r7, #2]
 800a344:	f003 0302 	and.w	r3, r3, #2
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a352:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a354:	887b      	ldrh	r3, [r7, #2]
 800a356:	2b20      	cmp	r3, #32
 800a358:	d103      	bne.n	800a362 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f043 0320 	orr.w	r3, r3, #32
 800a360:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6819      	ldr	r1, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	430a      	orrs	r2, r1
 800a370:	601a      	str	r2, [r3, #0]
}
 800a372:	bf00      	nop
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	080091f1 	.word	0x080091f1
 800a384:	080093d7 	.word	0x080093d7

0800a388 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a398:	887b      	ldrh	r3, [r7, #2]
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00f      	beq.n	800a3c2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a3a8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a3b6:	2b28      	cmp	r3, #40	; 0x28
 800a3b8:	d003      	beq.n	800a3c2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a3c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a3c2:	887b      	ldrh	r3, [r7, #2]
 800a3c4:	f003 0302 	and.w	r3, r3, #2
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00f      	beq.n	800a3ec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a3d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a3e0:	2b28      	cmp	r3, #40	; 0x28
 800a3e2:	d003      	beq.n	800a3ec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a3ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a3ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	da03      	bge.n	800a3fc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a3fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a3fc:	887b      	ldrh	r3, [r7, #2]
 800a3fe:	2b10      	cmp	r3, #16
 800a400:	d103      	bne.n	800a40a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a408:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a40a:	887b      	ldrh	r3, [r7, #2]
 800a40c:	2b20      	cmp	r3, #32
 800a40e:	d103      	bne.n	800a418 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f043 0320 	orr.w	r3, r3, #32
 800a416:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a418:	887b      	ldrh	r3, [r7, #2]
 800a41a:	2b40      	cmp	r3, #64	; 0x40
 800a41c:	d103      	bne.n	800a426 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a424:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6819      	ldr	r1, [r3, #0]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	43da      	mvns	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	400a      	ands	r2, r1
 800a436:	601a      	str	r2, [r3, #0]
}
 800a438:	bf00      	nop
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b20      	cmp	r3, #32
 800a458:	d138      	bne.n	800a4cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a460:	2b01      	cmp	r3, #1
 800a462:	d101      	bne.n	800a468 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a464:	2302      	movs	r3, #2
 800a466:	e032      	b.n	800a4ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2224      	movs	r2, #36	; 0x24
 800a474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 0201 	bic.w	r2, r2, #1
 800a486:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a496:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6819      	ldr	r1, [r3, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f042 0201 	orr.w	r2, r2, #1
 800a4b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2220      	movs	r2, #32
 800a4bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	e000      	b.n	800a4ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a4cc:	2302      	movs	r3, #2
  }
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b085      	sub	sp, #20
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2b20      	cmp	r3, #32
 800a4ee:	d139      	bne.n	800a564 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d101      	bne.n	800a4fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e033      	b.n	800a566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2224      	movs	r2, #36	; 0x24
 800a50a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f022 0201 	bic.w	r2, r2, #1
 800a51c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a52c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	021b      	lsls	r3, r3, #8
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4313      	orrs	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f042 0201 	orr.w	r2, r2, #1
 800a54e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2220      	movs	r2, #32
 800a554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	e000      	b.n	800a566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a564:	2302      	movs	r3, #2
  }
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a572:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a574:	b08b      	sub	sp, #44	; 0x2c
 800a576:	af06      	add	r7, sp, #24
 800a578:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	e0ad      	b.n	800a6e0 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d106      	bne.n	800a59e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f00e fe2d 	bl	80191f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2203      	movs	r2, #3
 800a5a2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f004 fa44 	bl	800ea38 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	73fb      	strb	r3, [r7, #15]
 800a5b4:	e035      	b.n	800a622 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	015b      	lsls	r3, r3, #5
 800a5bc:	4413      	add	r3, r2
 800a5be:	3329      	adds	r3, #41	; 0x29
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	015b      	lsls	r3, r3, #5
 800a5ca:	4413      	add	r3, r2
 800a5cc:	3328      	adds	r3, #40	; 0x28
 800a5ce:	7bfa      	ldrb	r2, [r7, #15]
 800a5d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	7bfa      	ldrb	r2, [r7, #15]
 800a5d6:	b291      	uxth	r1, r2
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	015b      	lsls	r3, r3, #5
 800a5dc:	4413      	add	r3, r2
 800a5de:	3336      	adds	r3, #54	; 0x36
 800a5e0:	460a      	mov	r2, r1
 800a5e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	015b      	lsls	r3, r3, #5
 800a5ea:	4413      	add	r3, r2
 800a5ec:	332b      	adds	r3, #43	; 0x2b
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	015b      	lsls	r3, r3, #5
 800a5f8:	4413      	add	r3, r2
 800a5fa:	3338      	adds	r3, #56	; 0x38
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a600:	7bfb      	ldrb	r3, [r7, #15]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	015b      	lsls	r3, r3, #5
 800a606:	4413      	add	r3, r2
 800a608:	333c      	adds	r3, #60	; 0x3c
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	3302      	adds	r3, #2
 800a614:	015b      	lsls	r3, r3, #5
 800a616:	4413      	add	r3, r2
 800a618:	2200      	movs	r2, #0
 800a61a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	3301      	adds	r3, #1
 800a620:	73fb      	strb	r3, [r7, #15]
 800a622:	7bfa      	ldrb	r2, [r7, #15]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d3c4      	bcc.n	800a5b6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]
 800a630:	e031      	b.n	800a696 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	015b      	lsls	r3, r3, #5
 800a638:	4413      	add	r3, r2
 800a63a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800a63e:	2200      	movs	r2, #0
 800a640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	015b      	lsls	r3, r3, #5
 800a648:	4413      	add	r3, r2
 800a64a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a64e:	7bfa      	ldrb	r2, [r7, #15]
 800a650:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a652:	7bfb      	ldrb	r3, [r7, #15]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	015b      	lsls	r3, r3, #5
 800a658:	4413      	add	r3, r2
 800a65a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800a65e:	2200      	movs	r2, #0
 800a660:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a662:	7bfb      	ldrb	r3, [r7, #15]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	015b      	lsls	r3, r3, #5
 800a668:	4413      	add	r3, r2
 800a66a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a66e:	2200      	movs	r2, #0
 800a670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a672:	7bfb      	ldrb	r3, [r7, #15]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	015b      	lsls	r3, r3, #5
 800a678:	4413      	add	r3, r2
 800a67a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a67e:	2200      	movs	r2, #0
 800a680:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	330a      	adds	r3, #10
 800a688:	015b      	lsls	r3, r3, #5
 800a68a:	4413      	add	r3, r2
 800a68c:	2200      	movs	r2, #0
 800a68e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	3301      	adds	r3, #1
 800a694:	73fb      	strb	r3, [r7, #15]
 800a696:	7bfa      	ldrb	r2, [r7, #15]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d3c8      	bcc.n	800a632 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	603b      	str	r3, [r7, #0]
 800a6a6:	687e      	ldr	r6, [r7, #4]
 800a6a8:	466d      	mov	r5, sp
 800a6aa:	f106 0410 	add.w	r4, r6, #16
 800a6ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	1d33      	adds	r3, r6, #4
 800a6b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6ba:	6838      	ldr	r0, [r7, #0]
 800a6bc:	f004 f9d9 	bl	800ea72 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d102      	bne.n	800a6de <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fe5e 	bl	800b39a <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a6e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d101      	bne.n	800a6fe <HAL_PCD_Start+0x16>
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	e012      	b.n	800a724 <HAL_PCD_Start+0x3c>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f005 fa03 	bl	800fb16 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4618      	mov	r0, r3
 800a716:	f004 f977 	bl	800ea08 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d101      	bne.n	800a742 <HAL_PCD_Stop+0x16>
 800a73e:	2302      	movs	r3, #2
 800a740:	e012      	b.n	800a768 <HAL_PCD_Stop+0x3c>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  __HAL_PCD_DISABLE(hpcd);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4618      	mov	r0, r3
 800a750:	f004 f972 	bl	800ea38 <USB_DisableGlobalInt>

  (void)USB_StopDevice(hpcd->Instance);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4618      	mov	r0, r3
 800a75a:	f005 f9b1 	bl	800fac0 <USB_StopDevice>

  __HAL_UNLOCK(hpcd);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f005 f9e1 	bl	800fb44 <USB_ReadInterrupts>
 800a782:	4603      	mov	r3, r0
 800a784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a78c:	d102      	bne.n	800a794 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fb3e 	bl	800ae10 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4618      	mov	r0, r3
 800a79a:	f005 f9d3 	bl	800fb44 <USB_ReadInterrupts>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7a8:	d112      	bne.n	800a7d0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7bc:	b292      	uxth	r2, r2
 800a7be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f00e fd9f 	bl	8019306 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f929 	bl	800aa22 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f005 f9b5 	bl	800fb44 <USB_ReadInterrupts>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7e4:	d10b      	bne.n	800a7fe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a7f8:	b292      	uxth	r2, r2
 800a7fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	f005 f99e 	bl	800fb44 <USB_ReadInterrupts>
 800a808:	4603      	mov	r3, r0
 800a80a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a80e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a812:	d10b      	bne.n	800a82c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a826:	b292      	uxth	r2, r2
 800a828:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4618      	mov	r0, r3
 800a832:	f005 f987 	bl	800fb44 <USB_ReadInterrupts>
 800a836:	4603      	mov	r3, r0
 800a838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a83c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a840:	d133      	bne.n	800a8aa <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f022 0204 	bic.w	r2, r2, #4
 800a854:	b292      	uxth	r2, r2
 800a856:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a862:	b29a      	uxth	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f022 0208 	bic.w	r2, r2, #8
 800a86c:	b292      	uxth	r2, r2
 800a86e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d107      	bne.n	800a88c <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a884:	2100      	movs	r1, #0
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f00e ff4c 	bl	8019724 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f00e fd73 	bl	8019378 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a8a4:	b292      	uxth	r2, r2
 800a8a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f005 f948 	bl	800fb44 <USB_ReadInterrupts>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8be:	d131      	bne.n	800a924 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f042 0208 	orr.w	r2, r2, #8
 800a8d2:	b292      	uxth	r2, r2
 800a8d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8ea:	b292      	uxth	r2, r2
 800a8ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f042 0204 	orr.w	r2, r2, #4
 800a902:	b292      	uxth	r2, r2
 800a904:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f005 f919 	bl	800fb44 <USB_ReadInterrupts>
 800a912:	4603      	mov	r3, r0
 800a914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a91c:	d002      	beq.n	800a924 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f00e fd10 	bl	8019344 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4618      	mov	r0, r3
 800a92a:	f005 f90b 	bl	800fb44 <USB_ReadInterrupts>
 800a92e:	4603      	mov	r3, r0
 800a930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a934:	2b80      	cmp	r3, #128	; 0x80
 800a936:	d13f      	bne.n	800a9b8 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a940:	b29a      	uxth	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a94a:	b292      	uxth	r2, r2
 800a94c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a956:	2b00      	cmp	r3, #0
 800a958:	d12b      	bne.n	800a9b2 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a962:	b29a      	uxth	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f042 0204 	orr.w	r2, r2, #4
 800a96c:	b292      	uxth	r2, r2
 800a96e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f042 0208 	orr.w	r2, r2, #8
 800a984:	b292      	uxth	r2, r2
 800a986:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	089b      	lsrs	r3, r3, #2
 800a99e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f00e feba 	bl	8019724 <HAL_PCDEx_LPM_Callback>
 800a9b0:	e002      	b.n	800a9b8 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f00e fcc6 	bl	8019344 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f005 f8c1 	bl	800fb44 <USB_ReadInterrupts>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9cc:	d10e      	bne.n	800a9ec <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a9e0:	b292      	uxth	r2, r2
 800a9e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f00e fc7f 	bl	80192ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f005 f8a7 	bl	800fb44 <USB_ReadInterrupts>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa00:	d10b      	bne.n	800aa1a <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa14:	b292      	uxth	r2, r2
 800aa16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800aa1a:	bf00      	nop
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d101      	bne.n	800aa3c <HAL_PCD_SetAddress+0x1a>
 800aa38:	2302      	movs	r3, #2
 800aa3a:	e013      	b.n	800aa64 <HAL_PCD_SetAddress+0x42>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	78fa      	ldrb	r2, [r7, #3]
 800aa48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	78fa      	ldrb	r2, [r7, #3]
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f005 f84a 	bl	800faee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	4608      	mov	r0, r1
 800aa76:	4611      	mov	r1, r2
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	70fb      	strb	r3, [r7, #3]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	803b      	strh	r3, [r7, #0]
 800aa82:	4613      	mov	r3, r2
 800aa84:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800aa8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	da0b      	bge.n	800aaaa <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa92:	78fb      	ldrb	r3, [r7, #3]
 800aa94:	f003 0307 	and.w	r3, r3, #7
 800aa98:	015b      	lsls	r3, r3, #5
 800aa9a:	3328      	adds	r3, #40	; 0x28
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	705a      	strb	r2, [r3, #1]
 800aaa8:	e00b      	b.n	800aac2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aaaa:	78fb      	ldrb	r3, [r7, #3]
 800aaac:	f003 0307 	and.w	r3, r3, #7
 800aab0:	015b      	lsls	r3, r3, #5
 800aab2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	4413      	add	r3, r2
 800aaba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800aac2:	78fb      	ldrb	r3, [r7, #3]
 800aac4:	f003 0307 	and.w	r3, r3, #7
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800aace:	883a      	ldrh	r2, [r7, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	78ba      	ldrb	r2, [r7, #2]
 800aad8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d004      	beq.n	800aaec <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800aaec:	78bb      	ldrb	r3, [r7, #2]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d102      	bne.n	800aaf8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d101      	bne.n	800ab06 <HAL_PCD_EP_Open+0x9a>
 800ab02:	2302      	movs	r3, #2
 800ab04:	e00e      	b.n	800ab24 <HAL_PCD_EP_Open+0xb8>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68f9      	ldr	r1, [r7, #12]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f003 ffd1 	bl	800eabc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800ab22:	7afb      	ldrb	r3, [r7, #11]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	460b      	mov	r3, r1
 800ab36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ab38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	da0b      	bge.n	800ab58 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	f003 0307 	and.w	r3, r3, #7
 800ab46:	015b      	lsls	r3, r3, #5
 800ab48:	3328      	adds	r3, #40	; 0x28
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2201      	movs	r2, #1
 800ab54:	705a      	strb	r2, [r3, #1]
 800ab56:	e00b      	b.n	800ab70 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab58:	78fb      	ldrb	r3, [r7, #3]
 800ab5a:	f003 0307 	and.w	r3, r3, #7
 800ab5e:	015b      	lsls	r3, r3, #5
 800ab60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	4413      	add	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d101      	bne.n	800ab8a <HAL_PCD_EP_Close+0x5e>
 800ab86:	2302      	movs	r3, #2
 800ab88:	e00e      	b.n	800aba8 <HAL_PCD_EP_Close+0x7c>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68f9      	ldr	r1, [r7, #12]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f004 fa79 	bl	800f090 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	607a      	str	r2, [r7, #4]
 800abba:	603b      	str	r3, [r7, #0]
 800abbc:	460b      	mov	r3, r1
 800abbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abc0:	7afb      	ldrb	r3, [r7, #11]
 800abc2:	f003 0307 	and.w	r3, r3, #7
 800abc6:	015b      	lsls	r3, r3, #5
 800abc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	4413      	add	r3, r2
 800abd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	2200      	movs	r2, #0
 800abe2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	2200      	movs	r2, #0
 800abe8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800abea:	7afb      	ldrb	r3, [r7, #11]
 800abec:	f003 0307 	and.w	r3, r3, #7
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800abf6:	7afb      	ldrb	r3, [r7, #11]
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d106      	bne.n	800ac0e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6979      	ldr	r1, [r7, #20]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f004 fbd8 	bl	800f3bc <USB_EPStartXfer>
 800ac0c:	e005      	b.n	800ac1a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6979      	ldr	r1, [r7, #20]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f004 fbd1 	bl	800f3bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3718      	adds	r7, #24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ac30:	78fb      	ldrb	r3, [r7, #3]
 800ac32:	f003 0307 	and.w	r3, r3, #7
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	330a      	adds	r3, #10
 800ac3a:	015b      	lsls	r3, r3, #5
 800ac3c:	4413      	add	r3, r2
 800ac3e:	3304      	adds	r3, #4
 800ac40:	681b      	ldr	r3, [r3, #0]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	370c      	adds	r7, #12
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b086      	sub	sp, #24
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	60f8      	str	r0, [r7, #12]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	603b      	str	r3, [r7, #0]
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac5e:	7afb      	ldrb	r3, [r7, #11]
 800ac60:	f003 0307 	and.w	r3, r3, #7
 800ac64:	015b      	lsls	r3, r3, #5
 800ac66:	3328      	adds	r3, #40	; 0x28
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	2201      	movs	r2, #1
 800ac84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac86:	7afb      	ldrb	r3, [r7, #11]
 800ac88:	f003 0307 	and.w	r3, r3, #7
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ac92:	7afb      	ldrb	r3, [r7, #11]
 800ac94:	f003 0307 	and.w	r3, r3, #7
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d106      	bne.n	800acaa <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6979      	ldr	r1, [r7, #20]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f004 fb8a 	bl	800f3bc <USB_EPStartXfer>
 800aca8:	e005      	b.n	800acb6 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	6979      	ldr	r1, [r7, #20]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f004 fb83 	bl	800f3bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3718      	adds	r7, #24
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800accc:	78fb      	ldrb	r3, [r7, #3]
 800acce:	f003 0207 	and.w	r2, r3, #7
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d901      	bls.n	800acde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e046      	b.n	800ad6c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800acde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	da0b      	bge.n	800acfe <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ace6:	78fb      	ldrb	r3, [r7, #3]
 800ace8:	f003 0307 	and.w	r3, r3, #7
 800acec:	015b      	lsls	r3, r3, #5
 800acee:	3328      	adds	r3, #40	; 0x28
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	4413      	add	r3, r2
 800acf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2201      	movs	r2, #1
 800acfa:	705a      	strb	r2, [r3, #1]
 800acfc:	e009      	b.n	800ad12 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800acfe:	78fb      	ldrb	r3, [r7, #3]
 800ad00:	015b      	lsls	r3, r3, #5
 800ad02:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	4413      	add	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2201      	movs	r2, #1
 800ad16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad18:	78fb      	ldrb	r3, [r7, #3]
 800ad1a:	f003 0307 	and.w	r3, r3, #7
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d101      	bne.n	800ad32 <HAL_PCD_EP_SetStall+0x72>
 800ad2e:	2302      	movs	r3, #2
 800ad30:	e01c      	b.n	800ad6c <HAL_PCD_EP_SetStall+0xac>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68f9      	ldr	r1, [r7, #12]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f004 fde7 	bl	800f914 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ad46:	78fb      	ldrb	r3, [r7, #3]
 800ad48:	f003 0307 	and.w	r3, r3, #7
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d108      	bne.n	800ad62 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	f004 ff01 	bl	800fb64 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	f003 020f 	and.w	r2, r3, #15
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d901      	bls.n	800ad92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e03a      	b.n	800ae08 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ad92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	da0b      	bge.n	800adb2 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad9a:	78fb      	ldrb	r3, [r7, #3]
 800ad9c:	f003 0307 	and.w	r3, r3, #7
 800ada0:	015b      	lsls	r3, r3, #5
 800ada2:	3328      	adds	r3, #40	; 0x28
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	4413      	add	r3, r2
 800ada8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2201      	movs	r2, #1
 800adae:	705a      	strb	r2, [r3, #1]
 800adb0:	e00b      	b.n	800adca <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	f003 0307 	and.w	r3, r3, #7
 800adb8:	015b      	lsls	r3, r3, #5
 800adba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	4413      	add	r3, r2
 800adc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2200      	movs	r2, #0
 800adc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800add0:	78fb      	ldrb	r3, [r7, #3]
 800add2:	f003 0307 	and.w	r3, r3, #7
 800add6:	b2da      	uxtb	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d101      	bne.n	800adea <HAL_PCD_EP_ClrStall+0x76>
 800ade6:	2302      	movs	r3, #2
 800ade8:	e00e      	b.n	800ae08 <HAL_PCD_EP_ClrStall+0x94>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68f9      	ldr	r1, [r7, #12]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f004 fdcd 	bl	800f998 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800ae10:	b590      	push	{r4, r7, lr}
 800ae12:	b089      	sub	sp, #36	; 0x24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ae18:	e26f      	b.n	800b2fa <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ae22:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800ae24:	8afb      	ldrh	r3, [r7, #22]
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	f003 030f 	and.w	r3, r3, #15
 800ae2c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800ae2e:	7d7b      	ldrb	r3, [r7, #21]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f040 8137 	bne.w	800b0a4 <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800ae36:	8afb      	ldrh	r3, [r7, #22]
 800ae38:	f003 0310 	and.w	r3, r3, #16
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d14f      	bne.n	800aee0 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800ae4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae50:	b29c      	uxth	r4, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800ae5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3328      	adds	r3, #40	; 0x28
 800ae66:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	461a      	mov	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	00db      	lsls	r3, r3, #3
 800ae7a:	4413      	add	r3, r2
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	6812      	ldr	r2, [r2, #0]
 800ae80:	4413      	add	r3, r2
 800ae82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	695a      	ldr	r2, [r3, #20]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	69db      	ldr	r3, [r3, #28]
 800ae98:	441a      	add	r2, r3
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800ae9e:	2100      	movs	r1, #0
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f00e fa0b 	bl	80192bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 8223 	beq.w	800b2fa <PCD_EP_ISR_Handler+0x4ea>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f040 821e 	bne.w	800b2fa <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	b292      	uxth	r2, r2
 800aed2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800aede:	e20c      	b.n	800b2fa <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aee6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	881b      	ldrh	r3, [r3, #0]
 800aeee:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800aef0:	8a7b      	ldrh	r3, [r7, #18]
 800aef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d031      	beq.n	800af5e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af02:	b29b      	uxth	r3, r3
 800af04:	461a      	mov	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	4413      	add	r3, r2
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	6812      	ldr	r2, [r2, #0]
 800af12:	4413      	add	r3, r2
 800af14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6818      	ldr	r0, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800af34:	b29b      	uxth	r3, r3
 800af36:	f004 fe62 	bl	800fbfe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	b29a      	uxth	r2, r3
 800af42:	f640 738f 	movw	r3, #3983	; 0xf8f
 800af46:	4013      	ands	r3, r2
 800af48:	b29c      	uxth	r4, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800af52:	b292      	uxth	r2, r2
 800af54:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f00e f986 	bl	8019268 <HAL_PCD_SetupStageCallback>
 800af5c:	e1cd      	b.n	800b2fa <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800af5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f280 81c9 	bge.w	800b2fa <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	881b      	ldrh	r3, [r3, #0]
 800af6e:	b29a      	uxth	r2, r3
 800af70:	f640 738f 	movw	r3, #3983	; 0xf8f
 800af74:	4013      	ands	r3, r2
 800af76:	b29c      	uxth	r4, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800af80:	b292      	uxth	r2, r2
 800af82:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	461a      	mov	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	00db      	lsls	r3, r3, #3
 800af96:	4413      	add	r3, r2
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	6812      	ldr	r2, [r2, #0]
 800af9c:	4413      	add	r3, r2
 800af9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d019      	beq.n	800afe8 <PCD_EP_ISR_Handler+0x1d8>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d015      	beq.n	800afe8 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6818      	ldr	r0, [r3, #0]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6959      	ldr	r1, [r3, #20]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800afcc:	b29b      	uxth	r3, r3
 800afce:	f004 fe16 	bl	800fbfe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	695a      	ldr	r2, [r3, #20]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	69db      	ldr	r3, [r3, #28]
 800afda:	441a      	add	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800afe0:	2100      	movs	r1, #0
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f00e f952 	bl	801928c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	461c      	mov	r4, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	441c      	add	r4, r3
 800affa:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800affe:	60bb      	str	r3, [r7, #8]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d110      	bne.n	800b02a <PCD_EP_ISR_Handler+0x21a>
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b010:	b29a      	uxth	r2, r3
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	801a      	strh	r2, [r3, #0]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	881b      	ldrh	r3, [r3, #0]
 800b01a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b01e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b022:	b29a      	uxth	r2, r3
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	801a      	strh	r2, [r3, #0]
 800b028:	e026      	b.n	800b078 <PCD_EP_ISR_Handler+0x268>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	2b3d      	cmp	r3, #61	; 0x3d
 800b030:	d813      	bhi.n	800b05a <PCD_EP_ISR_Handler+0x24a>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	085b      	lsrs	r3, r3, #1
 800b038:	61bb      	str	r3, [r7, #24]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b00      	cmp	r3, #0
 800b044:	d002      	beq.n	800b04c <PCD_EP_ISR_Handler+0x23c>
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	3301      	adds	r3, #1
 800b04a:	61bb      	str	r3, [r7, #24]
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	b29b      	uxth	r3, r3
 800b050:	029b      	lsls	r3, r3, #10
 800b052:	b29a      	uxth	r2, r3
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	801a      	strh	r2, [r3, #0]
 800b058:	e00e      	b.n	800b078 <PCD_EP_ISR_Handler+0x268>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	095b      	lsrs	r3, r3, #5
 800b060:	61bb      	str	r3, [r7, #24]
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	b29b      	uxth	r3, r3
 800b066:	029b      	lsls	r3, r3, #10
 800b068:	b29b      	uxth	r3, r3
 800b06a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b06e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b072:	b29a      	uxth	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b088:	b29c      	uxth	r4, r3
 800b08a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800b08e:	b29c      	uxth	r4, r3
 800b090:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800b094:	b29c      	uxth	r4, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	4b9f      	ldr	r3, [pc, #636]	; (800b318 <PCD_EP_ISR_Handler+0x508>)
 800b09c:	4323      	orrs	r3, r4
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	8013      	strh	r3, [r2, #0]
 800b0a2:	e12a      	b.n	800b2fa <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	7d7b      	ldrb	r3, [r7, #21]
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	4413      	add	r3, r2
 800b0b0:	881b      	ldrh	r3, [r3, #0]
 800b0b2:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b0b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f280 80cb 	bge.w	800b254 <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	7d7b      	ldrb	r3, [r7, #21]
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	b29c      	uxth	r4, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	7d7b      	ldrb	r3, [r7, #21]
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800b0e6:	b292      	uxth	r2, r2
 800b0e8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b0ea:	7d7b      	ldrb	r3, [r7, #21]
 800b0ec:	015b      	lsls	r3, r3, #5
 800b0ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	7b1b      	ldrb	r3, [r3, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d11f      	bne.n	800b140 <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b108:	b29b      	uxth	r3, r3
 800b10a:	461a      	mov	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	00db      	lsls	r3, r3, #3
 800b112:	4413      	add	r3, r2
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	6812      	ldr	r2, [r2, #0]
 800b118:	4413      	add	r3, r2
 800b11a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b124:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800b126:	8bfb      	ldrh	r3, [r7, #30]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d06e      	beq.n	800b20a <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6818      	ldr	r0, [r3, #0]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6959      	ldr	r1, [r3, #20]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	88da      	ldrh	r2, [r3, #6]
 800b138:	8bfb      	ldrh	r3, [r7, #30]
 800b13a:	f004 fd60 	bl	800fbfe <USB_ReadPMA>
 800b13e:	e064      	b.n	800b20a <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	4413      	add	r3, r2
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	b29b      	uxth	r3, r3
 800b152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d01f      	beq.n	800b19a <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b162:	b29b      	uxth	r3, r3
 800b164:	461a      	mov	r2, r3
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	00db      	lsls	r3, r3, #3
 800b16c:	4413      	add	r3, r2
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	6812      	ldr	r2, [r2, #0]
 800b172:	4413      	add	r3, r2
 800b174:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b17e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800b180:	8bfb      	ldrh	r3, [r7, #30]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d028      	beq.n	800b1d8 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6818      	ldr	r0, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6959      	ldr	r1, [r3, #20]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	891a      	ldrh	r2, [r3, #8]
 800b192:	8bfb      	ldrh	r3, [r7, #30]
 800b194:	f004 fd33 	bl	800fbfe <USB_ReadPMA>
 800b198:	e01e      	b.n	800b1d8 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	4413      	add	r3, r2
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	6812      	ldr	r2, [r2, #0]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1b8:	881b      	ldrh	r3, [r3, #0]
 800b1ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1be:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800b1c0:	8bfb      	ldrh	r3, [r7, #30]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d008      	beq.n	800b1d8 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6818      	ldr	r0, [r3, #0]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6959      	ldr	r1, [r3, #20]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	895a      	ldrh	r2, [r3, #10]
 800b1d2:	8bfb      	ldrh	r3, [r7, #30]
 800b1d4:	f004 fd13 	bl	800fbfe <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	881b      	ldrh	r3, [r3, #0]
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1f2:	b29c      	uxth	r4, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	441a      	add	r2, r3
 800b202:	4b46      	ldr	r3, [pc, #280]	; (800b31c <PCD_EP_ISR_Handler+0x50c>)
 800b204:	4323      	orrs	r3, r4
 800b206:	b29b      	uxth	r3, r3
 800b208:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	69da      	ldr	r2, [r3, #28]
 800b20e:	8bfb      	ldrh	r3, [r7, #30]
 800b210:	441a      	add	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	695a      	ldr	r2, [r3, #20]
 800b21a:	8bfb      	ldrh	r3, [r7, #30]
 800b21c:	441a      	add	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d004      	beq.n	800b234 <PCD_EP_ISR_Handler+0x424>
 800b22a:	8bfa      	ldrh	r2, [r7, #30]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	429a      	cmp	r2, r3
 800b232:	d206      	bcs.n	800b242 <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f00e f826 	bl	801928c <HAL_PCD_DataOutStageCallback>
 800b240:	e008      	b.n	800b254 <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	7819      	ldrb	r1, [r3, #0]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	695a      	ldr	r2, [r3, #20]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7ff fcae 	bl	800abb0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800b254:	8a7b      	ldrh	r3, [r7, #18]
 800b256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d04d      	beq.n	800b2fa <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 800b25e:	7d7b      	ldrb	r3, [r7, #21]
 800b260:	015b      	lsls	r3, r3, #5
 800b262:	3328      	adds	r3, #40	; 0x28
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	4413      	add	r3, r2
 800b268:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	7d7b      	ldrb	r3, [r7, #21]
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	881b      	ldrh	r3, [r3, #0]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b27e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b282:	b29c      	uxth	r4, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	461a      	mov	r2, r3
 800b28a:	7d7b      	ldrb	r3, [r7, #21]
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	441a      	add	r2, r3
 800b290:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800b294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b298:	b29b      	uxth	r3, r3
 800b29a:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	00db      	lsls	r3, r3, #3
 800b2ae:	4413      	add	r3, r2
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	6812      	ldr	r2, [r2, #0]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	695a      	ldr	r2, [r3, #20]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	441a      	add	r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d106      	bne.n	800b2e8 <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f00d ffeb 	bl	80192bc <HAL_PCD_DataInStageCallback>
 800b2e6:	e008      	b.n	800b2fa <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	7819      	ldrb	r1, [r3, #0]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	695a      	ldr	r2, [r3, #20]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7ff fcaa 	bl	800ac4e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b302:	b29b      	uxth	r3, r3
 800b304:	b21b      	sxth	r3, r3
 800b306:	2b00      	cmp	r3, #0
 800b308:	f6ff ad87 	blt.w	800ae1a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3724      	adds	r7, #36	; 0x24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd90      	pop	{r4, r7, pc}
 800b316:	bf00      	nop
 800b318:	ffff8080 	.word	0xffff8080
 800b31c:	ffff80c0 	.word	0xffff80c0

0800b320 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800b320:	b480      	push	{r7}
 800b322:	b087      	sub	sp, #28
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	607b      	str	r3, [r7, #4]
 800b32a:	460b      	mov	r3, r1
 800b32c:	817b      	strh	r3, [r7, #10]
 800b32e:	4613      	mov	r3, r2
 800b330:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b332:	897b      	ldrh	r3, [r7, #10]
 800b334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b338:	b29b      	uxth	r3, r3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d008      	beq.n	800b350 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b33e:	897b      	ldrh	r3, [r7, #10]
 800b340:	f003 0307 	and.w	r3, r3, #7
 800b344:	015b      	lsls	r3, r3, #5
 800b346:	3328      	adds	r3, #40	; 0x28
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	4413      	add	r3, r2
 800b34c:	617b      	str	r3, [r7, #20]
 800b34e:	e006      	b.n	800b35e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b350:	897b      	ldrh	r3, [r7, #10]
 800b352:	015b      	lsls	r3, r3, #5
 800b354:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	4413      	add	r3, r2
 800b35c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b35e:	893b      	ldrh	r3, [r7, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d107      	bne.n	800b374 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	2200      	movs	r2, #0
 800b368:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	80da      	strh	r2, [r3, #6]
 800b372:	e00b      	b.n	800b38c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	2201      	movs	r2, #1
 800b378:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	0c1b      	lsrs	r3, r3, #16
 800b386:	b29a      	uxth	r2, r3
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	371c      	adds	r7, #28
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b39a:	b480      	push	{r7}
 800b39c:	b085      	sub	sp, #20
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	f043 0301 	orr.w	r3, r3, #1
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	f043 0302 	orr.w	r3, r3, #2
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
	...

0800b3f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3f4:	4b05      	ldr	r3, [pc, #20]	; (800b40c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a04      	ldr	r2, [pc, #16]	; (800b40c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b3fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3fe:	6013      	str	r3, [r2, #0]
}
 800b400:	bf00      	nop
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	58000400 	.word	0x58000400

0800b410 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b410:	b480      	push	{r7}
 800b412:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b414:	4b04      	ldr	r3, [pc, #16]	; (800b428 <HAL_PWREx_GetVoltageRange+0x18>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	58000400 	.word	0x58000400

0800b42c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b42c:	b480      	push	{r7}
 800b42e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b430:	4b05      	ldr	r3, [pc, #20]	; (800b448 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	4a04      	ldr	r2, [pc, #16]	; (800b448 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b43a:	6053      	str	r3, [r2, #4]
}
 800b43c:	bf00      	nop
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	58000400 	.word	0x58000400

0800b44c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800b44c:	b480      	push	{r7}
 800b44e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800b450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b45a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b45e:	d101      	bne.n	800b464 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800b460:	2301      	movs	r3, #1
 800b462:	e000      	b.n	800b466 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <LL_RCC_HSE_EnableBypass>:
{
 800b470:	b480      	push	{r7}
 800b472:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800b474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b47e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b482:	6013      	str	r3, [r2, #0]
}
 800b484:	bf00      	nop
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <LL_RCC_HSE_DisableBypass>:
{
 800b48e:	b480      	push	{r7}
 800b490:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800b492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b49c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4a0:	6013      	str	r3, [r2, #0]
}
 800b4a2:	bf00      	nop
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <LL_RCC_HSE_Enable>:
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b4b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b4ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4be:	6013      	str	r3, [r2, #0]
}
 800b4c0:	bf00      	nop
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <LL_RCC_HSE_Disable>:
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b4ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b4d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4dc:	6013      	str	r3, [r2, #0]
}
 800b4de:	bf00      	nop
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <LL_RCC_HSE_IsReady>:
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b4ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4fa:	d101      	bne.n	800b500 <LL_RCC_HSE_IsReady+0x18>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	e000      	b.n	800b502 <LL_RCC_HSE_IsReady+0x1a>
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <LL_RCC_HSI_Enable>:
{
 800b50c:	b480      	push	{r7}
 800b50e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b51a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b51e:	6013      	str	r3, [r2, #0]
}
 800b520:	bf00      	nop
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <LL_RCC_HSI_Disable>:
{
 800b52a:	b480      	push	{r7}
 800b52c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b52e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b53c:	6013      	str	r3, [r2, #0]
}
 800b53e:	bf00      	nop
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <LL_RCC_HSI_IsReady>:
{
 800b548:	b480      	push	{r7}
 800b54a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b54c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b55a:	d101      	bne.n	800b560 <LL_RCC_HSI_IsReady+0x18>
 800b55c:	2301      	movs	r3, #1
 800b55e:	e000      	b.n	800b562 <LL_RCC_HSI_IsReady+0x1a>
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <LL_RCC_HSI_SetCalibTrimming>:
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	061b      	lsls	r3, r3, #24
 800b582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b586:	4313      	orrs	r3, r2
 800b588:	604b      	str	r3, [r1, #4]
}
 800b58a:	bf00      	nop
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <LL_RCC_HSI48_Enable>:
{
 800b596:	b480      	push	{r7}
 800b598:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b59a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b59e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b5a6:	f043 0301 	orr.w	r3, r3, #1
 800b5aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800b5ae:	bf00      	nop
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <LL_RCC_HSI48_Disable>:
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b5bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b5c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b5c8:	f023 0301 	bic.w	r3, r3, #1
 800b5cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800b5d0:	bf00      	nop
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr

0800b5da <LL_RCC_HSI48_IsReady>:
{
 800b5da:	b480      	push	{r7}
 800b5dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b5de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b5e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5e6:	f003 0302 	and.w	r3, r3, #2
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d101      	bne.n	800b5f2 <LL_RCC_HSI48_IsReady+0x18>
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e000      	b.n	800b5f4 <LL_RCC_HSI48_IsReady+0x1a>
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <LL_RCC_LSE_Enable>:
{
 800b5fe:	b480      	push	{r7}
 800b600:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b60a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b60e:	f043 0301 	orr.w	r3, r3, #1
 800b612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b616:	bf00      	nop
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <LL_RCC_LSE_Disable>:
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b62c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b630:	f023 0301 	bic.w	r3, r3, #1
 800b634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b638:	bf00      	nop
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <LL_RCC_LSE_EnableBypass>:
{
 800b642:	b480      	push	{r7}
 800b644:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b64e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b652:	f043 0304 	orr.w	r3, r3, #4
 800b656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b65a:	bf00      	nop
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <LL_RCC_LSE_DisableBypass>:
{
 800b664:	b480      	push	{r7}
 800b666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b674:	f023 0304 	bic.w	r3, r3, #4
 800b678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b67c:	bf00      	nop
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <LL_RCC_LSE_IsReady>:
{
 800b686:	b480      	push	{r7}
 800b688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b68a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b68e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b692:	f003 0302 	and.w	r3, r3, #2
 800b696:	2b02      	cmp	r3, #2
 800b698:	d101      	bne.n	800b69e <LL_RCC_LSE_IsReady+0x18>
 800b69a:	2301      	movs	r3, #1
 800b69c:	e000      	b.n	800b6a0 <LL_RCC_LSE_IsReady+0x1a>
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <LL_RCC_LSI1_Enable>:
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b6ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6ba:	f043 0301 	orr.w	r3, r3, #1
 800b6be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b6c2:	bf00      	nop
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <LL_RCC_LSI1_Disable>:
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b6d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6dc:	f023 0301 	bic.w	r3, r3, #1
 800b6e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b6e4:	bf00      	nop
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <LL_RCC_LSI1_IsReady>:
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b6f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6fa:	f003 0302 	and.w	r3, r3, #2
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d101      	bne.n	800b706 <LL_RCC_LSI1_IsReady+0x18>
 800b702:	2301      	movs	r3, #1
 800b704:	e000      	b.n	800b708 <LL_RCC_LSI1_IsReady+0x1a>
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <LL_RCC_LSI2_Enable>:
{
 800b712:	b480      	push	{r7}
 800b714:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b71a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b71e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b722:	f043 0304 	orr.w	r3, r3, #4
 800b726:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b72a:	bf00      	nop
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <LL_RCC_LSI2_Disable>:
{
 800b734:	b480      	push	{r7}
 800b736:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b73c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b744:	f023 0304 	bic.w	r3, r3, #4
 800b748:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b74c:	bf00      	nop
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <LL_RCC_LSI2_IsReady>:
{
 800b756:	b480      	push	{r7}
 800b758:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b75a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b75e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b762:	f003 0308 	and.w	r3, r3, #8
 800b766:	2b08      	cmp	r3, #8
 800b768:	d101      	bne.n	800b76e <LL_RCC_LSI2_IsReady+0x18>
 800b76a:	2301      	movs	r3, #1
 800b76c:	e000      	b.n	800b770 <LL_RCC_LSI2_IsReady+0x1a>
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <LL_RCC_LSI2_SetTrimming>:
{
 800b77a:	b480      	push	{r7}
 800b77c:	b083      	sub	sp, #12
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800b782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b78a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	021b      	lsls	r3, r3, #8
 800b792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b796:	4313      	orrs	r3, r2
 800b798:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <LL_RCC_MSI_Enable>:
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800b7ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b7b6:	f043 0301 	orr.w	r3, r3, #1
 800b7ba:	6013      	str	r3, [r2, #0]
}
 800b7bc:	bf00      	nop
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <LL_RCC_MSI_Disable>:
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800b7ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b7d4:	f023 0301 	bic.w	r3, r3, #1
 800b7d8:	6013      	str	r3, [r2, #0]
}
 800b7da:	bf00      	nop
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <LL_RCC_MSI_IsReady>:
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b7e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 0302 	and.w	r3, r3, #2
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d101      	bne.n	800b7fa <LL_RCC_MSI_IsReady+0x16>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e000      	b.n	800b7fc <LL_RCC_MSI_IsReady+0x18>
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <LL_RCC_MSI_SetRange>:
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800b80e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b818:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4313      	orrs	r3, r2
 800b820:	600b      	str	r3, [r1, #0]
}
 800b822:	bf00      	nop
 800b824:	370c      	adds	r7, #12
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <LL_RCC_MSI_GetRange>:
{
 800b82e:	b480      	push	{r7}
 800b830:	b083      	sub	sp, #12
 800b832:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800b834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b83e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2bb0      	cmp	r3, #176	; 0xb0
 800b844:	d901      	bls.n	800b84a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800b846:	23b0      	movs	r3, #176	; 0xb0
 800b848:	607b      	str	r3, [r7, #4]
  return msiRange;
 800b84a:	687b      	ldr	r3, [r7, #4]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <LL_RCC_MSI_SetCalibTrimming>:
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800b860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	021b      	lsls	r3, r3, #8
 800b86e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b872:	4313      	orrs	r3, r2
 800b874:	604b      	str	r3, [r1, #4]
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <LL_RCC_SetSysClkSource>:
{
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b88a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	f023 0203 	bic.w	r2, r3, #3
 800b894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	608b      	str	r3, [r1, #8]
}
 800b89e:	bf00      	nop
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <LL_RCC_GetSysClkSource>:
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b8ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	f003 030c 	and.w	r3, r3, #12
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <LL_RCC_SetAHBPrescaler>:
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b083      	sub	sp, #12
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b8ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b8d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	608b      	str	r3, [r1, #8]
}
 800b8de:	bf00      	nop
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <LL_C2_RCC_SetAHBPrescaler>:
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b083      	sub	sp, #12
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800b8f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b8fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b8fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4313      	orrs	r3, r2
 800b906:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800b90a:	bf00      	nop
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <LL_RCC_SetAHB4Prescaler>:
{
 800b916:	b480      	push	{r7}
 800b918:	b083      	sub	sp, #12
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800b91e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b922:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b926:	f023 020f 	bic.w	r2, r3, #15
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	091b      	lsrs	r3, r3, #4
 800b92e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b932:	4313      	orrs	r3, r2
 800b934:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800b938:	bf00      	nop
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <LL_RCC_SetAPB1Prescaler>:
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b94c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	608b      	str	r3, [r1, #8]
}
 800b960:	bf00      	nop
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <LL_RCC_SetAPB2Prescaler>:
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b97e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4313      	orrs	r3, r2
 800b986:	608b      	str	r3, [r1, #8]
}
 800b988:	bf00      	nop
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <LL_RCC_GetAHBPrescaler>:
{
 800b994:	b480      	push	{r7}
 800b996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <LL_C2_RCC_GetAHBPrescaler>:
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800b9b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b9b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b9b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr

0800b9c6 <LL_RCC_GetAHB4Prescaler>:
{
 800b9c6:	b480      	push	{r7}
 800b9c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800b9ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b9ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b9d2:	011b      	lsls	r3, r3, #4
 800b9d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <LL_RCC_GetAPB1Prescaler>:
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b9e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <LL_RCC_GetAPB2Prescaler>:
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b9fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800ba12:	b480      	push	{r7}
 800ba14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ba16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ba20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba24:	6013      	str	r3, [r2, #0]
}
 800ba26:	bf00      	nop
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800ba30:	b480      	push	{r7}
 800ba32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800ba34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ba3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba42:	6013      	str	r3, [r2, #0]
}
 800ba44:	bf00      	nop
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800ba52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba60:	d101      	bne.n	800ba66 <LL_RCC_PLL_IsReady+0x18>
 800ba62:	2301      	movs	r3, #1
 800ba64:	e000      	b.n	800ba68 <LL_RCC_PLL_IsReady+0x1a>
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800ba72:	b480      	push	{r7}
 800ba74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800ba76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	0a1b      	lsrs	r3, r3, #8
 800ba7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800ba90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800baa4:	b480      	push	{r7}
 800baa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800baa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800babc:	b480      	push	{r7}
 800babe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	f003 0303 	and.w	r3, r3, #3
}
 800baca:	4618      	mov	r0, r3
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800bad4:	b480      	push	{r7}
 800bad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800bad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bae6:	d101      	bne.n	800baec <LL_RCC_IsActiveFlag_HPRE+0x18>
 800bae8:	2301      	movs	r3, #1
 800baea:	e000      	b.n	800baee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800baf8:	b480      	push	{r7}
 800bafa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800bafc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bb04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb0c:	d101      	bne.n	800bb12 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e000      	b.n	800bb14 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800bb1e:	b480      	push	{r7}
 800bb20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800bb22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bb2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb32:	d101      	bne.n	800bb38 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e000      	b.n	800bb3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800bb44:	b480      	push	{r7}
 800bb46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800bb48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb56:	d101      	bne.n	800bb5c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e000      	b.n	800bb5e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800bb6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb7a:	d101      	bne.n	800bb80 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	e000      	b.n	800bb82 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb8c:	b590      	push	{r4, r7, lr}
 800bb8e:	b08d      	sub	sp, #52	; 0x34
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e386      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0320 	and.w	r3, r3, #32
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f000 808f 	beq.w	800bcca <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bbac:	f7ff fe7d 	bl	800b8aa <LL_RCC_GetSysClkSource>
 800bbb0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bbb2:	f7ff ff83 	bl	800babc <LL_RCC_PLL_GetMainSource>
 800bbb6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800bbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d005      	beq.n	800bbca <HAL_RCC_OscConfig+0x3e>
 800bbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc0:	2b0c      	cmp	r3, #12
 800bbc2:	d149      	bne.n	800bc58 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d146      	bne.n	800bc58 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bbca:	f7ff fe0b 	bl	800b7e4 <LL_RCC_MSI_IsReady>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d005      	beq.n	800bbe0 <HAL_RCC_OscConfig+0x54>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	69db      	ldr	r3, [r3, #28]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d101      	bne.n	800bbe0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e365      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bbe4:	f7ff fe23 	bl	800b82e <LL_RCC_MSI_GetRange>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	429c      	cmp	r4, r3
 800bbec:	d914      	bls.n	800bc18 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 fd60 	bl	800c6b8 <RCC_SetFlashLatencyFromMSIRange>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d001      	beq.n	800bc02 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e354      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7ff fdfd 	bl	800b806 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6a1b      	ldr	r3, [r3, #32]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7ff fe21 	bl	800b858 <LL_RCC_MSI_SetCalibTrimming>
 800bc16:	e013      	b.n	800bc40 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff fdf2 	bl	800b806 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff fe16 	bl	800b858 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 fd41 	bl	800c6b8 <RCC_SetFlashLatencyFromMSIRange>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d001      	beq.n	800bc40 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e335      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800bc40:	f7f9 fb46 	bl	80052d0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bc44:	4bb4      	ldr	r3, [pc, #720]	; (800bf18 <HAL_RCC_OscConfig+0x38c>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7f9 f827 	bl	8004c9c <HAL_InitTick>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d039      	beq.n	800bcc8 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	e329      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	69db      	ldr	r3, [r3, #28]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01e      	beq.n	800bc9e <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bc60:	f7ff fda2 	bl	800b7a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bc64:	f7fa f9d4 	bl	8006010 <HAL_GetTick>
 800bc68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800bc6a:	e008      	b.n	800bc7e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bc6c:	f7fa f9d0 	bl	8006010 <HAL_GetTick>
 800bc70:	4602      	mov	r2, r0
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	d901      	bls.n	800bc7e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	e316      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 800bc7e:	f7ff fdb1 	bl	800b7e4 <LL_RCC_MSI_IsReady>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d0f1      	beq.n	800bc6c <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7ff fdba 	bl	800b806 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff fdde 	bl	800b858 <LL_RCC_MSI_SetCalibTrimming>
 800bc9c:	e015      	b.n	800bcca <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bc9e:	f7ff fd92 	bl	800b7c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bca2:	f7fa f9b5 	bl	8006010 <HAL_GetTick>
 800bca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800bca8:	e008      	b.n	800bcbc <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bcaa:	f7fa f9b1 	bl	8006010 <HAL_GetTick>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d901      	bls.n	800bcbc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e2f7      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 800bcbc:	f7ff fd92 	bl	800b7e4 <LL_RCC_MSI_IsReady>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1f1      	bne.n	800bcaa <HAL_RCC_OscConfig+0x11e>
 800bcc6:	e000      	b.n	800bcca <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bcc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d05a      	beq.n	800bd8c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bcd6:	f7ff fde8 	bl	800b8aa <LL_RCC_GetSysClkSource>
 800bcda:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bcdc:	f7ff feee 	bl	800babc <LL_RCC_PLL_GetMainSource>
 800bce0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bce2:	6a3b      	ldr	r3, [r7, #32]
 800bce4:	2b08      	cmp	r3, #8
 800bce6:	d005      	beq.n	800bcf4 <HAL_RCC_OscConfig+0x168>
 800bce8:	6a3b      	ldr	r3, [r7, #32]
 800bcea:	2b0c      	cmp	r3, #12
 800bcec:	d10d      	bne.n	800bd0a <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d10a      	bne.n	800bd0a <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bcf4:	f7ff fbf8 	bl	800b4e8 <LL_RCC_HSE_IsReady>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d045      	beq.n	800bd8a <HAL_RCC_OscConfig+0x1fe>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d141      	bne.n	800bd8a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e2d0      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd12:	d102      	bne.n	800bd1a <HAL_RCC_OscConfig+0x18e>
 800bd14:	f7ff fbca 	bl	800b4ac <LL_RCC_HSE_Enable>
 800bd18:	e00d      	b.n	800bd36 <HAL_RCC_OscConfig+0x1aa>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd22:	d104      	bne.n	800bd2e <HAL_RCC_OscConfig+0x1a2>
 800bd24:	f7ff fba4 	bl	800b470 <LL_RCC_HSE_EnableBypass>
 800bd28:	f7ff fbc0 	bl	800b4ac <LL_RCC_HSE_Enable>
 800bd2c:	e003      	b.n	800bd36 <HAL_RCC_OscConfig+0x1aa>
 800bd2e:	f7ff fbcc 	bl	800b4ca <LL_RCC_HSE_Disable>
 800bd32:	f7ff fbac 	bl	800b48e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d012      	beq.n	800bd64 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd3e:	f7fa f967 	bl	8006010 <HAL_GetTick>
 800bd42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800bd44:	e008      	b.n	800bd58 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd46:	f7fa f963 	bl	8006010 <HAL_GetTick>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	2b64      	cmp	r3, #100	; 0x64
 800bd52:	d901      	bls.n	800bd58 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e2a9      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 800bd58:	f7ff fbc6 	bl	800b4e8 <LL_RCC_HSE_IsReady>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d0f1      	beq.n	800bd46 <HAL_RCC_OscConfig+0x1ba>
 800bd62:	e013      	b.n	800bd8c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd64:	f7fa f954 	bl	8006010 <HAL_GetTick>
 800bd68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800bd6a:	e008      	b.n	800bd7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd6c:	f7fa f950 	bl	8006010 <HAL_GetTick>
 800bd70:	4602      	mov	r2, r0
 800bd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	2b64      	cmp	r3, #100	; 0x64
 800bd78:	d901      	bls.n	800bd7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	e296      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 800bd7e:	f7ff fbb3 	bl	800b4e8 <LL_RCC_HSE_IsReady>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1f1      	bne.n	800bd6c <HAL_RCC_OscConfig+0x1e0>
 800bd88:	e000      	b.n	800bd8c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0302 	and.w	r3, r3, #2
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d051      	beq.n	800be3c <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd98:	f7ff fd87 	bl	800b8aa <LL_RCC_GetSysClkSource>
 800bd9c:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bd9e:	f7ff fe8d 	bl	800babc <LL_RCC_PLL_GetMainSource>
 800bda2:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	2b04      	cmp	r3, #4
 800bda8:	d005      	beq.n	800bdb6 <HAL_RCC_OscConfig+0x22a>
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	2b0c      	cmp	r3, #12
 800bdae:	d113      	bne.n	800bdd8 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d110      	bne.n	800bdd8 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bdb6:	f7ff fbc7 	bl	800b548 <LL_RCC_HSI_IsReady>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d005      	beq.n	800bdcc <HAL_RCC_OscConfig+0x240>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d101      	bne.n	800bdcc <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e26f      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	691b      	ldr	r3, [r3, #16]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fbcb 	bl	800b56c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bdd6:	e031      	b.n	800be3c <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d019      	beq.n	800be14 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bde0:	f7ff fb94 	bl	800b50c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bde4:	f7fa f914 	bl	8006010 <HAL_GetTick>
 800bde8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800bdea:	e008      	b.n	800bdfe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bdec:	f7fa f910 	bl	8006010 <HAL_GetTick>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d901      	bls.n	800bdfe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	e256      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 800bdfe:	f7ff fba3 	bl	800b548 <LL_RCC_HSI_IsReady>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d0f1      	beq.n	800bdec <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7ff fbad 	bl	800b56c <LL_RCC_HSI_SetCalibTrimming>
 800be12:	e013      	b.n	800be3c <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800be14:	f7ff fb89 	bl	800b52a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be18:	f7fa f8fa 	bl	8006010 <HAL_GetTick>
 800be1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800be1e:	e008      	b.n	800be32 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be20:	f7fa f8f6 	bl	8006010 <HAL_GetTick>
 800be24:	4602      	mov	r2, r0
 800be26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d901      	bls.n	800be32 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800be2e:	2303      	movs	r3, #3
 800be30:	e23c      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 800be32:	f7ff fb89 	bl	800b548 <LL_RCC_HSI_IsReady>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1f1      	bne.n	800be20 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f003 0308 	and.w	r3, r3, #8
 800be44:	2b00      	cmp	r3, #0
 800be46:	d106      	bne.n	800be56 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 80a2 	beq.w	800bf9a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d075      	beq.n	800bf4a <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f003 0310 	and.w	r3, r3, #16
 800be66:	2b00      	cmp	r3, #0
 800be68:	d046      	beq.n	800bef8 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800be6a:	f7ff fc40 	bl	800b6ee <LL_RCC_LSI1_IsReady>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d113      	bne.n	800be9c <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800be74:	f7ff fc19 	bl	800b6aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800be78:	f7fa f8ca 	bl	8006010 <HAL_GetTick>
 800be7c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800be7e:	e008      	b.n	800be92 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800be80:	f7fa f8c6 	bl	8006010 <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d901      	bls.n	800be92 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e20c      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800be92:	f7ff fc2c 	bl	800b6ee <LL_RCC_LSI1_IsReady>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d0f1      	beq.n	800be80 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800be9c:	f7ff fc39 	bl	800b712 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bea0:	f7fa f8b6 	bl	8006010 <HAL_GetTick>
 800bea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800bea6:	e008      	b.n	800beba <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800bea8:	f7fa f8b2 	bl	8006010 <HAL_GetTick>
 800beac:	4602      	mov	r2, r0
 800beae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	2b03      	cmp	r3, #3
 800beb4:	d901      	bls.n	800beba <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e1f8      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800beba:	f7ff fc4c 	bl	800b756 <LL_RCC_LSI2_IsReady>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d0f1      	beq.n	800bea8 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	699b      	ldr	r3, [r3, #24]
 800bec8:	4618      	mov	r0, r3
 800beca:	f7ff fc56 	bl	800b77a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800bece:	f7ff fbfd 	bl	800b6cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bed2:	f7fa f89d 	bl	8006010 <HAL_GetTick>
 800bed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800bed8:	e008      	b.n	800beec <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800beda:	f7fa f899 	bl	8006010 <HAL_GetTick>
 800bede:	4602      	mov	r2, r0
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d901      	bls.n	800beec <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800bee8:	2303      	movs	r3, #3
 800beea:	e1df      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800beec:	f7ff fbff 	bl	800b6ee <LL_RCC_LSI1_IsReady>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1f1      	bne.n	800beda <HAL_RCC_OscConfig+0x34e>
 800bef6:	e050      	b.n	800bf9a <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800bef8:	f7ff fbd7 	bl	800b6aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800befc:	f7fa f888 	bl	8006010 <HAL_GetTick>
 800bf00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800bf02:	e00b      	b.n	800bf1c <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800bf04:	f7fa f884 	bl	8006010 <HAL_GetTick>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	d904      	bls.n	800bf1c <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e1ca      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
 800bf16:	bf00      	nop
 800bf18:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800bf1c:	f7ff fbe7 	bl	800b6ee <LL_RCC_LSI1_IsReady>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0ee      	beq.n	800bf04 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800bf26:	f7ff fc05 	bl	800b734 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800bf2a:	e008      	b.n	800bf3e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800bf2c:	f7fa f870 	bl	8006010 <HAL_GetTick>
 800bf30:	4602      	mov	r2, r0
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d901      	bls.n	800bf3e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	e1b6      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800bf3e:	f7ff fc0a 	bl	800b756 <LL_RCC_LSI2_IsReady>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1f1      	bne.n	800bf2c <HAL_RCC_OscConfig+0x3a0>
 800bf48:	e027      	b.n	800bf9a <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800bf4a:	f7ff fbf3 	bl	800b734 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf4e:	f7fa f85f 	bl	8006010 <HAL_GetTick>
 800bf52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800bf54:	e008      	b.n	800bf68 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800bf56:	f7fa f85b 	bl	8006010 <HAL_GetTick>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	1ad3      	subs	r3, r2, r3
 800bf60:	2b03      	cmp	r3, #3
 800bf62:	d901      	bls.n	800bf68 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800bf64:	2303      	movs	r3, #3
 800bf66:	e1a1      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800bf68:	f7ff fbf5 	bl	800b756 <LL_RCC_LSI2_IsReady>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1f1      	bne.n	800bf56 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800bf72:	f7ff fbab 	bl	800b6cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf76:	f7fa f84b 	bl	8006010 <HAL_GetTick>
 800bf7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800bf7c:	e008      	b.n	800bf90 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800bf7e:	f7fa f847 	bl	8006010 <HAL_GetTick>
 800bf82:	4602      	mov	r2, r0
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d901      	bls.n	800bf90 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e18d      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800bf90:	f7ff fbad 	bl	800b6ee <LL_RCC_LSI1_IsReady>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1f1      	bne.n	800bf7e <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0304 	and.w	r3, r3, #4
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d05b      	beq.n	800c05e <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bfa6:	4bb5      	ldr	r3, [pc, #724]	; (800c27c <HAL_RCC_OscConfig+0x6f0>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d114      	bne.n	800bfdc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800bfb2:	f7ff fa1d 	bl	800b3f0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bfb6:	f7fa f82b 	bl	8006010 <HAL_GetTick>
 800bfba:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bfbc:	e008      	b.n	800bfd0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfbe:	f7fa f827 	bl	8006010 <HAL_GetTick>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	1ad3      	subs	r3, r2, r3
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	d901      	bls.n	800bfd0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	e16d      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bfd0:	4baa      	ldr	r3, [pc, #680]	; (800c27c <HAL_RCC_OscConfig+0x6f0>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d0f0      	beq.n	800bfbe <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d102      	bne.n	800bfea <HAL_RCC_OscConfig+0x45e>
 800bfe4:	f7ff fb0b 	bl	800b5fe <LL_RCC_LSE_Enable>
 800bfe8:	e00c      	b.n	800c004 <HAL_RCC_OscConfig+0x478>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	2b05      	cmp	r3, #5
 800bff0:	d104      	bne.n	800bffc <HAL_RCC_OscConfig+0x470>
 800bff2:	f7ff fb26 	bl	800b642 <LL_RCC_LSE_EnableBypass>
 800bff6:	f7ff fb02 	bl	800b5fe <LL_RCC_LSE_Enable>
 800bffa:	e003      	b.n	800c004 <HAL_RCC_OscConfig+0x478>
 800bffc:	f7ff fb10 	bl	800b620 <LL_RCC_LSE_Disable>
 800c000:	f7ff fb30 	bl	800b664 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d014      	beq.n	800c036 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c00c:	f7fa f800 	bl	8006010 <HAL_GetTick>
 800c010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c012:	e00a      	b.n	800c02a <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c014:	f7f9 fffc 	bl	8006010 <HAL_GetTick>
 800c018:	4602      	mov	r2, r0
 800c01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c022:	4293      	cmp	r3, r2
 800c024:	d901      	bls.n	800c02a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800c026:	2303      	movs	r3, #3
 800c028:	e140      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c02a:	f7ff fb2c 	bl	800b686 <LL_RCC_LSE_IsReady>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d0ef      	beq.n	800c014 <HAL_RCC_OscConfig+0x488>
 800c034:	e013      	b.n	800c05e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c036:	f7f9 ffeb 	bl	8006010 <HAL_GetTick>
 800c03a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c03c:	e00a      	b.n	800c054 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c03e:	f7f9 ffe7 	bl	8006010 <HAL_GetTick>
 800c042:	4602      	mov	r2, r0
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	f241 3288 	movw	r2, #5000	; 0x1388
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d901      	bls.n	800c054 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800c050:	2303      	movs	r3, #3
 800c052:	e12b      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c054:	f7ff fb17 	bl	800b686 <LL_RCC_LSE_IsReady>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1ef      	bne.n	800c03e <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c066:	2b00      	cmp	r3, #0
 800c068:	d02c      	beq.n	800c0c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d014      	beq.n	800c09c <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c072:	f7ff fa90 	bl	800b596 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c076:	f7f9 ffcb 	bl	8006010 <HAL_GetTick>
 800c07a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c07c:	e008      	b.n	800c090 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c07e:	f7f9 ffc7 	bl	8006010 <HAL_GetTick>
 800c082:	4602      	mov	r2, r0
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	1ad3      	subs	r3, r2, r3
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d901      	bls.n	800c090 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800c08c:	2303      	movs	r3, #3
 800c08e:	e10d      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c090:	f7ff faa3 	bl	800b5da <LL_RCC_HSI48_IsReady>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d0f1      	beq.n	800c07e <HAL_RCC_OscConfig+0x4f2>
 800c09a:	e013      	b.n	800c0c4 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c09c:	f7ff fa8c 	bl	800b5b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0a0:	f7f9 ffb6 	bl	8006010 <HAL_GetTick>
 800c0a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c0a6:	e008      	b.n	800c0ba <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c0a8:	f7f9 ffb2 	bl	8006010 <HAL_GetTick>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d901      	bls.n	800c0ba <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e0f8      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c0ba:	f7ff fa8e 	bl	800b5da <LL_RCC_HSI48_IsReady>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1f1      	bne.n	800c0a8 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 80ee 	beq.w	800c2aa <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c0ce:	f7ff fbec 	bl	800b8aa <LL_RCC_GetSysClkSource>
 800c0d2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c0d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	f040 80af 	bne.w	800c244 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f003 0203 	and.w	r2, r3, #3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d123      	bne.n	800c13c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d11c      	bne.n	800c13c <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	0a1b      	lsrs	r3, r3, #8
 800c106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c10e:	429a      	cmp	r2, r3
 800c110:	d114      	bne.n	800c13c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d10d      	bne.n	800c13c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d106      	bne.n	800c13c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c138:	429a      	cmp	r2, r3
 800c13a:	d05d      	beq.n	800c1f8 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	2b0c      	cmp	r3, #12
 800c140:	d058      	beq.n	800c1f4 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	e0ab      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c154:	f7ff fc6c 	bl	800ba30 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c158:	f7f9 ff5a 	bl	8006010 <HAL_GetTick>
 800c15c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c15e:	e008      	b.n	800c172 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c160:	f7f9 ff56 	bl	8006010 <HAL_GetTick>
 800c164:	4602      	mov	r2, r0
 800c166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c168:	1ad3      	subs	r3, r2, r3
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d901      	bls.n	800c172 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 800c16e:	2303      	movs	r3, #3
 800c170:	e09c      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1ef      	bne.n	800c160 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c184:	68da      	ldr	r2, [r3, #12]
 800c186:	4b3e      	ldr	r3, [pc, #248]	; (800c280 <HAL_RCC_OscConfig+0x6f4>)
 800c188:	4013      	ands	r3, r2
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c192:	4311      	orrs	r1, r2
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c198:	0212      	lsls	r2, r2, #8
 800c19a:	4311      	orrs	r1, r2
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c1a0:	4311      	orrs	r1, r2
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c1a6:	4311      	orrs	r1, r2
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c1ac:	430a      	orrs	r2, r1
 800c1ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c1b6:	f7ff fc2c 	bl	800ba12 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c1ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1c8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c1ca:	f7f9 ff21 	bl	8006010 <HAL_GetTick>
 800c1ce:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1d0:	e008      	b.n	800c1e4 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1d2:	f7f9 ff1d 	bl	8006010 <HAL_GetTick>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	1ad3      	subs	r3, r2, r3
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	d901      	bls.n	800c1e4 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	e063      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d0ef      	beq.n	800c1d2 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c1f2:	e05a      	b.n	800c2aa <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e059      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c202:	2b00      	cmp	r3, #0
 800c204:	d151      	bne.n	800c2aa <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c206:	f7ff fc04 	bl	800ba12 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c20a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c218:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c21a:	f7f9 fef9 	bl	8006010 <HAL_GetTick>
 800c21e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c220:	e008      	b.n	800c234 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c222:	f7f9 fef5 	bl	8006010 <HAL_GetTick>
 800c226:	4602      	mov	r2, r0
 800c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d901      	bls.n	800c234 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 800c230:	2303      	movs	r3, #3
 800c232:	e03b      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d0ef      	beq.n	800c222 <HAL_RCC_OscConfig+0x696>
 800c242:	e032      	b.n	800c2aa <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	2b0c      	cmp	r3, #12
 800c248:	d02d      	beq.n	800c2a6 <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c24a:	f7ff fbf1 	bl	800ba30 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800c24e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c258:	f023 0303 	bic.w	r3, r3, #3
 800c25c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800c25e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c268:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800c26c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c270:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c272:	f7f9 fecd 	bl	8006010 <HAL_GetTick>
 800c276:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c278:	e00d      	b.n	800c296 <HAL_RCC_OscConfig+0x70a>
 800c27a:	bf00      	nop
 800c27c:	58000400 	.word	0x58000400
 800c280:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c284:	f7f9 fec4 	bl	8006010 <HAL_GetTick>
 800c288:	4602      	mov	r2, r0
 800c28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d901      	bls.n	800c296 <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 800c292:	2303      	movs	r3, #3
 800c294:	e00a      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1ef      	bne.n	800c284 <HAL_RCC_OscConfig+0x6f8>
 800c2a4:	e001      	b.n	800c2aa <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e000      	b.n	800c2ac <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3734      	adds	r7, #52	; 0x34
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd90      	pop	{r4, r7, pc}

0800c2b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d101      	bne.n	800c2c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e12a      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c2c8:	4b97      	ldr	r3, [pc, #604]	; (800c528 <HAL_RCC_ClockConfig+0x274>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 0307 	and.w	r3, r3, #7
 800c2d0:	683a      	ldr	r2, [r7, #0]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d91b      	bls.n	800c30e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2d6:	4b94      	ldr	r3, [pc, #592]	; (800c528 <HAL_RCC_ClockConfig+0x274>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f023 0207 	bic.w	r2, r3, #7
 800c2de:	4992      	ldr	r1, [pc, #584]	; (800c528 <HAL_RCC_ClockConfig+0x274>)
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2e6:	f7f9 fe93 	bl	8006010 <HAL_GetTick>
 800c2ea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2ec:	e008      	b.n	800c300 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c2ee:	f7f9 fe8f 	bl	8006010 <HAL_GetTick>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d901      	bls.n	800c300 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e10e      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c300:	4b89      	ldr	r3, [pc, #548]	; (800c528 <HAL_RCC_ClockConfig+0x274>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0307 	and.w	r3, r3, #7
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d1ef      	bne.n	800c2ee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f003 0302 	and.w	r3, r3, #2
 800c316:	2b00      	cmp	r3, #0
 800c318:	d016      	beq.n	800c348 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	4618      	mov	r0, r3
 800c320:	f7ff facf 	bl	800b8c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c324:	f7f9 fe74 	bl	8006010 <HAL_GetTick>
 800c328:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c32a:	e008      	b.n	800c33e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c32c:	f7f9 fe70 	bl	8006010 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	2b02      	cmp	r3, #2
 800c338:	d901      	bls.n	800c33e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e0ef      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c33e:	f7ff fbc9 	bl	800bad4 <LL_RCC_IsActiveFlag_HPRE>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d0f1      	beq.n	800c32c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 0320 	and.w	r3, r3, #32
 800c350:	2b00      	cmp	r3, #0
 800c352:	d016      	beq.n	800c382 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	695b      	ldr	r3, [r3, #20]
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff fac6 	bl	800b8ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c35e:	f7f9 fe57 	bl	8006010 <HAL_GetTick>
 800c362:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c364:	e008      	b.n	800c378 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c366:	f7f9 fe53 	bl	8006010 <HAL_GetTick>
 800c36a:	4602      	mov	r2, r0
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	1ad3      	subs	r3, r2, r3
 800c370:	2b02      	cmp	r3, #2
 800c372:	d901      	bls.n	800c378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c374:	2303      	movs	r3, #3
 800c376:	e0d2      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c378:	f7ff fbbe 	bl	800baf8 <LL_RCC_IsActiveFlag_C2HPRE>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d0f1      	beq.n	800c366 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d016      	beq.n	800c3bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	4618      	mov	r0, r3
 800c394:	f7ff fabf 	bl	800b916 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c398:	f7f9 fe3a 	bl	8006010 <HAL_GetTick>
 800c39c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c39e:	e008      	b.n	800c3b2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c3a0:	f7f9 fe36 	bl	8006010 <HAL_GetTick>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	1ad3      	subs	r3, r2, r3
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d901      	bls.n	800c3b2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	e0b5      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c3b2:	f7ff fbb4 	bl	800bb1e <LL_RCC_IsActiveFlag_SHDHPRE>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d0f1      	beq.n	800c3a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 0304 	and.w	r3, r3, #4
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d016      	beq.n	800c3f6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff fab9 	bl	800b944 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c3d2:	f7f9 fe1d 	bl	8006010 <HAL_GetTick>
 800c3d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c3d8:	e008      	b.n	800c3ec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c3da:	f7f9 fe19 	bl	8006010 <HAL_GetTick>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d901      	bls.n	800c3ec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c3e8:	2303      	movs	r3, #3
 800c3ea:	e098      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c3ec:	f7ff fbaa 	bl	800bb44 <LL_RCC_IsActiveFlag_PPRE1>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d0f1      	beq.n	800c3da <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 0308 	and.w	r3, r3, #8
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d017      	beq.n	800c432 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	00db      	lsls	r3, r3, #3
 800c408:	4618      	mov	r0, r3
 800c40a:	f7ff faaf 	bl	800b96c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c40e:	f7f9 fdff 	bl	8006010 <HAL_GetTick>
 800c412:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c414:	e008      	b.n	800c428 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c416:	f7f9 fdfb 	bl	8006010 <HAL_GetTick>
 800c41a:	4602      	mov	r2, r0
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	1ad3      	subs	r3, r2, r3
 800c420:	2b02      	cmp	r3, #2
 800c422:	d901      	bls.n	800c428 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800c424:	2303      	movs	r3, #3
 800c426:	e07a      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c428:	f7ff fb9e 	bl	800bb68 <LL_RCC_IsActiveFlag_PPRE2>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0f1      	beq.n	800c416 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d043      	beq.n	800c4c6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	2b02      	cmp	r3, #2
 800c444:	d106      	bne.n	800c454 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800c446:	f7ff f84f 	bl	800b4e8 <LL_RCC_HSE_IsReady>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d11e      	bne.n	800c48e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	e064      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	2b03      	cmp	r3, #3
 800c45a:	d106      	bne.n	800c46a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800c45c:	f7ff faf7 	bl	800ba4e <LL_RCC_PLL_IsReady>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d113      	bne.n	800c48e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e059      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d106      	bne.n	800c480 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800c472:	f7ff f9b7 	bl	800b7e4 <LL_RCC_MSI_IsReady>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d108      	bne.n	800c48e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	e04e      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800c480:	f7ff f862 	bl	800b548 <LL_RCC_HSI_IsReady>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e047      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	4618      	mov	r0, r3
 800c494:	f7ff f9f5 	bl	800b882 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c498:	f7f9 fdba 	bl	8006010 <HAL_GetTick>
 800c49c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c49e:	e00a      	b.n	800c4b6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4a0:	f7f9 fdb6 	bl	8006010 <HAL_GetTick>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d901      	bls.n	800c4b6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	e033      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4b6:	f7ff f9f8 	bl	800b8aa <LL_RCC_GetSysClkSource>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d1ec      	bne.n	800c4a0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c4c6:	4b18      	ldr	r3, [pc, #96]	; (800c528 <HAL_RCC_ClockConfig+0x274>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0307 	and.w	r3, r3, #7
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d21b      	bcs.n	800c50c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4d4:	4b14      	ldr	r3, [pc, #80]	; (800c528 <HAL_RCC_ClockConfig+0x274>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f023 0207 	bic.w	r2, r3, #7
 800c4dc:	4912      	ldr	r1, [pc, #72]	; (800c528 <HAL_RCC_ClockConfig+0x274>)
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4e4:	f7f9 fd94 	bl	8006010 <HAL_GetTick>
 800c4e8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4ea:	e008      	b.n	800c4fe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c4ec:	f7f9 fd90 	bl	8006010 <HAL_GetTick>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d901      	bls.n	800c4fe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800c4fa:	2303      	movs	r3, #3
 800c4fc:	e00f      	b.n	800c51e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4fe:	4b0a      	ldr	r3, [pc, #40]	; (800c528 <HAL_RCC_ClockConfig+0x274>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 0307 	and.w	r3, r3, #7
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d1ef      	bne.n	800c4ec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800c50c:	f7f8 fee0 	bl	80052d0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800c510:	f7f9 fd8a 	bl	8006028 <HAL_GetTickPrio>
 800c514:	4603      	mov	r3, r0
 800c516:	4618      	mov	r0, r3
 800c518:	f7f8 fbc0 	bl	8004c9c <HAL_InitTick>
 800c51c:	4603      	mov	r3, r0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	58004000 	.word	0x58004000

0800c52c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c52c:	b590      	push	{r4, r7, lr}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c532:	f7ff f9ba 	bl	800b8aa <LL_RCC_GetSysClkSource>
 800c536:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10a      	bne.n	800c554 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c53e:	f7ff f976 	bl	800b82e <LL_RCC_MSI_GetRange>
 800c542:	4603      	mov	r3, r0
 800c544:	091b      	lsrs	r3, r3, #4
 800c546:	f003 030f 	and.w	r3, r3, #15
 800c54a:	4a2a      	ldr	r2, [pc, #168]	; (800c5f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800c54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c550:	60fb      	str	r3, [r7, #12]
 800c552:	e04a      	b.n	800c5ea <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b04      	cmp	r3, #4
 800c558:	d102      	bne.n	800c560 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c55a:	4b27      	ldr	r3, [pc, #156]	; (800c5f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c55c:	60fb      	str	r3, [r7, #12]
 800c55e:	e044      	b.n	800c5ea <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b08      	cmp	r3, #8
 800c564:	d10a      	bne.n	800c57c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c566:	f7fe ff71 	bl	800b44c <LL_RCC_HSE_IsEnabledDiv2>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d102      	bne.n	800c576 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800c570:	4b21      	ldr	r3, [pc, #132]	; (800c5f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c572:	60fb      	str	r3, [r7, #12]
 800c574:	e039      	b.n	800c5ea <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800c576:	4b21      	ldr	r3, [pc, #132]	; (800c5fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800c578:	60fb      	str	r3, [r7, #12]
 800c57a:	e036      	b.n	800c5ea <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800c57c:	f7ff fa9e 	bl	800babc <LL_RCC_PLL_GetMainSource>
 800c580:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	2b02      	cmp	r3, #2
 800c586:	d002      	beq.n	800c58e <HAL_RCC_GetSysClockFreq+0x62>
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d003      	beq.n	800c594 <HAL_RCC_GetSysClockFreq+0x68>
 800c58c:	e00d      	b.n	800c5aa <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800c58e:	4b1a      	ldr	r3, [pc, #104]	; (800c5f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c590:	60bb      	str	r3, [r7, #8]
        break;
 800c592:	e015      	b.n	800c5c0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c594:	f7fe ff5a 	bl	800b44c <LL_RCC_HSE_IsEnabledDiv2>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d102      	bne.n	800c5a4 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800c59e:	4b16      	ldr	r3, [pc, #88]	; (800c5f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c5a0:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800c5a2:	e00d      	b.n	800c5c0 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800c5a4:	4b15      	ldr	r3, [pc, #84]	; (800c5fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800c5a6:	60bb      	str	r3, [r7, #8]
        break;
 800c5a8:	e00a      	b.n	800c5c0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c5aa:	f7ff f940 	bl	800b82e <LL_RCC_MSI_GetRange>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	091b      	lsrs	r3, r3, #4
 800c5b2:	f003 030f 	and.w	r3, r3, #15
 800c5b6:	4a0f      	ldr	r2, [pc, #60]	; (800c5f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800c5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5bc:	60bb      	str	r3, [r7, #8]
        break;
 800c5be:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800c5c0:	f7ff fa57 	bl	800ba72 <LL_RCC_PLL_GetN>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	fb03 f402 	mul.w	r4, r3, r2
 800c5cc:	f7ff fa6a 	bl	800baa4 <LL_RCC_PLL_GetDivider>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	091b      	lsrs	r3, r3, #4
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	fbb4 f4f3 	udiv	r4, r4, r3
 800c5da:	f7ff fa57 	bl	800ba8c <LL_RCC_PLL_GetR>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	0f5b      	lsrs	r3, r3, #29
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	fbb4 f3f3 	udiv	r3, r4, r3
 800c5e8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3714      	adds	r7, #20
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd90      	pop	{r4, r7, pc}
 800c5f4:	0801ba80 	.word	0x0801ba80
 800c5f8:	00f42400 	.word	0x00f42400
 800c5fc:	01e84800 	.word	0x01e84800

0800c600 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c600:	b598      	push	{r3, r4, r7, lr}
 800c602:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c604:	f7ff ff92 	bl	800c52c <HAL_RCC_GetSysClockFreq>
 800c608:	4604      	mov	r4, r0
 800c60a:	f7ff f9c3 	bl	800b994 <LL_RCC_GetAHBPrescaler>
 800c60e:	4603      	mov	r3, r0
 800c610:	091b      	lsrs	r3, r3, #4
 800c612:	f003 030f 	and.w	r3, r3, #15
 800c616:	4a03      	ldr	r2, [pc, #12]	; (800c624 <HAL_RCC_GetHCLKFreq+0x24>)
 800c618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c61c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800c620:	4618      	mov	r0, r3
 800c622:	bd98      	pop	{r3, r4, r7, pc}
 800c624:	0801ba20 	.word	0x0801ba20

0800c628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c628:	b598      	push	{r3, r4, r7, lr}
 800c62a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c62c:	f7ff ffe8 	bl	800c600 <HAL_RCC_GetHCLKFreq>
 800c630:	4604      	mov	r4, r0
 800c632:	f7ff f9e2 	bl	800b9fa <LL_RCC_GetAPB2Prescaler>
 800c636:	4603      	mov	r3, r0
 800c638:	0adb      	lsrs	r3, r3, #11
 800c63a:	f003 0307 	and.w	r3, r3, #7
 800c63e:	4a04      	ldr	r2, [pc, #16]	; (800c650 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c644:	f003 031f 	and.w	r3, r3, #31
 800c648:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	bd98      	pop	{r3, r4, r7, pc}
 800c650:	0801ba60 	.word	0x0801ba60

0800c654 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	226f      	movs	r2, #111	; 0x6f
 800c662:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800c664:	f7ff f921 	bl	800b8aa <LL_RCC_GetSysClkSource>
 800c668:	4602      	mov	r2, r0
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800c66e:	f7ff f991 	bl	800b994 <LL_RCC_GetAHBPrescaler>
 800c672:	4602      	mov	r2, r0
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800c678:	f7ff f9b3 	bl	800b9e2 <LL_RCC_GetAPB1Prescaler>
 800c67c:	4602      	mov	r2, r0
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800c682:	f7ff f9ba 	bl	800b9fa <LL_RCC_GetAPB2Prescaler>
 800c686:	4602      	mov	r2, r0
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800c68c:	f7ff f98e 	bl	800b9ac <LL_C2_RCC_GetAHBPrescaler>
 800c690:	4602      	mov	r2, r0
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800c696:	f7ff f996 	bl	800b9c6 <LL_RCC_GetAHB4Prescaler>
 800c69a:	4602      	mov	r2, r0
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800c6a0:	4b04      	ldr	r3, [pc, #16]	; (800c6b4 <HAL_RCC_GetClockConfig+0x60>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0207 	and.w	r2, r3, #7
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	601a      	str	r2, [r3, #0]
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	58004000 	.word	0x58004000

0800c6b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c6b8:	b590      	push	{r4, r7, lr}
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2bb0      	cmp	r3, #176	; 0xb0
 800c6c4:	d903      	bls.n	800c6ce <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c6c6:	4b15      	ldr	r3, [pc, #84]	; (800c71c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ca:	60fb      	str	r3, [r7, #12]
 800c6cc:	e007      	b.n	800c6de <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	091b      	lsrs	r3, r3, #4
 800c6d2:	f003 030f 	and.w	r3, r3, #15
 800c6d6:	4a11      	ldr	r2, [pc, #68]	; (800c71c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6dc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c6de:	f7ff f972 	bl	800b9c6 <LL_RCC_GetAHB4Prescaler>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	091b      	lsrs	r3, r3, #4
 800c6e6:	f003 030f 	and.w	r3, r3, #15
 800c6ea:	4a0d      	ldr	r2, [pc, #52]	; (800c720 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6f0:	68fa      	ldr	r2, [r7, #12]
 800c6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6f6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	4a0a      	ldr	r2, [pc, #40]	; (800c724 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c700:	0c9c      	lsrs	r4, r3, #18
 800c702:	f7fe fe85 	bl	800b410 <HAL_PWREx_GetVoltageRange>
 800c706:	4603      	mov	r3, r0
 800c708:	4619      	mov	r1, r3
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 f80c 	bl	800c728 <RCC_SetFlashLatency>
 800c710:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800c712:	4618      	mov	r0, r3
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	bd90      	pop	{r4, r7, pc}
 800c71a:	bf00      	nop
 800c71c:	0801ba80 	.word	0x0801ba80
 800c720:	0801ba20 	.word	0x0801ba20
 800c724:	431bde83 	.word	0x431bde83

0800c728 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c728:	b590      	push	{r4, r7, lr}
 800c72a:	b093      	sub	sp, #76	; 0x4c
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c732:	4b39      	ldr	r3, [pc, #228]	; (800c818 <RCC_SetFlashLatency+0xf0>)
 800c734:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c73a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c73e:	4a37      	ldr	r2, [pc, #220]	; (800c81c <RCC_SetFlashLatency+0xf4>)
 800c740:	f107 031c 	add.w	r3, r7, #28
 800c744:	ca07      	ldmia	r2, {r0, r1, r2}
 800c746:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c74a:	4b35      	ldr	r3, [pc, #212]	; (800c820 <RCC_SetFlashLatency+0xf8>)
 800c74c:	f107 040c 	add.w	r4, r7, #12
 800c750:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c752:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800c756:	2300      	movs	r3, #0
 800c758:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c760:	d11c      	bne.n	800c79c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c762:	2300      	movs	r3, #0
 800c764:	643b      	str	r3, [r7, #64]	; 0x40
 800c766:	e015      	b.n	800c794 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800c768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c770:	4413      	add	r3, r2
 800c772:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d808      	bhi.n	800c78e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c77c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c784:	4413      	add	r3, r2
 800c786:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c78a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800c78c:	e022      	b.n	800c7d4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c78e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c790:	3301      	adds	r3, #1
 800c792:	643b      	str	r3, [r7, #64]	; 0x40
 800c794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c796:	2b03      	cmp	r3, #3
 800c798:	d9e6      	bls.n	800c768 <RCC_SetFlashLatency+0x40>
 800c79a:	e01b      	b.n	800c7d4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c79c:	2300      	movs	r3, #0
 800c79e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7a0:	e015      	b.n	800c7ce <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800c7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c7aa:	4413      	add	r3, r2
 800c7ac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d808      	bhi.n	800c7c8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c7be:	4413      	add	r3, r2
 800c7c0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c7c4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800c7c6:	e005      	b.n	800c7d4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d9e6      	bls.n	800c7a2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800c7d4:	4b13      	ldr	r3, [pc, #76]	; (800c824 <RCC_SetFlashLatency+0xfc>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f023 0207 	bic.w	r2, r3, #7
 800c7dc:	4911      	ldr	r1, [pc, #68]	; (800c824 <RCC_SetFlashLatency+0xfc>)
 800c7de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c7e4:	f7f9 fc14 	bl	8006010 <HAL_GetTick>
 800c7e8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c7ea:	e008      	b.n	800c7fe <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c7ec:	f7f9 fc10 	bl	8006010 <HAL_GetTick>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f4:	1ad3      	subs	r3, r2, r3
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	d901      	bls.n	800c7fe <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800c7fa:	2303      	movs	r3, #3
 800c7fc:	e007      	b.n	800c80e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c7fe:	4b09      	ldr	r3, [pc, #36]	; (800c824 <RCC_SetFlashLatency+0xfc>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 0307 	and.w	r3, r3, #7
 800c806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c808:	429a      	cmp	r2, r3
 800c80a:	d1ef      	bne.n	800c7ec <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	374c      	adds	r7, #76	; 0x4c
 800c812:	46bd      	mov	sp, r7
 800c814:	bd90      	pop	{r4, r7, pc}
 800c816:	bf00      	nop
 800c818:	0801b3a4 	.word	0x0801b3a4
 800c81c:	0801b3b4 	.word	0x0801b3b4
 800c820:	0801b3c0 	.word	0x0801b3c0
 800c824:	58004000 	.word	0x58004000

0800c828 <LL_RCC_LSE_IsEnabled>:
{
 800c828:	b480      	push	{r7}
 800c82a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800c82c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c834:	f003 0301 	and.w	r3, r3, #1
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d101      	bne.n	800c840 <LL_RCC_LSE_IsEnabled+0x18>
 800c83c:	2301      	movs	r3, #1
 800c83e:	e000      	b.n	800c842 <LL_RCC_LSE_IsEnabled+0x1a>
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <LL_RCC_LSE_IsReady>:
{
 800c84c:	b480      	push	{r7}
 800c84e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c858:	f003 0302 	and.w	r3, r3, #2
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d101      	bne.n	800c864 <LL_RCC_LSE_IsReady+0x18>
 800c860:	2301      	movs	r3, #1
 800c862:	e000      	b.n	800c866 <LL_RCC_LSE_IsReady+0x1a>
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <LL_RCC_SetRFWKPClockSource>:
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800c878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c87c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c880:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800c890:	bf00      	nop
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <LL_RCC_SetSMPSClockSource>:
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800c8a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8aa:	f023 0203 	bic.w	r2, r3, #3
 800c8ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800c8b8:	bf00      	nop
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <LL_RCC_SetSMPSPrescaler>:
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800c8cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c8d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	624b      	str	r3, [r1, #36]	; 0x24
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <LL_RCC_SetUSARTClockSource>:
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800c8f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8fc:	f023 0203 	bic.w	r2, r3, #3
 800c900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4313      	orrs	r3, r2
 800c908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <LL_RCC_SetLPUARTClockSource>:
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800c920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c928:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c92c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4313      	orrs	r3, r2
 800c934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c938:	bf00      	nop
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr

0800c944 <LL_RCC_SetI2CClockSource>:
{
 800c944:	b480      	push	{r7}
 800c946:	b083      	sub	sp, #12
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800c94c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c950:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	091b      	lsrs	r3, r3, #4
 800c958:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800c95c:	43db      	mvns	r3, r3
 800c95e:	401a      	ands	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	011b      	lsls	r3, r3, #4
 800c964:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800c968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c96c:	4313      	orrs	r3, r2
 800c96e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c972:	bf00      	nop
 800c974:	370c      	adds	r7, #12
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr

0800c97e <LL_RCC_SetLPTIMClockSource>:
{
 800c97e:	b480      	push	{r7}
 800c980:	b083      	sub	sp, #12
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800c986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c98a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	0c1b      	lsrs	r3, r3, #16
 800c992:	041b      	lsls	r3, r3, #16
 800c994:	43db      	mvns	r3, r3
 800c996:	401a      	ands	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	041b      	lsls	r3, r3, #16
 800c99c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c9a6:	bf00      	nop
 800c9a8:	370c      	adds	r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <LL_RCC_SetSAIClockSource>:
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b083      	sub	sp, #12
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800c9ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c9c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c9d2:	bf00      	nop
 800c9d4:	370c      	adds	r7, #12
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr

0800c9de <LL_RCC_SetRNGClockSource>:
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b083      	sub	sp, #12
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800c9e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c9f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c9fe:	bf00      	nop
 800ca00:	370c      	adds	r7, #12
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr

0800ca0a <LL_RCC_SetCLK48ClockSource>:
{
 800ca0a:	b480      	push	{r7}
 800ca0c:	b083      	sub	sp, #12
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800ca12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ca1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ca2a:	bf00      	nop
 800ca2c:	370c      	adds	r7, #12
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <LL_RCC_SetUSBClockSource>:
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b082      	sub	sp, #8
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7ff ffe3 	bl	800ca0a <LL_RCC_SetCLK48ClockSource>
}
 800ca44:	bf00      	nop
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <LL_RCC_SetADCClockSource>:
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800ca54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ca60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ca6c:	bf00      	nop
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <LL_RCC_SetRTCClockSource>:
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800ca80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <LL_RCC_GetRTCClockSource>:
{
 800caa4:	b480      	push	{r7}
 800caa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800caa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800caac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr

0800cabe <LL_RCC_ForceBackupDomainReset>:
{
 800cabe:	b480      	push	{r7}
 800cac0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800cad6:	bf00      	nop
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <LL_RCC_ReleaseBackupDomainReset>:
{
 800cae0:	b480      	push	{r7}
 800cae2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800caf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800caf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800caf8:	bf00      	nop
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <LL_RCC_PLLSAI1_Enable>:
{
 800cb02:	b480      	push	{r7}
 800cb04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cb06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cb10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb14:	6013      	str	r3, [r2, #0]
}
 800cb16:	bf00      	nop
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <LL_RCC_PLLSAI1_Disable>:
{
 800cb20:	b480      	push	{r7}
 800cb22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cb24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cb2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb32:	6013      	str	r3, [r2, #0]
}
 800cb34:	bf00      	nop
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <LL_RCC_PLLSAI1_IsReady>:
{
 800cb3e:	b480      	push	{r7}
 800cb40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800cb42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb50:	d101      	bne.n	800cb56 <LL_RCC_PLLSAI1_IsReady+0x18>
 800cb52:	2301      	movs	r3, #1
 800cb54:	e000      	b.n	800cb58 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b088      	sub	sp, #32
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800cb6e:	2300      	movs	r3, #0
 800cb70:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d033      	beq.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb86:	d00c      	beq.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800cb88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb8c:	d802      	bhi.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d010      	beq.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800cb92:	e017      	b.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800cb94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb98:	d017      	beq.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x68>
 800cb9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cb9e:	d016      	beq.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800cba0:	e010      	b.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800cba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cbac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbb0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800cbb2:	e00d      	b.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	3304      	adds	r3, #4
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f000 f947 	bl	800ce4c <RCCEx_PLLSAI1_ConfigNP>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800cbc2:	e005      	b.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	77fb      	strb	r3, [r7, #31]
        break;
 800cbc8:	e002      	b.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800cbca:	bf00      	nop
 800cbcc:	e000      	b.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800cbce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbd0:	7ffb      	ldrb	r3, [r7, #31]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d105      	bne.n	800cbe2 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7ff fee9 	bl	800c9b2 <LL_RCC_SetSAIClockSource>
 800cbe0:	e001      	b.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbe2:	7ffb      	ldrb	r3, [r7, #31]
 800cbe4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d046      	beq.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800cbf2:	f7ff ff57 	bl	800caa4 <LL_RCC_GetRTCClockSource>
 800cbf6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbfc:	69ba      	ldr	r2, [r7, #24]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d03c      	beq.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cc02:	f7fe fbf5 	bl	800b3f0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d105      	bne.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7ff ff31 	bl	800ca78 <LL_RCC_SetRTCClockSource>
 800cc16:	e02e      	b.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800cc18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc20:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800cc22:	f7ff ff4c 	bl	800cabe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800cc26:	f7ff ff5b 	bl	800cae0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc34:	4313      	orrs	r3, r2
 800cc36:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800cc38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800cc42:	f7ff fdf1 	bl	800c828 <LL_RCC_LSE_IsEnabled>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d114      	bne.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cc4c:	f7f9 f9e0 	bl	8006010 <HAL_GetTick>
 800cc50:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800cc52:	e00b      	b.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc54:	f7f9 f9dc 	bl	8006010 <HAL_GetTick>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	1ad3      	subs	r3, r2, r3
 800cc5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d902      	bls.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800cc66:	2303      	movs	r3, #3
 800cc68:	77fb      	strb	r3, [r7, #31]
              break;
 800cc6a:	e004      	b.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800cc6c:	f7ff fdee 	bl	800c84c <LL_RCC_LSE_IsReady>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d1ee      	bne.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800cc76:	7ffb      	ldrb	r3, [r7, #31]
 800cc78:	77bb      	strb	r3, [r7, #30]
 800cc7a:	e001      	b.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc7c:	7ffb      	ldrb	r3, [r7, #31]
 800cc7e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d004      	beq.n	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	699b      	ldr	r3, [r3, #24]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7ff fe2b 	bl	800c8ec <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f003 0302 	and.w	r3, r3, #2
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d004      	beq.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	69db      	ldr	r3, [r3, #28]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff fe36 	bl	800c918 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 0310 	and.w	r3, r3, #16
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d004      	beq.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7ff fe5e 	bl	800c97e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 0320 	and.w	r3, r3, #32
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d004      	beq.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7ff fe53 	bl	800c97e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 0304 	and.w	r3, r3, #4
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d004      	beq.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a1b      	ldr	r3, [r3, #32]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7ff fe2b 	bl	800c944 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 0308 	and.w	r3, r3, #8
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d004      	beq.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7ff fe20 	bl	800c944 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d022      	beq.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff fe8e 	bl	800ca36 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd22:	d107      	bne.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800cd24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cd32:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd3c:	d10b      	bne.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3304      	adds	r3, #4
 800cd42:	4618      	mov	r0, r3
 800cd44:	f000 f8dd 	bl	800cf02 <RCCEx_PLLSAI1_ConfigNQ>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800cd4c:	7ffb      	ldrb	r3, [r7, #31]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d001      	beq.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800cd52:	7ffb      	ldrb	r3, [r7, #31]
 800cd54:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d02b      	beq.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd6a:	d008      	beq.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd74:	d003      	beq.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d105      	bne.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x228>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7ff fe2b 	bl	800c9de <LL_RCC_SetRNGClockSource>
 800cd88:	e00a      	b.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd92:	60fb      	str	r3, [r7, #12]
 800cd94:	2000      	movs	r0, #0
 800cd96:	f7ff fe22 	bl	800c9de <LL_RCC_SetRNGClockSource>
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f7ff fe35 	bl	800ca0a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800cda8:	d107      	bne.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800cdaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cdb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdb8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d022      	beq.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7ff fe3e 	bl	800ca4c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdd8:	d107      	bne.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cdda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cde4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cde8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdf2:	d10b      	bne.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	3304      	adds	r3, #4
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f000 f8dd 	bl	800cfb8 <RCCEx_PLLSAI1_ConfigNR>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800ce02:	7ffb      	ldrb	r3, [r7, #31]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d001      	beq.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800ce08:	7ffb      	ldrb	r3, [r7, #31]
 800ce0a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d004      	beq.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff fd27 	bl	800c870 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d009      	beq.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff fd46 	bl	800c8c4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7ff fd2d 	bl	800c89c <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 800ce42:	7fbb      	ldrb	r3, [r7, #30]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3720      	adds	r7, #32
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ce58:	f7ff fe62 	bl	800cb20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ce5c:	f7f9 f8d8 	bl	8006010 <HAL_GetTick>
 800ce60:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ce62:	e009      	b.n	800ce78 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce64:	f7f9 f8d4 	bl	8006010 <HAL_GetTick>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	1ad3      	subs	r3, r2, r3
 800ce6e:	2b02      	cmp	r3, #2
 800ce70:	d902      	bls.n	800ce78 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800ce72:	2303      	movs	r3, #3
 800ce74:	73fb      	strb	r3, [r7, #15]
      break;
 800ce76:	e004      	b.n	800ce82 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ce78:	f7ff fe61 	bl	800cb3e <LL_RCC_PLLSAI1_IsReady>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1f0      	bne.n	800ce64 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ce82:	7bfb      	ldrb	r3, [r7, #15]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d137      	bne.n	800cef8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ce88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	021b      	lsls	r3, r3, #8
 800ce98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800cea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cea4:	691b      	ldr	r3, [r3, #16]
 800cea6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ceb6:	f7ff fe24 	bl	800cb02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceba:	f7f9 f8a9 	bl	8006010 <HAL_GetTick>
 800cebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cec0:	e009      	b.n	800ced6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cec2:	f7f9 f8a5 	bl	8006010 <HAL_GetTick>
 800cec6:	4602      	mov	r2, r0
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	2b02      	cmp	r3, #2
 800cece:	d902      	bls.n	800ced6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800ced0:	2303      	movs	r3, #3
 800ced2:	73fb      	strb	r3, [r7, #15]
        break;
 800ced4:	e004      	b.n	800cee0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ced6:	f7ff fe32 	bl	800cb3e <LL_RCC_PLLSAI1_IsReady>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d1f0      	bne.n	800cec2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800cee0:	7bfb      	ldrb	r3, [r7, #15]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d108      	bne.n	800cef8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800cee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ceea:	691a      	ldr	r2, [r3, #16]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	691b      	ldr	r3, [r3, #16]
 800cef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cef4:	4313      	orrs	r3, r2
 800cef6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b084      	sub	sp, #16
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800cf0e:	f7ff fe07 	bl	800cb20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cf12:	f7f9 f87d 	bl	8006010 <HAL_GetTick>
 800cf16:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cf18:	e009      	b.n	800cf2e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cf1a:	f7f9 f879 	bl	8006010 <HAL_GetTick>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d902      	bls.n	800cf2e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf2c:	e004      	b.n	800cf38 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cf2e:	f7ff fe06 	bl	800cb3e <LL_RCC_PLLSAI1_IsReady>
 800cf32:	4603      	mov	r3, r0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1f0      	bne.n	800cf1a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800cf38:	7bfb      	ldrb	r3, [r7, #15]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d137      	bne.n	800cfae <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800cf3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	021b      	lsls	r3, r3, #8
 800cf4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cf52:	4313      	orrs	r3, r2
 800cf54:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800cf56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf5a:	691b      	ldr	r3, [r3, #16]
 800cf5c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800cf6c:	f7ff fdc9 	bl	800cb02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf70:	f7f9 f84e 	bl	8006010 <HAL_GetTick>
 800cf74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cf76:	e009      	b.n	800cf8c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cf78:	f7f9 f84a 	bl	8006010 <HAL_GetTick>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d902      	bls.n	800cf8c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800cf86:	2303      	movs	r3, #3
 800cf88:	73fb      	strb	r3, [r7, #15]
        break;
 800cf8a:	e004      	b.n	800cf96 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cf8c:	f7ff fdd7 	bl	800cb3e <LL_RCC_PLLSAI1_IsReady>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d1f0      	bne.n	800cf78 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d108      	bne.n	800cfae <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800cf9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfa0:	691a      	ldr	r2, [r3, #16]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	691b      	ldr	r3, [r3, #16]
 800cfa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800cfae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800cfc4:	f7ff fdac 	bl	800cb20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cfc8:	f7f9 f822 	bl	8006010 <HAL_GetTick>
 800cfcc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cfce:	e009      	b.n	800cfe4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cfd0:	f7f9 f81e 	bl	8006010 <HAL_GetTick>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d902      	bls.n	800cfe4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800cfde:	2303      	movs	r3, #3
 800cfe0:	73fb      	strb	r3, [r7, #15]
      break;
 800cfe2:	e004      	b.n	800cfee <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cfe4:	f7ff fdab 	bl	800cb3e <LL_RCC_PLLSAI1_IsReady>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1f0      	bne.n	800cfd0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800cfee:	7bfb      	ldrb	r3, [r7, #15]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d137      	bne.n	800d064 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800cff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cff8:	691b      	ldr	r3, [r3, #16]
 800cffa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	021b      	lsls	r3, r3, #8
 800d004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d008:	4313      	orrs	r3, r2
 800d00a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d00c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d01e:	4313      	orrs	r3, r2
 800d020:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d022:	f7ff fd6e 	bl	800cb02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d026:	f7f8 fff3 	bl	8006010 <HAL_GetTick>
 800d02a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d02c:	e009      	b.n	800d042 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d02e:	f7f8 ffef 	bl	8006010 <HAL_GetTick>
 800d032:	4602      	mov	r2, r0
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d902      	bls.n	800d042 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d03c:	2303      	movs	r3, #3
 800d03e:	73fb      	strb	r3, [r7, #15]
        break;
 800d040:	e004      	b.n	800d04c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d042:	f7ff fd7c 	bl	800cb3e <LL_RCC_PLLSAI1_IsReady>
 800d046:	4603      	mov	r3, r0
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d1f0      	bne.n	800d02e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d04c:	7bfb      	ldrb	r3, [r7, #15]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d108      	bne.n	800d064 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d056:	691a      	ldr	r2, [r3, #16]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	691b      	ldr	r3, [r3, #16]
 800d05c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d060:	4313      	orrs	r3, r2
 800d062:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d064:	7bfb      	ldrb	r3, [r7, #15]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b082      	sub	sp, #8
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d101      	bne.n	800d080 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d07c:	2301      	movs	r3, #1
 800d07e:	e090      	b.n	800d1a2 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d106      	bne.n	800d09a <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7f7 fbcf 	bl	8004838 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2202      	movs	r2, #2
 800d09e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	22ca      	movs	r2, #202	; 0xca
 800d0a8:	625a      	str	r2, [r3, #36]	; 0x24
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2253      	movs	r2, #83	; 0x53
 800d0b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 faba 	bl	800d62c <RTC_EnterInitMode>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d009      	beq.n	800d0d2 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	22ff      	movs	r2, #255	; 0xff
 800d0c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2204      	movs	r2, #4
 800d0ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e067      	b.n	800d1a2 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	6812      	ldr	r2, [r2, #0]
 800d0dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0e4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	6899      	ldr	r1, [r3, #8]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	685a      	ldr	r2, [r3, #4]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	691b      	ldr	r3, [r3, #16]
 800d0f4:	431a      	orrs	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	699b      	ldr	r3, [r3, #24]
 800d0fa:	431a      	orrs	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	430a      	orrs	r2, r1
 800d102:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	68d2      	ldr	r2, [r2, #12]
 800d10c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	6919      	ldr	r1, [r3, #16]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	041a      	lsls	r2, r3, #16
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	430a      	orrs	r2, r1
 800d120:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	68da      	ldr	r2, [r3, #12]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d130:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f022 0203 	bic.w	r2, r2, #3
 800d140:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	69da      	ldr	r2, [r3, #28]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	695b      	ldr	r3, [r3, #20]
 800d150:	431a      	orrs	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	430a      	orrs	r2, r1
 800d158:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	f003 0320 	and.w	r3, r3, #32
 800d164:	2b00      	cmp	r3, #0
 800d166:	d113      	bne.n	800d190 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 fa39 	bl	800d5e0 <HAL_RTC_WaitForSynchro>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00d      	beq.n	800d190 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	22ff      	movs	r2, #255	; 0xff
 800d17a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2204      	movs	r2, #4
 800d180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d18c:	2301      	movs	r3, #1
 800d18e:	e008      	b.n	800d1a2 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	22ff      	movs	r2, #255	; 0xff
 800d196:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800d1a0:	2300      	movs	r3, #0
  }
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d1aa:	b590      	push	{r4, r7, lr}
 800d1ac:	b087      	sub	sp, #28
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	60f8      	str	r0, [r7, #12]
 800d1b2:	60b9      	str	r1, [r7, #8]
 800d1b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d101      	bne.n	800d1c4 <HAL_RTC_SetTime+0x1a>
 800d1c0:	2302      	movs	r3, #2
 800d1c2:	e0b2      	b.n	800d32a <HAL_RTC_SetTime+0x180>
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2202      	movs	r2, #2
 800d1d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d126      	bne.n	800d228 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d102      	bne.n	800d1ee <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f000 fa44 	bl	800d680 <RTC_ByteToBcd2>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	785b      	ldrb	r3, [r3, #1]
 800d200:	4618      	mov	r0, r3
 800d202:	f000 fa3d 	bl	800d680 <RTC_ByteToBcd2>
 800d206:	4603      	mov	r3, r0
 800d208:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d20a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	789b      	ldrb	r3, [r3, #2]
 800d210:	4618      	mov	r0, r3
 800d212:	f000 fa35 	bl	800d680 <RTC_ByteToBcd2>
 800d216:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d218:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	78db      	ldrb	r3, [r3, #3]
 800d220:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d222:	4313      	orrs	r3, r2
 800d224:	617b      	str	r3, [r7, #20]
 800d226:	e018      	b.n	800d25a <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d232:	2b00      	cmp	r3, #0
 800d234:	d102      	bne.n	800d23c <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	2200      	movs	r2, #0
 800d23a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	785b      	ldrb	r3, [r3, #1]
 800d246:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d248:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d24e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	78db      	ldrb	r3, [r3, #3]
 800d254:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d256:	4313      	orrs	r3, r2
 800d258:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	22ca      	movs	r2, #202	; 0xca
 800d260:	625a      	str	r2, [r3, #36]	; 0x24
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2253      	movs	r2, #83	; 0x53
 800d268:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	f000 f9de 	bl	800d62c <RTC_EnterInitMode>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d00d      	beq.n	800d292 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	22ff      	movs	r2, #255	; 0xff
 800d27c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2204      	movs	r2, #4
 800d282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d28e:	2301      	movs	r3, #1
 800d290:	e04b      	b.n	800d32a <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d29c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d2a0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	689a      	ldr	r2, [r3, #8]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d2b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	6899      	ldr	r1, [r3, #8]
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	68da      	ldr	r2, [r3, #12]
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	691b      	ldr	r3, [r3, #16]
 800d2c0:	431a      	orrs	r2, r3
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68da      	ldr	r2, [r3, #12]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d2d8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	f003 0320 	and.w	r3, r3, #32
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d113      	bne.n	800d310 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f000 f979 	bl	800d5e0 <HAL_RTC_WaitForSynchro>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00d      	beq.n	800d310 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	22ff      	movs	r2, #255	; 0xff
 800d2fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2204      	movs	r2, #4
 800d300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2200      	movs	r2, #0
 800d308:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d30c:	2301      	movs	r3, #1
 800d30e:	e00c      	b.n	800d32a <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	22ff      	movs	r2, #255	; 0xff
 800d316:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2201      	movs	r2, #1
 800d31c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2200      	movs	r2, #0
 800d324:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800d328:	2300      	movs	r3, #0
  }
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	371c      	adds	r7, #28
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd90      	pop	{r4, r7, pc}

0800d332 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b086      	sub	sp, #24
 800d336:	af00      	add	r7, sp, #0
 800d338:	60f8      	str	r0, [r7, #12]
 800d33a:	60b9      	str	r1, [r7, #8]
 800d33c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d360:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d364:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	0c1b      	lsrs	r3, r3, #16
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d370:	b2da      	uxtb	r2, r3
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	0a1b      	lsrs	r3, r3, #8
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d380:	b2da      	uxtb	r2, r3
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	0c1b      	lsrs	r3, r3, #16
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d39e:	b2da      	uxtb	r2, r3
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d11a      	bne.n	800d3e0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f000 f986 	bl	800d6c0 <RTC_Bcd2ToByte>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	785b      	ldrb	r3, [r3, #1]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f000 f97d 	bl	800d6c0 <RTC_Bcd2ToByte>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	789b      	ldrb	r3, [r3, #2]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 f974 	bl	800d6c0 <RTC_Bcd2ToByte>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	461a      	mov	r2, r3
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3718      	adds	r7, #24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d3ea:	b590      	push	{r4, r7, lr}
 800d3ec:	b087      	sub	sp, #28
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	60b9      	str	r1, [r7, #8]
 800d3f4:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d101      	bne.n	800d404 <HAL_RTC_SetDate+0x1a>
 800d400:	2302      	movs	r3, #2
 800d402:	e09c      	b.n	800d53e <HAL_RTC_SetDate+0x154>
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2201      	movs	r2, #1
 800d408:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2202      	movs	r2, #2
 800d410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d10e      	bne.n	800d438 <HAL_RTC_SetDate+0x4e>
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	785b      	ldrb	r3, [r3, #1]
 800d41e:	f003 0310 	and.w	r3, r3, #16
 800d422:	2b00      	cmp	r3, #0
 800d424:	d008      	beq.n	800d438 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	785b      	ldrb	r3, [r3, #1]
 800d42a:	f023 0310 	bic.w	r3, r3, #16
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	330a      	adds	r3, #10
 800d432:	b2da      	uxtb	r2, r3
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d11c      	bne.n	800d478 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	78db      	ldrb	r3, [r3, #3]
 800d442:	4618      	mov	r0, r3
 800d444:	f000 f91c 	bl	800d680 <RTC_ByteToBcd2>
 800d448:	4603      	mov	r3, r0
 800d44a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	785b      	ldrb	r3, [r3, #1]
 800d450:	4618      	mov	r0, r3
 800d452:	f000 f915 	bl	800d680 <RTC_ByteToBcd2>
 800d456:	4603      	mov	r3, r0
 800d458:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d45a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	789b      	ldrb	r3, [r3, #2]
 800d460:	4618      	mov	r0, r3
 800d462:	f000 f90d 	bl	800d680 <RTC_ByteToBcd2>
 800d466:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d468:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d472:	4313      	orrs	r3, r2
 800d474:	617b      	str	r3, [r7, #20]
 800d476:	e00e      	b.n	800d496 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	78db      	ldrb	r3, [r3, #3]
 800d47c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	785b      	ldrb	r3, [r3, #1]
 800d482:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d484:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d48a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d492:	4313      	orrs	r3, r2
 800d494:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	22ca      	movs	r2, #202	; 0xca
 800d49c:	625a      	str	r2, [r3, #36]	; 0x24
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2253      	movs	r2, #83	; 0x53
 800d4a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f000 f8c0 	bl	800d62c <RTC_EnterInitMode>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00d      	beq.n	800d4ce <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	22ff      	movs	r2, #255	; 0xff
 800d4b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2204      	movs	r2, #4
 800d4be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e037      	b.n	800d53e <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d4d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d4dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	68da      	ldr	r2, [r3, #12]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d4ec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	f003 0320 	and.w	r3, r3, #32
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d113      	bne.n	800d524 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f000 f86f 	bl	800d5e0 <HAL_RTC_WaitForSynchro>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00d      	beq.n	800d524 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	22ff      	movs	r2, #255	; 0xff
 800d50e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2204      	movs	r2, #4
 800d514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	e00c      	b.n	800d53e <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	22ff      	movs	r2, #255	; 0xff
 800d52a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2200      	movs	r2, #0
 800d538:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800d53c:	2300      	movs	r3, #0
  }
}
 800d53e:	4618      	mov	r0, r3
 800d540:	371c      	adds	r7, #28
 800d542:	46bd      	mov	sp, r7
 800d544:	bd90      	pop	{r4, r7, pc}

0800d546 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b086      	sub	sp, #24
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	60f8      	str	r0, [r7, #12]
 800d54e:	60b9      	str	r1, [r7, #8]
 800d550:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d55c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d560:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	0c1b      	lsrs	r3, r3, #16
 800d566:	b2da      	uxtb	r2, r3
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	0a1b      	lsrs	r3, r3, #8
 800d570:	b2db      	uxtb	r3, r3
 800d572:	f003 031f 	and.w	r3, r3, #31
 800d576:	b2da      	uxtb	r2, r3
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d584:	b2da      	uxtb	r2, r3
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	0b5b      	lsrs	r3, r3, #13
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	f003 0307 	and.w	r3, r3, #7
 800d594:	b2da      	uxtb	r2, r3
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d11a      	bne.n	800d5d6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	78db      	ldrb	r3, [r3, #3]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f000 f88b 	bl	800d6c0 <RTC_Bcd2ToByte>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	785b      	ldrb	r3, [r3, #1]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 f882 	bl	800d6c0 <RTC_Bcd2ToByte>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	461a      	mov	r2, r3
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	789b      	ldrb	r3, [r3, #2]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f000 f879 	bl	800d6c0 <RTC_Bcd2ToByte>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	68da      	ldr	r2, [r3, #12]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d5f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d5f8:	f7f8 fd0a 	bl	8006010 <HAL_GetTick>
 800d5fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d5fe:	e009      	b.n	800d614 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d600:	f7f8 fd06 	bl	8006010 <HAL_GetTick>
 800d604:	4602      	mov	r2, r0
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d60e:	d901      	bls.n	800d614 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800d610:	2303      	movs	r3, #3
 800d612:	e007      	b.n	800d624 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	f003 0320 	and.w	r3, r3, #32
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d0ee      	beq.n	800d600 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800d622:	2300      	movs	r3, #0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d119      	bne.n	800d676 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f04f 32ff 	mov.w	r2, #4294967295
 800d64a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d64c:	f7f8 fce0 	bl	8006010 <HAL_GetTick>
 800d650:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d652:	e009      	b.n	800d668 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800d654:	f7f8 fcdc 	bl	8006010 <HAL_GetTick>
 800d658:	4602      	mov	r2, r0
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d662:	d901      	bls.n	800d668 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800d664:	2303      	movs	r3, #3
 800d666:	e007      	b.n	800d678 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d672:	2b00      	cmp	r3, #0
 800d674:	d0ee      	beq.n	800d654 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800d676:	2300      	movs	r3, #0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d680:	b480      	push	{r7}
 800d682:	b085      	sub	sp, #20
 800d684:	af00      	add	r7, sp, #0
 800d686:	4603      	mov	r3, r0
 800d688:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d68a:	2300      	movs	r3, #0
 800d68c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800d68e:	79fb      	ldrb	r3, [r7, #7]
 800d690:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800d692:	e005      	b.n	800d6a0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	3301      	adds	r3, #1
 800d698:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800d69a:	7afb      	ldrb	r3, [r7, #11]
 800d69c:	3b0a      	subs	r3, #10
 800d69e:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800d6a0:	7afb      	ldrb	r3, [r7, #11]
 800d6a2:	2b09      	cmp	r3, #9
 800d6a4:	d8f6      	bhi.n	800d694 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	011b      	lsls	r3, r3, #4
 800d6ac:	b2da      	uxtb	r2, r3
 800d6ae:	7afb      	ldrb	r3, [r7, #11]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	b2db      	uxtb	r3, r3
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3714      	adds	r7, #20
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800d6ca:	79fb      	ldrb	r3, [r7, #7]
 800d6cc:	091b      	lsrs	r3, r3, #4
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	4413      	add	r3, r2
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	b2da      	uxtb	r2, r3
 800d6e0:	79fb      	ldrb	r3, [r7, #7]
 800d6e2:	f003 030f 	and.w	r3, r3, #15
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	4413      	add	r3, r2
 800d6ea:	b2db      	uxtb	r3, r3
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3714      	adds	r7, #20
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b087      	sub	sp, #28
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	3350      	adds	r3, #80	; 0x50
 800d70a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	697a      	ldr	r2, [r7, #20]
 800d712:	4413      	add	r3, r2
 800d714:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	601a      	str	r2, [r3, #0]
}
 800d71c:	bf00      	nop
 800d71e:	371c      	adds	r7, #28
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d101      	bne.n	800d73a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d736:	2301      	movs	r3, #1
 800d738:	e01d      	b.n	800d776 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2b00      	cmp	r3, #0
 800d744:	d106      	bne.n	800d754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2200      	movs	r2, #0
 800d74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7f7 ff68 	bl	8005624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2202      	movs	r2, #2
 800d758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	3304      	adds	r3, #4
 800d764:	4619      	mov	r1, r3
 800d766:	4610      	mov	r0, r2
 800d768:	f000 fd2c 	bl	800e1c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2201      	movs	r2, #1
 800d770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
	...

0800d780 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2202      	movs	r2, #2
 800d78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	689a      	ldr	r2, [r3, #8]
 800d796:	4b0e      	ldr	r3, [pc, #56]	; (800d7d0 <HAL_TIM_Base_Start+0x50>)
 800d798:	4013      	ands	r3, r2
 800d79a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2b06      	cmp	r3, #6
 800d7a0:	d00b      	beq.n	800d7ba <HAL_TIM_Base_Start+0x3a>
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7a8:	d007      	beq.n	800d7ba <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f042 0201 	orr.w	r2, r2, #1
 800d7b8:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3714      	adds	r7, #20
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	00010007 	.word	0x00010007

0800d7d4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2202      	movs	r2, #2
 800d7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	6a1a      	ldr	r2, [r3, #32]
 800d7ea:	f241 1311 	movw	r3, #4369	; 0x1111
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d10f      	bne.n	800d814 <HAL_TIM_Base_Stop+0x40>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	6a1a      	ldr	r2, [r3, #32]
 800d7fa:	f240 4344 	movw	r3, #1092	; 0x444
 800d7fe:	4013      	ands	r3, r2
 800d800:	2b00      	cmp	r3, #0
 800d802:	d107      	bne.n	800d814 <HAL_TIM_Base_Stop+0x40>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f022 0201 	bic.w	r2, r2, #1
 800d812:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	370c      	adds	r7, #12
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
	...

0800d82c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68da      	ldr	r2, [r3, #12]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f042 0201 	orr.w	r2, r2, #1
 800d842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	689a      	ldr	r2, [r3, #8]
 800d84a:	4b0c      	ldr	r3, [pc, #48]	; (800d87c <HAL_TIM_Base_Start_IT+0x50>)
 800d84c:	4013      	ands	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2b06      	cmp	r3, #6
 800d854:	d00b      	beq.n	800d86e <HAL_TIM_Base_Start_IT+0x42>
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d85c:	d007      	beq.n	800d86e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f042 0201 	orr.w	r2, r2, #1
 800d86c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d86e:	2300      	movs	r3, #0
}
 800d870:	4618      	mov	r0, r3
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	00010007 	.word	0x00010007

0800d880 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d101      	bne.n	800d892 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800d88e:	2301      	movs	r3, #1
 800d890:	e01d      	b.n	800d8ce <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d106      	bne.n	800d8ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 f815 	bl	800d8d6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2202      	movs	r2, #2
 800d8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4610      	mov	r0, r2
 800d8c0:	f000 fc80 	bl	800e1c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3708      	adds	r7, #8
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b083      	sub	sp, #12
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800d8de:	bf00      	nop
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	b082      	sub	sp, #8
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d101      	bne.n	800d8fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e01d      	b.n	800d938 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d106      	bne.n	800d916 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 f815 	bl	800d940 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2202      	movs	r2, #2
 800d91a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	3304      	adds	r3, #4
 800d926:	4619      	mov	r1, r3
 800d928:	4610      	mov	r0, r2
 800d92a:	f000 fc4b 	bl	800e1c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d936:	2300      	movs	r3, #0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2201      	movs	r2, #1
 800d964:	6839      	ldr	r1, [r7, #0]
 800d966:	4618      	mov	r0, r3
 800d968:	f000 ffaa 	bl	800e8c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a19      	ldr	r2, [pc, #100]	; (800d9d8 <HAL_TIM_PWM_Start+0x84>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d009      	beq.n	800d98a <HAL_TIM_PWM_Start+0x36>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a18      	ldr	r2, [pc, #96]	; (800d9dc <HAL_TIM_PWM_Start+0x88>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d004      	beq.n	800d98a <HAL_TIM_PWM_Start+0x36>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a16      	ldr	r2, [pc, #88]	; (800d9e0 <HAL_TIM_PWM_Start+0x8c>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d101      	bne.n	800d98e <HAL_TIM_PWM_Start+0x3a>
 800d98a:	2301      	movs	r3, #1
 800d98c:	e000      	b.n	800d990 <HAL_TIM_PWM_Start+0x3c>
 800d98e:	2300      	movs	r3, #0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d007      	beq.n	800d9a4 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d9a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	689a      	ldr	r2, [r3, #8]
 800d9aa:	4b0e      	ldr	r3, [pc, #56]	; (800d9e4 <HAL_TIM_PWM_Start+0x90>)
 800d9ac:	4013      	ands	r3, r2
 800d9ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2b06      	cmp	r3, #6
 800d9b4:	d00b      	beq.n	800d9ce <HAL_TIM_PWM_Start+0x7a>
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9bc:	d007      	beq.n	800d9ce <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f042 0201 	orr.w	r2, r2, #1
 800d9cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	40012c00 	.word	0x40012c00
 800d9dc:	40014400 	.word	0x40014400
 800d9e0:	40014800 	.word	0x40014800
 800d9e4:	00010007 	.word	0x00010007

0800d9e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	6839      	ldr	r1, [r7, #0]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f000 ff60 	bl	800e8c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a25      	ldr	r2, [pc, #148]	; (800da9c <HAL_TIM_PWM_Stop+0xb4>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d009      	beq.n	800da1e <HAL_TIM_PWM_Stop+0x36>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4a24      	ldr	r2, [pc, #144]	; (800daa0 <HAL_TIM_PWM_Stop+0xb8>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d004      	beq.n	800da1e <HAL_TIM_PWM_Stop+0x36>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a22      	ldr	r2, [pc, #136]	; (800daa4 <HAL_TIM_PWM_Stop+0xbc>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d101      	bne.n	800da22 <HAL_TIM_PWM_Stop+0x3a>
 800da1e:	2301      	movs	r3, #1
 800da20:	e000      	b.n	800da24 <HAL_TIM_PWM_Stop+0x3c>
 800da22:	2300      	movs	r3, #0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d017      	beq.n	800da58 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	6a1a      	ldr	r2, [r3, #32]
 800da2e:	f241 1311 	movw	r3, #4369	; 0x1111
 800da32:	4013      	ands	r3, r2
 800da34:	2b00      	cmp	r3, #0
 800da36:	d10f      	bne.n	800da58 <HAL_TIM_PWM_Stop+0x70>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6a1a      	ldr	r2, [r3, #32]
 800da3e:	f240 4344 	movw	r3, #1092	; 0x444
 800da42:	4013      	ands	r3, r2
 800da44:	2b00      	cmp	r3, #0
 800da46:	d107      	bne.n	800da58 <HAL_TIM_PWM_Stop+0x70>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800da56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	6a1a      	ldr	r2, [r3, #32]
 800da5e:	f241 1311 	movw	r3, #4369	; 0x1111
 800da62:	4013      	ands	r3, r2
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10f      	bne.n	800da88 <HAL_TIM_PWM_Stop+0xa0>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	6a1a      	ldr	r2, [r3, #32]
 800da6e:	f240 4344 	movw	r3, #1092	; 0x444
 800da72:	4013      	ands	r3, r2
 800da74:	2b00      	cmp	r3, #0
 800da76:	d107      	bne.n	800da88 <HAL_TIM_PWM_Stop+0xa0>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f022 0201 	bic.w	r2, r2, #1
 800da86:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800da90:	2300      	movs	r3, #0
}
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	40012c00 	.word	0x40012c00
 800daa0:	40014400 	.word	0x40014400
 800daa4:	40014800 	.word	0x40014800

0800daa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	f003 0302 	and.w	r3, r3, #2
 800daba:	2b02      	cmp	r3, #2
 800dabc:	d122      	bne.n	800db04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	f003 0302 	and.w	r3, r3, #2
 800dac8:	2b02      	cmp	r3, #2
 800daca:	d11b      	bne.n	800db04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f06f 0202 	mvn.w	r2, #2
 800dad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2201      	movs	r2, #1
 800dada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	699b      	ldr	r3, [r3, #24]
 800dae2:	f003 0303 	and.w	r3, r3, #3
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d003      	beq.n	800daf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 fb55 	bl	800e19a <HAL_TIM_IC_CaptureCallback>
 800daf0:	e005      	b.n	800dafe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 fb47 	bl	800e186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7f3 fea7 	bl	800184c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	691b      	ldr	r3, [r3, #16]
 800db0a:	f003 0304 	and.w	r3, r3, #4
 800db0e:	2b04      	cmp	r3, #4
 800db10:	d122      	bne.n	800db58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	f003 0304 	and.w	r3, r3, #4
 800db1c:	2b04      	cmp	r3, #4
 800db1e:	d11b      	bne.n	800db58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f06f 0204 	mvn.w	r2, #4
 800db28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2202      	movs	r2, #2
 800db2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	699b      	ldr	r3, [r3, #24]
 800db36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d003      	beq.n	800db46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 fb2b 	bl	800e19a <HAL_TIM_IC_CaptureCallback>
 800db44:	e005      	b.n	800db52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fb1d 	bl	800e186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7f3 fe7d 	bl	800184c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	691b      	ldr	r3, [r3, #16]
 800db5e:	f003 0308 	and.w	r3, r3, #8
 800db62:	2b08      	cmp	r3, #8
 800db64:	d122      	bne.n	800dbac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	f003 0308 	and.w	r3, r3, #8
 800db70:	2b08      	cmp	r3, #8
 800db72:	d11b      	bne.n	800dbac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f06f 0208 	mvn.w	r2, #8
 800db7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2204      	movs	r2, #4
 800db82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	69db      	ldr	r3, [r3, #28]
 800db8a:	f003 0303 	and.w	r3, r3, #3
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d003      	beq.n	800db9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fb01 	bl	800e19a <HAL_TIM_IC_CaptureCallback>
 800db98:	e005      	b.n	800dba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 faf3 	bl	800e186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7f3 fe53 	bl	800184c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	691b      	ldr	r3, [r3, #16]
 800dbb2:	f003 0310 	and.w	r3, r3, #16
 800dbb6:	2b10      	cmp	r3, #16
 800dbb8:	d122      	bne.n	800dc00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	f003 0310 	and.w	r3, r3, #16
 800dbc4:	2b10      	cmp	r3, #16
 800dbc6:	d11b      	bne.n	800dc00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f06f 0210 	mvn.w	r2, #16
 800dbd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2208      	movs	r2, #8
 800dbd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	69db      	ldr	r3, [r3, #28]
 800dbde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d003      	beq.n	800dbee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 fad7 	bl	800e19a <HAL_TIM_IC_CaptureCallback>
 800dbec:	e005      	b.n	800dbfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fac9 	bl	800e186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7f3 fe29 	bl	800184c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	f003 0301 	and.w	r3, r3, #1
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d10e      	bne.n	800dc2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	f003 0301 	and.w	r3, r3, #1
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d107      	bne.n	800dc2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f06f 0201 	mvn.w	r2, #1
 800dc24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f7f5 ff56 	bl	8003ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	691b      	ldr	r3, [r3, #16]
 800dc32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc36:	2b80      	cmp	r3, #128	; 0x80
 800dc38:	d10e      	bne.n	800dc58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc44:	2b80      	cmp	r3, #128	; 0x80
 800dc46:	d107      	bne.n	800dc58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dc50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 fec4 	bl	800e9e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc66:	d10e      	bne.n	800dc86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc72:	2b80      	cmp	r3, #128	; 0x80
 800dc74:	d107      	bne.n	800dc86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dc7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 feb7 	bl	800e9f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	691b      	ldr	r3, [r3, #16]
 800dc8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc90:	2b40      	cmp	r3, #64	; 0x40
 800dc92:	d10e      	bne.n	800dcb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc9e:	2b40      	cmp	r3, #64	; 0x40
 800dca0:	d107      	bne.n	800dcb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dcaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fa7e 	bl	800e1ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	691b      	ldr	r3, [r3, #16]
 800dcb8:	f003 0320 	and.w	r3, r3, #32
 800dcbc:	2b20      	cmp	r3, #32
 800dcbe:	d10e      	bne.n	800dcde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	f003 0320 	and.w	r3, r3, #32
 800dcca:	2b20      	cmp	r3, #32
 800dccc:	d107      	bne.n	800dcde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f06f 0220 	mvn.w	r2, #32
 800dcd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 fe77 	bl	800e9cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dcde:	bf00      	nop
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
	...

0800dce8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d101      	bne.n	800dd02 <HAL_TIM_OC_ConfigChannel+0x1a>
 800dcfe:	2302      	movs	r3, #2
 800dd00:	e06c      	b.n	800dddc <HAL_TIM_OC_ConfigChannel+0xf4>
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2202      	movs	r2, #2
 800dd0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2b14      	cmp	r3, #20
 800dd16:	d857      	bhi.n	800ddc8 <HAL_TIM_OC_ConfigChannel+0xe0>
 800dd18:	a201      	add	r2, pc, #4	; (adr r2, 800dd20 <HAL_TIM_OC_ConfigChannel+0x38>)
 800dd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1e:	bf00      	nop
 800dd20:	0800dd75 	.word	0x0800dd75
 800dd24:	0800ddc9 	.word	0x0800ddc9
 800dd28:	0800ddc9 	.word	0x0800ddc9
 800dd2c:	0800ddc9 	.word	0x0800ddc9
 800dd30:	0800dd83 	.word	0x0800dd83
 800dd34:	0800ddc9 	.word	0x0800ddc9
 800dd38:	0800ddc9 	.word	0x0800ddc9
 800dd3c:	0800ddc9 	.word	0x0800ddc9
 800dd40:	0800dd91 	.word	0x0800dd91
 800dd44:	0800ddc9 	.word	0x0800ddc9
 800dd48:	0800ddc9 	.word	0x0800ddc9
 800dd4c:	0800ddc9 	.word	0x0800ddc9
 800dd50:	0800dd9f 	.word	0x0800dd9f
 800dd54:	0800ddc9 	.word	0x0800ddc9
 800dd58:	0800ddc9 	.word	0x0800ddc9
 800dd5c:	0800ddc9 	.word	0x0800ddc9
 800dd60:	0800ddad 	.word	0x0800ddad
 800dd64:	0800ddc9 	.word	0x0800ddc9
 800dd68:	0800ddc9 	.word	0x0800ddc9
 800dd6c:	0800ddc9 	.word	0x0800ddc9
 800dd70:	0800ddbb 	.word	0x0800ddbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	68b9      	ldr	r1, [r7, #8]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f000 fa86 	bl	800e28c <TIM_OC1_SetConfig>
      break;
 800dd80:	e023      	b.n	800ddca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68b9      	ldr	r1, [r7, #8]
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f000 fafb 	bl	800e384 <TIM_OC2_SetConfig>
      break;
 800dd8e:	e01c      	b.n	800ddca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	68b9      	ldr	r1, [r7, #8]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 fb6e 	bl	800e478 <TIM_OC3_SetConfig>
      break;
 800dd9c:	e015      	b.n	800ddca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	68b9      	ldr	r1, [r7, #8]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f000 fbdf 	bl	800e568 <TIM_OC4_SetConfig>
      break;
 800ddaa:	e00e      	b.n	800ddca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	68b9      	ldr	r1, [r7, #8]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 fc36 	bl	800e624 <TIM_OC5_SetConfig>
      break;
 800ddb8:	e007      	b.n	800ddca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	68b9      	ldr	r1, [r7, #8]
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f000 fc87 	bl	800e6d4 <TIM_OC6_SetConfig>
      break;
 800ddc6:	e000      	b.n	800ddca <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 800ddc8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d101      	bne.n	800ddfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ddfa:	2302      	movs	r3, #2
 800ddfc:	e105      	b.n	800e00a <HAL_TIM_PWM_ConfigChannel+0x226>
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2201      	movs	r2, #1
 800de02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2202      	movs	r2, #2
 800de0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2b14      	cmp	r3, #20
 800de12:	f200 80f0 	bhi.w	800dff6 <HAL_TIM_PWM_ConfigChannel+0x212>
 800de16:	a201      	add	r2, pc, #4	; (adr r2, 800de1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800de18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de1c:	0800de71 	.word	0x0800de71
 800de20:	0800dff7 	.word	0x0800dff7
 800de24:	0800dff7 	.word	0x0800dff7
 800de28:	0800dff7 	.word	0x0800dff7
 800de2c:	0800deb1 	.word	0x0800deb1
 800de30:	0800dff7 	.word	0x0800dff7
 800de34:	0800dff7 	.word	0x0800dff7
 800de38:	0800dff7 	.word	0x0800dff7
 800de3c:	0800def3 	.word	0x0800def3
 800de40:	0800dff7 	.word	0x0800dff7
 800de44:	0800dff7 	.word	0x0800dff7
 800de48:	0800dff7 	.word	0x0800dff7
 800de4c:	0800df33 	.word	0x0800df33
 800de50:	0800dff7 	.word	0x0800dff7
 800de54:	0800dff7 	.word	0x0800dff7
 800de58:	0800dff7 	.word	0x0800dff7
 800de5c:	0800df75 	.word	0x0800df75
 800de60:	0800dff7 	.word	0x0800dff7
 800de64:	0800dff7 	.word	0x0800dff7
 800de68:	0800dff7 	.word	0x0800dff7
 800de6c:	0800dfb5 	.word	0x0800dfb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	68b9      	ldr	r1, [r7, #8]
 800de76:	4618      	mov	r0, r3
 800de78:	f000 fa08 	bl	800e28c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	699a      	ldr	r2, [r3, #24]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f042 0208 	orr.w	r2, r2, #8
 800de8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	699a      	ldr	r2, [r3, #24]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f022 0204 	bic.w	r2, r2, #4
 800de9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6999      	ldr	r1, [r3, #24]
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	691a      	ldr	r2, [r3, #16]
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	430a      	orrs	r2, r1
 800deac:	619a      	str	r2, [r3, #24]
      break;
 800deae:	e0a3      	b.n	800dff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68b9      	ldr	r1, [r7, #8]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 fa64 	bl	800e384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	699a      	ldr	r2, [r3, #24]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800deca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	699a      	ldr	r2, [r3, #24]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	6999      	ldr	r1, [r3, #24]
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	021a      	lsls	r2, r3, #8
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	430a      	orrs	r2, r1
 800deee:	619a      	str	r2, [r3, #24]
      break;
 800def0:	e082      	b.n	800dff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	68b9      	ldr	r1, [r7, #8]
 800def8:	4618      	mov	r0, r3
 800defa:	f000 fabd 	bl	800e478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	69da      	ldr	r2, [r3, #28]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f042 0208 	orr.w	r2, r2, #8
 800df0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	69da      	ldr	r2, [r3, #28]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f022 0204 	bic.w	r2, r2, #4
 800df1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	69d9      	ldr	r1, [r3, #28]
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	691a      	ldr	r2, [r3, #16]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	430a      	orrs	r2, r1
 800df2e:	61da      	str	r2, [r3, #28]
      break;
 800df30:	e062      	b.n	800dff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	68b9      	ldr	r1, [r7, #8]
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 fb15 	bl	800e568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	69da      	ldr	r2, [r3, #28]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	69da      	ldr	r2, [r3, #28]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	69d9      	ldr	r1, [r3, #28]
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	021a      	lsls	r2, r3, #8
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	430a      	orrs	r2, r1
 800df70:	61da      	str	r2, [r3, #28]
      break;
 800df72:	e041      	b.n	800dff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	68b9      	ldr	r1, [r7, #8]
 800df7a:	4618      	mov	r0, r3
 800df7c:	f000 fb52 	bl	800e624 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f042 0208 	orr.w	r2, r2, #8
 800df8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f022 0204 	bic.w	r2, r2, #4
 800df9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	691a      	ldr	r2, [r3, #16]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	430a      	orrs	r2, r1
 800dfb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dfb2:	e021      	b.n	800dff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68b9      	ldr	r1, [r7, #8]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f000 fb8a 	bl	800e6d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	021a      	lsls	r2, r3, #8
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	430a      	orrs	r2, r1
 800dff2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dff4:	e000      	b.n	800dff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800dff6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2201      	movs	r2, #1
 800dffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2200      	movs	r2, #0
 800e004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop

0800e014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e024:	2b01      	cmp	r3, #1
 800e026:	d101      	bne.n	800e02c <HAL_TIM_ConfigClockSource+0x18>
 800e028:	2302      	movs	r3, #2
 800e02a:	e0a8      	b.n	800e17e <HAL_TIM_ConfigClockSource+0x16a>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2202      	movs	r2, #2
 800e038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e04a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e04e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e056:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	68fa      	ldr	r2, [r7, #12]
 800e05e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b40      	cmp	r3, #64	; 0x40
 800e066:	d067      	beq.n	800e138 <HAL_TIM_ConfigClockSource+0x124>
 800e068:	2b40      	cmp	r3, #64	; 0x40
 800e06a:	d80b      	bhi.n	800e084 <HAL_TIM_ConfigClockSource+0x70>
 800e06c:	2b10      	cmp	r3, #16
 800e06e:	d073      	beq.n	800e158 <HAL_TIM_ConfigClockSource+0x144>
 800e070:	2b10      	cmp	r3, #16
 800e072:	d802      	bhi.n	800e07a <HAL_TIM_ConfigClockSource+0x66>
 800e074:	2b00      	cmp	r3, #0
 800e076:	d06f      	beq.n	800e158 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e078:	e078      	b.n	800e16c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e07a:	2b20      	cmp	r3, #32
 800e07c:	d06c      	beq.n	800e158 <HAL_TIM_ConfigClockSource+0x144>
 800e07e:	2b30      	cmp	r3, #48	; 0x30
 800e080:	d06a      	beq.n	800e158 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800e082:	e073      	b.n	800e16c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e084:	2b70      	cmp	r3, #112	; 0x70
 800e086:	d00d      	beq.n	800e0a4 <HAL_TIM_ConfigClockSource+0x90>
 800e088:	2b70      	cmp	r3, #112	; 0x70
 800e08a:	d804      	bhi.n	800e096 <HAL_TIM_ConfigClockSource+0x82>
 800e08c:	2b50      	cmp	r3, #80	; 0x50
 800e08e:	d033      	beq.n	800e0f8 <HAL_TIM_ConfigClockSource+0xe4>
 800e090:	2b60      	cmp	r3, #96	; 0x60
 800e092:	d041      	beq.n	800e118 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800e094:	e06a      	b.n	800e16c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e09a:	d066      	beq.n	800e16a <HAL_TIM_ConfigClockSource+0x156>
 800e09c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0a0:	d017      	beq.n	800e0d2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800e0a2:	e063      	b.n	800e16c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6818      	ldr	r0, [r3, #0]
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	6899      	ldr	r1, [r3, #8]
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	685a      	ldr	r2, [r3, #4]
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	f000 fbe4 	bl	800e880 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	689b      	ldr	r3, [r3, #8]
 800e0be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e0c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	68fa      	ldr	r2, [r7, #12]
 800e0ce:	609a      	str	r2, [r3, #8]
      break;
 800e0d0:	e04c      	b.n	800e16c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6818      	ldr	r0, [r3, #0]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	6899      	ldr	r1, [r3, #8]
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	685a      	ldr	r2, [r3, #4]
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	f000 fbcd 	bl	800e880 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	689a      	ldr	r2, [r3, #8]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e0f4:	609a      	str	r2, [r3, #8]
      break;
 800e0f6:	e039      	b.n	800e16c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6818      	ldr	r0, [r3, #0]
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	6859      	ldr	r1, [r3, #4]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	461a      	mov	r2, r3
 800e106:	f000 fb3f 	bl	800e788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2150      	movs	r1, #80	; 0x50
 800e110:	4618      	mov	r0, r3
 800e112:	f000 fb98 	bl	800e846 <TIM_ITRx_SetConfig>
      break;
 800e116:	e029      	b.n	800e16c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6818      	ldr	r0, [r3, #0]
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	6859      	ldr	r1, [r3, #4]
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	461a      	mov	r2, r3
 800e126:	f000 fb5e 	bl	800e7e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2160      	movs	r1, #96	; 0x60
 800e130:	4618      	mov	r0, r3
 800e132:	f000 fb88 	bl	800e846 <TIM_ITRx_SetConfig>
      break;
 800e136:	e019      	b.n	800e16c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6818      	ldr	r0, [r3, #0]
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	6859      	ldr	r1, [r3, #4]
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	461a      	mov	r2, r3
 800e146:	f000 fb1f 	bl	800e788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2140      	movs	r1, #64	; 0x40
 800e150:	4618      	mov	r0, r3
 800e152:	f000 fb78 	bl	800e846 <TIM_ITRx_SetConfig>
      break;
 800e156:	e009      	b.n	800e16c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4619      	mov	r1, r3
 800e162:	4610      	mov	r0, r2
 800e164:	f000 fb6f 	bl	800e846 <TIM_ITRx_SetConfig>
      break;
 800e168:	e000      	b.n	800e16c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800e16a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2200      	movs	r2, #0
 800e178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e17c:	2300      	movs	r3, #0
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}

0800e186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e186:	b480      	push	{r7}
 800e188:	b083      	sub	sp, #12
 800e18a:	af00      	add	r7, sp, #0
 800e18c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e18e:	bf00      	nop
 800e190:	370c      	adds	r7, #12
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr

0800e19a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e19a:	b480      	push	{r7}
 800e19c:	b083      	sub	sp, #12
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e1a2:	bf00      	nop
 800e1a4:	370c      	adds	r7, #12
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr

0800e1ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e1ae:	b480      	push	{r7}
 800e1b0:	b083      	sub	sp, #12
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e1b6:	bf00      	nop
 800e1b8:	370c      	adds	r7, #12
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
	...

0800e1c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	4a2a      	ldr	r2, [pc, #168]	; (800e280 <TIM_Base_SetConfig+0xbc>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d003      	beq.n	800e1e4 <TIM_Base_SetConfig+0x20>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1e2:	d108      	bne.n	800e1f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	68fa      	ldr	r2, [r7, #12]
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a21      	ldr	r2, [pc, #132]	; (800e280 <TIM_Base_SetConfig+0xbc>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d00b      	beq.n	800e216 <TIM_Base_SetConfig+0x52>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e204:	d007      	beq.n	800e216 <TIM_Base_SetConfig+0x52>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a1e      	ldr	r2, [pc, #120]	; (800e284 <TIM_Base_SetConfig+0xc0>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d003      	beq.n	800e216 <TIM_Base_SetConfig+0x52>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4a1d      	ldr	r2, [pc, #116]	; (800e288 <TIM_Base_SetConfig+0xc4>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d108      	bne.n	800e228 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e21c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	4313      	orrs	r3, r2
 800e226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	695b      	ldr	r3, [r3, #20]
 800e232:	4313      	orrs	r3, r2
 800e234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	68fa      	ldr	r2, [r7, #12]
 800e23a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	689a      	ldr	r2, [r3, #8]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4a0c      	ldr	r2, [pc, #48]	; (800e280 <TIM_Base_SetConfig+0xbc>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d007      	beq.n	800e264 <TIM_Base_SetConfig+0xa0>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	4a0b      	ldr	r2, [pc, #44]	; (800e284 <TIM_Base_SetConfig+0xc0>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d003      	beq.n	800e264 <TIM_Base_SetConfig+0xa0>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	4a0a      	ldr	r2, [pc, #40]	; (800e288 <TIM_Base_SetConfig+0xc4>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d103      	bne.n	800e26c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	691a      	ldr	r2, [r3, #16]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	615a      	str	r2, [r3, #20]
}
 800e272:	bf00      	nop
 800e274:	3714      	adds	r7, #20
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	40012c00 	.word	0x40012c00
 800e284:	40014400 	.word	0x40014400
 800e288:	40014800 	.word	0x40014800

0800e28c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b087      	sub	sp, #28
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a1b      	ldr	r3, [r3, #32]
 800e29a:	f023 0201 	bic.w	r2, r3, #1
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6a1b      	ldr	r3, [r3, #32]
 800e2a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	699b      	ldr	r3, [r3, #24]
 800e2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f023 0303 	bic.w	r3, r3, #3
 800e2c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	f023 0302 	bic.w	r3, r3, #2
 800e2d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4a24      	ldr	r2, [pc, #144]	; (800e378 <TIM_OC1_SetConfig+0xec>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d007      	beq.n	800e2fc <TIM_OC1_SetConfig+0x70>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	4a23      	ldr	r2, [pc, #140]	; (800e37c <TIM_OC1_SetConfig+0xf0>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d003      	beq.n	800e2fc <TIM_OC1_SetConfig+0x70>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	4a22      	ldr	r2, [pc, #136]	; (800e380 <TIM_OC1_SetConfig+0xf4>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d10c      	bne.n	800e316 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	f023 0308 	bic.w	r3, r3, #8
 800e302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	697a      	ldr	r2, [r7, #20]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	f023 0304 	bic.w	r3, r3, #4
 800e314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4a17      	ldr	r2, [pc, #92]	; (800e378 <TIM_OC1_SetConfig+0xec>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d007      	beq.n	800e32e <TIM_OC1_SetConfig+0xa2>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4a17      	ldr	r2, [pc, #92]	; (800e380 <TIM_OC1_SetConfig+0xf4>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d003      	beq.n	800e32e <TIM_OC1_SetConfig+0xa2>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4a14      	ldr	r2, [pc, #80]	; (800e37c <TIM_OC1_SetConfig+0xf0>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d111      	bne.n	800e352 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e33c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	695b      	ldr	r3, [r3, #20]
 800e342:	693a      	ldr	r2, [r7, #16]
 800e344:	4313      	orrs	r3, r2
 800e346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	699b      	ldr	r3, [r3, #24]
 800e34c:	693a      	ldr	r2, [r7, #16]
 800e34e:	4313      	orrs	r3, r2
 800e350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	693a      	ldr	r2, [r7, #16]
 800e356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	68fa      	ldr	r2, [r7, #12]
 800e35c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	685a      	ldr	r2, [r3, #4]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	697a      	ldr	r2, [r7, #20]
 800e36a:	621a      	str	r2, [r3, #32]
}
 800e36c:	bf00      	nop
 800e36e:	371c      	adds	r7, #28
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr
 800e378:	40012c00 	.word	0x40012c00
 800e37c:	40014800 	.word	0x40014800
 800e380:	40014400 	.word	0x40014400

0800e384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e384:	b480      	push	{r7}
 800e386:	b087      	sub	sp, #28
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	f023 0210 	bic.w	r2, r3, #16
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a1b      	ldr	r3, [r3, #32]
 800e39e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	699b      	ldr	r3, [r3, #24]
 800e3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e3b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	021b      	lsls	r3, r3, #8
 800e3c6:	68fa      	ldr	r2, [r7, #12]
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	f023 0320 	bic.w	r3, r3, #32
 800e3d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	011b      	lsls	r3, r3, #4
 800e3da:	697a      	ldr	r2, [r7, #20]
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	4a22      	ldr	r2, [pc, #136]	; (800e46c <TIM_OC2_SetConfig+0xe8>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d10d      	bne.n	800e404 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	011b      	lsls	r3, r3, #4
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e402:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	4a19      	ldr	r2, [pc, #100]	; (800e46c <TIM_OC2_SetConfig+0xe8>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d007      	beq.n	800e41c <TIM_OC2_SetConfig+0x98>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	4a18      	ldr	r2, [pc, #96]	; (800e470 <TIM_OC2_SetConfig+0xec>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d003      	beq.n	800e41c <TIM_OC2_SetConfig+0x98>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	4a17      	ldr	r2, [pc, #92]	; (800e474 <TIM_OC2_SetConfig+0xf0>)
 800e418:	4293      	cmp	r3, r2
 800e41a:	d113      	bne.n	800e444 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e42a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	695b      	ldr	r3, [r3, #20]
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	693a      	ldr	r2, [r7, #16]
 800e434:	4313      	orrs	r3, r2
 800e436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	699b      	ldr	r3, [r3, #24]
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	693a      	ldr	r2, [r7, #16]
 800e440:	4313      	orrs	r3, r2
 800e442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	693a      	ldr	r2, [r7, #16]
 800e448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	68fa      	ldr	r2, [r7, #12]
 800e44e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	685a      	ldr	r2, [r3, #4]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	697a      	ldr	r2, [r7, #20]
 800e45c:	621a      	str	r2, [r3, #32]
}
 800e45e:	bf00      	nop
 800e460:	371c      	adds	r7, #28
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	40012c00 	.word	0x40012c00
 800e470:	40014400 	.word	0x40014400
 800e474:	40014800 	.word	0x40014800

0800e478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e478:	b480      	push	{r7}
 800e47a:	b087      	sub	sp, #28
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a1b      	ldr	r3, [r3, #32]
 800e486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6a1b      	ldr	r3, [r3, #32]
 800e492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	69db      	ldr	r3, [r3, #28]
 800e49e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e4a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f023 0303 	bic.w	r3, r3, #3
 800e4b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e4c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	021b      	lsls	r3, r3, #8
 800e4cc:	697a      	ldr	r2, [r7, #20]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4a21      	ldr	r2, [pc, #132]	; (800e55c <TIM_OC3_SetConfig+0xe4>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d10d      	bne.n	800e4f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	021b      	lsls	r3, r3, #8
 800e4e8:	697a      	ldr	r2, [r7, #20]
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e4f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4a18      	ldr	r2, [pc, #96]	; (800e55c <TIM_OC3_SetConfig+0xe4>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d007      	beq.n	800e50e <TIM_OC3_SetConfig+0x96>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4a17      	ldr	r2, [pc, #92]	; (800e560 <TIM_OC3_SetConfig+0xe8>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d003      	beq.n	800e50e <TIM_OC3_SetConfig+0x96>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4a16      	ldr	r2, [pc, #88]	; (800e564 <TIM_OC3_SetConfig+0xec>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d113      	bne.n	800e536 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e51c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	695b      	ldr	r3, [r3, #20]
 800e522:	011b      	lsls	r3, r3, #4
 800e524:	693a      	ldr	r2, [r7, #16]
 800e526:	4313      	orrs	r3, r2
 800e528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	699b      	ldr	r3, [r3, #24]
 800e52e:	011b      	lsls	r3, r3, #4
 800e530:	693a      	ldr	r2, [r7, #16]
 800e532:	4313      	orrs	r3, r2
 800e534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	693a      	ldr	r2, [r7, #16]
 800e53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	685a      	ldr	r2, [r3, #4]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	697a      	ldr	r2, [r7, #20]
 800e54e:	621a      	str	r2, [r3, #32]
}
 800e550:	bf00      	nop
 800e552:	371c      	adds	r7, #28
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr
 800e55c:	40012c00 	.word	0x40012c00
 800e560:	40014400 	.word	0x40014400
 800e564:	40014800 	.word	0x40014800

0800e568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e568:	b480      	push	{r7}
 800e56a:	b087      	sub	sp, #28
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6a1b      	ldr	r3, [r3, #32]
 800e576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6a1b      	ldr	r3, [r3, #32]
 800e582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	69db      	ldr	r3, [r3, #28]
 800e58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e59a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	021b      	lsls	r3, r3, #8
 800e5aa:	68fa      	ldr	r2, [r7, #12]
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e5b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	689b      	ldr	r3, [r3, #8]
 800e5bc:	031b      	lsls	r3, r3, #12
 800e5be:	693a      	ldr	r2, [r7, #16]
 800e5c0:	4313      	orrs	r3, r2
 800e5c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	4a14      	ldr	r2, [pc, #80]	; (800e618 <TIM_OC4_SetConfig+0xb0>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d007      	beq.n	800e5dc <TIM_OC4_SetConfig+0x74>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	4a13      	ldr	r2, [pc, #76]	; (800e61c <TIM_OC4_SetConfig+0xb4>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d003      	beq.n	800e5dc <TIM_OC4_SetConfig+0x74>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	4a12      	ldr	r2, [pc, #72]	; (800e620 <TIM_OC4_SetConfig+0xb8>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d109      	bne.n	800e5f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e5e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	695b      	ldr	r3, [r3, #20]
 800e5e8:	019b      	lsls	r3, r3, #6
 800e5ea:	697a      	ldr	r2, [r7, #20]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	697a      	ldr	r2, [r7, #20]
 800e5f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	685a      	ldr	r2, [r3, #4]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	693a      	ldr	r2, [r7, #16]
 800e608:	621a      	str	r2, [r3, #32]
}
 800e60a:	bf00      	nop
 800e60c:	371c      	adds	r7, #28
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop
 800e618:	40012c00 	.word	0x40012c00
 800e61c:	40014400 	.word	0x40014400
 800e620:	40014800 	.word	0x40014800

0800e624 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e624:	b480      	push	{r7}
 800e626:	b087      	sub	sp, #28
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6a1b      	ldr	r3, [r3, #32]
 800e632:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6a1b      	ldr	r3, [r3, #32]
 800e63e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	4313      	orrs	r3, r2
 800e660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e668:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	041b      	lsls	r3, r3, #16
 800e670:	693a      	ldr	r2, [r7, #16]
 800e672:	4313      	orrs	r3, r2
 800e674:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	4a13      	ldr	r2, [pc, #76]	; (800e6c8 <TIM_OC5_SetConfig+0xa4>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d007      	beq.n	800e68e <TIM_OC5_SetConfig+0x6a>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a12      	ldr	r2, [pc, #72]	; (800e6cc <TIM_OC5_SetConfig+0xa8>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d003      	beq.n	800e68e <TIM_OC5_SetConfig+0x6a>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a11      	ldr	r2, [pc, #68]	; (800e6d0 <TIM_OC5_SetConfig+0xac>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d109      	bne.n	800e6a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e694:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	695b      	ldr	r3, [r3, #20]
 800e69a:	021b      	lsls	r3, r3, #8
 800e69c:	697a      	ldr	r2, [r7, #20]
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	697a      	ldr	r2, [r7, #20]
 800e6a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	685a      	ldr	r2, [r3, #4]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	693a      	ldr	r2, [r7, #16]
 800e6ba:	621a      	str	r2, [r3, #32]
}
 800e6bc:	bf00      	nop
 800e6be:	371c      	adds	r7, #28
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr
 800e6c8:	40012c00 	.word	0x40012c00
 800e6cc:	40014400 	.word	0x40014400
 800e6d0:	40014800 	.word	0x40014800

0800e6d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b087      	sub	sp, #28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6a1b      	ldr	r3, [r3, #32]
 800e6ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	021b      	lsls	r3, r3, #8
 800e70e:	68fa      	ldr	r2, [r7, #12]
 800e710:	4313      	orrs	r3, r2
 800e712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e71a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	689b      	ldr	r3, [r3, #8]
 800e720:	051b      	lsls	r3, r3, #20
 800e722:	693a      	ldr	r2, [r7, #16]
 800e724:	4313      	orrs	r3, r2
 800e726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	4a14      	ldr	r2, [pc, #80]	; (800e77c <TIM_OC6_SetConfig+0xa8>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d007      	beq.n	800e740 <TIM_OC6_SetConfig+0x6c>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4a13      	ldr	r2, [pc, #76]	; (800e780 <TIM_OC6_SetConfig+0xac>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d003      	beq.n	800e740 <TIM_OC6_SetConfig+0x6c>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a12      	ldr	r2, [pc, #72]	; (800e784 <TIM_OC6_SetConfig+0xb0>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d109      	bne.n	800e754 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e746:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	695b      	ldr	r3, [r3, #20]
 800e74c:	029b      	lsls	r3, r3, #10
 800e74e:	697a      	ldr	r2, [r7, #20]
 800e750:	4313      	orrs	r3, r2
 800e752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	697a      	ldr	r2, [r7, #20]
 800e758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	68fa      	ldr	r2, [r7, #12]
 800e75e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	685a      	ldr	r2, [r3, #4]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	693a      	ldr	r2, [r7, #16]
 800e76c:	621a      	str	r2, [r3, #32]
}
 800e76e:	bf00      	nop
 800e770:	371c      	adds	r7, #28
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	40012c00 	.word	0x40012c00
 800e780:	40014400 	.word	0x40014400
 800e784:	40014800 	.word	0x40014800

0800e788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e788:	b480      	push	{r7}
 800e78a:	b087      	sub	sp, #28
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6a1b      	ldr	r3, [r3, #32]
 800e798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	6a1b      	ldr	r3, [r3, #32]
 800e79e:	f023 0201 	bic.w	r2, r3, #1
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	699b      	ldr	r3, [r3, #24]
 800e7aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e7b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	011b      	lsls	r3, r3, #4
 800e7b8:	693a      	ldr	r2, [r7, #16]
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	f023 030a 	bic.w	r3, r3, #10
 800e7c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	693a      	ldr	r2, [r7, #16]
 800e7d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	697a      	ldr	r2, [r7, #20]
 800e7d8:	621a      	str	r2, [r3, #32]
}
 800e7da:	bf00      	nop
 800e7dc:	371c      	adds	r7, #28
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b087      	sub	sp, #28
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	60f8      	str	r0, [r7, #12]
 800e7ee:	60b9      	str	r1, [r7, #8]
 800e7f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6a1b      	ldr	r3, [r3, #32]
 800e7f6:	f023 0210 	bic.w	r2, r3, #16
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	699b      	ldr	r3, [r3, #24]
 800e802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	6a1b      	ldr	r3, [r3, #32]
 800e808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e810:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	031b      	lsls	r3, r3, #12
 800e816:	697a      	ldr	r2, [r7, #20]
 800e818:	4313      	orrs	r3, r2
 800e81a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e822:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	011b      	lsls	r3, r3, #4
 800e828:	693a      	ldr	r2, [r7, #16]
 800e82a:	4313      	orrs	r3, r2
 800e82c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	693a      	ldr	r2, [r7, #16]
 800e838:	621a      	str	r2, [r3, #32]
}
 800e83a:	bf00      	nop
 800e83c:	371c      	adds	r7, #28
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr

0800e846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e846:	b480      	push	{r7}
 800e848:	b085      	sub	sp, #20
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
 800e84e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e85c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e862:	683a      	ldr	r2, [r7, #0]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	4313      	orrs	r3, r2
 800e868:	f043 0307 	orr.w	r3, r3, #7
 800e86c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	68fa      	ldr	r2, [r7, #12]
 800e872:	609a      	str	r2, [r3, #8]
}
 800e874:	bf00      	nop
 800e876:	3714      	adds	r7, #20
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr

0800e880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e880:	b480      	push	{r7}
 800e882:	b087      	sub	sp, #28
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
 800e88c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e89a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	021a      	lsls	r2, r3, #8
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	431a      	orrs	r2, r3
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	697a      	ldr	r2, [r7, #20]
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	697a      	ldr	r2, [r7, #20]
 800e8b2:	609a      	str	r2, [r3, #8]
}
 800e8b4:	bf00      	nop
 800e8b6:	371c      	adds	r7, #28
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	f003 031f 	and.w	r3, r3, #31
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	6a1a      	ldr	r2, [r3, #32]
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	43db      	mvns	r3, r3
 800e8e2:	401a      	ands	r2, r3
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	6a1a      	ldr	r2, [r3, #32]
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	f003 031f 	and.w	r3, r3, #31
 800e8f2:	6879      	ldr	r1, [r7, #4]
 800e8f4:	fa01 f303 	lsl.w	r3, r1, r3
 800e8f8:	431a      	orrs	r2, r3
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	621a      	str	r2, [r3, #32]
}
 800e8fe:	bf00      	nop
 800e900:	371c      	adds	r7, #28
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr
	...

0800e90c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b085      	sub	sp, #20
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	d101      	bne.n	800e924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e920:	2302      	movs	r3, #2
 800e922:	e04a      	b.n	800e9ba <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2201      	movs	r2, #1
 800e928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2202      	movs	r2, #2
 800e930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	689b      	ldr	r3, [r3, #8]
 800e942:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4a1f      	ldr	r2, [pc, #124]	; (800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d108      	bne.n	800e960 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e954:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	4313      	orrs	r3, r2
 800e95e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	4313      	orrs	r3, r2
 800e970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	68fa      	ldr	r2, [r7, #12]
 800e978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a12      	ldr	r2, [pc, #72]	; (800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d004      	beq.n	800e98e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e98c:	d10c      	bne.n	800e9a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	68ba      	ldr	r2, [r7, #8]
 800e99c:	4313      	orrs	r3, r2
 800e99e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	68ba      	ldr	r2, [r7, #8]
 800e9a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3714      	adds	r7, #20
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	40012c00 	.word	0x40012c00

0800e9cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e9d4:	bf00      	nop
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e9e8:	bf00      	nop
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e9fc:	bf00      	nop
 800e9fe:	370c      	adds	r7, #12
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr

0800ea08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ea10:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ea14:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	89fb      	ldrh	r3, [r7, #14]
 800ea20:	4313      	orrs	r3, r2
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ea2a:	2300      	movs	r3, #0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3714      	adds	r7, #20
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ea40:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ea44:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	b21a      	sxth	r2, r3
 800ea50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ea54:	43db      	mvns	r3, r3
 800ea56:	b21b      	sxth	r3, r3
 800ea58:	4013      	ands	r3, r2
 800ea5a:	b21b      	sxth	r3, r3
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ea64:	2300      	movs	r3, #0
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3714      	adds	r7, #20
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr

0800ea72 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ea72:	b084      	sub	sp, #16
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	f107 0014 	add.w	r0, r7, #20
 800ea80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2200      	movs	r2, #0
 800ea98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7ff ffaf 	bl	800ea08 <USB_EnableGlobalInt>

  return HAL_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eab6:	b004      	add	sp, #16
 800eab8:	4770      	bx	lr
	...

0800eabc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800eabc:	b490      	push	{r4, r7}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800eac6:	2300      	movs	r3, #0
 800eac8:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	4413      	add	r3, r2
 800ead4:	881b      	ldrh	r3, [r3, #0]
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800eadc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eae0:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	78db      	ldrb	r3, [r3, #3]
 800eae6:	2b03      	cmp	r3, #3
 800eae8:	d819      	bhi.n	800eb1e <USB_ActivateEndpoint+0x62>
 800eaea:	a201      	add	r2, pc, #4	; (adr r2, 800eaf0 <USB_ActivateEndpoint+0x34>)
 800eaec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf0:	0800eb01 	.word	0x0800eb01
 800eaf4:	0800eb15 	.word	0x0800eb15
 800eaf8:	0800eb25 	.word	0x0800eb25
 800eafc:	0800eb0b 	.word	0x0800eb0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800eb00:	8abb      	ldrh	r3, [r7, #20]
 800eb02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb06:	82bb      	strh	r3, [r7, #20]
      break;
 800eb08:	e00d      	b.n	800eb26 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800eb0a:	8abb      	ldrh	r3, [r7, #20]
 800eb0c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800eb10:	82bb      	strh	r3, [r7, #20]
      break;
 800eb12:	e008      	b.n	800eb26 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800eb14:	8abb      	ldrh	r3, [r7, #20]
 800eb16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eb1a:	82bb      	strh	r3, [r7, #20]
      break;
 800eb1c:	e003      	b.n	800eb26 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	75fb      	strb	r3, [r7, #23]
      break;
 800eb22:	e000      	b.n	800eb26 <USB_ActivateEndpoint+0x6a>
      break;
 800eb24:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	441a      	add	r2, r3
 800eb30:	8abb      	ldrh	r3, [r7, #20]
 800eb32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	009b      	lsls	r3, r3, #2
 800eb4e:	4413      	add	r3, r2
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	b21b      	sxth	r3, r3
 800eb56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb5e:	b21a      	sxth	r2, r3
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	b21b      	sxth	r3, r3
 800eb66:	4313      	orrs	r3, r2
 800eb68:	b21b      	sxth	r3, r3
 800eb6a:	b29c      	uxth	r4, r3
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	441a      	add	r2, r3
 800eb76:	4b87      	ldr	r3, [pc, #540]	; (800ed94 <USB_ActivateEndpoint+0x2d8>)
 800eb78:	4323      	orrs	r3, r4
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	7b1b      	ldrb	r3, [r3, #12]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f040 810c 	bne.w	800eda0 <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	785b      	ldrb	r3, [r3, #1]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d067      	beq.n	800ec60 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800eb90:	687c      	ldr	r4, [r7, #4]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	441c      	add	r4, r3
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	00db      	lsls	r3, r3, #3
 800eba2:	4423      	add	r3, r4
 800eba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eba8:	461c      	mov	r4, r3
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	88db      	ldrh	r3, [r3, #6]
 800ebae:	085b      	lsrs	r3, r3, #1
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	005b      	lsls	r3, r3, #1
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	4413      	add	r3, r2
 800ebc2:	881b      	ldrh	r3, [r3, #0]
 800ebc4:	b29c      	uxth	r4, r3
 800ebc6:	4623      	mov	r3, r4
 800ebc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d014      	beq.n	800ebfa <USB_ActivateEndpoint+0x13e>
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	009b      	lsls	r3, r3, #2
 800ebd8:	4413      	add	r3, r2
 800ebda:	881b      	ldrh	r3, [r3, #0]
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebe6:	b29c      	uxth	r4, r3
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	781b      	ldrb	r3, [r3, #0]
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	441a      	add	r2, r3
 800ebf2:	4b69      	ldr	r3, [pc, #420]	; (800ed98 <USB_ActivateEndpoint+0x2dc>)
 800ebf4:	4323      	orrs	r3, r4
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	78db      	ldrb	r3, [r3, #3]
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d018      	beq.n	800ec34 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	4413      	add	r3, r2
 800ec0c:	881b      	ldrh	r3, [r3, #0]
 800ec0e:	b29b      	uxth	r3, r3
 800ec10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec18:	b29c      	uxth	r4, r3
 800ec1a:	f084 0320 	eor.w	r3, r4, #32
 800ec1e:	b29c      	uxth	r4, r3
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	441a      	add	r2, r3
 800ec2a:	4b5a      	ldr	r3, [pc, #360]	; (800ed94 <USB_ActivateEndpoint+0x2d8>)
 800ec2c:	4323      	orrs	r3, r4
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	8013      	strh	r3, [r2, #0]
 800ec32:	e225      	b.n	800f080 <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	4413      	add	r3, r2
 800ec3e:	881b      	ldrh	r3, [r3, #0]
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec4a:	b29c      	uxth	r4, r3
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	441a      	add	r2, r3
 800ec56:	4b4f      	ldr	r3, [pc, #316]	; (800ed94 <USB_ActivateEndpoint+0x2d8>)
 800ec58:	4323      	orrs	r3, r4
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	8013      	strh	r3, [r2, #0]
 800ec5e:	e20f      	b.n	800f080 <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ec60:	687c      	ldr	r4, [r7, #4]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	441c      	add	r4, r3
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	00db      	lsls	r3, r3, #3
 800ec72:	4423      	add	r3, r4
 800ec74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ec78:	461c      	mov	r4, r3
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	88db      	ldrh	r3, [r3, #6]
 800ec7e:	085b      	lsrs	r3, r3, #1
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	005b      	lsls	r3, r3, #1
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ec88:	687c      	ldr	r4, [r7, #4]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	441c      	add	r4, r3
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	00db      	lsls	r3, r3, #3
 800ec9a:	4423      	add	r3, r4
 800ec9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eca0:	60fb      	str	r3, [r7, #12]
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	691b      	ldr	r3, [r3, #16]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d110      	bne.n	800eccc <USB_ActivateEndpoint+0x210>
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	881b      	ldrh	r3, [r3, #0]
 800ecae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	801a      	strh	r2, [r3, #0]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ecc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	801a      	strh	r2, [r3, #0]
 800ecca:	e026      	b.n	800ed1a <USB_ActivateEndpoint+0x25e>
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	691b      	ldr	r3, [r3, #16]
 800ecd0:	2b3d      	cmp	r3, #61	; 0x3d
 800ecd2:	d813      	bhi.n	800ecfc <USB_ActivateEndpoint+0x240>
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	691b      	ldr	r3, [r3, #16]
 800ecd8:	085b      	lsrs	r3, r3, #1
 800ecda:	613b      	str	r3, [r7, #16]
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	f003 0301 	and.w	r3, r3, #1
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <USB_ActivateEndpoint+0x232>
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	3301      	adds	r3, #1
 800ecec:	613b      	str	r3, [r7, #16]
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	029b      	lsls	r3, r3, #10
 800ecf4:	b29a      	uxth	r2, r3
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	801a      	strh	r2, [r3, #0]
 800ecfa:	e00e      	b.n	800ed1a <USB_ActivateEndpoint+0x25e>
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	691b      	ldr	r3, [r3, #16]
 800ed00:	095b      	lsrs	r3, r3, #5
 800ed02:	613b      	str	r3, [r7, #16]
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	029b      	lsls	r3, r3, #10
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	4413      	add	r3, r2
 800ed24:	881b      	ldrh	r3, [r3, #0]
 800ed26:	b29c      	uxth	r4, r3
 800ed28:	4623      	mov	r3, r4
 800ed2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d014      	beq.n	800ed5c <USB_ActivateEndpoint+0x2a0>
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4413      	add	r3, r2
 800ed3c:	881b      	ldrh	r3, [r3, #0]
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed48:	b29c      	uxth	r4, r3
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	009b      	lsls	r3, r3, #2
 800ed52:	441a      	add	r2, r3
 800ed54:	4b11      	ldr	r3, [pc, #68]	; (800ed9c <USB_ActivateEndpoint+0x2e0>)
 800ed56:	4323      	orrs	r3, r4
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	4413      	add	r3, r2
 800ed66:	881b      	ldrh	r3, [r3, #0]
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed72:	b29c      	uxth	r4, r3
 800ed74:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800ed78:	b29c      	uxth	r4, r3
 800ed7a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800ed7e:	b29c      	uxth	r4, r3
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	441a      	add	r2, r3
 800ed8a:	4b02      	ldr	r3, [pc, #8]	; (800ed94 <USB_ActivateEndpoint+0x2d8>)
 800ed8c:	4323      	orrs	r3, r4
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	8013      	strh	r3, [r2, #0]
 800ed92:	e175      	b.n	800f080 <USB_ActivateEndpoint+0x5c4>
 800ed94:	ffff8080 	.word	0xffff8080
 800ed98:	ffff80c0 	.word	0xffff80c0
 800ed9c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	009b      	lsls	r3, r3, #2
 800eda8:	4413      	add	r3, r2
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	b29b      	uxth	r3, r3
 800edae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800edb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edb6:	b29c      	uxth	r4, r3
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	009b      	lsls	r3, r3, #2
 800edc0:	441a      	add	r2, r3
 800edc2:	4b96      	ldr	r3, [pc, #600]	; (800f01c <USB_ActivateEndpoint+0x560>)
 800edc4:	4323      	orrs	r3, r4
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800edca:	687c      	ldr	r4, [r7, #4]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	441c      	add	r4, r3
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	00db      	lsls	r3, r3, #3
 800eddc:	4423      	add	r3, r4
 800edde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ede2:	461c      	mov	r4, r3
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	891b      	ldrh	r3, [r3, #8]
 800ede8:	085b      	lsrs	r3, r3, #1
 800edea:	b29b      	uxth	r3, r3
 800edec:	005b      	lsls	r3, r3, #1
 800edee:	b29b      	uxth	r3, r3
 800edf0:	8023      	strh	r3, [r4, #0]
 800edf2:	687c      	ldr	r4, [r7, #4]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	441c      	add	r4, r3
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	00db      	lsls	r3, r3, #3
 800ee04:	4423      	add	r3, r4
 800ee06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ee0a:	461c      	mov	r4, r3
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	895b      	ldrh	r3, [r3, #10]
 800ee10:	085b      	lsrs	r3, r3, #1
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	785b      	ldrb	r3, [r3, #1]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f040 8088 	bne.w	800ef34 <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	4413      	add	r3, r2
 800ee2e:	881b      	ldrh	r3, [r3, #0]
 800ee30:	b29c      	uxth	r4, r3
 800ee32:	4623      	mov	r3, r4
 800ee34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d014      	beq.n	800ee66 <USB_ActivateEndpoint+0x3aa>
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	4413      	add	r3, r2
 800ee46:	881b      	ldrh	r3, [r3, #0]
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee52:	b29c      	uxth	r4, r3
 800ee54:	687a      	ldr	r2, [r7, #4]
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	441a      	add	r2, r3
 800ee5e:	4b70      	ldr	r3, [pc, #448]	; (800f020 <USB_ActivateEndpoint+0x564>)
 800ee60:	4323      	orrs	r3, r4
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4413      	add	r3, r2
 800ee70:	881b      	ldrh	r3, [r3, #0]
 800ee72:	b29c      	uxth	r4, r3
 800ee74:	4623      	mov	r3, r4
 800ee76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d014      	beq.n	800eea8 <USB_ActivateEndpoint+0x3ec>
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	4413      	add	r3, r2
 800ee88:	881b      	ldrh	r3, [r3, #0]
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee94:	b29c      	uxth	r4, r3
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	441a      	add	r2, r3
 800eea0:	4b60      	ldr	r3, [pc, #384]	; (800f024 <USB_ActivateEndpoint+0x568>)
 800eea2:	4323      	orrs	r3, r4
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4413      	add	r3, r2
 800eeb2:	881b      	ldrh	r3, [r3, #0]
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eeba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eebe:	b29c      	uxth	r4, r3
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	441a      	add	r2, r3
 800eeca:	4b56      	ldr	r3, [pc, #344]	; (800f024 <USB_ActivateEndpoint+0x568>)
 800eecc:	4323      	orrs	r3, r4
 800eece:	b29b      	uxth	r3, r3
 800eed0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	4413      	add	r3, r2
 800eedc:	881b      	ldrh	r3, [r3, #0]
 800eede:	b29b      	uxth	r3, r3
 800eee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eee8:	b29c      	uxth	r4, r3
 800eeea:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800eeee:	b29c      	uxth	r4, r3
 800eef0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800eef4:	b29c      	uxth	r4, r3
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	441a      	add	r2, r3
 800ef00:	4b49      	ldr	r3, [pc, #292]	; (800f028 <USB_ActivateEndpoint+0x56c>)
 800ef02:	4323      	orrs	r3, r4
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	4413      	add	r3, r2
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef1e:	b29c      	uxth	r4, r3
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	441a      	add	r2, r3
 800ef2a:	4b3f      	ldr	r3, [pc, #252]	; (800f028 <USB_ActivateEndpoint+0x56c>)
 800ef2c:	4323      	orrs	r3, r4
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	8013      	strh	r3, [r2, #0]
 800ef32:	e0a5      	b.n	800f080 <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	4413      	add	r3, r2
 800ef3e:	881b      	ldrh	r3, [r3, #0]
 800ef40:	b29c      	uxth	r4, r3
 800ef42:	4623      	mov	r3, r4
 800ef44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d014      	beq.n	800ef76 <USB_ActivateEndpoint+0x4ba>
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	009b      	lsls	r3, r3, #2
 800ef54:	4413      	add	r3, r2
 800ef56:	881b      	ldrh	r3, [r3, #0]
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef62:	b29c      	uxth	r4, r3
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	009b      	lsls	r3, r3, #2
 800ef6c:	441a      	add	r2, r3
 800ef6e:	4b2c      	ldr	r3, [pc, #176]	; (800f020 <USB_ActivateEndpoint+0x564>)
 800ef70:	4323      	orrs	r3, r4
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef76:	687a      	ldr	r2, [r7, #4]
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	4413      	add	r3, r2
 800ef80:	881b      	ldrh	r3, [r3, #0]
 800ef82:	b29c      	uxth	r4, r3
 800ef84:	4623      	mov	r3, r4
 800ef86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d014      	beq.n	800efb8 <USB_ActivateEndpoint+0x4fc>
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	009b      	lsls	r3, r3, #2
 800ef96:	4413      	add	r3, r2
 800ef98:	881b      	ldrh	r3, [r3, #0]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efa4:	b29c      	uxth	r4, r3
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	441a      	add	r2, r3
 800efb0:	4b1c      	ldr	r3, [pc, #112]	; (800f024 <USB_ActivateEndpoint+0x568>)
 800efb2:	4323      	orrs	r3, r4
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	4413      	add	r3, r2
 800efc2:	881b      	ldrh	r3, [r3, #0]
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efce:	b29c      	uxth	r4, r3
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	441a      	add	r2, r3
 800efda:	4b11      	ldr	r3, [pc, #68]	; (800f020 <USB_ActivateEndpoint+0x564>)
 800efdc:	4323      	orrs	r3, r4
 800efde:	b29b      	uxth	r3, r3
 800efe0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	78db      	ldrb	r3, [r3, #3]
 800efe6:	2b01      	cmp	r3, #1
 800efe8:	d020      	beq.n	800f02c <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	4413      	add	r3, r2
 800eff4:	881b      	ldrh	r3, [r3, #0]
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800effc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f000:	b29c      	uxth	r4, r3
 800f002:	f084 0320 	eor.w	r3, r4, #32
 800f006:	b29c      	uxth	r4, r3
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	441a      	add	r2, r3
 800f012:	4b05      	ldr	r3, [pc, #20]	; (800f028 <USB_ActivateEndpoint+0x56c>)
 800f014:	4323      	orrs	r3, r4
 800f016:	b29b      	uxth	r3, r3
 800f018:	8013      	strh	r3, [r2, #0]
 800f01a:	e01c      	b.n	800f056 <USB_ActivateEndpoint+0x59a>
 800f01c:	ffff8180 	.word	0xffff8180
 800f020:	ffffc080 	.word	0xffffc080
 800f024:	ffff80c0 	.word	0xffff80c0
 800f028:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	009b      	lsls	r3, r3, #2
 800f034:	4413      	add	r3, r2
 800f036:	881b      	ldrh	r3, [r3, #0]
 800f038:	b29b      	uxth	r3, r3
 800f03a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f03e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f042:	b29c      	uxth	r4, r3
 800f044:	687a      	ldr	r2, [r7, #4]
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	009b      	lsls	r3, r3, #2
 800f04c:	441a      	add	r2, r3
 800f04e:	4b0f      	ldr	r3, [pc, #60]	; (800f08c <USB_ActivateEndpoint+0x5d0>)
 800f050:	4323      	orrs	r3, r4
 800f052:	b29b      	uxth	r3, r3
 800f054:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	4413      	add	r3, r2
 800f060:	881b      	ldrh	r3, [r3, #0]
 800f062:	b29b      	uxth	r3, r3
 800f064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f06c:	b29c      	uxth	r4, r3
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	009b      	lsls	r3, r3, #2
 800f076:	441a      	add	r2, r3
 800f078:	4b04      	ldr	r3, [pc, #16]	; (800f08c <USB_ActivateEndpoint+0x5d0>)
 800f07a:	4323      	orrs	r3, r4
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800f080:	7dfb      	ldrb	r3, [r7, #23]
}
 800f082:	4618      	mov	r0, r3
 800f084:	3718      	adds	r7, #24
 800f086:	46bd      	mov	sp, r7
 800f088:	bc90      	pop	{r4, r7}
 800f08a:	4770      	bx	lr
 800f08c:	ffff8080 	.word	0xffff8080

0800f090 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f090:	b490      	push	{r4, r7}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	7b1b      	ldrb	r3, [r3, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d171      	bne.n	800f186 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	785b      	ldrb	r3, [r3, #1]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d036      	beq.n	800f118 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	4413      	add	r3, r2
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	b29c      	uxth	r4, r3
 800f0b8:	4623      	mov	r3, r4
 800f0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d014      	beq.n	800f0ec <USB_DeactivateEndpoint+0x5c>
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	009b      	lsls	r3, r3, #2
 800f0ca:	4413      	add	r3, r2
 800f0cc:	881b      	ldrh	r3, [r3, #0]
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0d8:	b29c      	uxth	r4, r3
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	441a      	add	r2, r3
 800f0e4:	4b6b      	ldr	r3, [pc, #428]	; (800f294 <USB_DeactivateEndpoint+0x204>)
 800f0e6:	4323      	orrs	r3, r4
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	4413      	add	r3, r2
 800f0f6:	881b      	ldrh	r3, [r3, #0]
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f102:	b29c      	uxth	r4, r3
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	009b      	lsls	r3, r3, #2
 800f10c:	441a      	add	r2, r3
 800f10e:	4b62      	ldr	r3, [pc, #392]	; (800f298 <USB_DeactivateEndpoint+0x208>)
 800f110:	4323      	orrs	r3, r4
 800f112:	b29b      	uxth	r3, r3
 800f114:	8013      	strh	r3, [r2, #0]
 800f116:	e144      	b.n	800f3a2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	4413      	add	r3, r2
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	b29c      	uxth	r4, r3
 800f126:	4623      	mov	r3, r4
 800f128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d014      	beq.n	800f15a <USB_DeactivateEndpoint+0xca>
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	4413      	add	r3, r2
 800f13a:	881b      	ldrh	r3, [r3, #0]
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f146:	b29c      	uxth	r4, r3
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	441a      	add	r2, r3
 800f152:	4b52      	ldr	r3, [pc, #328]	; (800f29c <USB_DeactivateEndpoint+0x20c>)
 800f154:	4323      	orrs	r3, r4
 800f156:	b29b      	uxth	r3, r3
 800f158:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	4413      	add	r3, r2
 800f164:	881b      	ldrh	r3, [r3, #0]
 800f166:	b29b      	uxth	r3, r3
 800f168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f16c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f170:	b29c      	uxth	r4, r3
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	441a      	add	r2, r3
 800f17c:	4b46      	ldr	r3, [pc, #280]	; (800f298 <USB_DeactivateEndpoint+0x208>)
 800f17e:	4323      	orrs	r3, r4
 800f180:	b29b      	uxth	r3, r3
 800f182:	8013      	strh	r3, [r2, #0]
 800f184:	e10d      	b.n	800f3a2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	785b      	ldrb	r3, [r3, #1]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	f040 8088 	bne.w	800f2a0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	009b      	lsls	r3, r3, #2
 800f198:	4413      	add	r3, r2
 800f19a:	881b      	ldrh	r3, [r3, #0]
 800f19c:	b29c      	uxth	r4, r3
 800f19e:	4623      	mov	r3, r4
 800f1a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d014      	beq.n	800f1d2 <USB_DeactivateEndpoint+0x142>
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	4413      	add	r3, r2
 800f1b2:	881b      	ldrh	r3, [r3, #0]
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1be:	b29c      	uxth	r4, r3
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	441a      	add	r2, r3
 800f1ca:	4b34      	ldr	r3, [pc, #208]	; (800f29c <USB_DeactivateEndpoint+0x20c>)
 800f1cc:	4323      	orrs	r3, r4
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	009b      	lsls	r3, r3, #2
 800f1da:	4413      	add	r3, r2
 800f1dc:	881b      	ldrh	r3, [r3, #0]
 800f1de:	b29c      	uxth	r4, r3
 800f1e0:	4623      	mov	r3, r4
 800f1e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d014      	beq.n	800f214 <USB_DeactivateEndpoint+0x184>
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	009b      	lsls	r3, r3, #2
 800f1f2:	4413      	add	r3, r2
 800f1f4:	881b      	ldrh	r3, [r3, #0]
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f200:	b29c      	uxth	r4, r3
 800f202:	687a      	ldr	r2, [r7, #4]
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	441a      	add	r2, r3
 800f20c:	4b21      	ldr	r3, [pc, #132]	; (800f294 <USB_DeactivateEndpoint+0x204>)
 800f20e:	4323      	orrs	r3, r4
 800f210:	b29b      	uxth	r3, r3
 800f212:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f214:	687a      	ldr	r2, [r7, #4]
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	009b      	lsls	r3, r3, #2
 800f21c:	4413      	add	r3, r2
 800f21e:	881b      	ldrh	r3, [r3, #0]
 800f220:	b29b      	uxth	r3, r3
 800f222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f22a:	b29c      	uxth	r4, r3
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	441a      	add	r2, r3
 800f236:	4b17      	ldr	r3, [pc, #92]	; (800f294 <USB_DeactivateEndpoint+0x204>)
 800f238:	4323      	orrs	r3, r4
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	4413      	add	r3, r2
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f254:	b29c      	uxth	r4, r3
 800f256:	687a      	ldr	r2, [r7, #4]
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	009b      	lsls	r3, r3, #2
 800f25e:	441a      	add	r2, r3
 800f260:	4b0d      	ldr	r3, [pc, #52]	; (800f298 <USB_DeactivateEndpoint+0x208>)
 800f262:	4323      	orrs	r3, r4
 800f264:	b29b      	uxth	r3, r3
 800f266:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f268:	687a      	ldr	r2, [r7, #4]
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	4413      	add	r3, r2
 800f272:	881b      	ldrh	r3, [r3, #0]
 800f274:	b29b      	uxth	r3, r3
 800f276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f27a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f27e:	b29c      	uxth	r4, r3
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	441a      	add	r2, r3
 800f28a:	4b03      	ldr	r3, [pc, #12]	; (800f298 <USB_DeactivateEndpoint+0x208>)
 800f28c:	4323      	orrs	r3, r4
 800f28e:	b29b      	uxth	r3, r3
 800f290:	8013      	strh	r3, [r2, #0]
 800f292:	e086      	b.n	800f3a2 <USB_DeactivateEndpoint+0x312>
 800f294:	ffff80c0 	.word	0xffff80c0
 800f298:	ffff8080 	.word	0xffff8080
 800f29c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	4413      	add	r3, r2
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	b29c      	uxth	r4, r3
 800f2ae:	4623      	mov	r3, r4
 800f2b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d014      	beq.n	800f2e2 <USB_DeactivateEndpoint+0x252>
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	4413      	add	r3, r2
 800f2c2:	881b      	ldrh	r3, [r3, #0]
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2ce:	b29c      	uxth	r4, r3
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	441a      	add	r2, r3
 800f2da:	4b35      	ldr	r3, [pc, #212]	; (800f3b0 <USB_DeactivateEndpoint+0x320>)
 800f2dc:	4323      	orrs	r3, r4
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	009b      	lsls	r3, r3, #2
 800f2ea:	4413      	add	r3, r2
 800f2ec:	881b      	ldrh	r3, [r3, #0]
 800f2ee:	b29c      	uxth	r4, r3
 800f2f0:	4623      	mov	r3, r4
 800f2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d014      	beq.n	800f324 <USB_DeactivateEndpoint+0x294>
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	4413      	add	r3, r2
 800f304:	881b      	ldrh	r3, [r3, #0]
 800f306:	b29b      	uxth	r3, r3
 800f308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f30c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f310:	b29c      	uxth	r4, r3
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	441a      	add	r2, r3
 800f31c:	4b25      	ldr	r3, [pc, #148]	; (800f3b4 <USB_DeactivateEndpoint+0x324>)
 800f31e:	4323      	orrs	r3, r4
 800f320:	b29b      	uxth	r3, r3
 800f322:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	4413      	add	r3, r2
 800f32e:	881b      	ldrh	r3, [r3, #0]
 800f330:	b29b      	uxth	r3, r3
 800f332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f33a:	b29c      	uxth	r4, r3
 800f33c:	687a      	ldr	r2, [r7, #4]
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	441a      	add	r2, r3
 800f346:	4b1a      	ldr	r3, [pc, #104]	; (800f3b0 <USB_DeactivateEndpoint+0x320>)
 800f348:	4323      	orrs	r3, r4
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	009b      	lsls	r3, r3, #2
 800f356:	4413      	add	r3, r2
 800f358:	881b      	ldrh	r3, [r3, #0]
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f364:	b29c      	uxth	r4, r3
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	441a      	add	r2, r3
 800f370:	4b11      	ldr	r3, [pc, #68]	; (800f3b8 <USB_DeactivateEndpoint+0x328>)
 800f372:	4323      	orrs	r3, r4
 800f374:	b29b      	uxth	r3, r3
 800f376:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	4413      	add	r3, r2
 800f382:	881b      	ldrh	r3, [r3, #0]
 800f384:	b29b      	uxth	r3, r3
 800f386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f38e:	b29c      	uxth	r4, r3
 800f390:	687a      	ldr	r2, [r7, #4]
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	441a      	add	r2, r3
 800f39a:	4b07      	ldr	r3, [pc, #28]	; (800f3b8 <USB_DeactivateEndpoint+0x328>)
 800f39c:	4323      	orrs	r3, r4
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f3a2:	2300      	movs	r3, #0
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3708      	adds	r7, #8
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bc90      	pop	{r4, r7}
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	ffffc080 	.word	0xffffc080
 800f3b4:	ffff80c0 	.word	0xffff80c0
 800f3b8:	ffff8080 	.word	0xffff8080

0800f3bc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f3bc:	b590      	push	{r4, r7, lr}
 800f3be:	b095      	sub	sp, #84	; 0x54
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	785b      	ldrb	r3, [r3, #1]
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	f040 815d 	bne.w	800f68a <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	699a      	ldr	r2, [r3, #24]
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d909      	bls.n	800f3f0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	691b      	ldr	r3, [r3, #16]
 800f3e0:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	699a      	ldr	r2, [r3, #24]
 800f3e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3e8:	1ad2      	subs	r2, r2, r3
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	619a      	str	r2, [r3, #24]
 800f3ee:	e005      	b.n	800f3fc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	699b      	ldr	r3, [r3, #24]
 800f3f4:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	7b1b      	ldrb	r3, [r3, #12]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d11a      	bne.n	800f43a <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	6959      	ldr	r1, [r3, #20]
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	88da      	ldrh	r2, [r3, #6]
 800f40c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f40e:	b29b      	uxth	r3, r3
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 fbb3 	bl	800fb7c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f416:	687c      	ldr	r4, [r7, #4]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f41e:	b29b      	uxth	r3, r3
 800f420:	441c      	add	r4, r3
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	00db      	lsls	r3, r3, #3
 800f428:	4423      	add	r3, r4
 800f42a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f42e:	60fb      	str	r3, [r7, #12]
 800f430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f432:	b29a      	uxth	r2, r3
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	801a      	strh	r2, [r3, #0]
 800f438:	e10b      	b.n	800f652 <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	4413      	add	r3, r2
 800f444:	881b      	ldrh	r3, [r3, #0]
 800f446:	b29b      	uxth	r3, r3
 800f448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d062      	beq.n	800f516 <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f450:	687c      	ldr	r4, [r7, #4]
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	785b      	ldrb	r3, [r3, #1]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d144      	bne.n	800f4e4 <USB_EPStartXfer+0x128>
 800f45a:	687c      	ldr	r4, [r7, #4]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f462:	b29b      	uxth	r3, r3
 800f464:	441c      	add	r4, r3
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	00db      	lsls	r3, r3, #3
 800f46c:	4423      	add	r3, r4
 800f46e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f472:	613b      	str	r3, [r7, #16]
 800f474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f476:	2b00      	cmp	r3, #0
 800f478:	d110      	bne.n	800f49c <USB_EPStartXfer+0xe0>
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	881b      	ldrh	r3, [r3, #0]
 800f47e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f482:	b29a      	uxth	r2, r3
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	801a      	strh	r2, [r3, #0]
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	881b      	ldrh	r3, [r3, #0]
 800f48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f494:	b29a      	uxth	r2, r3
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	801a      	strh	r2, [r3, #0]
 800f49a:	e037      	b.n	800f50c <USB_EPStartXfer+0x150>
 800f49c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f49e:	2b3d      	cmp	r3, #61	; 0x3d
 800f4a0:	d811      	bhi.n	800f4c6 <USB_EPStartXfer+0x10a>
 800f4a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4a4:	085b      	lsrs	r3, r3, #1
 800f4a6:	647b      	str	r3, [r7, #68]	; 0x44
 800f4a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4aa:	f003 0301 	and.w	r3, r3, #1
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d002      	beq.n	800f4b8 <USB_EPStartXfer+0xfc>
 800f4b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	647b      	str	r3, [r7, #68]	; 0x44
 800f4b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	029b      	lsls	r3, r3, #10
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	801a      	strh	r2, [r3, #0]
 800f4c4:	e022      	b.n	800f50c <USB_EPStartXfer+0x150>
 800f4c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4c8:	095b      	lsrs	r3, r3, #5
 800f4ca:	647b      	str	r3, [r7, #68]	; 0x44
 800f4cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	029b      	lsls	r3, r3, #10
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4dc:	b29a      	uxth	r2, r3
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	801a      	strh	r2, [r3, #0]
 800f4e2:	e013      	b.n	800f50c <USB_EPStartXfer+0x150>
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	785b      	ldrb	r3, [r3, #1]
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d10f      	bne.n	800f50c <USB_EPStartXfer+0x150>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	441c      	add	r4, r3
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	00db      	lsls	r3, r3, #3
 800f4fc:	4423      	add	r3, r4
 800f4fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f502:	617b      	str	r3, [r7, #20]
 800f504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f506:	b29a      	uxth	r2, r3
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	895b      	ldrh	r3, [r3, #10]
 800f510:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f514:	e061      	b.n	800f5da <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	785b      	ldrb	r3, [r3, #1]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d144      	bne.n	800f5a8 <USB_EPStartXfer+0x1ec>
 800f51e:	687c      	ldr	r4, [r7, #4]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f526:	b29b      	uxth	r3, r3
 800f528:	441c      	add	r4, r3
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	00db      	lsls	r3, r3, #3
 800f530:	4423      	add	r3, r4
 800f532:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f536:	61bb      	str	r3, [r7, #24]
 800f538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d110      	bne.n	800f560 <USB_EPStartXfer+0x1a4>
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	881b      	ldrh	r3, [r3, #0]
 800f542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f546:	b29a      	uxth	r2, r3
 800f548:	69bb      	ldr	r3, [r7, #24]
 800f54a:	801a      	strh	r2, [r3, #0]
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	881b      	ldrh	r3, [r3, #0]
 800f550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f558:	b29a      	uxth	r2, r3
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	801a      	strh	r2, [r3, #0]
 800f55e:	e038      	b.n	800f5d2 <USB_EPStartXfer+0x216>
 800f560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f562:	2b3d      	cmp	r3, #61	; 0x3d
 800f564:	d811      	bhi.n	800f58a <USB_EPStartXfer+0x1ce>
 800f566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f568:	085b      	lsrs	r3, r3, #1
 800f56a:	643b      	str	r3, [r7, #64]	; 0x40
 800f56c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f56e:	f003 0301 	and.w	r3, r3, #1
 800f572:	2b00      	cmp	r3, #0
 800f574:	d002      	beq.n	800f57c <USB_EPStartXfer+0x1c0>
 800f576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f578:	3301      	adds	r3, #1
 800f57a:	643b      	str	r3, [r7, #64]	; 0x40
 800f57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f57e:	b29b      	uxth	r3, r3
 800f580:	029b      	lsls	r3, r3, #10
 800f582:	b29a      	uxth	r2, r3
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	801a      	strh	r2, [r3, #0]
 800f588:	e023      	b.n	800f5d2 <USB_EPStartXfer+0x216>
 800f58a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f58c:	095b      	lsrs	r3, r3, #5
 800f58e:	643b      	str	r3, [r7, #64]	; 0x40
 800f590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f592:	b29b      	uxth	r3, r3
 800f594:	029b      	lsls	r3, r3, #10
 800f596:	b29b      	uxth	r3, r3
 800f598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f59c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	801a      	strh	r2, [r3, #0]
 800f5a6:	e014      	b.n	800f5d2 <USB_EPStartXfer+0x216>
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	785b      	ldrb	r3, [r3, #1]
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d110      	bne.n	800f5d2 <USB_EPStartXfer+0x216>
 800f5b0:	687c      	ldr	r4, [r7, #4]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	441c      	add	r4, r3
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	00db      	lsls	r3, r3, #3
 800f5c2:	4423      	add	r3, r4
 800f5c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f5c8:	61fb      	str	r3, [r7, #28]
 800f5ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5cc:	b29a      	uxth	r2, r3
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	891b      	ldrh	r3, [r3, #8]
 800f5d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	6959      	ldr	r1, [r3, #20]
 800f5de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f000 fac8 	bl	800fb7c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	785b      	ldrb	r3, [r3, #1]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d115      	bne.n	800f620 <USB_EPStartXfer+0x264>
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	009b      	lsls	r3, r3, #2
 800f5fc:	4413      	add	r3, r2
 800f5fe:	881b      	ldrh	r3, [r3, #0]
 800f600:	b29b      	uxth	r3, r3
 800f602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f60a:	b29c      	uxth	r4, r3
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	009b      	lsls	r3, r3, #2
 800f614:	441a      	add	r2, r3
 800f616:	4b99      	ldr	r3, [pc, #612]	; (800f87c <USB_EPStartXfer+0x4c0>)
 800f618:	4323      	orrs	r3, r4
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	8013      	strh	r3, [r2, #0]
 800f61e:	e018      	b.n	800f652 <USB_EPStartXfer+0x296>
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	785b      	ldrb	r3, [r3, #1]
 800f624:	2b01      	cmp	r3, #1
 800f626:	d114      	bne.n	800f652 <USB_EPStartXfer+0x296>
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	4413      	add	r3, r2
 800f632:	881b      	ldrh	r3, [r3, #0]
 800f634:	b29b      	uxth	r3, r3
 800f636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f63a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f63e:	b29c      	uxth	r4, r3
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	441a      	add	r2, r3
 800f64a:	4b8d      	ldr	r3, [pc, #564]	; (800f880 <USB_EPStartXfer+0x4c4>)
 800f64c:	4323      	orrs	r3, r4
 800f64e:	b29b      	uxth	r3, r3
 800f650:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	4413      	add	r3, r2
 800f65c:	881b      	ldrh	r3, [r3, #0]
 800f65e:	b29b      	uxth	r3, r3
 800f660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f668:	b29c      	uxth	r4, r3
 800f66a:	f084 0310 	eor.w	r3, r4, #16
 800f66e:	b29c      	uxth	r4, r3
 800f670:	f084 0320 	eor.w	r3, r4, #32
 800f674:	b29c      	uxth	r4, r3
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	009b      	lsls	r3, r3, #2
 800f67e:	441a      	add	r2, r3
 800f680:	4b80      	ldr	r3, [pc, #512]	; (800f884 <USB_EPStartXfer+0x4c8>)
 800f682:	4323      	orrs	r3, r4
 800f684:	b29b      	uxth	r3, r3
 800f686:	8013      	strh	r3, [r2, #0]
 800f688:	e13c      	b.n	800f904 <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	699a      	ldr	r2, [r3, #24]
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	691b      	ldr	r3, [r3, #16]
 800f692:	429a      	cmp	r2, r3
 800f694:	d909      	bls.n	800f6aa <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	691b      	ldr	r3, [r3, #16]
 800f69a:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	699a      	ldr	r2, [r3, #24]
 800f6a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6a2:	1ad2      	subs	r2, r2, r3
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	619a      	str	r2, [r3, #24]
 800f6a8:	e005      	b.n	800f6b6 <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	699b      	ldr	r3, [r3, #24]
 800f6ae:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	7b1b      	ldrb	r3, [r3, #12]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d144      	bne.n	800f748 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f6be:	687c      	ldr	r4, [r7, #4]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	441c      	add	r4, r3
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	00db      	lsls	r3, r3, #3
 800f6d0:	4423      	add	r3, r4
 800f6d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f6d6:	623b      	str	r3, [r7, #32]
 800f6d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d110      	bne.n	800f700 <USB_EPStartXfer+0x344>
 800f6de:	6a3b      	ldr	r3, [r7, #32]
 800f6e0:	881b      	ldrh	r3, [r3, #0]
 800f6e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f6e6:	b29a      	uxth	r2, r3
 800f6e8:	6a3b      	ldr	r3, [r7, #32]
 800f6ea:	801a      	strh	r2, [r3, #0]
 800f6ec:	6a3b      	ldr	r3, [r7, #32]
 800f6ee:	881b      	ldrh	r3, [r3, #0]
 800f6f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f6f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	6a3b      	ldr	r3, [r7, #32]
 800f6fc:	801a      	strh	r2, [r3, #0]
 800f6fe:	e0e6      	b.n	800f8ce <USB_EPStartXfer+0x512>
 800f700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f702:	2b3d      	cmp	r3, #61	; 0x3d
 800f704:	d811      	bhi.n	800f72a <USB_EPStartXfer+0x36e>
 800f706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f708:	085b      	lsrs	r3, r3, #1
 800f70a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f70c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f70e:	f003 0301 	and.w	r3, r3, #1
 800f712:	2b00      	cmp	r3, #0
 800f714:	d002      	beq.n	800f71c <USB_EPStartXfer+0x360>
 800f716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f718:	3301      	adds	r3, #1
 800f71a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f71e:	b29b      	uxth	r3, r3
 800f720:	029b      	lsls	r3, r3, #10
 800f722:	b29a      	uxth	r2, r3
 800f724:	6a3b      	ldr	r3, [r7, #32]
 800f726:	801a      	strh	r2, [r3, #0]
 800f728:	e0d1      	b.n	800f8ce <USB_EPStartXfer+0x512>
 800f72a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f72c:	095b      	lsrs	r3, r3, #5
 800f72e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f732:	b29b      	uxth	r3, r3
 800f734:	029b      	lsls	r3, r3, #10
 800f736:	b29b      	uxth	r3, r3
 800f738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f73c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f740:	b29a      	uxth	r2, r3
 800f742:	6a3b      	ldr	r3, [r7, #32]
 800f744:	801a      	strh	r2, [r3, #0]
 800f746:	e0c2      	b.n	800f8ce <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	785b      	ldrb	r3, [r3, #1]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d144      	bne.n	800f7da <USB_EPStartXfer+0x41e>
 800f750:	687c      	ldr	r4, [r7, #4]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f758:	b29b      	uxth	r3, r3
 800f75a:	441c      	add	r4, r3
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	00db      	lsls	r3, r3, #3
 800f762:	4423      	add	r3, r4
 800f764:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f76a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d110      	bne.n	800f792 <USB_EPStartXfer+0x3d6>
 800f770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f772:	881b      	ldrh	r3, [r3, #0]
 800f774:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f778:	b29a      	uxth	r2, r3
 800f77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77c:	801a      	strh	r2, [r3, #0]
 800f77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f780:	881b      	ldrh	r3, [r3, #0]
 800f782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f78e:	801a      	strh	r2, [r3, #0]
 800f790:	e038      	b.n	800f804 <USB_EPStartXfer+0x448>
 800f792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f794:	2b3d      	cmp	r3, #61	; 0x3d
 800f796:	d811      	bhi.n	800f7bc <USB_EPStartXfer+0x400>
 800f798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f79a:	085b      	lsrs	r3, r3, #1
 800f79c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f79e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7a0:	f003 0301 	and.w	r3, r3, #1
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d002      	beq.n	800f7ae <USB_EPStartXfer+0x3f2>
 800f7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	029b      	lsls	r3, r3, #10
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b8:	801a      	strh	r2, [r3, #0]
 800f7ba:	e023      	b.n	800f804 <USB_EPStartXfer+0x448>
 800f7bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7be:	095b      	lsrs	r3, r3, #5
 800f7c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	029b      	lsls	r3, r3, #10
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d6:	801a      	strh	r2, [r3, #0]
 800f7d8:	e014      	b.n	800f804 <USB_EPStartXfer+0x448>
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	785b      	ldrb	r3, [r3, #1]
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d110      	bne.n	800f804 <USB_EPStartXfer+0x448>
 800f7e2:	687c      	ldr	r4, [r7, #4]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	441c      	add	r4, r3
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	00db      	lsls	r3, r3, #3
 800f7f4:	4423      	add	r3, r4
 800f7f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f7fa:	633b      	str	r3, [r7, #48]	; 0x30
 800f7fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f802:	801a      	strh	r2, [r3, #0]
 800f804:	687c      	ldr	r4, [r7, #4]
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	785b      	ldrb	r3, [r3, #1]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d14b      	bne.n	800f8a6 <USB_EPStartXfer+0x4ea>
 800f80e:	687c      	ldr	r4, [r7, #4]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f816:	b29b      	uxth	r3, r3
 800f818:	441c      	add	r4, r3
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	00db      	lsls	r3, r3, #3
 800f820:	4423      	add	r3, r4
 800f822:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f826:	627b      	str	r3, [r7, #36]	; 0x24
 800f828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d110      	bne.n	800f850 <USB_EPStartXfer+0x494>
 800f82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f830:	881b      	ldrh	r3, [r3, #0]
 800f832:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f836:	b29a      	uxth	r2, r3
 800f838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83a:	801a      	strh	r2, [r3, #0]
 800f83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83e:	881b      	ldrh	r3, [r3, #0]
 800f840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f848:	b29a      	uxth	r2, r3
 800f84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84c:	801a      	strh	r2, [r3, #0]
 800f84e:	e03e      	b.n	800f8ce <USB_EPStartXfer+0x512>
 800f850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f852:	2b3d      	cmp	r3, #61	; 0x3d
 800f854:	d818      	bhi.n	800f888 <USB_EPStartXfer+0x4cc>
 800f856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f858:	085b      	lsrs	r3, r3, #1
 800f85a:	637b      	str	r3, [r7, #52]	; 0x34
 800f85c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f85e:	f003 0301 	and.w	r3, r3, #1
 800f862:	2b00      	cmp	r3, #0
 800f864:	d002      	beq.n	800f86c <USB_EPStartXfer+0x4b0>
 800f866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f868:	3301      	adds	r3, #1
 800f86a:	637b      	str	r3, [r7, #52]	; 0x34
 800f86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f86e:	b29b      	uxth	r3, r3
 800f870:	029b      	lsls	r3, r3, #10
 800f872:	b29a      	uxth	r2, r3
 800f874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f876:	801a      	strh	r2, [r3, #0]
 800f878:	e029      	b.n	800f8ce <USB_EPStartXfer+0x512>
 800f87a:	bf00      	nop
 800f87c:	ffff80c0 	.word	0xffff80c0
 800f880:	ffffc080 	.word	0xffffc080
 800f884:	ffff8080 	.word	0xffff8080
 800f888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f88a:	095b      	lsrs	r3, r3, #5
 800f88c:	637b      	str	r3, [r7, #52]	; 0x34
 800f88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f890:	b29b      	uxth	r3, r3
 800f892:	029b      	lsls	r3, r3, #10
 800f894:	b29b      	uxth	r3, r3
 800f896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f89a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f89e:	b29a      	uxth	r2, r3
 800f8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a2:	801a      	strh	r2, [r3, #0]
 800f8a4:	e013      	b.n	800f8ce <USB_EPStartXfer+0x512>
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	785b      	ldrb	r3, [r3, #1]
 800f8aa:	2b01      	cmp	r3, #1
 800f8ac:	d10f      	bne.n	800f8ce <USB_EPStartXfer+0x512>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	441c      	add	r4, r3
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	00db      	lsls	r3, r3, #3
 800f8be:	4423      	add	r3, r4
 800f8c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f8c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f8c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8c8:	b29a      	uxth	r2, r3
 800f8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8cc:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	009b      	lsls	r3, r3, #2
 800f8d6:	4413      	add	r3, r2
 800f8d8:	881b      	ldrh	r3, [r3, #0]
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f8e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8e4:	b29c      	uxth	r4, r3
 800f8e6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800f8ea:	b29c      	uxth	r4, r3
 800f8ec:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800f8f0:	b29c      	uxth	r4, r3
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	441a      	add	r2, r3
 800f8fc:	4b04      	ldr	r3, [pc, #16]	; (800f910 <USB_EPStartXfer+0x554>)
 800f8fe:	4323      	orrs	r3, r4
 800f900:	b29b      	uxth	r3, r3
 800f902:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f904:	2300      	movs	r3, #0
}
 800f906:	4618      	mov	r0, r3
 800f908:	3754      	adds	r7, #84	; 0x54
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd90      	pop	{r4, r7, pc}
 800f90e:	bf00      	nop
 800f910:	ffff8080 	.word	0xffff8080

0800f914 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f914:	b490      	push	{r4, r7}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	785b      	ldrb	r3, [r3, #1]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d018      	beq.n	800f958 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	4413      	add	r3, r2
 800f930:	881b      	ldrh	r3, [r3, #0]
 800f932:	b29b      	uxth	r3, r3
 800f934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f93c:	b29c      	uxth	r4, r3
 800f93e:	f084 0310 	eor.w	r3, r4, #16
 800f942:	b29c      	uxth	r4, r3
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	441a      	add	r2, r3
 800f94e:	4b11      	ldr	r3, [pc, #68]	; (800f994 <USB_EPSetStall+0x80>)
 800f950:	4323      	orrs	r3, r4
 800f952:	b29b      	uxth	r3, r3
 800f954:	8013      	strh	r3, [r2, #0]
 800f956:	e017      	b.n	800f988 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	4413      	add	r3, r2
 800f962:	881b      	ldrh	r3, [r3, #0]
 800f964:	b29b      	uxth	r3, r3
 800f966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f96e:	b29c      	uxth	r4, r3
 800f970:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800f974:	b29c      	uxth	r4, r3
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	009b      	lsls	r3, r3, #2
 800f97e:	441a      	add	r2, r3
 800f980:	4b04      	ldr	r3, [pc, #16]	; (800f994 <USB_EPSetStall+0x80>)
 800f982:	4323      	orrs	r3, r4
 800f984:	b29b      	uxth	r3, r3
 800f986:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f988:	2300      	movs	r3, #0
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3708      	adds	r7, #8
 800f98e:	46bd      	mov	sp, r7
 800f990:	bc90      	pop	{r4, r7}
 800f992:	4770      	bx	lr
 800f994:	ffff8080 	.word	0xffff8080

0800f998 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f998:	b490      	push	{r4, r7}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	7b1b      	ldrb	r3, [r3, #12]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d17d      	bne.n	800faa6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	785b      	ldrb	r3, [r3, #1]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d03d      	beq.n	800fa2e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	4413      	add	r3, r2
 800f9bc:	881b      	ldrh	r3, [r3, #0]
 800f9be:	b29c      	uxth	r4, r3
 800f9c0:	4623      	mov	r3, r4
 800f9c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d014      	beq.n	800f9f4 <USB_EPClearStall+0x5c>
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	009b      	lsls	r3, r3, #2
 800f9d2:	4413      	add	r3, r2
 800f9d4:	881b      	ldrh	r3, [r3, #0]
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9e0:	b29c      	uxth	r4, r3
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	441a      	add	r2, r3
 800f9ec:	4b31      	ldr	r3, [pc, #196]	; (800fab4 <USB_EPClearStall+0x11c>)
 800f9ee:	4323      	orrs	r3, r4
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	78db      	ldrb	r3, [r3, #3]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d054      	beq.n	800faa6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	4413      	add	r3, r2
 800fa06:	881b      	ldrh	r3, [r3, #0]
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa12:	b29c      	uxth	r4, r3
 800fa14:	f084 0320 	eor.w	r3, r4, #32
 800fa18:	b29c      	uxth	r4, r3
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	441a      	add	r2, r3
 800fa24:	4b24      	ldr	r3, [pc, #144]	; (800fab8 <USB_EPClearStall+0x120>)
 800fa26:	4323      	orrs	r3, r4
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	8013      	strh	r3, [r2, #0]
 800fa2c:	e03b      	b.n	800faa6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	4413      	add	r3, r2
 800fa38:	881b      	ldrh	r3, [r3, #0]
 800fa3a:	b29c      	uxth	r4, r3
 800fa3c:	4623      	mov	r3, r4
 800fa3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d014      	beq.n	800fa70 <USB_EPClearStall+0xd8>
 800fa46:	687a      	ldr	r2, [r7, #4]
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	009b      	lsls	r3, r3, #2
 800fa4e:	4413      	add	r3, r2
 800fa50:	881b      	ldrh	r3, [r3, #0]
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa5c:	b29c      	uxth	r4, r3
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	441a      	add	r2, r3
 800fa68:	4b14      	ldr	r3, [pc, #80]	; (800fabc <USB_EPClearStall+0x124>)
 800fa6a:	4323      	orrs	r3, r4
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	009b      	lsls	r3, r3, #2
 800fa78:	4413      	add	r3, r2
 800fa7a:	881b      	ldrh	r3, [r3, #0]
 800fa7c:	b29b      	uxth	r3, r3
 800fa7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa86:	b29c      	uxth	r4, r3
 800fa88:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800fa8c:	b29c      	uxth	r4, r3
 800fa8e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800fa92:	b29c      	uxth	r4, r3
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	009b      	lsls	r3, r3, #2
 800fa9c:	441a      	add	r2, r3
 800fa9e:	4b06      	ldr	r3, [pc, #24]	; (800fab8 <USB_EPClearStall+0x120>)
 800faa0:	4323      	orrs	r3, r4
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800faa6:	2300      	movs	r3, #0
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bc90      	pop	{r4, r7}
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	ffff80c0 	.word	0xffff80c0
 800fab8:	ffff8080 	.word	0xffff8080
 800fabc:	ffffc080 	.word	0xffffc080

0800fac0 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2201      	movs	r2, #1
 800facc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2203      	movs	r2, #3
 800fadc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	370c      	adds	r7, #12
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr

0800faee <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800faee:	b480      	push	{r7}
 800faf0:	b083      	sub	sp, #12
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
 800faf6:	460b      	mov	r3, r1
 800faf8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800fafa:	78fb      	ldrb	r3, [r7, #3]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d103      	bne.n	800fb08 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2280      	movs	r2, #128	; 0x80
 800fb04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	370c      	adds	r7, #12
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr

0800fb16 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800fb16:	b480      	push	{r7}
 800fb18:	b083      	sub	sp, #12
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800fb36:	2300      	movs	r3, #0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b085      	sub	sp, #20
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fb56:	68fb      	ldr	r3, [r7, #12]
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3714      	adds	r7, #20
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b083      	sub	sp, #12
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b08d      	sub	sp, #52	; 0x34
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	4611      	mov	r1, r2
 800fb88:	461a      	mov	r2, r3
 800fb8a:	460b      	mov	r3, r1
 800fb8c:	80fb      	strh	r3, [r7, #6]
 800fb8e:	4613      	mov	r3, r2
 800fb90:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800fb92:	88bb      	ldrh	r3, [r7, #4]
 800fb94:	3301      	adds	r3, #1
 800fb96:	085b      	lsrs	r3, r3, #1
 800fb98:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fba2:	88fa      	ldrh	r2, [r7, #6]
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	4413      	add	r3, r2
 800fba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fbac:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800fbae:	6a3b      	ldr	r3, [r7, #32]
 800fbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbb2:	e01b      	b.n	800fbec <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800fbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	021b      	lsls	r3, r3, #8
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	461a      	mov	r2, r3
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	b29a      	uxth	r2, r3
 800fbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800fbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbdc:	3302      	adds	r3, #2
 800fbde:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800fbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d1e0      	bne.n	800fbb4 <USB_WritePMA+0x38>
  }
}
 800fbf2:	bf00      	nop
 800fbf4:	3734      	adds	r7, #52	; 0x34
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr

0800fbfe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fbfe:	b480      	push	{r7}
 800fc00:	b08b      	sub	sp, #44	; 0x2c
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	60f8      	str	r0, [r7, #12]
 800fc06:	60b9      	str	r1, [r7, #8]
 800fc08:	4611      	mov	r1, r2
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	80fb      	strh	r3, [r7, #6]
 800fc10:	4613      	mov	r3, r2
 800fc12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800fc14:	88bb      	ldrh	r3, [r7, #4]
 800fc16:	085b      	lsrs	r3, r3, #1
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fc24:	88fa      	ldrh	r2, [r7, #6]
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	4413      	add	r3, r2
 800fc2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc2e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	627b      	str	r3, [r7, #36]	; 0x24
 800fc34:	e018      	b.n	800fc68 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800fc36:	6a3b      	ldr	r3, [r7, #32]
 800fc38:	881b      	ldrh	r3, [r3, #0]
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800fc3e:	6a3b      	ldr	r3, [r7, #32]
 800fc40:	3302      	adds	r3, #2
 800fc42:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	3301      	adds	r3, #1
 800fc50:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	0a1b      	lsrs	r3, r3, #8
 800fc56:	b2da      	uxtb	r2, r3
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	3301      	adds	r3, #1
 800fc60:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800fc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc64:	3b01      	subs	r3, #1
 800fc66:	627b      	str	r3, [r7, #36]	; 0x24
 800fc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d1e3      	bne.n	800fc36 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800fc6e:	88bb      	ldrh	r3, [r7, #4]
 800fc70:	f003 0301 	and.w	r3, r3, #1
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d007      	beq.n	800fc8a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800fc7a:	6a3b      	ldr	r3, [r7, #32]
 800fc7c:	881b      	ldrh	r3, [r3, #0]
 800fc7e:	b29b      	uxth	r3, r3
 800fc80:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	b2da      	uxtb	r2, r3
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	701a      	strb	r2, [r3, #0]
  }
}
 800fc8a:	bf00      	nop
 800fc8c:	372c      	adds	r7, #44	; 0x2c
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr

0800fc96 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fc96:	b480      	push	{r7}
 800fc98:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800fc9a:	bf00      	nop
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fca4:	b480      	push	{r7}
 800fca6:	b085      	sub	sp, #20
 800fca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcaa:	f3ef 8305 	mrs	r3, IPSR
 800fcae:	60bb      	str	r3, [r7, #8]
  return(result);
 800fcb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d10f      	bne.n	800fcd6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcb6:	f3ef 8310 	mrs	r3, PRIMASK
 800fcba:	607b      	str	r3, [r7, #4]
  return(result);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d105      	bne.n	800fcce <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fcc2:	f3ef 8311 	mrs	r3, BASEPRI
 800fcc6:	603b      	str	r3, [r7, #0]
  return(result);
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d007      	beq.n	800fcde <osKernelInitialize+0x3a>
 800fcce:	4b0e      	ldr	r3, [pc, #56]	; (800fd08 <osKernelInitialize+0x64>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2b02      	cmp	r3, #2
 800fcd4:	d103      	bne.n	800fcde <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800fcd6:	f06f 0305 	mvn.w	r3, #5
 800fcda:	60fb      	str	r3, [r7, #12]
 800fcdc:	e00c      	b.n	800fcf8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fcde:	4b0a      	ldr	r3, [pc, #40]	; (800fd08 <osKernelInitialize+0x64>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d105      	bne.n	800fcf2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fce6:	4b08      	ldr	r3, [pc, #32]	; (800fd08 <osKernelInitialize+0x64>)
 800fce8:	2201      	movs	r2, #1
 800fcea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fcec:	2300      	movs	r3, #0
 800fcee:	60fb      	str	r3, [r7, #12]
 800fcf0:	e002      	b.n	800fcf8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800fcf2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3714      	adds	r7, #20
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop
 800fd08:	20000ca0 	.word	0x20000ca0

0800fd0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd12:	f3ef 8305 	mrs	r3, IPSR
 800fd16:	60bb      	str	r3, [r7, #8]
  return(result);
 800fd18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d10f      	bne.n	800fd3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd1e:	f3ef 8310 	mrs	r3, PRIMASK
 800fd22:	607b      	str	r3, [r7, #4]
  return(result);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d105      	bne.n	800fd36 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fd2a:	f3ef 8311 	mrs	r3, BASEPRI
 800fd2e:	603b      	str	r3, [r7, #0]
  return(result);
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d007      	beq.n	800fd46 <osKernelStart+0x3a>
 800fd36:	4b0f      	ldr	r3, [pc, #60]	; (800fd74 <osKernelStart+0x68>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2b02      	cmp	r3, #2
 800fd3c:	d103      	bne.n	800fd46 <osKernelStart+0x3a>
    stat = osErrorISR;
 800fd3e:	f06f 0305 	mvn.w	r3, #5
 800fd42:	60fb      	str	r3, [r7, #12]
 800fd44:	e010      	b.n	800fd68 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fd46:	4b0b      	ldr	r3, [pc, #44]	; (800fd74 <osKernelStart+0x68>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2b01      	cmp	r3, #1
 800fd4c:	d109      	bne.n	800fd62 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fd4e:	f7ff ffa2 	bl	800fc96 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fd52:	4b08      	ldr	r3, [pc, #32]	; (800fd74 <osKernelStart+0x68>)
 800fd54:	2202      	movs	r2, #2
 800fd56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fd58:	f002 fee8 	bl	8012b2c <vTaskStartScheduler>
      stat = osOK;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	60fb      	str	r3, [r7, #12]
 800fd60:	e002      	b.n	800fd68 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800fd62:	f04f 33ff 	mov.w	r3, #4294967295
 800fd66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fd68:	68fb      	ldr	r3, [r7, #12]
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	20000ca0 	.word	0x20000ca0

0800fd78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b090      	sub	sp, #64	; 0x40
 800fd7c:	af04      	add	r7, sp, #16
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fd84:	2300      	movs	r3, #0
 800fd86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd88:	f3ef 8305 	mrs	r3, IPSR
 800fd8c:	61fb      	str	r3, [r7, #28]
  return(result);
 800fd8e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	f040 8090 	bne.w	800feb6 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd96:	f3ef 8310 	mrs	r3, PRIMASK
 800fd9a:	61bb      	str	r3, [r7, #24]
  return(result);
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d105      	bne.n	800fdae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fda2:	f3ef 8311 	mrs	r3, BASEPRI
 800fda6:	617b      	str	r3, [r7, #20]
  return(result);
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d003      	beq.n	800fdb6 <osThreadNew+0x3e>
 800fdae:	4b44      	ldr	r3, [pc, #272]	; (800fec0 <osThreadNew+0x148>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2b02      	cmp	r3, #2
 800fdb4:	d07f      	beq.n	800feb6 <osThreadNew+0x13e>
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d07c      	beq.n	800feb6 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800fdbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fdc0:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800fdc2:	2318      	movs	r3, #24
 800fdc4:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800fdca:	f04f 33ff 	mov.w	r3, #4294967295
 800fdce:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d045      	beq.n	800fe62 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d002      	beq.n	800fde4 <osThreadNew+0x6c>
        name = attr->name;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	699b      	ldr	r3, [r3, #24]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d002      	beq.n	800fdf2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	699b      	ldr	r3, [r3, #24]
 800fdf0:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d008      	beq.n	800fe0a <osThreadNew+0x92>
 800fdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfa:	2b38      	cmp	r3, #56	; 0x38
 800fdfc:	d805      	bhi.n	800fe0a <osThreadNew+0x92>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	f003 0301 	and.w	r3, r3, #1
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d001      	beq.n	800fe0e <osThreadNew+0x96>
        return (NULL);
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	e054      	b.n	800feb8 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	695b      	ldr	r3, [r3, #20]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d003      	beq.n	800fe1e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	695b      	ldr	r3, [r3, #20]
 800fe1a:	089b      	lsrs	r3, r3, #2
 800fe1c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	689b      	ldr	r3, [r3, #8]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d00e      	beq.n	800fe44 <osThreadNew+0xcc>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	2b63      	cmp	r3, #99	; 0x63
 800fe2c:	d90a      	bls.n	800fe44 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d006      	beq.n	800fe44 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	695b      	ldr	r3, [r3, #20]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d002      	beq.n	800fe44 <osThreadNew+0xcc>
        mem = 1;
 800fe3e:	2301      	movs	r3, #1
 800fe40:	623b      	str	r3, [r7, #32]
 800fe42:	e010      	b.n	800fe66 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d10c      	bne.n	800fe66 <osThreadNew+0xee>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	68db      	ldr	r3, [r3, #12]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d108      	bne.n	800fe66 <osThreadNew+0xee>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	691b      	ldr	r3, [r3, #16]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d104      	bne.n	800fe66 <osThreadNew+0xee>
          mem = 0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	623b      	str	r3, [r7, #32]
 800fe60:	e001      	b.n	800fe66 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d110      	bne.n	800fe8e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fe74:	9202      	str	r2, [sp, #8]
 800fe76:	9301      	str	r3, [sp, #4]
 800fe78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f002 fc7a 	bl	801277c <xTaskCreateStatic>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	613b      	str	r3, [r7, #16]
 800fe8c:	e013      	b.n	800feb6 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800fe8e:	6a3b      	ldr	r3, [r7, #32]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d110      	bne.n	800feb6 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fe94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	f107 0310 	add.w	r3, r7, #16
 800fe9c:	9301      	str	r3, [sp, #4]
 800fe9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea0:	9300      	str	r3, [sp, #0]
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fea6:	68f8      	ldr	r0, [r7, #12]
 800fea8:	f002 fcc2 	bl	8012830 <xTaskCreate>
 800feac:	4603      	mov	r3, r0
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d001      	beq.n	800feb6 <osThreadNew+0x13e>
          hTask = NULL;
 800feb2:	2300      	movs	r3, #0
 800feb4:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800feb6:	693b      	ldr	r3, [r7, #16]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3730      	adds	r7, #48	; 0x30
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	20000ca0 	.word	0x20000ca0

0800fec4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b08a      	sub	sp, #40	; 0x28
 800fec8:	af02      	add	r7, sp, #8
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d002      	beq.n	800fede <osThreadFlagsSet+0x1a>
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	da03      	bge.n	800fee6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800fede:	f06f 0303 	mvn.w	r3, #3
 800fee2:	60fb      	str	r3, [r7, #12]
 800fee4:	e046      	b.n	800ff74 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800fee6:	f04f 33ff 	mov.w	r3, #4294967295
 800feea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800feec:	f3ef 8305 	mrs	r3, IPSR
 800fef0:	61bb      	str	r3, [r7, #24]
  return(result);
 800fef2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d10f      	bne.n	800ff18 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fef8:	f3ef 8310 	mrs	r3, PRIMASK
 800fefc:	617b      	str	r3, [r7, #20]
  return(result);
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d105      	bne.n	800ff10 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff04:	f3ef 8311 	mrs	r3, BASEPRI
 800ff08:	613b      	str	r3, [r7, #16]
  return(result);
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d024      	beq.n	800ff5a <osThreadFlagsSet+0x96>
 800ff10:	4b1b      	ldr	r3, [pc, #108]	; (800ff80 <osThreadFlagsSet+0xbc>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	2b02      	cmp	r3, #2
 800ff16:	d120      	bne.n	800ff5a <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ff1c:	f107 0308 	add.w	r3, r7, #8
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	2300      	movs	r3, #0
 800ff24:	2201      	movs	r2, #1
 800ff26:	6839      	ldr	r1, [r7, #0]
 800ff28:	69f8      	ldr	r0, [r7, #28]
 800ff2a:	f003 fd71 	bl	8013a10 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ff2e:	f107 020c 	add.w	r2, r7, #12
 800ff32:	2300      	movs	r3, #0
 800ff34:	9300      	str	r3, [sp, #0]
 800ff36:	4613      	mov	r3, r2
 800ff38:	2200      	movs	r2, #0
 800ff3a:	2100      	movs	r1, #0
 800ff3c:	69f8      	ldr	r0, [r7, #28]
 800ff3e:	f003 fd67 	bl	8013a10 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d015      	beq.n	800ff74 <osThreadFlagsSet+0xb0>
 800ff48:	4b0e      	ldr	r3, [pc, #56]	; (800ff84 <osThreadFlagsSet+0xc0>)
 800ff4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff4e:	601a      	str	r2, [r3, #0]
 800ff50:	f3bf 8f4f 	dsb	sy
 800ff54:	f3bf 8f6f 	isb	sy
 800ff58:	e00c      	b.n	800ff74 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	6839      	ldr	r1, [r7, #0]
 800ff60:	69f8      	ldr	r0, [r7, #28]
 800ff62:	f003 fc9f 	bl	80138a4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ff66:	f107 030c 	add.w	r3, r7, #12
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	2100      	movs	r1, #0
 800ff6e:	69f8      	ldr	r0, [r7, #28]
 800ff70:	f003 fc98 	bl	80138a4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800ff74:	68fb      	ldr	r3, [r7, #12]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3720      	adds	r7, #32
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	20000ca0 	.word	0x20000ca0
 800ff84:	e000ed04 	.word	0xe000ed04

0800ff88 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b088      	sub	sp, #32
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff90:	f3ef 8305 	mrs	r3, IPSR
 800ff94:	617b      	str	r3, [r7, #20]
  return(result);
 800ff96:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d10f      	bne.n	800ffbc <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff9c:	f3ef 8310 	mrs	r3, PRIMASK
 800ffa0:	613b      	str	r3, [r7, #16]
  return(result);
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d105      	bne.n	800ffb4 <osThreadFlagsClear+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ffa8:	f3ef 8311 	mrs	r3, BASEPRI
 800ffac:	60fb      	str	r3, [r7, #12]
  return(result);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d007      	beq.n	800ffc4 <osThreadFlagsClear+0x3c>
 800ffb4:	4b1b      	ldr	r3, [pc, #108]	; (8010024 <osThreadFlagsClear+0x9c>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b02      	cmp	r3, #2
 800ffba:	d103      	bne.n	800ffc4 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 800ffbc:	f06f 0305 	mvn.w	r3, #5
 800ffc0:	61fb      	str	r3, [r7, #28]
 800ffc2:	e02a      	b.n	801001a <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	da03      	bge.n	800ffd2 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 800ffca:	f06f 0303 	mvn.w	r3, #3
 800ffce:	61fb      	str	r3, [r7, #28]
 800ffd0:	e023      	b.n	801001a <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800ffd2:	f003 fa77 	bl	80134c4 <xTaskGetCurrentTaskHandle>
 800ffd6:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800ffd8:	f107 0308 	add.w	r3, r7, #8
 800ffdc:	2200      	movs	r2, #0
 800ffde:	2100      	movs	r1, #0
 800ffe0:	69b8      	ldr	r0, [r7, #24]
 800ffe2:	f003 fc5f 	bl	80138a4 <xTaskGenericNotify>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d113      	bne.n	8010014 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	43da      	mvns	r2, r3
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	4013      	ands	r3, r2
 800fff8:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800fffa:	68b9      	ldr	r1, [r7, #8]
 800fffc:	2300      	movs	r3, #0
 800fffe:	2203      	movs	r2, #3
 8010000:	69b8      	ldr	r0, [r7, #24]
 8010002:	f003 fc4f 	bl	80138a4 <xTaskGenericNotify>
 8010006:	4603      	mov	r3, r0
 8010008:	2b01      	cmp	r3, #1
 801000a:	d006      	beq.n	801001a <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 801000c:	f04f 33ff 	mov.w	r3, #4294967295
 8010010:	61fb      	str	r3, [r7, #28]
 8010012:	e002      	b.n	801001a <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 8010014:	f04f 33ff 	mov.w	r3, #4294967295
 8010018:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 801001a:	69fb      	ldr	r3, [r7, #28]
}
 801001c:	4618      	mov	r0, r3
 801001e:	3720      	adds	r7, #32
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	20000ca0 	.word	0x20000ca0

08010028 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8010028:	b580      	push	{r7, lr}
 801002a:	b08e      	sub	sp, #56	; 0x38
 801002c:	af00      	add	r7, sp, #0
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	60b9      	str	r1, [r7, #8]
 8010032:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010034:	f3ef 8305 	mrs	r3, IPSR
 8010038:	61fb      	str	r3, [r7, #28]
  return(result);
 801003a:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 801003c:	2b00      	cmp	r3, #0
 801003e:	d10f      	bne.n	8010060 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010040:	f3ef 8310 	mrs	r3, PRIMASK
 8010044:	61bb      	str	r3, [r7, #24]
  return(result);
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d105      	bne.n	8010058 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801004c:	f3ef 8311 	mrs	r3, BASEPRI
 8010050:	617b      	str	r3, [r7, #20]
  return(result);
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d007      	beq.n	8010068 <osThreadFlagsWait+0x40>
 8010058:	4b3c      	ldr	r3, [pc, #240]	; (801014c <osThreadFlagsWait+0x124>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	2b02      	cmp	r3, #2
 801005e:	d103      	bne.n	8010068 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8010060:	f06f 0305 	mvn.w	r3, #5
 8010064:	637b      	str	r3, [r7, #52]	; 0x34
 8010066:	e06b      	b.n	8010140 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2b00      	cmp	r3, #0
 801006c:	da03      	bge.n	8010076 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 801006e:	f06f 0303 	mvn.w	r3, #3
 8010072:	637b      	str	r3, [r7, #52]	; 0x34
 8010074:	e064      	b.n	8010140 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	f003 0302 	and.w	r3, r3, #2
 801007c:	2b00      	cmp	r3, #0
 801007e:	d002      	beq.n	8010086 <osThreadFlagsWait+0x5e>
      clear = 0U;
 8010080:	2300      	movs	r3, #0
 8010082:	633b      	str	r3, [r7, #48]	; 0x30
 8010084:	e001      	b.n	801008a <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 801008a:	2300      	movs	r3, #0
 801008c:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8010092:	f002 fe93 	bl	8012dbc <xTaskGetTickCount>
 8010096:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8010098:	f107 0210 	add.w	r2, r7, #16
 801009c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100a0:	2000      	movs	r0, #0
 80100a2:	f003 fba5 	bl	80137f0 <xTaskNotifyWait>
 80100a6:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 80100a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d137      	bne.n	801011e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 80100ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	4013      	ands	r3, r2
 80100b4:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100ba:	4313      	orrs	r3, r2
 80100bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	f003 0301 	and.w	r3, r3, #1
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d00c      	beq.n	80100e2 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100cc:	4013      	ands	r3, r2
 80100ce:	68fa      	ldr	r2, [r7, #12]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d032      	beq.n	801013a <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d10f      	bne.n	80100fa <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80100da:	f06f 0302 	mvn.w	r3, #2
 80100de:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80100e0:	e02e      	b.n	8010140 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80100e2:	68fa      	ldr	r2, [r7, #12]
 80100e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e6:	4013      	ands	r3, r2
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d128      	bne.n	801013e <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d103      	bne.n	80100fa <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80100f2:	f06f 0302 	mvn.w	r3, #2
 80100f6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80100f8:	e022      	b.n	8010140 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80100fa:	f002 fe5f 	bl	8012dbc <xTaskGetTickCount>
 80100fe:	4602      	mov	r2, r0
 8010100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8010106:	6a3a      	ldr	r2, [r7, #32]
 8010108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010a:	429a      	cmp	r2, r3
 801010c:	d902      	bls.n	8010114 <osThreadFlagsWait+0xec>
          tout  = 0;
 801010e:	2300      	movs	r3, #0
 8010110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010112:	e00e      	b.n	8010132 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8010114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010116:	6a3b      	ldr	r3, [r7, #32]
 8010118:	1ad3      	subs	r3, r2, r3
 801011a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801011c:	e009      	b.n	8010132 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d103      	bne.n	801012c <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8010124:	f06f 0302 	mvn.w	r3, #2
 8010128:	637b      	str	r3, [r7, #52]	; 0x34
 801012a:	e002      	b.n	8010132 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 801012c:	f06f 0301 	mvn.w	r3, #1
 8010130:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8010132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010134:	2b00      	cmp	r3, #0
 8010136:	d1af      	bne.n	8010098 <osThreadFlagsWait+0x70>
 8010138:	e002      	b.n	8010140 <osThreadFlagsWait+0x118>
            break;
 801013a:	bf00      	nop
 801013c:	e000      	b.n	8010140 <osThreadFlagsWait+0x118>
            break;
 801013e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8010140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010142:	4618      	mov	r0, r3
 8010144:	3738      	adds	r7, #56	; 0x38
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	20000ca0 	.word	0x20000ca0

08010150 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8010150:	b580      	push	{r7, lr}
 8010152:	b086      	sub	sp, #24
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010158:	f3ef 8305 	mrs	r3, IPSR
 801015c:	613b      	str	r3, [r7, #16]
  return(result);
 801015e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010160:	2b00      	cmp	r3, #0
 8010162:	d10f      	bne.n	8010184 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010164:	f3ef 8310 	mrs	r3, PRIMASK
 8010168:	60fb      	str	r3, [r7, #12]
  return(result);
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d105      	bne.n	801017c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010170:	f3ef 8311 	mrs	r3, BASEPRI
 8010174:	60bb      	str	r3, [r7, #8]
  return(result);
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d007      	beq.n	801018c <osDelay+0x3c>
 801017c:	4b0a      	ldr	r3, [pc, #40]	; (80101a8 <osDelay+0x58>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2b02      	cmp	r3, #2
 8010182:	d103      	bne.n	801018c <osDelay+0x3c>
    stat = osErrorISR;
 8010184:	f06f 0305 	mvn.w	r3, #5
 8010188:	617b      	str	r3, [r7, #20]
 801018a:	e007      	b.n	801019c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801018c:	2300      	movs	r3, #0
 801018e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d002      	beq.n	801019c <osDelay+0x4c>
      vTaskDelay(ticks);
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f002 fc94 	bl	8012ac4 <vTaskDelay>
    }
  }

  return (stat);
 801019c:	697b      	ldr	r3, [r7, #20]
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3718      	adds	r7, #24
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	20000ca0 	.word	0x20000ca0

080101ac <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f004 f95d 	bl	8014474 <pvTimerGetTimerID>
 80101ba:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d005      	beq.n	80101ce <TimerCallback+0x22>
    callb->func (callb->arg);
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	68fa      	ldr	r2, [r7, #12]
 80101c8:	6852      	ldr	r2, [r2, #4]
 80101ca:	4610      	mov	r0, r2
 80101cc:	4798      	blx	r3
  }
}
 80101ce:	bf00      	nop
 80101d0:	3710      	adds	r7, #16
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
	...

080101d8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80101d8:	b580      	push	{r7, lr}
 80101da:	b08e      	sub	sp, #56	; 0x38
 80101dc:	af02      	add	r7, sp, #8
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	607a      	str	r2, [r7, #4]
 80101e2:	603b      	str	r3, [r7, #0]
 80101e4:	460b      	mov	r3, r1
 80101e6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80101e8:	2300      	movs	r3, #0
 80101ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101ec:	f3ef 8305 	mrs	r3, IPSR
 80101f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80101f2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d16a      	bne.n	80102ce <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101f8:	f3ef 8310 	mrs	r3, PRIMASK
 80101fc:	617b      	str	r3, [r7, #20]
  return(result);
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d105      	bne.n	8010210 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010204:	f3ef 8311 	mrs	r3, BASEPRI
 8010208:	613b      	str	r3, [r7, #16]
  return(result);
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d003      	beq.n	8010218 <osTimerNew+0x40>
 8010210:	4b31      	ldr	r3, [pc, #196]	; (80102d8 <osTimerNew+0x100>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b02      	cmp	r3, #2
 8010216:	d05a      	beq.n	80102ce <osTimerNew+0xf6>
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d057      	beq.n	80102ce <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 801021e:	2008      	movs	r0, #8
 8010220:	f000 fd60 	bl	8010ce4 <pvPortMalloc>
 8010224:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8010226:	69fb      	ldr	r3, [r7, #28]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d050      	beq.n	80102ce <osTimerNew+0xf6>
      callb->func = func;
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8010232:	69fb      	ldr	r3, [r7, #28]
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8010238:	7afb      	ldrb	r3, [r7, #11]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d102      	bne.n	8010244 <osTimerNew+0x6c>
        reload = pdFALSE;
 801023e:	2300      	movs	r3, #0
 8010240:	627b      	str	r3, [r7, #36]	; 0x24
 8010242:	e001      	b.n	8010248 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8010244:	2301      	movs	r3, #1
 8010246:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8010248:	f04f 33ff 	mov.w	r3, #4294967295
 801024c:	623b      	str	r3, [r7, #32]
      name = NULL;
 801024e:	2300      	movs	r3, #0
 8010250:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d01c      	beq.n	8010292 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d002      	beq.n	8010266 <osTimerNew+0x8e>
          name = attr->name;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d006      	beq.n	801027c <osTimerNew+0xa4>
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	68db      	ldr	r3, [r3, #12]
 8010272:	2b2b      	cmp	r3, #43	; 0x2b
 8010274:	d902      	bls.n	801027c <osTimerNew+0xa4>
          mem = 1;
 8010276:	2301      	movs	r3, #1
 8010278:	623b      	str	r3, [r7, #32]
 801027a:	e00c      	b.n	8010296 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d108      	bne.n	8010296 <osTimerNew+0xbe>
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d104      	bne.n	8010296 <osTimerNew+0xbe>
            mem = 0;
 801028c:	2300      	movs	r3, #0
 801028e:	623b      	str	r3, [r7, #32]
 8010290:	e001      	b.n	8010296 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8010292:	2300      	movs	r3, #0
 8010294:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8010296:	6a3b      	ldr	r3, [r7, #32]
 8010298:	2b01      	cmp	r3, #1
 801029a:	d10c      	bne.n	80102b6 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	9301      	str	r3, [sp, #4]
 80102a2:	4b0e      	ldr	r3, [pc, #56]	; (80102dc <osTimerNew+0x104>)
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	69fb      	ldr	r3, [r7, #28]
 80102a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102aa:	2101      	movs	r1, #1
 80102ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102ae:	f003 fd44 	bl	8013d3a <xTimerCreateStatic>
 80102b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80102b4:	e00b      	b.n	80102ce <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80102b6:	6a3b      	ldr	r3, [r7, #32]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d108      	bne.n	80102ce <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80102bc:	4b07      	ldr	r3, [pc, #28]	; (80102dc <osTimerNew+0x104>)
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	69fb      	ldr	r3, [r7, #28]
 80102c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102c4:	2101      	movs	r1, #1
 80102c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102c8:	f003 fd16 	bl	8013cf8 <xTimerCreate>
 80102cc:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80102ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3730      	adds	r7, #48	; 0x30
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	20000ca0 	.word	0x20000ca0
 80102dc:	080101ad 	.word	0x080101ad

080102e0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b08a      	sub	sp, #40	; 0x28
 80102e4:	af02      	add	r7, sp, #8
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102ee:	f3ef 8305 	mrs	r3, IPSR
 80102f2:	617b      	str	r3, [r7, #20]
  return(result);
 80102f4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d10f      	bne.n	801031a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102fa:	f3ef 8310 	mrs	r3, PRIMASK
 80102fe:	613b      	str	r3, [r7, #16]
  return(result);
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d105      	bne.n	8010312 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010306:	f3ef 8311 	mrs	r3, BASEPRI
 801030a:	60fb      	str	r3, [r7, #12]
  return(result);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d007      	beq.n	8010322 <osTimerStart+0x42>
 8010312:	4b12      	ldr	r3, [pc, #72]	; (801035c <osTimerStart+0x7c>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2b02      	cmp	r3, #2
 8010318:	d103      	bne.n	8010322 <osTimerStart+0x42>
    stat = osErrorISR;
 801031a:	f06f 0305 	mvn.w	r3, #5
 801031e:	61fb      	str	r3, [r7, #28]
 8010320:	e017      	b.n	8010352 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d103      	bne.n	8010330 <osTimerStart+0x50>
    stat = osErrorParameter;
 8010328:	f06f 0303 	mvn.w	r3, #3
 801032c:	61fb      	str	r3, [r7, #28]
 801032e:	e010      	b.n	8010352 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8010330:	2300      	movs	r3, #0
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	2300      	movs	r3, #0
 8010336:	683a      	ldr	r2, [r7, #0]
 8010338:	2104      	movs	r1, #4
 801033a:	69b8      	ldr	r0, [r7, #24]
 801033c:	f003 fd74 	bl	8013e28 <xTimerGenericCommand>
 8010340:	4603      	mov	r3, r0
 8010342:	2b01      	cmp	r3, #1
 8010344:	d102      	bne.n	801034c <osTimerStart+0x6c>
      stat = osOK;
 8010346:	2300      	movs	r3, #0
 8010348:	61fb      	str	r3, [r7, #28]
 801034a:	e002      	b.n	8010352 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 801034c:	f06f 0302 	mvn.w	r3, #2
 8010350:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8010352:	69fb      	ldr	r3, [r7, #28]
}
 8010354:	4618      	mov	r0, r3
 8010356:	3720      	adds	r7, #32
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	20000ca0 	.word	0x20000ca0

08010360 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8010360:	b580      	push	{r7, lr}
 8010362:	b08a      	sub	sp, #40	; 0x28
 8010364:	af02      	add	r7, sp, #8
 8010366:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801036c:	f3ef 8305 	mrs	r3, IPSR
 8010370:	617b      	str	r3, [r7, #20]
  return(result);
 8010372:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010374:	2b00      	cmp	r3, #0
 8010376:	d10f      	bne.n	8010398 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010378:	f3ef 8310 	mrs	r3, PRIMASK
 801037c:	613b      	str	r3, [r7, #16]
  return(result);
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d105      	bne.n	8010390 <osTimerStop+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010384:	f3ef 8311 	mrs	r3, BASEPRI
 8010388:	60fb      	str	r3, [r7, #12]
  return(result);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d007      	beq.n	80103a0 <osTimerStop+0x40>
 8010390:	4b17      	ldr	r3, [pc, #92]	; (80103f0 <osTimerStop+0x90>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2b02      	cmp	r3, #2
 8010396:	d103      	bne.n	80103a0 <osTimerStop+0x40>
    stat = osErrorISR;
 8010398:	f06f 0305 	mvn.w	r3, #5
 801039c:	61fb      	str	r3, [r7, #28]
 801039e:	e021      	b.n	80103e4 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d103      	bne.n	80103ae <osTimerStop+0x4e>
    stat = osErrorParameter;
 80103a6:	f06f 0303 	mvn.w	r3, #3
 80103aa:	61fb      	str	r3, [r7, #28]
 80103ac:	e01a      	b.n	80103e4 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80103ae:	69b8      	ldr	r0, [r7, #24]
 80103b0:	f004 f838 	bl	8014424 <xTimerIsTimerActive>
 80103b4:	4603      	mov	r3, r0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d103      	bne.n	80103c2 <osTimerStop+0x62>
      stat = osErrorResource;
 80103ba:	f06f 0302 	mvn.w	r3, #2
 80103be:	61fb      	str	r3, [r7, #28]
 80103c0:	e010      	b.n	80103e4 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80103c2:	2300      	movs	r3, #0
 80103c4:	9300      	str	r3, [sp, #0]
 80103c6:	2300      	movs	r3, #0
 80103c8:	2200      	movs	r2, #0
 80103ca:	2103      	movs	r1, #3
 80103cc:	69b8      	ldr	r0, [r7, #24]
 80103ce:	f003 fd2b 	bl	8013e28 <xTimerGenericCommand>
 80103d2:	4603      	mov	r3, r0
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d102      	bne.n	80103de <osTimerStop+0x7e>
        stat = osOK;
 80103d8:	2300      	movs	r3, #0
 80103da:	61fb      	str	r3, [r7, #28]
 80103dc:	e002      	b.n	80103e4 <osTimerStop+0x84>
      } else {
        stat = osError;
 80103de:	f04f 33ff 	mov.w	r3, #4294967295
 80103e2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80103e4:	69fb      	ldr	r3, [r7, #28]
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3720      	adds	r7, #32
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	20000ca0 	.word	0x20000ca0

080103f4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b08a      	sub	sp, #40	; 0x28
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80103fc:	2300      	movs	r3, #0
 80103fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010400:	f3ef 8305 	mrs	r3, IPSR
 8010404:	613b      	str	r3, [r7, #16]
  return(result);
 8010406:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8010408:	2b00      	cmp	r3, #0
 801040a:	f040 8085 	bne.w	8010518 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801040e:	f3ef 8310 	mrs	r3, PRIMASK
 8010412:	60fb      	str	r3, [r7, #12]
  return(result);
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d105      	bne.n	8010426 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801041a:	f3ef 8311 	mrs	r3, BASEPRI
 801041e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d003      	beq.n	801042e <osMutexNew+0x3a>
 8010426:	4b3f      	ldr	r3, [pc, #252]	; (8010524 <osMutexNew+0x130>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b02      	cmp	r3, #2
 801042c:	d074      	beq.n	8010518 <osMutexNew+0x124>
    if (attr != NULL) {
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d003      	beq.n	801043c <osMutexNew+0x48>
      type = attr->attr_bits;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	623b      	str	r3, [r7, #32]
 801043a:	e001      	b.n	8010440 <osMutexNew+0x4c>
    } else {
      type = 0U;
 801043c:	2300      	movs	r3, #0
 801043e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010440:	6a3b      	ldr	r3, [r7, #32]
 8010442:	f003 0301 	and.w	r3, r3, #1
 8010446:	2b00      	cmp	r3, #0
 8010448:	d002      	beq.n	8010450 <osMutexNew+0x5c>
      rmtx = 1U;
 801044a:	2301      	movs	r3, #1
 801044c:	61fb      	str	r3, [r7, #28]
 801044e:	e001      	b.n	8010454 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8010450:	2300      	movs	r3, #0
 8010452:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010454:	6a3b      	ldr	r3, [r7, #32]
 8010456:	f003 0308 	and.w	r3, r3, #8
 801045a:	2b00      	cmp	r3, #0
 801045c:	d15c      	bne.n	8010518 <osMutexNew+0x124>
      mem = -1;
 801045e:	f04f 33ff 	mov.w	r3, #4294967295
 8010462:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d015      	beq.n	8010496 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	689b      	ldr	r3, [r3, #8]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d006      	beq.n	8010480 <osMutexNew+0x8c>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	68db      	ldr	r3, [r3, #12]
 8010476:	2b4f      	cmp	r3, #79	; 0x4f
 8010478:	d902      	bls.n	8010480 <osMutexNew+0x8c>
          mem = 1;
 801047a:	2301      	movs	r3, #1
 801047c:	61bb      	str	r3, [r7, #24]
 801047e:	e00c      	b.n	801049a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d108      	bne.n	801049a <osMutexNew+0xa6>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d104      	bne.n	801049a <osMutexNew+0xa6>
            mem = 0;
 8010490:	2300      	movs	r3, #0
 8010492:	61bb      	str	r3, [r7, #24]
 8010494:	e001      	b.n	801049a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8010496:	2300      	movs	r3, #0
 8010498:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d112      	bne.n	80104c6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d007      	beq.n	80104b6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	4619      	mov	r1, r3
 80104ac:	2004      	movs	r0, #4
 80104ae:	f001 fa32 	bl	8011916 <xQueueCreateMutexStatic>
 80104b2:	6278      	str	r0, [r7, #36]	; 0x24
 80104b4:	e016      	b.n	80104e4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	689b      	ldr	r3, [r3, #8]
 80104ba:	4619      	mov	r1, r3
 80104bc:	2001      	movs	r0, #1
 80104be:	f001 fa2a 	bl	8011916 <xQueueCreateMutexStatic>
 80104c2:	6278      	str	r0, [r7, #36]	; 0x24
 80104c4:	e00e      	b.n	80104e4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d10b      	bne.n	80104e4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d004      	beq.n	80104dc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80104d2:	2004      	movs	r0, #4
 80104d4:	f001 fa07 	bl	80118e6 <xQueueCreateMutex>
 80104d8:	6278      	str	r0, [r7, #36]	; 0x24
 80104da:	e003      	b.n	80104e4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80104dc:	2001      	movs	r0, #1
 80104de:	f001 fa02 	bl	80118e6 <xQueueCreateMutex>
 80104e2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80104e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00c      	beq.n	8010504 <osMutexNew+0x110>
        if (attr != NULL) {
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d003      	beq.n	80104f8 <osMutexNew+0x104>
          name = attr->name;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	617b      	str	r3, [r7, #20]
 80104f6:	e001      	b.n	80104fc <osMutexNew+0x108>
        } else {
          name = NULL;
 80104f8:	2300      	movs	r3, #0
 80104fa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80104fc:	6979      	ldr	r1, [r7, #20]
 80104fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010500:	f002 f8b6 	bl	8012670 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010506:	2b00      	cmp	r3, #0
 8010508:	d006      	beq.n	8010518 <osMutexNew+0x124>
 801050a:	69fb      	ldr	r3, [r7, #28]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d003      	beq.n	8010518 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010512:	f043 0301 	orr.w	r3, r3, #1
 8010516:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8010518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801051a:	4618      	mov	r0, r3
 801051c:	3728      	adds	r7, #40	; 0x28
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	20000ca0 	.word	0x20000ca0

08010528 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010528:	b580      	push	{r7, lr}
 801052a:	b088      	sub	sp, #32
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f023 0301 	bic.w	r3, r3, #1
 8010538:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f003 0301 	and.w	r3, r3, #1
 8010540:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010542:	2300      	movs	r3, #0
 8010544:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010546:	f3ef 8305 	mrs	r3, IPSR
 801054a:	613b      	str	r3, [r7, #16]
  return(result);
 801054c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801054e:	2b00      	cmp	r3, #0
 8010550:	d10f      	bne.n	8010572 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010552:	f3ef 8310 	mrs	r3, PRIMASK
 8010556:	60fb      	str	r3, [r7, #12]
  return(result);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d105      	bne.n	801056a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801055e:	f3ef 8311 	mrs	r3, BASEPRI
 8010562:	60bb      	str	r3, [r7, #8]
  return(result);
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d007      	beq.n	801057a <osMutexAcquire+0x52>
 801056a:	4b1d      	ldr	r3, [pc, #116]	; (80105e0 <osMutexAcquire+0xb8>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	2b02      	cmp	r3, #2
 8010570:	d103      	bne.n	801057a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8010572:	f06f 0305 	mvn.w	r3, #5
 8010576:	61fb      	str	r3, [r7, #28]
 8010578:	e02c      	b.n	80105d4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d103      	bne.n	8010588 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8010580:	f06f 0303 	mvn.w	r3, #3
 8010584:	61fb      	str	r3, [r7, #28]
 8010586:	e025      	b.n	80105d4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d011      	beq.n	80105b2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801058e:	6839      	ldr	r1, [r7, #0]
 8010590:	69b8      	ldr	r0, [r7, #24]
 8010592:	f001 fa0e 	bl	80119b2 <xQueueTakeMutexRecursive>
 8010596:	4603      	mov	r3, r0
 8010598:	2b01      	cmp	r3, #1
 801059a:	d01b      	beq.n	80105d4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d003      	beq.n	80105aa <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80105a2:	f06f 0301 	mvn.w	r3, #1
 80105a6:	61fb      	str	r3, [r7, #28]
 80105a8:	e014      	b.n	80105d4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80105aa:	f06f 0302 	mvn.w	r3, #2
 80105ae:	61fb      	str	r3, [r7, #28]
 80105b0:	e010      	b.n	80105d4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80105b2:	6839      	ldr	r1, [r7, #0]
 80105b4:	69b8      	ldr	r0, [r7, #24]
 80105b6:	f001 fd8b 	bl	80120d0 <xQueueSemaphoreTake>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b01      	cmp	r3, #1
 80105be:	d009      	beq.n	80105d4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d003      	beq.n	80105ce <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80105c6:	f06f 0301 	mvn.w	r3, #1
 80105ca:	61fb      	str	r3, [r7, #28]
 80105cc:	e002      	b.n	80105d4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80105ce:	f06f 0302 	mvn.w	r3, #2
 80105d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80105d4:	69fb      	ldr	r3, [r7, #28]
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3720      	adds	r7, #32
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	20000ca0 	.word	0x20000ca0

080105e4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b088      	sub	sp, #32
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f023 0301 	bic.w	r3, r3, #1
 80105f2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f003 0301 	and.w	r3, r3, #1
 80105fa:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80105fc:	2300      	movs	r3, #0
 80105fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010600:	f3ef 8305 	mrs	r3, IPSR
 8010604:	613b      	str	r3, [r7, #16]
  return(result);
 8010606:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10f      	bne.n	801062c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801060c:	f3ef 8310 	mrs	r3, PRIMASK
 8010610:	60fb      	str	r3, [r7, #12]
  return(result);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d105      	bne.n	8010624 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010618:	f3ef 8311 	mrs	r3, BASEPRI
 801061c:	60bb      	str	r3, [r7, #8]
  return(result);
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d007      	beq.n	8010634 <osMutexRelease+0x50>
 8010624:	4b16      	ldr	r3, [pc, #88]	; (8010680 <osMutexRelease+0x9c>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	2b02      	cmp	r3, #2
 801062a:	d103      	bne.n	8010634 <osMutexRelease+0x50>
    stat = osErrorISR;
 801062c:	f06f 0305 	mvn.w	r3, #5
 8010630:	61fb      	str	r3, [r7, #28]
 8010632:	e01f      	b.n	8010674 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8010634:	69bb      	ldr	r3, [r7, #24]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d103      	bne.n	8010642 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801063a:	f06f 0303 	mvn.w	r3, #3
 801063e:	61fb      	str	r3, [r7, #28]
 8010640:	e018      	b.n	8010674 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d009      	beq.n	801065c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010648:	69b8      	ldr	r0, [r7, #24]
 801064a:	f001 f97f 	bl	801194c <xQueueGiveMutexRecursive>
 801064e:	4603      	mov	r3, r0
 8010650:	2b01      	cmp	r3, #1
 8010652:	d00f      	beq.n	8010674 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010654:	f06f 0302 	mvn.w	r3, #2
 8010658:	61fb      	str	r3, [r7, #28]
 801065a:	e00b      	b.n	8010674 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801065c:	2300      	movs	r3, #0
 801065e:	2200      	movs	r2, #0
 8010660:	2100      	movs	r1, #0
 8010662:	69b8      	ldr	r0, [r7, #24]
 8010664:	f001 fa40 	bl	8011ae8 <xQueueGenericSend>
 8010668:	4603      	mov	r3, r0
 801066a:	2b01      	cmp	r3, #1
 801066c:	d002      	beq.n	8010674 <osMutexRelease+0x90>
        stat = osErrorResource;
 801066e:	f06f 0302 	mvn.w	r3, #2
 8010672:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010674:	69fb      	ldr	r3, [r7, #28]
}
 8010676:	4618      	mov	r0, r3
 8010678:	3720      	adds	r7, #32
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	20000ca0 	.word	0x20000ca0

08010684 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010684:	b580      	push	{r7, lr}
 8010686:	b08c      	sub	sp, #48	; 0x30
 8010688:	af02      	add	r7, sp, #8
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010690:	2300      	movs	r3, #0
 8010692:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010694:	f3ef 8305 	mrs	r3, IPSR
 8010698:	61bb      	str	r3, [r7, #24]
  return(result);
 801069a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801069c:	2b00      	cmp	r3, #0
 801069e:	f040 8087 	bne.w	80107b0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106a2:	f3ef 8310 	mrs	r3, PRIMASK
 80106a6:	617b      	str	r3, [r7, #20]
  return(result);
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d105      	bne.n	80106ba <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80106ae:	f3ef 8311 	mrs	r3, BASEPRI
 80106b2:	613b      	str	r3, [r7, #16]
  return(result);
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d003      	beq.n	80106c2 <osSemaphoreNew+0x3e>
 80106ba:	4b40      	ldr	r3, [pc, #256]	; (80107bc <osSemaphoreNew+0x138>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	2b02      	cmp	r3, #2
 80106c0:	d076      	beq.n	80107b0 <osSemaphoreNew+0x12c>
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d073      	beq.n	80107b0 <osSemaphoreNew+0x12c>
 80106c8:	68ba      	ldr	r2, [r7, #8]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d86f      	bhi.n	80107b0 <osSemaphoreNew+0x12c>
    mem = -1;
 80106d0:	f04f 33ff 	mov.w	r3, #4294967295
 80106d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d015      	beq.n	8010708 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	689b      	ldr	r3, [r3, #8]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d006      	beq.n	80106f2 <osSemaphoreNew+0x6e>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	68db      	ldr	r3, [r3, #12]
 80106e8:	2b4f      	cmp	r3, #79	; 0x4f
 80106ea:	d902      	bls.n	80106f2 <osSemaphoreNew+0x6e>
        mem = 1;
 80106ec:	2301      	movs	r3, #1
 80106ee:	623b      	str	r3, [r7, #32]
 80106f0:	e00c      	b.n	801070c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	689b      	ldr	r3, [r3, #8]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d108      	bne.n	801070c <osSemaphoreNew+0x88>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d104      	bne.n	801070c <osSemaphoreNew+0x88>
          mem = 0;
 8010702:	2300      	movs	r3, #0
 8010704:	623b      	str	r3, [r7, #32]
 8010706:	e001      	b.n	801070c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8010708:	2300      	movs	r3, #0
 801070a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 801070c:	6a3b      	ldr	r3, [r7, #32]
 801070e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010712:	d04d      	beq.n	80107b0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2b01      	cmp	r3, #1
 8010718:	d129      	bne.n	801076e <osSemaphoreNew+0xea>
        if (mem == 1) {
 801071a:	6a3b      	ldr	r3, [r7, #32]
 801071c:	2b01      	cmp	r3, #1
 801071e:	d10b      	bne.n	8010738 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	689a      	ldr	r2, [r3, #8]
 8010724:	2303      	movs	r3, #3
 8010726:	9300      	str	r3, [sp, #0]
 8010728:	4613      	mov	r3, r2
 801072a:	2200      	movs	r2, #0
 801072c:	2100      	movs	r1, #0
 801072e:	2001      	movs	r0, #1
 8010730:	f000 ffea 	bl	8011708 <xQueueGenericCreateStatic>
 8010734:	6278      	str	r0, [r7, #36]	; 0x24
 8010736:	e005      	b.n	8010744 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010738:	2203      	movs	r2, #3
 801073a:	2100      	movs	r1, #0
 801073c:	2001      	movs	r0, #1
 801073e:	f001 f856 	bl	80117ee <xQueueGenericCreate>
 8010742:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010746:	2b00      	cmp	r3, #0
 8010748:	d022      	beq.n	8010790 <osSemaphoreNew+0x10c>
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d01f      	beq.n	8010790 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010750:	2300      	movs	r3, #0
 8010752:	2200      	movs	r2, #0
 8010754:	2100      	movs	r1, #0
 8010756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010758:	f001 f9c6 	bl	8011ae8 <xQueueGenericSend>
 801075c:	4603      	mov	r3, r0
 801075e:	2b01      	cmp	r3, #1
 8010760:	d016      	beq.n	8010790 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8010762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010764:	f001 fe39 	bl	80123da <vQueueDelete>
            hSemaphore = NULL;
 8010768:	2300      	movs	r3, #0
 801076a:	627b      	str	r3, [r7, #36]	; 0x24
 801076c:	e010      	b.n	8010790 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 801076e:	6a3b      	ldr	r3, [r7, #32]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d108      	bne.n	8010786 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	461a      	mov	r2, r3
 801077a:	68b9      	ldr	r1, [r7, #8]
 801077c:	68f8      	ldr	r0, [r7, #12]
 801077e:	f001 f94d 	bl	8011a1c <xQueueCreateCountingSemaphoreStatic>
 8010782:	6278      	str	r0, [r7, #36]	; 0x24
 8010784:	e004      	b.n	8010790 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010786:	68b9      	ldr	r1, [r7, #8]
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	f001 f97c 	bl	8011a86 <xQueueCreateCountingSemaphore>
 801078e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010792:	2b00      	cmp	r3, #0
 8010794:	d00c      	beq.n	80107b0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d003      	beq.n	80107a4 <osSemaphoreNew+0x120>
          name = attr->name;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	61fb      	str	r3, [r7, #28]
 80107a2:	e001      	b.n	80107a8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80107a4:	2300      	movs	r3, #0
 80107a6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80107a8:	69f9      	ldr	r1, [r7, #28]
 80107aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107ac:	f001 ff60 	bl	8012670 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80107b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3728      	adds	r7, #40	; 0x28
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop
 80107bc:	20000ca0 	.word	0x20000ca0

080107c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b088      	sub	sp, #32
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80107ce:	2300      	movs	r3, #0
 80107d0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d103      	bne.n	80107e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80107d8:	f06f 0303 	mvn.w	r3, #3
 80107dc:	61fb      	str	r3, [r7, #28]
 80107de:	e04b      	b.n	8010878 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107e0:	f3ef 8305 	mrs	r3, IPSR
 80107e4:	617b      	str	r3, [r7, #20]
  return(result);
 80107e6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d10f      	bne.n	801080c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107ec:	f3ef 8310 	mrs	r3, PRIMASK
 80107f0:	613b      	str	r3, [r7, #16]
  return(result);
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d105      	bne.n	8010804 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80107f8:	f3ef 8311 	mrs	r3, BASEPRI
 80107fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d026      	beq.n	8010852 <osSemaphoreAcquire+0x92>
 8010804:	4b1f      	ldr	r3, [pc, #124]	; (8010884 <osSemaphoreAcquire+0xc4>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b02      	cmp	r3, #2
 801080a:	d122      	bne.n	8010852 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d003      	beq.n	801081a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8010812:	f06f 0303 	mvn.w	r3, #3
 8010816:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010818:	e02d      	b.n	8010876 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801081a:	2300      	movs	r3, #0
 801081c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801081e:	f107 0308 	add.w	r3, r7, #8
 8010822:	461a      	mov	r2, r3
 8010824:	2100      	movs	r1, #0
 8010826:	69b8      	ldr	r0, [r7, #24]
 8010828:	f001 fd5a 	bl	80122e0 <xQueueReceiveFromISR>
 801082c:	4603      	mov	r3, r0
 801082e:	2b01      	cmp	r3, #1
 8010830:	d003      	beq.n	801083a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010832:	f06f 0302 	mvn.w	r3, #2
 8010836:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010838:	e01d      	b.n	8010876 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d01a      	beq.n	8010876 <osSemaphoreAcquire+0xb6>
 8010840:	4b11      	ldr	r3, [pc, #68]	; (8010888 <osSemaphoreAcquire+0xc8>)
 8010842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010846:	601a      	str	r2, [r3, #0]
 8010848:	f3bf 8f4f 	dsb	sy
 801084c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010850:	e011      	b.n	8010876 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010852:	6839      	ldr	r1, [r7, #0]
 8010854:	69b8      	ldr	r0, [r7, #24]
 8010856:	f001 fc3b 	bl	80120d0 <xQueueSemaphoreTake>
 801085a:	4603      	mov	r3, r0
 801085c:	2b01      	cmp	r3, #1
 801085e:	d00b      	beq.n	8010878 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d003      	beq.n	801086e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010866:	f06f 0301 	mvn.w	r3, #1
 801086a:	61fb      	str	r3, [r7, #28]
 801086c:	e004      	b.n	8010878 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801086e:	f06f 0302 	mvn.w	r3, #2
 8010872:	61fb      	str	r3, [r7, #28]
 8010874:	e000      	b.n	8010878 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010876:	bf00      	nop
      }
    }
  }

  return (stat);
 8010878:	69fb      	ldr	r3, [r7, #28]
}
 801087a:	4618      	mov	r0, r3
 801087c:	3720      	adds	r7, #32
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	20000ca0 	.word	0x20000ca0
 8010888:	e000ed04 	.word	0xe000ed04

0801088c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801088c:	b580      	push	{r7, lr}
 801088e:	b088      	sub	sp, #32
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010898:	2300      	movs	r3, #0
 801089a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d103      	bne.n	80108aa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80108a2:	f06f 0303 	mvn.w	r3, #3
 80108a6:	61fb      	str	r3, [r7, #28]
 80108a8:	e03e      	b.n	8010928 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108aa:	f3ef 8305 	mrs	r3, IPSR
 80108ae:	617b      	str	r3, [r7, #20]
  return(result);
 80108b0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d10f      	bne.n	80108d6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108b6:	f3ef 8310 	mrs	r3, PRIMASK
 80108ba:	613b      	str	r3, [r7, #16]
  return(result);
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d105      	bne.n	80108ce <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80108c2:	f3ef 8311 	mrs	r3, BASEPRI
 80108c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d01e      	beq.n	801090c <osSemaphoreRelease+0x80>
 80108ce:	4b19      	ldr	r3, [pc, #100]	; (8010934 <osSemaphoreRelease+0xa8>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	2b02      	cmp	r3, #2
 80108d4:	d11a      	bne.n	801090c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80108d6:	2300      	movs	r3, #0
 80108d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80108da:	f107 0308 	add.w	r3, r7, #8
 80108de:	4619      	mov	r1, r3
 80108e0:	69b8      	ldr	r0, [r7, #24]
 80108e2:	f001 fa8f 	bl	8011e04 <xQueueGiveFromISR>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d003      	beq.n	80108f4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80108ec:	f06f 0302 	mvn.w	r3, #2
 80108f0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80108f2:	e018      	b.n	8010926 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d015      	beq.n	8010926 <osSemaphoreRelease+0x9a>
 80108fa:	4b0f      	ldr	r3, [pc, #60]	; (8010938 <osSemaphoreRelease+0xac>)
 80108fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010900:	601a      	str	r2, [r3, #0]
 8010902:	f3bf 8f4f 	dsb	sy
 8010906:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801090a:	e00c      	b.n	8010926 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801090c:	2300      	movs	r3, #0
 801090e:	2200      	movs	r2, #0
 8010910:	2100      	movs	r1, #0
 8010912:	69b8      	ldr	r0, [r7, #24]
 8010914:	f001 f8e8 	bl	8011ae8 <xQueueGenericSend>
 8010918:	4603      	mov	r3, r0
 801091a:	2b01      	cmp	r3, #1
 801091c:	d004      	beq.n	8010928 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801091e:	f06f 0302 	mvn.w	r3, #2
 8010922:	61fb      	str	r3, [r7, #28]
 8010924:	e000      	b.n	8010928 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010926:	bf00      	nop
    }
  }

  return (stat);
 8010928:	69fb      	ldr	r3, [r7, #28]
}
 801092a:	4618      	mov	r0, r3
 801092c:	3720      	adds	r7, #32
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	20000ca0 	.word	0x20000ca0
 8010938:	e000ed04 	.word	0xe000ed04

0801093c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801093c:	b580      	push	{r7, lr}
 801093e:	b08c      	sub	sp, #48	; 0x30
 8010940:	af02      	add	r7, sp, #8
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010948:	2300      	movs	r3, #0
 801094a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801094c:	f3ef 8305 	mrs	r3, IPSR
 8010950:	61bb      	str	r3, [r7, #24]
  return(result);
 8010952:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010954:	2b00      	cmp	r3, #0
 8010956:	d170      	bne.n	8010a3a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010958:	f3ef 8310 	mrs	r3, PRIMASK
 801095c:	617b      	str	r3, [r7, #20]
  return(result);
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d105      	bne.n	8010970 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010964:	f3ef 8311 	mrs	r3, BASEPRI
 8010968:	613b      	str	r3, [r7, #16]
  return(result);
 801096a:	693b      	ldr	r3, [r7, #16]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d003      	beq.n	8010978 <osMessageQueueNew+0x3c>
 8010970:	4b34      	ldr	r3, [pc, #208]	; (8010a44 <osMessageQueueNew+0x108>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2b02      	cmp	r3, #2
 8010976:	d060      	beq.n	8010a3a <osMessageQueueNew+0xfe>
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d05d      	beq.n	8010a3a <osMessageQueueNew+0xfe>
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d05a      	beq.n	8010a3a <osMessageQueueNew+0xfe>
    mem = -1;
 8010984:	f04f 33ff 	mov.w	r3, #4294967295
 8010988:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d029      	beq.n	80109e4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	689b      	ldr	r3, [r3, #8]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d012      	beq.n	80109be <osMessageQueueNew+0x82>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	68db      	ldr	r3, [r3, #12]
 801099c:	2b4f      	cmp	r3, #79	; 0x4f
 801099e:	d90e      	bls.n	80109be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d00a      	beq.n	80109be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	695a      	ldr	r2, [r3, #20]
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	68b9      	ldr	r1, [r7, #8]
 80109b0:	fb01 f303 	mul.w	r3, r1, r3
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d302      	bcc.n	80109be <osMessageQueueNew+0x82>
        mem = 1;
 80109b8:	2301      	movs	r3, #1
 80109ba:	623b      	str	r3, [r7, #32]
 80109bc:	e014      	b.n	80109e8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	689b      	ldr	r3, [r3, #8]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d110      	bne.n	80109e8 <osMessageQueueNew+0xac>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	68db      	ldr	r3, [r3, #12]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d10c      	bne.n	80109e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d108      	bne.n	80109e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	695b      	ldr	r3, [r3, #20]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d104      	bne.n	80109e8 <osMessageQueueNew+0xac>
          mem = 0;
 80109de:	2300      	movs	r3, #0
 80109e0:	623b      	str	r3, [r7, #32]
 80109e2:	e001      	b.n	80109e8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80109e4:	2300      	movs	r3, #0
 80109e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80109e8:	6a3b      	ldr	r3, [r7, #32]
 80109ea:	2b01      	cmp	r3, #1
 80109ec:	d10c      	bne.n	8010a08 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	691a      	ldr	r2, [r3, #16]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6899      	ldr	r1, [r3, #8]
 80109f6:	2300      	movs	r3, #0
 80109f8:	9300      	str	r3, [sp, #0]
 80109fa:	460b      	mov	r3, r1
 80109fc:	68b9      	ldr	r1, [r7, #8]
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f000 fe82 	bl	8011708 <xQueueGenericCreateStatic>
 8010a04:	6278      	str	r0, [r7, #36]	; 0x24
 8010a06:	e008      	b.n	8010a1a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010a08:	6a3b      	ldr	r3, [r7, #32]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d105      	bne.n	8010a1a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010a0e:	2200      	movs	r2, #0
 8010a10:	68b9      	ldr	r1, [r7, #8]
 8010a12:	68f8      	ldr	r0, [r7, #12]
 8010a14:	f000 feeb 	bl	80117ee <xQueueGenericCreate>
 8010a18:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d00c      	beq.n	8010a3a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d003      	beq.n	8010a2e <osMessageQueueNew+0xf2>
        name = attr->name;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	61fb      	str	r3, [r7, #28]
 8010a2c:	e001      	b.n	8010a32 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010a32:	69f9      	ldr	r1, [r7, #28]
 8010a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a36:	f001 fe1b 	bl	8012670 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3728      	adds	r7, #40	; 0x28
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}
 8010a44:	20000ca0 	.word	0x20000ca0

08010a48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b08a      	sub	sp, #40	; 0x28
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	603b      	str	r3, [r7, #0]
 8010a54:	4613      	mov	r3, r2
 8010a56:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a60:	f3ef 8305 	mrs	r3, IPSR
 8010a64:	61fb      	str	r3, [r7, #28]
  return(result);
 8010a66:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d10f      	bne.n	8010a8c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8010a70:	61bb      	str	r3, [r7, #24]
  return(result);
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d105      	bne.n	8010a84 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010a78:	f3ef 8311 	mrs	r3, BASEPRI
 8010a7c:	617b      	str	r3, [r7, #20]
  return(result);
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d02c      	beq.n	8010ade <osMessageQueuePut+0x96>
 8010a84:	4b28      	ldr	r3, [pc, #160]	; (8010b28 <osMessageQueuePut+0xe0>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b02      	cmp	r3, #2
 8010a8a:	d128      	bne.n	8010ade <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010a8c:	6a3b      	ldr	r3, [r7, #32]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d005      	beq.n	8010a9e <osMessageQueuePut+0x56>
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d002      	beq.n	8010a9e <osMessageQueuePut+0x56>
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d003      	beq.n	8010aa6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8010a9e:	f06f 0303 	mvn.w	r3, #3
 8010aa2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010aa4:	e039      	b.n	8010b1a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010aaa:	f107 0210 	add.w	r2, r7, #16
 8010aae:	2300      	movs	r3, #0
 8010ab0:	68b9      	ldr	r1, [r7, #8]
 8010ab2:	6a38      	ldr	r0, [r7, #32]
 8010ab4:	f001 f912 	bl	8011cdc <xQueueGenericSendFromISR>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	d003      	beq.n	8010ac6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8010abe:	f06f 0302 	mvn.w	r3, #2
 8010ac2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ac4:	e029      	b.n	8010b1a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d026      	beq.n	8010b1a <osMessageQueuePut+0xd2>
 8010acc:	4b17      	ldr	r3, [pc, #92]	; (8010b2c <osMessageQueuePut+0xe4>)
 8010ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ad2:	601a      	str	r2, [r3, #0]
 8010ad4:	f3bf 8f4f 	dsb	sy
 8010ad8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010adc:	e01d      	b.n	8010b1a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010ade:	6a3b      	ldr	r3, [r7, #32]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d002      	beq.n	8010aea <osMessageQueuePut+0xa2>
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d103      	bne.n	8010af2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010aea:	f06f 0303 	mvn.w	r3, #3
 8010aee:	627b      	str	r3, [r7, #36]	; 0x24
 8010af0:	e014      	b.n	8010b1c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010af2:	2300      	movs	r3, #0
 8010af4:	683a      	ldr	r2, [r7, #0]
 8010af6:	68b9      	ldr	r1, [r7, #8]
 8010af8:	6a38      	ldr	r0, [r7, #32]
 8010afa:	f000 fff5 	bl	8011ae8 <xQueueGenericSend>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d00b      	beq.n	8010b1c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d003      	beq.n	8010b12 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010b0a:	f06f 0301 	mvn.w	r3, #1
 8010b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8010b10:	e004      	b.n	8010b1c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8010b12:	f06f 0302 	mvn.w	r3, #2
 8010b16:	627b      	str	r3, [r7, #36]	; 0x24
 8010b18:	e000      	b.n	8010b1c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010b1a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3728      	adds	r7, #40	; 0x28
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	20000ca0 	.word	0x20000ca0
 8010b2c:	e000ed04 	.word	0xe000ed04

08010b30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b08a      	sub	sp, #40	; 0x28
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	607a      	str	r2, [r7, #4]
 8010b3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b46:	f3ef 8305 	mrs	r3, IPSR
 8010b4a:	61fb      	str	r3, [r7, #28]
  return(result);
 8010b4c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d10f      	bne.n	8010b72 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b52:	f3ef 8310 	mrs	r3, PRIMASK
 8010b56:	61bb      	str	r3, [r7, #24]
  return(result);
 8010b58:	69bb      	ldr	r3, [r7, #24]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d105      	bne.n	8010b6a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8010b62:	617b      	str	r3, [r7, #20]
  return(result);
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d02c      	beq.n	8010bc4 <osMessageQueueGet+0x94>
 8010b6a:	4b28      	ldr	r3, [pc, #160]	; (8010c0c <osMessageQueueGet+0xdc>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	2b02      	cmp	r3, #2
 8010b70:	d128      	bne.n	8010bc4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010b72:	6a3b      	ldr	r3, [r7, #32]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d005      	beq.n	8010b84 <osMessageQueueGet+0x54>
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d002      	beq.n	8010b84 <osMessageQueueGet+0x54>
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d003      	beq.n	8010b8c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8010b84:	f06f 0303 	mvn.w	r3, #3
 8010b88:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010b8a:	e038      	b.n	8010bfe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010b90:	f107 0310 	add.w	r3, r7, #16
 8010b94:	461a      	mov	r2, r3
 8010b96:	68b9      	ldr	r1, [r7, #8]
 8010b98:	6a38      	ldr	r0, [r7, #32]
 8010b9a:	f001 fba1 	bl	80122e0 <xQueueReceiveFromISR>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d003      	beq.n	8010bac <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8010ba4:	f06f 0302 	mvn.w	r3, #2
 8010ba8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010baa:	e028      	b.n	8010bfe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d025      	beq.n	8010bfe <osMessageQueueGet+0xce>
 8010bb2:	4b17      	ldr	r3, [pc, #92]	; (8010c10 <osMessageQueueGet+0xe0>)
 8010bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bb8:	601a      	str	r2, [r3, #0]
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010bc2:	e01c      	b.n	8010bfe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010bc4:	6a3b      	ldr	r3, [r7, #32]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d002      	beq.n	8010bd0 <osMessageQueueGet+0xa0>
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d103      	bne.n	8010bd8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8010bd0:	f06f 0303 	mvn.w	r3, #3
 8010bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8010bd6:	e013      	b.n	8010c00 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010bd8:	683a      	ldr	r2, [r7, #0]
 8010bda:	68b9      	ldr	r1, [r7, #8]
 8010bdc:	6a38      	ldr	r0, [r7, #32]
 8010bde:	f001 f99b 	bl	8011f18 <xQueueReceive>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	d00b      	beq.n	8010c00 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d003      	beq.n	8010bf6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8010bee:	f06f 0301 	mvn.w	r3, #1
 8010bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8010bf4:	e004      	b.n	8010c00 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8010bf6:	f06f 0302 	mvn.w	r3, #2
 8010bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8010bfc:	e000      	b.n	8010c00 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010bfe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3728      	adds	r7, #40	; 0x28
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	20000ca0 	.word	0x20000ca0
 8010c10:	e000ed04 	.word	0xe000ed04

08010c14 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b088      	sub	sp, #32
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c20:	f3ef 8305 	mrs	r3, IPSR
 8010c24:	617b      	str	r3, [r7, #20]
  return(result);
 8010c26:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d10f      	bne.n	8010c4c <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8010c30:	613b      	str	r3, [r7, #16]
  return(result);
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d105      	bne.n	8010c44 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c38:	f3ef 8311 	mrs	r3, BASEPRI
 8010c3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d007      	beq.n	8010c54 <osMessageQueueReset+0x40>
 8010c44:	4b0c      	ldr	r3, [pc, #48]	; (8010c78 <osMessageQueueReset+0x64>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	2b02      	cmp	r3, #2
 8010c4a:	d103      	bne.n	8010c54 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8010c4c:	f06f 0305 	mvn.w	r3, #5
 8010c50:	61fb      	str	r3, [r7, #28]
 8010c52:	e00c      	b.n	8010c6e <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 8010c54:	69bb      	ldr	r3, [r7, #24]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d103      	bne.n	8010c62 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 8010c5a:	f06f 0303 	mvn.w	r3, #3
 8010c5e:	61fb      	str	r3, [r7, #28]
 8010c60:	e005      	b.n	8010c6e <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 8010c62:	2300      	movs	r3, #0
 8010c64:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 8010c66:	2100      	movs	r1, #0
 8010c68:	69b8      	ldr	r0, [r7, #24]
 8010c6a:	f000 fce5 	bl	8011638 <xQueueGenericReset>
  }

  return (stat);
 8010c6e:	69fb      	ldr	r3, [r7, #28]
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3720      	adds	r7, #32
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	20000ca0 	.word	0x20000ca0

08010c7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010c7c:	b480      	push	{r7}
 8010c7e:	b085      	sub	sp, #20
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	60b9      	str	r1, [r7, #8]
 8010c86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	4a07      	ldr	r2, [pc, #28]	; (8010ca8 <vApplicationGetIdleTaskMemory+0x2c>)
 8010c8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	4a06      	ldr	r2, [pc, #24]	; (8010cac <vApplicationGetIdleTaskMemory+0x30>)
 8010c92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c9a:	601a      	str	r2, [r3, #0]
}
 8010c9c:	bf00      	nop
 8010c9e:	3714      	adds	r7, #20
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr
 8010ca8:	20000ca4 	.word	0x20000ca4
 8010cac:	20000d08 	.word	0x20000d08

08010cb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010cb0:	b480      	push	{r7}
 8010cb2:	b085      	sub	sp, #20
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	60f8      	str	r0, [r7, #12]
 8010cb8:	60b9      	str	r1, [r7, #8]
 8010cba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	4a07      	ldr	r2, [pc, #28]	; (8010cdc <vApplicationGetTimerTaskMemory+0x2c>)
 8010cc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	4a06      	ldr	r2, [pc, #24]	; (8010ce0 <vApplicationGetTimerTaskMemory+0x30>)
 8010cc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010cce:	601a      	str	r2, [r3, #0]
}
 8010cd0:	bf00      	nop
 8010cd2:	3714      	adds	r7, #20
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr
 8010cdc:	20001508 	.word	0x20001508
 8010ce0:	2000156c 	.word	0x2000156c

08010ce4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b08a      	sub	sp, #40	; 0x28
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010cec:	2300      	movs	r3, #0
 8010cee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010cf0:	f001 ff82 	bl	8012bf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010cf4:	4b59      	ldr	r3, [pc, #356]	; (8010e5c <pvPortMalloc+0x178>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d101      	bne.n	8010d00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010cfc:	f000 f910 	bl	8010f20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d00:	4b57      	ldr	r3, [pc, #348]	; (8010e60 <pvPortMalloc+0x17c>)
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	4013      	ands	r3, r2
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	f040 808c 	bne.w	8010e26 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d01c      	beq.n	8010d4e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8010d14:	2208      	movs	r2, #8
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	4413      	add	r3, r2
 8010d1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f003 0307 	and.w	r3, r3, #7
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d013      	beq.n	8010d4e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f023 0307 	bic.w	r3, r3, #7
 8010d2c:	3308      	adds	r3, #8
 8010d2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f003 0307 	and.w	r3, r3, #7
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d009      	beq.n	8010d4e <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d3e:	f383 8811 	msr	BASEPRI, r3
 8010d42:	f3bf 8f6f 	isb	sy
 8010d46:	f3bf 8f4f 	dsb	sy
 8010d4a:	617b      	str	r3, [r7, #20]
 8010d4c:	e7fe      	b.n	8010d4c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d068      	beq.n	8010e26 <pvPortMalloc+0x142>
 8010d54:	4b43      	ldr	r3, [pc, #268]	; (8010e64 <pvPortMalloc+0x180>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	687a      	ldr	r2, [r7, #4]
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d863      	bhi.n	8010e26 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010d5e:	4b42      	ldr	r3, [pc, #264]	; (8010e68 <pvPortMalloc+0x184>)
 8010d60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010d62:	4b41      	ldr	r3, [pc, #260]	; (8010e68 <pvPortMalloc+0x184>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d68:	e004      	b.n	8010d74 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d76:	685b      	ldr	r3, [r3, #4]
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d903      	bls.n	8010d86 <pvPortMalloc+0xa2>
 8010d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d1f1      	bne.n	8010d6a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010d86:	4b35      	ldr	r3, [pc, #212]	; (8010e5c <pvPortMalloc+0x178>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d04a      	beq.n	8010e26 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010d90:	6a3b      	ldr	r3, [r7, #32]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2208      	movs	r2, #8
 8010d96:	4413      	add	r3, r2
 8010d98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9c:	681a      	ldr	r2, [r3, #0]
 8010d9e:	6a3b      	ldr	r3, [r7, #32]
 8010da0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da4:	685a      	ldr	r2, [r3, #4]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	1ad2      	subs	r2, r2, r3
 8010daa:	2308      	movs	r3, #8
 8010dac:	005b      	lsls	r3, r3, #1
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d91e      	bls.n	8010df0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	4413      	add	r3, r2
 8010db8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	f003 0307 	and.w	r3, r3, #7
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d009      	beq.n	8010dd8 <pvPortMalloc+0xf4>
 8010dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc8:	f383 8811 	msr	BASEPRI, r3
 8010dcc:	f3bf 8f6f 	isb	sy
 8010dd0:	f3bf 8f4f 	dsb	sy
 8010dd4:	613b      	str	r3, [r7, #16]
 8010dd6:	e7fe      	b.n	8010dd6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	685a      	ldr	r2, [r3, #4]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	1ad2      	subs	r2, r2, r3
 8010de0:	69bb      	ldr	r3, [r7, #24]
 8010de2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010dea:	69b8      	ldr	r0, [r7, #24]
 8010dec:	f000 f8fc 	bl	8010fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010df0:	4b1c      	ldr	r3, [pc, #112]	; (8010e64 <pvPortMalloc+0x180>)
 8010df2:	681a      	ldr	r2, [r3, #0]
 8010df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	1ad3      	subs	r3, r2, r3
 8010dfa:	4a1a      	ldr	r2, [pc, #104]	; (8010e64 <pvPortMalloc+0x180>)
 8010dfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010dfe:	4b19      	ldr	r3, [pc, #100]	; (8010e64 <pvPortMalloc+0x180>)
 8010e00:	681a      	ldr	r2, [r3, #0]
 8010e02:	4b1a      	ldr	r3, [pc, #104]	; (8010e6c <pvPortMalloc+0x188>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d203      	bcs.n	8010e12 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e0a:	4b16      	ldr	r3, [pc, #88]	; (8010e64 <pvPortMalloc+0x180>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	4a17      	ldr	r2, [pc, #92]	; (8010e6c <pvPortMalloc+0x188>)
 8010e10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e14:	685a      	ldr	r2, [r3, #4]
 8010e16:	4b12      	ldr	r3, [pc, #72]	; (8010e60 <pvPortMalloc+0x17c>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	431a      	orrs	r2, r3
 8010e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e22:	2200      	movs	r2, #0
 8010e24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010e26:	f001 ff2d 	bl	8012c84 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d101      	bne.n	8010e34 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010e30:	f7f0 fa28 	bl	8001284 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	f003 0307 	and.w	r3, r3, #7
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d009      	beq.n	8010e52 <pvPortMalloc+0x16e>
 8010e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e42:	f383 8811 	msr	BASEPRI, r3
 8010e46:	f3bf 8f6f 	isb	sy
 8010e4a:	f3bf 8f4f 	dsb	sy
 8010e4e:	60fb      	str	r3, [r7, #12]
 8010e50:	e7fe      	b.n	8010e50 <pvPortMalloc+0x16c>
	return pvReturn;
 8010e52:	69fb      	ldr	r3, [r7, #28]
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3728      	adds	r7, #40	; 0x28
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}
 8010e5c:	20026f64 	.word	0x20026f64
 8010e60:	20026f70 	.word	0x20026f70
 8010e64:	20026f68 	.word	0x20026f68
 8010e68:	20026f5c 	.word	0x20026f5c
 8010e6c:	20026f6c 	.word	0x20026f6c

08010e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b086      	sub	sp, #24
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d046      	beq.n	8010f10 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010e82:	2308      	movs	r3, #8
 8010e84:	425b      	negs	r3, r3
 8010e86:	697a      	ldr	r2, [r7, #20]
 8010e88:	4413      	add	r3, r2
 8010e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	685a      	ldr	r2, [r3, #4]
 8010e94:	4b20      	ldr	r3, [pc, #128]	; (8010f18 <vPortFree+0xa8>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	4013      	ands	r3, r2
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d109      	bne.n	8010eb2 <vPortFree+0x42>
 8010e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea2:	f383 8811 	msr	BASEPRI, r3
 8010ea6:	f3bf 8f6f 	isb	sy
 8010eaa:	f3bf 8f4f 	dsb	sy
 8010eae:	60fb      	str	r3, [r7, #12]
 8010eb0:	e7fe      	b.n	8010eb0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d009      	beq.n	8010ece <vPortFree+0x5e>
 8010eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ebe:	f383 8811 	msr	BASEPRI, r3
 8010ec2:	f3bf 8f6f 	isb	sy
 8010ec6:	f3bf 8f4f 	dsb	sy
 8010eca:	60bb      	str	r3, [r7, #8]
 8010ecc:	e7fe      	b.n	8010ecc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	685a      	ldr	r2, [r3, #4]
 8010ed2:	4b11      	ldr	r3, [pc, #68]	; (8010f18 <vPortFree+0xa8>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4013      	ands	r3, r2
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d019      	beq.n	8010f10 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d115      	bne.n	8010f10 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	685a      	ldr	r2, [r3, #4]
 8010ee8:	4b0b      	ldr	r3, [pc, #44]	; (8010f18 <vPortFree+0xa8>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	43db      	mvns	r3, r3
 8010eee:	401a      	ands	r2, r3
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010ef4:	f001 fe80 	bl	8012bf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	685a      	ldr	r2, [r3, #4]
 8010efc:	4b07      	ldr	r3, [pc, #28]	; (8010f1c <vPortFree+0xac>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4413      	add	r3, r2
 8010f02:	4a06      	ldr	r2, [pc, #24]	; (8010f1c <vPortFree+0xac>)
 8010f04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f06:	6938      	ldr	r0, [r7, #16]
 8010f08:	f000 f86e 	bl	8010fe8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010f0c:	f001 feba 	bl	8012c84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f10:	bf00      	nop
 8010f12:	3718      	adds	r7, #24
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}
 8010f18:	20026f70 	.word	0x20026f70
 8010f1c:	20026f68 	.word	0x20026f68

08010f20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f20:	b480      	push	{r7}
 8010f22:	b085      	sub	sp, #20
 8010f24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f26:	4b29      	ldr	r3, [pc, #164]	; (8010fcc <prvHeapInit+0xac>)
 8010f28:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f2a:	4b29      	ldr	r3, [pc, #164]	; (8010fd0 <prvHeapInit+0xb0>)
 8010f2c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	f003 0307 	and.w	r3, r3, #7
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d00c      	beq.n	8010f52 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	3307      	adds	r3, #7
 8010f3c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f023 0307 	bic.w	r3, r3, #7
 8010f44:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	1ad3      	subs	r3, r2, r3
 8010f4c:	4a20      	ldr	r2, [pc, #128]	; (8010fd0 <prvHeapInit+0xb0>)
 8010f4e:	4413      	add	r3, r2
 8010f50:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010f56:	4a1f      	ldr	r2, [pc, #124]	; (8010fd4 <prvHeapInit+0xb4>)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010f5c:	4b1d      	ldr	r3, [pc, #116]	; (8010fd4 <prvHeapInit+0xb4>)
 8010f5e:	2200      	movs	r2, #0
 8010f60:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	68ba      	ldr	r2, [r7, #8]
 8010f66:	4413      	add	r3, r2
 8010f68:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010f6a:	2208      	movs	r2, #8
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	1a9b      	subs	r3, r3, r2
 8010f70:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f023 0307 	bic.w	r3, r3, #7
 8010f78:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	4a16      	ldr	r2, [pc, #88]	; (8010fd8 <prvHeapInit+0xb8>)
 8010f7e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010f80:	4b15      	ldr	r3, [pc, #84]	; (8010fd8 <prvHeapInit+0xb8>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	2200      	movs	r2, #0
 8010f86:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010f88:	4b13      	ldr	r3, [pc, #76]	; (8010fd8 <prvHeapInit+0xb8>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	68fa      	ldr	r2, [r7, #12]
 8010f98:	1ad2      	subs	r2, r2, r3
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010f9e:	4b0e      	ldr	r3, [pc, #56]	; (8010fd8 <prvHeapInit+0xb8>)
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	4a0c      	ldr	r2, [pc, #48]	; (8010fdc <prvHeapInit+0xbc>)
 8010fac:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	4a0b      	ldr	r2, [pc, #44]	; (8010fe0 <prvHeapInit+0xc0>)
 8010fb4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010fb6:	4b0b      	ldr	r3, [pc, #44]	; (8010fe4 <prvHeapInit+0xc4>)
 8010fb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010fbc:	601a      	str	r2, [r3, #0]
}
 8010fbe:	bf00      	nop
 8010fc0:	3714      	adds	r7, #20
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc8:	4770      	bx	lr
 8010fca:	bf00      	nop
 8010fcc:	000249f0 	.word	0x000249f0
 8010fd0:	2000256c 	.word	0x2000256c
 8010fd4:	20026f5c 	.word	0x20026f5c
 8010fd8:	20026f64 	.word	0x20026f64
 8010fdc:	20026f6c 	.word	0x20026f6c
 8010fe0:	20026f68 	.word	0x20026f68
 8010fe4:	20026f70 	.word	0x20026f70

08010fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b085      	sub	sp, #20
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010ff0:	4b28      	ldr	r3, [pc, #160]	; (8011094 <prvInsertBlockIntoFreeList+0xac>)
 8010ff2:	60fb      	str	r3, [r7, #12]
 8010ff4:	e002      	b.n	8010ffc <prvInsertBlockIntoFreeList+0x14>
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	60fb      	str	r3, [r7, #12]
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	429a      	cmp	r2, r3
 8011004:	d8f7      	bhi.n	8010ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	68ba      	ldr	r2, [r7, #8]
 8011010:	4413      	add	r3, r2
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	429a      	cmp	r2, r3
 8011016:	d108      	bne.n	801102a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	685a      	ldr	r2, [r3, #4]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	441a      	add	r2, r3
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	68ba      	ldr	r2, [r7, #8]
 8011034:	441a      	add	r2, r3
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	429a      	cmp	r2, r3
 801103c:	d118      	bne.n	8011070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	681a      	ldr	r2, [r3, #0]
 8011042:	4b15      	ldr	r3, [pc, #84]	; (8011098 <prvInsertBlockIntoFreeList+0xb0>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	429a      	cmp	r2, r3
 8011048:	d00d      	beq.n	8011066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	685a      	ldr	r2, [r3, #4]
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	441a      	add	r2, r3
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	601a      	str	r2, [r3, #0]
 8011064:	e008      	b.n	8011078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011066:	4b0c      	ldr	r3, [pc, #48]	; (8011098 <prvInsertBlockIntoFreeList+0xb0>)
 8011068:	681a      	ldr	r2, [r3, #0]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	601a      	str	r2, [r3, #0]
 801106e:	e003      	b.n	8011078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011078:	68fa      	ldr	r2, [r7, #12]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	429a      	cmp	r2, r3
 801107e:	d002      	beq.n	8011086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011086:	bf00      	nop
 8011088:	3714      	adds	r7, #20
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr
 8011092:	bf00      	nop
 8011094:	20026f5c 	.word	0x20026f5c
 8011098:	20026f64 	.word	0x20026f64

0801109c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801109c:	b480      	push	{r7}
 801109e:	b083      	sub	sp, #12
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f103 0208 	add.w	r2, r3, #8
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f04f 32ff 	mov.w	r2, #4294967295
 80110b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f103 0208 	add.w	r2, r3, #8
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f103 0208 	add.w	r2, r3, #8
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2200      	movs	r2, #0
 80110ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80110d0:	bf00      	nop
 80110d2:	370c      	adds	r7, #12
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80110dc:	b480      	push	{r7}
 80110de:	b083      	sub	sp, #12
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2200      	movs	r2, #0
 80110e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80110ea:	bf00      	nop
 80110ec:	370c      	adds	r7, #12
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr

080110f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80110f6:	b480      	push	{r7}
 80110f8:	b085      	sub	sp, #20
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	6078      	str	r0, [r7, #4]
 80110fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	68fa      	ldr	r2, [r7, #12]
 801110a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	689a      	ldr	r2, [r3, #8]
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	689b      	ldr	r3, [r3, #8]
 8011118:	683a      	ldr	r2, [r7, #0]
 801111a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	683a      	ldr	r2, [r7, #0]
 8011120:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	687a      	ldr	r2, [r7, #4]
 8011126:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	1c5a      	adds	r2, r3, #1
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	601a      	str	r2, [r3, #0]
}
 8011132:	bf00      	nop
 8011134:	3714      	adds	r7, #20
 8011136:	46bd      	mov	sp, r7
 8011138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113c:	4770      	bx	lr

0801113e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801113e:	b480      	push	{r7}
 8011140:	b085      	sub	sp, #20
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
 8011146:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011154:	d103      	bne.n	801115e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	691b      	ldr	r3, [r3, #16]
 801115a:	60fb      	str	r3, [r7, #12]
 801115c:	e00c      	b.n	8011178 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	3308      	adds	r3, #8
 8011162:	60fb      	str	r3, [r7, #12]
 8011164:	e002      	b.n	801116c <vListInsert+0x2e>
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	60fb      	str	r3, [r7, #12]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	685b      	ldr	r3, [r3, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	68ba      	ldr	r2, [r7, #8]
 8011174:	429a      	cmp	r2, r3
 8011176:	d2f6      	bcs.n	8011166 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	685a      	ldr	r2, [r3, #4]
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	683a      	ldr	r2, [r7, #0]
 8011186:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	68fa      	ldr	r2, [r7, #12]
 801118c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	683a      	ldr	r2, [r7, #0]
 8011192:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	1c5a      	adds	r2, r3, #1
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	601a      	str	r2, [r3, #0]
}
 80111a4:	bf00      	nop
 80111a6:	3714      	adds	r7, #20
 80111a8:	46bd      	mov	sp, r7
 80111aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ae:	4770      	bx	lr

080111b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80111b0:	b480      	push	{r7}
 80111b2:	b085      	sub	sp, #20
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	691b      	ldr	r3, [r3, #16]
 80111bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	6892      	ldr	r2, [r2, #8]
 80111c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	689b      	ldr	r3, [r3, #8]
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	6852      	ldr	r2, [r2, #4]
 80111d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	687a      	ldr	r2, [r7, #4]
 80111d8:	429a      	cmp	r2, r3
 80111da:	d103      	bne.n	80111e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	689a      	ldr	r2, [r3, #8]
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2200      	movs	r2, #0
 80111e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	1e5a      	subs	r2, r3, #1
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681b      	ldr	r3, [r3, #0]
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3714      	adds	r7, #20
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr

08011204 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011204:	b480      	push	{r7}
 8011206:	b085      	sub	sp, #20
 8011208:	af00      	add	r7, sp, #0
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	3b04      	subs	r3, #4
 8011214:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801121c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	3b04      	subs	r3, #4
 8011222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	f023 0201 	bic.w	r2, r3, #1
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	3b04      	subs	r3, #4
 8011232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011234:	4a0c      	ldr	r2, [pc, #48]	; (8011268 <pxPortInitialiseStack+0x64>)
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	3b14      	subs	r3, #20
 801123e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	3b04      	subs	r3, #4
 801124a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f06f 0202 	mvn.w	r2, #2
 8011252:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	3b20      	subs	r3, #32
 8011258:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801125a:	68fb      	ldr	r3, [r7, #12]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3714      	adds	r7, #20
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr
 8011268:	0801126d 	.word	0x0801126d

0801126c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801126c:	b480      	push	{r7}
 801126e:	b085      	sub	sp, #20
 8011270:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011272:	2300      	movs	r3, #0
 8011274:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011276:	4b11      	ldr	r3, [pc, #68]	; (80112bc <prvTaskExitError+0x50>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801127e:	d009      	beq.n	8011294 <prvTaskExitError+0x28>
 8011280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011284:	f383 8811 	msr	BASEPRI, r3
 8011288:	f3bf 8f6f 	isb	sy
 801128c:	f3bf 8f4f 	dsb	sy
 8011290:	60fb      	str	r3, [r7, #12]
 8011292:	e7fe      	b.n	8011292 <prvTaskExitError+0x26>
 8011294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011298:	f383 8811 	msr	BASEPRI, r3
 801129c:	f3bf 8f6f 	isb	sy
 80112a0:	f3bf 8f4f 	dsb	sy
 80112a4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80112a6:	bf00      	nop
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d0fc      	beq.n	80112a8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80112ae:	bf00      	nop
 80112b0:	3714      	adds	r7, #20
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop
 80112bc:	20000084 	.word	0x20000084

080112c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80112c0:	4b07      	ldr	r3, [pc, #28]	; (80112e0 <pxCurrentTCBConst2>)
 80112c2:	6819      	ldr	r1, [r3, #0]
 80112c4:	6808      	ldr	r0, [r1, #0]
 80112c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ca:	f380 8809 	msr	PSP, r0
 80112ce:	f3bf 8f6f 	isb	sy
 80112d2:	f04f 0000 	mov.w	r0, #0
 80112d6:	f380 8811 	msr	BASEPRI, r0
 80112da:	4770      	bx	lr
 80112dc:	f3af 8000 	nop.w

080112e0 <pxCurrentTCBConst2>:
 80112e0:	20026f7c 	.word	0x20026f7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80112e4:	bf00      	nop
 80112e6:	bf00      	nop

080112e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80112e8:	4808      	ldr	r0, [pc, #32]	; (801130c <prvPortStartFirstTask+0x24>)
 80112ea:	6800      	ldr	r0, [r0, #0]
 80112ec:	6800      	ldr	r0, [r0, #0]
 80112ee:	f380 8808 	msr	MSP, r0
 80112f2:	f04f 0000 	mov.w	r0, #0
 80112f6:	f380 8814 	msr	CONTROL, r0
 80112fa:	b662      	cpsie	i
 80112fc:	b661      	cpsie	f
 80112fe:	f3bf 8f4f 	dsb	sy
 8011302:	f3bf 8f6f 	isb	sy
 8011306:	df00      	svc	0
 8011308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801130a:	bf00      	nop
 801130c:	e000ed08 	.word	0xe000ed08

08011310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b086      	sub	sp, #24
 8011314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011316:	4b44      	ldr	r3, [pc, #272]	; (8011428 <xPortStartScheduler+0x118>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	4a44      	ldr	r2, [pc, #272]	; (801142c <xPortStartScheduler+0x11c>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d109      	bne.n	8011334 <xPortStartScheduler+0x24>
 8011320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011324:	f383 8811 	msr	BASEPRI, r3
 8011328:	f3bf 8f6f 	isb	sy
 801132c:	f3bf 8f4f 	dsb	sy
 8011330:	613b      	str	r3, [r7, #16]
 8011332:	e7fe      	b.n	8011332 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011334:	4b3c      	ldr	r3, [pc, #240]	; (8011428 <xPortStartScheduler+0x118>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	4a3d      	ldr	r2, [pc, #244]	; (8011430 <xPortStartScheduler+0x120>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d109      	bne.n	8011352 <xPortStartScheduler+0x42>
 801133e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011342:	f383 8811 	msr	BASEPRI, r3
 8011346:	f3bf 8f6f 	isb	sy
 801134a:	f3bf 8f4f 	dsb	sy
 801134e:	60fb      	str	r3, [r7, #12]
 8011350:	e7fe      	b.n	8011350 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011352:	4b38      	ldr	r3, [pc, #224]	; (8011434 <xPortStartScheduler+0x124>)
 8011354:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	b2db      	uxtb	r3, r3
 801135c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	22ff      	movs	r2, #255	; 0xff
 8011362:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	b2db      	uxtb	r3, r3
 801136a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801136c:	78fb      	ldrb	r3, [r7, #3]
 801136e:	b2db      	uxtb	r3, r3
 8011370:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011374:	b2da      	uxtb	r2, r3
 8011376:	4b30      	ldr	r3, [pc, #192]	; (8011438 <xPortStartScheduler+0x128>)
 8011378:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801137a:	4b30      	ldr	r3, [pc, #192]	; (801143c <xPortStartScheduler+0x12c>)
 801137c:	2207      	movs	r2, #7
 801137e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011380:	e009      	b.n	8011396 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011382:	4b2e      	ldr	r3, [pc, #184]	; (801143c <xPortStartScheduler+0x12c>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	3b01      	subs	r3, #1
 8011388:	4a2c      	ldr	r2, [pc, #176]	; (801143c <xPortStartScheduler+0x12c>)
 801138a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801138c:	78fb      	ldrb	r3, [r7, #3]
 801138e:	b2db      	uxtb	r3, r3
 8011390:	005b      	lsls	r3, r3, #1
 8011392:	b2db      	uxtb	r3, r3
 8011394:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011396:	78fb      	ldrb	r3, [r7, #3]
 8011398:	b2db      	uxtb	r3, r3
 801139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801139e:	2b80      	cmp	r3, #128	; 0x80
 80113a0:	d0ef      	beq.n	8011382 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80113a2:	4b26      	ldr	r3, [pc, #152]	; (801143c <xPortStartScheduler+0x12c>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f1c3 0307 	rsb	r3, r3, #7
 80113aa:	2b04      	cmp	r3, #4
 80113ac:	d009      	beq.n	80113c2 <xPortStartScheduler+0xb2>
 80113ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b2:	f383 8811 	msr	BASEPRI, r3
 80113b6:	f3bf 8f6f 	isb	sy
 80113ba:	f3bf 8f4f 	dsb	sy
 80113be:	60bb      	str	r3, [r7, #8]
 80113c0:	e7fe      	b.n	80113c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80113c2:	4b1e      	ldr	r3, [pc, #120]	; (801143c <xPortStartScheduler+0x12c>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	021b      	lsls	r3, r3, #8
 80113c8:	4a1c      	ldr	r2, [pc, #112]	; (801143c <xPortStartScheduler+0x12c>)
 80113ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80113cc:	4b1b      	ldr	r3, [pc, #108]	; (801143c <xPortStartScheduler+0x12c>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113d4:	4a19      	ldr	r2, [pc, #100]	; (801143c <xPortStartScheduler+0x12c>)
 80113d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	b2da      	uxtb	r2, r3
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80113e0:	4b17      	ldr	r3, [pc, #92]	; (8011440 <xPortStartScheduler+0x130>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4a16      	ldr	r2, [pc, #88]	; (8011440 <xPortStartScheduler+0x130>)
 80113e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80113ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80113ec:	4b14      	ldr	r3, [pc, #80]	; (8011440 <xPortStartScheduler+0x130>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	4a13      	ldr	r2, [pc, #76]	; (8011440 <xPortStartScheduler+0x130>)
 80113f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80113f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80113f8:	f7f1 f86c 	bl	80024d4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80113fc:	4b11      	ldr	r3, [pc, #68]	; (8011444 <xPortStartScheduler+0x134>)
 80113fe:	2200      	movs	r2, #0
 8011400:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011402:	f000 f8d1 	bl	80115a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011406:	4b10      	ldr	r3, [pc, #64]	; (8011448 <xPortStartScheduler+0x138>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	4a0f      	ldr	r2, [pc, #60]	; (8011448 <xPortStartScheduler+0x138>)
 801140c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011410:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011412:	f7ff ff69 	bl	80112e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011416:	f001 fda1 	bl	8012f5c <vTaskSwitchContext>
	prvTaskExitError();
 801141a:	f7ff ff27 	bl	801126c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801141e:	2300      	movs	r3, #0
}
 8011420:	4618      	mov	r0, r3
 8011422:	3718      	adds	r7, #24
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}
 8011428:	e000ed00 	.word	0xe000ed00
 801142c:	410fc271 	.word	0x410fc271
 8011430:	410fc270 	.word	0x410fc270
 8011434:	e000e400 	.word	0xe000e400
 8011438:	20026f74 	.word	0x20026f74
 801143c:	20026f78 	.word	0x20026f78
 8011440:	e000ed20 	.word	0xe000ed20
 8011444:	20000084 	.word	0x20000084
 8011448:	e000ef34 	.word	0xe000ef34

0801144c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801144c:	b480      	push	{r7}
 801144e:	b083      	sub	sp, #12
 8011450:	af00      	add	r7, sp, #0
 8011452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011456:	f383 8811 	msr	BASEPRI, r3
 801145a:	f3bf 8f6f 	isb	sy
 801145e:	f3bf 8f4f 	dsb	sy
 8011462:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011464:	4b0e      	ldr	r3, [pc, #56]	; (80114a0 <vPortEnterCritical+0x54>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	3301      	adds	r3, #1
 801146a:	4a0d      	ldr	r2, [pc, #52]	; (80114a0 <vPortEnterCritical+0x54>)
 801146c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801146e:	4b0c      	ldr	r3, [pc, #48]	; (80114a0 <vPortEnterCritical+0x54>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	2b01      	cmp	r3, #1
 8011474:	d10e      	bne.n	8011494 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011476:	4b0b      	ldr	r3, [pc, #44]	; (80114a4 <vPortEnterCritical+0x58>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	b2db      	uxtb	r3, r3
 801147c:	2b00      	cmp	r3, #0
 801147e:	d009      	beq.n	8011494 <vPortEnterCritical+0x48>
 8011480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011484:	f383 8811 	msr	BASEPRI, r3
 8011488:	f3bf 8f6f 	isb	sy
 801148c:	f3bf 8f4f 	dsb	sy
 8011490:	603b      	str	r3, [r7, #0]
 8011492:	e7fe      	b.n	8011492 <vPortEnterCritical+0x46>
	}
}
 8011494:	bf00      	nop
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr
 80114a0:	20000084 	.word	0x20000084
 80114a4:	e000ed04 	.word	0xe000ed04

080114a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80114a8:	b480      	push	{r7}
 80114aa:	b083      	sub	sp, #12
 80114ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80114ae:	4b11      	ldr	r3, [pc, #68]	; (80114f4 <vPortExitCritical+0x4c>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d109      	bne.n	80114ca <vPortExitCritical+0x22>
 80114b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ba:	f383 8811 	msr	BASEPRI, r3
 80114be:	f3bf 8f6f 	isb	sy
 80114c2:	f3bf 8f4f 	dsb	sy
 80114c6:	607b      	str	r3, [r7, #4]
 80114c8:	e7fe      	b.n	80114c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80114ca:	4b0a      	ldr	r3, [pc, #40]	; (80114f4 <vPortExitCritical+0x4c>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	3b01      	subs	r3, #1
 80114d0:	4a08      	ldr	r2, [pc, #32]	; (80114f4 <vPortExitCritical+0x4c>)
 80114d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80114d4:	4b07      	ldr	r3, [pc, #28]	; (80114f4 <vPortExitCritical+0x4c>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d104      	bne.n	80114e6 <vPortExitCritical+0x3e>
 80114dc:	2300      	movs	r3, #0
 80114de:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80114e6:	bf00      	nop
 80114e8:	370c      	adds	r7, #12
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	20000084 	.word	0x20000084
	...

08011500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011500:	f3ef 8009 	mrs	r0, PSP
 8011504:	f3bf 8f6f 	isb	sy
 8011508:	4b15      	ldr	r3, [pc, #84]	; (8011560 <pxCurrentTCBConst>)
 801150a:	681a      	ldr	r2, [r3, #0]
 801150c:	f01e 0f10 	tst.w	lr, #16
 8011510:	bf08      	it	eq
 8011512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801151a:	6010      	str	r0, [r2, #0]
 801151c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011524:	f380 8811 	msr	BASEPRI, r0
 8011528:	f3bf 8f4f 	dsb	sy
 801152c:	f3bf 8f6f 	isb	sy
 8011530:	f001 fd14 	bl	8012f5c <vTaskSwitchContext>
 8011534:	f04f 0000 	mov.w	r0, #0
 8011538:	f380 8811 	msr	BASEPRI, r0
 801153c:	bc09      	pop	{r0, r3}
 801153e:	6819      	ldr	r1, [r3, #0]
 8011540:	6808      	ldr	r0, [r1, #0]
 8011542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011546:	f01e 0f10 	tst.w	lr, #16
 801154a:	bf08      	it	eq
 801154c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011550:	f380 8809 	msr	PSP, r0
 8011554:	f3bf 8f6f 	isb	sy
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop
 801155c:	f3af 8000 	nop.w

08011560 <pxCurrentTCBConst>:
 8011560:	20026f7c 	.word	0x20026f7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011564:	bf00      	nop
 8011566:	bf00      	nop

08011568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
	__asm volatile
 801156e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011572:	f383 8811 	msr	BASEPRI, r3
 8011576:	f3bf 8f6f 	isb	sy
 801157a:	f3bf 8f4f 	dsb	sy
 801157e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011580:	f001 fc2c 	bl	8012ddc <xTaskIncrementTick>
 8011584:	4603      	mov	r3, r0
 8011586:	2b00      	cmp	r3, #0
 8011588:	d003      	beq.n	8011592 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801158a:	4b06      	ldr	r3, [pc, #24]	; (80115a4 <SysTick_Handler+0x3c>)
 801158c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011590:	601a      	str	r2, [r3, #0]
 8011592:	2300      	movs	r3, #0
 8011594:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801159c:	bf00      	nop
 801159e:	3708      	adds	r7, #8
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}
 80115a4:	e000ed04 	.word	0xe000ed04

080115a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80115a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80115b8 <vPortEnableVFP+0x10>
 80115ac:	6801      	ldr	r1, [r0, #0]
 80115ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80115b2:	6001      	str	r1, [r0, #0]
 80115b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80115b6:	bf00      	nop
 80115b8:	e000ed88 	.word	0xe000ed88

080115bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80115bc:	b480      	push	{r7}
 80115be:	b085      	sub	sp, #20
 80115c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80115c2:	f3ef 8305 	mrs	r3, IPSR
 80115c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2b0f      	cmp	r3, #15
 80115cc:	d913      	bls.n	80115f6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80115ce:	4a16      	ldr	r2, [pc, #88]	; (8011628 <vPortValidateInterruptPriority+0x6c>)
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	4413      	add	r3, r2
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80115d8:	4b14      	ldr	r3, [pc, #80]	; (801162c <vPortValidateInterruptPriority+0x70>)
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	7afa      	ldrb	r2, [r7, #11]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d209      	bcs.n	80115f6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80115e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e6:	f383 8811 	msr	BASEPRI, r3
 80115ea:	f3bf 8f6f 	isb	sy
 80115ee:	f3bf 8f4f 	dsb	sy
 80115f2:	607b      	str	r3, [r7, #4]
 80115f4:	e7fe      	b.n	80115f4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80115f6:	4b0e      	ldr	r3, [pc, #56]	; (8011630 <vPortValidateInterruptPriority+0x74>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80115fe:	4b0d      	ldr	r3, [pc, #52]	; (8011634 <vPortValidateInterruptPriority+0x78>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	429a      	cmp	r2, r3
 8011604:	d909      	bls.n	801161a <vPortValidateInterruptPriority+0x5e>
 8011606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160a:	f383 8811 	msr	BASEPRI, r3
 801160e:	f3bf 8f6f 	isb	sy
 8011612:	f3bf 8f4f 	dsb	sy
 8011616:	603b      	str	r3, [r7, #0]
 8011618:	e7fe      	b.n	8011618 <vPortValidateInterruptPriority+0x5c>
	}
 801161a:	bf00      	nop
 801161c:	3714      	adds	r7, #20
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr
 8011626:	bf00      	nop
 8011628:	e000e3f0 	.word	0xe000e3f0
 801162c:	20026f74 	.word	0x20026f74
 8011630:	e000ed0c 	.word	0xe000ed0c
 8011634:	20026f78 	.word	0x20026f78

08011638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
 8011640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d109      	bne.n	8011660 <xQueueGenericReset+0x28>
 801164c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011650:	f383 8811 	msr	BASEPRI, r3
 8011654:	f3bf 8f6f 	isb	sy
 8011658:	f3bf 8f4f 	dsb	sy
 801165c:	60bb      	str	r3, [r7, #8]
 801165e:	e7fe      	b.n	801165e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011660:	f7ff fef4 	bl	801144c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801166c:	68f9      	ldr	r1, [r7, #12]
 801166e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011670:	fb01 f303 	mul.w	r3, r1, r3
 8011674:	441a      	add	r2, r3
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2200      	movs	r2, #0
 801167e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011690:	3b01      	subs	r3, #1
 8011692:	68f9      	ldr	r1, [r7, #12]
 8011694:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011696:	fb01 f303 	mul.w	r3, r1, r3
 801169a:	441a      	add	r2, r3
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	22ff      	movs	r2, #255	; 0xff
 80116a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	22ff      	movs	r2, #255	; 0xff
 80116ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d114      	bne.n	80116e0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	691b      	ldr	r3, [r3, #16]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d01a      	beq.n	80116f4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	3310      	adds	r3, #16
 80116c2:	4618      	mov	r0, r3
 80116c4:	f001 fd20 	bl	8013108 <xTaskRemoveFromEventList>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d012      	beq.n	80116f4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80116ce:	4b0d      	ldr	r3, [pc, #52]	; (8011704 <xQueueGenericReset+0xcc>)
 80116d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116d4:	601a      	str	r2, [r3, #0]
 80116d6:	f3bf 8f4f 	dsb	sy
 80116da:	f3bf 8f6f 	isb	sy
 80116de:	e009      	b.n	80116f4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	3310      	adds	r3, #16
 80116e4:	4618      	mov	r0, r3
 80116e6:	f7ff fcd9 	bl	801109c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	3324      	adds	r3, #36	; 0x24
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7ff fcd4 	bl	801109c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80116f4:	f7ff fed8 	bl	80114a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80116f8:	2301      	movs	r3, #1
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	e000ed04 	.word	0xe000ed04

08011708 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011708:	b580      	push	{r7, lr}
 801170a:	b08e      	sub	sp, #56	; 0x38
 801170c:	af02      	add	r7, sp, #8
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	60b9      	str	r1, [r7, #8]
 8011712:	607a      	str	r2, [r7, #4]
 8011714:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d109      	bne.n	8011730 <xQueueGenericCreateStatic+0x28>
 801171c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011720:	f383 8811 	msr	BASEPRI, r3
 8011724:	f3bf 8f6f 	isb	sy
 8011728:	f3bf 8f4f 	dsb	sy
 801172c:	62bb      	str	r3, [r7, #40]	; 0x28
 801172e:	e7fe      	b.n	801172e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d109      	bne.n	801174a <xQueueGenericCreateStatic+0x42>
 8011736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801173a:	f383 8811 	msr	BASEPRI, r3
 801173e:	f3bf 8f6f 	isb	sy
 8011742:	f3bf 8f4f 	dsb	sy
 8011746:	627b      	str	r3, [r7, #36]	; 0x24
 8011748:	e7fe      	b.n	8011748 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d002      	beq.n	8011756 <xQueueGenericCreateStatic+0x4e>
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d001      	beq.n	801175a <xQueueGenericCreateStatic+0x52>
 8011756:	2301      	movs	r3, #1
 8011758:	e000      	b.n	801175c <xQueueGenericCreateStatic+0x54>
 801175a:	2300      	movs	r3, #0
 801175c:	2b00      	cmp	r3, #0
 801175e:	d109      	bne.n	8011774 <xQueueGenericCreateStatic+0x6c>
 8011760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011764:	f383 8811 	msr	BASEPRI, r3
 8011768:	f3bf 8f6f 	isb	sy
 801176c:	f3bf 8f4f 	dsb	sy
 8011770:	623b      	str	r3, [r7, #32]
 8011772:	e7fe      	b.n	8011772 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d102      	bne.n	8011780 <xQueueGenericCreateStatic+0x78>
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d101      	bne.n	8011784 <xQueueGenericCreateStatic+0x7c>
 8011780:	2301      	movs	r3, #1
 8011782:	e000      	b.n	8011786 <xQueueGenericCreateStatic+0x7e>
 8011784:	2300      	movs	r3, #0
 8011786:	2b00      	cmp	r3, #0
 8011788:	d109      	bne.n	801179e <xQueueGenericCreateStatic+0x96>
 801178a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801178e:	f383 8811 	msr	BASEPRI, r3
 8011792:	f3bf 8f6f 	isb	sy
 8011796:	f3bf 8f4f 	dsb	sy
 801179a:	61fb      	str	r3, [r7, #28]
 801179c:	e7fe      	b.n	801179c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801179e:	2350      	movs	r3, #80	; 0x50
 80117a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	2b50      	cmp	r3, #80	; 0x50
 80117a6:	d009      	beq.n	80117bc <xQueueGenericCreateStatic+0xb4>
 80117a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ac:	f383 8811 	msr	BASEPRI, r3
 80117b0:	f3bf 8f6f 	isb	sy
 80117b4:	f3bf 8f4f 	dsb	sy
 80117b8:	61bb      	str	r3, [r7, #24]
 80117ba:	e7fe      	b.n	80117ba <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80117bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80117c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d00d      	beq.n	80117e4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80117c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ca:	2201      	movs	r2, #1
 80117cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80117d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80117d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d6:	9300      	str	r3, [sp, #0]
 80117d8:	4613      	mov	r3, r2
 80117da:	687a      	ldr	r2, [r7, #4]
 80117dc:	68b9      	ldr	r1, [r7, #8]
 80117de:	68f8      	ldr	r0, [r7, #12]
 80117e0:	f000 f844 	bl	801186c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80117e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3730      	adds	r7, #48	; 0x30
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}

080117ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80117ee:	b580      	push	{r7, lr}
 80117f0:	b08a      	sub	sp, #40	; 0x28
 80117f2:	af02      	add	r7, sp, #8
 80117f4:	60f8      	str	r0, [r7, #12]
 80117f6:	60b9      	str	r1, [r7, #8]
 80117f8:	4613      	mov	r3, r2
 80117fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d109      	bne.n	8011816 <xQueueGenericCreate+0x28>
 8011802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011806:	f383 8811 	msr	BASEPRI, r3
 801180a:	f3bf 8f6f 	isb	sy
 801180e:	f3bf 8f4f 	dsb	sy
 8011812:	613b      	str	r3, [r7, #16]
 8011814:	e7fe      	b.n	8011814 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d102      	bne.n	8011822 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801181c:	2300      	movs	r3, #0
 801181e:	61fb      	str	r3, [r7, #28]
 8011820:	e004      	b.n	801182c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	68ba      	ldr	r2, [r7, #8]
 8011826:	fb02 f303 	mul.w	r3, r2, r3
 801182a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	3350      	adds	r3, #80	; 0x50
 8011830:	4618      	mov	r0, r3
 8011832:	f7ff fa57 	bl	8010ce4 <pvPortMalloc>
 8011836:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011838:	69bb      	ldr	r3, [r7, #24]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d011      	beq.n	8011862 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	3350      	adds	r3, #80	; 0x50
 8011846:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011848:	69bb      	ldr	r3, [r7, #24]
 801184a:	2200      	movs	r2, #0
 801184c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011850:	79fa      	ldrb	r2, [r7, #7]
 8011852:	69bb      	ldr	r3, [r7, #24]
 8011854:	9300      	str	r3, [sp, #0]
 8011856:	4613      	mov	r3, r2
 8011858:	697a      	ldr	r2, [r7, #20]
 801185a:	68b9      	ldr	r1, [r7, #8]
 801185c:	68f8      	ldr	r0, [r7, #12]
 801185e:	f000 f805 	bl	801186c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011862:	69bb      	ldr	r3, [r7, #24]
	}
 8011864:	4618      	mov	r0, r3
 8011866:	3720      	adds	r7, #32
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	60f8      	str	r0, [r7, #12]
 8011874:	60b9      	str	r1, [r7, #8]
 8011876:	607a      	str	r2, [r7, #4]
 8011878:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d103      	bne.n	8011888 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011880:	69bb      	ldr	r3, [r7, #24]
 8011882:	69ba      	ldr	r2, [r7, #24]
 8011884:	601a      	str	r2, [r3, #0]
 8011886:	e002      	b.n	801188e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	687a      	ldr	r2, [r7, #4]
 801188c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801188e:	69bb      	ldr	r3, [r7, #24]
 8011890:	68fa      	ldr	r2, [r7, #12]
 8011892:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011894:	69bb      	ldr	r3, [r7, #24]
 8011896:	68ba      	ldr	r2, [r7, #8]
 8011898:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801189a:	2101      	movs	r1, #1
 801189c:	69b8      	ldr	r0, [r7, #24]
 801189e:	f7ff fecb 	bl	8011638 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	78fa      	ldrb	r2, [r7, #3]
 80118a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80118aa:	bf00      	nop
 80118ac:	3710      	adds	r7, #16
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}

080118b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80118b2:	b580      	push	{r7, lr}
 80118b4:	b082      	sub	sp, #8
 80118b6:	af00      	add	r7, sp, #0
 80118b8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d00e      	beq.n	80118de <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2200      	movs	r2, #0
 80118ca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2200      	movs	r2, #0
 80118d0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80118d2:	2300      	movs	r3, #0
 80118d4:	2200      	movs	r2, #0
 80118d6:	2100      	movs	r1, #0
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 f905 	bl	8011ae8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80118de:	bf00      	nop
 80118e0:	3708      	adds	r7, #8
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b086      	sub	sp, #24
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	4603      	mov	r3, r0
 80118ee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80118f0:	2301      	movs	r3, #1
 80118f2:	617b      	str	r3, [r7, #20]
 80118f4:	2300      	movs	r3, #0
 80118f6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80118f8:	79fb      	ldrb	r3, [r7, #7]
 80118fa:	461a      	mov	r2, r3
 80118fc:	6939      	ldr	r1, [r7, #16]
 80118fe:	6978      	ldr	r0, [r7, #20]
 8011900:	f7ff ff75 	bl	80117ee <xQueueGenericCreate>
 8011904:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011906:	68f8      	ldr	r0, [r7, #12]
 8011908:	f7ff ffd3 	bl	80118b2 <prvInitialiseMutex>

		return xNewQueue;
 801190c:	68fb      	ldr	r3, [r7, #12]
	}
 801190e:	4618      	mov	r0, r3
 8011910:	3718      	adds	r7, #24
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}

08011916 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011916:	b580      	push	{r7, lr}
 8011918:	b088      	sub	sp, #32
 801191a:	af02      	add	r7, sp, #8
 801191c:	4603      	mov	r3, r0
 801191e:	6039      	str	r1, [r7, #0]
 8011920:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011922:	2301      	movs	r3, #1
 8011924:	617b      	str	r3, [r7, #20]
 8011926:	2300      	movs	r3, #0
 8011928:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801192a:	79fb      	ldrb	r3, [r7, #7]
 801192c:	9300      	str	r3, [sp, #0]
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	2200      	movs	r2, #0
 8011932:	6939      	ldr	r1, [r7, #16]
 8011934:	6978      	ldr	r0, [r7, #20]
 8011936:	f7ff fee7 	bl	8011708 <xQueueGenericCreateStatic>
 801193a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f7ff ffb8 	bl	80118b2 <prvInitialiseMutex>

		return xNewQueue;
 8011942:	68fb      	ldr	r3, [r7, #12]
	}
 8011944:	4618      	mov	r0, r3
 8011946:	3718      	adds	r7, #24
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801194c:	b590      	push	{r4, r7, lr}
 801194e:	b087      	sub	sp, #28
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d109      	bne.n	8011972 <xQueueGiveMutexRecursive+0x26>
 801195e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011962:	f383 8811 	msr	BASEPRI, r3
 8011966:	f3bf 8f6f 	isb	sy
 801196a:	f3bf 8f4f 	dsb	sy
 801196e:	60fb      	str	r3, [r7, #12]
 8011970:	e7fe      	b.n	8011970 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	689c      	ldr	r4, [r3, #8]
 8011976:	f001 fda5 	bl	80134c4 <xTaskGetCurrentTaskHandle>
 801197a:	4603      	mov	r3, r0
 801197c:	429c      	cmp	r4, r3
 801197e:	d111      	bne.n	80119a4 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	68db      	ldr	r3, [r3, #12]
 8011984:	1e5a      	subs	r2, r3, #1
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	68db      	ldr	r3, [r3, #12]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d105      	bne.n	801199e <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011992:	2300      	movs	r3, #0
 8011994:	2200      	movs	r2, #0
 8011996:	2100      	movs	r1, #0
 8011998:	6938      	ldr	r0, [r7, #16]
 801199a:	f000 f8a5 	bl	8011ae8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801199e:	2301      	movs	r3, #1
 80119a0:	617b      	str	r3, [r7, #20]
 80119a2:	e001      	b.n	80119a8 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80119a4:	2300      	movs	r3, #0
 80119a6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80119a8:	697b      	ldr	r3, [r7, #20]
	}
 80119aa:	4618      	mov	r0, r3
 80119ac:	371c      	adds	r7, #28
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd90      	pop	{r4, r7, pc}

080119b2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80119b2:	b590      	push	{r4, r7, lr}
 80119b4:	b087      	sub	sp, #28
 80119b6:	af00      	add	r7, sp, #0
 80119b8:	6078      	str	r0, [r7, #4]
 80119ba:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d109      	bne.n	80119da <xQueueTakeMutexRecursive+0x28>
 80119c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ca:	f383 8811 	msr	BASEPRI, r3
 80119ce:	f3bf 8f6f 	isb	sy
 80119d2:	f3bf 8f4f 	dsb	sy
 80119d6:	60fb      	str	r3, [r7, #12]
 80119d8:	e7fe      	b.n	80119d8 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	689c      	ldr	r4, [r3, #8]
 80119de:	f001 fd71 	bl	80134c4 <xTaskGetCurrentTaskHandle>
 80119e2:	4603      	mov	r3, r0
 80119e4:	429c      	cmp	r4, r3
 80119e6:	d107      	bne.n	80119f8 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	1c5a      	adds	r2, r3, #1
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80119f2:	2301      	movs	r3, #1
 80119f4:	617b      	str	r3, [r7, #20]
 80119f6:	e00c      	b.n	8011a12 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80119f8:	6839      	ldr	r1, [r7, #0]
 80119fa:	6938      	ldr	r0, [r7, #16]
 80119fc:	f000 fb68 	bl	80120d0 <xQueueSemaphoreTake>
 8011a00:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d004      	beq.n	8011a12 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	68db      	ldr	r3, [r3, #12]
 8011a0c:	1c5a      	adds	r2, r3, #1
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011a12:	697b      	ldr	r3, [r7, #20]
	}
 8011a14:	4618      	mov	r0, r3
 8011a16:	371c      	adds	r7, #28
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd90      	pop	{r4, r7, pc}

08011a1c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b08a      	sub	sp, #40	; 0x28
 8011a20:	af02      	add	r7, sp, #8
 8011a22:	60f8      	str	r0, [r7, #12]
 8011a24:	60b9      	str	r1, [r7, #8]
 8011a26:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d109      	bne.n	8011a42 <xQueueCreateCountingSemaphoreStatic+0x26>
 8011a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a32:	f383 8811 	msr	BASEPRI, r3
 8011a36:	f3bf 8f6f 	isb	sy
 8011a3a:	f3bf 8f4f 	dsb	sy
 8011a3e:	61bb      	str	r3, [r7, #24]
 8011a40:	e7fe      	b.n	8011a40 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011a42:	68ba      	ldr	r2, [r7, #8]
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d909      	bls.n	8011a5e <xQueueCreateCountingSemaphoreStatic+0x42>
 8011a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a4e:	f383 8811 	msr	BASEPRI, r3
 8011a52:	f3bf 8f6f 	isb	sy
 8011a56:	f3bf 8f4f 	dsb	sy
 8011a5a:	617b      	str	r3, [r7, #20]
 8011a5c:	e7fe      	b.n	8011a5c <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011a5e:	2302      	movs	r3, #2
 8011a60:	9300      	str	r3, [sp, #0]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2200      	movs	r2, #0
 8011a66:	2100      	movs	r1, #0
 8011a68:	68f8      	ldr	r0, [r7, #12]
 8011a6a:	f7ff fe4d 	bl	8011708 <xQueueGenericCreateStatic>
 8011a6e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d002      	beq.n	8011a7c <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011a76:	69fb      	ldr	r3, [r7, #28]
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011a7c:	69fb      	ldr	r3, [r7, #28]
	}
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3720      	adds	r7, #32
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}

08011a86 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011a86:	b580      	push	{r7, lr}
 8011a88:	b086      	sub	sp, #24
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	6078      	str	r0, [r7, #4]
 8011a8e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d109      	bne.n	8011aaa <xQueueCreateCountingSemaphore+0x24>
 8011a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9a:	f383 8811 	msr	BASEPRI, r3
 8011a9e:	f3bf 8f6f 	isb	sy
 8011aa2:	f3bf 8f4f 	dsb	sy
 8011aa6:	613b      	str	r3, [r7, #16]
 8011aa8:	e7fe      	b.n	8011aa8 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011aaa:	683a      	ldr	r2, [r7, #0]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d909      	bls.n	8011ac6 <xQueueCreateCountingSemaphore+0x40>
 8011ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab6:	f383 8811 	msr	BASEPRI, r3
 8011aba:	f3bf 8f6f 	isb	sy
 8011abe:	f3bf 8f4f 	dsb	sy
 8011ac2:	60fb      	str	r3, [r7, #12]
 8011ac4:	e7fe      	b.n	8011ac4 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011ac6:	2202      	movs	r2, #2
 8011ac8:	2100      	movs	r1, #0
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7ff fe8f 	bl	80117ee <xQueueGenericCreate>
 8011ad0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d002      	beq.n	8011ade <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	683a      	ldr	r2, [r7, #0]
 8011adc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011ade:	697b      	ldr	r3, [r7, #20]
	}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3718      	adds	r7, #24
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b08e      	sub	sp, #56	; 0x38
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]
 8011af4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011af6:	2300      	movs	r3, #0
 8011af8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d109      	bne.n	8011b18 <xQueueGenericSend+0x30>
 8011b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b08:	f383 8811 	msr	BASEPRI, r3
 8011b0c:	f3bf 8f6f 	isb	sy
 8011b10:	f3bf 8f4f 	dsb	sy
 8011b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b16:	e7fe      	b.n	8011b16 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d103      	bne.n	8011b26 <xQueueGenericSend+0x3e>
 8011b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d101      	bne.n	8011b2a <xQueueGenericSend+0x42>
 8011b26:	2301      	movs	r3, #1
 8011b28:	e000      	b.n	8011b2c <xQueueGenericSend+0x44>
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d109      	bne.n	8011b44 <xQueueGenericSend+0x5c>
 8011b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b34:	f383 8811 	msr	BASEPRI, r3
 8011b38:	f3bf 8f6f 	isb	sy
 8011b3c:	f3bf 8f4f 	dsb	sy
 8011b40:	627b      	str	r3, [r7, #36]	; 0x24
 8011b42:	e7fe      	b.n	8011b42 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	2b02      	cmp	r3, #2
 8011b48:	d103      	bne.n	8011b52 <xQueueGenericSend+0x6a>
 8011b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d101      	bne.n	8011b56 <xQueueGenericSend+0x6e>
 8011b52:	2301      	movs	r3, #1
 8011b54:	e000      	b.n	8011b58 <xQueueGenericSend+0x70>
 8011b56:	2300      	movs	r3, #0
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d109      	bne.n	8011b70 <xQueueGenericSend+0x88>
 8011b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b60:	f383 8811 	msr	BASEPRI, r3
 8011b64:	f3bf 8f6f 	isb	sy
 8011b68:	f3bf 8f4f 	dsb	sy
 8011b6c:	623b      	str	r3, [r7, #32]
 8011b6e:	e7fe      	b.n	8011b6e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b70:	f001 fcb8 	bl	80134e4 <xTaskGetSchedulerState>
 8011b74:	4603      	mov	r3, r0
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d102      	bne.n	8011b80 <xQueueGenericSend+0x98>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d101      	bne.n	8011b84 <xQueueGenericSend+0x9c>
 8011b80:	2301      	movs	r3, #1
 8011b82:	e000      	b.n	8011b86 <xQueueGenericSend+0x9e>
 8011b84:	2300      	movs	r3, #0
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d109      	bne.n	8011b9e <xQueueGenericSend+0xb6>
 8011b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b8e:	f383 8811 	msr	BASEPRI, r3
 8011b92:	f3bf 8f6f 	isb	sy
 8011b96:	f3bf 8f4f 	dsb	sy
 8011b9a:	61fb      	str	r3, [r7, #28]
 8011b9c:	e7fe      	b.n	8011b9c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b9e:	f7ff fc55 	bl	801144c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d302      	bcc.n	8011bb4 <xQueueGenericSend+0xcc>
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	2b02      	cmp	r3, #2
 8011bb2:	d129      	bne.n	8011c08 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011bb4:	683a      	ldr	r2, [r7, #0]
 8011bb6:	68b9      	ldr	r1, [r7, #8]
 8011bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bba:	f000 fc48 	bl	801244e <prvCopyDataToQueue>
 8011bbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d010      	beq.n	8011bea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bca:	3324      	adds	r3, #36	; 0x24
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f001 fa9b 	bl	8013108 <xTaskRemoveFromEventList>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d013      	beq.n	8011c00 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011bd8:	4b3f      	ldr	r3, [pc, #252]	; (8011cd8 <xQueueGenericSend+0x1f0>)
 8011bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bde:	601a      	str	r2, [r3, #0]
 8011be0:	f3bf 8f4f 	dsb	sy
 8011be4:	f3bf 8f6f 	isb	sy
 8011be8:	e00a      	b.n	8011c00 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d007      	beq.n	8011c00 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011bf0:	4b39      	ldr	r3, [pc, #228]	; (8011cd8 <xQueueGenericSend+0x1f0>)
 8011bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bf6:	601a      	str	r2, [r3, #0]
 8011bf8:	f3bf 8f4f 	dsb	sy
 8011bfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011c00:	f7ff fc52 	bl	80114a8 <vPortExitCritical>
				return pdPASS;
 8011c04:	2301      	movs	r3, #1
 8011c06:	e063      	b.n	8011cd0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d103      	bne.n	8011c16 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011c0e:	f7ff fc4b 	bl	80114a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011c12:	2300      	movs	r3, #0
 8011c14:	e05c      	b.n	8011cd0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d106      	bne.n	8011c2a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c1c:	f107 0314 	add.w	r3, r7, #20
 8011c20:	4618      	mov	r0, r3
 8011c22:	f001 fad5 	bl	80131d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c26:	2301      	movs	r3, #1
 8011c28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c2a:	f7ff fc3d 	bl	80114a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c2e:	f000 ffe3 	bl	8012bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c32:	f7ff fc0b 	bl	801144c <vPortEnterCritical>
 8011c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c3c:	b25b      	sxtb	r3, r3
 8011c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c42:	d103      	bne.n	8011c4c <xQueueGenericSend+0x164>
 8011c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c46:	2200      	movs	r2, #0
 8011c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c52:	b25b      	sxtb	r3, r3
 8011c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c58:	d103      	bne.n	8011c62 <xQueueGenericSend+0x17a>
 8011c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c62:	f7ff fc21 	bl	80114a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c66:	1d3a      	adds	r2, r7, #4
 8011c68:	f107 0314 	add.w	r3, r7, #20
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f001 fac4 	bl	80131fc <xTaskCheckForTimeOut>
 8011c74:	4603      	mov	r3, r0
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d124      	bne.n	8011cc4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c7c:	f000 fcdf 	bl	801263e <prvIsQueueFull>
 8011c80:	4603      	mov	r3, r0
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d018      	beq.n	8011cb8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c88:	3310      	adds	r3, #16
 8011c8a:	687a      	ldr	r2, [r7, #4]
 8011c8c:	4611      	mov	r1, r2
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f001 f9ec 	bl	801306c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c96:	f000 fc6a 	bl	801256e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011c9a:	f000 fff3 	bl	8012c84 <xTaskResumeAll>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	f47f af7c 	bne.w	8011b9e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011ca6:	4b0c      	ldr	r3, [pc, #48]	; (8011cd8 <xQueueGenericSend+0x1f0>)
 8011ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cac:	601a      	str	r2, [r3, #0]
 8011cae:	f3bf 8f4f 	dsb	sy
 8011cb2:	f3bf 8f6f 	isb	sy
 8011cb6:	e772      	b.n	8011b9e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cba:	f000 fc58 	bl	801256e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011cbe:	f000 ffe1 	bl	8012c84 <xTaskResumeAll>
 8011cc2:	e76c      	b.n	8011b9e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cc6:	f000 fc52 	bl	801256e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011cca:	f000 ffdb 	bl	8012c84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011cce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3738      	adds	r7, #56	; 0x38
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	e000ed04 	.word	0xe000ed04

08011cdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b08e      	sub	sp, #56	; 0x38
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	607a      	str	r2, [r7, #4]
 8011ce8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d109      	bne.n	8011d08 <xQueueGenericSendFromISR+0x2c>
 8011cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf8:	f383 8811 	msr	BASEPRI, r3
 8011cfc:	f3bf 8f6f 	isb	sy
 8011d00:	f3bf 8f4f 	dsb	sy
 8011d04:	627b      	str	r3, [r7, #36]	; 0x24
 8011d06:	e7fe      	b.n	8011d06 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d103      	bne.n	8011d16 <xQueueGenericSendFromISR+0x3a>
 8011d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d101      	bne.n	8011d1a <xQueueGenericSendFromISR+0x3e>
 8011d16:	2301      	movs	r3, #1
 8011d18:	e000      	b.n	8011d1c <xQueueGenericSendFromISR+0x40>
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d109      	bne.n	8011d34 <xQueueGenericSendFromISR+0x58>
 8011d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d24:	f383 8811 	msr	BASEPRI, r3
 8011d28:	f3bf 8f6f 	isb	sy
 8011d2c:	f3bf 8f4f 	dsb	sy
 8011d30:	623b      	str	r3, [r7, #32]
 8011d32:	e7fe      	b.n	8011d32 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	2b02      	cmp	r3, #2
 8011d38:	d103      	bne.n	8011d42 <xQueueGenericSendFromISR+0x66>
 8011d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	d101      	bne.n	8011d46 <xQueueGenericSendFromISR+0x6a>
 8011d42:	2301      	movs	r3, #1
 8011d44:	e000      	b.n	8011d48 <xQueueGenericSendFromISR+0x6c>
 8011d46:	2300      	movs	r3, #0
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d109      	bne.n	8011d60 <xQueueGenericSendFromISR+0x84>
 8011d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d50:	f383 8811 	msr	BASEPRI, r3
 8011d54:	f3bf 8f6f 	isb	sy
 8011d58:	f3bf 8f4f 	dsb	sy
 8011d5c:	61fb      	str	r3, [r7, #28]
 8011d5e:	e7fe      	b.n	8011d5e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d60:	f7ff fc2c 	bl	80115bc <vPortValidateInterruptPriority>
	__asm volatile
 8011d64:	f3ef 8211 	mrs	r2, BASEPRI
 8011d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6c:	f383 8811 	msr	BASEPRI, r3
 8011d70:	f3bf 8f6f 	isb	sy
 8011d74:	f3bf 8f4f 	dsb	sy
 8011d78:	61ba      	str	r2, [r7, #24]
 8011d7a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011d7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d302      	bcc.n	8011d92 <xQueueGenericSendFromISR+0xb6>
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	2b02      	cmp	r3, #2
 8011d90:	d12c      	bne.n	8011dec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011d9c:	683a      	ldr	r2, [r7, #0]
 8011d9e:	68b9      	ldr	r1, [r7, #8]
 8011da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011da2:	f000 fb54 	bl	801244e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011da6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dae:	d112      	bne.n	8011dd6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d016      	beq.n	8011de6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dba:	3324      	adds	r3, #36	; 0x24
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f001 f9a3 	bl	8013108 <xTaskRemoveFromEventList>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d00e      	beq.n	8011de6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d00b      	beq.n	8011de6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	601a      	str	r2, [r3, #0]
 8011dd4:	e007      	b.n	8011de6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011dda:	3301      	adds	r3, #1
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	b25a      	sxtb	r2, r3
 8011de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011de6:	2301      	movs	r3, #1
 8011de8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011dea:	e001      	b.n	8011df0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011dec:	2300      	movs	r3, #0
 8011dee:	637b      	str	r3, [r7, #52]	; 0x34
 8011df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3738      	adds	r7, #56	; 0x38
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b08e      	sub	sp, #56	; 0x38
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d109      	bne.n	8011e2c <xQueueGiveFromISR+0x28>
	__asm volatile
 8011e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e1c:	f383 8811 	msr	BASEPRI, r3
 8011e20:	f3bf 8f6f 	isb	sy
 8011e24:	f3bf 8f4f 	dsb	sy
 8011e28:	623b      	str	r3, [r7, #32]
 8011e2a:	e7fe      	b.n	8011e2a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d009      	beq.n	8011e48 <xQueueGiveFromISR+0x44>
 8011e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e38:	f383 8811 	msr	BASEPRI, r3
 8011e3c:	f3bf 8f6f 	isb	sy
 8011e40:	f3bf 8f4f 	dsb	sy
 8011e44:	61fb      	str	r3, [r7, #28]
 8011e46:	e7fe      	b.n	8011e46 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d103      	bne.n	8011e58 <xQueueGiveFromISR+0x54>
 8011e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e52:	689b      	ldr	r3, [r3, #8]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d101      	bne.n	8011e5c <xQueueGiveFromISR+0x58>
 8011e58:	2301      	movs	r3, #1
 8011e5a:	e000      	b.n	8011e5e <xQueueGiveFromISR+0x5a>
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d109      	bne.n	8011e76 <xQueueGiveFromISR+0x72>
 8011e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e66:	f383 8811 	msr	BASEPRI, r3
 8011e6a:	f3bf 8f6f 	isb	sy
 8011e6e:	f3bf 8f4f 	dsb	sy
 8011e72:	61bb      	str	r3, [r7, #24]
 8011e74:	e7fe      	b.n	8011e74 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011e76:	f7ff fba1 	bl	80115bc <vPortValidateInterruptPriority>
	__asm volatile
 8011e7a:	f3ef 8211 	mrs	r2, BASEPRI
 8011e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e82:	f383 8811 	msr	BASEPRI, r3
 8011e86:	f3bf 8f6f 	isb	sy
 8011e8a:	f3bf 8f4f 	dsb	sy
 8011e8e:	617a      	str	r2, [r7, #20]
 8011e90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011e92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011e94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d22b      	bcs.n	8011efe <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eb2:	1c5a      	adds	r2, r3, #1
 8011eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011eb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ec0:	d112      	bne.n	8011ee8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d016      	beq.n	8011ef8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ecc:	3324      	adds	r3, #36	; 0x24
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f001 f91a 	bl	8013108 <xTaskRemoveFromEventList>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d00e      	beq.n	8011ef8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d00b      	beq.n	8011ef8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	2201      	movs	r2, #1
 8011ee4:	601a      	str	r2, [r3, #0]
 8011ee6:	e007      	b.n	8011ef8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011eec:	3301      	adds	r3, #1
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	b25a      	sxtb	r2, r3
 8011ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011ef8:	2301      	movs	r3, #1
 8011efa:	637b      	str	r3, [r7, #52]	; 0x34
 8011efc:	e001      	b.n	8011f02 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011efe:	2300      	movs	r3, #0
 8011f00:	637b      	str	r3, [r7, #52]	; 0x34
 8011f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f04:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3738      	adds	r7, #56	; 0x38
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
	...

08011f18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b08c      	sub	sp, #48	; 0x30
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	60f8      	str	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011f24:	2300      	movs	r3, #0
 8011f26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d109      	bne.n	8011f46 <xQueueReceive+0x2e>
	__asm volatile
 8011f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f36:	f383 8811 	msr	BASEPRI, r3
 8011f3a:	f3bf 8f6f 	isb	sy
 8011f3e:	f3bf 8f4f 	dsb	sy
 8011f42:	623b      	str	r3, [r7, #32]
 8011f44:	e7fe      	b.n	8011f44 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d103      	bne.n	8011f54 <xQueueReceive+0x3c>
 8011f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d101      	bne.n	8011f58 <xQueueReceive+0x40>
 8011f54:	2301      	movs	r3, #1
 8011f56:	e000      	b.n	8011f5a <xQueueReceive+0x42>
 8011f58:	2300      	movs	r3, #0
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d109      	bne.n	8011f72 <xQueueReceive+0x5a>
 8011f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f62:	f383 8811 	msr	BASEPRI, r3
 8011f66:	f3bf 8f6f 	isb	sy
 8011f6a:	f3bf 8f4f 	dsb	sy
 8011f6e:	61fb      	str	r3, [r7, #28]
 8011f70:	e7fe      	b.n	8011f70 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011f72:	f001 fab7 	bl	80134e4 <xTaskGetSchedulerState>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d102      	bne.n	8011f82 <xQueueReceive+0x6a>
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d101      	bne.n	8011f86 <xQueueReceive+0x6e>
 8011f82:	2301      	movs	r3, #1
 8011f84:	e000      	b.n	8011f88 <xQueueReceive+0x70>
 8011f86:	2300      	movs	r3, #0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d109      	bne.n	8011fa0 <xQueueReceive+0x88>
 8011f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f90:	f383 8811 	msr	BASEPRI, r3
 8011f94:	f3bf 8f6f 	isb	sy
 8011f98:	f3bf 8f4f 	dsb	sy
 8011f9c:	61bb      	str	r3, [r7, #24]
 8011f9e:	e7fe      	b.n	8011f9e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011fa0:	f7ff fa54 	bl	801144c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fa8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d01f      	beq.n	8011ff0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011fb0:	68b9      	ldr	r1, [r7, #8]
 8011fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fb4:	f000 fab5 	bl	8012522 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fba:	1e5a      	subs	r2, r3, #1
 8011fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fbe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc2:	691b      	ldr	r3, [r3, #16]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d00f      	beq.n	8011fe8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fca:	3310      	adds	r3, #16
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f001 f89b 	bl	8013108 <xTaskRemoveFromEventList>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d007      	beq.n	8011fe8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011fd8:	4b3c      	ldr	r3, [pc, #240]	; (80120cc <xQueueReceive+0x1b4>)
 8011fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fde:	601a      	str	r2, [r3, #0]
 8011fe0:	f3bf 8f4f 	dsb	sy
 8011fe4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011fe8:	f7ff fa5e 	bl	80114a8 <vPortExitCritical>
				return pdPASS;
 8011fec:	2301      	movs	r3, #1
 8011fee:	e069      	b.n	80120c4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d103      	bne.n	8011ffe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011ff6:	f7ff fa57 	bl	80114a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	e062      	b.n	80120c4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012000:	2b00      	cmp	r3, #0
 8012002:	d106      	bne.n	8012012 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012004:	f107 0310 	add.w	r3, r7, #16
 8012008:	4618      	mov	r0, r3
 801200a:	f001 f8e1 	bl	80131d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801200e:	2301      	movs	r3, #1
 8012010:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012012:	f7ff fa49 	bl	80114a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012016:	f000 fdef 	bl	8012bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801201a:	f7ff fa17 	bl	801144c <vPortEnterCritical>
 801201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012024:	b25b      	sxtb	r3, r3
 8012026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801202a:	d103      	bne.n	8012034 <xQueueReceive+0x11c>
 801202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801202e:	2200      	movs	r2, #0
 8012030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801203a:	b25b      	sxtb	r3, r3
 801203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012040:	d103      	bne.n	801204a <xQueueReceive+0x132>
 8012042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012044:	2200      	movs	r2, #0
 8012046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801204a:	f7ff fa2d 	bl	80114a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801204e:	1d3a      	adds	r2, r7, #4
 8012050:	f107 0310 	add.w	r3, r7, #16
 8012054:	4611      	mov	r1, r2
 8012056:	4618      	mov	r0, r3
 8012058:	f001 f8d0 	bl	80131fc <xTaskCheckForTimeOut>
 801205c:	4603      	mov	r3, r0
 801205e:	2b00      	cmp	r3, #0
 8012060:	d123      	bne.n	80120aa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012064:	f000 fad5 	bl	8012612 <prvIsQueueEmpty>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d017      	beq.n	801209e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012070:	3324      	adds	r3, #36	; 0x24
 8012072:	687a      	ldr	r2, [r7, #4]
 8012074:	4611      	mov	r1, r2
 8012076:	4618      	mov	r0, r3
 8012078:	f000 fff8 	bl	801306c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801207c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801207e:	f000 fa76 	bl	801256e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012082:	f000 fdff 	bl	8012c84 <xTaskResumeAll>
 8012086:	4603      	mov	r3, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	d189      	bne.n	8011fa0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 801208c:	4b0f      	ldr	r3, [pc, #60]	; (80120cc <xQueueReceive+0x1b4>)
 801208e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012092:	601a      	str	r2, [r3, #0]
 8012094:	f3bf 8f4f 	dsb	sy
 8012098:	f3bf 8f6f 	isb	sy
 801209c:	e780      	b.n	8011fa0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801209e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120a0:	f000 fa65 	bl	801256e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80120a4:	f000 fdee 	bl	8012c84 <xTaskResumeAll>
 80120a8:	e77a      	b.n	8011fa0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80120aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120ac:	f000 fa5f 	bl	801256e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80120b0:	f000 fde8 	bl	8012c84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80120b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120b6:	f000 faac 	bl	8012612 <prvIsQueueEmpty>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	f43f af6f 	beq.w	8011fa0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80120c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3730      	adds	r7, #48	; 0x30
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}
 80120cc:	e000ed04 	.word	0xe000ed04

080120d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b08e      	sub	sp, #56	; 0x38
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
 80120d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80120da:	2300      	movs	r3, #0
 80120dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80120e2:	2300      	movs	r3, #0
 80120e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80120e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d109      	bne.n	8012100 <xQueueSemaphoreTake+0x30>
 80120ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f0:	f383 8811 	msr	BASEPRI, r3
 80120f4:	f3bf 8f6f 	isb	sy
 80120f8:	f3bf 8f4f 	dsb	sy
 80120fc:	623b      	str	r3, [r7, #32]
 80120fe:	e7fe      	b.n	80120fe <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012104:	2b00      	cmp	r3, #0
 8012106:	d009      	beq.n	801211c <xQueueSemaphoreTake+0x4c>
 8012108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801210c:	f383 8811 	msr	BASEPRI, r3
 8012110:	f3bf 8f6f 	isb	sy
 8012114:	f3bf 8f4f 	dsb	sy
 8012118:	61fb      	str	r3, [r7, #28]
 801211a:	e7fe      	b.n	801211a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801211c:	f001 f9e2 	bl	80134e4 <xTaskGetSchedulerState>
 8012120:	4603      	mov	r3, r0
 8012122:	2b00      	cmp	r3, #0
 8012124:	d102      	bne.n	801212c <xQueueSemaphoreTake+0x5c>
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d101      	bne.n	8012130 <xQueueSemaphoreTake+0x60>
 801212c:	2301      	movs	r3, #1
 801212e:	e000      	b.n	8012132 <xQueueSemaphoreTake+0x62>
 8012130:	2300      	movs	r3, #0
 8012132:	2b00      	cmp	r3, #0
 8012134:	d109      	bne.n	801214a <xQueueSemaphoreTake+0x7a>
 8012136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801213a:	f383 8811 	msr	BASEPRI, r3
 801213e:	f3bf 8f6f 	isb	sy
 8012142:	f3bf 8f4f 	dsb	sy
 8012146:	61bb      	str	r3, [r7, #24]
 8012148:	e7fe      	b.n	8012148 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801214a:	f7ff f97f 	bl	801144c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012152:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012156:	2b00      	cmp	r3, #0
 8012158:	d024      	beq.n	80121a4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215c:	1e5a      	subs	r2, r3, #1
 801215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012160:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d104      	bne.n	8012174 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801216a:	f001 fb2d 	bl	80137c8 <pvTaskIncrementMutexHeldCount>
 801216e:	4602      	mov	r2, r0
 8012170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012172:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012176:	691b      	ldr	r3, [r3, #16]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d00f      	beq.n	801219c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217e:	3310      	adds	r3, #16
 8012180:	4618      	mov	r0, r3
 8012182:	f000 ffc1 	bl	8013108 <xTaskRemoveFromEventList>
 8012186:	4603      	mov	r3, r0
 8012188:	2b00      	cmp	r3, #0
 801218a:	d007      	beq.n	801219c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801218c:	4b53      	ldr	r3, [pc, #332]	; (80122dc <xQueueSemaphoreTake+0x20c>)
 801218e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012192:	601a      	str	r2, [r3, #0]
 8012194:	f3bf 8f4f 	dsb	sy
 8012198:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801219c:	f7ff f984 	bl	80114a8 <vPortExitCritical>
				return pdPASS;
 80121a0:	2301      	movs	r3, #1
 80121a2:	e096      	b.n	80122d2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d110      	bne.n	80121cc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d009      	beq.n	80121c4 <xQueueSemaphoreTake+0xf4>
 80121b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b4:	f383 8811 	msr	BASEPRI, r3
 80121b8:	f3bf 8f6f 	isb	sy
 80121bc:	f3bf 8f4f 	dsb	sy
 80121c0:	617b      	str	r3, [r7, #20]
 80121c2:	e7fe      	b.n	80121c2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80121c4:	f7ff f970 	bl	80114a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80121c8:	2300      	movs	r3, #0
 80121ca:	e082      	b.n	80122d2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80121cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d106      	bne.n	80121e0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80121d2:	f107 030c 	add.w	r3, r7, #12
 80121d6:	4618      	mov	r0, r3
 80121d8:	f000 fffa 	bl	80131d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80121dc:	2301      	movs	r3, #1
 80121de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80121e0:	f7ff f962 	bl	80114a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80121e4:	f000 fd08 	bl	8012bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80121e8:	f7ff f930 	bl	801144c <vPortEnterCritical>
 80121ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80121f2:	b25b      	sxtb	r3, r3
 80121f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121f8:	d103      	bne.n	8012202 <xQueueSemaphoreTake+0x132>
 80121fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fc:	2200      	movs	r2, #0
 80121fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012208:	b25b      	sxtb	r3, r3
 801220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801220e:	d103      	bne.n	8012218 <xQueueSemaphoreTake+0x148>
 8012210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012212:	2200      	movs	r2, #0
 8012214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012218:	f7ff f946 	bl	80114a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801221c:	463a      	mov	r2, r7
 801221e:	f107 030c 	add.w	r3, r7, #12
 8012222:	4611      	mov	r1, r2
 8012224:	4618      	mov	r0, r3
 8012226:	f000 ffe9 	bl	80131fc <xTaskCheckForTimeOut>
 801222a:	4603      	mov	r3, r0
 801222c:	2b00      	cmp	r3, #0
 801222e:	d132      	bne.n	8012296 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012232:	f000 f9ee 	bl	8012612 <prvIsQueueEmpty>
 8012236:	4603      	mov	r3, r0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d026      	beq.n	801228a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d109      	bne.n	8012258 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012244:	f7ff f902 	bl	801144c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801224a:	689b      	ldr	r3, [r3, #8]
 801224c:	4618      	mov	r0, r3
 801224e:	f001 f967 	bl	8013520 <xTaskPriorityInherit>
 8012252:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012254:	f7ff f928 	bl	80114a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801225a:	3324      	adds	r3, #36	; 0x24
 801225c:	683a      	ldr	r2, [r7, #0]
 801225e:	4611      	mov	r1, r2
 8012260:	4618      	mov	r0, r3
 8012262:	f000 ff03 	bl	801306c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012266:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012268:	f000 f981 	bl	801256e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801226c:	f000 fd0a 	bl	8012c84 <xTaskResumeAll>
 8012270:	4603      	mov	r3, r0
 8012272:	2b00      	cmp	r3, #0
 8012274:	f47f af69 	bne.w	801214a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8012278:	4b18      	ldr	r3, [pc, #96]	; (80122dc <xQueueSemaphoreTake+0x20c>)
 801227a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801227e:	601a      	str	r2, [r3, #0]
 8012280:	f3bf 8f4f 	dsb	sy
 8012284:	f3bf 8f6f 	isb	sy
 8012288:	e75f      	b.n	801214a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801228a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801228c:	f000 f96f 	bl	801256e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012290:	f000 fcf8 	bl	8012c84 <xTaskResumeAll>
 8012294:	e759      	b.n	801214a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012298:	f000 f969 	bl	801256e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801229c:	f000 fcf2 	bl	8012c84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80122a2:	f000 f9b6 	bl	8012612 <prvIsQueueEmpty>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	f43f af4e 	beq.w	801214a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80122ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d00d      	beq.n	80122d0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80122b4:	f7ff f8ca 	bl	801144c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80122b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80122ba:	f000 f8b0 	bl	801241e <prvGetDisinheritPriorityAfterTimeout>
 80122be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80122c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c2:	689b      	ldr	r3, [r3, #8]
 80122c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80122c6:	4618      	mov	r0, r3
 80122c8:	f001 f9fe 	bl	80136c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80122cc:	f7ff f8ec 	bl	80114a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80122d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3738      	adds	r7, #56	; 0x38
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	e000ed04 	.word	0xe000ed04

080122e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b08e      	sub	sp, #56	; 0x38
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	60f8      	str	r0, [r7, #12]
 80122e8:	60b9      	str	r1, [r7, #8]
 80122ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80122f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d109      	bne.n	801230a <xQueueReceiveFromISR+0x2a>
 80122f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122fa:	f383 8811 	msr	BASEPRI, r3
 80122fe:	f3bf 8f6f 	isb	sy
 8012302:	f3bf 8f4f 	dsb	sy
 8012306:	623b      	str	r3, [r7, #32]
 8012308:	e7fe      	b.n	8012308 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d103      	bne.n	8012318 <xQueueReceiveFromISR+0x38>
 8012310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012314:	2b00      	cmp	r3, #0
 8012316:	d101      	bne.n	801231c <xQueueReceiveFromISR+0x3c>
 8012318:	2301      	movs	r3, #1
 801231a:	e000      	b.n	801231e <xQueueReceiveFromISR+0x3e>
 801231c:	2300      	movs	r3, #0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d109      	bne.n	8012336 <xQueueReceiveFromISR+0x56>
 8012322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012326:	f383 8811 	msr	BASEPRI, r3
 801232a:	f3bf 8f6f 	isb	sy
 801232e:	f3bf 8f4f 	dsb	sy
 8012332:	61fb      	str	r3, [r7, #28]
 8012334:	e7fe      	b.n	8012334 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012336:	f7ff f941 	bl	80115bc <vPortValidateInterruptPriority>
	__asm volatile
 801233a:	f3ef 8211 	mrs	r2, BASEPRI
 801233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012342:	f383 8811 	msr	BASEPRI, r3
 8012346:	f3bf 8f6f 	isb	sy
 801234a:	f3bf 8f4f 	dsb	sy
 801234e:	61ba      	str	r2, [r7, #24]
 8012350:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012352:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012354:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801235a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801235e:	2b00      	cmp	r3, #0
 8012360:	d02f      	beq.n	80123c2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801236c:	68b9      	ldr	r1, [r7, #8]
 801236e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012370:	f000 f8d7 	bl	8012522 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012376:	1e5a      	subs	r2, r3, #1
 8012378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801237c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012384:	d112      	bne.n	80123ac <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012388:	691b      	ldr	r3, [r3, #16]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d016      	beq.n	80123bc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012390:	3310      	adds	r3, #16
 8012392:	4618      	mov	r0, r3
 8012394:	f000 feb8 	bl	8013108 <xTaskRemoveFromEventList>
 8012398:	4603      	mov	r3, r0
 801239a:	2b00      	cmp	r3, #0
 801239c:	d00e      	beq.n	80123bc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d00b      	beq.n	80123bc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2201      	movs	r2, #1
 80123a8:	601a      	str	r2, [r3, #0]
 80123aa:	e007      	b.n	80123bc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80123ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123b0:	3301      	adds	r3, #1
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	b25a      	sxtb	r2, r3
 80123b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80123bc:	2301      	movs	r3, #1
 80123be:	637b      	str	r3, [r7, #52]	; 0x34
 80123c0:	e001      	b.n	80123c6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80123c2:	2300      	movs	r3, #0
 80123c4:	637b      	str	r3, [r7, #52]	; 0x34
 80123c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80123d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3738      	adds	r7, #56	; 0x38
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}

080123da <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80123da:	b580      	push	{r7, lr}
 80123dc:	b084      	sub	sp, #16
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d109      	bne.n	8012400 <vQueueDelete+0x26>
	__asm volatile
 80123ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f0:	f383 8811 	msr	BASEPRI, r3
 80123f4:	f3bf 8f6f 	isb	sy
 80123f8:	f3bf 8f4f 	dsb	sy
 80123fc:	60bb      	str	r3, [r7, #8]
 80123fe:	e7fe      	b.n	80123fe <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012400:	68f8      	ldr	r0, [r7, #12]
 8012402:	f000 f95d 	bl	80126c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801240c:	2b00      	cmp	r3, #0
 801240e:	d102      	bne.n	8012416 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8012410:	68f8      	ldr	r0, [r7, #12]
 8012412:	f7fe fd2d 	bl	8010e70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012416:	bf00      	nop
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}

0801241e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801241e:	b480      	push	{r7}
 8012420:	b085      	sub	sp, #20
 8012422:	af00      	add	r7, sp, #0
 8012424:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801242a:	2b00      	cmp	r3, #0
 801242c:	d006      	beq.n	801243c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012438:	60fb      	str	r3, [r7, #12]
 801243a:	e001      	b.n	8012440 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801243c:	2300      	movs	r3, #0
 801243e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012440:	68fb      	ldr	r3, [r7, #12]
	}
 8012442:	4618      	mov	r0, r3
 8012444:	3714      	adds	r7, #20
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr

0801244e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b086      	sub	sp, #24
 8012452:	af00      	add	r7, sp, #0
 8012454:	60f8      	str	r0, [r7, #12]
 8012456:	60b9      	str	r1, [r7, #8]
 8012458:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801245a:	2300      	movs	r3, #0
 801245c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012462:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012468:	2b00      	cmp	r3, #0
 801246a:	d10d      	bne.n	8012488 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d14d      	bne.n	8012510 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	689b      	ldr	r3, [r3, #8]
 8012478:	4618      	mov	r0, r3
 801247a:	f001 f8b9 	bl	80135f0 <xTaskPriorityDisinherit>
 801247e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	2200      	movs	r2, #0
 8012484:	609a      	str	r2, [r3, #8]
 8012486:	e043      	b.n	8012510 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d119      	bne.n	80124c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	6858      	ldr	r0, [r3, #4]
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012496:	461a      	mov	r2, r3
 8012498:	68b9      	ldr	r1, [r7, #8]
 801249a:	f007 fda7 	bl	8019fec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	685a      	ldr	r2, [r3, #4]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124a6:	441a      	add	r2, r3
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	685a      	ldr	r2, [r3, #4]
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	689b      	ldr	r3, [r3, #8]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d32b      	bcc.n	8012510 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681a      	ldr	r2, [r3, #0]
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	605a      	str	r2, [r3, #4]
 80124c0:	e026      	b.n	8012510 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	68d8      	ldr	r0, [r3, #12]
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124ca:	461a      	mov	r2, r3
 80124cc:	68b9      	ldr	r1, [r7, #8]
 80124ce:	f007 fd8d 	bl	8019fec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	68da      	ldr	r2, [r3, #12]
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124da:	425b      	negs	r3, r3
 80124dc:	441a      	add	r2, r3
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	68da      	ldr	r2, [r3, #12]
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d207      	bcs.n	80124fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	689a      	ldr	r2, [r3, #8]
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124f6:	425b      	negs	r3, r3
 80124f8:	441a      	add	r2, r3
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2b02      	cmp	r3, #2
 8012502:	d105      	bne.n	8012510 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d002      	beq.n	8012510 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	3b01      	subs	r3, #1
 801250e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	1c5a      	adds	r2, r3, #1
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012518:	697b      	ldr	r3, [r7, #20]
}
 801251a:	4618      	mov	r0, r3
 801251c:	3718      	adds	r7, #24
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012522:	b580      	push	{r7, lr}
 8012524:	b082      	sub	sp, #8
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
 801252a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012530:	2b00      	cmp	r3, #0
 8012532:	d018      	beq.n	8012566 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	68da      	ldr	r2, [r3, #12]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801253c:	441a      	add	r2, r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	68da      	ldr	r2, [r3, #12]
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	689b      	ldr	r3, [r3, #8]
 801254a:	429a      	cmp	r2, r3
 801254c:	d303      	bcc.n	8012556 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	68d9      	ldr	r1, [r3, #12]
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801255e:	461a      	mov	r2, r3
 8012560:	6838      	ldr	r0, [r7, #0]
 8012562:	f007 fd43 	bl	8019fec <memcpy>
	}
}
 8012566:	bf00      	nop
 8012568:	3708      	adds	r7, #8
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801256e:	b580      	push	{r7, lr}
 8012570:	b084      	sub	sp, #16
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012576:	f7fe ff69 	bl	801144c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012580:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012582:	e011      	b.n	80125a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012588:	2b00      	cmp	r3, #0
 801258a:	d012      	beq.n	80125b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	3324      	adds	r3, #36	; 0x24
 8012590:	4618      	mov	r0, r3
 8012592:	f000 fdb9 	bl	8013108 <xTaskRemoveFromEventList>
 8012596:	4603      	mov	r3, r0
 8012598:	2b00      	cmp	r3, #0
 801259a:	d001      	beq.n	80125a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801259c:	f000 fe8e 	bl	80132bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80125a0:	7bfb      	ldrb	r3, [r7, #15]
 80125a2:	3b01      	subs	r3, #1
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80125a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	dce9      	bgt.n	8012584 <prvUnlockQueue+0x16>
 80125b0:	e000      	b.n	80125b4 <prvUnlockQueue+0x46>
					break;
 80125b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	22ff      	movs	r2, #255	; 0xff
 80125b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80125bc:	f7fe ff74 	bl	80114a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80125c0:	f7fe ff44 	bl	801144c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80125ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80125cc:	e011      	b.n	80125f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	691b      	ldr	r3, [r3, #16]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d012      	beq.n	80125fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	3310      	adds	r3, #16
 80125da:	4618      	mov	r0, r3
 80125dc:	f000 fd94 	bl	8013108 <xTaskRemoveFromEventList>
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d001      	beq.n	80125ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80125e6:	f000 fe69 	bl	80132bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80125ea:	7bbb      	ldrb	r3, [r7, #14]
 80125ec:	3b01      	subs	r3, #1
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80125f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	dce9      	bgt.n	80125ce <prvUnlockQueue+0x60>
 80125fa:	e000      	b.n	80125fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80125fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	22ff      	movs	r2, #255	; 0xff
 8012602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012606:	f7fe ff4f 	bl	80114a8 <vPortExitCritical>
}
 801260a:	bf00      	nop
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}

08012612 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012612:	b580      	push	{r7, lr}
 8012614:	b084      	sub	sp, #16
 8012616:	af00      	add	r7, sp, #0
 8012618:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801261a:	f7fe ff17 	bl	801144c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012622:	2b00      	cmp	r3, #0
 8012624:	d102      	bne.n	801262c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012626:	2301      	movs	r3, #1
 8012628:	60fb      	str	r3, [r7, #12]
 801262a:	e001      	b.n	8012630 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801262c:	2300      	movs	r3, #0
 801262e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012630:	f7fe ff3a 	bl	80114a8 <vPortExitCritical>

	return xReturn;
 8012634:	68fb      	ldr	r3, [r7, #12]
}
 8012636:	4618      	mov	r0, r3
 8012638:	3710      	adds	r7, #16
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}

0801263e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801263e:	b580      	push	{r7, lr}
 8012640:	b084      	sub	sp, #16
 8012642:	af00      	add	r7, sp, #0
 8012644:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012646:	f7fe ff01 	bl	801144c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012652:	429a      	cmp	r2, r3
 8012654:	d102      	bne.n	801265c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012656:	2301      	movs	r3, #1
 8012658:	60fb      	str	r3, [r7, #12]
 801265a:	e001      	b.n	8012660 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801265c:	2300      	movs	r3, #0
 801265e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012660:	f7fe ff22 	bl	80114a8 <vPortExitCritical>

	return xReturn;
 8012664:	68fb      	ldr	r3, [r7, #12]
}
 8012666:	4618      	mov	r0, r3
 8012668:	3710      	adds	r7, #16
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
	...

08012670 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012670:	b480      	push	{r7}
 8012672:	b085      	sub	sp, #20
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801267a:	2300      	movs	r3, #0
 801267c:	60fb      	str	r3, [r7, #12]
 801267e:	e014      	b.n	80126aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012680:	4a0e      	ldr	r2, [pc, #56]	; (80126bc <vQueueAddToRegistry+0x4c>)
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d10b      	bne.n	80126a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801268c:	490b      	ldr	r1, [pc, #44]	; (80126bc <vQueueAddToRegistry+0x4c>)
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	683a      	ldr	r2, [r7, #0]
 8012692:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012696:	4a09      	ldr	r2, [pc, #36]	; (80126bc <vQueueAddToRegistry+0x4c>)
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	00db      	lsls	r3, r3, #3
 801269c:	4413      	add	r3, r2
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80126a2:	e005      	b.n	80126b0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	3301      	adds	r3, #1
 80126a8:	60fb      	str	r3, [r7, #12]
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	2b0b      	cmp	r3, #11
 80126ae:	d9e7      	bls.n	8012680 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80126b0:	bf00      	nop
 80126b2:	3714      	adds	r7, #20
 80126b4:	46bd      	mov	sp, r7
 80126b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ba:	4770      	bx	lr
 80126bc:	20028948 	.word	0x20028948

080126c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80126c0:	b480      	push	{r7}
 80126c2:	b085      	sub	sp, #20
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80126c8:	2300      	movs	r3, #0
 80126ca:	60fb      	str	r3, [r7, #12]
 80126cc:	e016      	b.n	80126fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80126ce:	4a10      	ldr	r2, [pc, #64]	; (8012710 <vQueueUnregisterQueue+0x50>)
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	00db      	lsls	r3, r3, #3
 80126d4:	4413      	add	r3, r2
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d10b      	bne.n	80126f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80126de:	4a0c      	ldr	r2, [pc, #48]	; (8012710 <vQueueUnregisterQueue+0x50>)
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	2100      	movs	r1, #0
 80126e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80126e8:	4a09      	ldr	r2, [pc, #36]	; (8012710 <vQueueUnregisterQueue+0x50>)
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	00db      	lsls	r3, r3, #3
 80126ee:	4413      	add	r3, r2
 80126f0:	2200      	movs	r2, #0
 80126f2:	605a      	str	r2, [r3, #4]
				break;
 80126f4:	e005      	b.n	8012702 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	3301      	adds	r3, #1
 80126fa:	60fb      	str	r3, [r7, #12]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	2b0b      	cmp	r3, #11
 8012700:	d9e5      	bls.n	80126ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012702:	bf00      	nop
 8012704:	3714      	adds	r7, #20
 8012706:	46bd      	mov	sp, r7
 8012708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270c:	4770      	bx	lr
 801270e:	bf00      	nop
 8012710:	20028948 	.word	0x20028948

08012714 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012714:	b580      	push	{r7, lr}
 8012716:	b086      	sub	sp, #24
 8012718:	af00      	add	r7, sp, #0
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012724:	f7fe fe92 	bl	801144c <vPortEnterCritical>
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801272e:	b25b      	sxtb	r3, r3
 8012730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012734:	d103      	bne.n	801273e <vQueueWaitForMessageRestricted+0x2a>
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	2200      	movs	r2, #0
 801273a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012744:	b25b      	sxtb	r3, r3
 8012746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801274a:	d103      	bne.n	8012754 <vQueueWaitForMessageRestricted+0x40>
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	2200      	movs	r2, #0
 8012750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012754:	f7fe fea8 	bl	80114a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801275c:	2b00      	cmp	r3, #0
 801275e:	d106      	bne.n	801276e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	3324      	adds	r3, #36	; 0x24
 8012764:	687a      	ldr	r2, [r7, #4]
 8012766:	68b9      	ldr	r1, [r7, #8]
 8012768:	4618      	mov	r0, r3
 801276a:	f000 fca3 	bl	80130b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801276e:	6978      	ldr	r0, [r7, #20]
 8012770:	f7ff fefd 	bl	801256e <prvUnlockQueue>
	}
 8012774:	bf00      	nop
 8012776:	3718      	adds	r7, #24
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801277c:	b580      	push	{r7, lr}
 801277e:	b08e      	sub	sp, #56	; 0x38
 8012780:	af04      	add	r7, sp, #16
 8012782:	60f8      	str	r0, [r7, #12]
 8012784:	60b9      	str	r1, [r7, #8]
 8012786:	607a      	str	r2, [r7, #4]
 8012788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801278a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801278c:	2b00      	cmp	r3, #0
 801278e:	d109      	bne.n	80127a4 <xTaskCreateStatic+0x28>
 8012790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012794:	f383 8811 	msr	BASEPRI, r3
 8012798:	f3bf 8f6f 	isb	sy
 801279c:	f3bf 8f4f 	dsb	sy
 80127a0:	623b      	str	r3, [r7, #32]
 80127a2:	e7fe      	b.n	80127a2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80127a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d109      	bne.n	80127be <xTaskCreateStatic+0x42>
 80127aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ae:	f383 8811 	msr	BASEPRI, r3
 80127b2:	f3bf 8f6f 	isb	sy
 80127b6:	f3bf 8f4f 	dsb	sy
 80127ba:	61fb      	str	r3, [r7, #28]
 80127bc:	e7fe      	b.n	80127bc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80127be:	2364      	movs	r3, #100	; 0x64
 80127c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	2b64      	cmp	r3, #100	; 0x64
 80127c6:	d009      	beq.n	80127dc <xTaskCreateStatic+0x60>
 80127c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127cc:	f383 8811 	msr	BASEPRI, r3
 80127d0:	f3bf 8f6f 	isb	sy
 80127d4:	f3bf 8f4f 	dsb	sy
 80127d8:	61bb      	str	r3, [r7, #24]
 80127da:	e7fe      	b.n	80127da <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80127dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80127de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d01e      	beq.n	8012822 <xTaskCreateStatic+0xa6>
 80127e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d01b      	beq.n	8012822 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80127ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80127ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80127f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80127f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f6:	2202      	movs	r2, #2
 80127f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80127fc:	2300      	movs	r3, #0
 80127fe:	9303      	str	r3, [sp, #12]
 8012800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012802:	9302      	str	r3, [sp, #8]
 8012804:	f107 0314 	add.w	r3, r7, #20
 8012808:	9301      	str	r3, [sp, #4]
 801280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801280c:	9300      	str	r3, [sp, #0]
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	68b9      	ldr	r1, [r7, #8]
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f000 f850 	bl	80128ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801281a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801281c:	f000 f8e2 	bl	80129e4 <prvAddNewTaskToReadyList>
 8012820:	e001      	b.n	8012826 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8012822:	2300      	movs	r3, #0
 8012824:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012826:	697b      	ldr	r3, [r7, #20]
	}
 8012828:	4618      	mov	r0, r3
 801282a:	3728      	adds	r7, #40	; 0x28
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012830:	b580      	push	{r7, lr}
 8012832:	b08c      	sub	sp, #48	; 0x30
 8012834:	af04      	add	r7, sp, #16
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	603b      	str	r3, [r7, #0]
 801283c:	4613      	mov	r3, r2
 801283e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012840:	88fb      	ldrh	r3, [r7, #6]
 8012842:	009b      	lsls	r3, r3, #2
 8012844:	4618      	mov	r0, r3
 8012846:	f7fe fa4d 	bl	8010ce4 <pvPortMalloc>
 801284a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d00e      	beq.n	8012870 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012852:	2064      	movs	r0, #100	; 0x64
 8012854:	f7fe fa46 	bl	8010ce4 <pvPortMalloc>
 8012858:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801285a:	69fb      	ldr	r3, [r7, #28]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d003      	beq.n	8012868 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	697a      	ldr	r2, [r7, #20]
 8012864:	631a      	str	r2, [r3, #48]	; 0x30
 8012866:	e005      	b.n	8012874 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012868:	6978      	ldr	r0, [r7, #20]
 801286a:	f7fe fb01 	bl	8010e70 <vPortFree>
 801286e:	e001      	b.n	8012874 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012870:	2300      	movs	r3, #0
 8012872:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012874:	69fb      	ldr	r3, [r7, #28]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d017      	beq.n	80128aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801287a:	69fb      	ldr	r3, [r7, #28]
 801287c:	2200      	movs	r2, #0
 801287e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012882:	88fa      	ldrh	r2, [r7, #6]
 8012884:	2300      	movs	r3, #0
 8012886:	9303      	str	r3, [sp, #12]
 8012888:	69fb      	ldr	r3, [r7, #28]
 801288a:	9302      	str	r3, [sp, #8]
 801288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288e:	9301      	str	r3, [sp, #4]
 8012890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012892:	9300      	str	r3, [sp, #0]
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	68b9      	ldr	r1, [r7, #8]
 8012898:	68f8      	ldr	r0, [r7, #12]
 801289a:	f000 f80e 	bl	80128ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801289e:	69f8      	ldr	r0, [r7, #28]
 80128a0:	f000 f8a0 	bl	80129e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80128a4:	2301      	movs	r3, #1
 80128a6:	61bb      	str	r3, [r7, #24]
 80128a8:	e002      	b.n	80128b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80128aa:	f04f 33ff 	mov.w	r3, #4294967295
 80128ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80128b0:	69bb      	ldr	r3, [r7, #24]
	}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3720      	adds	r7, #32
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}

080128ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80128ba:	b580      	push	{r7, lr}
 80128bc:	b088      	sub	sp, #32
 80128be:	af00      	add	r7, sp, #0
 80128c0:	60f8      	str	r0, [r7, #12]
 80128c2:	60b9      	str	r1, [r7, #8]
 80128c4:	607a      	str	r2, [r7, #4]
 80128c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80128c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	009b      	lsls	r3, r3, #2
 80128d0:	461a      	mov	r2, r3
 80128d2:	21a5      	movs	r1, #165	; 0xa5
 80128d4:	f007 fb95 	bl	801a002 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80128d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80128e2:	3b01      	subs	r3, #1
 80128e4:	009b      	lsls	r3, r3, #2
 80128e6:	4413      	add	r3, r2
 80128e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	f023 0307 	bic.w	r3, r3, #7
 80128f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80128f2:	69bb      	ldr	r3, [r7, #24]
 80128f4:	f003 0307 	and.w	r3, r3, #7
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d009      	beq.n	8012910 <prvInitialiseNewTask+0x56>
 80128fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012900:	f383 8811 	msr	BASEPRI, r3
 8012904:	f3bf 8f6f 	isb	sy
 8012908:	f3bf 8f4f 	dsb	sy
 801290c:	617b      	str	r3, [r7, #20]
 801290e:	e7fe      	b.n	801290e <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8012910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012912:	69ba      	ldr	r2, [r7, #24]
 8012914:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d01f      	beq.n	801295c <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801291c:	2300      	movs	r3, #0
 801291e:	61fb      	str	r3, [r7, #28]
 8012920:	e012      	b.n	8012948 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012922:	68ba      	ldr	r2, [r7, #8]
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	4413      	add	r3, r2
 8012928:	7819      	ldrb	r1, [r3, #0]
 801292a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	4413      	add	r3, r2
 8012930:	3334      	adds	r3, #52	; 0x34
 8012932:	460a      	mov	r2, r1
 8012934:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	4413      	add	r3, r2
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d006      	beq.n	8012950 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012942:	69fb      	ldr	r3, [r7, #28]
 8012944:	3301      	adds	r3, #1
 8012946:	61fb      	str	r3, [r7, #28]
 8012948:	69fb      	ldr	r3, [r7, #28]
 801294a:	2b0f      	cmp	r3, #15
 801294c:	d9e9      	bls.n	8012922 <prvInitialiseNewTask+0x68>
 801294e:	e000      	b.n	8012952 <prvInitialiseNewTask+0x98>
			{
				break;
 8012950:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012954:	2200      	movs	r2, #0
 8012956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801295a:	e003      	b.n	8012964 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801295e:	2200      	movs	r2, #0
 8012960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012966:	2b37      	cmp	r3, #55	; 0x37
 8012968:	d901      	bls.n	801296e <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801296a:	2337      	movs	r3, #55	; 0x37
 801296c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012972:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012978:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 801297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801297c:	2200      	movs	r2, #0
 801297e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012982:	3304      	adds	r3, #4
 8012984:	4618      	mov	r0, r3
 8012986:	f7fe fba9 	bl	80110dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298c:	3318      	adds	r3, #24
 801298e:	4618      	mov	r0, r3
 8012990:	f7fe fba4 	bl	80110dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012998:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80129a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80129a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80129aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ac:	2200      	movs	r2, #0
 80129ae:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80129b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b2:	2200      	movs	r2, #0
 80129b4:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80129b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b8:	2200      	movs	r2, #0
 80129ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80129be:	683a      	ldr	r2, [r7, #0]
 80129c0:	68f9      	ldr	r1, [r7, #12]
 80129c2:	69b8      	ldr	r0, [r7, #24]
 80129c4:	f7fe fc1e 	bl	8011204 <pxPortInitialiseStack>
 80129c8:	4602      	mov	r2, r0
 80129ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80129ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d002      	beq.n	80129da <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80129d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80129da:	bf00      	nop
 80129dc:	3720      	adds	r7, #32
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}
	...

080129e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b082      	sub	sp, #8
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80129ec:	f7fe fd2e 	bl	801144c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80129f0:	4b2d      	ldr	r3, [pc, #180]	; (8012aa8 <prvAddNewTaskToReadyList+0xc4>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	3301      	adds	r3, #1
 80129f6:	4a2c      	ldr	r2, [pc, #176]	; (8012aa8 <prvAddNewTaskToReadyList+0xc4>)
 80129f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80129fa:	4b2c      	ldr	r3, [pc, #176]	; (8012aac <prvAddNewTaskToReadyList+0xc8>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d109      	bne.n	8012a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012a02:	4a2a      	ldr	r2, [pc, #168]	; (8012aac <prvAddNewTaskToReadyList+0xc8>)
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012a08:	4b27      	ldr	r3, [pc, #156]	; (8012aa8 <prvAddNewTaskToReadyList+0xc4>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d110      	bne.n	8012a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012a10:	f000 fc9e 	bl	8013350 <prvInitialiseTaskLists>
 8012a14:	e00d      	b.n	8012a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012a16:	4b26      	ldr	r3, [pc, #152]	; (8012ab0 <prvAddNewTaskToReadyList+0xcc>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d109      	bne.n	8012a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012a1e:	4b23      	ldr	r3, [pc, #140]	; (8012aac <prvAddNewTaskToReadyList+0xc8>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d802      	bhi.n	8012a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012a2c:	4a1f      	ldr	r2, [pc, #124]	; (8012aac <prvAddNewTaskToReadyList+0xc8>)
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012a32:	4b20      	ldr	r3, [pc, #128]	; (8012ab4 <prvAddNewTaskToReadyList+0xd0>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	3301      	adds	r3, #1
 8012a38:	4a1e      	ldr	r2, [pc, #120]	; (8012ab4 <prvAddNewTaskToReadyList+0xd0>)
 8012a3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012a3c:	4b1d      	ldr	r3, [pc, #116]	; (8012ab4 <prvAddNewTaskToReadyList+0xd0>)
 8012a3e:	681a      	ldr	r2, [r3, #0]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a48:	4b1b      	ldr	r3, [pc, #108]	; (8012ab8 <prvAddNewTaskToReadyList+0xd4>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d903      	bls.n	8012a58 <prvAddNewTaskToReadyList+0x74>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a54:	4a18      	ldr	r2, [pc, #96]	; (8012ab8 <prvAddNewTaskToReadyList+0xd4>)
 8012a56:	6013      	str	r3, [r2, #0]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a5c:	4613      	mov	r3, r2
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	4413      	add	r3, r2
 8012a62:	009b      	lsls	r3, r3, #2
 8012a64:	4a15      	ldr	r2, [pc, #84]	; (8012abc <prvAddNewTaskToReadyList+0xd8>)
 8012a66:	441a      	add	r2, r3
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	3304      	adds	r3, #4
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	4610      	mov	r0, r2
 8012a70:	f7fe fb41 	bl	80110f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012a74:	f7fe fd18 	bl	80114a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012a78:	4b0d      	ldr	r3, [pc, #52]	; (8012ab0 <prvAddNewTaskToReadyList+0xcc>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d00e      	beq.n	8012a9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012a80:	4b0a      	ldr	r3, [pc, #40]	; (8012aac <prvAddNewTaskToReadyList+0xc8>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d207      	bcs.n	8012a9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012a8e:	4b0c      	ldr	r3, [pc, #48]	; (8012ac0 <prvAddNewTaskToReadyList+0xdc>)
 8012a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a94:	601a      	str	r2, [r3, #0]
 8012a96:	f3bf 8f4f 	dsb	sy
 8012a9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a9e:	bf00      	nop
 8012aa0:	3708      	adds	r7, #8
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	20027450 	.word	0x20027450
 8012aac:	20026f7c 	.word	0x20026f7c
 8012ab0:	2002745c 	.word	0x2002745c
 8012ab4:	2002746c 	.word	0x2002746c
 8012ab8:	20027458 	.word	0x20027458
 8012abc:	20026f80 	.word	0x20026f80
 8012ac0:	e000ed04 	.word	0xe000ed04

08012ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b084      	sub	sp, #16
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012acc:	2300      	movs	r3, #0
 8012ace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d016      	beq.n	8012b04 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012ad6:	4b13      	ldr	r3, [pc, #76]	; (8012b24 <vTaskDelay+0x60>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d009      	beq.n	8012af2 <vTaskDelay+0x2e>
 8012ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae2:	f383 8811 	msr	BASEPRI, r3
 8012ae6:	f3bf 8f6f 	isb	sy
 8012aea:	f3bf 8f4f 	dsb	sy
 8012aee:	60bb      	str	r3, [r7, #8]
 8012af0:	e7fe      	b.n	8012af0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012af2:	f000 f881 	bl	8012bf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012af6:	2100      	movs	r1, #0
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f001 f861 	bl	8013bc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012afe:	f000 f8c1 	bl	8012c84 <xTaskResumeAll>
 8012b02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d107      	bne.n	8012b1a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8012b0a:	4b07      	ldr	r3, [pc, #28]	; (8012b28 <vTaskDelay+0x64>)
 8012b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b10:	601a      	str	r2, [r3, #0]
 8012b12:	f3bf 8f4f 	dsb	sy
 8012b16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b1a:	bf00      	nop
 8012b1c:	3710      	adds	r7, #16
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	20027478 	.word	0x20027478
 8012b28:	e000ed04 	.word	0xe000ed04

08012b2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b08a      	sub	sp, #40	; 0x28
 8012b30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012b32:	2300      	movs	r3, #0
 8012b34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012b36:	2300      	movs	r3, #0
 8012b38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012b3a:	463a      	mov	r2, r7
 8012b3c:	1d39      	adds	r1, r7, #4
 8012b3e:	f107 0308 	add.w	r3, r7, #8
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7fe f89a 	bl	8010c7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012b48:	6839      	ldr	r1, [r7, #0]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	68ba      	ldr	r2, [r7, #8]
 8012b4e:	9202      	str	r2, [sp, #8]
 8012b50:	9301      	str	r3, [sp, #4]
 8012b52:	2300      	movs	r3, #0
 8012b54:	9300      	str	r3, [sp, #0]
 8012b56:	2300      	movs	r3, #0
 8012b58:	460a      	mov	r2, r1
 8012b5a:	4921      	ldr	r1, [pc, #132]	; (8012be0 <vTaskStartScheduler+0xb4>)
 8012b5c:	4821      	ldr	r0, [pc, #132]	; (8012be4 <vTaskStartScheduler+0xb8>)
 8012b5e:	f7ff fe0d 	bl	801277c <xTaskCreateStatic>
 8012b62:	4602      	mov	r2, r0
 8012b64:	4b20      	ldr	r3, [pc, #128]	; (8012be8 <vTaskStartScheduler+0xbc>)
 8012b66:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012b68:	4b1f      	ldr	r3, [pc, #124]	; (8012be8 <vTaskStartScheduler+0xbc>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d002      	beq.n	8012b76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012b70:	2301      	movs	r3, #1
 8012b72:	617b      	str	r3, [r7, #20]
 8012b74:	e001      	b.n	8012b7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012b76:	2300      	movs	r3, #0
 8012b78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	2b01      	cmp	r3, #1
 8012b7e:	d102      	bne.n	8012b86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012b80:	f001 f872 	bl	8013c68 <xTimerCreateTimerTask>
 8012b84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	2b01      	cmp	r3, #1
 8012b8a:	d117      	bne.n	8012bbc <vTaskStartScheduler+0x90>
 8012b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b90:	f383 8811 	msr	BASEPRI, r3
 8012b94:	f3bf 8f6f 	isb	sy
 8012b98:	f3bf 8f4f 	dsb	sy
 8012b9c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012b9e:	4b13      	ldr	r3, [pc, #76]	; (8012bec <vTaskStartScheduler+0xc0>)
 8012ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ba4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012ba6:	4b12      	ldr	r3, [pc, #72]	; (8012bf0 <vTaskStartScheduler+0xc4>)
 8012ba8:	2201      	movs	r2, #1
 8012baa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012bac:	4b11      	ldr	r3, [pc, #68]	; (8012bf4 <vTaskStartScheduler+0xc8>)
 8012bae:	2200      	movs	r2, #0
 8012bb0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8012bb2:	f7ee fb3e 	bl	8001232 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012bb6:	f7fe fbab 	bl	8011310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012bba:	e00d      	b.n	8012bd8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012bbc:	697b      	ldr	r3, [r7, #20]
 8012bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bc2:	d109      	bne.n	8012bd8 <vTaskStartScheduler+0xac>
 8012bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc8:	f383 8811 	msr	BASEPRI, r3
 8012bcc:	f3bf 8f6f 	isb	sy
 8012bd0:	f3bf 8f4f 	dsb	sy
 8012bd4:	60fb      	str	r3, [r7, #12]
 8012bd6:	e7fe      	b.n	8012bd6 <vTaskStartScheduler+0xaa>
}
 8012bd8:	bf00      	nop
 8012bda:	3718      	adds	r7, #24
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	0801b3d0 	.word	0x0801b3d0
 8012be4:	080132d5 	.word	0x080132d5
 8012be8:	20027474 	.word	0x20027474
 8012bec:	20027470 	.word	0x20027470
 8012bf0:	2002745c 	.word	0x2002745c
 8012bf4:	20027454 	.word	0x20027454

08012bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012bf8:	b480      	push	{r7}
 8012bfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012bfc:	4b04      	ldr	r3, [pc, #16]	; (8012c10 <vTaskSuspendAll+0x18>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	3301      	adds	r3, #1
 8012c02:	4a03      	ldr	r2, [pc, #12]	; (8012c10 <vTaskSuspendAll+0x18>)
 8012c04:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012c06:	bf00      	nop
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr
 8012c10:	20027478 	.word	0x20027478

08012c14 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8012c14:	b480      	push	{r7}
 8012c16:	b083      	sub	sp, #12
 8012c18:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8012c1e:	4b14      	ldr	r3, [pc, #80]	; (8012c70 <prvGetExpectedIdleTime+0x5c>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d001      	beq.n	8012c2a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8012c26:	2301      	movs	r3, #1
 8012c28:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8012c2a:	4b12      	ldr	r3, [pc, #72]	; (8012c74 <prvGetExpectedIdleTime+0x60>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d002      	beq.n	8012c3a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8012c34:	2300      	movs	r3, #0
 8012c36:	607b      	str	r3, [r7, #4]
 8012c38:	e012      	b.n	8012c60 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8012c3a:	4b0f      	ldr	r3, [pc, #60]	; (8012c78 <prvGetExpectedIdleTime+0x64>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d902      	bls.n	8012c48 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8012c42:	2300      	movs	r3, #0
 8012c44:	607b      	str	r3, [r7, #4]
 8012c46:	e00b      	b.n	8012c60 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d002      	beq.n	8012c54 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	607b      	str	r3, [r7, #4]
 8012c52:	e005      	b.n	8012c60 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8012c54:	4b09      	ldr	r3, [pc, #36]	; (8012c7c <prvGetExpectedIdleTime+0x68>)
 8012c56:	681a      	ldr	r2, [r3, #0]
 8012c58:	4b09      	ldr	r3, [pc, #36]	; (8012c80 <prvGetExpectedIdleTime+0x6c>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	1ad3      	subs	r3, r2, r3
 8012c5e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8012c60:	687b      	ldr	r3, [r7, #4]
	}
 8012c62:	4618      	mov	r0, r3
 8012c64:	370c      	adds	r7, #12
 8012c66:	46bd      	mov	sp, r7
 8012c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6c:	4770      	bx	lr
 8012c6e:	bf00      	nop
 8012c70:	20027458 	.word	0x20027458
 8012c74:	20026f7c 	.word	0x20026f7c
 8012c78:	20026f80 	.word	0x20026f80
 8012c7c:	20027470 	.word	0x20027470
 8012c80:	20027454 	.word	0x20027454

08012c84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012c92:	4b41      	ldr	r3, [pc, #260]	; (8012d98 <xTaskResumeAll+0x114>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d109      	bne.n	8012cae <xTaskResumeAll+0x2a>
 8012c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c9e:	f383 8811 	msr	BASEPRI, r3
 8012ca2:	f3bf 8f6f 	isb	sy
 8012ca6:	f3bf 8f4f 	dsb	sy
 8012caa:	603b      	str	r3, [r7, #0]
 8012cac:	e7fe      	b.n	8012cac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012cae:	f7fe fbcd 	bl	801144c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012cb2:	4b39      	ldr	r3, [pc, #228]	; (8012d98 <xTaskResumeAll+0x114>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	3b01      	subs	r3, #1
 8012cb8:	4a37      	ldr	r2, [pc, #220]	; (8012d98 <xTaskResumeAll+0x114>)
 8012cba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012cbc:	4b36      	ldr	r3, [pc, #216]	; (8012d98 <xTaskResumeAll+0x114>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d162      	bne.n	8012d8a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012cc4:	4b35      	ldr	r3, [pc, #212]	; (8012d9c <xTaskResumeAll+0x118>)
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d05e      	beq.n	8012d8a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012ccc:	e02f      	b.n	8012d2e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cce:	4b34      	ldr	r3, [pc, #208]	; (8012da0 <xTaskResumeAll+0x11c>)
 8012cd0:	68db      	ldr	r3, [r3, #12]
 8012cd2:	68db      	ldr	r3, [r3, #12]
 8012cd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	3318      	adds	r3, #24
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7fe fa68 	bl	80111b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	3304      	adds	r3, #4
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f7fe fa63 	bl	80111b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cee:	4b2d      	ldr	r3, [pc, #180]	; (8012da4 <xTaskResumeAll+0x120>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d903      	bls.n	8012cfe <xTaskResumeAll+0x7a>
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cfa:	4a2a      	ldr	r2, [pc, #168]	; (8012da4 <xTaskResumeAll+0x120>)
 8012cfc:	6013      	str	r3, [r2, #0]
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d02:	4613      	mov	r3, r2
 8012d04:	009b      	lsls	r3, r3, #2
 8012d06:	4413      	add	r3, r2
 8012d08:	009b      	lsls	r3, r3, #2
 8012d0a:	4a27      	ldr	r2, [pc, #156]	; (8012da8 <xTaskResumeAll+0x124>)
 8012d0c:	441a      	add	r2, r3
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	3304      	adds	r3, #4
 8012d12:	4619      	mov	r1, r3
 8012d14:	4610      	mov	r0, r2
 8012d16:	f7fe f9ee 	bl	80110f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d1e:	4b23      	ldr	r3, [pc, #140]	; (8012dac <xTaskResumeAll+0x128>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d302      	bcc.n	8012d2e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012d28:	4b21      	ldr	r3, [pc, #132]	; (8012db0 <xTaskResumeAll+0x12c>)
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d2e:	4b1c      	ldr	r3, [pc, #112]	; (8012da0 <xTaskResumeAll+0x11c>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d1cb      	bne.n	8012cce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d001      	beq.n	8012d40 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012d3c:	f000 fba2 	bl	8013484 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012d40:	4b1c      	ldr	r3, [pc, #112]	; (8012db4 <xTaskResumeAll+0x130>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d010      	beq.n	8012d6e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012d4c:	f000 f846 	bl	8012ddc <xTaskIncrementTick>
 8012d50:	4603      	mov	r3, r0
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d002      	beq.n	8012d5c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012d56:	4b16      	ldr	r3, [pc, #88]	; (8012db0 <xTaskResumeAll+0x12c>)
 8012d58:	2201      	movs	r2, #1
 8012d5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	3b01      	subs	r3, #1
 8012d60:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d1f1      	bne.n	8012d4c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012d68:	4b12      	ldr	r3, [pc, #72]	; (8012db4 <xTaskResumeAll+0x130>)
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012d6e:	4b10      	ldr	r3, [pc, #64]	; (8012db0 <xTaskResumeAll+0x12c>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d009      	beq.n	8012d8a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012d76:	2301      	movs	r3, #1
 8012d78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012d7a:	4b0f      	ldr	r3, [pc, #60]	; (8012db8 <xTaskResumeAll+0x134>)
 8012d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d80:	601a      	str	r2, [r3, #0]
 8012d82:	f3bf 8f4f 	dsb	sy
 8012d86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d8a:	f7fe fb8d 	bl	80114a8 <vPortExitCritical>

	return xAlreadyYielded;
 8012d8e:	68bb      	ldr	r3, [r7, #8]
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3710      	adds	r7, #16
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	20027478 	.word	0x20027478
 8012d9c:	20027450 	.word	0x20027450
 8012da0:	20027410 	.word	0x20027410
 8012da4:	20027458 	.word	0x20027458
 8012da8:	20026f80 	.word	0x20026f80
 8012dac:	20026f7c 	.word	0x20026f7c
 8012db0:	20027464 	.word	0x20027464
 8012db4:	20027460 	.word	0x20027460
 8012db8:	e000ed04 	.word	0xe000ed04

08012dbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b083      	sub	sp, #12
 8012dc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012dc2:	4b05      	ldr	r3, [pc, #20]	; (8012dd8 <xTaskGetTickCount+0x1c>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012dc8:	687b      	ldr	r3, [r7, #4]
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	370c      	adds	r7, #12
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd4:	4770      	bx	lr
 8012dd6:	bf00      	nop
 8012dd8:	20027454 	.word	0x20027454

08012ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b086      	sub	sp, #24
 8012de0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012de2:	2300      	movs	r3, #0
 8012de4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012de6:	4b52      	ldr	r3, [pc, #328]	; (8012f30 <xTaskIncrementTick+0x154>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	f040 808e 	bne.w	8012f0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012df0:	4b50      	ldr	r3, [pc, #320]	; (8012f34 <xTaskIncrementTick+0x158>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	3301      	adds	r3, #1
 8012df6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012df8:	4a4e      	ldr	r2, [pc, #312]	; (8012f34 <xTaskIncrementTick+0x158>)
 8012dfa:	693b      	ldr	r3, [r7, #16]
 8012dfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d11f      	bne.n	8012e44 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012e04:	4b4c      	ldr	r3, [pc, #304]	; (8012f38 <xTaskIncrementTick+0x15c>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d009      	beq.n	8012e22 <xTaskIncrementTick+0x46>
 8012e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e12:	f383 8811 	msr	BASEPRI, r3
 8012e16:	f3bf 8f6f 	isb	sy
 8012e1a:	f3bf 8f4f 	dsb	sy
 8012e1e:	603b      	str	r3, [r7, #0]
 8012e20:	e7fe      	b.n	8012e20 <xTaskIncrementTick+0x44>
 8012e22:	4b45      	ldr	r3, [pc, #276]	; (8012f38 <xTaskIncrementTick+0x15c>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	60fb      	str	r3, [r7, #12]
 8012e28:	4b44      	ldr	r3, [pc, #272]	; (8012f3c <xTaskIncrementTick+0x160>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	4a42      	ldr	r2, [pc, #264]	; (8012f38 <xTaskIncrementTick+0x15c>)
 8012e2e:	6013      	str	r3, [r2, #0]
 8012e30:	4a42      	ldr	r2, [pc, #264]	; (8012f3c <xTaskIncrementTick+0x160>)
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	6013      	str	r3, [r2, #0]
 8012e36:	4b42      	ldr	r3, [pc, #264]	; (8012f40 <xTaskIncrementTick+0x164>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	4a40      	ldr	r2, [pc, #256]	; (8012f40 <xTaskIncrementTick+0x164>)
 8012e3e:	6013      	str	r3, [r2, #0]
 8012e40:	f000 fb20 	bl	8013484 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012e44:	4b3f      	ldr	r3, [pc, #252]	; (8012f44 <xTaskIncrementTick+0x168>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	693a      	ldr	r2, [r7, #16]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d349      	bcc.n	8012ee2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e4e:	4b3a      	ldr	r3, [pc, #232]	; (8012f38 <xTaskIncrementTick+0x15c>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d104      	bne.n	8012e62 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e58:	4b3a      	ldr	r3, [pc, #232]	; (8012f44 <xTaskIncrementTick+0x168>)
 8012e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e5e:	601a      	str	r2, [r3, #0]
					break;
 8012e60:	e03f      	b.n	8012ee2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e62:	4b35      	ldr	r3, [pc, #212]	; (8012f38 <xTaskIncrementTick+0x15c>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	68db      	ldr	r3, [r3, #12]
 8012e68:	68db      	ldr	r3, [r3, #12]
 8012e6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012e72:	693a      	ldr	r2, [r7, #16]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d203      	bcs.n	8012e82 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012e7a:	4a32      	ldr	r2, [pc, #200]	; (8012f44 <xTaskIncrementTick+0x168>)
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012e80:	e02f      	b.n	8012ee2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	3304      	adds	r3, #4
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7fe f992 	bl	80111b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d004      	beq.n	8012e9e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	3318      	adds	r3, #24
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7fe f989 	bl	80111b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ea2:	4b29      	ldr	r3, [pc, #164]	; (8012f48 <xTaskIncrementTick+0x16c>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	d903      	bls.n	8012eb2 <xTaskIncrementTick+0xd6>
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eae:	4a26      	ldr	r2, [pc, #152]	; (8012f48 <xTaskIncrementTick+0x16c>)
 8012eb0:	6013      	str	r3, [r2, #0]
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eb6:	4613      	mov	r3, r2
 8012eb8:	009b      	lsls	r3, r3, #2
 8012eba:	4413      	add	r3, r2
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	4a23      	ldr	r2, [pc, #140]	; (8012f4c <xTaskIncrementTick+0x170>)
 8012ec0:	441a      	add	r2, r3
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	3304      	adds	r3, #4
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	4610      	mov	r0, r2
 8012eca:	f7fe f914 	bl	80110f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ece:	68bb      	ldr	r3, [r7, #8]
 8012ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ed2:	4b1f      	ldr	r3, [pc, #124]	; (8012f50 <xTaskIncrementTick+0x174>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d3b8      	bcc.n	8012e4e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012edc:	2301      	movs	r3, #1
 8012ede:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ee0:	e7b5      	b.n	8012e4e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012ee2:	4b1b      	ldr	r3, [pc, #108]	; (8012f50 <xTaskIncrementTick+0x174>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ee8:	4918      	ldr	r1, [pc, #96]	; (8012f4c <xTaskIncrementTick+0x170>)
 8012eea:	4613      	mov	r3, r2
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	4413      	add	r3, r2
 8012ef0:	009b      	lsls	r3, r3, #2
 8012ef2:	440b      	add	r3, r1
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	2b01      	cmp	r3, #1
 8012ef8:	d901      	bls.n	8012efe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8012efa:	2301      	movs	r3, #1
 8012efc:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8012efe:	4b15      	ldr	r3, [pc, #84]	; (8012f54 <xTaskIncrementTick+0x178>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d109      	bne.n	8012f1a <xTaskIncrementTick+0x13e>
			{
				vApplicationTickHook();
 8012f06:	f7ee f9a2 	bl	800124e <vApplicationTickHook>
 8012f0a:	e006      	b.n	8012f1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012f0c:	4b11      	ldr	r3, [pc, #68]	; (8012f54 <xTaskIncrementTick+0x178>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	3301      	adds	r3, #1
 8012f12:	4a10      	ldr	r2, [pc, #64]	; (8012f54 <xTaskIncrementTick+0x178>)
 8012f14:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8012f16:	f7ee f99a 	bl	800124e <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012f1a:	4b0f      	ldr	r3, [pc, #60]	; (8012f58 <xTaskIncrementTick+0x17c>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d001      	beq.n	8012f26 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8012f22:	2301      	movs	r3, #1
 8012f24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012f26:	697b      	ldr	r3, [r7, #20]
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3718      	adds	r7, #24
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	20027478 	.word	0x20027478
 8012f34:	20027454 	.word	0x20027454
 8012f38:	20027408 	.word	0x20027408
 8012f3c:	2002740c 	.word	0x2002740c
 8012f40:	20027468 	.word	0x20027468
 8012f44:	20027470 	.word	0x20027470
 8012f48:	20027458 	.word	0x20027458
 8012f4c:	20026f80 	.word	0x20026f80
 8012f50:	20026f7c 	.word	0x20026f7c
 8012f54:	20027460 	.word	0x20027460
 8012f58:	20027464 	.word	0x20027464

08012f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012f62:	4b3b      	ldr	r3, [pc, #236]	; (8013050 <vTaskSwitchContext+0xf4>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d003      	beq.n	8012f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012f6a:	4b3a      	ldr	r3, [pc, #232]	; (8013054 <vTaskSwitchContext+0xf8>)
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012f70:	e06a      	b.n	8013048 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8012f72:	4b38      	ldr	r3, [pc, #224]	; (8013054 <vTaskSwitchContext+0xf8>)
 8012f74:	2200      	movs	r2, #0
 8012f76:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8012f78:	f7ee f962 	bl	8001240 <getRunTimeCounterValue>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	4b36      	ldr	r3, [pc, #216]	; (8013058 <vTaskSwitchContext+0xfc>)
 8012f80:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8012f82:	4b35      	ldr	r3, [pc, #212]	; (8013058 <vTaskSwitchContext+0xfc>)
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	4b35      	ldr	r3, [pc, #212]	; (801305c <vTaskSwitchContext+0x100>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d909      	bls.n	8012fa2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8012f8e:	4b34      	ldr	r3, [pc, #208]	; (8013060 <vTaskSwitchContext+0x104>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012f94:	4a30      	ldr	r2, [pc, #192]	; (8013058 <vTaskSwitchContext+0xfc>)
 8012f96:	6810      	ldr	r0, [r2, #0]
 8012f98:	4a30      	ldr	r2, [pc, #192]	; (801305c <vTaskSwitchContext+0x100>)
 8012f9a:	6812      	ldr	r2, [r2, #0]
 8012f9c:	1a82      	subs	r2, r0, r2
 8012f9e:	440a      	add	r2, r1
 8012fa0:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8012fa2:	4b2d      	ldr	r3, [pc, #180]	; (8013058 <vTaskSwitchContext+0xfc>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	4a2d      	ldr	r2, [pc, #180]	; (801305c <vTaskSwitchContext+0x100>)
 8012fa8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012faa:	4b2d      	ldr	r3, [pc, #180]	; (8013060 <vTaskSwitchContext+0x104>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	681a      	ldr	r2, [r3, #0]
 8012fb0:	4b2b      	ldr	r3, [pc, #172]	; (8013060 <vTaskSwitchContext+0x104>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d808      	bhi.n	8012fcc <vTaskSwitchContext+0x70>
 8012fba:	4b29      	ldr	r3, [pc, #164]	; (8013060 <vTaskSwitchContext+0x104>)
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	4b28      	ldr	r3, [pc, #160]	; (8013060 <vTaskSwitchContext+0x104>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	3334      	adds	r3, #52	; 0x34
 8012fc4:	4619      	mov	r1, r3
 8012fc6:	4610      	mov	r0, r2
 8012fc8:	f7ee f948 	bl	800125c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fcc:	4b25      	ldr	r3, [pc, #148]	; (8013064 <vTaskSwitchContext+0x108>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	60fb      	str	r3, [r7, #12]
 8012fd2:	e00f      	b.n	8012ff4 <vTaskSwitchContext+0x98>
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d109      	bne.n	8012fee <vTaskSwitchContext+0x92>
 8012fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fde:	f383 8811 	msr	BASEPRI, r3
 8012fe2:	f3bf 8f6f 	isb	sy
 8012fe6:	f3bf 8f4f 	dsb	sy
 8012fea:	607b      	str	r3, [r7, #4]
 8012fec:	e7fe      	b.n	8012fec <vTaskSwitchContext+0x90>
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	3b01      	subs	r3, #1
 8012ff2:	60fb      	str	r3, [r7, #12]
 8012ff4:	491c      	ldr	r1, [pc, #112]	; (8013068 <vTaskSwitchContext+0x10c>)
 8012ff6:	68fa      	ldr	r2, [r7, #12]
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	009b      	lsls	r3, r3, #2
 8012ffc:	4413      	add	r3, r2
 8012ffe:	009b      	lsls	r3, r3, #2
 8013000:	440b      	add	r3, r1
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d0e5      	beq.n	8012fd4 <vTaskSwitchContext+0x78>
 8013008:	68fa      	ldr	r2, [r7, #12]
 801300a:	4613      	mov	r3, r2
 801300c:	009b      	lsls	r3, r3, #2
 801300e:	4413      	add	r3, r2
 8013010:	009b      	lsls	r3, r3, #2
 8013012:	4a15      	ldr	r2, [pc, #84]	; (8013068 <vTaskSwitchContext+0x10c>)
 8013014:	4413      	add	r3, r2
 8013016:	60bb      	str	r3, [r7, #8]
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	685a      	ldr	r2, [r3, #4]
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	605a      	str	r2, [r3, #4]
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	685a      	ldr	r2, [r3, #4]
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	3308      	adds	r3, #8
 801302a:	429a      	cmp	r2, r3
 801302c:	d104      	bne.n	8013038 <vTaskSwitchContext+0xdc>
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	685b      	ldr	r3, [r3, #4]
 8013032:	685a      	ldr	r2, [r3, #4]
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	605a      	str	r2, [r3, #4]
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	68db      	ldr	r3, [r3, #12]
 801303e:	4a08      	ldr	r2, [pc, #32]	; (8013060 <vTaskSwitchContext+0x104>)
 8013040:	6013      	str	r3, [r2, #0]
 8013042:	4a08      	ldr	r2, [pc, #32]	; (8013064 <vTaskSwitchContext+0x108>)
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	6013      	str	r3, [r2, #0]
}
 8013048:	bf00      	nop
 801304a:	3710      	adds	r7, #16
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	20027478 	.word	0x20027478
 8013054:	20027464 	.word	0x20027464
 8013058:	20027480 	.word	0x20027480
 801305c:	2002747c 	.word	0x2002747c
 8013060:	20026f7c 	.word	0x20026f7c
 8013064:	20027458 	.word	0x20027458
 8013068:	20026f80 	.word	0x20026f80

0801306c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b084      	sub	sp, #16
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d109      	bne.n	8013090 <vTaskPlaceOnEventList+0x24>
 801307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013080:	f383 8811 	msr	BASEPRI, r3
 8013084:	f3bf 8f6f 	isb	sy
 8013088:	f3bf 8f4f 	dsb	sy
 801308c:	60fb      	str	r3, [r7, #12]
 801308e:	e7fe      	b.n	801308e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013090:	4b07      	ldr	r3, [pc, #28]	; (80130b0 <vTaskPlaceOnEventList+0x44>)
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	3318      	adds	r3, #24
 8013096:	4619      	mov	r1, r3
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f7fe f850 	bl	801113e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801309e:	2101      	movs	r1, #1
 80130a0:	6838      	ldr	r0, [r7, #0]
 80130a2:	f000 fd8d 	bl	8013bc0 <prvAddCurrentTaskToDelayedList>
}
 80130a6:	bf00      	nop
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	20026f7c 	.word	0x20026f7c

080130b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b086      	sub	sp, #24
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	60f8      	str	r0, [r7, #12]
 80130bc:	60b9      	str	r1, [r7, #8]
 80130be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d109      	bne.n	80130da <vTaskPlaceOnEventListRestricted+0x26>
 80130c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ca:	f383 8811 	msr	BASEPRI, r3
 80130ce:	f3bf 8f6f 	isb	sy
 80130d2:	f3bf 8f4f 	dsb	sy
 80130d6:	617b      	str	r3, [r7, #20]
 80130d8:	e7fe      	b.n	80130d8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80130da:	4b0a      	ldr	r3, [pc, #40]	; (8013104 <vTaskPlaceOnEventListRestricted+0x50>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	3318      	adds	r3, #24
 80130e0:	4619      	mov	r1, r3
 80130e2:	68f8      	ldr	r0, [r7, #12]
 80130e4:	f7fe f807 	bl	80110f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d002      	beq.n	80130f4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80130ee:	f04f 33ff 	mov.w	r3, #4294967295
 80130f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80130f4:	6879      	ldr	r1, [r7, #4]
 80130f6:	68b8      	ldr	r0, [r7, #8]
 80130f8:	f000 fd62 	bl	8013bc0 <prvAddCurrentTaskToDelayedList>
	}
 80130fc:	bf00      	nop
 80130fe:	3718      	adds	r7, #24
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	20026f7c 	.word	0x20026f7c

08013108 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b086      	sub	sp, #24
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	68db      	ldr	r3, [r3, #12]
 8013116:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d109      	bne.n	8013132 <xTaskRemoveFromEventList+0x2a>
 801311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013122:	f383 8811 	msr	BASEPRI, r3
 8013126:	f3bf 8f6f 	isb	sy
 801312a:	f3bf 8f4f 	dsb	sy
 801312e:	60fb      	str	r3, [r7, #12]
 8013130:	e7fe      	b.n	8013130 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013132:	693b      	ldr	r3, [r7, #16]
 8013134:	3318      	adds	r3, #24
 8013136:	4618      	mov	r0, r3
 8013138:	f7fe f83a 	bl	80111b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801313c:	4b1e      	ldr	r3, [pc, #120]	; (80131b8 <xTaskRemoveFromEventList+0xb0>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d11f      	bne.n	8013184 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	3304      	adds	r3, #4
 8013148:	4618      	mov	r0, r3
 801314a:	f7fe f831 	bl	80111b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013152:	4b1a      	ldr	r3, [pc, #104]	; (80131bc <xTaskRemoveFromEventList+0xb4>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	429a      	cmp	r2, r3
 8013158:	d903      	bls.n	8013162 <xTaskRemoveFromEventList+0x5a>
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801315e:	4a17      	ldr	r2, [pc, #92]	; (80131bc <xTaskRemoveFromEventList+0xb4>)
 8013160:	6013      	str	r3, [r2, #0]
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013166:	4613      	mov	r3, r2
 8013168:	009b      	lsls	r3, r3, #2
 801316a:	4413      	add	r3, r2
 801316c:	009b      	lsls	r3, r3, #2
 801316e:	4a14      	ldr	r2, [pc, #80]	; (80131c0 <xTaskRemoveFromEventList+0xb8>)
 8013170:	441a      	add	r2, r3
 8013172:	693b      	ldr	r3, [r7, #16]
 8013174:	3304      	adds	r3, #4
 8013176:	4619      	mov	r1, r3
 8013178:	4610      	mov	r0, r2
 801317a:	f7fd ffbc 	bl	80110f6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 801317e:	f000 f981 	bl	8013484 <prvResetNextTaskUnblockTime>
 8013182:	e005      	b.n	8013190 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	3318      	adds	r3, #24
 8013188:	4619      	mov	r1, r3
 801318a:	480e      	ldr	r0, [pc, #56]	; (80131c4 <xTaskRemoveFromEventList+0xbc>)
 801318c:	f7fd ffb3 	bl	80110f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013194:	4b0c      	ldr	r3, [pc, #48]	; (80131c8 <xTaskRemoveFromEventList+0xc0>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801319a:	429a      	cmp	r2, r3
 801319c:	d905      	bls.n	80131aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801319e:	2301      	movs	r3, #1
 80131a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80131a2:	4b0a      	ldr	r3, [pc, #40]	; (80131cc <xTaskRemoveFromEventList+0xc4>)
 80131a4:	2201      	movs	r2, #1
 80131a6:	601a      	str	r2, [r3, #0]
 80131a8:	e001      	b.n	80131ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80131aa:	2300      	movs	r3, #0
 80131ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80131ae:	697b      	ldr	r3, [r7, #20]
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3718      	adds	r7, #24
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}
 80131b8:	20027478 	.word	0x20027478
 80131bc:	20027458 	.word	0x20027458
 80131c0:	20026f80 	.word	0x20026f80
 80131c4:	20027410 	.word	0x20027410
 80131c8:	20026f7c 	.word	0x20026f7c
 80131cc:	20027464 	.word	0x20027464

080131d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80131d0:	b480      	push	{r7}
 80131d2:	b083      	sub	sp, #12
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80131d8:	4b06      	ldr	r3, [pc, #24]	; (80131f4 <vTaskInternalSetTimeOutState+0x24>)
 80131da:	681a      	ldr	r2, [r3, #0]
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80131e0:	4b05      	ldr	r3, [pc, #20]	; (80131f8 <vTaskInternalSetTimeOutState+0x28>)
 80131e2:	681a      	ldr	r2, [r3, #0]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	605a      	str	r2, [r3, #4]
}
 80131e8:	bf00      	nop
 80131ea:	370c      	adds	r7, #12
 80131ec:	46bd      	mov	sp, r7
 80131ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f2:	4770      	bx	lr
 80131f4:	20027468 	.word	0x20027468
 80131f8:	20027454 	.word	0x20027454

080131fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b088      	sub	sp, #32
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d109      	bne.n	8013220 <xTaskCheckForTimeOut+0x24>
 801320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013210:	f383 8811 	msr	BASEPRI, r3
 8013214:	f3bf 8f6f 	isb	sy
 8013218:	f3bf 8f4f 	dsb	sy
 801321c:	613b      	str	r3, [r7, #16]
 801321e:	e7fe      	b.n	801321e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d109      	bne.n	801323a <xTaskCheckForTimeOut+0x3e>
 8013226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801322a:	f383 8811 	msr	BASEPRI, r3
 801322e:	f3bf 8f6f 	isb	sy
 8013232:	f3bf 8f4f 	dsb	sy
 8013236:	60fb      	str	r3, [r7, #12]
 8013238:	e7fe      	b.n	8013238 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801323a:	f7fe f907 	bl	801144c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801323e:	4b1d      	ldr	r3, [pc, #116]	; (80132b4 <xTaskCheckForTimeOut+0xb8>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	685b      	ldr	r3, [r3, #4]
 8013248:	69ba      	ldr	r2, [r7, #24]
 801324a:	1ad3      	subs	r3, r2, r3
 801324c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013256:	d102      	bne.n	801325e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013258:	2300      	movs	r3, #0
 801325a:	61fb      	str	r3, [r7, #28]
 801325c:	e023      	b.n	80132a6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	681a      	ldr	r2, [r3, #0]
 8013262:	4b15      	ldr	r3, [pc, #84]	; (80132b8 <xTaskCheckForTimeOut+0xbc>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	429a      	cmp	r2, r3
 8013268:	d007      	beq.n	801327a <xTaskCheckForTimeOut+0x7e>
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	69ba      	ldr	r2, [r7, #24]
 8013270:	429a      	cmp	r2, r3
 8013272:	d302      	bcc.n	801327a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013274:	2301      	movs	r3, #1
 8013276:	61fb      	str	r3, [r7, #28]
 8013278:	e015      	b.n	80132a6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	697a      	ldr	r2, [r7, #20]
 8013280:	429a      	cmp	r2, r3
 8013282:	d20b      	bcs.n	801329c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	697b      	ldr	r3, [r7, #20]
 801328a:	1ad2      	subs	r2, r2, r3
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f7ff ff9d 	bl	80131d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013296:	2300      	movs	r3, #0
 8013298:	61fb      	str	r3, [r7, #28]
 801329a:	e004      	b.n	80132a6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	2200      	movs	r2, #0
 80132a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80132a2:	2301      	movs	r3, #1
 80132a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80132a6:	f7fe f8ff 	bl	80114a8 <vPortExitCritical>

	return xReturn;
 80132aa:	69fb      	ldr	r3, [r7, #28]
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3720      	adds	r7, #32
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}
 80132b4:	20027454 	.word	0x20027454
 80132b8:	20027468 	.word	0x20027468

080132bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80132bc:	b480      	push	{r7}
 80132be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80132c0:	4b03      	ldr	r3, [pc, #12]	; (80132d0 <vTaskMissedYield+0x14>)
 80132c2:	2201      	movs	r2, #1
 80132c4:	601a      	str	r2, [r3, #0]
}
 80132c6:	bf00      	nop
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr
 80132d0:	20027464 	.word	0x20027464

080132d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b084      	sub	sp, #16
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80132dc:	f000 f878 	bl	80133d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80132e0:	4b17      	ldr	r3, [pc, #92]	; (8013340 <prvIdleTask+0x6c>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d907      	bls.n	80132f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80132e8:	4b16      	ldr	r3, [pc, #88]	; (8013344 <prvIdleTask+0x70>)
 80132ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132ee:	601a      	str	r2, [r3, #0]
 80132f0:	f3bf 8f4f 	dsb	sy
 80132f4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80132f8:	f7ff fc8c 	bl	8012c14 <prvGetExpectedIdleTime>
 80132fc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2b01      	cmp	r3, #1
 8013302:	d9eb      	bls.n	80132dc <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8013304:	f7ff fc78 	bl	8012bf8 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8013308:	4b0f      	ldr	r3, [pc, #60]	; (8013348 <prvIdleTask+0x74>)
 801330a:	681a      	ldr	r2, [r3, #0]
 801330c:	4b0f      	ldr	r3, [pc, #60]	; (801334c <prvIdleTask+0x78>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	429a      	cmp	r2, r3
 8013312:	d209      	bcs.n	8013328 <prvIdleTask+0x54>
 8013314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013318:	f383 8811 	msr	BASEPRI, r3
 801331c:	f3bf 8f6f 	isb	sy
 8013320:	f3bf 8f4f 	dsb	sy
 8013324:	60bb      	str	r3, [r7, #8]
 8013326:	e7fe      	b.n	8013326 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8013328:	f7ff fc74 	bl	8012c14 <prvGetExpectedIdleTime>
 801332c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2b01      	cmp	r3, #1
 8013332:	d902      	bls.n	801333a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8013334:	68f8      	ldr	r0, [r7, #12]
 8013336:	f7ef f8c3 	bl	80024c0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801333a:	f7ff fca3 	bl	8012c84 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801333e:	e7cd      	b.n	80132dc <prvIdleTask+0x8>
 8013340:	20026f80 	.word	0x20026f80
 8013344:	e000ed04 	.word	0xe000ed04
 8013348:	20027470 	.word	0x20027470
 801334c:	20027454 	.word	0x20027454

08013350 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b082      	sub	sp, #8
 8013354:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013356:	2300      	movs	r3, #0
 8013358:	607b      	str	r3, [r7, #4]
 801335a:	e00c      	b.n	8013376 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801335c:	687a      	ldr	r2, [r7, #4]
 801335e:	4613      	mov	r3, r2
 8013360:	009b      	lsls	r3, r3, #2
 8013362:	4413      	add	r3, r2
 8013364:	009b      	lsls	r3, r3, #2
 8013366:	4a12      	ldr	r2, [pc, #72]	; (80133b0 <prvInitialiseTaskLists+0x60>)
 8013368:	4413      	add	r3, r2
 801336a:	4618      	mov	r0, r3
 801336c:	f7fd fe96 	bl	801109c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	3301      	adds	r3, #1
 8013374:	607b      	str	r3, [r7, #4]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2b37      	cmp	r3, #55	; 0x37
 801337a:	d9ef      	bls.n	801335c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801337c:	480d      	ldr	r0, [pc, #52]	; (80133b4 <prvInitialiseTaskLists+0x64>)
 801337e:	f7fd fe8d 	bl	801109c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013382:	480d      	ldr	r0, [pc, #52]	; (80133b8 <prvInitialiseTaskLists+0x68>)
 8013384:	f7fd fe8a 	bl	801109c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013388:	480c      	ldr	r0, [pc, #48]	; (80133bc <prvInitialiseTaskLists+0x6c>)
 801338a:	f7fd fe87 	bl	801109c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801338e:	480c      	ldr	r0, [pc, #48]	; (80133c0 <prvInitialiseTaskLists+0x70>)
 8013390:	f7fd fe84 	bl	801109c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013394:	480b      	ldr	r0, [pc, #44]	; (80133c4 <prvInitialiseTaskLists+0x74>)
 8013396:	f7fd fe81 	bl	801109c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801339a:	4b0b      	ldr	r3, [pc, #44]	; (80133c8 <prvInitialiseTaskLists+0x78>)
 801339c:	4a05      	ldr	r2, [pc, #20]	; (80133b4 <prvInitialiseTaskLists+0x64>)
 801339e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80133a0:	4b0a      	ldr	r3, [pc, #40]	; (80133cc <prvInitialiseTaskLists+0x7c>)
 80133a2:	4a05      	ldr	r2, [pc, #20]	; (80133b8 <prvInitialiseTaskLists+0x68>)
 80133a4:	601a      	str	r2, [r3, #0]
}
 80133a6:	bf00      	nop
 80133a8:	3708      	adds	r7, #8
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
 80133ae:	bf00      	nop
 80133b0:	20026f80 	.word	0x20026f80
 80133b4:	200273e0 	.word	0x200273e0
 80133b8:	200273f4 	.word	0x200273f4
 80133bc:	20027410 	.word	0x20027410
 80133c0:	20027424 	.word	0x20027424
 80133c4:	2002743c 	.word	0x2002743c
 80133c8:	20027408 	.word	0x20027408
 80133cc:	2002740c 	.word	0x2002740c

080133d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80133d6:	e019      	b.n	801340c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80133d8:	f7fe f838 	bl	801144c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133dc:	4b0f      	ldr	r3, [pc, #60]	; (801341c <prvCheckTasksWaitingTermination+0x4c>)
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	68db      	ldr	r3, [r3, #12]
 80133e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	3304      	adds	r3, #4
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7fd fee1 	bl	80111b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80133ee:	4b0c      	ldr	r3, [pc, #48]	; (8013420 <prvCheckTasksWaitingTermination+0x50>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	3b01      	subs	r3, #1
 80133f4:	4a0a      	ldr	r2, [pc, #40]	; (8013420 <prvCheckTasksWaitingTermination+0x50>)
 80133f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80133f8:	4b0a      	ldr	r3, [pc, #40]	; (8013424 <prvCheckTasksWaitingTermination+0x54>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	3b01      	subs	r3, #1
 80133fe:	4a09      	ldr	r2, [pc, #36]	; (8013424 <prvCheckTasksWaitingTermination+0x54>)
 8013400:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013402:	f7fe f851 	bl	80114a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f000 f80e 	bl	8013428 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801340c:	4b05      	ldr	r3, [pc, #20]	; (8013424 <prvCheckTasksWaitingTermination+0x54>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d1e1      	bne.n	80133d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013414:	bf00      	nop
 8013416:	3708      	adds	r7, #8
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	20027424 	.word	0x20027424
 8013420:	20027450 	.word	0x20027450
 8013424:	20027438 	.word	0x20027438

08013428 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013428:	b580      	push	{r7, lr}
 801342a:	b084      	sub	sp, #16
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013436:	2b00      	cmp	r3, #0
 8013438:	d108      	bne.n	801344c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801343e:	4618      	mov	r0, r3
 8013440:	f7fd fd16 	bl	8010e70 <vPortFree>
				vPortFree( pxTCB );
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f7fd fd13 	bl	8010e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801344a:	e017      	b.n	801347c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013452:	2b01      	cmp	r3, #1
 8013454:	d103      	bne.n	801345e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f7fd fd0a 	bl	8010e70 <vPortFree>
	}
 801345c:	e00e      	b.n	801347c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013464:	2b02      	cmp	r3, #2
 8013466:	d009      	beq.n	801347c <prvDeleteTCB+0x54>
 8013468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801346c:	f383 8811 	msr	BASEPRI, r3
 8013470:	f3bf 8f6f 	isb	sy
 8013474:	f3bf 8f4f 	dsb	sy
 8013478:	60fb      	str	r3, [r7, #12]
 801347a:	e7fe      	b.n	801347a <prvDeleteTCB+0x52>
	}
 801347c:	bf00      	nop
 801347e:	3710      	adds	r7, #16
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}

08013484 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013484:	b480      	push	{r7}
 8013486:	b083      	sub	sp, #12
 8013488:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801348a:	4b0c      	ldr	r3, [pc, #48]	; (80134bc <prvResetNextTaskUnblockTime+0x38>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d104      	bne.n	801349e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013494:	4b0a      	ldr	r3, [pc, #40]	; (80134c0 <prvResetNextTaskUnblockTime+0x3c>)
 8013496:	f04f 32ff 	mov.w	r2, #4294967295
 801349a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801349c:	e008      	b.n	80134b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801349e:	4b07      	ldr	r3, [pc, #28]	; (80134bc <prvResetNextTaskUnblockTime+0x38>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	68db      	ldr	r3, [r3, #12]
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	685b      	ldr	r3, [r3, #4]
 80134ac:	4a04      	ldr	r2, [pc, #16]	; (80134c0 <prvResetNextTaskUnblockTime+0x3c>)
 80134ae:	6013      	str	r3, [r2, #0]
}
 80134b0:	bf00      	nop
 80134b2:	370c      	adds	r7, #12
 80134b4:	46bd      	mov	sp, r7
 80134b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ba:	4770      	bx	lr
 80134bc:	20027408 	.word	0x20027408
 80134c0:	20027470 	.word	0x20027470

080134c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80134c4:	b480      	push	{r7}
 80134c6:	b083      	sub	sp, #12
 80134c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80134ca:	4b05      	ldr	r3, [pc, #20]	; (80134e0 <xTaskGetCurrentTaskHandle+0x1c>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 80134d0:	687b      	ldr	r3, [r7, #4]
	}
 80134d2:	4618      	mov	r0, r3
 80134d4:	370c      	adds	r7, #12
 80134d6:	46bd      	mov	sp, r7
 80134d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134dc:	4770      	bx	lr
 80134de:	bf00      	nop
 80134e0:	20026f7c 	.word	0x20026f7c

080134e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80134e4:	b480      	push	{r7}
 80134e6:	b083      	sub	sp, #12
 80134e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80134ea:	4b0b      	ldr	r3, [pc, #44]	; (8013518 <xTaskGetSchedulerState+0x34>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d102      	bne.n	80134f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80134f2:	2301      	movs	r3, #1
 80134f4:	607b      	str	r3, [r7, #4]
 80134f6:	e008      	b.n	801350a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80134f8:	4b08      	ldr	r3, [pc, #32]	; (801351c <xTaskGetSchedulerState+0x38>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d102      	bne.n	8013506 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013500:	2302      	movs	r3, #2
 8013502:	607b      	str	r3, [r7, #4]
 8013504:	e001      	b.n	801350a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013506:	2300      	movs	r3, #0
 8013508:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801350a:	687b      	ldr	r3, [r7, #4]
	}
 801350c:	4618      	mov	r0, r3
 801350e:	370c      	adds	r7, #12
 8013510:	46bd      	mov	sp, r7
 8013512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013516:	4770      	bx	lr
 8013518:	2002745c 	.word	0x2002745c
 801351c:	20027478 	.word	0x20027478

08013520 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013520:	b580      	push	{r7, lr}
 8013522:	b084      	sub	sp, #16
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801352c:	2300      	movs	r3, #0
 801352e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d051      	beq.n	80135da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801353a:	4b2a      	ldr	r3, [pc, #168]	; (80135e4 <xTaskPriorityInherit+0xc4>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013540:	429a      	cmp	r2, r3
 8013542:	d241      	bcs.n	80135c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	699b      	ldr	r3, [r3, #24]
 8013548:	2b00      	cmp	r3, #0
 801354a:	db06      	blt.n	801355a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801354c:	4b25      	ldr	r3, [pc, #148]	; (80135e4 <xTaskPriorityInherit+0xc4>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013552:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	6959      	ldr	r1, [r3, #20]
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013562:	4613      	mov	r3, r2
 8013564:	009b      	lsls	r3, r3, #2
 8013566:	4413      	add	r3, r2
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	4a1f      	ldr	r2, [pc, #124]	; (80135e8 <xTaskPriorityInherit+0xc8>)
 801356c:	4413      	add	r3, r2
 801356e:	4299      	cmp	r1, r3
 8013570:	d122      	bne.n	80135b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	3304      	adds	r3, #4
 8013576:	4618      	mov	r0, r3
 8013578:	f7fd fe1a 	bl	80111b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801357c:	4b19      	ldr	r3, [pc, #100]	; (80135e4 <xTaskPriorityInherit+0xc4>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801358a:	4b18      	ldr	r3, [pc, #96]	; (80135ec <xTaskPriorityInherit+0xcc>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	429a      	cmp	r2, r3
 8013590:	d903      	bls.n	801359a <xTaskPriorityInherit+0x7a>
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013596:	4a15      	ldr	r2, [pc, #84]	; (80135ec <xTaskPriorityInherit+0xcc>)
 8013598:	6013      	str	r3, [r2, #0]
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801359e:	4613      	mov	r3, r2
 80135a0:	009b      	lsls	r3, r3, #2
 80135a2:	4413      	add	r3, r2
 80135a4:	009b      	lsls	r3, r3, #2
 80135a6:	4a10      	ldr	r2, [pc, #64]	; (80135e8 <xTaskPriorityInherit+0xc8>)
 80135a8:	441a      	add	r2, r3
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	3304      	adds	r3, #4
 80135ae:	4619      	mov	r1, r3
 80135b0:	4610      	mov	r0, r2
 80135b2:	f7fd fda0 	bl	80110f6 <vListInsertEnd>
 80135b6:	e004      	b.n	80135c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80135b8:	4b0a      	ldr	r3, [pc, #40]	; (80135e4 <xTaskPriorityInherit+0xc4>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80135c2:	2301      	movs	r3, #1
 80135c4:	60fb      	str	r3, [r7, #12]
 80135c6:	e008      	b.n	80135da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135cc:	4b05      	ldr	r3, [pc, #20]	; (80135e4 <xTaskPriorityInherit+0xc4>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d201      	bcs.n	80135da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80135d6:	2301      	movs	r3, #1
 80135d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80135da:	68fb      	ldr	r3, [r7, #12]
	}
 80135dc:	4618      	mov	r0, r3
 80135de:	3710      	adds	r7, #16
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}
 80135e4:	20026f7c 	.word	0x20026f7c
 80135e8:	20026f80 	.word	0x20026f80
 80135ec:	20027458 	.word	0x20027458

080135f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b086      	sub	sp, #24
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80135fc:	2300      	movs	r3, #0
 80135fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d054      	beq.n	80136b0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013606:	4b2d      	ldr	r3, [pc, #180]	; (80136bc <xTaskPriorityDisinherit+0xcc>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	693a      	ldr	r2, [r7, #16]
 801360c:	429a      	cmp	r2, r3
 801360e:	d009      	beq.n	8013624 <xTaskPriorityDisinherit+0x34>
 8013610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013614:	f383 8811 	msr	BASEPRI, r3
 8013618:	f3bf 8f6f 	isb	sy
 801361c:	f3bf 8f4f 	dsb	sy
 8013620:	60fb      	str	r3, [r7, #12]
 8013622:	e7fe      	b.n	8013622 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013628:	2b00      	cmp	r3, #0
 801362a:	d109      	bne.n	8013640 <xTaskPriorityDisinherit+0x50>
 801362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013630:	f383 8811 	msr	BASEPRI, r3
 8013634:	f3bf 8f6f 	isb	sy
 8013638:	f3bf 8f4f 	dsb	sy
 801363c:	60bb      	str	r3, [r7, #8]
 801363e:	e7fe      	b.n	801363e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013644:	1e5a      	subs	r2, r3, #1
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013652:	429a      	cmp	r2, r3
 8013654:	d02c      	beq.n	80136b0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013656:	693b      	ldr	r3, [r7, #16]
 8013658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801365a:	2b00      	cmp	r3, #0
 801365c:	d128      	bne.n	80136b0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	3304      	adds	r3, #4
 8013662:	4618      	mov	r0, r3
 8013664:	f7fd fda4 	bl	80111b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013668:	693b      	ldr	r3, [r7, #16]
 801366a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013674:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801367c:	693b      	ldr	r3, [r7, #16]
 801367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013680:	4b0f      	ldr	r3, [pc, #60]	; (80136c0 <xTaskPriorityDisinherit+0xd0>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	429a      	cmp	r2, r3
 8013686:	d903      	bls.n	8013690 <xTaskPriorityDisinherit+0xa0>
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801368c:	4a0c      	ldr	r2, [pc, #48]	; (80136c0 <xTaskPriorityDisinherit+0xd0>)
 801368e:	6013      	str	r3, [r2, #0]
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013694:	4613      	mov	r3, r2
 8013696:	009b      	lsls	r3, r3, #2
 8013698:	4413      	add	r3, r2
 801369a:	009b      	lsls	r3, r3, #2
 801369c:	4a09      	ldr	r2, [pc, #36]	; (80136c4 <xTaskPriorityDisinherit+0xd4>)
 801369e:	441a      	add	r2, r3
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	3304      	adds	r3, #4
 80136a4:	4619      	mov	r1, r3
 80136a6:	4610      	mov	r0, r2
 80136a8:	f7fd fd25 	bl	80110f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80136ac:	2301      	movs	r3, #1
 80136ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80136b0:	697b      	ldr	r3, [r7, #20]
	}
 80136b2:	4618      	mov	r0, r3
 80136b4:	3718      	adds	r7, #24
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd80      	pop	{r7, pc}
 80136ba:	bf00      	nop
 80136bc:	20026f7c 	.word	0x20026f7c
 80136c0:	20027458 	.word	0x20027458
 80136c4:	20026f80 	.word	0x20026f80

080136c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b088      	sub	sp, #32
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80136d6:	2301      	movs	r3, #1
 80136d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d068      	beq.n	80137b2 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d109      	bne.n	80136fc <vTaskPriorityDisinheritAfterTimeout+0x34>
 80136e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ec:	f383 8811 	msr	BASEPRI, r3
 80136f0:	f3bf 8f6f 	isb	sy
 80136f4:	f3bf 8f4f 	dsb	sy
 80136f8:	60fb      	str	r3, [r7, #12]
 80136fa:	e7fe      	b.n	80136fa <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80136fc:	69bb      	ldr	r3, [r7, #24]
 80136fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013700:	683a      	ldr	r2, [r7, #0]
 8013702:	429a      	cmp	r2, r3
 8013704:	d902      	bls.n	801370c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	61fb      	str	r3, [r7, #28]
 801370a:	e002      	b.n	8013712 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013710:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013716:	69fa      	ldr	r2, [r7, #28]
 8013718:	429a      	cmp	r2, r3
 801371a:	d04a      	beq.n	80137b2 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801371c:	69bb      	ldr	r3, [r7, #24]
 801371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013720:	697a      	ldr	r2, [r7, #20]
 8013722:	429a      	cmp	r2, r3
 8013724:	d145      	bne.n	80137b2 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013726:	4b25      	ldr	r3, [pc, #148]	; (80137bc <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	69ba      	ldr	r2, [r7, #24]
 801372c:	429a      	cmp	r2, r3
 801372e:	d109      	bne.n	8013744 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8013730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013734:	f383 8811 	msr	BASEPRI, r3
 8013738:	f3bf 8f6f 	isb	sy
 801373c:	f3bf 8f4f 	dsb	sy
 8013740:	60bb      	str	r3, [r7, #8]
 8013742:	e7fe      	b.n	8013742 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013748:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801374a:	69bb      	ldr	r3, [r7, #24]
 801374c:	69fa      	ldr	r2, [r7, #28]
 801374e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	699b      	ldr	r3, [r3, #24]
 8013754:	2b00      	cmp	r3, #0
 8013756:	db04      	blt.n	8013762 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013758:	69fb      	ldr	r3, [r7, #28]
 801375a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	6959      	ldr	r1, [r3, #20]
 8013766:	693a      	ldr	r2, [r7, #16]
 8013768:	4613      	mov	r3, r2
 801376a:	009b      	lsls	r3, r3, #2
 801376c:	4413      	add	r3, r2
 801376e:	009b      	lsls	r3, r3, #2
 8013770:	4a13      	ldr	r2, [pc, #76]	; (80137c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8013772:	4413      	add	r3, r2
 8013774:	4299      	cmp	r1, r3
 8013776:	d11c      	bne.n	80137b2 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	3304      	adds	r3, #4
 801377c:	4618      	mov	r0, r3
 801377e:	f7fd fd17 	bl	80111b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013782:	69bb      	ldr	r3, [r7, #24]
 8013784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013786:	4b0f      	ldr	r3, [pc, #60]	; (80137c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	429a      	cmp	r2, r3
 801378c:	d903      	bls.n	8013796 <vTaskPriorityDisinheritAfterTimeout+0xce>
 801378e:	69bb      	ldr	r3, [r7, #24]
 8013790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013792:	4a0c      	ldr	r2, [pc, #48]	; (80137c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013794:	6013      	str	r3, [r2, #0]
 8013796:	69bb      	ldr	r3, [r7, #24]
 8013798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801379a:	4613      	mov	r3, r2
 801379c:	009b      	lsls	r3, r3, #2
 801379e:	4413      	add	r3, r2
 80137a0:	009b      	lsls	r3, r3, #2
 80137a2:	4a07      	ldr	r2, [pc, #28]	; (80137c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80137a4:	441a      	add	r2, r3
 80137a6:	69bb      	ldr	r3, [r7, #24]
 80137a8:	3304      	adds	r3, #4
 80137aa:	4619      	mov	r1, r3
 80137ac:	4610      	mov	r0, r2
 80137ae:	f7fd fca2 	bl	80110f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80137b2:	bf00      	nop
 80137b4:	3720      	adds	r7, #32
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	bf00      	nop
 80137bc:	20026f7c 	.word	0x20026f7c
 80137c0:	20026f80 	.word	0x20026f80
 80137c4:	20027458 	.word	0x20027458

080137c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80137c8:	b480      	push	{r7}
 80137ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80137cc:	4b07      	ldr	r3, [pc, #28]	; (80137ec <pvTaskIncrementMutexHeldCount+0x24>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d004      	beq.n	80137de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80137d4:	4b05      	ldr	r3, [pc, #20]	; (80137ec <pvTaskIncrementMutexHeldCount+0x24>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80137da:	3201      	adds	r2, #1
 80137dc:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80137de:	4b03      	ldr	r3, [pc, #12]	; (80137ec <pvTaskIncrementMutexHeldCount+0x24>)
 80137e0:	681b      	ldr	r3, [r3, #0]
	}
 80137e2:	4618      	mov	r0, r3
 80137e4:	46bd      	mov	sp, r7
 80137e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ea:	4770      	bx	lr
 80137ec:	20026f7c 	.word	0x20026f7c

080137f0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b086      	sub	sp, #24
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	607a      	str	r2, [r7, #4]
 80137fc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80137fe:	f7fd fe25 	bl	801144c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013802:	4b26      	ldr	r3, [pc, #152]	; (801389c <xTaskNotifyWait+0xac>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801380a:	b2db      	uxtb	r3, r3
 801380c:	2b02      	cmp	r3, #2
 801380e:	d01a      	beq.n	8013846 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013810:	4b22      	ldr	r3, [pc, #136]	; (801389c <xTaskNotifyWait+0xac>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013816:	68fa      	ldr	r2, [r7, #12]
 8013818:	43d2      	mvns	r2, r2
 801381a:	400a      	ands	r2, r1
 801381c:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801381e:	4b1f      	ldr	r3, [pc, #124]	; (801389c <xTaskNotifyWait+0xac>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2201      	movs	r2, #1
 8013824:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d00b      	beq.n	8013846 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801382e:	2101      	movs	r1, #1
 8013830:	6838      	ldr	r0, [r7, #0]
 8013832:	f000 f9c5 	bl	8013bc0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8013836:	4b1a      	ldr	r3, [pc, #104]	; (80138a0 <xTaskNotifyWait+0xb0>)
 8013838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801383c:	601a      	str	r2, [r3, #0]
 801383e:	f3bf 8f4f 	dsb	sy
 8013842:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013846:	f7fd fe2f 	bl	80114a8 <vPortExitCritical>

		taskENTER_CRITICAL();
 801384a:	f7fd fdff 	bl	801144c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d004      	beq.n	801385e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8013854:	4b11      	ldr	r3, [pc, #68]	; (801389c <xTaskNotifyWait+0xac>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801385e:	4b0f      	ldr	r3, [pc, #60]	; (801389c <xTaskNotifyWait+0xac>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013866:	b2db      	uxtb	r3, r3
 8013868:	2b02      	cmp	r3, #2
 801386a:	d002      	beq.n	8013872 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801386c:	2300      	movs	r3, #0
 801386e:	617b      	str	r3, [r7, #20]
 8013870:	e008      	b.n	8013884 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8013872:	4b0a      	ldr	r3, [pc, #40]	; (801389c <xTaskNotifyWait+0xac>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013878:	68ba      	ldr	r2, [r7, #8]
 801387a:	43d2      	mvns	r2, r2
 801387c:	400a      	ands	r2, r1
 801387e:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 8013880:	2301      	movs	r3, #1
 8013882:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013884:	4b05      	ldr	r3, [pc, #20]	; (801389c <xTaskNotifyWait+0xac>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	2200      	movs	r2, #0
 801388a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 801388e:	f7fd fe0b 	bl	80114a8 <vPortExitCritical>

		return xReturn;
 8013892:	697b      	ldr	r3, [r7, #20]
	}
 8013894:	4618      	mov	r0, r3
 8013896:	3718      	adds	r7, #24
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	20026f7c 	.word	0x20026f7c
 80138a0:	e000ed04 	.word	0xe000ed04

080138a4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b08a      	sub	sp, #40	; 0x28
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	60b9      	str	r1, [r7, #8]
 80138ae:	603b      	str	r3, [r7, #0]
 80138b0:	4613      	mov	r3, r2
 80138b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80138b4:	2301      	movs	r3, #1
 80138b6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d109      	bne.n	80138d2 <xTaskGenericNotify+0x2e>
 80138be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c2:	f383 8811 	msr	BASEPRI, r3
 80138c6:	f3bf 8f6f 	isb	sy
 80138ca:	f3bf 8f4f 	dsb	sy
 80138ce:	61bb      	str	r3, [r7, #24]
 80138d0:	e7fe      	b.n	80138d0 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80138d6:	f7fd fdb9 	bl	801144c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d003      	beq.n	80138e8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80138e0:	6a3b      	ldr	r3, [r7, #32]
 80138e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80138e8:	6a3b      	ldr	r3, [r7, #32]
 80138ea:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80138ee:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80138f0:	6a3b      	ldr	r3, [r7, #32]
 80138f2:	2202      	movs	r2, #2
 80138f4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 80138f8:	79fb      	ldrb	r3, [r7, #7]
 80138fa:	2b04      	cmp	r3, #4
 80138fc:	d827      	bhi.n	801394e <xTaskGenericNotify+0xaa>
 80138fe:	a201      	add	r2, pc, #4	; (adr r2, 8013904 <xTaskGenericNotify+0x60>)
 8013900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013904:	0801396d 	.word	0x0801396d
 8013908:	08013919 	.word	0x08013919
 801390c:	08013927 	.word	0x08013927
 8013910:	08013933 	.word	0x08013933
 8013914:	0801393b 	.word	0x0801393b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013918:	6a3b      	ldr	r3, [r7, #32]
 801391a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	431a      	orrs	r2, r3
 8013920:	6a3b      	ldr	r3, [r7, #32]
 8013922:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013924:	e025      	b.n	8013972 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013926:	6a3b      	ldr	r3, [r7, #32]
 8013928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801392a:	1c5a      	adds	r2, r3, #1
 801392c:	6a3b      	ldr	r3, [r7, #32]
 801392e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013930:	e01f      	b.n	8013972 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013932:	6a3b      	ldr	r3, [r7, #32]
 8013934:	68ba      	ldr	r2, [r7, #8]
 8013936:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013938:	e01b      	b.n	8013972 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801393a:	7ffb      	ldrb	r3, [r7, #31]
 801393c:	2b02      	cmp	r3, #2
 801393e:	d003      	beq.n	8013948 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013940:	6a3b      	ldr	r3, [r7, #32]
 8013942:	68ba      	ldr	r2, [r7, #8]
 8013944:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013946:	e014      	b.n	8013972 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8013948:	2300      	movs	r3, #0
 801394a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801394c:	e011      	b.n	8013972 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801394e:	6a3b      	ldr	r3, [r7, #32]
 8013950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013956:	d00b      	beq.n	8013970 <xTaskGenericNotify+0xcc>
 8013958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395c:	f383 8811 	msr	BASEPRI, r3
 8013960:	f3bf 8f6f 	isb	sy
 8013964:	f3bf 8f4f 	dsb	sy
 8013968:	617b      	str	r3, [r7, #20]
 801396a:	e7fe      	b.n	801396a <xTaskGenericNotify+0xc6>
					break;
 801396c:	bf00      	nop
 801396e:	e000      	b.n	8013972 <xTaskGenericNotify+0xce>

					break;
 8013970:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013972:	7ffb      	ldrb	r3, [r7, #31]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d13b      	bne.n	80139f0 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013978:	6a3b      	ldr	r3, [r7, #32]
 801397a:	3304      	adds	r3, #4
 801397c:	4618      	mov	r0, r3
 801397e:	f7fd fc17 	bl	80111b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8013982:	6a3b      	ldr	r3, [r7, #32]
 8013984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013986:	4b1e      	ldr	r3, [pc, #120]	; (8013a00 <xTaskGenericNotify+0x15c>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	429a      	cmp	r2, r3
 801398c:	d903      	bls.n	8013996 <xTaskGenericNotify+0xf2>
 801398e:	6a3b      	ldr	r3, [r7, #32]
 8013990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013992:	4a1b      	ldr	r2, [pc, #108]	; (8013a00 <xTaskGenericNotify+0x15c>)
 8013994:	6013      	str	r3, [r2, #0]
 8013996:	6a3b      	ldr	r3, [r7, #32]
 8013998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801399a:	4613      	mov	r3, r2
 801399c:	009b      	lsls	r3, r3, #2
 801399e:	4413      	add	r3, r2
 80139a0:	009b      	lsls	r3, r3, #2
 80139a2:	4a18      	ldr	r2, [pc, #96]	; (8013a04 <xTaskGenericNotify+0x160>)
 80139a4:	441a      	add	r2, r3
 80139a6:	6a3b      	ldr	r3, [r7, #32]
 80139a8:	3304      	adds	r3, #4
 80139aa:	4619      	mov	r1, r3
 80139ac:	4610      	mov	r0, r2
 80139ae:	f7fd fba2 	bl	80110f6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80139b2:	6a3b      	ldr	r3, [r7, #32]
 80139b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d009      	beq.n	80139ce <xTaskGenericNotify+0x12a>
 80139ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139be:	f383 8811 	msr	BASEPRI, r3
 80139c2:	f3bf 8f6f 	isb	sy
 80139c6:	f3bf 8f4f 	dsb	sy
 80139ca:	613b      	str	r3, [r7, #16]
 80139cc:	e7fe      	b.n	80139cc <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80139ce:	f7ff fd59 	bl	8013484 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80139d2:	6a3b      	ldr	r3, [r7, #32]
 80139d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139d6:	4b0c      	ldr	r3, [pc, #48]	; (8013a08 <xTaskGenericNotify+0x164>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139dc:	429a      	cmp	r2, r3
 80139de:	d907      	bls.n	80139f0 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80139e0:	4b0a      	ldr	r3, [pc, #40]	; (8013a0c <xTaskGenericNotify+0x168>)
 80139e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139e6:	601a      	str	r2, [r3, #0]
 80139e8:	f3bf 8f4f 	dsb	sy
 80139ec:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80139f0:	f7fd fd5a 	bl	80114a8 <vPortExitCritical>

		return xReturn;
 80139f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80139f6:	4618      	mov	r0, r3
 80139f8:	3728      	adds	r7, #40	; 0x28
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}
 80139fe:	bf00      	nop
 8013a00:	20027458 	.word	0x20027458
 8013a04:	20026f80 	.word	0x20026f80
 8013a08:	20026f7c 	.word	0x20026f7c
 8013a0c:	e000ed04 	.word	0xe000ed04

08013a10 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b08e      	sub	sp, #56	; 0x38
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	60f8      	str	r0, [r7, #12]
 8013a18:	60b9      	str	r1, [r7, #8]
 8013a1a:	603b      	str	r3, [r7, #0]
 8013a1c:	4613      	mov	r3, r2
 8013a1e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8013a20:	2301      	movs	r3, #1
 8013a22:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d109      	bne.n	8013a3e <xTaskGenericNotifyFromISR+0x2e>
 8013a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a2e:	f383 8811 	msr	BASEPRI, r3
 8013a32:	f3bf 8f6f 	isb	sy
 8013a36:	f3bf 8f4f 	dsb	sy
 8013a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8013a3c:	e7fe      	b.n	8013a3c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a3e:	f7fd fdbd 	bl	80115bc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8013a46:	f3ef 8211 	mrs	r2, BASEPRI
 8013a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a4e:	f383 8811 	msr	BASEPRI, r3
 8013a52:	f3bf 8f6f 	isb	sy
 8013a56:	f3bf 8f4f 	dsb	sy
 8013a5a:	623a      	str	r2, [r7, #32]
 8013a5c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8013a5e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a60:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d003      	beq.n	8013a70 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a72:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7c:	2202      	movs	r2, #2
 8013a7e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8013a82:	79fb      	ldrb	r3, [r7, #7]
 8013a84:	2b04      	cmp	r3, #4
 8013a86:	d829      	bhi.n	8013adc <xTaskGenericNotifyFromISR+0xcc>
 8013a88:	a201      	add	r2, pc, #4	; (adr r2, 8013a90 <xTaskGenericNotifyFromISR+0x80>)
 8013a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a8e:	bf00      	nop
 8013a90:	08013afb 	.word	0x08013afb
 8013a94:	08013aa5 	.word	0x08013aa5
 8013a98:	08013ab3 	.word	0x08013ab3
 8013a9c:	08013abf 	.word	0x08013abf
 8013aa0:	08013ac7 	.word	0x08013ac7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	431a      	orrs	r2, r3
 8013aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aae:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013ab0:	e026      	b.n	8013b00 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ab6:	1c5a      	adds	r2, r3, #1
 8013ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aba:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013abc:	e020      	b.n	8013b00 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac0:	68ba      	ldr	r2, [r7, #8]
 8013ac2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013ac4:	e01c      	b.n	8013b00 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013ac6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013aca:	2b02      	cmp	r3, #2
 8013acc:	d003      	beq.n	8013ad6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013ad4:	e014      	b.n	8013b00 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8013ada:	e011      	b.n	8013b00 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ae4:	d00b      	beq.n	8013afe <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8013ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aea:	f383 8811 	msr	BASEPRI, r3
 8013aee:	f3bf 8f6f 	isb	sy
 8013af2:	f3bf 8f4f 	dsb	sy
 8013af6:	61bb      	str	r3, [r7, #24]
 8013af8:	e7fe      	b.n	8013af8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8013afa:	bf00      	nop
 8013afc:	e000      	b.n	8013b00 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8013afe:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013b00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d145      	bne.n	8013b94 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d009      	beq.n	8013b24 <xTaskGenericNotifyFromISR+0x114>
 8013b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b14:	f383 8811 	msr	BASEPRI, r3
 8013b18:	f3bf 8f6f 	isb	sy
 8013b1c:	f3bf 8f4f 	dsb	sy
 8013b20:	617b      	str	r3, [r7, #20]
 8013b22:	e7fe      	b.n	8013b22 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b24:	4b20      	ldr	r3, [pc, #128]	; (8013ba8 <xTaskGenericNotifyFromISR+0x198>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d11d      	bne.n	8013b68 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2e:	3304      	adds	r3, #4
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7fd fb3d 	bl	80111b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b3a:	4b1c      	ldr	r3, [pc, #112]	; (8013bac <xTaskGenericNotifyFromISR+0x19c>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d903      	bls.n	8013b4a <xTaskGenericNotifyFromISR+0x13a>
 8013b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b46:	4a19      	ldr	r2, [pc, #100]	; (8013bac <xTaskGenericNotifyFromISR+0x19c>)
 8013b48:	6013      	str	r3, [r2, #0]
 8013b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b4e:	4613      	mov	r3, r2
 8013b50:	009b      	lsls	r3, r3, #2
 8013b52:	4413      	add	r3, r2
 8013b54:	009b      	lsls	r3, r3, #2
 8013b56:	4a16      	ldr	r2, [pc, #88]	; (8013bb0 <xTaskGenericNotifyFromISR+0x1a0>)
 8013b58:	441a      	add	r2, r3
 8013b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b5c:	3304      	adds	r3, #4
 8013b5e:	4619      	mov	r1, r3
 8013b60:	4610      	mov	r0, r2
 8013b62:	f7fd fac8 	bl	80110f6 <vListInsertEnd>
 8013b66:	e005      	b.n	8013b74 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b6a:	3318      	adds	r3, #24
 8013b6c:	4619      	mov	r1, r3
 8013b6e:	4811      	ldr	r0, [pc, #68]	; (8013bb4 <xTaskGenericNotifyFromISR+0x1a4>)
 8013b70:	f7fd fac1 	bl	80110f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b78:	4b0f      	ldr	r3, [pc, #60]	; (8013bb8 <xTaskGenericNotifyFromISR+0x1a8>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d908      	bls.n	8013b94 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8013b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d002      	beq.n	8013b8e <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8013b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b8a:	2201      	movs	r2, #1
 8013b8c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8013b8e:	4b0b      	ldr	r3, [pc, #44]	; (8013bbc <xTaskGenericNotifyFromISR+0x1ac>)
 8013b90:	2201      	movs	r2, #1
 8013b92:	601a      	str	r2, [r3, #0]
 8013b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b96:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013b98:	693b      	ldr	r3, [r7, #16]
 8013b9a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8013b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	3738      	adds	r7, #56	; 0x38
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	20027478 	.word	0x20027478
 8013bac:	20027458 	.word	0x20027458
 8013bb0:	20026f80 	.word	0x20026f80
 8013bb4:	20027410 	.word	0x20027410
 8013bb8:	20026f7c 	.word	0x20026f7c
 8013bbc:	20027464 	.word	0x20027464

08013bc0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b084      	sub	sp, #16
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013bca:	4b21      	ldr	r3, [pc, #132]	; (8013c50 <prvAddCurrentTaskToDelayedList+0x90>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013bd0:	4b20      	ldr	r3, [pc, #128]	; (8013c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	3304      	adds	r3, #4
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7fd faea 	bl	80111b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013be2:	d10a      	bne.n	8013bfa <prvAddCurrentTaskToDelayedList+0x3a>
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d007      	beq.n	8013bfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013bea:	4b1a      	ldr	r3, [pc, #104]	; (8013c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	3304      	adds	r3, #4
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	4819      	ldr	r0, [pc, #100]	; (8013c58 <prvAddCurrentTaskToDelayedList+0x98>)
 8013bf4:	f7fd fa7f 	bl	80110f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013bf8:	e026      	b.n	8013c48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013bfa:	68fa      	ldr	r2, [r7, #12]
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	4413      	add	r3, r2
 8013c00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013c02:	4b14      	ldr	r3, [pc, #80]	; (8013c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	68ba      	ldr	r2, [r7, #8]
 8013c08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013c0a:	68ba      	ldr	r2, [r7, #8]
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d209      	bcs.n	8013c26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c12:	4b12      	ldr	r3, [pc, #72]	; (8013c5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8013c14:	681a      	ldr	r2, [r3, #0]
 8013c16:	4b0f      	ldr	r3, [pc, #60]	; (8013c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	3304      	adds	r3, #4
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	4610      	mov	r0, r2
 8013c20:	f7fd fa8d 	bl	801113e <vListInsert>
}
 8013c24:	e010      	b.n	8013c48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c26:	4b0e      	ldr	r3, [pc, #56]	; (8013c60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013c28:	681a      	ldr	r2, [r3, #0]
 8013c2a:	4b0a      	ldr	r3, [pc, #40]	; (8013c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	3304      	adds	r3, #4
 8013c30:	4619      	mov	r1, r3
 8013c32:	4610      	mov	r0, r2
 8013c34:	f7fd fa83 	bl	801113e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013c38:	4b0a      	ldr	r3, [pc, #40]	; (8013c64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	68ba      	ldr	r2, [r7, #8]
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d202      	bcs.n	8013c48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013c42:	4a08      	ldr	r2, [pc, #32]	; (8013c64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	6013      	str	r3, [r2, #0]
}
 8013c48:	bf00      	nop
 8013c4a:	3710      	adds	r7, #16
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}
 8013c50:	20027454 	.word	0x20027454
 8013c54:	20026f7c 	.word	0x20026f7c
 8013c58:	2002743c 	.word	0x2002743c
 8013c5c:	2002740c 	.word	0x2002740c
 8013c60:	20027408 	.word	0x20027408
 8013c64:	20027470 	.word	0x20027470

08013c68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b08a      	sub	sp, #40	; 0x28
 8013c6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013c72:	f000 fb97 	bl	80143a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013c76:	4b1c      	ldr	r3, [pc, #112]	; (8013ce8 <xTimerCreateTimerTask+0x80>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d021      	beq.n	8013cc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013c82:	2300      	movs	r3, #0
 8013c84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013c86:	1d3a      	adds	r2, r7, #4
 8013c88:	f107 0108 	add.w	r1, r7, #8
 8013c8c:	f107 030c 	add.w	r3, r7, #12
 8013c90:	4618      	mov	r0, r3
 8013c92:	f7fd f80d 	bl	8010cb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013c96:	6879      	ldr	r1, [r7, #4]
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	68fa      	ldr	r2, [r7, #12]
 8013c9c:	9202      	str	r2, [sp, #8]
 8013c9e:	9301      	str	r3, [sp, #4]
 8013ca0:	2302      	movs	r3, #2
 8013ca2:	9300      	str	r3, [sp, #0]
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	460a      	mov	r2, r1
 8013ca8:	4910      	ldr	r1, [pc, #64]	; (8013cec <xTimerCreateTimerTask+0x84>)
 8013caa:	4811      	ldr	r0, [pc, #68]	; (8013cf0 <xTimerCreateTimerTask+0x88>)
 8013cac:	f7fe fd66 	bl	801277c <xTaskCreateStatic>
 8013cb0:	4602      	mov	r2, r0
 8013cb2:	4b10      	ldr	r3, [pc, #64]	; (8013cf4 <xTimerCreateTimerTask+0x8c>)
 8013cb4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013cb6:	4b0f      	ldr	r3, [pc, #60]	; (8013cf4 <xTimerCreateTimerTask+0x8c>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d001      	beq.n	8013cc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d109      	bne.n	8013cdc <xTimerCreateTimerTask+0x74>
	__asm volatile
 8013cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ccc:	f383 8811 	msr	BASEPRI, r3
 8013cd0:	f3bf 8f6f 	isb	sy
 8013cd4:	f3bf 8f4f 	dsb	sy
 8013cd8:	613b      	str	r3, [r7, #16]
 8013cda:	e7fe      	b.n	8013cda <xTimerCreateTimerTask+0x72>
	return xReturn;
 8013cdc:	697b      	ldr	r3, [r7, #20]
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3718      	adds	r7, #24
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}
 8013ce6:	bf00      	nop
 8013ce8:	200274b4 	.word	0x200274b4
 8013cec:	0801b3d8 	.word	0x0801b3d8
 8013cf0:	08013f59 	.word	0x08013f59
 8013cf4:	200274b8 	.word	0x200274b8

08013cf8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b088      	sub	sp, #32
 8013cfc:	af02      	add	r7, sp, #8
 8013cfe:	60f8      	str	r0, [r7, #12]
 8013d00:	60b9      	str	r1, [r7, #8]
 8013d02:	607a      	str	r2, [r7, #4]
 8013d04:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8013d06:	202c      	movs	r0, #44	; 0x2c
 8013d08:	f7fc ffec 	bl	8010ce4 <pvPortMalloc>
 8013d0c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d00d      	beq.n	8013d30 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	2200      	movs	r2, #0
 8013d18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013d1c:	697b      	ldr	r3, [r7, #20]
 8013d1e:	9301      	str	r3, [sp, #4]
 8013d20:	6a3b      	ldr	r3, [r7, #32]
 8013d22:	9300      	str	r3, [sp, #0]
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	687a      	ldr	r2, [r7, #4]
 8013d28:	68b9      	ldr	r1, [r7, #8]
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	f000 f841 	bl	8013db2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8013d30:	697b      	ldr	r3, [r7, #20]
	}
 8013d32:	4618      	mov	r0, r3
 8013d34:	3718      	adds	r7, #24
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}

08013d3a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8013d3a:	b580      	push	{r7, lr}
 8013d3c:	b08a      	sub	sp, #40	; 0x28
 8013d3e:	af02      	add	r7, sp, #8
 8013d40:	60f8      	str	r0, [r7, #12]
 8013d42:	60b9      	str	r1, [r7, #8]
 8013d44:	607a      	str	r2, [r7, #4]
 8013d46:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8013d48:	232c      	movs	r3, #44	; 0x2c
 8013d4a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	2b2c      	cmp	r3, #44	; 0x2c
 8013d50:	d009      	beq.n	8013d66 <xTimerCreateStatic+0x2c>
 8013d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d56:	f383 8811 	msr	BASEPRI, r3
 8013d5a:	f3bf 8f6f 	isb	sy
 8013d5e:	f3bf 8f4f 	dsb	sy
 8013d62:	61bb      	str	r3, [r7, #24]
 8013d64:	e7fe      	b.n	8013d64 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013d66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8013d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d109      	bne.n	8013d82 <xTimerCreateStatic+0x48>
 8013d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d72:	f383 8811 	msr	BASEPRI, r3
 8013d76:	f3bf 8f6f 	isb	sy
 8013d7a:	f3bf 8f4f 	dsb	sy
 8013d7e:	617b      	str	r3, [r7, #20]
 8013d80:	e7fe      	b.n	8013d80 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8013d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d84:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8013d86:	69fb      	ldr	r3, [r7, #28]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d00d      	beq.n	8013da8 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8013d8c:	69fb      	ldr	r3, [r7, #28]
 8013d8e:	2202      	movs	r2, #2
 8013d90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013d94:	69fb      	ldr	r3, [r7, #28]
 8013d96:	9301      	str	r3, [sp, #4]
 8013d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d9a:	9300      	str	r3, [sp, #0]
 8013d9c:	683b      	ldr	r3, [r7, #0]
 8013d9e:	687a      	ldr	r2, [r7, #4]
 8013da0:	68b9      	ldr	r1, [r7, #8]
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	f000 f805 	bl	8013db2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8013da8:	69fb      	ldr	r3, [r7, #28]
	}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3720      	adds	r7, #32
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}

08013db2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8013db2:	b580      	push	{r7, lr}
 8013db4:	b086      	sub	sp, #24
 8013db6:	af00      	add	r7, sp, #0
 8013db8:	60f8      	str	r0, [r7, #12]
 8013dba:	60b9      	str	r1, [r7, #8]
 8013dbc:	607a      	str	r2, [r7, #4]
 8013dbe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8013dc0:	68bb      	ldr	r3, [r7, #8]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d109      	bne.n	8013dda <prvInitialiseNewTimer+0x28>
 8013dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dca:	f383 8811 	msr	BASEPRI, r3
 8013dce:	f3bf 8f6f 	isb	sy
 8013dd2:	f3bf 8f4f 	dsb	sy
 8013dd6:	617b      	str	r3, [r7, #20]
 8013dd8:	e7fe      	b.n	8013dd8 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8013dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d01e      	beq.n	8013e1e <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8013de0:	f000 fae0 	bl	80143a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8013de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de6:	68fa      	ldr	r2, [r7, #12]
 8013de8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8013dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dec:	68ba      	ldr	r2, [r7, #8]
 8013dee:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8013df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df2:	683a      	ldr	r2, [r7, #0]
 8013df4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8013df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df8:	6a3a      	ldr	r2, [r7, #32]
 8013dfa:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8013dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dfe:	3304      	adds	r3, #4
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7fd f96b 	bl	80110dc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d008      	beq.n	8013e1e <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8013e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e12:	f043 0304 	orr.w	r3, r3, #4
 8013e16:	b2da      	uxtb	r2, r3
 8013e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8013e1e:	bf00      	nop
 8013e20:	3718      	adds	r7, #24
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
	...

08013e28 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b08a      	sub	sp, #40	; 0x28
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	60f8      	str	r0, [r7, #12]
 8013e30:	60b9      	str	r1, [r7, #8]
 8013e32:	607a      	str	r2, [r7, #4]
 8013e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013e36:	2300      	movs	r3, #0
 8013e38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d109      	bne.n	8013e54 <xTimerGenericCommand+0x2c>
 8013e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e44:	f383 8811 	msr	BASEPRI, r3
 8013e48:	f3bf 8f6f 	isb	sy
 8013e4c:	f3bf 8f4f 	dsb	sy
 8013e50:	623b      	str	r3, [r7, #32]
 8013e52:	e7fe      	b.n	8013e52 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013e54:	4b19      	ldr	r3, [pc, #100]	; (8013ebc <xTimerGenericCommand+0x94>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d02a      	beq.n	8013eb2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	2b05      	cmp	r3, #5
 8013e6c:	dc18      	bgt.n	8013ea0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013e6e:	f7ff fb39 	bl	80134e4 <xTaskGetSchedulerState>
 8013e72:	4603      	mov	r3, r0
 8013e74:	2b02      	cmp	r3, #2
 8013e76:	d109      	bne.n	8013e8c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013e78:	4b10      	ldr	r3, [pc, #64]	; (8013ebc <xTimerGenericCommand+0x94>)
 8013e7a:	6818      	ldr	r0, [r3, #0]
 8013e7c:	f107 0110 	add.w	r1, r7, #16
 8013e80:	2300      	movs	r3, #0
 8013e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e84:	f7fd fe30 	bl	8011ae8 <xQueueGenericSend>
 8013e88:	6278      	str	r0, [r7, #36]	; 0x24
 8013e8a:	e012      	b.n	8013eb2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013e8c:	4b0b      	ldr	r3, [pc, #44]	; (8013ebc <xTimerGenericCommand+0x94>)
 8013e8e:	6818      	ldr	r0, [r3, #0]
 8013e90:	f107 0110 	add.w	r1, r7, #16
 8013e94:	2300      	movs	r3, #0
 8013e96:	2200      	movs	r2, #0
 8013e98:	f7fd fe26 	bl	8011ae8 <xQueueGenericSend>
 8013e9c:	6278      	str	r0, [r7, #36]	; 0x24
 8013e9e:	e008      	b.n	8013eb2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013ea0:	4b06      	ldr	r3, [pc, #24]	; (8013ebc <xTimerGenericCommand+0x94>)
 8013ea2:	6818      	ldr	r0, [r3, #0]
 8013ea4:	f107 0110 	add.w	r1, r7, #16
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	683a      	ldr	r2, [r7, #0]
 8013eac:	f7fd ff16 	bl	8011cdc <xQueueGenericSendFromISR>
 8013eb0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3728      	adds	r7, #40	; 0x28
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}
 8013ebc:	200274b4 	.word	0x200274b4

08013ec0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b088      	sub	sp, #32
 8013ec4:	af02      	add	r7, sp, #8
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013eca:	4b22      	ldr	r3, [pc, #136]	; (8013f54 <prvProcessExpiredTimer+0x94>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	68db      	ldr	r3, [r3, #12]
 8013ed2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	3304      	adds	r3, #4
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7fd f969 	bl	80111b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ee4:	f003 0304 	and.w	r3, r3, #4
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d021      	beq.n	8013f30 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	699a      	ldr	r2, [r3, #24]
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	18d1      	adds	r1, r2, r3
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	683a      	ldr	r2, [r7, #0]
 8013ef8:	6978      	ldr	r0, [r7, #20]
 8013efa:	f000 f8d1 	bl	80140a0 <prvInsertTimerInActiveList>
 8013efe:	4603      	mov	r3, r0
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d01e      	beq.n	8013f42 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013f04:	2300      	movs	r3, #0
 8013f06:	9300      	str	r3, [sp, #0]
 8013f08:	2300      	movs	r3, #0
 8013f0a:	687a      	ldr	r2, [r7, #4]
 8013f0c:	2100      	movs	r1, #0
 8013f0e:	6978      	ldr	r0, [r7, #20]
 8013f10:	f7ff ff8a 	bl	8013e28 <xTimerGenericCommand>
 8013f14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013f16:	693b      	ldr	r3, [r7, #16]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d112      	bne.n	8013f42 <prvProcessExpiredTimer+0x82>
 8013f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f20:	f383 8811 	msr	BASEPRI, r3
 8013f24:	f3bf 8f6f 	isb	sy
 8013f28:	f3bf 8f4f 	dsb	sy
 8013f2c:	60fb      	str	r3, [r7, #12]
 8013f2e:	e7fe      	b.n	8013f2e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f36:	f023 0301 	bic.w	r3, r3, #1
 8013f3a:	b2da      	uxtb	r2, r3
 8013f3c:	697b      	ldr	r3, [r7, #20]
 8013f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	6a1b      	ldr	r3, [r3, #32]
 8013f46:	6978      	ldr	r0, [r7, #20]
 8013f48:	4798      	blx	r3
}
 8013f4a:	bf00      	nop
 8013f4c:	3718      	adds	r7, #24
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
 8013f52:	bf00      	nop
 8013f54:	200274ac 	.word	0x200274ac

08013f58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b084      	sub	sp, #16
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013f60:	f107 0308 	add.w	r3, r7, #8
 8013f64:	4618      	mov	r0, r3
 8013f66:	f000 f857 	bl	8014018 <prvGetNextExpireTime>
 8013f6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	4619      	mov	r1, r3
 8013f70:	68f8      	ldr	r0, [r7, #12]
 8013f72:	f000 f803 	bl	8013f7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013f76:	f000 f8d5 	bl	8014124 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013f7a:	e7f1      	b.n	8013f60 <prvTimerTask+0x8>

08013f7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013f86:	f7fe fe37 	bl	8012bf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013f8a:	f107 0308 	add.w	r3, r7, #8
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f000 f866 	bl	8014060 <prvSampleTimeNow>
 8013f94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d130      	bne.n	8013ffe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d10a      	bne.n	8013fb8 <prvProcessTimerOrBlockTask+0x3c>
 8013fa2:	687a      	ldr	r2, [r7, #4]
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	429a      	cmp	r2, r3
 8013fa8:	d806      	bhi.n	8013fb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013faa:	f7fe fe6b 	bl	8012c84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013fae:	68f9      	ldr	r1, [r7, #12]
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f7ff ff85 	bl	8013ec0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013fb6:	e024      	b.n	8014002 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d008      	beq.n	8013fd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013fbe:	4b13      	ldr	r3, [pc, #76]	; (801400c <prvProcessTimerOrBlockTask+0x90>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d101      	bne.n	8013fcc <prvProcessTimerOrBlockTask+0x50>
 8013fc8:	2301      	movs	r3, #1
 8013fca:	e000      	b.n	8013fce <prvProcessTimerOrBlockTask+0x52>
 8013fcc:	2300      	movs	r3, #0
 8013fce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013fd0:	4b0f      	ldr	r3, [pc, #60]	; (8014010 <prvProcessTimerOrBlockTask+0x94>)
 8013fd2:	6818      	ldr	r0, [r3, #0]
 8013fd4:	687a      	ldr	r2, [r7, #4]
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	1ad3      	subs	r3, r2, r3
 8013fda:	683a      	ldr	r2, [r7, #0]
 8013fdc:	4619      	mov	r1, r3
 8013fde:	f7fe fb99 	bl	8012714 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013fe2:	f7fe fe4f 	bl	8012c84 <xTaskResumeAll>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d10a      	bne.n	8014002 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013fec:	4b09      	ldr	r3, [pc, #36]	; (8014014 <prvProcessTimerOrBlockTask+0x98>)
 8013fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ff2:	601a      	str	r2, [r3, #0]
 8013ff4:	f3bf 8f4f 	dsb	sy
 8013ff8:	f3bf 8f6f 	isb	sy
}
 8013ffc:	e001      	b.n	8014002 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013ffe:	f7fe fe41 	bl	8012c84 <xTaskResumeAll>
}
 8014002:	bf00      	nop
 8014004:	3710      	adds	r7, #16
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}
 801400a:	bf00      	nop
 801400c:	200274b0 	.word	0x200274b0
 8014010:	200274b4 	.word	0x200274b4
 8014014:	e000ed04 	.word	0xe000ed04

08014018 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014018:	b480      	push	{r7}
 801401a:	b085      	sub	sp, #20
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014020:	4b0e      	ldr	r3, [pc, #56]	; (801405c <prvGetNextExpireTime+0x44>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d101      	bne.n	801402e <prvGetNextExpireTime+0x16>
 801402a:	2201      	movs	r2, #1
 801402c:	e000      	b.n	8014030 <prvGetNextExpireTime+0x18>
 801402e:	2200      	movs	r2, #0
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d105      	bne.n	8014048 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801403c:	4b07      	ldr	r3, [pc, #28]	; (801405c <prvGetNextExpireTime+0x44>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	60fb      	str	r3, [r7, #12]
 8014046:	e001      	b.n	801404c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014048:	2300      	movs	r3, #0
 801404a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801404c:	68fb      	ldr	r3, [r7, #12]
}
 801404e:	4618      	mov	r0, r3
 8014050:	3714      	adds	r7, #20
 8014052:	46bd      	mov	sp, r7
 8014054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014058:	4770      	bx	lr
 801405a:	bf00      	nop
 801405c:	200274ac 	.word	0x200274ac

08014060 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b084      	sub	sp, #16
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014068:	f7fe fea8 	bl	8012dbc <xTaskGetTickCount>
 801406c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801406e:	4b0b      	ldr	r3, [pc, #44]	; (801409c <prvSampleTimeNow+0x3c>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	68fa      	ldr	r2, [r7, #12]
 8014074:	429a      	cmp	r2, r3
 8014076:	d205      	bcs.n	8014084 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014078:	f000 f930 	bl	80142dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2201      	movs	r2, #1
 8014080:	601a      	str	r2, [r3, #0]
 8014082:	e002      	b.n	801408a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2200      	movs	r2, #0
 8014088:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801408a:	4a04      	ldr	r2, [pc, #16]	; (801409c <prvSampleTimeNow+0x3c>)
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014090:	68fb      	ldr	r3, [r7, #12]
}
 8014092:	4618      	mov	r0, r3
 8014094:	3710      	adds	r7, #16
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	200274bc 	.word	0x200274bc

080140a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b086      	sub	sp, #24
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	60f8      	str	r0, [r7, #12]
 80140a8:	60b9      	str	r1, [r7, #8]
 80140aa:	607a      	str	r2, [r7, #4]
 80140ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80140ae:	2300      	movs	r3, #0
 80140b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	68ba      	ldr	r2, [r7, #8]
 80140b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	68fa      	ldr	r2, [r7, #12]
 80140bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80140be:	68ba      	ldr	r2, [r7, #8]
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d812      	bhi.n	80140ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140c6:	687a      	ldr	r2, [r7, #4]
 80140c8:	683b      	ldr	r3, [r7, #0]
 80140ca:	1ad2      	subs	r2, r2, r3
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	699b      	ldr	r3, [r3, #24]
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d302      	bcc.n	80140da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80140d4:	2301      	movs	r3, #1
 80140d6:	617b      	str	r3, [r7, #20]
 80140d8:	e01b      	b.n	8014112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80140da:	4b10      	ldr	r3, [pc, #64]	; (801411c <prvInsertTimerInActiveList+0x7c>)
 80140dc:	681a      	ldr	r2, [r3, #0]
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	3304      	adds	r3, #4
 80140e2:	4619      	mov	r1, r3
 80140e4:	4610      	mov	r0, r2
 80140e6:	f7fd f82a 	bl	801113e <vListInsert>
 80140ea:	e012      	b.n	8014112 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80140ec:	687a      	ldr	r2, [r7, #4]
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d206      	bcs.n	8014102 <prvInsertTimerInActiveList+0x62>
 80140f4:	68ba      	ldr	r2, [r7, #8]
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d302      	bcc.n	8014102 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80140fc:	2301      	movs	r3, #1
 80140fe:	617b      	str	r3, [r7, #20]
 8014100:	e007      	b.n	8014112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014102:	4b07      	ldr	r3, [pc, #28]	; (8014120 <prvInsertTimerInActiveList+0x80>)
 8014104:	681a      	ldr	r2, [r3, #0]
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	3304      	adds	r3, #4
 801410a:	4619      	mov	r1, r3
 801410c:	4610      	mov	r0, r2
 801410e:	f7fd f816 	bl	801113e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014112:	697b      	ldr	r3, [r7, #20]
}
 8014114:	4618      	mov	r0, r3
 8014116:	3718      	adds	r7, #24
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}
 801411c:	200274b0 	.word	0x200274b0
 8014120:	200274ac 	.word	0x200274ac

08014124 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b08e      	sub	sp, #56	; 0x38
 8014128:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801412a:	e0c6      	b.n	80142ba <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	da17      	bge.n	8014162 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014132:	1d3b      	adds	r3, r7, #4
 8014134:	3304      	adds	r3, #4
 8014136:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801413a:	2b00      	cmp	r3, #0
 801413c:	d109      	bne.n	8014152 <prvProcessReceivedCommands+0x2e>
 801413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014142:	f383 8811 	msr	BASEPRI, r3
 8014146:	f3bf 8f6f 	isb	sy
 801414a:	f3bf 8f4f 	dsb	sy
 801414e:	61fb      	str	r3, [r7, #28]
 8014150:	e7fe      	b.n	8014150 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014158:	6850      	ldr	r0, [r2, #4]
 801415a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801415c:	6892      	ldr	r2, [r2, #8]
 801415e:	4611      	mov	r1, r2
 8014160:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	2b00      	cmp	r3, #0
 8014166:	f2c0 80a7 	blt.w	80142b8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014170:	695b      	ldr	r3, [r3, #20]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d004      	beq.n	8014180 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014178:	3304      	adds	r3, #4
 801417a:	4618      	mov	r0, r3
 801417c:	f7fd f818 	bl	80111b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014180:	463b      	mov	r3, r7
 8014182:	4618      	mov	r0, r3
 8014184:	f7ff ff6c 	bl	8014060 <prvSampleTimeNow>
 8014188:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	2b09      	cmp	r3, #9
 801418e:	f200 8094 	bhi.w	80142ba <prvProcessReceivedCommands+0x196>
 8014192:	a201      	add	r2, pc, #4	; (adr r2, 8014198 <prvProcessReceivedCommands+0x74>)
 8014194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014198:	080141c1 	.word	0x080141c1
 801419c:	080141c1 	.word	0x080141c1
 80141a0:	080141c1 	.word	0x080141c1
 80141a4:	08014233 	.word	0x08014233
 80141a8:	08014247 	.word	0x08014247
 80141ac:	0801428f 	.word	0x0801428f
 80141b0:	080141c1 	.word	0x080141c1
 80141b4:	080141c1 	.word	0x080141c1
 80141b8:	08014233 	.word	0x08014233
 80141bc:	08014247 	.word	0x08014247
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80141c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141c6:	f043 0301 	orr.w	r3, r3, #1
 80141ca:	b2da      	uxtb	r2, r3
 80141cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80141d2:	68ba      	ldr	r2, [r7, #8]
 80141d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d6:	699b      	ldr	r3, [r3, #24]
 80141d8:	18d1      	adds	r1, r2, r3
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141e0:	f7ff ff5e 	bl	80140a0 <prvInsertTimerInActiveList>
 80141e4:	4603      	mov	r3, r0
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d067      	beq.n	80142ba <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80141ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ec:	6a1b      	ldr	r3, [r3, #32]
 80141ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80141f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141f8:	f003 0304 	and.w	r3, r3, #4
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d05c      	beq.n	80142ba <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014200:	68ba      	ldr	r2, [r7, #8]
 8014202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014204:	699b      	ldr	r3, [r3, #24]
 8014206:	441a      	add	r2, r3
 8014208:	2300      	movs	r3, #0
 801420a:	9300      	str	r3, [sp, #0]
 801420c:	2300      	movs	r3, #0
 801420e:	2100      	movs	r1, #0
 8014210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014212:	f7ff fe09 	bl	8013e28 <xTimerGenericCommand>
 8014216:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014218:	6a3b      	ldr	r3, [r7, #32]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d14d      	bne.n	80142ba <prvProcessReceivedCommands+0x196>
 801421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014222:	f383 8811 	msr	BASEPRI, r3
 8014226:	f3bf 8f6f 	isb	sy
 801422a:	f3bf 8f4f 	dsb	sy
 801422e:	61bb      	str	r3, [r7, #24]
 8014230:	e7fe      	b.n	8014230 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014238:	f023 0301 	bic.w	r3, r3, #1
 801423c:	b2da      	uxtb	r2, r3
 801423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014240:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014244:	e039      	b.n	80142ba <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801424c:	f043 0301 	orr.w	r3, r3, #1
 8014250:	b2da      	uxtb	r2, r3
 8014252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014254:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014258:	68ba      	ldr	r2, [r7, #8]
 801425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801425c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014260:	699b      	ldr	r3, [r3, #24]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d109      	bne.n	801427a <prvProcessReceivedCommands+0x156>
 8014266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801426a:	f383 8811 	msr	BASEPRI, r3
 801426e:	f3bf 8f6f 	isb	sy
 8014272:	f3bf 8f4f 	dsb	sy
 8014276:	617b      	str	r3, [r7, #20]
 8014278:	e7fe      	b.n	8014278 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801427c:	699a      	ldr	r2, [r3, #24]
 801427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014280:	18d1      	adds	r1, r2, r3
 8014282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014288:	f7ff ff0a 	bl	80140a0 <prvInsertTimerInActiveList>
					break;
 801428c:	e015      	b.n	80142ba <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014294:	f003 0302 	and.w	r3, r3, #2
 8014298:	2b00      	cmp	r3, #0
 801429a:	d103      	bne.n	80142a4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801429c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801429e:	f7fc fde7 	bl	8010e70 <vPortFree>
 80142a2:	e00a      	b.n	80142ba <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80142a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80142aa:	f023 0301 	bic.w	r3, r3, #1
 80142ae:	b2da      	uxtb	r2, r3
 80142b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80142b6:	e000      	b.n	80142ba <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80142b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80142ba:	4b07      	ldr	r3, [pc, #28]	; (80142d8 <prvProcessReceivedCommands+0x1b4>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	1d39      	adds	r1, r7, #4
 80142c0:	2200      	movs	r2, #0
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7fd fe28 	bl	8011f18 <xQueueReceive>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	f47f af2e 	bne.w	801412c <prvProcessReceivedCommands+0x8>
	}
}
 80142d0:	bf00      	nop
 80142d2:	3730      	adds	r7, #48	; 0x30
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}
 80142d8:	200274b4 	.word	0x200274b4

080142dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b088      	sub	sp, #32
 80142e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80142e2:	e047      	b.n	8014374 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80142e4:	4b2d      	ldr	r3, [pc, #180]	; (801439c <prvSwitchTimerLists+0xc0>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	68db      	ldr	r3, [r3, #12]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142ee:	4b2b      	ldr	r3, [pc, #172]	; (801439c <prvSwitchTimerLists+0xc0>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	68db      	ldr	r3, [r3, #12]
 80142f4:	68db      	ldr	r3, [r3, #12]
 80142f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	3304      	adds	r3, #4
 80142fc:	4618      	mov	r0, r3
 80142fe:	f7fc ff57 	bl	80111b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	6a1b      	ldr	r3, [r3, #32]
 8014306:	68f8      	ldr	r0, [r7, #12]
 8014308:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014310:	f003 0304 	and.w	r3, r3, #4
 8014314:	2b00      	cmp	r3, #0
 8014316:	d02d      	beq.n	8014374 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	699b      	ldr	r3, [r3, #24]
 801431c:	693a      	ldr	r2, [r7, #16]
 801431e:	4413      	add	r3, r2
 8014320:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014322:	68ba      	ldr	r2, [r7, #8]
 8014324:	693b      	ldr	r3, [r7, #16]
 8014326:	429a      	cmp	r2, r3
 8014328:	d90e      	bls.n	8014348 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	68ba      	ldr	r2, [r7, #8]
 801432e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	68fa      	ldr	r2, [r7, #12]
 8014334:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014336:	4b19      	ldr	r3, [pc, #100]	; (801439c <prvSwitchTimerLists+0xc0>)
 8014338:	681a      	ldr	r2, [r3, #0]
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	3304      	adds	r3, #4
 801433e:	4619      	mov	r1, r3
 8014340:	4610      	mov	r0, r2
 8014342:	f7fc fefc 	bl	801113e <vListInsert>
 8014346:	e015      	b.n	8014374 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014348:	2300      	movs	r3, #0
 801434a:	9300      	str	r3, [sp, #0]
 801434c:	2300      	movs	r3, #0
 801434e:	693a      	ldr	r2, [r7, #16]
 8014350:	2100      	movs	r1, #0
 8014352:	68f8      	ldr	r0, [r7, #12]
 8014354:	f7ff fd68 	bl	8013e28 <xTimerGenericCommand>
 8014358:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d109      	bne.n	8014374 <prvSwitchTimerLists+0x98>
 8014360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014364:	f383 8811 	msr	BASEPRI, r3
 8014368:	f3bf 8f6f 	isb	sy
 801436c:	f3bf 8f4f 	dsb	sy
 8014370:	603b      	str	r3, [r7, #0]
 8014372:	e7fe      	b.n	8014372 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014374:	4b09      	ldr	r3, [pc, #36]	; (801439c <prvSwitchTimerLists+0xc0>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d1b2      	bne.n	80142e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801437e:	4b07      	ldr	r3, [pc, #28]	; (801439c <prvSwitchTimerLists+0xc0>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014384:	4b06      	ldr	r3, [pc, #24]	; (80143a0 <prvSwitchTimerLists+0xc4>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	4a04      	ldr	r2, [pc, #16]	; (801439c <prvSwitchTimerLists+0xc0>)
 801438a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801438c:	4a04      	ldr	r2, [pc, #16]	; (80143a0 <prvSwitchTimerLists+0xc4>)
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	6013      	str	r3, [r2, #0]
}
 8014392:	bf00      	nop
 8014394:	3718      	adds	r7, #24
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}
 801439a:	bf00      	nop
 801439c:	200274ac 	.word	0x200274ac
 80143a0:	200274b0 	.word	0x200274b0

080143a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b082      	sub	sp, #8
 80143a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80143aa:	f7fd f84f 	bl	801144c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80143ae:	4b15      	ldr	r3, [pc, #84]	; (8014404 <prvCheckForValidListAndQueue+0x60>)
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d120      	bne.n	80143f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80143b6:	4814      	ldr	r0, [pc, #80]	; (8014408 <prvCheckForValidListAndQueue+0x64>)
 80143b8:	f7fc fe70 	bl	801109c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80143bc:	4813      	ldr	r0, [pc, #76]	; (801440c <prvCheckForValidListAndQueue+0x68>)
 80143be:	f7fc fe6d 	bl	801109c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80143c2:	4b13      	ldr	r3, [pc, #76]	; (8014410 <prvCheckForValidListAndQueue+0x6c>)
 80143c4:	4a10      	ldr	r2, [pc, #64]	; (8014408 <prvCheckForValidListAndQueue+0x64>)
 80143c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80143c8:	4b12      	ldr	r3, [pc, #72]	; (8014414 <prvCheckForValidListAndQueue+0x70>)
 80143ca:	4a10      	ldr	r2, [pc, #64]	; (801440c <prvCheckForValidListAndQueue+0x68>)
 80143cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80143ce:	2300      	movs	r3, #0
 80143d0:	9300      	str	r3, [sp, #0]
 80143d2:	4b11      	ldr	r3, [pc, #68]	; (8014418 <prvCheckForValidListAndQueue+0x74>)
 80143d4:	4a11      	ldr	r2, [pc, #68]	; (801441c <prvCheckForValidListAndQueue+0x78>)
 80143d6:	2110      	movs	r1, #16
 80143d8:	200a      	movs	r0, #10
 80143da:	f7fd f995 	bl	8011708 <xQueueGenericCreateStatic>
 80143de:	4602      	mov	r2, r0
 80143e0:	4b08      	ldr	r3, [pc, #32]	; (8014404 <prvCheckForValidListAndQueue+0x60>)
 80143e2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80143e4:	4b07      	ldr	r3, [pc, #28]	; (8014404 <prvCheckForValidListAndQueue+0x60>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d005      	beq.n	80143f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80143ec:	4b05      	ldr	r3, [pc, #20]	; (8014404 <prvCheckForValidListAndQueue+0x60>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	490b      	ldr	r1, [pc, #44]	; (8014420 <prvCheckForValidListAndQueue+0x7c>)
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7fe f93c 	bl	8012670 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80143f8:	f7fd f856 	bl	80114a8 <vPortExitCritical>
}
 80143fc:	bf00      	nop
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}
 8014402:	bf00      	nop
 8014404:	200274b4 	.word	0x200274b4
 8014408:	20027484 	.word	0x20027484
 801440c:	20027498 	.word	0x20027498
 8014410:	200274ac 	.word	0x200274ac
 8014414:	200274b0 	.word	0x200274b0
 8014418:	20027560 	.word	0x20027560
 801441c:	200274c0 	.word	0x200274c0
 8014420:	0801b3e0 	.word	0x0801b3e0

08014424 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b086      	sub	sp, #24
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d109      	bne.n	801444a <xTimerIsTimerActive+0x26>
 8014436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801443a:	f383 8811 	msr	BASEPRI, r3
 801443e:	f3bf 8f6f 	isb	sy
 8014442:	f3bf 8f4f 	dsb	sy
 8014446:	60fb      	str	r3, [r7, #12]
 8014448:	e7fe      	b.n	8014448 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 801444a:	f7fc ffff 	bl	801144c <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014454:	f003 0301 	and.w	r3, r3, #1
 8014458:	2b00      	cmp	r3, #0
 801445a:	d102      	bne.n	8014462 <xTimerIsTimerActive+0x3e>
		{
			xReturn = pdFALSE;
 801445c:	2300      	movs	r3, #0
 801445e:	617b      	str	r3, [r7, #20]
 8014460:	e001      	b.n	8014466 <xTimerIsTimerActive+0x42>
		}
		else
		{
			xReturn = pdTRUE;
 8014462:	2301      	movs	r3, #1
 8014464:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8014466:	f7fd f81f 	bl	80114a8 <vPortExitCritical>

	return xReturn;
 801446a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 801446c:	4618      	mov	r0, r3
 801446e:	3718      	adds	r7, #24
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}

08014474 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b086      	sub	sp, #24
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d109      	bne.n	801449a <pvTimerGetTimerID+0x26>
 8014486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801448a:	f383 8811 	msr	BASEPRI, r3
 801448e:	f3bf 8f6f 	isb	sy
 8014492:	f3bf 8f4f 	dsb	sy
 8014496:	60fb      	str	r3, [r7, #12]
 8014498:	e7fe      	b.n	8014498 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 801449a:	f7fc ffd7 	bl	801144c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	69db      	ldr	r3, [r3, #28]
 80144a2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80144a4:	f7fd f800 	bl	80114a8 <vPortExitCritical>

	return pvReturn;
 80144a8:	693b      	ldr	r3, [r7, #16]
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3718      	adds	r7, #24
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}

080144b2 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 80144b2:	b580      	push	{r7, lr}
 80144b4:	b084      	sub	sp, #16
 80144b6:	af00      	add	r7, sp, #0
 80144b8:	6078      	str	r0, [r7, #4]
 80144ba:	460b      	mov	r3, r1
 80144bc:	70fb      	strb	r3, [r7, #3]
 80144be:	4613      	mov	r3, r2
 80144c0:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 80144c2:	f004 f8a7 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80144c6:	f004 f843 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 80144ca:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	2200      	movs	r2, #0
 80144d0:	f062 0260 	orn	r2, r2, #96	; 0x60
 80144d4:	701a      	strb	r2, [r3, #0]
 80144d6:	2200      	movs	r2, #0
 80144d8:	705a      	strb	r2, [r3, #1]
 80144da:	2200      	movs	r2, #0
 80144dc:	709a      	strb	r2, [r3, #2]
 80144de:	2200      	movs	r2, #0
 80144e0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	2200      	movs	r2, #0
 80144e6:	f042 0203 	orr.w	r2, r2, #3
 80144ea:	711a      	strb	r2, [r3, #4]
 80144ec:	2200      	movs	r2, #0
 80144ee:	715a      	strb	r2, [r3, #5]
 80144f0:	2200      	movs	r2, #0
 80144f2:	719a      	strb	r2, [r3, #6]
 80144f4:	2200      	movs	r2, #0
 80144f6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 80144fe:	78fa      	ldrb	r2, [r7, #3]
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8014504:	78ba      	ldrb	r2, [r7, #2]
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 801450a:	f004 f845 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801450e:	f004 f82b 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014512:	60f8      	str	r0, [r7, #12]
}
 8014514:	bf00      	nop
 8014516:	3710      	adds	r7, #16
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}

0801451c <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b086      	sub	sp, #24
 8014520:	af00      	add	r7, sp, #0
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	60b9      	str	r1, [r7, #8]
 8014526:	4613      	mov	r3, r2
 8014528:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 801452a:	f004 f873 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801452e:	f004 f80f 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014532:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8014534:	697b      	ldr	r3, [r7, #20]
 8014536:	2200      	movs	r2, #0
 8014538:	f062 025f 	orn	r2, r2, #95	; 0x5f
 801453c:	701a      	strb	r2, [r3, #0]
 801453e:	2200      	movs	r2, #0
 8014540:	705a      	strb	r2, [r3, #1]
 8014542:	2200      	movs	r2, #0
 8014544:	709a      	strb	r2, [r3, #2]
 8014546:	2200      	movs	r2, #0
 8014548:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	2200      	movs	r2, #0
 801454e:	f042 0203 	orr.w	r2, r2, #3
 8014552:	711a      	strb	r2, [r3, #4]
 8014554:	2200      	movs	r2, #0
 8014556:	715a      	strb	r2, [r3, #5]
 8014558:	2200      	movs	r2, #0
 801455a:	719a      	strb	r2, [r3, #6]
 801455c:	2200      	movs	r2, #0
 801455e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014560:	68fa      	ldr	r2, [r7, #12]
 8014562:	697b      	ldr	r3, [r7, #20]
 8014564:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8014566:	68ba      	ldr	r2, [r7, #8]
 8014568:	697b      	ldr	r3, [r7, #20]
 801456a:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 801456c:	79fa      	ldrb	r2, [r7, #7]
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8014572:	f004 f811 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014576:	f003 fff7 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 801457a:	6178      	str	r0, [r7, #20]
}
 801457c:	bf00      	nop
 801457e:	3718      	adds	r7, #24
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}

08014584 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	460b      	mov	r3, r1
 801458e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8014590:	f004 f840 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014594:	f003 ffdc 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014598:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2200      	movs	r2, #0
 801459e:	f062 025e 	orn	r2, r2, #94	; 0x5e
 80145a2:	701a      	strb	r2, [r3, #0]
 80145a4:	2200      	movs	r2, #0
 80145a6:	705a      	strb	r2, [r3, #1]
 80145a8:	2200      	movs	r2, #0
 80145aa:	709a      	strb	r2, [r3, #2]
 80145ac:	2200      	movs	r2, #0
 80145ae:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	2200      	movs	r2, #0
 80145b4:	f042 0202 	orr.w	r2, r2, #2
 80145b8:	711a      	strb	r2, [r3, #4]
 80145ba:	2200      	movs	r2, #0
 80145bc:	715a      	strb	r2, [r3, #5]
 80145be:	2200      	movs	r2, #0
 80145c0:	719a      	strb	r2, [r3, #6]
 80145c2:	2200      	movs	r2, #0
 80145c4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80145c6:	687a      	ldr	r2, [r7, #4]
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 80145cc:	78fa      	ldrb	r2, [r7, #3]
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80145d2:	f003 ffe1 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80145d6:	f003 ffc7 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 80145da:	60f8      	str	r0, [r7, #12]
}
 80145dc:	bf00      	nop
 80145de:	3710      	adds	r7, #16
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}

080145e4 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b084      	sub	sp, #16
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	460b      	mov	r3, r1
 80145ee:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 80145f0:	f004 f810 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80145f4:	f003 ffac 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 80145f8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	2200      	movs	r2, #0
 80145fe:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8014602:	701a      	strb	r2, [r3, #0]
 8014604:	2200      	movs	r2, #0
 8014606:	705a      	strb	r2, [r3, #1]
 8014608:	2200      	movs	r2, #0
 801460a:	709a      	strb	r2, [r3, #2]
 801460c:	2200      	movs	r2, #0
 801460e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	2200      	movs	r2, #0
 8014614:	f042 0202 	orr.w	r2, r2, #2
 8014618:	711a      	strb	r2, [r3, #4]
 801461a:	2200      	movs	r2, #0
 801461c:	715a      	strb	r2, [r3, #5]
 801461e:	2200      	movs	r2, #0
 8014620:	719a      	strb	r2, [r3, #6]
 8014622:	2200      	movs	r2, #0
 8014624:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014626:	687a      	ldr	r2, [r7, #4]
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 801462c:	78fa      	ldrb	r2, [r7, #3]
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014632:	f003 ffb1 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014636:	f003 ff97 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 801463a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	689b      	ldr	r3, [r3, #8]
 8014640:	b2db      	uxtb	r3, r3
}
 8014642:	4618      	mov	r0, r3
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}

0801464a <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 801464a:	b580      	push	{r7, lr}
 801464c:	b084      	sub	sp, #16
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
 8014652:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8014654:	f003 ffde 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014658:	f003 ff7a 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 801465c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	2200      	movs	r2, #0
 8014662:	f062 0250 	orn	r2, r2, #80	; 0x50
 8014666:	701a      	strb	r2, [r3, #0]
 8014668:	2200      	movs	r2, #0
 801466a:	705a      	strb	r2, [r3, #1]
 801466c:	2200      	movs	r2, #0
 801466e:	709a      	strb	r2, [r3, #2]
 8014670:	2200      	movs	r2, #0
 8014672:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	2200      	movs	r2, #0
 8014678:	f042 0202 	orr.w	r2, r2, #2
 801467c:	711a      	strb	r2, [r3, #4]
 801467e:	2200      	movs	r2, #0
 8014680:	715a      	strb	r2, [r3, #5]
 8014682:	2200      	movs	r2, #0
 8014684:	719a      	strb	r2, [r3, #6]
 8014686:	2200      	movs	r2, #0
 8014688:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801468a:	687a      	ldr	r2, [r7, #4]
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8014690:	683a      	ldr	r2, [r7, #0]
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014696:	f003 ff7f 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801469a:	f003 ff65 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 801469e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	689b      	ldr	r3, [r3, #8]
 80146a4:	b2db      	uxtb	r3, r3
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	3710      	adds	r7, #16
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}

080146ae <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 80146ae:	b580      	push	{r7, lr}
 80146b0:	b084      	sub	sp, #16
 80146b2:	af00      	add	r7, sp, #0
 80146b4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80146b6:	f003 ffad 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80146ba:	f003 ff49 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 80146be:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	2200      	movs	r2, #0
 80146c4:	f062 024d 	orn	r2, r2, #77	; 0x4d
 80146c8:	701a      	strb	r2, [r3, #0]
 80146ca:	2200      	movs	r2, #0
 80146cc:	705a      	strb	r2, [r3, #1]
 80146ce:	2200      	movs	r2, #0
 80146d0:	709a      	strb	r2, [r3, #2]
 80146d2:	2200      	movs	r2, #0
 80146d4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	2200      	movs	r2, #0
 80146da:	f042 0201 	orr.w	r2, r2, #1
 80146de:	711a      	strb	r2, [r3, #4]
 80146e0:	2200      	movs	r2, #0
 80146e2:	715a      	strb	r2, [r3, #5]
 80146e4:	2200      	movs	r2, #0
 80146e6:	719a      	strb	r2, [r3, #6]
 80146e8:	2200      	movs	r2, #0
 80146ea:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80146ec:	687a      	ldr	r2, [r7, #4]
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80146f2:	f003 ff51 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80146f6:	f003 ff37 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 80146fa:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	689b      	ldr	r3, [r3, #8]
 8014700:	b2db      	uxtb	r3, r3
}
 8014702:	4618      	mov	r0, r3
 8014704:	3710      	adds	r7, #16
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}

0801470a <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 801470a:	b580      	push	{r7, lr}
 801470c:	b084      	sub	sp, #16
 801470e:	af00      	add	r7, sp, #0
 8014710:	6078      	str	r0, [r7, #4]
 8014712:	460b      	mov	r3, r1
 8014714:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014716:	f003 ff7d 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801471a:	f003 ff19 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 801471e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	2200      	movs	r2, #0
 8014724:	f062 0256 	orn	r2, r2, #86	; 0x56
 8014728:	701a      	strb	r2, [r3, #0]
 801472a:	2200      	movs	r2, #0
 801472c:	705a      	strb	r2, [r3, #1]
 801472e:	2200      	movs	r2, #0
 8014730:	709a      	strb	r2, [r3, #2]
 8014732:	2200      	movs	r2, #0
 8014734:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	2200      	movs	r2, #0
 801473a:	f042 0202 	orr.w	r2, r2, #2
 801473e:	711a      	strb	r2, [r3, #4]
 8014740:	2200      	movs	r2, #0
 8014742:	715a      	strb	r2, [r3, #5]
 8014744:	2200      	movs	r2, #0
 8014746:	719a      	strb	r2, [r3, #6]
 8014748:	2200      	movs	r2, #0
 801474a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801474c:	687a      	ldr	r2, [r7, #4]
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8014752:	887a      	ldrh	r2, [r7, #2]
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014758:	f003 ff1e 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801475c:	f003 ff04 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014760:	60f8      	str	r0, [r7, #12]
}
 8014762:	bf00      	nop
 8014764:	3710      	adds	r7, #16
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}

0801476a <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 801476a:	b580      	push	{r7, lr}
 801476c:	b084      	sub	sp, #16
 801476e:	af00      	add	r7, sp, #0
 8014770:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014772:	f003 ff4f 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014776:	f003 feeb 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 801477a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	2200      	movs	r2, #0
 8014780:	f062 0261 	orn	r2, r2, #97	; 0x61
 8014784:	701a      	strb	r2, [r3, #0]
 8014786:	2200      	movs	r2, #0
 8014788:	705a      	strb	r2, [r3, #1]
 801478a:	2200      	movs	r2, #0
 801478c:	709a      	strb	r2, [r3, #2]
 801478e:	2200      	movs	r2, #0
 8014790:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	2200      	movs	r2, #0
 8014796:	f042 0201 	orr.w	r2, r2, #1
 801479a:	711a      	strb	r2, [r3, #4]
 801479c:	2200      	movs	r2, #0
 801479e:	715a      	strb	r2, [r3, #5]
 80147a0:	2200      	movs	r2, #0
 80147a2:	719a      	strb	r2, [r3, #6]
 80147a4:	2200      	movs	r2, #0
 80147a6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80147a8:	687a      	ldr	r2, [r7, #4]
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80147ae:	f003 fef3 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80147b2:	f003 fed9 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 80147b6:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	689b      	ldr	r3, [r3, #8]
 80147bc:	b2db      	uxtb	r3, r3
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3710      	adds	r7, #16
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}

080147c6 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 80147c6:	b580      	push	{r7, lr}
 80147c8:	b084      	sub	sp, #16
 80147ca:	af00      	add	r7, sp, #0
 80147cc:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80147ce:	f003 ff21 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80147d2:	f003 febd 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 80147d6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	2200      	movs	r2, #0
 80147dc:	f062 024c 	orn	r2, r2, #76	; 0x4c
 80147e0:	701a      	strb	r2, [r3, #0]
 80147e2:	2200      	movs	r2, #0
 80147e4:	705a      	strb	r2, [r3, #1]
 80147e6:	2200      	movs	r2, #0
 80147e8:	709a      	strb	r2, [r3, #2]
 80147ea:	2200      	movs	r2, #0
 80147ec:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	2200      	movs	r2, #0
 80147f2:	f042 0201 	orr.w	r2, r2, #1
 80147f6:	711a      	strb	r2, [r3, #4]
 80147f8:	2200      	movs	r2, #0
 80147fa:	715a      	strb	r2, [r3, #5]
 80147fc:	2200      	movs	r2, #0
 80147fe:	719a      	strb	r2, [r3, #6]
 8014800:	2200      	movs	r2, #0
 8014802:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801480a:	f003 fec5 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801480e:	f003 feab 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014812:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	689b      	ldr	r3, [r3, #8]
 8014818:	b2db      	uxtb	r3, r3
}
 801481a:	4618      	mov	r0, r3
 801481c:	3710      	adds	r7, #16
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}

08014822 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8014822:	b580      	push	{r7, lr}
 8014824:	b084      	sub	sp, #16
 8014826:	af00      	add	r7, sp, #0
 8014828:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801482a:	f003 fef3 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801482e:	f003 fe8f 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014832:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	2200      	movs	r2, #0
 8014838:	f062 0255 	orn	r2, r2, #85	; 0x55
 801483c:	701a      	strb	r2, [r3, #0]
 801483e:	2200      	movs	r2, #0
 8014840:	705a      	strb	r2, [r3, #1]
 8014842:	2200      	movs	r2, #0
 8014844:	709a      	strb	r2, [r3, #2]
 8014846:	2200      	movs	r2, #0
 8014848:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	2200      	movs	r2, #0
 801484e:	f042 0201 	orr.w	r2, r2, #1
 8014852:	711a      	strb	r2, [r3, #4]
 8014854:	2200      	movs	r2, #0
 8014856:	715a      	strb	r2, [r3, #5]
 8014858:	2200      	movs	r2, #0
 801485a:	719a      	strb	r2, [r3, #6]
 801485c:	2200      	movs	r2, #0
 801485e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014860:	687a      	ldr	r2, [r7, #4]
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014866:	f003 fe97 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801486a:	f003 fe7d 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 801486e:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	689b      	ldr	r3, [r3, #8]
 8014874:	b29b      	uxth	r3, r3
}
 8014876:	4618      	mov	r0, r3
 8014878:	3710      	adds	r7, #16
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}

0801487e <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 801487e:	b580      	push	{r7, lr}
 8014880:	b084      	sub	sp, #16
 8014882:	af00      	add	r7, sp, #0
 8014884:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014886:	f003 fec5 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801488a:	f003 fe61 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 801488e:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	2200      	movs	r2, #0
 8014894:	f062 0254 	orn	r2, r2, #84	; 0x54
 8014898:	701a      	strb	r2, [r3, #0]
 801489a:	2200      	movs	r2, #0
 801489c:	705a      	strb	r2, [r3, #1]
 801489e:	2200      	movs	r2, #0
 80148a0:	709a      	strb	r2, [r3, #2]
 80148a2:	2200      	movs	r2, #0
 80148a4:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	2200      	movs	r2, #0
 80148aa:	f042 0201 	orr.w	r2, r2, #1
 80148ae:	711a      	strb	r2, [r3, #4]
 80148b0:	2200      	movs	r2, #0
 80148b2:	715a      	strb	r2, [r3, #5]
 80148b4:	2200      	movs	r2, #0
 80148b6:	719a      	strb	r2, [r3, #6]
 80148b8:	2200      	movs	r2, #0
 80148ba:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 80148bc:	687a      	ldr	r2, [r7, #4]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80148c2:	f003 fe69 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80148c6:	f003 fe4f 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 80148ca:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	689b      	ldr	r3, [r3, #8]
 80148d0:	b2db      	uxtb	r3, r3
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3710      	adds	r7, #16
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}

080148da <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 80148da:	b580      	push	{r7, lr}
 80148dc:	b084      	sub	sp, #16
 80148de:	af00      	add	r7, sp, #0
 80148e0:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80148e2:	f003 fe97 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80148e6:	f003 fe33 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 80148ea:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2200      	movs	r2, #0
 80148f0:	f062 0253 	orn	r2, r2, #83	; 0x53
 80148f4:	701a      	strb	r2, [r3, #0]
 80148f6:	2200      	movs	r2, #0
 80148f8:	705a      	strb	r2, [r3, #1]
 80148fa:	2200      	movs	r2, #0
 80148fc:	709a      	strb	r2, [r3, #2]
 80148fe:	2200      	movs	r2, #0
 8014900:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	2200      	movs	r2, #0
 8014906:	f042 0201 	orr.w	r2, r2, #1
 801490a:	711a      	strb	r2, [r3, #4]
 801490c:	2200      	movs	r2, #0
 801490e:	715a      	strb	r2, [r3, #5]
 8014910:	2200      	movs	r2, #0
 8014912:	719a      	strb	r2, [r3, #6]
 8014914:	2200      	movs	r2, #0
 8014916:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014918:	687a      	ldr	r2, [r7, #4]
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801491e:	f003 fe3b 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014922:	f003 fe21 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014926:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	689b      	ldr	r3, [r3, #8]
}
 801492c:	4618      	mov	r0, r3
 801492e:	3710      	adds	r7, #16
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}

08014934 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b084      	sub	sp, #16
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 801493e:	f003 fe69 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014942:	f003 fe05 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014946:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	2200      	movs	r2, #0
 801494c:	f062 0259 	orn	r2, r2, #89	; 0x59
 8014950:	701a      	strb	r2, [r3, #0]
 8014952:	2200      	movs	r2, #0
 8014954:	705a      	strb	r2, [r3, #1]
 8014956:	2200      	movs	r2, #0
 8014958:	709a      	strb	r2, [r3, #2]
 801495a:	2200      	movs	r2, #0
 801495c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2200      	movs	r2, #0
 8014962:	f042 0201 	orr.w	r2, r2, #1
 8014966:	711a      	strb	r2, [r3, #4]
 8014968:	2200      	movs	r2, #0
 801496a:	715a      	strb	r2, [r3, #5]
 801496c:	2200      	movs	r2, #0
 801496e:	719a      	strb	r2, [r3, #6]
 8014970:	2200      	movs	r2, #0
 8014972:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014974:	683a      	ldr	r2, [r7, #0]
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801497a:	f003 fe0d 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801497e:	f003 fdf3 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014982:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	689b      	ldr	r3, [r3, #8]

}
 8014988:	4618      	mov	r0, r3
 801498a:	3710      	adds	r7, #16
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}

08014990 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b086      	sub	sp, #24
 8014994:	af00      	add	r7, sp, #0
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	60b9      	str	r1, [r7, #8]
 801499a:	607a      	str	r2, [r7, #4]
 801499c:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 801499e:	f003 fe39 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80149a2:	f003 fdd5 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 80149a6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 80149a8:	697b      	ldr	r3, [r7, #20]
 80149aa:	2200      	movs	r2, #0
 80149ac:	f062 0258 	orn	r2, r2, #88	; 0x58
 80149b0:	701a      	strb	r2, [r3, #0]
 80149b2:	2200      	movs	r2, #0
 80149b4:	705a      	strb	r2, [r3, #1]
 80149b6:	2200      	movs	r2, #0
 80149b8:	709a      	strb	r2, [r3, #2]
 80149ba:	2200      	movs	r2, #0
 80149bc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	2200      	movs	r2, #0
 80149c2:	f042 0203 	orr.w	r2, r2, #3
 80149c6:	711a      	strb	r2, [r3, #4]
 80149c8:	2200      	movs	r2, #0
 80149ca:	715a      	strb	r2, [r3, #5]
 80149cc:	2200      	movs	r2, #0
 80149ce:	719a      	strb	r2, [r3, #6]
 80149d0:	2200      	movs	r2, #0
 80149d2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80149d4:	68ba      	ldr	r2, [r7, #8]
 80149d6:	697b      	ldr	r3, [r7, #20]
 80149d8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80149da:	687a      	ldr	r2, [r7, #4]
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 80149e0:	683a      	ldr	r2, [r7, #0]
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 80149e6:	6a3a      	ldr	r2, [r7, #32]
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 80149ec:	f003 fdd4 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80149f0:	f003 fdba 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 80149f4:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	689b      	ldr	r3, [r3, #8]
 80149fa:	b2db      	uxtb	r3, r3
}
 80149fc:	4618      	mov	r0, r3
 80149fe:	3718      	adds	r7, #24
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}

08014a04 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b084      	sub	sp, #16
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014a10:	f003 fe00 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014a14:	f003 fd9c 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014a18:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8014a22:	701a      	strb	r2, [r3, #0]
 8014a24:	2200      	movs	r2, #0
 8014a26:	705a      	strb	r2, [r3, #1]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	709a      	strb	r2, [r3, #2]
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2200      	movs	r2, #0
 8014a34:	f042 0201 	orr.w	r2, r2, #1
 8014a38:	711a      	strb	r2, [r3, #4]
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	715a      	strb	r2, [r3, #5]
 8014a3e:	2200      	movs	r2, #0
 8014a40:	719a      	strb	r2, [r3, #6]
 8014a42:	2200      	movs	r2, #0
 8014a44:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 8014a46:	887a      	ldrh	r2, [r7, #2]
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014a4c:	f003 fda4 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014a50:	f003 fd8a 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014a54:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	689b      	ldr	r3, [r3, #8]
 8014a5a:	b2db      	uxtb	r3, r3
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3710      	adds	r7, #16
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}

08014a64 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b084      	sub	sp, #16
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
 8014a6c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8014a6e:	f003 fdd1 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014a72:	f003 fd6d 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014a76:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	f062 0249 	orn	r2, r2, #73	; 0x49
 8014a80:	701a      	strb	r2, [r3, #0]
 8014a82:	2200      	movs	r2, #0
 8014a84:	705a      	strb	r2, [r3, #1]
 8014a86:	2200      	movs	r2, #0
 8014a88:	709a      	strb	r2, [r3, #2]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2200      	movs	r2, #0
 8014a92:	f042 0201 	orr.w	r2, r2, #1
 8014a96:	711a      	strb	r2, [r3, #4]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	715a      	strb	r2, [r3, #5]
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	719a      	strb	r2, [r3, #6]
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8014aa4:	683a      	ldr	r2, [r7, #0]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014aaa:	f003 fd75 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014aae:	f003 fd5b 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014ab2:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	689b      	ldr	r3, [r3, #8]
 8014ab8:	b2db      	uxtb	r3, r3
}
 8014aba:	4618      	mov	r0, r3
 8014abc:	3710      	adds	r7, #16
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bd80      	pop	{r7, pc}

08014ac2 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8014ac2:	b580      	push	{r7, lr}
 8014ac4:	b086      	sub	sp, #24
 8014ac6:	af00      	add	r7, sp, #0
 8014ac8:	60f8      	str	r0, [r7, #12]
 8014aca:	60b9      	str	r1, [r7, #8]
 8014acc:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8014ace:	f003 fda1 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014ad2:	f003 fd3d 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014ad6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	2200      	movs	r2, #0
 8014adc:	f062 0257 	orn	r2, r2, #87	; 0x57
 8014ae0:	701a      	strb	r2, [r3, #0]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	705a      	strb	r2, [r3, #1]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	709a      	strb	r2, [r3, #2]
 8014aea:	2200      	movs	r2, #0
 8014aec:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014aee:	697b      	ldr	r3, [r7, #20]
 8014af0:	2200      	movs	r2, #0
 8014af2:	f042 0202 	orr.w	r2, r2, #2
 8014af6:	711a      	strb	r2, [r3, #4]
 8014af8:	2200      	movs	r2, #0
 8014afa:	715a      	strb	r2, [r3, #5]
 8014afc:	2200      	movs	r2, #0
 8014afe:	719a      	strb	r2, [r3, #6]
 8014b00:	2200      	movs	r2, #0
 8014b02:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8014b04:	68ba      	ldr	r2, [r7, #8]
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8014b0a:	687a      	ldr	r2, [r7, #4]
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014b10:	f003 fd42 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014b14:	f003 fd28 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014b18:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8014b1a:	697b      	ldr	r3, [r7, #20]
 8014b1c:	689b      	ldr	r3, [r3, #8]
 8014b1e:	b2db      	uxtb	r3, r3
}
 8014b20:	4618      	mov	r0, r3
 8014b22:	3718      	adds	r7, #24
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}

08014b28 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b082      	sub	sp, #8
 8014b2c:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8014b2e:	f003 fd71 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014b32:	f003 fd0d 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014b36:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8014b40:	701a      	strb	r2, [r3, #0]
 8014b42:	2200      	movs	r2, #0
 8014b44:	705a      	strb	r2, [r3, #1]
 8014b46:	2200      	movs	r2, #0
 8014b48:	709a      	strb	r2, [r3, #2]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2200      	movs	r2, #0
 8014b52:	711a      	strb	r2, [r3, #4]
 8014b54:	2200      	movs	r2, #0
 8014b56:	715a      	strb	r2, [r3, #5]
 8014b58:	2200      	movs	r2, #0
 8014b5a:	719a      	strb	r2, [r3, #6]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8014b60:	f003 fd1a 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014b64:	f003 fd00 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014b68:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	689b      	ldr	r3, [r3, #8]
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3708      	adds	r7, #8
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}

08014b76 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8014b76:	b580      	push	{r7, lr}
 8014b78:	b084      	sub	sp, #16
 8014b7a:	af00      	add	r7, sp, #0
 8014b7c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014b7e:	f003 fd49 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014b82:	f003 fce5 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014b86:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	f062 0269 	orn	r2, r2, #105	; 0x69
 8014b90:	701a      	strb	r2, [r3, #0]
 8014b92:	2200      	movs	r2, #0
 8014b94:	705a      	strb	r2, [r3, #1]
 8014b96:	2200      	movs	r2, #0
 8014b98:	709a      	strb	r2, [r3, #2]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	711a      	strb	r2, [r3, #4]
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	715a      	strb	r2, [r3, #5]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	719a      	strb	r2, [r3, #6]
 8014bac:	2200      	movs	r2, #0
 8014bae:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8014bb0:	f003 fcf2 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014bb4:	f003 fcd8 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014bb8:	60f8      	str	r0, [r7, #12]
}
 8014bba:	bf00      	nop
 8014bbc:	3710      	adds	r7, #16
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}
	...

08014bc4 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b086      	sub	sp, #24
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	60f8      	str	r0, [r7, #12]
 8014bcc:	60b9      	str	r1, [r7, #8]
 8014bce:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8014bd0:	f003 fd20 	bl	8018614 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8014bd4:	4a15      	ldr	r2, [pc, #84]	; (8014c2c <otSetStateChangedCallback+0x68>)
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014bda:	f003 fcb9 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014bde:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	2200      	movs	r2, #0
 8014be4:	f062 0268 	orn	r2, r2, #104	; 0x68
 8014be8:	701a      	strb	r2, [r3, #0]
 8014bea:	2200      	movs	r2, #0
 8014bec:	705a      	strb	r2, [r3, #1]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	709a      	strb	r2, [r3, #2]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	f042 0201 	orr.w	r2, r2, #1
 8014bfe:	711a      	strb	r2, [r3, #4]
 8014c00:	2200      	movs	r2, #0
 8014c02:	715a      	strb	r2, [r3, #5]
 8014c04:	2200      	movs	r2, #0
 8014c06:	719a      	strb	r2, [r3, #6]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8014c0c:	687a      	ldr	r2, [r7, #4]
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014c12:	f003 fcc1 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014c16:	f003 fca7 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014c1a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8014c1c:	697b      	ldr	r3, [r7, #20]
 8014c1e:	689b      	ldr	r3, [r3, #8]
 8014c20:	b2db      	uxtb	r3, r3
}
 8014c22:	4618      	mov	r0, r3
 8014c24:	3718      	adds	r7, #24
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bd80      	pop	{r7, pc}
 8014c2a:	bf00      	nop
 8014c2c:	200275b0 	.word	0x200275b0

08014c30 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b084      	sub	sp, #16
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014c38:	f003 fcec 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014c3c:	f003 fc88 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014c40:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	2200      	movs	r2, #0
 8014c46:	f062 0264 	orn	r2, r2, #100	; 0x64
 8014c4a:	701a      	strb	r2, [r3, #0]
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	705a      	strb	r2, [r3, #1]
 8014c50:	2200      	movs	r2, #0
 8014c52:	709a      	strb	r2, [r3, #2]
 8014c54:	2200      	movs	r2, #0
 8014c56:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	711a      	strb	r2, [r3, #4]
 8014c5e:	2200      	movs	r2, #0
 8014c60:	715a      	strb	r2, [r3, #5]
 8014c62:	2200      	movs	r2, #0
 8014c64:	719a      	strb	r2, [r3, #6]
 8014c66:	2200      	movs	r2, #0
 8014c68:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8014c6a:	f003 fc95 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014c6e:	f003 fc7b 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014c72:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	689b      	ldr	r3, [r3, #8]
 8014c78:	b2db      	uxtb	r3, r3
}
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	3710      	adds	r7, #16
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	bd80      	pop	{r7, pc}

08014c82 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8014c82:	b580      	push	{r7, lr}
 8014c84:	b084      	sub	sp, #16
 8014c86:	af00      	add	r7, sp, #0
 8014c88:	6078      	str	r0, [r7, #4]
 8014c8a:	460b      	mov	r3, r1
 8014c8c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8014c8e:	f003 fcc1 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014c92:	f003 fc5d 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014c96:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8014ca0:	701a      	strb	r2, [r3, #0]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	705a      	strb	r2, [r3, #1]
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	709a      	strb	r2, [r3, #2]
 8014caa:	2200      	movs	r2, #0
 8014cac:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	f042 0201 	orr.w	r2, r2, #1
 8014cb6:	711a      	strb	r2, [r3, #4]
 8014cb8:	2200      	movs	r2, #0
 8014cba:	715a      	strb	r2, [r3, #5]
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	719a      	strb	r2, [r3, #6]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8014cc4:	78fa      	ldrb	r2, [r7, #3]
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8014cca:	f003 fc65 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014cce:	f003 fc4b 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014cd2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	689b      	ldr	r3, [r3, #8]
 8014cd8:	b2db      	uxtb	r3, r3
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3710      	adds	r7, #16
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}

08014ce2 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 8014ce2:	b580      	push	{r7, lr}
 8014ce4:	b084      	sub	sp, #16
 8014ce6:	af00      	add	r7, sp, #0
 8014ce8:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8014cea:	f003 fc93 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014cee:	f003 fc2f 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014cf2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8014cfc:	701a      	strb	r2, [r3, #0]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	705a      	strb	r2, [r3, #1]
 8014d02:	2200      	movs	r2, #0
 8014d04:	709a      	strb	r2, [r3, #2]
 8014d06:	2200      	movs	r2, #0
 8014d08:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	711a      	strb	r2, [r3, #4]
 8014d10:	2200      	movs	r2, #0
 8014d12:	715a      	strb	r2, [r3, #5]
 8014d14:	2200      	movs	r2, #0
 8014d16:	719a      	strb	r2, [r3, #6]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8014d1c:	f003 fc3c 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014d20:	f003 fc22 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014d24:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	689b      	ldr	r3, [r3, #8]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	bf14      	ite	ne
 8014d2e:	2301      	movne	r3, #1
 8014d30:	2300      	moveq	r3, #0
 8014d32:	b2db      	uxtb	r3, r3
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	3710      	adds	r7, #16
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}

08014d3c <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b084      	sub	sp, #16
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8014d44:	f003 fc66 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014d48:	f003 fc02 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014d4c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	2200      	movs	r2, #0
 8014d52:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8014d56:	701a      	strb	r2, [r3, #0]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	705a      	strb	r2, [r3, #1]
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	709a      	strb	r2, [r3, #2]
 8014d60:	2200      	movs	r2, #0
 8014d62:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2200      	movs	r2, #0
 8014d68:	711a      	strb	r2, [r3, #4]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	715a      	strb	r2, [r3, #5]
 8014d6e:	2200      	movs	r2, #0
 8014d70:	719a      	strb	r2, [r3, #6]
 8014d72:	2200      	movs	r2, #0
 8014d74:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8014d76:	f003 fc0f 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014d7a:	f003 fbf5 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014d7e:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	689b      	ldr	r3, [r3, #8]
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3710      	adds	r7, #16
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}

08014d8c <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8014d94:	f003 fc3e 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014d98:	f003 fbda 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014d9c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	2200      	movs	r2, #0
 8014da2:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 8014da6:	701a      	strb	r2, [r3, #0]
 8014da8:	2200      	movs	r2, #0
 8014daa:	705a      	strb	r2, [r3, #1]
 8014dac:	2200      	movs	r2, #0
 8014dae:	709a      	strb	r2, [r3, #2]
 8014db0:	2200      	movs	r2, #0
 8014db2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	2200      	movs	r2, #0
 8014db8:	711a      	strb	r2, [r3, #4]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	715a      	strb	r2, [r3, #5]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	719a      	strb	r2, [r3, #6]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8014dc6:	f003 fbe7 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014dca:	f003 fbcd 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014dce:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	689b      	ldr	r3, [r3, #8]
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3710      	adds	r7, #16
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <otIp6IsAddressEqual>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t *)p_ot_req->Data[0];
}

OTAPI bool OTCALL otIp6IsAddressEqual(const otIp6Address *a, const otIp6Address *b)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b084      	sub	sp, #16
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8014de6:	f003 fc15 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014dea:	f003 fbb1 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014dee:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ADDRESS_EQUAL;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2200      	movs	r2, #0
 8014df4:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 8014df8:	701a      	strb	r2, [r3, #0]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	705a      	strb	r2, [r3, #1]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	709a      	strb	r2, [r3, #2]
 8014e02:	2200      	movs	r2, #0
 8014e04:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	f042 0202 	orr.w	r2, r2, #2
 8014e0e:	711a      	strb	r2, [r3, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	715a      	strb	r2, [r3, #5]
 8014e14:	2200      	movs	r2, #0
 8014e16:	719a      	strb	r2, [r3, #6]
 8014e18:	2200      	movs	r2, #0
 8014e1a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)a;
 8014e1c:	687a      	ldr	r2, [r7, #4]
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)b;
 8014e22:	683a      	ldr	r2, [r7, #0]
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8014e28:	f003 fbb6 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014e2c:	f003 fb9c 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014e30:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	689b      	ldr	r3, [r3, #8]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	bf14      	ite	ne
 8014e3a:	2301      	movne	r3, #1
 8014e3c:	2300      	moveq	r3, #0
 8014e3e:	b2db      	uxtb	r3, r3
}
 8014e40:	4618      	mov	r0, r3
 8014e42:	3710      	adds	r7, #16
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}

08014e48 <otIp6AddressFromString>:

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b084      	sub	sp, #16
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
 8014e50:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8014e52:	f003 fbdf 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014e56:	f003 fb7b 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014e5a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8014e64:	701a      	strb	r2, [r3, #0]
 8014e66:	2200      	movs	r2, #0
 8014e68:	705a      	strb	r2, [r3, #1]
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	709a      	strb	r2, [r3, #2]
 8014e6e:	2200      	movs	r2, #0
 8014e70:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	2200      	movs	r2, #0
 8014e76:	f042 0202 	orr.w	r2, r2, #2
 8014e7a:	711a      	strb	r2, [r3, #4]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	715a      	strb	r2, [r3, #5]
 8014e80:	2200      	movs	r2, #0
 8014e82:	719a      	strb	r2, [r3, #6]
 8014e84:	2200      	movs	r2, #0
 8014e86:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8014e8e:	683a      	ldr	r2, [r7, #0]
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8014e94:	f003 fb80 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014e98:	f003 fb66 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014e9c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	689b      	ldr	r3, [r3, #8]
 8014ea2:	b2db      	uxtb	r3, r3
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3710      	adds	r7, #16
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}

08014eac <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b084      	sub	sp, #16
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	460b      	mov	r3, r1
 8014eb6:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8014eb8:	f003 fbac 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014ebc:	f003 fb48 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014ec0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	f042 0208 	orr.w	r2, r2, #8
 8014eca:	701a      	strb	r2, [r3, #0]
 8014ecc:	2200      	movs	r2, #0
 8014ece:	705a      	strb	r2, [r3, #1]
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	709a      	strb	r2, [r3, #2]
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	2200      	movs	r2, #0
 8014edc:	f042 0201 	orr.w	r2, r2, #1
 8014ee0:	711a      	strb	r2, [r3, #4]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	715a      	strb	r2, [r3, #5]
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	719a      	strb	r2, [r3, #6]
 8014eea:	2200      	movs	r2, #0
 8014eec:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8014eee:	78fa      	ldrb	r2, [r7, #3]
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8014ef4:	f003 fb50 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014ef8:	f003 fb36 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014efc:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	689b      	ldr	r3, [r3, #8]
 8014f02:	b2db      	uxtb	r3, r3
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	3710      	adds	r7, #16
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b084      	sub	sp, #16
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
 8014f14:	460b      	mov	r3, r1
 8014f16:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8014f18:	f003 fb7c 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014f1c:	f003 fb18 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014f20:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	2200      	movs	r2, #0
 8014f26:	f042 020f 	orr.w	r2, r2, #15
 8014f2a:	701a      	strb	r2, [r3, #0]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	705a      	strb	r2, [r3, #1]
 8014f30:	2200      	movs	r2, #0
 8014f32:	709a      	strb	r2, [r3, #2]
 8014f34:	2200      	movs	r2, #0
 8014f36:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	f042 0201 	orr.w	r2, r2, #1
 8014f40:	711a      	strb	r2, [r3, #4]
 8014f42:	2200      	movs	r2, #0
 8014f44:	715a      	strb	r2, [r3, #5]
 8014f46:	2200      	movs	r2, #0
 8014f48:	719a      	strb	r2, [r3, #6]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8014f4e:	887a      	ldrh	r2, [r7, #2]
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8014f54:	f003 fb20 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014f58:	f003 fb06 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014f5c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	689b      	ldr	r3, [r3, #8]
 8014f62:	b2db      	uxtb	r3, r3
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3710      	adds	r7, #16
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}

08014f6c <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b084      	sub	sp, #16
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014f74:	f003 fb4e 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014f78:	f003 faea 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014f7c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	2200      	movs	r2, #0
 8014f82:	f062 0246 	orn	r2, r2, #70	; 0x46
 8014f86:	701a      	strb	r2, [r3, #0]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	705a      	strb	r2, [r3, #1]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	709a      	strb	r2, [r3, #2]
 8014f90:	2200      	movs	r2, #0
 8014f92:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	2200      	movs	r2, #0
 8014f98:	f042 0201 	orr.w	r2, r2, #1
 8014f9c:	711a      	strb	r2, [r3, #4]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	715a      	strb	r2, [r3, #5]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	719a      	strb	r2, [r3, #6]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8014faa:	687a      	ldr	r2, [r7, #4]
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014fb0:	f003 faf2 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014fb4:	f003 fad8 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014fb8:	60f8      	str	r0, [r7, #12]
}
 8014fba:	bf00      	nop
 8014fbc:	3710      	adds	r7, #16
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}

08014fc2 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8014fc2:	b580      	push	{r7, lr}
 8014fc4:	b084      	sub	sp, #16
 8014fc6:	af00      	add	r7, sp, #0
 8014fc8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014fca:	f003 fb23 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014fce:	f003 fabf 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8014fd2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	f062 0243 	orn	r2, r2, #67	; 0x43
 8014fdc:	701a      	strb	r2, [r3, #0]
 8014fde:	2200      	movs	r2, #0
 8014fe0:	705a      	strb	r2, [r3, #1]
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	709a      	strb	r2, [r3, #2]
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2200      	movs	r2, #0
 8014fee:	f042 0201 	orr.w	r2, r2, #1
 8014ff2:	711a      	strb	r2, [r3, #4]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	715a      	strb	r2, [r3, #5]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	719a      	strb	r2, [r3, #6]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015000:	687a      	ldr	r2, [r7, #4]
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015006:	f003 fac7 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801500a:	f003 faad 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 801500e:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	689b      	ldr	r3, [r3, #8]
 8015014:	b29b      	uxth	r3, r3
}
 8015016:	4618      	mov	r0, r3
 8015018:	3710      	adds	r7, #16
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}

0801501e <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 801501e:	b580      	push	{r7, lr}
 8015020:	b086      	sub	sp, #24
 8015022:	af00      	add	r7, sp, #0
 8015024:	60f8      	str	r0, [r7, #12]
 8015026:	60b9      	str	r1, [r7, #8]
 8015028:	4613      	mov	r3, r2
 801502a:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 801502c:	f003 faf2 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015030:	f003 fa8e 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8015034:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 8015036:	697b      	ldr	r3, [r7, #20]
 8015038:	2200      	movs	r2, #0
 801503a:	f062 023e 	orn	r2, r2, #62	; 0x3e
 801503e:	701a      	strb	r2, [r3, #0]
 8015040:	2200      	movs	r2, #0
 8015042:	705a      	strb	r2, [r3, #1]
 8015044:	2200      	movs	r2, #0
 8015046:	709a      	strb	r2, [r3, #2]
 8015048:	2200      	movs	r2, #0
 801504a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	2200      	movs	r2, #0
 8015050:	f042 0203 	orr.w	r2, r2, #3
 8015054:	711a      	strb	r2, [r3, #4]
 8015056:	2200      	movs	r2, #0
 8015058:	715a      	strb	r2, [r3, #5]
 801505a:	2200      	movs	r2, #0
 801505c:	719a      	strb	r2, [r3, #6]
 801505e:	2200      	movs	r2, #0
 8015060:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015062:	68fa      	ldr	r2, [r7, #12]
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 8015068:	68ba      	ldr	r2, [r7, #8]
 801506a:	697b      	ldr	r3, [r7, #20]
 801506c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 801506e:	88fa      	ldrh	r2, [r7, #6]
 8015070:	697b      	ldr	r3, [r7, #20]
 8015072:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8015074:	f003 fa90 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015078:	f003 fa76 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 801507c:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	689b      	ldr	r3, [r3, #8]
 8015082:	b2db      	uxtb	r3, r3
}
 8015084:	4618      	mov	r0, r3
 8015086:	3718      	adds	r7, #24
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}

0801508c <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b086      	sub	sp, #24
 8015090:	af00      	add	r7, sp, #0
 8015092:	60f8      	str	r0, [r7, #12]
 8015094:	607a      	str	r2, [r7, #4]
 8015096:	461a      	mov	r2, r3
 8015098:	460b      	mov	r3, r1
 801509a:	817b      	strh	r3, [r7, #10]
 801509c:	4613      	mov	r3, r2
 801509e:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 80150a0:	f003 fab8 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80150a4:	f003 fa54 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 80150a8:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	2200      	movs	r2, #0
 80150ae:	f062 023d 	orn	r2, r2, #61	; 0x3d
 80150b2:	701a      	strb	r2, [r3, #0]
 80150b4:	2200      	movs	r2, #0
 80150b6:	705a      	strb	r2, [r3, #1]
 80150b8:	2200      	movs	r2, #0
 80150ba:	709a      	strb	r2, [r3, #2]
 80150bc:	2200      	movs	r2, #0
 80150be:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 80150c0:	697b      	ldr	r3, [r7, #20]
 80150c2:	2200      	movs	r2, #0
 80150c4:	f042 0204 	orr.w	r2, r2, #4
 80150c8:	711a      	strb	r2, [r3, #4]
 80150ca:	2200      	movs	r2, #0
 80150cc:	715a      	strb	r2, [r3, #5]
 80150ce:	2200      	movs	r2, #0
 80150d0:	719a      	strb	r2, [r3, #6]
 80150d2:	2200      	movs	r2, #0
 80150d4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80150d6:	68fa      	ldr	r2, [r7, #12]
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 80150dc:	897a      	ldrh	r2, [r7, #10]
 80150de:	697b      	ldr	r3, [r7, #20]
 80150e0:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 80150e2:	687a      	ldr	r2, [r7, #4]
 80150e4:	697b      	ldr	r3, [r7, #20]
 80150e6:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 80150e8:	893a      	ldrh	r2, [r7, #8]
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 80150ee:	f003 fa53 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80150f2:	f003 fa39 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 80150f6:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 80150f8:	697b      	ldr	r3, [r7, #20]
 80150fa:	689b      	ldr	r3, [r3, #8]
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3718      	adds	r7, #24
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8015104:	b5b0      	push	{r4, r5, r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 801510a:	2300      	movs	r3, #0
 801510c:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 801510e:	f003 fa37 	bl	8018580 <THREAD_Get_NotificationPayloadBuffer>
 8015112:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	3b01      	subs	r3, #1
 801511a:	2b14      	cmp	r3, #20
 801511c:	f200 8172 	bhi.w	8015404 <OpenThread_CallBack_Processing+0x300>
 8015120:	a201      	add	r2, pc, #4	; (adr r2, 8015128 <OpenThread_CallBack_Processing+0x24>)
 8015122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015126:	bf00      	nop
 8015128:	0801517d 	.word	0x0801517d
 801512c:	08015199 	.word	0x08015199
 8015130:	080151c5 	.word	0x080151c5
 8015134:	080151f9 	.word	0x080151f9
 8015138:	08015205 	.word	0x08015205
 801513c:	08015223 	.word	0x08015223
 8015140:	08015241 	.word	0x08015241
 8015144:	0801525f 	.word	0x0801525f
 8015148:	0801527d 	.word	0x0801527d
 801514c:	0801529b 	.word	0x0801529b
 8015150:	080152bd 	.word	0x080152bd
 8015154:	080152db 	.word	0x080152db
 8015158:	08015405 	.word	0x08015405
 801515c:	08015301 	.word	0x08015301
 8015160:	08015335 	.word	0x08015335
 8015164:	0801535d 	.word	0x0801535d
 8015168:	0801537b 	.word	0x0801537b
 801516c:	0801539f 	.word	0x0801539f
 8015170:	080153c7 	.word	0x080153c7
 8015174:	08015405 	.word	0x08015405
 8015178:	080153e5 	.word	0x080153e5
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 801517c:	4ba3      	ldr	r3, [pc, #652]	; (801540c <OpenThread_CallBack_Processing+0x308>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	2b00      	cmp	r3, #0
 8015182:	f000 8167 	beq.w	8015454 <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8015186:	4ba1      	ldr	r3, [pc, #644]	; (801540c <OpenThread_CallBack_Processing+0x308>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	683a      	ldr	r2, [r7, #0]
 801518c:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 801518e:	683a      	ldr	r2, [r7, #0]
 8015190:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8015192:	4611      	mov	r1, r2
 8015194:	4798      	blx	r3
        }
        break;
 8015196:	e15d      	b.n	8015454 <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	689b      	ldr	r3, [r3, #8]
 801519c:	461a      	mov	r2, r3
 801519e:	4b9c      	ldr	r3, [pc, #624]	; (8015410 <OpenThread_CallBack_Processing+0x30c>)
 80151a0:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 80151a2:	4b9b      	ldr	r3, [pc, #620]	; (8015410 <OpenThread_CallBack_Processing+0x30c>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	f000 8156 	beq.w	8015458 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80151ac:	4b98      	ldr	r3, [pc, #608]	; (8015410 <OpenThread_CallBack_Processing+0x30c>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	683a      	ldr	r2, [r7, #0]
 80151b2:	68d2      	ldr	r2, [r2, #12]
 80151b4:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 80151b6:	683a      	ldr	r2, [r7, #0]
 80151b8:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80151ba:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 80151bc:	683a      	ldr	r2, [r7, #0]
 80151be:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80151c0:	4798      	blx	r3
        }
        break;
 80151c2:	e149      	b.n	8015458 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	689b      	ldr	r3, [r3, #8]
 80151c8:	461a      	mov	r2, r3
 80151ca:	4b92      	ldr	r3, [pc, #584]	; (8015414 <OpenThread_CallBack_Processing+0x310>)
 80151cc:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 80151ce:	4b91      	ldr	r3, [pc, #580]	; (8015414 <OpenThread_CallBack_Processing+0x310>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	f000 8142 	beq.w	801545c <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80151d8:	4b8e      	ldr	r3, [pc, #568]	; (8015414 <OpenThread_CallBack_Processing+0x310>)
 80151da:	681c      	ldr	r4, [r3, #0]
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80151e6:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80151ec:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80151f2:	b2db      	uxtb	r3, r3
 80151f4:	47a0      	blx	r4
        }
        break;
 80151f6:	e131      	b.n	801545c <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 80151f8:	2001      	movs	r0, #1
 80151fa:	f000 f99b 	bl	8015534 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 80151fe:	f7f2 fc48 	bl	8007a92 <HAL_NVIC_SystemReset>
        break;
 8015202:	e14a      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 8015204:	4b84      	ldr	r3, [pc, #528]	; (8015418 <OpenThread_CallBack_Processing+0x314>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	2b00      	cmp	r3, #0
 801520a:	f000 8129 	beq.w	8015460 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 801520e:	4b82      	ldr	r3, [pc, #520]	; (8015418 <OpenThread_CallBack_Processing+0x314>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	683a      	ldr	r2, [r7, #0]
 8015214:	6892      	ldr	r2, [r2, #8]
 8015216:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8015218:	683a      	ldr	r2, [r7, #0]
 801521a:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 801521c:	4611      	mov	r1, r2
 801521e:	4798      	blx	r3
        }
        break;
 8015220:	e11e      	b.n	8015460 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 8015222:	4b7e      	ldr	r3, [pc, #504]	; (801541c <OpenThread_CallBack_Processing+0x318>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	2b00      	cmp	r3, #0
 8015228:	f000 811c 	beq.w	8015464 <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 801522c:	4b7b      	ldr	r3, [pc, #492]	; (801541c <OpenThread_CallBack_Processing+0x318>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	683a      	ldr	r2, [r7, #0]
 8015232:	6892      	ldr	r2, [r2, #8]
 8015234:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 8015236:	683a      	ldr	r2, [r7, #0]
 8015238:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 801523a:	2000      	movs	r0, #0
 801523c:	4798      	blx	r3
        }
        break;
 801523e:	e111      	b.n	8015464 <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 8015240:	4b77      	ldr	r3, [pc, #476]	; (8015420 <OpenThread_CallBack_Processing+0x31c>)
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	2b00      	cmp	r3, #0
 8015246:	f000 810f 	beq.w	8015468 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 801524a:	4b75      	ldr	r3, [pc, #468]	; (8015420 <OpenThread_CallBack_Processing+0x31c>)
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	683a      	ldr	r2, [r7, #0]
 8015250:	6892      	ldr	r2, [r2, #8]
 8015252:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8015254:	683a      	ldr	r2, [r7, #0]
 8015256:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8015258:	4611      	mov	r1, r2
 801525a:	4798      	blx	r3
        }
        break;
 801525c:	e104      	b.n	8015468 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 801525e:	4b71      	ldr	r3, [pc, #452]	; (8015424 <OpenThread_CallBack_Processing+0x320>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	2b00      	cmp	r3, #0
 8015264:	f000 8102 	beq.w	801546c <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8015268:	4b6e      	ldr	r3, [pc, #440]	; (8015424 <OpenThread_CallBack_Processing+0x320>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	683a      	ldr	r2, [r7, #0]
 801526e:	6892      	ldr	r2, [r2, #8]
 8015270:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8015272:	683a      	ldr	r2, [r7, #0]
 8015274:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8015276:	4611      	mov	r1, r2
 8015278:	4798      	blx	r3
        }
        break;
 801527a:	e0f7      	b.n	801546c <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 801527c:	4b6a      	ldr	r3, [pc, #424]	; (8015428 <OpenThread_CallBack_Processing+0x324>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	2b00      	cmp	r3, #0
 8015282:	f000 80f5 	beq.w	8015470 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8015286:	4b68      	ldr	r3, [pc, #416]	; (8015428 <OpenThread_CallBack_Processing+0x324>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	683a      	ldr	r2, [r7, #0]
 801528c:	6892      	ldr	r2, [r2, #8]
 801528e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8015290:	683a      	ldr	r2, [r7, #0]
 8015292:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8015294:	4611      	mov	r1, r2
 8015296:	4798      	blx	r3
        }
        break;
 8015298:	e0ea      	b.n	8015470 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 801529a:	4b64      	ldr	r3, [pc, #400]	; (801542c <OpenThread_CallBack_Processing+0x328>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	f000 80e8 	beq.w	8015474 <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 80152a4:	4b61      	ldr	r3, [pc, #388]	; (801542c <OpenThread_CallBack_Processing+0x328>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	683a      	ldr	r2, [r7, #0]
 80152aa:	6892      	ldr	r2, [r2, #8]
 80152ac:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 80152ae:	683a      	ldr	r2, [r7, #0]
 80152b0:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 80152b2:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 80152b4:	683a      	ldr	r2, [r7, #0]
 80152b6:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 80152b8:	4798      	blx	r3
        }
        break;
 80152ba:	e0db      	b.n	8015474 <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 80152bc:	4b5c      	ldr	r3, [pc, #368]	; (8015430 <OpenThread_CallBack_Processing+0x32c>)
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	f000 80d9 	beq.w	8015478 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 80152c6:	4b5a      	ldr	r3, [pc, #360]	; (8015430 <OpenThread_CallBack_Processing+0x32c>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	683a      	ldr	r2, [r7, #0]
 80152cc:	6892      	ldr	r2, [r2, #8]
 80152ce:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 80152d0:	683a      	ldr	r2, [r7, #0]
 80152d2:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 80152d4:	4611      	mov	r1, r2
 80152d6:	4798      	blx	r3
        }
        break;
 80152d8:	e0ce      	b.n	8015478 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 80152da:	4b56      	ldr	r3, [pc, #344]	; (8015434 <OpenThread_CallBack_Processing+0x330>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	f000 80cc 	beq.w	801547c <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80152e4:	4b53      	ldr	r3, [pc, #332]	; (8015434 <OpenThread_CallBack_Processing+0x330>)
 80152e6:	681c      	ldr	r4, [r3, #0]
 80152e8:	683b      	ldr	r3, [r7, #0]
 80152ea:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80152f0:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80152f6:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80152fc:	47a0      	blx	r4
        }
        break;
 80152fe:	e0bd      	b.n	801547c <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8015300:	4b4d      	ldr	r3, [pc, #308]	; (8015438 <OpenThread_CallBack_Processing+0x334>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	f000 80bb 	beq.w	8015480 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 801530a:	4b4b      	ldr	r3, [pc, #300]	; (8015438 <OpenThread_CallBack_Processing+0x334>)
 801530c:	681c      	ldr	r4, [r3, #0]
 801530e:	683b      	ldr	r3, [r7, #0]
 8015310:	689b      	ldr	r3, [r3, #8]
 8015312:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8015318:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 801531e:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8015328:	b2db      	uxtb	r3, r3
 801532a:	9300      	str	r3, [sp, #0]
 801532c:	4613      	mov	r3, r2
 801532e:	462a      	mov	r2, r5
 8015330:	47a0      	blx	r4
        }
        break;
 8015332:	e0a5      	b.n	8015480 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 8015334:	4b41      	ldr	r3, [pc, #260]	; (801543c <OpenThread_CallBack_Processing+0x338>)
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	2b00      	cmp	r3, #0
 801533a:	f000 80a3 	beq.w	8015484 <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 801533e:	4b3f      	ldr	r3, [pc, #252]	; (801543c <OpenThread_CallBack_Processing+0x338>)
 8015340:	681c      	ldr	r4, [r3, #0]
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	689b      	ldr	r3, [r3, #8]
 8015346:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 801534c:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8015352:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8015358:	47a0      	blx	r4
        }
        break;
 801535a:	e093      	b.n	8015484 <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 801535c:	4b38      	ldr	r3, [pc, #224]	; (8015440 <OpenThread_CallBack_Processing+0x33c>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	2b00      	cmp	r3, #0
 8015362:	f000 8091 	beq.w	8015488 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 8015366:	4b36      	ldr	r3, [pc, #216]	; (8015440 <OpenThread_CallBack_Processing+0x33c>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	683a      	ldr	r2, [r7, #0]
 801536c:	6892      	ldr	r2, [r2, #8]
 801536e:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8015370:	683a      	ldr	r2, [r7, #0]
 8015372:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 8015374:	4611      	mov	r1, r2
 8015376:	4798      	blx	r3
        }
        break;
 8015378:	e086      	b.n	8015488 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 801537a:	4b32      	ldr	r3, [pc, #200]	; (8015444 <OpenThread_CallBack_Processing+0x340>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	2b00      	cmp	r3, #0
 8015380:	f000 8084 	beq.w	801548c <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8015384:	4b2f      	ldr	r3, [pc, #188]	; (8015444 <OpenThread_CallBack_Processing+0x340>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	683a      	ldr	r2, [r7, #0]
 801538a:	6892      	ldr	r2, [r2, #8]
 801538c:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 801538e:	683a      	ldr	r2, [r7, #0]
 8015390:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8015392:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 8015394:	683a      	ldr	r2, [r7, #0]
 8015396:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8015398:	b2d2      	uxtb	r2, r2
 801539a:	4798      	blx	r3
        }
        break;
 801539c:	e076      	b.n	801548c <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 801539e:	4b2a      	ldr	r3, [pc, #168]	; (8015448 <OpenThread_CallBack_Processing+0x344>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d074      	beq.n	8015490 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80153a6:	4b28      	ldr	r3, [pc, #160]	; (8015448 <OpenThread_CallBack_Processing+0x344>)
 80153a8:	681c      	ldr	r4, [r3, #0]
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	689b      	ldr	r3, [r3, #8]
 80153ae:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80153b4:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 80153b6:	683b      	ldr	r3, [r7, #0]
 80153b8:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80153ba:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 80153c0:	b2db      	uxtb	r3, r3
 80153c2:	47a0      	blx	r4
        }
        break;
 80153c4:	e064      	b.n	8015490 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 80153c6:	4b21      	ldr	r3, [pc, #132]	; (801544c <OpenThread_CallBack_Processing+0x348>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d062      	beq.n	8015494 <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80153ce:	4b1f      	ldr	r3, [pc, #124]	; (801544c <OpenThread_CallBack_Processing+0x348>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	683a      	ldr	r2, [r7, #0]
 80153d4:	6892      	ldr	r2, [r2, #8]
 80153d6:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 80153d8:	683a      	ldr	r2, [r7, #0]
 80153da:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80153dc:	b252      	sxtb	r2, r2
 80153de:	4611      	mov	r1, r2
 80153e0:	4798      	blx	r3
        }
        break;
 80153e2:	e057      	b.n	8015494 <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 80153e4:	4b1a      	ldr	r3, [pc, #104]	; (8015450 <OpenThread_CallBack_Processing+0x34c>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d055      	beq.n	8015498 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 80153ec:	4b18      	ldr	r3, [pc, #96]	; (8015450 <OpenThread_CallBack_Processing+0x34c>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	683a      	ldr	r2, [r7, #0]
 80153f2:	6892      	ldr	r2, [r2, #8]
 80153f4:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 80153f6:	683a      	ldr	r2, [r7, #0]
 80153f8:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80153fa:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 80153fc:	683a      	ldr	r2, [r7, #0]
 80153fe:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8015400:	4798      	blx	r3
        }
        break;
 8015402:	e049      	b.n	8015498 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 8015404:	2301      	movs	r3, #1
 8015406:	71fb      	strb	r3, [r7, #7]
        break;
 8015408:	e047      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
 801540a:	bf00      	nop
 801540c:	200275b0 	.word	0x200275b0
 8015410:	200275f0 	.word	0x200275f0
 8015414:	200275f4 	.word	0x200275f4
 8015418:	200275b8 	.word	0x200275b8
 801541c:	200275b4 	.word	0x200275b4
 8015420:	200275bc 	.word	0x200275bc
 8015424:	200275c0 	.word	0x200275c0
 8015428:	200275c4 	.word	0x200275c4
 801542c:	200275c8 	.word	0x200275c8
 8015430:	200275cc 	.word	0x200275cc
 8015434:	200275d0 	.word	0x200275d0
 8015438:	200275d4 	.word	0x200275d4
 801543c:	200275d8 	.word	0x200275d8
 8015440:	200275dc 	.word	0x200275dc
 8015444:	200275e0 	.word	0x200275e0
 8015448:	200275e4 	.word	0x200275e4
 801544c:	200275e8 	.word	0x200275e8
 8015450:	200275ec 	.word	0x200275ec
        break;
 8015454:	bf00      	nop
 8015456:	e020      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015458:	bf00      	nop
 801545a:	e01e      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 801545c:	bf00      	nop
 801545e:	e01c      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015460:	bf00      	nop
 8015462:	e01a      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015464:	bf00      	nop
 8015466:	e018      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015468:	bf00      	nop
 801546a:	e016      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 801546c:	bf00      	nop
 801546e:	e014      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015470:	bf00      	nop
 8015472:	e012      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015474:	bf00      	nop
 8015476:	e010      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015478:	bf00      	nop
 801547a:	e00e      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 801547c:	bf00      	nop
 801547e:	e00c      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015480:	bf00      	nop
 8015482:	e00a      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015484:	bf00      	nop
 8015486:	e008      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015488:	bf00      	nop
 801548a:	e006      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 801548c:	bf00      	nop
 801548e:	e004      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015490:	bf00      	nop
 8015492:	e002      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015494:	bf00      	nop
 8015496:	e000      	b.n	801549a <OpenThread_CallBack_Processing+0x396>
        break;
 8015498:	bf00      	nop
    }

    TL_THREAD_SendAck();
 801549a:	f000 fcb3 	bl	8015e04 <TL_THREAD_SendAck>
    return status;
 801549e:	79fb      	ldrb	r3, [r7, #7]

}
 80154a0:	4618      	mov	r0, r3
 80154a2:	3708      	adds	r7, #8
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bdb0      	pop	{r4, r5, r7, pc}

080154a8 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b084      	sub	sp, #16
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
 80154b0:	460b      	mov	r3, r1
 80154b2:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 80154b4:	f003 f8ae 	bl	8018614 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80154b8:	f003 f84a 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 80154bc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2200      	movs	r2, #0
 80154c2:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 80154c6:	701a      	strb	r2, [r3, #0]
 80154c8:	2200      	movs	r2, #0
 80154ca:	f042 0201 	orr.w	r2, r2, #1
 80154ce:	705a      	strb	r2, [r3, #1]
 80154d0:	2200      	movs	r2, #0
 80154d2:	709a      	strb	r2, [r3, #2]
 80154d4:	2200      	movs	r2, #0
 80154d6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	2200      	movs	r2, #0
 80154dc:	f042 0201 	orr.w	r2, r2, #1
 80154e0:	711a      	strb	r2, [r3, #4]
 80154e2:	2200      	movs	r2, #0
 80154e4:	715a      	strb	r2, [r3, #5]
 80154e6:	2200      	movs	r2, #0
 80154e8:	719a      	strb	r2, [r3, #6]
 80154ea:	2200      	movs	r2, #0
 80154ec:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 80154ee:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80154f6:	f003 f84f 	bl	8018598 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80154fa:	f003 f835 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 80154fe:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	689b      	ldr	r3, [r3, #8]
 8015504:	b2db      	uxtb	r3, r3
}
 8015506:	4618      	mov	r0, r3
 8015508:	3710      	adds	r7, #16
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}

0801550e <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 801550e:	b580      	push	{r7, lr}
 8015510:	b086      	sub	sp, #24
 8015512:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015514:	1d3b      	adds	r3, r7, #4
 8015516:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8015518:	697b      	ldr	r3, [r7, #20]
 801551a:	2200      	movs	r2, #0
 801551c:	2100      	movs	r1, #0
 801551e:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8015522:	f000 f915 	bl	8015750 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	330b      	adds	r3, #11
 801552a:	78db      	ldrb	r3, [r3, #3]
}
 801552c:	4618      	mov	r0, r3
 801552e:	3718      	adds	r7, #24
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}

08015534 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b088      	sub	sp, #32
 8015538:	af00      	add	r7, sp, #0
 801553a:	4603      	mov	r3, r0
 801553c:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801553e:	f107 030c 	add.w	r3, r7, #12
 8015542:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8015544:	79fb      	ldrb	r3, [r7, #7]
 8015546:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8015548:	f107 020c 	add.w	r2, r7, #12
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	2101      	movs	r1, #1
 8015550:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8015554:	f000 f8fc 	bl	8015750 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015558:	69fb      	ldr	r3, [r7, #28]
 801555a:	330b      	adds	r3, #11
 801555c:	78db      	ldrb	r3, [r3, #3]
}
 801555e:	4618      	mov	r0, r3
 8015560:	3720      	adds	r7, #32
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}
	...

08015568 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8015568:	b480      	push	{r7}
 801556a:	b089      	sub	sp, #36	; 0x24
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8015570:	2300      	movs	r3, #0
 8015572:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 8015574:	2300      	movs	r3, #0
 8015576:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 8015578:	2300      	movs	r3, #0
 801557a:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 801557c:	2300      	movs	r3, #0
 801557e:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 8015580:	2300      	movs	r3, #0
 8015582:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8015584:	4b3c      	ldr	r3, [pc, #240]	; (8015678 <SHCI_GetWirelessFwInfo+0x110>)
 8015586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015588:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801558c:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801558e:	69fb      	ldr	r3, [r7, #28]
 8015590:	009b      	lsls	r3, r3, #2
 8015592:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015596:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 801559a:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801559c:	69bb      	ldr	r3, [r7, #24]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	691b      	ldr	r3, [r3, #16]
 80155a2:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	0e1b      	lsrs	r3, r3, #24
 80155a8:	b2da      	uxtb	r2, r3
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	0c1b      	lsrs	r3, r3, #16
 80155b2:	b2da      	uxtb	r2, r3
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	0a1b      	lsrs	r3, r3, #8
 80155bc:	b2da      	uxtb	r2, r3
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	091b      	lsrs	r3, r3, #4
 80155c6:	b2db      	uxtb	r3, r3
 80155c8:	f003 030f 	and.w	r3, r3, #15
 80155cc:	b2da      	uxtb	r2, r3
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	b2db      	uxtb	r3, r3
 80155d6:	f003 030f 	and.w	r3, r3, #15
 80155da:	b2da      	uxtb	r2, r3
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80155e0:	69bb      	ldr	r3, [r7, #24]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	695b      	ldr	r3, [r3, #20]
 80155e6:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	0e1b      	lsrs	r3, r3, #24
 80155ec:	b2da      	uxtb	r2, r3
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80155f2:	693b      	ldr	r3, [r7, #16]
 80155f4:	0c1b      	lsrs	r3, r3, #16
 80155f6:	b2da      	uxtb	r2, r3
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80155fc:	693b      	ldr	r3, [r7, #16]
 80155fe:	0a1b      	lsrs	r3, r3, #8
 8015600:	b2da      	uxtb	r2, r3
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015606:	693b      	ldr	r3, [r7, #16]
 8015608:	b2da      	uxtb	r2, r3
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801560e:	69bb      	ldr	r3, [r7, #24]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	699b      	ldr	r3, [r3, #24]
 8015614:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	b2da      	uxtb	r2, r3
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801561e:	69bb      	ldr	r3, [r7, #24]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	685b      	ldr	r3, [r3, #4]
 8015624:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	0e1b      	lsrs	r3, r3, #24
 801562a:	b2da      	uxtb	r2, r3
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	0c1b      	lsrs	r3, r3, #16
 8015634:	b2da      	uxtb	r2, r3
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	0a1b      	lsrs	r3, r3, #8
 801563e:	b2da      	uxtb	r2, r3
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8015644:	69bb      	ldr	r3, [r7, #24]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	689b      	ldr	r3, [r3, #8]
 801564a:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801564c:	693b      	ldr	r3, [r7, #16]
 801564e:	0e1b      	lsrs	r3, r3, #24
 8015650:	b2da      	uxtb	r2, r3
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	0c1b      	lsrs	r3, r3, #16
 801565a:	b2da      	uxtb	r2, r3
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015660:	693b      	ldr	r3, [r7, #16]
 8015662:	b2da      	uxtb	r2, r3
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8015668:	2300      	movs	r3, #0
}
 801566a:	4618      	mov	r0, r3
 801566c:	3724      	adds	r7, #36	; 0x24
 801566e:	46bd      	mov	sp, r7
 8015670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015674:	4770      	bx	lr
 8015676:	bf00      	nop
 8015678:	58004000 	.word	0x58004000

0801567c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b082      	sub	sp, #8
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	4a08      	ldr	r2, [pc, #32]	; (80156ac <shci_init+0x30>)
 801568c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801568e:	4a08      	ldr	r2, [pc, #32]	; (80156b0 <shci_init+0x34>)
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8015694:	4806      	ldr	r0, [pc, #24]	; (80156b0 <shci_init+0x34>)
 8015696:	f000 f911 	bl	80158bc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	4618      	mov	r0, r3
 80156a0:	f000 f894 	bl	80157cc <TlInit>

  return;
 80156a4:	bf00      	nop
}
 80156a6:	3708      	adds	r7, #8
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}
 80156ac:	20027618 	.word	0x20027618
 80156b0:	200275f8 	.word	0x200275f8

080156b4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b084      	sub	sp, #16
 80156b8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80156ba:	4822      	ldr	r0, [pc, #136]	; (8015744 <shci_user_evt_proc+0x90>)
 80156bc:	f004 f902 	bl	80198c4 <LST_is_empty>
 80156c0:	4603      	mov	r3, r0
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d12b      	bne.n	801571e <shci_user_evt_proc+0x6a>
 80156c6:	4b20      	ldr	r3, [pc, #128]	; (8015748 <shci_user_evt_proc+0x94>)
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d027      	beq.n	801571e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80156ce:	f107 030c 	add.w	r3, r7, #12
 80156d2:	4619      	mov	r1, r3
 80156d4:	481b      	ldr	r0, [pc, #108]	; (8015744 <shci_user_evt_proc+0x90>)
 80156d6:	f004 f97c 	bl	80199d2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80156da:	4b1c      	ldr	r3, [pc, #112]	; (801574c <shci_user_evt_proc+0x98>)
 80156dc:	69db      	ldr	r3, [r3, #28]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d00c      	beq.n	80156fc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80156e6:	2301      	movs	r3, #1
 80156e8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80156ea:	4b18      	ldr	r3, [pc, #96]	; (801574c <shci_user_evt_proc+0x98>)
 80156ec:	69db      	ldr	r3, [r3, #28]
 80156ee:	1d3a      	adds	r2, r7, #4
 80156f0:	4610      	mov	r0, r2
 80156f2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80156f4:	793a      	ldrb	r2, [r7, #4]
 80156f6:	4b14      	ldr	r3, [pc, #80]	; (8015748 <shci_user_evt_proc+0x94>)
 80156f8:	701a      	strb	r2, [r3, #0]
 80156fa:	e002      	b.n	8015702 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80156fc:	4b12      	ldr	r3, [pc, #72]	; (8015748 <shci_user_evt_proc+0x94>)
 80156fe:	2201      	movs	r2, #1
 8015700:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8015702:	4b11      	ldr	r3, [pc, #68]	; (8015748 <shci_user_evt_proc+0x94>)
 8015704:	781b      	ldrb	r3, [r3, #0]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d004      	beq.n	8015714 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	4618      	mov	r0, r3
 801570e:	f000 fbf5 	bl	8015efc <TL_MM_EvtDone>
 8015712:	e004      	b.n	801571e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	4619      	mov	r1, r3
 8015718:	480a      	ldr	r0, [pc, #40]	; (8015744 <shci_user_evt_proc+0x90>)
 801571a:	f004 f8f3 	bl	8019904 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801571e:	4809      	ldr	r0, [pc, #36]	; (8015744 <shci_user_evt_proc+0x90>)
 8015720:	f004 f8d0 	bl	80198c4 <LST_is_empty>
 8015724:	4603      	mov	r3, r0
 8015726:	2b00      	cmp	r3, #0
 8015728:	d107      	bne.n	801573a <shci_user_evt_proc+0x86>
 801572a:	4b07      	ldr	r3, [pc, #28]	; (8015748 <shci_user_evt_proc+0x94>)
 801572c:	781b      	ldrb	r3, [r3, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d003      	beq.n	801573a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8015732:	4804      	ldr	r0, [pc, #16]	; (8015744 <shci_user_evt_proc+0x90>)
 8015734:	f7eb fd40 	bl	80011b8 <shci_notify_asynch_evt>
  }


  return;
 8015738:	bf00      	nop
 801573a:	bf00      	nop
}
 801573c:	3710      	adds	r7, #16
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}
 8015742:	bf00      	nop
 8015744:	20000374 	.word	0x20000374
 8015748:	20000384 	.word	0x20000384
 801574c:	200275f8 	.word	0x200275f8

08015750 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b084      	sub	sp, #16
 8015754:	af00      	add	r7, sp, #0
 8015756:	60ba      	str	r2, [r7, #8]
 8015758:	607b      	str	r3, [r7, #4]
 801575a:	4603      	mov	r3, r0
 801575c:	81fb      	strh	r3, [r7, #14]
 801575e:	460b      	mov	r3, r1
 8015760:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8015762:	2000      	movs	r0, #0
 8015764:	f000 f864 	bl	8015830 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8015768:	4b16      	ldr	r3, [pc, #88]	; (80157c4 <shci_send+0x74>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	89fa      	ldrh	r2, [r7, #14]
 801576e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8015772:	4b14      	ldr	r3, [pc, #80]	; (80157c4 <shci_send+0x74>)
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	7b7a      	ldrb	r2, [r7, #13]
 8015778:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801577a:	4b12      	ldr	r3, [pc, #72]	; (80157c4 <shci_send+0x74>)
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	330c      	adds	r3, #12
 8015780:	7b7a      	ldrb	r2, [r7, #13]
 8015782:	68b9      	ldr	r1, [r7, #8]
 8015784:	4618      	mov	r0, r3
 8015786:	f004 fc31 	bl	8019fec <memcpy>

  shciContext.io.Send(0,0);
 801578a:	4b0f      	ldr	r3, [pc, #60]	; (80157c8 <shci_send+0x78>)
 801578c:	691b      	ldr	r3, [r3, #16]
 801578e:	2100      	movs	r1, #0
 8015790:	2000      	movs	r0, #0
 8015792:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8015794:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8015798:	f7eb fd2e 	bl	80011f8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f103 0008 	add.w	r0, r3, #8
 80157a2:	4b08      	ldr	r3, [pc, #32]	; (80157c4 <shci_send+0x74>)
 80157a4:	6819      	ldr	r1, [r3, #0]
 80157a6:	4b07      	ldr	r3, [pc, #28]	; (80157c4 <shci_send+0x74>)
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	789b      	ldrb	r3, [r3, #2]
 80157ac:	3303      	adds	r3, #3
 80157ae:	461a      	mov	r2, r3
 80157b0:	f004 fc1c 	bl	8019fec <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80157b4:	2001      	movs	r0, #1
 80157b6:	f000 f83b 	bl	8015830 <Cmd_SetStatus>

  return;
 80157ba:	bf00      	nop
}
 80157bc:	3710      	adds	r7, #16
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	20000380 	.word	0x20000380
 80157c8:	200275f8 	.word	0x200275f8

080157cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b086      	sub	sp, #24
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80157d4:	4a10      	ldr	r2, [pc, #64]	; (8015818 <TlInit+0x4c>)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80157da:	4810      	ldr	r0, [pc, #64]	; (801581c <TlInit+0x50>)
 80157dc:	f004 f862 	bl	80198a4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80157e0:	2001      	movs	r0, #1
 80157e2:	f000 f825 	bl	8015830 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80157e6:	4b0e      	ldr	r3, [pc, #56]	; (8015820 <TlInit+0x54>)
 80157e8:	2201      	movs	r2, #1
 80157ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80157ec:	4b0d      	ldr	r3, [pc, #52]	; (8015824 <TlInit+0x58>)
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d00c      	beq.n	801580e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80157f8:	4b0b      	ldr	r3, [pc, #44]	; (8015828 <TlInit+0x5c>)
 80157fa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80157fc:	4b0b      	ldr	r3, [pc, #44]	; (801582c <TlInit+0x60>)
 80157fe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8015800:	4b08      	ldr	r3, [pc, #32]	; (8015824 <TlInit+0x58>)
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	f107 020c 	add.w	r2, r7, #12
 8015808:	4610      	mov	r0, r2
 801580a:	4798      	blx	r3
  }

  return;
 801580c:	bf00      	nop
 801580e:	bf00      	nop
}
 8015810:	3718      	adds	r7, #24
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
 8015816:	bf00      	nop
 8015818:	20000380 	.word	0x20000380
 801581c:	20000374 	.word	0x20000374
 8015820:	20000384 	.word	0x20000384
 8015824:	200275f8 	.word	0x200275f8
 8015828:	08015881 	.word	0x08015881
 801582c:	08015899 	.word	0x08015899

08015830 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b082      	sub	sp, #8
 8015834:	af00      	add	r7, sp, #0
 8015836:	4603      	mov	r3, r0
 8015838:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801583a:	79fb      	ldrb	r3, [r7, #7]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d10b      	bne.n	8015858 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8015840:	4b0d      	ldr	r3, [pc, #52]	; (8015878 <Cmd_SetStatus+0x48>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d003      	beq.n	8015850 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8015848:	4b0b      	ldr	r3, [pc, #44]	; (8015878 <Cmd_SetStatus+0x48>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	2000      	movs	r0, #0
 801584e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8015850:	4b0a      	ldr	r3, [pc, #40]	; (801587c <Cmd_SetStatus+0x4c>)
 8015852:	2200      	movs	r2, #0
 8015854:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8015856:	e00b      	b.n	8015870 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8015858:	4b08      	ldr	r3, [pc, #32]	; (801587c <Cmd_SetStatus+0x4c>)
 801585a:	2201      	movs	r2, #1
 801585c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801585e:	4b06      	ldr	r3, [pc, #24]	; (8015878 <Cmd_SetStatus+0x48>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d004      	beq.n	8015870 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8015866:	4b04      	ldr	r3, [pc, #16]	; (8015878 <Cmd_SetStatus+0x48>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	2001      	movs	r0, #1
 801586c:	4798      	blx	r3
  return;
 801586e:	bf00      	nop
 8015870:	bf00      	nop
}
 8015872:	3708      	adds	r7, #8
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}
 8015878:	20027618 	.word	0x20027618
 801587c:	2000037c 	.word	0x2000037c

08015880 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b082      	sub	sp, #8
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8015888:	2000      	movs	r0, #0
 801588a:	f7eb fca5 	bl	80011d8 <shci_cmd_resp_release>

  return;
 801588e:	bf00      	nop
}
 8015890:	3708      	adds	r7, #8
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}
	...

08015898 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b082      	sub	sp, #8
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80158a0:	6879      	ldr	r1, [r7, #4]
 80158a2:	4805      	ldr	r0, [pc, #20]	; (80158b8 <TlUserEvtReceived+0x20>)
 80158a4:	f004 f852 	bl	801994c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80158a8:	4803      	ldr	r0, [pc, #12]	; (80158b8 <TlUserEvtReceived+0x20>)
 80158aa:	f7eb fc85 	bl	80011b8 <shci_notify_asynch_evt>

  return;
 80158ae:	bf00      	nop
}
 80158b0:	3708      	adds	r7, #8
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}
 80158b6:	bf00      	nop
 80158b8:	20000374 	.word	0x20000374

080158bc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80158bc:	b480      	push	{r7}
 80158be:	b083      	sub	sp, #12
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	4a05      	ldr	r2, [pc, #20]	; (80158dc <shci_register_io_bus+0x20>)
 80158c8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	4a04      	ldr	r2, [pc, #16]	; (80158e0 <shci_register_io_bus+0x24>)
 80158ce:	611a      	str	r2, [r3, #16]

  return;
 80158d0:	bf00      	nop
}
 80158d2:	370c      	adds	r7, #12
 80158d4:	46bd      	mov	sp, r7
 80158d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158da:	4770      	bx	lr
 80158dc:	08015cc1 	.word	0x08015cc1
 80158e0:	08015d15 	.word	0x08015d15

080158e4 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b084      	sub	sp, #16
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
 80158ec:	460b      	mov	r3, r1
 80158ee:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80158f0:	f002 fe90 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80158f4:	f002 fe2c 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 80158f8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	2200      	movs	r2, #0
 80158fe:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8015902:	701a      	strb	r2, [r3, #0]
 8015904:	2200      	movs	r2, #0
 8015906:	705a      	strb	r2, [r3, #1]
 8015908:	2200      	movs	r2, #0
 801590a:	709a      	strb	r2, [r3, #2]
 801590c:	2200      	movs	r2, #0
 801590e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	2200      	movs	r2, #0
 8015914:	f042 0201 	orr.w	r2, r2, #1
 8015918:	711a      	strb	r2, [r3, #4]
 801591a:	2200      	movs	r2, #0
 801591c:	715a      	strb	r2, [r3, #5]
 801591e:	2200      	movs	r2, #0
 8015920:	719a      	strb	r2, [r3, #6]
 8015922:	2200      	movs	r2, #0
 8015924:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8015926:	78fa      	ldrb	r2, [r7, #3]
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801592c:	f002 fe34 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015930:	f002 fe1a 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015934:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	689b      	ldr	r3, [r3, #8]
 801593a:	b2db      	uxtb	r3, r3
}
 801593c:	4618      	mov	r0, r3
 801593e:	3710      	adds	r7, #16
 8015940:	46bd      	mov	sp, r7
 8015942:	bd80      	pop	{r7, pc}

08015944 <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b084      	sub	sp, #16
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
 801594c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801594e:	f002 fe61 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015952:	f002 fdfd 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8015956:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	2200      	movs	r2, #0
 801595c:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 8015960:	701a      	strb	r2, [r3, #0]
 8015962:	2200      	movs	r2, #0
 8015964:	705a      	strb	r2, [r3, #1]
 8015966:	2200      	movs	r2, #0
 8015968:	709a      	strb	r2, [r3, #2]
 801596a:	2200      	movs	r2, #0
 801596c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2200      	movs	r2, #0
 8015972:	f042 0201 	orr.w	r2, r2, #1
 8015976:	711a      	strb	r2, [r3, #4]
 8015978:	2200      	movs	r2, #0
 801597a:	715a      	strb	r2, [r3, #5]
 801597c:	2200      	movs	r2, #0
 801597e:	719a      	strb	r2, [r3, #6]
 8015980:	2200      	movs	r2, #0
 8015982:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	683a      	ldr	r2, [r7, #0]
 8015988:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801598a:	f002 fe05 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801598e:	f002 fdeb 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015992:	60f8      	str	r0, [r7, #12]
}
 8015994:	bf00      	nop
 8015996:	3710      	adds	r7, #16
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}

0801599c <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b084      	sub	sp, #16
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80159a6:	f002 fe35 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80159aa:	f002 fdd1 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 80159ae:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	2200      	movs	r2, #0
 80159b4:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 80159b8:	701a      	strb	r2, [r3, #0]
 80159ba:	2200      	movs	r2, #0
 80159bc:	705a      	strb	r2, [r3, #1]
 80159be:	2200      	movs	r2, #0
 80159c0:	709a      	strb	r2, [r3, #2]
 80159c2:	2200      	movs	r2, #0
 80159c4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2200      	movs	r2, #0
 80159ca:	f042 0201 	orr.w	r2, r2, #1
 80159ce:	711a      	strb	r2, [r3, #4]
 80159d0:	2200      	movs	r2, #0
 80159d2:	715a      	strb	r2, [r3, #5]
 80159d4:	2200      	movs	r2, #0
 80159d6:	719a      	strb	r2, [r3, #6]
 80159d8:	2200      	movs	r2, #0
 80159da:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 80159dc:	683a      	ldr	r2, [r7, #0]
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80159e2:	f002 fdd9 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80159e6:	f002 fdbf 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 80159ea:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	689b      	ldr	r3, [r3, #8]
 80159f0:	b2db      	uxtb	r3, r3
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3710      	adds	r7, #16
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}

080159fa <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 80159fa:	b580      	push	{r7, lr}
 80159fc:	b084      	sub	sp, #16
 80159fe:	af00      	add	r7, sp, #0
 8015a00:	6078      	str	r0, [r7, #4]
 8015a02:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8015a04:	f002 fe06 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015a08:	f002 fda2 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8015a0c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	2200      	movs	r2, #0
 8015a12:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8015a16:	701a      	strb	r2, [r3, #0]
 8015a18:	2200      	movs	r2, #0
 8015a1a:	705a      	strb	r2, [r3, #1]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	709a      	strb	r2, [r3, #2]
 8015a20:	2200      	movs	r2, #0
 8015a22:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	2200      	movs	r2, #0
 8015a28:	f042 0201 	orr.w	r2, r2, #1
 8015a2c:	711a      	strb	r2, [r3, #4]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	715a      	strb	r2, [r3, #5]
 8015a32:	2200      	movs	r2, #0
 8015a34:	719a      	strb	r2, [r3, #6]
 8015a36:	2200      	movs	r2, #0
 8015a38:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8015a3a:	683a      	ldr	r2, [r7, #0]
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8015a40:	f002 fdaa 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015a44:	f002 fd90 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015a48:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	689b      	ldr	r3, [r3, #8]
 8015a4e:	b2db      	uxtb	r3, r3
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3710      	adds	r7, #16
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}

08015a58 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b084      	sub	sp, #16
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8015a60:	f002 fdd8 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015a64:	f002 fd74 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8015a68:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 8015a72:	701a      	strb	r2, [r3, #0]
 8015a74:	2200      	movs	r2, #0
 8015a76:	705a      	strb	r2, [r3, #1]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	709a      	strb	r2, [r3, #2]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	2200      	movs	r2, #0
 8015a84:	711a      	strb	r2, [r3, #4]
 8015a86:	2200      	movs	r2, #0
 8015a88:	715a      	strb	r2, [r3, #5]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	719a      	strb	r2, [r3, #6]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8015a92:	f002 fd81 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015a96:	f002 fd67 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015a9a:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	689b      	ldr	r3, [r3, #8]
}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	3710      	adds	r7, #16
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd80      	pop	{r7, pc}

08015aa8 <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b084      	sub	sp, #16
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8015ab0:	f002 fdb0 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015ab4:	f002 fd4c 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8015ab8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	2200      	movs	r2, #0
 8015abe:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 8015ac2:	701a      	strb	r2, [r3, #0]
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	705a      	strb	r2, [r3, #1]
 8015ac8:	2200      	movs	r2, #0
 8015aca:	709a      	strb	r2, [r3, #2]
 8015acc:	2200      	movs	r2, #0
 8015ace:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	711a      	strb	r2, [r3, #4]
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	715a      	strb	r2, [r3, #5]
 8015ada:	2200      	movs	r2, #0
 8015adc:	719a      	strb	r2, [r3, #6]
 8015ade:	2200      	movs	r2, #0
 8015ae0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8015ae2:	f002 fd59 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015ae6:	f002 fd3f 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015aea:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	689b      	ldr	r3, [r3, #8]
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	3710      	adds	r7, #16
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}

08015af8 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b084      	sub	sp, #16
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
 8015b00:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8015b02:	f002 fd87 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015b06:	f002 fd23 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8015b0a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	2200      	movs	r2, #0
 8015b10:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8015b14:	701a      	strb	r2, [r3, #0]
 8015b16:	2200      	movs	r2, #0
 8015b18:	705a      	strb	r2, [r3, #1]
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	709a      	strb	r2, [r3, #2]
 8015b1e:	2200      	movs	r2, #0
 8015b20:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	2200      	movs	r2, #0
 8015b26:	f042 0201 	orr.w	r2, r2, #1
 8015b2a:	711a      	strb	r2, [r3, #4]
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	715a      	strb	r2, [r3, #5]
 8015b30:	2200      	movs	r2, #0
 8015b32:	719a      	strb	r2, [r3, #6]
 8015b34:	2200      	movs	r2, #0
 8015b36:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8015b38:	683a      	ldr	r2, [r7, #0]
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8015b3e:	f002 fd2b 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015b42:	f002 fd11 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015b46:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	689b      	ldr	r3, [r3, #8]
 8015b4c:	b2db      	uxtb	r3, r3
}
 8015b4e:	4618      	mov	r0, r3
 8015b50:	3710      	adds	r7, #16
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}

08015b56 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8015b56:	b580      	push	{r7, lr}
 8015b58:	b084      	sub	sp, #16
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8015b5e:	f002 fd59 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015b62:	f002 fcf5 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8015b66:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8015b70:	701a      	strb	r2, [r3, #0]
 8015b72:	2200      	movs	r2, #0
 8015b74:	705a      	strb	r2, [r3, #1]
 8015b76:	2200      	movs	r2, #0
 8015b78:	709a      	strb	r2, [r3, #2]
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	2200      	movs	r2, #0
 8015b82:	711a      	strb	r2, [r3, #4]
 8015b84:	2200      	movs	r2, #0
 8015b86:	715a      	strb	r2, [r3, #5]
 8015b88:	2200      	movs	r2, #0
 8015b8a:	719a      	strb	r2, [r3, #6]
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8015b90:	f002 fd02 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015b94:	f002 fce8 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015b98:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	689b      	ldr	r3, [r3, #8]
 8015b9e:	b2db      	uxtb	r3, r3
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3710      	adds	r7, #16
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}

08015ba8 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b084      	sub	sp, #16
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8015bb0:	f002 fd30 	bl	8018614 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015bb4:	f002 fccc 	bl	8018550 <THREAD_Get_OTCmdPayloadBuffer>
 8015bb8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015bc2:	701a      	strb	r2, [r3, #0]
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	705a      	strb	r2, [r3, #1]
 8015bc8:	2200      	movs	r2, #0
 8015bca:	709a      	strb	r2, [r3, #2]
 8015bcc:	2200      	movs	r2, #0
 8015bce:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	711a      	strb	r2, [r3, #4]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	715a      	strb	r2, [r3, #5]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	719a      	strb	r2, [r3, #6]
 8015bde:	2200      	movs	r2, #0
 8015be0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8015be2:	f002 fcd9 	bl	8018598 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015be6:	f002 fcbf 	bl	8018568 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015bea:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	689b      	ldr	r3, [r3, #8]
 8015bf0:	b29b      	uxth	r3, r3
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3710      	adds	r7, #16
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}

08015bfa <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8015bfa:	b580      	push	{r7, lr}
 8015bfc:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8015bfe:	f002 ff8d 	bl	8018b1c <HW_IPCC_Enable>

  return;
 8015c02:	bf00      	nop
}
 8015c04:	bd80      	pop	{r7, pc}
	...

08015c08 <TL_Init>:


void TL_Init( void )
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8015c0c:	4b0f      	ldr	r3, [pc, #60]	; (8015c4c <TL_Init+0x44>)
 8015c0e:	4a10      	ldr	r2, [pc, #64]	; (8015c50 <TL_Init+0x48>)
 8015c10:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8015c12:	4b0e      	ldr	r3, [pc, #56]	; (8015c4c <TL_Init+0x44>)
 8015c14:	4a0f      	ldr	r2, [pc, #60]	; (8015c54 <TL_Init+0x4c>)
 8015c16:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8015c18:	4b0c      	ldr	r3, [pc, #48]	; (8015c4c <TL_Init+0x44>)
 8015c1a:	4a0f      	ldr	r2, [pc, #60]	; (8015c58 <TL_Init+0x50>)
 8015c1c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8015c1e:	4b0b      	ldr	r3, [pc, #44]	; (8015c4c <TL_Init+0x44>)
 8015c20:	4a0e      	ldr	r2, [pc, #56]	; (8015c5c <TL_Init+0x54>)
 8015c22:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8015c24:	4b09      	ldr	r3, [pc, #36]	; (8015c4c <TL_Init+0x44>)
 8015c26:	4a0e      	ldr	r2, [pc, #56]	; (8015c60 <TL_Init+0x58>)
 8015c28:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8015c2a:	4b08      	ldr	r3, [pc, #32]	; (8015c4c <TL_Init+0x44>)
 8015c2c:	4a0d      	ldr	r2, [pc, #52]	; (8015c64 <TL_Init+0x5c>)
 8015c2e:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8015c30:	4b06      	ldr	r3, [pc, #24]	; (8015c4c <TL_Init+0x44>)
 8015c32:	4a0d      	ldr	r2, [pc, #52]	; (8015c68 <TL_Init+0x60>)
 8015c34:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8015c36:	4b05      	ldr	r3, [pc, #20]	; (8015c4c <TL_Init+0x44>)
 8015c38:	4a0c      	ldr	r2, [pc, #48]	; (8015c6c <TL_Init+0x64>)
 8015c3a:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8015c3c:	4b03      	ldr	r3, [pc, #12]	; (8015c4c <TL_Init+0x44>)
 8015c3e:	4a0c      	ldr	r2, [pc, #48]	; (8015c70 <TL_Init+0x68>)
 8015c40:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8015c42:	f002 ff7b 	bl	8018b3c <HW_IPCC_Init>

  return;
 8015c46:	bf00      	nop
}
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	20030000 	.word	0x20030000
 8015c50:	20030024 	.word	0x20030024
 8015c54:	20030044 	.word	0x20030044
 8015c58:	20030054 	.word	0x20030054
 8015c5c:	20030060 	.word	0x20030060
 8015c60:	20030068 	.word	0x20030068
 8015c64:	20030070 	.word	0x20030070
 8015c68:	2003008c 	.word	0x2003008c
 8015c6c:	20030090 	.word	0x20030090
 8015c70:	2003009c 	.word	0x2003009c

08015c74 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8015c7a:	e009      	b.n	8015c90 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8015c7c:	1d3b      	adds	r3, r7, #4
 8015c7e:	4619      	mov	r1, r3
 8015c80:	4808      	ldr	r0, [pc, #32]	; (8015ca4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8015c82:	f003 fea6 	bl	80199d2 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8015c86:	4b08      	ldr	r3, [pc, #32]	; (8015ca8 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	687a      	ldr	r2, [r7, #4]
 8015c8c:	4610      	mov	r0, r2
 8015c8e:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8015c90:	4804      	ldr	r0, [pc, #16]	; (8015ca4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8015c92:	f003 fe17 	bl	80198c4 <LST_is_empty>
 8015c96:	4603      	mov	r3, r0
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d0ef      	beq.n	8015c7c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8015c9c:	bf00      	nop
}
 8015c9e:	3708      	adds	r7, #8
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}
 8015ca4:	20030828 	.word	0x20030828
 8015ca8:	20027624 	.word	0x20027624

08015cac <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8015cb0:	4b02      	ldr	r3, [pc, #8]	; (8015cbc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	4798      	blx	r3

  return;
 8015cb6:	bf00      	nop
}
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	bf00      	nop
 8015cbc:	20027628 	.word	0x20027628

08015cc0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b084      	sub	sp, #16
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8015ccc:	480d      	ldr	r0, [pc, #52]	; (8015d04 <TL_SYS_Init+0x44>)
 8015cce:	f003 fde9 	bl	80198a4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8015cd2:	4b0d      	ldr	r3, [pc, #52]	; (8015d08 <TL_SYS_Init+0x48>)
 8015cd4:	68db      	ldr	r3, [r3, #12]
 8015cd6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	689a      	ldr	r2, [r3, #8]
 8015cdc:	68bb      	ldr	r3, [r7, #8]
 8015cde:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	4a08      	ldr	r2, [pc, #32]	; (8015d04 <TL_SYS_Init+0x44>)
 8015ce4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8015ce6:	f002 ff57 	bl	8018b98 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	4a07      	ldr	r2, [pc, #28]	; (8015d0c <TL_SYS_Init+0x4c>)
 8015cf0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	4a06      	ldr	r2, [pc, #24]	; (8015d10 <TL_SYS_Init+0x50>)
 8015cf8:	6013      	str	r3, [r2, #0]

  return 0;
 8015cfa:	2300      	movs	r3, #0
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	3710      	adds	r7, #16
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	20030830 	.word	0x20030830
 8015d08:	20030000 	.word	0x20030000
 8015d0c:	2002762c 	.word	0x2002762c
 8015d10:	20027630 	.word	0x20027630

08015d14 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b082      	sub	sp, #8
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
 8015d1c:	460b      	mov	r3, r1
 8015d1e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8015d20:	4b05      	ldr	r3, [pc, #20]	; (8015d38 <TL_SYS_SendCmd+0x24>)
 8015d22:	68db      	ldr	r3, [r3, #12]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	2210      	movs	r2, #16
 8015d28:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 8015d2a:	f002 ff3f 	bl	8018bac <HW_IPCC_SYS_SendCmd>

  return 0;
 8015d2e:	2300      	movs	r3, #0
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	3708      	adds	r7, #8
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}
 8015d38:	20030000 	.word	0x20030000

08015d3c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8015d40:	4b04      	ldr	r3, [pc, #16]	; (8015d54 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	4a04      	ldr	r2, [pc, #16]	; (8015d58 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8015d46:	68d2      	ldr	r2, [r2, #12]
 8015d48:	6812      	ldr	r2, [r2, #0]
 8015d4a:	4610      	mov	r0, r2
 8015d4c:	4798      	blx	r3

  return;
 8015d4e:	bf00      	nop
}
 8015d50:	bd80      	pop	{r7, pc}
 8015d52:	bf00      	nop
 8015d54:	2002762c 	.word	0x2002762c
 8015d58:	20030000 	.word	0x20030000

08015d5c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8015d62:	e009      	b.n	8015d78 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8015d64:	1d3b      	adds	r3, r7, #4
 8015d66:	4619      	mov	r1, r3
 8015d68:	4808      	ldr	r0, [pc, #32]	; (8015d8c <HW_IPCC_SYS_EvtNot+0x30>)
 8015d6a:	f003 fe32 	bl	80199d2 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8015d6e:	4b08      	ldr	r3, [pc, #32]	; (8015d90 <HW_IPCC_SYS_EvtNot+0x34>)
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	687a      	ldr	r2, [r7, #4]
 8015d74:	4610      	mov	r0, r2
 8015d76:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8015d78:	4804      	ldr	r0, [pc, #16]	; (8015d8c <HW_IPCC_SYS_EvtNot+0x30>)
 8015d7a:	f003 fda3 	bl	80198c4 <LST_is_empty>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d0ef      	beq.n	8015d64 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8015d84:	bf00      	nop
}
 8015d86:	3708      	adds	r7, #8
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	bd80      	pop	{r7, pc}
 8015d8c:	20030830 	.word	0x20030830
 8015d90:	20027630 	.word	0x20027630

08015d94 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8015d9c:	4b0a      	ldr	r3, [pc, #40]	; (8015dc8 <TL_THREAD_Init+0x34>)
 8015d9e:	689b      	ldr	r3, [r3, #8]
 8015da0:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	685a      	ldr	r2, [r3, #4]
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681a      	ldr	r2, [r3, #0]
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	689a      	ldr	r2, [r3, #8]
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8015dba:	f002 ff1d 	bl	8018bf8 <HW_IPCC_THREAD_Init>

  return;
 8015dbe:	bf00      	nop
}
 8015dc0:	3710      	adds	r7, #16
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}
 8015dc6:	bf00      	nop
 8015dc8:	20030000 	.word	0x20030000

08015dcc <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8015dd0:	4b04      	ldr	r3, [pc, #16]	; (8015de4 <TL_OT_SendCmd+0x18>)
 8015dd2:	689b      	ldr	r3, [r3, #8]
 8015dd4:	689b      	ldr	r3, [r3, #8]
 8015dd6:	2208      	movs	r2, #8
 8015dd8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8015dda:	f002 ff1b 	bl	8018c14 <HW_IPCC_OT_SendCmd>

  return;
 8015dde:	bf00      	nop
}
 8015de0:	bd80      	pop	{r7, pc}
 8015de2:	bf00      	nop
 8015de4:	20030000 	.word	0x20030000

08015de8 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8015dec:	4b04      	ldr	r3, [pc, #16]	; (8015e00 <TL_CLI_SendCmd+0x18>)
 8015dee:	689b      	ldr	r3, [r3, #8]
 8015df0:	685b      	ldr	r3, [r3, #4]
 8015df2:	220a      	movs	r2, #10
 8015df4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 8015df6:	f002 ff1b 	bl	8018c30 <HW_IPCC_CLI_SendCmd>

  return;
 8015dfa:	bf00      	nop
}
 8015dfc:	bd80      	pop	{r7, pc}
 8015dfe:	bf00      	nop
 8015e00:	20030000 	.word	0x20030000

08015e04 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8015e08:	4b04      	ldr	r3, [pc, #16]	; (8015e1c <TL_THREAD_SendAck+0x18>)
 8015e0a:	689b      	ldr	r3, [r3, #8]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	220d      	movs	r2, #13
 8015e10:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8015e12:	f002 ff17 	bl	8018c44 <HW_IPCC_THREAD_SendAck>

  return;
 8015e16:	bf00      	nop
}
 8015e18:	bd80      	pop	{r7, pc}
 8015e1a:	bf00      	nop
 8015e1c:	20030000 	.word	0x20030000

08015e20 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8015e24:	4b04      	ldr	r3, [pc, #16]	; (8015e38 <TL_THREAD_CliSendAck+0x18>)
 8015e26:	689b      	ldr	r3, [r3, #8]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	220d      	movs	r2, #13
 8015e2c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8015e2e:	f002 ff17 	bl	8018c60 <HW_IPCC_THREAD_CliSendAck>

  return;
 8015e32:	bf00      	nop
}
 8015e34:	bd80      	pop	{r7, pc}
 8015e36:	bf00      	nop
 8015e38:	20030000 	.word	0x20030000

08015e3c <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8015e40:	4b03      	ldr	r3, [pc, #12]	; (8015e50 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8015e42:	689b      	ldr	r3, [r3, #8]
 8015e44:	689b      	ldr	r3, [r3, #8]
 8015e46:	4618      	mov	r0, r3
 8015e48:	f002 fbca 	bl	80185e0 <TL_OT_CmdEvtReceived>

  return;
 8015e4c:	bf00      	nop
}
 8015e4e:	bd80      	pop	{r7, pc}
 8015e50:	20030000 	.word	0x20030000

08015e54 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8015e58:	4b03      	ldr	r3, [pc, #12]	; (8015e68 <HW_IPCC_THREAD_EvtNot+0x14>)
 8015e5a:	689b      	ldr	r3, [r3, #8]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f002 fbc8 	bl	80185f4 <TL_THREAD_NotReceived>

  return;
 8015e64:	bf00      	nop
}
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	20030000 	.word	0x20030000

08015e6c <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8015e70:	4b03      	ldr	r3, [pc, #12]	; (8015e80 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8015e72:	689b      	ldr	r3, [r3, #8]
 8015e74:	685b      	ldr	r3, [r3, #4]
 8015e76:	4618      	mov	r0, r3
 8015e78:	f002 fc6a 	bl	8018750 <TL_THREAD_CliNotReceived>

  return;
 8015e7c:	bf00      	nop
}
 8015e7e:	bd80      	pop	{r7, pc}
 8015e80:	20030000 	.word	0x20030000

08015e84 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b082      	sub	sp, #8
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8015e8c:	4817      	ldr	r0, [pc, #92]	; (8015eec <TL_MM_Init+0x68>)
 8015e8e:	f003 fd09 	bl	80198a4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8015e92:	4817      	ldr	r0, [pc, #92]	; (8015ef0 <TL_MM_Init+0x6c>)
 8015e94:	f003 fd06 	bl	80198a4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8015e98:	4b16      	ldr	r3, [pc, #88]	; (8015ef4 <TL_MM_Init+0x70>)
 8015e9a:	691b      	ldr	r3, [r3, #16]
 8015e9c:	4a16      	ldr	r2, [pc, #88]	; (8015ef8 <TL_MM_Init+0x74>)
 8015e9e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8015ea0:	4b15      	ldr	r3, [pc, #84]	; (8015ef8 <TL_MM_Init+0x74>)
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	687a      	ldr	r2, [r7, #4]
 8015ea6:	6892      	ldr	r2, [r2, #8]
 8015ea8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8015eaa:	4b13      	ldr	r3, [pc, #76]	; (8015ef8 <TL_MM_Init+0x74>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	687a      	ldr	r2, [r7, #4]
 8015eb0:	68d2      	ldr	r2, [r2, #12]
 8015eb2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8015eb4:	4b10      	ldr	r3, [pc, #64]	; (8015ef8 <TL_MM_Init+0x74>)
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	4a0c      	ldr	r2, [pc, #48]	; (8015eec <TL_MM_Init+0x68>)
 8015eba:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8015ebc:	4b0e      	ldr	r3, [pc, #56]	; (8015ef8 <TL_MM_Init+0x74>)
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	687a      	ldr	r2, [r7, #4]
 8015ec2:	6812      	ldr	r2, [r2, #0]
 8015ec4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8015ec6:	4b0c      	ldr	r3, [pc, #48]	; (8015ef8 <TL_MM_Init+0x74>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	687a      	ldr	r2, [r7, #4]
 8015ecc:	6852      	ldr	r2, [r2, #4]
 8015ece:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8015ed0:	4b09      	ldr	r3, [pc, #36]	; (8015ef8 <TL_MM_Init+0x74>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	687a      	ldr	r2, [r7, #4]
 8015ed6:	6912      	ldr	r2, [r2, #16]
 8015ed8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8015eda:	4b07      	ldr	r3, [pc, #28]	; (8015ef8 <TL_MM_Init+0x74>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	687a      	ldr	r2, [r7, #4]
 8015ee0:	6952      	ldr	r2, [r2, #20]
 8015ee2:	619a      	str	r2, [r3, #24]

  return;
 8015ee4:	bf00      	nop
}
 8015ee6:	3708      	adds	r7, #8
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bd80      	pop	{r7, pc}
 8015eec:	200300a8 	.word	0x200300a8
 8015ef0:	2002761c 	.word	0x2002761c
 8015ef4:	20030000 	.word	0x20030000
 8015ef8:	20027634 	.word	0x20027634

08015efc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b082      	sub	sp, #8
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8015f04:	6879      	ldr	r1, [r7, #4]
 8015f06:	4805      	ldr	r0, [pc, #20]	; (8015f1c <TL_MM_EvtDone+0x20>)
 8015f08:	f003 fd20 	bl	801994c <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8015f0c:	4804      	ldr	r0, [pc, #16]	; (8015f20 <TL_MM_EvtDone+0x24>)
 8015f0e:	f002 fed9 	bl	8018cc4 <HW_IPCC_MM_SendFreeBuf>

  return;
 8015f12:	bf00      	nop
}
 8015f14:	3708      	adds	r7, #8
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}
 8015f1a:	bf00      	nop
 8015f1c:	2002761c 	.word	0x2002761c
 8015f20:	08015f25 	.word	0x08015f25

08015f24 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8015f24:	b580      	push	{r7, lr}
 8015f26:	b082      	sub	sp, #8
 8015f28:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8015f2a:	e00c      	b.n	8015f46 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8015f2c:	1d3b      	adds	r3, r7, #4
 8015f2e:	4619      	mov	r1, r3
 8015f30:	480a      	ldr	r0, [pc, #40]	; (8015f5c <SendFreeBuf+0x38>)
 8015f32:	f003 fd4e 	bl	80199d2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8015f36:	4b0a      	ldr	r3, [pc, #40]	; (8015f60 <SendFreeBuf+0x3c>)
 8015f38:	691b      	ldr	r3, [r3, #16]
 8015f3a:	691b      	ldr	r3, [r3, #16]
 8015f3c:	687a      	ldr	r2, [r7, #4]
 8015f3e:	4611      	mov	r1, r2
 8015f40:	4618      	mov	r0, r3
 8015f42:	f003 fd03 	bl	801994c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8015f46:	4805      	ldr	r0, [pc, #20]	; (8015f5c <SendFreeBuf+0x38>)
 8015f48:	f003 fcbc 	bl	80198c4 <LST_is_empty>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d0ec      	beq.n	8015f2c <SendFreeBuf+0x8>
  }

  return;
 8015f52:	bf00      	nop
}
 8015f54:	3708      	adds	r7, #8
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	2002761c 	.word	0x2002761c
 8015f60:	20030000 	.word	0x20030000

08015f64 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8015f68:	4805      	ldr	r0, [pc, #20]	; (8015f80 <TL_TRACES_Init+0x1c>)
 8015f6a:	f003 fc9b 	bl	80198a4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8015f6e:	4b05      	ldr	r3, [pc, #20]	; (8015f84 <TL_TRACES_Init+0x20>)
 8015f70:	695b      	ldr	r3, [r3, #20]
 8015f72:	4a03      	ldr	r2, [pc, #12]	; (8015f80 <TL_TRACES_Init+0x1c>)
 8015f74:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8015f76:	f002 fedb 	bl	8018d30 <HW_IPCC_TRACES_Init>

  return;
 8015f7a:	bf00      	nop
}
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	bf00      	nop
 8015f80:	200300b0 	.word	0x200300b0
 8015f84:	20030000 	.word	0x20030000

08015f88 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8015f8e:	e008      	b.n	8015fa2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8015f90:	1d3b      	adds	r3, r7, #4
 8015f92:	4619      	mov	r1, r3
 8015f94:	4808      	ldr	r0, [pc, #32]	; (8015fb8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8015f96:	f003 fd1c 	bl	80199d2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7eb f93d 	bl	800121c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8015fa2:	4805      	ldr	r0, [pc, #20]	; (8015fb8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8015fa4:	f003 fc8e 	bl	80198c4 <LST_is_empty>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d0f0      	beq.n	8015f90 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8015fae:	bf00      	nop
}
 8015fb0:	3708      	adds	r7, #8
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}
 8015fb6:	bf00      	nop
 8015fb8:	200300b0 	.word	0x200300b0

08015fbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b084      	sub	sp, #16
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	460b      	mov	r3, r1
 8015fc6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	7c1b      	ldrb	r3, [r3, #16]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d115      	bne.n	8016000 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015fd8:	2202      	movs	r2, #2
 8015fda:	2181      	movs	r1, #129	; 0x81
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f003 fa7f 	bl	80194e0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2201      	movs	r2, #1
 8015fe6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015fec:	2202      	movs	r2, #2
 8015fee:	2101      	movs	r1, #1
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f003 fa75 	bl	80194e0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	2201      	movs	r2, #1
 8015ffa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8015ffe:	e012      	b.n	8016026 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016000:	2340      	movs	r3, #64	; 0x40
 8016002:	2202      	movs	r2, #2
 8016004:	2181      	movs	r1, #129	; 0x81
 8016006:	6878      	ldr	r0, [r7, #4]
 8016008:	f003 fa6a 	bl	80194e0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	2201      	movs	r2, #1
 8016010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016012:	2340      	movs	r3, #64	; 0x40
 8016014:	2202      	movs	r2, #2
 8016016:	2101      	movs	r1, #1
 8016018:	6878      	ldr	r0, [r7, #4]
 801601a:	f003 fa61 	bl	80194e0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2201      	movs	r2, #1
 8016022:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016026:	2308      	movs	r3, #8
 8016028:	2203      	movs	r2, #3
 801602a:	2182      	movs	r1, #130	; 0x82
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f003 fa57 	bl	80194e0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	2201      	movs	r2, #1
 8016036:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8016038:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801603c:	f003 fba8 	bl	8019790 <USBD_static_malloc>
 8016040:	4602      	mov	r2, r0
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801604e:	2b00      	cmp	r3, #0
 8016050:	d102      	bne.n	8016058 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8016052:	2301      	movs	r3, #1
 8016054:	73fb      	strb	r3, [r7, #15]
 8016056:	e026      	b.n	80160a6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801605e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801606a:	68bb      	ldr	r3, [r7, #8]
 801606c:	2200      	movs	r2, #0
 801606e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	2200      	movs	r2, #0
 8016076:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	7c1b      	ldrb	r3, [r3, #16]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d109      	bne.n	8016096 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016088:	f44f 7300 	mov.w	r3, #512	; 0x200
 801608c:	2101      	movs	r1, #1
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f003 fb11 	bl	80196b6 <USBD_LL_PrepareReceive>
 8016094:	e007      	b.n	80160a6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016096:	68bb      	ldr	r3, [r7, #8]
 8016098:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801609c:	2340      	movs	r3, #64	; 0x40
 801609e:	2101      	movs	r1, #1
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f003 fb08 	bl	80196b6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80160a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3710      	adds	r7, #16
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}

080160b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b084      	sub	sp, #16
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
 80160b8:	460b      	mov	r3, r1
 80160ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80160bc:	2300      	movs	r3, #0
 80160be:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80160c0:	2181      	movs	r1, #129	; 0x81
 80160c2:	6878      	ldr	r0, [r7, #4]
 80160c4:	f003 fa32 	bl	801952c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	2200      	movs	r2, #0
 80160cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80160ce:	2101      	movs	r1, #1
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f003 fa2b 	bl	801952c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	2200      	movs	r2, #0
 80160da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80160de:	2182      	movs	r1, #130	; 0x82
 80160e0:	6878      	ldr	r0, [r7, #4]
 80160e2:	f003 fa23 	bl	801952c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	2200      	movs	r2, #0
 80160ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d00e      	beq.n	8016114 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80160fc:	685b      	ldr	r3, [r3, #4]
 80160fe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016106:	4618      	mov	r0, r3
 8016108:	f003 fb50 	bl	80197ac <USBD_static_free>
    pdev->pClassData = NULL;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2200      	movs	r2, #0
 8016110:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8016114:	7bfb      	ldrb	r3, [r7, #15]
}
 8016116:	4618      	mov	r0, r3
 8016118:	3710      	adds	r7, #16
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}

0801611e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801611e:	b580      	push	{r7, lr}
 8016120:	b086      	sub	sp, #24
 8016122:	af00      	add	r7, sp, #0
 8016124:	6078      	str	r0, [r7, #4]
 8016126:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801612e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8016130:	2300      	movs	r3, #0
 8016132:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8016134:	2300      	movs	r3, #0
 8016136:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8016138:	2300      	movs	r3, #0
 801613a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016144:	2b00      	cmp	r3, #0
 8016146:	d039      	beq.n	80161bc <USBD_CDC_Setup+0x9e>
 8016148:	2b20      	cmp	r3, #32
 801614a:	d17c      	bne.n	8016246 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801614c:	683b      	ldr	r3, [r7, #0]
 801614e:	88db      	ldrh	r3, [r3, #6]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d029      	beq.n	80161a8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8016154:	683b      	ldr	r3, [r7, #0]
 8016156:	781b      	ldrb	r3, [r3, #0]
 8016158:	b25b      	sxtb	r3, r3
 801615a:	2b00      	cmp	r3, #0
 801615c:	da11      	bge.n	8016182 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016164:	689b      	ldr	r3, [r3, #8]
 8016166:	683a      	ldr	r2, [r7, #0]
 8016168:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801616a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801616c:	683a      	ldr	r2, [r7, #0]
 801616e:	88d2      	ldrh	r2, [r2, #6]
 8016170:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8016172:	6939      	ldr	r1, [r7, #16]
 8016174:	683b      	ldr	r3, [r7, #0]
 8016176:	88db      	ldrh	r3, [r3, #6]
 8016178:	461a      	mov	r2, r3
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f001 fa10 	bl	80175a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8016180:	e068      	b.n	8016254 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	785a      	ldrb	r2, [r3, #1]
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	88db      	ldrh	r3, [r3, #6]
 8016190:	b2da      	uxtb	r2, r3
 8016192:	693b      	ldr	r3, [r7, #16]
 8016194:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8016198:	6939      	ldr	r1, [r7, #16]
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	88db      	ldrh	r3, [r3, #6]
 801619e:	461a      	mov	r2, r3
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f001 fa2b 	bl	80175fc <USBD_CtlPrepareRx>
      break;
 80161a6:	e055      	b.n	8016254 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80161ae:	689b      	ldr	r3, [r3, #8]
 80161b0:	683a      	ldr	r2, [r7, #0]
 80161b2:	7850      	ldrb	r0, [r2, #1]
 80161b4:	2200      	movs	r2, #0
 80161b6:	6839      	ldr	r1, [r7, #0]
 80161b8:	4798      	blx	r3
      break;
 80161ba:	e04b      	b.n	8016254 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80161bc:	683b      	ldr	r3, [r7, #0]
 80161be:	785b      	ldrb	r3, [r3, #1]
 80161c0:	2b0a      	cmp	r3, #10
 80161c2:	d017      	beq.n	80161f4 <USBD_CDC_Setup+0xd6>
 80161c4:	2b0b      	cmp	r3, #11
 80161c6:	d029      	beq.n	801621c <USBD_CDC_Setup+0xfe>
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d133      	bne.n	8016234 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161d2:	2b03      	cmp	r3, #3
 80161d4:	d107      	bne.n	80161e6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80161d6:	f107 030c 	add.w	r3, r7, #12
 80161da:	2202      	movs	r2, #2
 80161dc:	4619      	mov	r1, r3
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f001 f9de 	bl	80175a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80161e4:	e02e      	b.n	8016244 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80161e6:	6839      	ldr	r1, [r7, #0]
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f001 f96e 	bl	80174ca <USBD_CtlError>
            ret = USBD_FAIL;
 80161ee:	2302      	movs	r3, #2
 80161f0:	75fb      	strb	r3, [r7, #23]
          break;
 80161f2:	e027      	b.n	8016244 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161fa:	2b03      	cmp	r3, #3
 80161fc:	d107      	bne.n	801620e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80161fe:	f107 030f 	add.w	r3, r7, #15
 8016202:	2201      	movs	r2, #1
 8016204:	4619      	mov	r1, r3
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f001 f9ca 	bl	80175a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801620c:	e01a      	b.n	8016244 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801620e:	6839      	ldr	r1, [r7, #0]
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f001 f95a 	bl	80174ca <USBD_CtlError>
            ret = USBD_FAIL;
 8016216:	2302      	movs	r3, #2
 8016218:	75fb      	strb	r3, [r7, #23]
          break;
 801621a:	e013      	b.n	8016244 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016222:	2b03      	cmp	r3, #3
 8016224:	d00d      	beq.n	8016242 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8016226:	6839      	ldr	r1, [r7, #0]
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f001 f94e 	bl	80174ca <USBD_CtlError>
            ret = USBD_FAIL;
 801622e:	2302      	movs	r3, #2
 8016230:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016232:	e006      	b.n	8016242 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8016234:	6839      	ldr	r1, [r7, #0]
 8016236:	6878      	ldr	r0, [r7, #4]
 8016238:	f001 f947 	bl	80174ca <USBD_CtlError>
          ret = USBD_FAIL;
 801623c:	2302      	movs	r3, #2
 801623e:	75fb      	strb	r3, [r7, #23]
          break;
 8016240:	e000      	b.n	8016244 <USBD_CDC_Setup+0x126>
          break;
 8016242:	bf00      	nop
      }
      break;
 8016244:	e006      	b.n	8016254 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8016246:	6839      	ldr	r1, [r7, #0]
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f001 f93e 	bl	80174ca <USBD_CtlError>
      ret = USBD_FAIL;
 801624e:	2302      	movs	r3, #2
 8016250:	75fb      	strb	r3, [r7, #23]
      break;
 8016252:	bf00      	nop
  }

  return ret;
 8016254:	7dfb      	ldrb	r3, [r7, #23]
}
 8016256:	4618      	mov	r0, r3
 8016258:	3718      	adds	r7, #24
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}

0801625e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801625e:	b580      	push	{r7, lr}
 8016260:	b084      	sub	sp, #16
 8016262:	af00      	add	r7, sp, #0
 8016264:	6078      	str	r0, [r7, #4]
 8016266:	460b      	mov	r3, r1
 8016268:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016270:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016278:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016280:	2b00      	cmp	r3, #0
 8016282:	d037      	beq.n	80162f4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8016284:	78fa      	ldrb	r2, [r7, #3]
 8016286:	6879      	ldr	r1, [r7, #4]
 8016288:	4613      	mov	r3, r2
 801628a:	009b      	lsls	r3, r3, #2
 801628c:	4413      	add	r3, r2
 801628e:	009b      	lsls	r3, r3, #2
 8016290:	440b      	add	r3, r1
 8016292:	331c      	adds	r3, #28
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d026      	beq.n	80162e8 <USBD_CDC_DataIn+0x8a>
 801629a:	78fa      	ldrb	r2, [r7, #3]
 801629c:	6879      	ldr	r1, [r7, #4]
 801629e:	4613      	mov	r3, r2
 80162a0:	009b      	lsls	r3, r3, #2
 80162a2:	4413      	add	r3, r2
 80162a4:	009b      	lsls	r3, r3, #2
 80162a6:	440b      	add	r3, r1
 80162a8:	331c      	adds	r3, #28
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	78fa      	ldrb	r2, [r7, #3]
 80162ae:	68b9      	ldr	r1, [r7, #8]
 80162b0:	0152      	lsls	r2, r2, #5
 80162b2:	440a      	add	r2, r1
 80162b4:	3238      	adds	r2, #56	; 0x38
 80162b6:	6812      	ldr	r2, [r2, #0]
 80162b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80162bc:	fb02 f201 	mul.w	r2, r2, r1
 80162c0:	1a9b      	subs	r3, r3, r2
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d110      	bne.n	80162e8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80162c6:	78fa      	ldrb	r2, [r7, #3]
 80162c8:	6879      	ldr	r1, [r7, #4]
 80162ca:	4613      	mov	r3, r2
 80162cc:	009b      	lsls	r3, r3, #2
 80162ce:	4413      	add	r3, r2
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	440b      	add	r3, r1
 80162d4:	331c      	adds	r3, #28
 80162d6:	2200      	movs	r2, #0
 80162d8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80162da:	78f9      	ldrb	r1, [r7, #3]
 80162dc:	2300      	movs	r3, #0
 80162de:	2200      	movs	r2, #0
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f003 f9c5 	bl	8019670 <USBD_LL_Transmit>
 80162e6:	e003      	b.n	80162f0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	2200      	movs	r2, #0
 80162ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80162f0:	2300      	movs	r3, #0
 80162f2:	e000      	b.n	80162f6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80162f4:	2302      	movs	r3, #2
  }
}
 80162f6:	4618      	mov	r0, r3
 80162f8:	3710      	adds	r7, #16
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}

080162fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80162fe:	b580      	push	{r7, lr}
 8016300:	b084      	sub	sp, #16
 8016302:	af00      	add	r7, sp, #0
 8016304:	6078      	str	r0, [r7, #4]
 8016306:	460b      	mov	r3, r1
 8016308:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016310:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016312:	78fb      	ldrb	r3, [r7, #3]
 8016314:	4619      	mov	r1, r3
 8016316:	6878      	ldr	r0, [r7, #4]
 8016318:	f003 f9f0 	bl	80196fc <USBD_LL_GetRxDataSize>
 801631c:	4602      	mov	r2, r0
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801632a:	2b00      	cmp	r3, #0
 801632c:	d00d      	beq.n	801634a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016334:	68db      	ldr	r3, [r3, #12]
 8016336:	68fa      	ldr	r2, [r7, #12]
 8016338:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801633c:	68fa      	ldr	r2, [r7, #12]
 801633e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8016342:	4611      	mov	r1, r2
 8016344:	4798      	blx	r3

    return USBD_OK;
 8016346:	2300      	movs	r3, #0
 8016348:	e000      	b.n	801634c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801634a:	2302      	movs	r3, #2
  }
}
 801634c:	4618      	mov	r0, r3
 801634e:	3710      	adds	r7, #16
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}

08016354 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b084      	sub	sp, #16
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016362:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801636a:	2b00      	cmp	r3, #0
 801636c:	d015      	beq.n	801639a <USBD_CDC_EP0_RxReady+0x46>
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8016374:	2bff      	cmp	r3, #255	; 0xff
 8016376:	d010      	beq.n	801639a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801637e:	689b      	ldr	r3, [r3, #8]
 8016380:	68fa      	ldr	r2, [r7, #12]
 8016382:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8016386:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8016388:	68fa      	ldr	r2, [r7, #12]
 801638a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801638e:	b292      	uxth	r2, r2
 8016390:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	22ff      	movs	r2, #255	; 0xff
 8016396:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 801639a:	2300      	movs	r3, #0
}
 801639c:	4618      	mov	r0, r3
 801639e:	3710      	adds	r7, #16
 80163a0:	46bd      	mov	sp, r7
 80163a2:	bd80      	pop	{r7, pc}

080163a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80163a4:	b480      	push	{r7}
 80163a6:	b083      	sub	sp, #12
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	2243      	movs	r2, #67	; 0x43
 80163b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80163b2:	4b03      	ldr	r3, [pc, #12]	; (80163c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	370c      	adds	r7, #12
 80163b8:	46bd      	mov	sp, r7
 80163ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163be:	4770      	bx	lr
 80163c0:	20000110 	.word	0x20000110

080163c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80163c4:	b480      	push	{r7}
 80163c6:	b083      	sub	sp, #12
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2243      	movs	r2, #67	; 0x43
 80163d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80163d2:	4b03      	ldr	r3, [pc, #12]	; (80163e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	370c      	adds	r7, #12
 80163d8:	46bd      	mov	sp, r7
 80163da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163de:	4770      	bx	lr
 80163e0:	200000cc 	.word	0x200000cc

080163e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80163e4:	b480      	push	{r7}
 80163e6:	b083      	sub	sp, #12
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2243      	movs	r2, #67	; 0x43
 80163f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80163f2:	4b03      	ldr	r3, [pc, #12]	; (8016400 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	370c      	adds	r7, #12
 80163f8:	46bd      	mov	sp, r7
 80163fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fe:	4770      	bx	lr
 8016400:	20000154 	.word	0x20000154

08016404 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016404:	b480      	push	{r7}
 8016406:	b083      	sub	sp, #12
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	220a      	movs	r2, #10
 8016410:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8016412:	4b03      	ldr	r3, [pc, #12]	; (8016420 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016414:	4618      	mov	r0, r3
 8016416:	370c      	adds	r7, #12
 8016418:	46bd      	mov	sp, r7
 801641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641e:	4770      	bx	lr
 8016420:	20000088 	.word	0x20000088

08016424 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8016424:	b480      	push	{r7}
 8016426:	b085      	sub	sp, #20
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
 801642c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801642e:	2302      	movs	r3, #2
 8016430:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8016432:	683b      	ldr	r3, [r7, #0]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d005      	beq.n	8016444 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	683a      	ldr	r2, [r7, #0]
 801643c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8016440:	2300      	movs	r3, #0
 8016442:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8016444:	7bfb      	ldrb	r3, [r7, #15]
}
 8016446:	4618      	mov	r0, r3
 8016448:	3714      	adds	r7, #20
 801644a:	46bd      	mov	sp, r7
 801644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016450:	4770      	bx	lr

08016452 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8016452:	b480      	push	{r7}
 8016454:	b087      	sub	sp, #28
 8016456:	af00      	add	r7, sp, #0
 8016458:	60f8      	str	r0, [r7, #12]
 801645a:	60b9      	str	r1, [r7, #8]
 801645c:	4613      	mov	r3, r2
 801645e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016466:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	68ba      	ldr	r2, [r7, #8]
 801646c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8016470:	88fa      	ldrh	r2, [r7, #6]
 8016472:	697b      	ldr	r3, [r7, #20]
 8016474:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8016478:	2300      	movs	r3, #0
}
 801647a:	4618      	mov	r0, r3
 801647c:	371c      	adds	r7, #28
 801647e:	46bd      	mov	sp, r7
 8016480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016484:	4770      	bx	lr

08016486 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8016486:	b480      	push	{r7}
 8016488:	b085      	sub	sp, #20
 801648a:	af00      	add	r7, sp, #0
 801648c:	6078      	str	r0, [r7, #4]
 801648e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016496:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	683a      	ldr	r2, [r7, #0]
 801649c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80164a0:	2300      	movs	r3, #0
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	3714      	adds	r7, #20
 80164a6:	46bd      	mov	sp, r7
 80164a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ac:	4770      	bx	lr

080164ae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80164ae:	b580      	push	{r7, lr}
 80164b0:	b084      	sub	sp, #16
 80164b2:	af00      	add	r7, sp, #0
 80164b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164bc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d017      	beq.n	80164f8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	7c1b      	ldrb	r3, [r3, #16]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d109      	bne.n	80164e4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80164d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80164da:	2101      	movs	r1, #1
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f003 f8ea 	bl	80196b6 <USBD_LL_PrepareReceive>
 80164e2:	e007      	b.n	80164f4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80164ea:	2340      	movs	r3, #64	; 0x40
 80164ec:	2101      	movs	r1, #1
 80164ee:	6878      	ldr	r0, [r7, #4]
 80164f0:	f003 f8e1 	bl	80196b6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80164f4:	2300      	movs	r3, #0
 80164f6:	e000      	b.n	80164fa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80164f8:	2302      	movs	r3, #2
  }
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	3710      	adds	r7, #16
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}

08016502 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016502:	b580      	push	{r7, lr}
 8016504:	b084      	sub	sp, #16
 8016506:	af00      	add	r7, sp, #0
 8016508:	60f8      	str	r0, [r7, #12]
 801650a:	60b9      	str	r1, [r7, #8]
 801650c:	4613      	mov	r3, r2
 801650e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d101      	bne.n	801651a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016516:	2302      	movs	r3, #2
 8016518:	e01a      	b.n	8016550 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016520:	2b00      	cmp	r3, #0
 8016522:	d003      	beq.n	801652c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	2200      	movs	r2, #0
 8016528:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801652c:	68bb      	ldr	r3, [r7, #8]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d003      	beq.n	801653a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	68ba      	ldr	r2, [r7, #8]
 8016536:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	2201      	movs	r2, #1
 801653e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	79fa      	ldrb	r2, [r7, #7]
 8016546:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8016548:	68f8      	ldr	r0, [r7, #12]
 801654a:	f002 ff31 	bl	80193b0 <USBD_LL_Init>

  return USBD_OK;
 801654e:	2300      	movs	r3, #0
}
 8016550:	4618      	mov	r0, r3
 8016552:	3710      	adds	r7, #16
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}

08016558 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016558:	b480      	push	{r7}
 801655a:	b085      	sub	sp, #20
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8016562:	2300      	movs	r3, #0
 8016564:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8016566:	683b      	ldr	r3, [r7, #0]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d006      	beq.n	801657a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	683a      	ldr	r2, [r7, #0]
 8016570:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8016574:	2300      	movs	r3, #0
 8016576:	73fb      	strb	r3, [r7, #15]
 8016578:	e001      	b.n	801657e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801657a:	2302      	movs	r3, #2
 801657c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016580:	4618      	mov	r0, r3
 8016582:	3714      	adds	r7, #20
 8016584:	46bd      	mov	sp, r7
 8016586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658a:	4770      	bx	lr

0801658c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b082      	sub	sp, #8
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f002 ff6d 	bl	8019474 <USBD_LL_Start>

  return USBD_OK;
 801659a:	2300      	movs	r3, #0
}
 801659c:	4618      	mov	r0, r3
 801659e:	3708      	adds	r7, #8
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}

080165a4 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b082      	sub	sp, #8
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165b2:	685b      	ldr	r3, [r3, #4]
 80165b4:	687a      	ldr	r2, [r7, #4]
 80165b6:	6852      	ldr	r2, [r2, #4]
 80165b8:	b2d2      	uxtb	r2, r2
 80165ba:	4611      	mov	r1, r2
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f002 ff72 	bl	80194aa <USBD_LL_Stop>

  return USBD_OK;
 80165c6:	2300      	movs	r3, #0
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	3708      	adds	r7, #8
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}

080165d0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80165d0:	b480      	push	{r7}
 80165d2:	b083      	sub	sp, #12
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80165d8:	2300      	movs	r3, #0
}
 80165da:	4618      	mov	r0, r3
 80165dc:	370c      	adds	r7, #12
 80165de:	46bd      	mov	sp, r7
 80165e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e4:	4770      	bx	lr

080165e6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80165e6:	b580      	push	{r7, lr}
 80165e8:	b084      	sub	sp, #16
 80165ea:	af00      	add	r7, sp, #0
 80165ec:	6078      	str	r0, [r7, #4]
 80165ee:	460b      	mov	r3, r1
 80165f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80165f2:	2302      	movs	r3, #2
 80165f4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d00c      	beq.n	801661a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	78fa      	ldrb	r2, [r7, #3]
 801660a:	4611      	mov	r1, r2
 801660c:	6878      	ldr	r0, [r7, #4]
 801660e:	4798      	blx	r3
 8016610:	4603      	mov	r3, r0
 8016612:	2b00      	cmp	r3, #0
 8016614:	d101      	bne.n	801661a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8016616:	2300      	movs	r3, #0
 8016618:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801661a:	7bfb      	ldrb	r3, [r7, #15]
}
 801661c:	4618      	mov	r0, r3
 801661e:	3710      	adds	r7, #16
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}

08016624 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b082      	sub	sp, #8
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	460b      	mov	r3, r1
 801662e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016636:	685b      	ldr	r3, [r3, #4]
 8016638:	78fa      	ldrb	r2, [r7, #3]
 801663a:	4611      	mov	r1, r2
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	4798      	blx	r3

  return USBD_OK;
 8016640:	2300      	movs	r3, #0
}
 8016642:	4618      	mov	r0, r3
 8016644:	3708      	adds	r7, #8
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}

0801664a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801664a:	b580      	push	{r7, lr}
 801664c:	b082      	sub	sp, #8
 801664e:	af00      	add	r7, sp, #0
 8016650:	6078      	str	r0, [r7, #4]
 8016652:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801665a:	6839      	ldr	r1, [r7, #0]
 801665c:	4618      	mov	r0, r3
 801665e:	f000 fef7 	bl	8017450 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	2201      	movs	r2, #1
 8016666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016670:	461a      	mov	r2, r3
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801667e:	f003 031f 	and.w	r3, r3, #31
 8016682:	2b01      	cmp	r3, #1
 8016684:	d00c      	beq.n	80166a0 <USBD_LL_SetupStage+0x56>
 8016686:	2b01      	cmp	r3, #1
 8016688:	d302      	bcc.n	8016690 <USBD_LL_SetupStage+0x46>
 801668a:	2b02      	cmp	r3, #2
 801668c:	d010      	beq.n	80166b0 <USBD_LL_SetupStage+0x66>
 801668e:	e017      	b.n	80166c0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016696:	4619      	mov	r1, r3
 8016698:	6878      	ldr	r0, [r7, #4]
 801669a:	f000 f9cd 	bl	8016a38 <USBD_StdDevReq>
      break;
 801669e:	e01a      	b.n	80166d6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80166a6:	4619      	mov	r1, r3
 80166a8:	6878      	ldr	r0, [r7, #4]
 80166aa:	f000 fa2f 	bl	8016b0c <USBD_StdItfReq>
      break;
 80166ae:	e012      	b.n	80166d6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80166b6:	4619      	mov	r1, r3
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f000 fa6d 	bl	8016b98 <USBD_StdEPReq>
      break;
 80166be:	e00a      	b.n	80166d6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80166c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80166ca:	b2db      	uxtb	r3, r3
 80166cc:	4619      	mov	r1, r3
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f002 ff4b 	bl	801956a <USBD_LL_StallEP>
      break;
 80166d4:	bf00      	nop
  }

  return USBD_OK;
 80166d6:	2300      	movs	r3, #0
}
 80166d8:	4618      	mov	r0, r3
 80166da:	3708      	adds	r7, #8
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}

080166e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b086      	sub	sp, #24
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	60f8      	str	r0, [r7, #12]
 80166e8:	460b      	mov	r3, r1
 80166ea:	607a      	str	r2, [r7, #4]
 80166ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80166ee:	7afb      	ldrb	r3, [r7, #11]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d14b      	bne.n	801678c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80166fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016702:	2b03      	cmp	r3, #3
 8016704:	d134      	bne.n	8016770 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8016706:	697b      	ldr	r3, [r7, #20]
 8016708:	68da      	ldr	r2, [r3, #12]
 801670a:	697b      	ldr	r3, [r7, #20]
 801670c:	691b      	ldr	r3, [r3, #16]
 801670e:	429a      	cmp	r2, r3
 8016710:	d919      	bls.n	8016746 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8016712:	697b      	ldr	r3, [r7, #20]
 8016714:	68da      	ldr	r2, [r3, #12]
 8016716:	697b      	ldr	r3, [r7, #20]
 8016718:	691b      	ldr	r3, [r3, #16]
 801671a:	1ad2      	subs	r2, r2, r3
 801671c:	697b      	ldr	r3, [r7, #20]
 801671e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016720:	697b      	ldr	r3, [r7, #20]
 8016722:	68da      	ldr	r2, [r3, #12]
 8016724:	697b      	ldr	r3, [r7, #20]
 8016726:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016728:	429a      	cmp	r2, r3
 801672a:	d203      	bcs.n	8016734 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801672c:	697b      	ldr	r3, [r7, #20]
 801672e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8016730:	b29b      	uxth	r3, r3
 8016732:	e002      	b.n	801673a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016734:	697b      	ldr	r3, [r7, #20]
 8016736:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016738:	b29b      	uxth	r3, r3
 801673a:	461a      	mov	r2, r3
 801673c:	6879      	ldr	r1, [r7, #4]
 801673e:	68f8      	ldr	r0, [r7, #12]
 8016740:	f000 ff7a 	bl	8017638 <USBD_CtlContinueRx>
 8016744:	e038      	b.n	80167b8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801674c:	691b      	ldr	r3, [r3, #16]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d00a      	beq.n	8016768 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016758:	2b03      	cmp	r3, #3
 801675a:	d105      	bne.n	8016768 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016762:	691b      	ldr	r3, [r3, #16]
 8016764:	68f8      	ldr	r0, [r7, #12]
 8016766:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8016768:	68f8      	ldr	r0, [r7, #12]
 801676a:	f000 ff77 	bl	801765c <USBD_CtlSendStatus>
 801676e:	e023      	b.n	80167b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016776:	2b05      	cmp	r3, #5
 8016778:	d11e      	bne.n	80167b8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	2200      	movs	r2, #0
 801677e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8016782:	2100      	movs	r1, #0
 8016784:	68f8      	ldr	r0, [r7, #12]
 8016786:	f002 fef0 	bl	801956a <USBD_LL_StallEP>
 801678a:	e015      	b.n	80167b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016792:	699b      	ldr	r3, [r3, #24]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d00d      	beq.n	80167b4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801679e:	2b03      	cmp	r3, #3
 80167a0:	d108      	bne.n	80167b4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167a8:	699b      	ldr	r3, [r3, #24]
 80167aa:	7afa      	ldrb	r2, [r7, #11]
 80167ac:	4611      	mov	r1, r2
 80167ae:	68f8      	ldr	r0, [r7, #12]
 80167b0:	4798      	blx	r3
 80167b2:	e001      	b.n	80167b8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80167b4:	2302      	movs	r3, #2
 80167b6:	e000      	b.n	80167ba <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80167b8:	2300      	movs	r3, #0
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3718      	adds	r7, #24
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}

080167c2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b086      	sub	sp, #24
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	60f8      	str	r0, [r7, #12]
 80167ca:	460b      	mov	r3, r1
 80167cc:	607a      	str	r2, [r7, #4]
 80167ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80167d0:	7afb      	ldrb	r3, [r7, #11]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d17f      	bne.n	80168d6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	3314      	adds	r3, #20
 80167da:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80167e2:	2b02      	cmp	r3, #2
 80167e4:	d15c      	bne.n	80168a0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	68da      	ldr	r2, [r3, #12]
 80167ea:	697b      	ldr	r3, [r7, #20]
 80167ec:	691b      	ldr	r3, [r3, #16]
 80167ee:	429a      	cmp	r2, r3
 80167f0:	d915      	bls.n	801681e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	68da      	ldr	r2, [r3, #12]
 80167f6:	697b      	ldr	r3, [r7, #20]
 80167f8:	691b      	ldr	r3, [r3, #16]
 80167fa:	1ad2      	subs	r2, r2, r3
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8016800:	697b      	ldr	r3, [r7, #20]
 8016802:	68db      	ldr	r3, [r3, #12]
 8016804:	b29b      	uxth	r3, r3
 8016806:	461a      	mov	r2, r3
 8016808:	6879      	ldr	r1, [r7, #4]
 801680a:	68f8      	ldr	r0, [r7, #12]
 801680c:	f000 fee4 	bl	80175d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016810:	2300      	movs	r3, #0
 8016812:	2200      	movs	r2, #0
 8016814:	2100      	movs	r1, #0
 8016816:	68f8      	ldr	r0, [r7, #12]
 8016818:	f002 ff4d 	bl	80196b6 <USBD_LL_PrepareReceive>
 801681c:	e04e      	b.n	80168bc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	689b      	ldr	r3, [r3, #8]
 8016822:	697a      	ldr	r2, [r7, #20]
 8016824:	6912      	ldr	r2, [r2, #16]
 8016826:	fbb3 f1f2 	udiv	r1, r3, r2
 801682a:	fb02 f201 	mul.w	r2, r2, r1
 801682e:	1a9b      	subs	r3, r3, r2
 8016830:	2b00      	cmp	r3, #0
 8016832:	d11c      	bne.n	801686e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8016834:	697b      	ldr	r3, [r7, #20]
 8016836:	689a      	ldr	r2, [r3, #8]
 8016838:	697b      	ldr	r3, [r7, #20]
 801683a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801683c:	429a      	cmp	r2, r3
 801683e:	d316      	bcc.n	801686e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8016840:	697b      	ldr	r3, [r7, #20]
 8016842:	689a      	ldr	r2, [r3, #8]
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801684a:	429a      	cmp	r2, r3
 801684c:	d20f      	bcs.n	801686e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801684e:	2200      	movs	r2, #0
 8016850:	2100      	movs	r1, #0
 8016852:	68f8      	ldr	r0, [r7, #12]
 8016854:	f000 fec0 	bl	80175d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	2200      	movs	r2, #0
 801685c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016860:	2300      	movs	r3, #0
 8016862:	2200      	movs	r2, #0
 8016864:	2100      	movs	r1, #0
 8016866:	68f8      	ldr	r0, [r7, #12]
 8016868:	f002 ff25 	bl	80196b6 <USBD_LL_PrepareReceive>
 801686c:	e026      	b.n	80168bc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016874:	68db      	ldr	r3, [r3, #12]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d00a      	beq.n	8016890 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8016880:	2b03      	cmp	r3, #3
 8016882:	d105      	bne.n	8016890 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801688a:	68db      	ldr	r3, [r3, #12]
 801688c:	68f8      	ldr	r0, [r7, #12]
 801688e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8016890:	2180      	movs	r1, #128	; 0x80
 8016892:	68f8      	ldr	r0, [r7, #12]
 8016894:	f002 fe69 	bl	801956a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8016898:	68f8      	ldr	r0, [r7, #12]
 801689a:	f000 fef2 	bl	8017682 <USBD_CtlReceiveStatus>
 801689e:	e00d      	b.n	80168bc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80168a6:	2b04      	cmp	r3, #4
 80168a8:	d004      	beq.n	80168b4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d103      	bne.n	80168bc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80168b4:	2180      	movs	r1, #128	; 0x80
 80168b6:	68f8      	ldr	r0, [r7, #12]
 80168b8:	f002 fe57 	bl	801956a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80168c2:	2b01      	cmp	r3, #1
 80168c4:	d11d      	bne.n	8016902 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80168c6:	68f8      	ldr	r0, [r7, #12]
 80168c8:	f7ff fe82 	bl	80165d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	2200      	movs	r2, #0
 80168d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80168d4:	e015      	b.n	8016902 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168dc:	695b      	ldr	r3, [r3, #20]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d00d      	beq.n	80168fe <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80168e8:	2b03      	cmp	r3, #3
 80168ea:	d108      	bne.n	80168fe <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168f2:	695b      	ldr	r3, [r3, #20]
 80168f4:	7afa      	ldrb	r2, [r7, #11]
 80168f6:	4611      	mov	r1, r2
 80168f8:	68f8      	ldr	r0, [r7, #12]
 80168fa:	4798      	blx	r3
 80168fc:	e001      	b.n	8016902 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80168fe:	2302      	movs	r3, #2
 8016900:	e000      	b.n	8016904 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8016902:	2300      	movs	r3, #0
}
 8016904:	4618      	mov	r0, r3
 8016906:	3718      	adds	r7, #24
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}

0801690c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b082      	sub	sp, #8
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016914:	2340      	movs	r3, #64	; 0x40
 8016916:	2200      	movs	r2, #0
 8016918:	2100      	movs	r1, #0
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f002 fde0 	bl	80194e0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2201      	movs	r2, #1
 8016924:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2240      	movs	r2, #64	; 0x40
 801692c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016930:	2340      	movs	r3, #64	; 0x40
 8016932:	2200      	movs	r2, #0
 8016934:	2180      	movs	r1, #128	; 0x80
 8016936:	6878      	ldr	r0, [r7, #4]
 8016938:	f002 fdd2 	bl	80194e0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2201      	movs	r2, #1
 8016940:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2240      	movs	r2, #64	; 0x40
 8016946:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2201      	movs	r2, #1
 801694c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2200      	movs	r2, #0
 8016954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2200      	movs	r2, #0
 801695c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	2200      	movs	r2, #0
 8016962:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801696c:	2b00      	cmp	r3, #0
 801696e:	d009      	beq.n	8016984 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016976:	685b      	ldr	r3, [r3, #4]
 8016978:	687a      	ldr	r2, [r7, #4]
 801697a:	6852      	ldr	r2, [r2, #4]
 801697c:	b2d2      	uxtb	r2, r2
 801697e:	4611      	mov	r1, r2
 8016980:	6878      	ldr	r0, [r7, #4]
 8016982:	4798      	blx	r3
  }

  return USBD_OK;
 8016984:	2300      	movs	r3, #0
}
 8016986:	4618      	mov	r0, r3
 8016988:	3708      	adds	r7, #8
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}

0801698e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801698e:	b480      	push	{r7}
 8016990:	b083      	sub	sp, #12
 8016992:	af00      	add	r7, sp, #0
 8016994:	6078      	str	r0, [r7, #4]
 8016996:	460b      	mov	r3, r1
 8016998:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	78fa      	ldrb	r2, [r7, #3]
 801699e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80169a0:	2300      	movs	r3, #0
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	370c      	adds	r7, #12
 80169a6:	46bd      	mov	sp, r7
 80169a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ac:	4770      	bx	lr

080169ae <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80169ae:	b480      	push	{r7}
 80169b0:	b083      	sub	sp, #12
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	2204      	movs	r2, #4
 80169c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80169ca:	2300      	movs	r3, #0
}
 80169cc:	4618      	mov	r0, r3
 80169ce:	370c      	adds	r7, #12
 80169d0:	46bd      	mov	sp, r7
 80169d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d6:	4770      	bx	lr

080169d8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80169d8:	b480      	push	{r7}
 80169da:	b083      	sub	sp, #12
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169e6:	2b04      	cmp	r3, #4
 80169e8:	d105      	bne.n	80169f6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80169f6:	2300      	movs	r3, #0
}
 80169f8:	4618      	mov	r0, r3
 80169fa:	370c      	adds	r7, #12
 80169fc:	46bd      	mov	sp, r7
 80169fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a02:	4770      	bx	lr

08016a04 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b082      	sub	sp, #8
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a12:	2b03      	cmp	r3, #3
 8016a14:	d10b      	bne.n	8016a2e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016a1c:	69db      	ldr	r3, [r3, #28]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d005      	beq.n	8016a2e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016a28:	69db      	ldr	r3, [r3, #28]
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016a2e:	2300      	movs	r3, #0
}
 8016a30:	4618      	mov	r0, r3
 8016a32:	3708      	adds	r7, #8
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}

08016a38 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b084      	sub	sp, #16
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016a42:	2300      	movs	r3, #0
 8016a44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016a4e:	2b20      	cmp	r3, #32
 8016a50:	d004      	beq.n	8016a5c <USBD_StdDevReq+0x24>
 8016a52:	2b40      	cmp	r3, #64	; 0x40
 8016a54:	d002      	beq.n	8016a5c <USBD_StdDevReq+0x24>
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d008      	beq.n	8016a6c <USBD_StdDevReq+0x34>
 8016a5a:	e04c      	b.n	8016af6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016a62:	689b      	ldr	r3, [r3, #8]
 8016a64:	6839      	ldr	r1, [r7, #0]
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	4798      	blx	r3
      break;
 8016a6a:	e049      	b.n	8016b00 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016a6c:	683b      	ldr	r3, [r7, #0]
 8016a6e:	785b      	ldrb	r3, [r3, #1]
 8016a70:	2b09      	cmp	r3, #9
 8016a72:	d83a      	bhi.n	8016aea <USBD_StdDevReq+0xb2>
 8016a74:	a201      	add	r2, pc, #4	; (adr r2, 8016a7c <USBD_StdDevReq+0x44>)
 8016a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a7a:	bf00      	nop
 8016a7c:	08016acd 	.word	0x08016acd
 8016a80:	08016ae1 	.word	0x08016ae1
 8016a84:	08016aeb 	.word	0x08016aeb
 8016a88:	08016ad7 	.word	0x08016ad7
 8016a8c:	08016aeb 	.word	0x08016aeb
 8016a90:	08016aaf 	.word	0x08016aaf
 8016a94:	08016aa5 	.word	0x08016aa5
 8016a98:	08016aeb 	.word	0x08016aeb
 8016a9c:	08016ac3 	.word	0x08016ac3
 8016aa0:	08016ab9 	.word	0x08016ab9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016aa4:	6839      	ldr	r1, [r7, #0]
 8016aa6:	6878      	ldr	r0, [r7, #4]
 8016aa8:	f000 f9d4 	bl	8016e54 <USBD_GetDescriptor>
          break;
 8016aac:	e022      	b.n	8016af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016aae:	6839      	ldr	r1, [r7, #0]
 8016ab0:	6878      	ldr	r0, [r7, #4]
 8016ab2:	f000 fb61 	bl	8017178 <USBD_SetAddress>
          break;
 8016ab6:	e01d      	b.n	8016af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8016ab8:	6839      	ldr	r1, [r7, #0]
 8016aba:	6878      	ldr	r0, [r7, #4]
 8016abc:	f000 fb9e 	bl	80171fc <USBD_SetConfig>
          break;
 8016ac0:	e018      	b.n	8016af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016ac2:	6839      	ldr	r1, [r7, #0]
 8016ac4:	6878      	ldr	r0, [r7, #4]
 8016ac6:	f000 fc27 	bl	8017318 <USBD_GetConfig>
          break;
 8016aca:	e013      	b.n	8016af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016acc:	6839      	ldr	r1, [r7, #0]
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f000 fc56 	bl	8017380 <USBD_GetStatus>
          break;
 8016ad4:	e00e      	b.n	8016af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016ad6:	6839      	ldr	r1, [r7, #0]
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	f000 fc84 	bl	80173e6 <USBD_SetFeature>
          break;
 8016ade:	e009      	b.n	8016af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016ae0:	6839      	ldr	r1, [r7, #0]
 8016ae2:	6878      	ldr	r0, [r7, #4]
 8016ae4:	f000 fc93 	bl	801740e <USBD_ClrFeature>
          break;
 8016ae8:	e004      	b.n	8016af4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8016aea:	6839      	ldr	r1, [r7, #0]
 8016aec:	6878      	ldr	r0, [r7, #4]
 8016aee:	f000 fcec 	bl	80174ca <USBD_CtlError>
          break;
 8016af2:	bf00      	nop
      }
      break;
 8016af4:	e004      	b.n	8016b00 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8016af6:	6839      	ldr	r1, [r7, #0]
 8016af8:	6878      	ldr	r0, [r7, #4]
 8016afa:	f000 fce6 	bl	80174ca <USBD_CtlError>
      break;
 8016afe:	bf00      	nop
  }

  return ret;
 8016b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3710      	adds	r7, #16
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}
 8016b0a:	bf00      	nop

08016b0c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b084      	sub	sp, #16
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
 8016b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016b16:	2300      	movs	r3, #0
 8016b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	781b      	ldrb	r3, [r3, #0]
 8016b1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016b22:	2b20      	cmp	r3, #32
 8016b24:	d003      	beq.n	8016b2e <USBD_StdItfReq+0x22>
 8016b26:	2b40      	cmp	r3, #64	; 0x40
 8016b28:	d001      	beq.n	8016b2e <USBD_StdItfReq+0x22>
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d12a      	bne.n	8016b84 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b34:	3b01      	subs	r3, #1
 8016b36:	2b02      	cmp	r3, #2
 8016b38:	d81d      	bhi.n	8016b76 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016b3a:	683b      	ldr	r3, [r7, #0]
 8016b3c:	889b      	ldrh	r3, [r3, #4]
 8016b3e:	b2db      	uxtb	r3, r3
 8016b40:	2b01      	cmp	r3, #1
 8016b42:	d813      	bhi.n	8016b6c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b4a:	689b      	ldr	r3, [r3, #8]
 8016b4c:	6839      	ldr	r1, [r7, #0]
 8016b4e:	6878      	ldr	r0, [r7, #4]
 8016b50:	4798      	blx	r3
 8016b52:	4603      	mov	r3, r0
 8016b54:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	88db      	ldrh	r3, [r3, #6]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d110      	bne.n	8016b80 <USBD_StdItfReq+0x74>
 8016b5e:	7bfb      	ldrb	r3, [r7, #15]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d10d      	bne.n	8016b80 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8016b64:	6878      	ldr	r0, [r7, #4]
 8016b66:	f000 fd79 	bl	801765c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016b6a:	e009      	b.n	8016b80 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8016b6c:	6839      	ldr	r1, [r7, #0]
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f000 fcab 	bl	80174ca <USBD_CtlError>
          break;
 8016b74:	e004      	b.n	8016b80 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8016b76:	6839      	ldr	r1, [r7, #0]
 8016b78:	6878      	ldr	r0, [r7, #4]
 8016b7a:	f000 fca6 	bl	80174ca <USBD_CtlError>
          break;
 8016b7e:	e000      	b.n	8016b82 <USBD_StdItfReq+0x76>
          break;
 8016b80:	bf00      	nop
      }
      break;
 8016b82:	e004      	b.n	8016b8e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8016b84:	6839      	ldr	r1, [r7, #0]
 8016b86:	6878      	ldr	r0, [r7, #4]
 8016b88:	f000 fc9f 	bl	80174ca <USBD_CtlError>
      break;
 8016b8c:	bf00      	nop
  }

  return USBD_OK;
 8016b8e:	2300      	movs	r3, #0
}
 8016b90:	4618      	mov	r0, r3
 8016b92:	3710      	adds	r7, #16
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd80      	pop	{r7, pc}

08016b98 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b084      	sub	sp, #16
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
 8016ba0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8016ba6:	683b      	ldr	r3, [r7, #0]
 8016ba8:	889b      	ldrh	r3, [r3, #4]
 8016baa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	781b      	ldrb	r3, [r3, #0]
 8016bb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016bb4:	2b20      	cmp	r3, #32
 8016bb6:	d004      	beq.n	8016bc2 <USBD_StdEPReq+0x2a>
 8016bb8:	2b40      	cmp	r3, #64	; 0x40
 8016bba:	d002      	beq.n	8016bc2 <USBD_StdEPReq+0x2a>
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d008      	beq.n	8016bd2 <USBD_StdEPReq+0x3a>
 8016bc0:	e13d      	b.n	8016e3e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bc8:	689b      	ldr	r3, [r3, #8]
 8016bca:	6839      	ldr	r1, [r7, #0]
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	4798      	blx	r3
      break;
 8016bd0:	e13a      	b.n	8016e48 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8016bd2:	683b      	ldr	r3, [r7, #0]
 8016bd4:	781b      	ldrb	r3, [r3, #0]
 8016bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016bda:	2b20      	cmp	r3, #32
 8016bdc:	d10a      	bne.n	8016bf4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016be4:	689b      	ldr	r3, [r3, #8]
 8016be6:	6839      	ldr	r1, [r7, #0]
 8016be8:	6878      	ldr	r0, [r7, #4]
 8016bea:	4798      	blx	r3
 8016bec:	4603      	mov	r3, r0
 8016bee:	73fb      	strb	r3, [r7, #15]

        return ret;
 8016bf0:	7bfb      	ldrb	r3, [r7, #15]
 8016bf2:	e12a      	b.n	8016e4a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	785b      	ldrb	r3, [r3, #1]
 8016bf8:	2b01      	cmp	r3, #1
 8016bfa:	d03e      	beq.n	8016c7a <USBD_StdEPReq+0xe2>
 8016bfc:	2b03      	cmp	r3, #3
 8016bfe:	d002      	beq.n	8016c06 <USBD_StdEPReq+0x6e>
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d070      	beq.n	8016ce6 <USBD_StdEPReq+0x14e>
 8016c04:	e115      	b.n	8016e32 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c0c:	2b02      	cmp	r3, #2
 8016c0e:	d002      	beq.n	8016c16 <USBD_StdEPReq+0x7e>
 8016c10:	2b03      	cmp	r3, #3
 8016c12:	d015      	beq.n	8016c40 <USBD_StdEPReq+0xa8>
 8016c14:	e02b      	b.n	8016c6e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c16:	7bbb      	ldrb	r3, [r7, #14]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d00c      	beq.n	8016c36 <USBD_StdEPReq+0x9e>
 8016c1c:	7bbb      	ldrb	r3, [r7, #14]
 8016c1e:	2b80      	cmp	r3, #128	; 0x80
 8016c20:	d009      	beq.n	8016c36 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8016c22:	7bbb      	ldrb	r3, [r7, #14]
 8016c24:	4619      	mov	r1, r3
 8016c26:	6878      	ldr	r0, [r7, #4]
 8016c28:	f002 fc9f 	bl	801956a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8016c2c:	2180      	movs	r1, #128	; 0x80
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f002 fc9b 	bl	801956a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016c34:	e020      	b.n	8016c78 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8016c36:	6839      	ldr	r1, [r7, #0]
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f000 fc46 	bl	80174ca <USBD_CtlError>
              break;
 8016c3e:	e01b      	b.n	8016c78 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016c40:	683b      	ldr	r3, [r7, #0]
 8016c42:	885b      	ldrh	r3, [r3, #2]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d10e      	bne.n	8016c66 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8016c48:	7bbb      	ldrb	r3, [r7, #14]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d00b      	beq.n	8016c66 <USBD_StdEPReq+0xce>
 8016c4e:	7bbb      	ldrb	r3, [r7, #14]
 8016c50:	2b80      	cmp	r3, #128	; 0x80
 8016c52:	d008      	beq.n	8016c66 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	88db      	ldrh	r3, [r3, #6]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d104      	bne.n	8016c66 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8016c5c:	7bbb      	ldrb	r3, [r7, #14]
 8016c5e:	4619      	mov	r1, r3
 8016c60:	6878      	ldr	r0, [r7, #4]
 8016c62:	f002 fc82 	bl	801956a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8016c66:	6878      	ldr	r0, [r7, #4]
 8016c68:	f000 fcf8 	bl	801765c <USBD_CtlSendStatus>

              break;
 8016c6c:	e004      	b.n	8016c78 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8016c6e:	6839      	ldr	r1, [r7, #0]
 8016c70:	6878      	ldr	r0, [r7, #4]
 8016c72:	f000 fc2a 	bl	80174ca <USBD_CtlError>
              break;
 8016c76:	bf00      	nop
          }
          break;
 8016c78:	e0e0      	b.n	8016e3c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c80:	2b02      	cmp	r3, #2
 8016c82:	d002      	beq.n	8016c8a <USBD_StdEPReq+0xf2>
 8016c84:	2b03      	cmp	r3, #3
 8016c86:	d015      	beq.n	8016cb4 <USBD_StdEPReq+0x11c>
 8016c88:	e026      	b.n	8016cd8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c8a:	7bbb      	ldrb	r3, [r7, #14]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d00c      	beq.n	8016caa <USBD_StdEPReq+0x112>
 8016c90:	7bbb      	ldrb	r3, [r7, #14]
 8016c92:	2b80      	cmp	r3, #128	; 0x80
 8016c94:	d009      	beq.n	8016caa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8016c96:	7bbb      	ldrb	r3, [r7, #14]
 8016c98:	4619      	mov	r1, r3
 8016c9a:	6878      	ldr	r0, [r7, #4]
 8016c9c:	f002 fc65 	bl	801956a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8016ca0:	2180      	movs	r1, #128	; 0x80
 8016ca2:	6878      	ldr	r0, [r7, #4]
 8016ca4:	f002 fc61 	bl	801956a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016ca8:	e01c      	b.n	8016ce4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8016caa:	6839      	ldr	r1, [r7, #0]
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f000 fc0c 	bl	80174ca <USBD_CtlError>
              break;
 8016cb2:	e017      	b.n	8016ce4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	885b      	ldrh	r3, [r3, #2]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d112      	bne.n	8016ce2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016cbc:	7bbb      	ldrb	r3, [r7, #14]
 8016cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d004      	beq.n	8016cd0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8016cc6:	7bbb      	ldrb	r3, [r7, #14]
 8016cc8:	4619      	mov	r1, r3
 8016cca:	6878      	ldr	r0, [r7, #4]
 8016ccc:	f002 fc6c 	bl	80195a8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8016cd0:	6878      	ldr	r0, [r7, #4]
 8016cd2:	f000 fcc3 	bl	801765c <USBD_CtlSendStatus>
              }
              break;
 8016cd6:	e004      	b.n	8016ce2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8016cd8:	6839      	ldr	r1, [r7, #0]
 8016cda:	6878      	ldr	r0, [r7, #4]
 8016cdc:	f000 fbf5 	bl	80174ca <USBD_CtlError>
              break;
 8016ce0:	e000      	b.n	8016ce4 <USBD_StdEPReq+0x14c>
              break;
 8016ce2:	bf00      	nop
          }
          break;
 8016ce4:	e0aa      	b.n	8016e3c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016cec:	2b02      	cmp	r3, #2
 8016cee:	d002      	beq.n	8016cf6 <USBD_StdEPReq+0x15e>
 8016cf0:	2b03      	cmp	r3, #3
 8016cf2:	d032      	beq.n	8016d5a <USBD_StdEPReq+0x1c2>
 8016cf4:	e097      	b.n	8016e26 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016cf6:	7bbb      	ldrb	r3, [r7, #14]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d007      	beq.n	8016d0c <USBD_StdEPReq+0x174>
 8016cfc:	7bbb      	ldrb	r3, [r7, #14]
 8016cfe:	2b80      	cmp	r3, #128	; 0x80
 8016d00:	d004      	beq.n	8016d0c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8016d02:	6839      	ldr	r1, [r7, #0]
 8016d04:	6878      	ldr	r0, [r7, #4]
 8016d06:	f000 fbe0 	bl	80174ca <USBD_CtlError>
                break;
 8016d0a:	e091      	b.n	8016e30 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	da0b      	bge.n	8016d2c <USBD_StdEPReq+0x194>
 8016d14:	7bbb      	ldrb	r3, [r7, #14]
 8016d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d1a:	4613      	mov	r3, r2
 8016d1c:	009b      	lsls	r3, r3, #2
 8016d1e:	4413      	add	r3, r2
 8016d20:	009b      	lsls	r3, r3, #2
 8016d22:	3310      	adds	r3, #16
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	4413      	add	r3, r2
 8016d28:	3304      	adds	r3, #4
 8016d2a:	e00b      	b.n	8016d44 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016d2c:	7bbb      	ldrb	r3, [r7, #14]
 8016d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d32:	4613      	mov	r3, r2
 8016d34:	009b      	lsls	r3, r3, #2
 8016d36:	4413      	add	r3, r2
 8016d38:	009b      	lsls	r3, r3, #2
 8016d3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016d3e:	687a      	ldr	r2, [r7, #4]
 8016d40:	4413      	add	r3, r2
 8016d42:	3304      	adds	r3, #4
 8016d44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	2200      	movs	r2, #0
 8016d4a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8016d4c:	68bb      	ldr	r3, [r7, #8]
 8016d4e:	2202      	movs	r2, #2
 8016d50:	4619      	mov	r1, r3
 8016d52:	6878      	ldr	r0, [r7, #4]
 8016d54:	f000 fc24 	bl	80175a0 <USBD_CtlSendData>
              break;
 8016d58:	e06a      	b.n	8016e30 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	da11      	bge.n	8016d86 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016d62:	7bbb      	ldrb	r3, [r7, #14]
 8016d64:	f003 020f 	and.w	r2, r3, #15
 8016d68:	6879      	ldr	r1, [r7, #4]
 8016d6a:	4613      	mov	r3, r2
 8016d6c:	009b      	lsls	r3, r3, #2
 8016d6e:	4413      	add	r3, r2
 8016d70:	009b      	lsls	r3, r3, #2
 8016d72:	440b      	add	r3, r1
 8016d74:	3318      	adds	r3, #24
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d117      	bne.n	8016dac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8016d7c:	6839      	ldr	r1, [r7, #0]
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	f000 fba3 	bl	80174ca <USBD_CtlError>
                  break;
 8016d84:	e054      	b.n	8016e30 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016d86:	7bbb      	ldrb	r3, [r7, #14]
 8016d88:	f003 020f 	and.w	r2, r3, #15
 8016d8c:	6879      	ldr	r1, [r7, #4]
 8016d8e:	4613      	mov	r3, r2
 8016d90:	009b      	lsls	r3, r3, #2
 8016d92:	4413      	add	r3, r2
 8016d94:	009b      	lsls	r3, r3, #2
 8016d96:	440b      	add	r3, r1
 8016d98:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d104      	bne.n	8016dac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8016da2:	6839      	ldr	r1, [r7, #0]
 8016da4:	6878      	ldr	r0, [r7, #4]
 8016da6:	f000 fb90 	bl	80174ca <USBD_CtlError>
                  break;
 8016daa:	e041      	b.n	8016e30 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016dac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	da0b      	bge.n	8016dcc <USBD_StdEPReq+0x234>
 8016db4:	7bbb      	ldrb	r3, [r7, #14]
 8016db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016dba:	4613      	mov	r3, r2
 8016dbc:	009b      	lsls	r3, r3, #2
 8016dbe:	4413      	add	r3, r2
 8016dc0:	009b      	lsls	r3, r3, #2
 8016dc2:	3310      	adds	r3, #16
 8016dc4:	687a      	ldr	r2, [r7, #4]
 8016dc6:	4413      	add	r3, r2
 8016dc8:	3304      	adds	r3, #4
 8016dca:	e00b      	b.n	8016de4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016dcc:	7bbb      	ldrb	r3, [r7, #14]
 8016dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016dd2:	4613      	mov	r3, r2
 8016dd4:	009b      	lsls	r3, r3, #2
 8016dd6:	4413      	add	r3, r2
 8016dd8:	009b      	lsls	r3, r3, #2
 8016dda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016dde:	687a      	ldr	r2, [r7, #4]
 8016de0:	4413      	add	r3, r2
 8016de2:	3304      	adds	r3, #4
 8016de4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016de6:	7bbb      	ldrb	r3, [r7, #14]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d002      	beq.n	8016df2 <USBD_StdEPReq+0x25a>
 8016dec:	7bbb      	ldrb	r3, [r7, #14]
 8016dee:	2b80      	cmp	r3, #128	; 0x80
 8016df0:	d103      	bne.n	8016dfa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8016df2:	68bb      	ldr	r3, [r7, #8]
 8016df4:	2200      	movs	r2, #0
 8016df6:	601a      	str	r2, [r3, #0]
 8016df8:	e00e      	b.n	8016e18 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8016dfa:	7bbb      	ldrb	r3, [r7, #14]
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f002 fbf1 	bl	80195e6 <USBD_LL_IsStallEP>
 8016e04:	4603      	mov	r3, r0
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d003      	beq.n	8016e12 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8016e0a:	68bb      	ldr	r3, [r7, #8]
 8016e0c:	2201      	movs	r2, #1
 8016e0e:	601a      	str	r2, [r3, #0]
 8016e10:	e002      	b.n	8016e18 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8016e12:	68bb      	ldr	r3, [r7, #8]
 8016e14:	2200      	movs	r2, #0
 8016e16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8016e18:	68bb      	ldr	r3, [r7, #8]
 8016e1a:	2202      	movs	r2, #2
 8016e1c:	4619      	mov	r1, r3
 8016e1e:	6878      	ldr	r0, [r7, #4]
 8016e20:	f000 fbbe 	bl	80175a0 <USBD_CtlSendData>
              break;
 8016e24:	e004      	b.n	8016e30 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8016e26:	6839      	ldr	r1, [r7, #0]
 8016e28:	6878      	ldr	r0, [r7, #4]
 8016e2a:	f000 fb4e 	bl	80174ca <USBD_CtlError>
              break;
 8016e2e:	bf00      	nop
          }
          break;
 8016e30:	e004      	b.n	8016e3c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8016e32:	6839      	ldr	r1, [r7, #0]
 8016e34:	6878      	ldr	r0, [r7, #4]
 8016e36:	f000 fb48 	bl	80174ca <USBD_CtlError>
          break;
 8016e3a:	bf00      	nop
      }
      break;
 8016e3c:	e004      	b.n	8016e48 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8016e3e:	6839      	ldr	r1, [r7, #0]
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f000 fb42 	bl	80174ca <USBD_CtlError>
      break;
 8016e46:	bf00      	nop
  }

  return ret;
 8016e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3710      	adds	r7, #16
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
	...

08016e54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b084      	sub	sp, #16
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
 8016e5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016e62:	2300      	movs	r3, #0
 8016e64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016e66:	2300      	movs	r3, #0
 8016e68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	885b      	ldrh	r3, [r3, #2]
 8016e6e:	0a1b      	lsrs	r3, r3, #8
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	3b01      	subs	r3, #1
 8016e74:	2b0e      	cmp	r3, #14
 8016e76:	f200 8152 	bhi.w	801711e <USBD_GetDescriptor+0x2ca>
 8016e7a:	a201      	add	r2, pc, #4	; (adr r2, 8016e80 <USBD_GetDescriptor+0x2c>)
 8016e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e80:	08016ef1 	.word	0x08016ef1
 8016e84:	08016f09 	.word	0x08016f09
 8016e88:	08016f49 	.word	0x08016f49
 8016e8c:	0801711f 	.word	0x0801711f
 8016e90:	0801711f 	.word	0x0801711f
 8016e94:	080170bf 	.word	0x080170bf
 8016e98:	080170eb 	.word	0x080170eb
 8016e9c:	0801711f 	.word	0x0801711f
 8016ea0:	0801711f 	.word	0x0801711f
 8016ea4:	0801711f 	.word	0x0801711f
 8016ea8:	0801711f 	.word	0x0801711f
 8016eac:	0801711f 	.word	0x0801711f
 8016eb0:	0801711f 	.word	0x0801711f
 8016eb4:	0801711f 	.word	0x0801711f
 8016eb8:	08016ebd 	.word	0x08016ebd
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8016ec2:	69db      	ldr	r3, [r3, #28]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d00b      	beq.n	8016ee0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8016ece:	69db      	ldr	r3, [r3, #28]
 8016ed0:	687a      	ldr	r2, [r7, #4]
 8016ed2:	7c12      	ldrb	r2, [r2, #16]
 8016ed4:	f107 0108 	add.w	r1, r7, #8
 8016ed8:	4610      	mov	r0, r2
 8016eda:	4798      	blx	r3
 8016edc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016ede:	e126      	b.n	801712e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016ee0:	6839      	ldr	r1, [r7, #0]
 8016ee2:	6878      	ldr	r0, [r7, #4]
 8016ee4:	f000 faf1 	bl	80174ca <USBD_CtlError>
        err++;
 8016ee8:	7afb      	ldrb	r3, [r7, #11]
 8016eea:	3301      	adds	r3, #1
 8016eec:	72fb      	strb	r3, [r7, #11]
      break;
 8016eee:	e11e      	b.n	801712e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	687a      	ldr	r2, [r7, #4]
 8016efa:	7c12      	ldrb	r2, [r2, #16]
 8016efc:	f107 0108 	add.w	r1, r7, #8
 8016f00:	4610      	mov	r0, r2
 8016f02:	4798      	blx	r3
 8016f04:	60f8      	str	r0, [r7, #12]
      break;
 8016f06:	e112      	b.n	801712e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	7c1b      	ldrb	r3, [r3, #16]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d10d      	bne.n	8016f2c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f18:	f107 0208 	add.w	r2, r7, #8
 8016f1c:	4610      	mov	r0, r2
 8016f1e:	4798      	blx	r3
 8016f20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	3301      	adds	r3, #1
 8016f26:	2202      	movs	r2, #2
 8016f28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016f2a:	e100      	b.n	801712e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f34:	f107 0208 	add.w	r2, r7, #8
 8016f38:	4610      	mov	r0, r2
 8016f3a:	4798      	blx	r3
 8016f3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	3301      	adds	r3, #1
 8016f42:	2202      	movs	r2, #2
 8016f44:	701a      	strb	r2, [r3, #0]
      break;
 8016f46:	e0f2      	b.n	801712e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	885b      	ldrh	r3, [r3, #2]
 8016f4c:	b2db      	uxtb	r3, r3
 8016f4e:	2b05      	cmp	r3, #5
 8016f50:	f200 80ac 	bhi.w	80170ac <USBD_GetDescriptor+0x258>
 8016f54:	a201      	add	r2, pc, #4	; (adr r2, 8016f5c <USBD_GetDescriptor+0x108>)
 8016f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f5a:	bf00      	nop
 8016f5c:	08016f75 	.word	0x08016f75
 8016f60:	08016fa9 	.word	0x08016fa9
 8016f64:	08016fdd 	.word	0x08016fdd
 8016f68:	08017011 	.word	0x08017011
 8016f6c:	08017045 	.word	0x08017045
 8016f70:	08017079 	.word	0x08017079
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8016f7a:	685b      	ldr	r3, [r3, #4]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d00b      	beq.n	8016f98 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8016f86:	685b      	ldr	r3, [r3, #4]
 8016f88:	687a      	ldr	r2, [r7, #4]
 8016f8a:	7c12      	ldrb	r2, [r2, #16]
 8016f8c:	f107 0108 	add.w	r1, r7, #8
 8016f90:	4610      	mov	r0, r2
 8016f92:	4798      	blx	r3
 8016f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f96:	e091      	b.n	80170bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016f98:	6839      	ldr	r1, [r7, #0]
 8016f9a:	6878      	ldr	r0, [r7, #4]
 8016f9c:	f000 fa95 	bl	80174ca <USBD_CtlError>
            err++;
 8016fa0:	7afb      	ldrb	r3, [r7, #11]
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8016fa6:	e089      	b.n	80170bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8016fae:	689b      	ldr	r3, [r3, #8]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d00b      	beq.n	8016fcc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8016fba:	689b      	ldr	r3, [r3, #8]
 8016fbc:	687a      	ldr	r2, [r7, #4]
 8016fbe:	7c12      	ldrb	r2, [r2, #16]
 8016fc0:	f107 0108 	add.w	r1, r7, #8
 8016fc4:	4610      	mov	r0, r2
 8016fc6:	4798      	blx	r3
 8016fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016fca:	e077      	b.n	80170bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016fcc:	6839      	ldr	r1, [r7, #0]
 8016fce:	6878      	ldr	r0, [r7, #4]
 8016fd0:	f000 fa7b 	bl	80174ca <USBD_CtlError>
            err++;
 8016fd4:	7afb      	ldrb	r3, [r7, #11]
 8016fd6:	3301      	adds	r3, #1
 8016fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8016fda:	e06f      	b.n	80170bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8016fe2:	68db      	ldr	r3, [r3, #12]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d00b      	beq.n	8017000 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8016fee:	68db      	ldr	r3, [r3, #12]
 8016ff0:	687a      	ldr	r2, [r7, #4]
 8016ff2:	7c12      	ldrb	r2, [r2, #16]
 8016ff4:	f107 0108 	add.w	r1, r7, #8
 8016ff8:	4610      	mov	r0, r2
 8016ffa:	4798      	blx	r3
 8016ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016ffe:	e05d      	b.n	80170bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017000:	6839      	ldr	r1, [r7, #0]
 8017002:	6878      	ldr	r0, [r7, #4]
 8017004:	f000 fa61 	bl	80174ca <USBD_CtlError>
            err++;
 8017008:	7afb      	ldrb	r3, [r7, #11]
 801700a:	3301      	adds	r3, #1
 801700c:	72fb      	strb	r3, [r7, #11]
          break;
 801700e:	e055      	b.n	80170bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017016:	691b      	ldr	r3, [r3, #16]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d00b      	beq.n	8017034 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017022:	691b      	ldr	r3, [r3, #16]
 8017024:	687a      	ldr	r2, [r7, #4]
 8017026:	7c12      	ldrb	r2, [r2, #16]
 8017028:	f107 0108 	add.w	r1, r7, #8
 801702c:	4610      	mov	r0, r2
 801702e:	4798      	blx	r3
 8017030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017032:	e043      	b.n	80170bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017034:	6839      	ldr	r1, [r7, #0]
 8017036:	6878      	ldr	r0, [r7, #4]
 8017038:	f000 fa47 	bl	80174ca <USBD_CtlError>
            err++;
 801703c:	7afb      	ldrb	r3, [r7, #11]
 801703e:	3301      	adds	r3, #1
 8017040:	72fb      	strb	r3, [r7, #11]
          break;
 8017042:	e03b      	b.n	80170bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801704a:	695b      	ldr	r3, [r3, #20]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d00b      	beq.n	8017068 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017056:	695b      	ldr	r3, [r3, #20]
 8017058:	687a      	ldr	r2, [r7, #4]
 801705a:	7c12      	ldrb	r2, [r2, #16]
 801705c:	f107 0108 	add.w	r1, r7, #8
 8017060:	4610      	mov	r0, r2
 8017062:	4798      	blx	r3
 8017064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017066:	e029      	b.n	80170bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017068:	6839      	ldr	r1, [r7, #0]
 801706a:	6878      	ldr	r0, [r7, #4]
 801706c:	f000 fa2d 	bl	80174ca <USBD_CtlError>
            err++;
 8017070:	7afb      	ldrb	r3, [r7, #11]
 8017072:	3301      	adds	r3, #1
 8017074:	72fb      	strb	r3, [r7, #11]
          break;
 8017076:	e021      	b.n	80170bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801707e:	699b      	ldr	r3, [r3, #24]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d00b      	beq.n	801709c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801708a:	699b      	ldr	r3, [r3, #24]
 801708c:	687a      	ldr	r2, [r7, #4]
 801708e:	7c12      	ldrb	r2, [r2, #16]
 8017090:	f107 0108 	add.w	r1, r7, #8
 8017094:	4610      	mov	r0, r2
 8017096:	4798      	blx	r3
 8017098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801709a:	e00f      	b.n	80170bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801709c:	6839      	ldr	r1, [r7, #0]
 801709e:	6878      	ldr	r0, [r7, #4]
 80170a0:	f000 fa13 	bl	80174ca <USBD_CtlError>
            err++;
 80170a4:	7afb      	ldrb	r3, [r7, #11]
 80170a6:	3301      	adds	r3, #1
 80170a8:	72fb      	strb	r3, [r7, #11]
          break;
 80170aa:	e007      	b.n	80170bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80170ac:	6839      	ldr	r1, [r7, #0]
 80170ae:	6878      	ldr	r0, [r7, #4]
 80170b0:	f000 fa0b 	bl	80174ca <USBD_CtlError>
          err++;
 80170b4:	7afb      	ldrb	r3, [r7, #11]
 80170b6:	3301      	adds	r3, #1
 80170b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80170ba:	e038      	b.n	801712e <USBD_GetDescriptor+0x2da>
 80170bc:	e037      	b.n	801712e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	7c1b      	ldrb	r3, [r3, #16]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d109      	bne.n	80170da <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80170cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170ce:	f107 0208 	add.w	r2, r7, #8
 80170d2:	4610      	mov	r0, r2
 80170d4:	4798      	blx	r3
 80170d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80170d8:	e029      	b.n	801712e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80170da:	6839      	ldr	r1, [r7, #0]
 80170dc:	6878      	ldr	r0, [r7, #4]
 80170de:	f000 f9f4 	bl	80174ca <USBD_CtlError>
        err++;
 80170e2:	7afb      	ldrb	r3, [r7, #11]
 80170e4:	3301      	adds	r3, #1
 80170e6:	72fb      	strb	r3, [r7, #11]
      break;
 80170e8:	e021      	b.n	801712e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	7c1b      	ldrb	r3, [r3, #16]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d10d      	bne.n	801710e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80170f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170fa:	f107 0208 	add.w	r2, r7, #8
 80170fe:	4610      	mov	r0, r2
 8017100:	4798      	blx	r3
 8017102:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	3301      	adds	r3, #1
 8017108:	2207      	movs	r2, #7
 801710a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801710c:	e00f      	b.n	801712e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801710e:	6839      	ldr	r1, [r7, #0]
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f000 f9da 	bl	80174ca <USBD_CtlError>
        err++;
 8017116:	7afb      	ldrb	r3, [r7, #11]
 8017118:	3301      	adds	r3, #1
 801711a:	72fb      	strb	r3, [r7, #11]
      break;
 801711c:	e007      	b.n	801712e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801711e:	6839      	ldr	r1, [r7, #0]
 8017120:	6878      	ldr	r0, [r7, #4]
 8017122:	f000 f9d2 	bl	80174ca <USBD_CtlError>
      err++;
 8017126:	7afb      	ldrb	r3, [r7, #11]
 8017128:	3301      	adds	r3, #1
 801712a:	72fb      	strb	r3, [r7, #11]
      break;
 801712c:	bf00      	nop
  }

  if (err != 0U)
 801712e:	7afb      	ldrb	r3, [r7, #11]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d11c      	bne.n	801716e <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8017134:	893b      	ldrh	r3, [r7, #8]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d011      	beq.n	801715e <USBD_GetDescriptor+0x30a>
 801713a:	683b      	ldr	r3, [r7, #0]
 801713c:	88db      	ldrh	r3, [r3, #6]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d00d      	beq.n	801715e <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	88da      	ldrh	r2, [r3, #6]
 8017146:	893b      	ldrh	r3, [r7, #8]
 8017148:	4293      	cmp	r3, r2
 801714a:	bf28      	it	cs
 801714c:	4613      	movcs	r3, r2
 801714e:	b29b      	uxth	r3, r3
 8017150:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017152:	893b      	ldrh	r3, [r7, #8]
 8017154:	461a      	mov	r2, r3
 8017156:	68f9      	ldr	r1, [r7, #12]
 8017158:	6878      	ldr	r0, [r7, #4]
 801715a:	f000 fa21 	bl	80175a0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	88db      	ldrh	r3, [r3, #6]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d104      	bne.n	8017170 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	f000 fa78 	bl	801765c <USBD_CtlSendStatus>
 801716c:	e000      	b.n	8017170 <USBD_GetDescriptor+0x31c>
    return;
 801716e:	bf00      	nop
    }
  }
}
 8017170:	3710      	adds	r7, #16
 8017172:	46bd      	mov	sp, r7
 8017174:	bd80      	pop	{r7, pc}
 8017176:	bf00      	nop

08017178 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8017178:	b580      	push	{r7, lr}
 801717a:	b084      	sub	sp, #16
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
 8017180:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	889b      	ldrh	r3, [r3, #4]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d130      	bne.n	80171ec <USBD_SetAddress+0x74>
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	88db      	ldrh	r3, [r3, #6]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d12c      	bne.n	80171ec <USBD_SetAddress+0x74>
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	885b      	ldrh	r3, [r3, #2]
 8017196:	2b7f      	cmp	r3, #127	; 0x7f
 8017198:	d828      	bhi.n	80171ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	885b      	ldrh	r3, [r3, #2]
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80171a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80171ac:	2b03      	cmp	r3, #3
 80171ae:	d104      	bne.n	80171ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80171b0:	6839      	ldr	r1, [r7, #0]
 80171b2:	6878      	ldr	r0, [r7, #4]
 80171b4:	f000 f989 	bl	80174ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171b8:	e01c      	b.n	80171f4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	7bfa      	ldrb	r2, [r7, #15]
 80171be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80171c2:	7bfb      	ldrb	r3, [r7, #15]
 80171c4:	4619      	mov	r1, r3
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	f002 fa33 	bl	8019632 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80171cc:	6878      	ldr	r0, [r7, #4]
 80171ce:	f000 fa45 	bl	801765c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80171d2:	7bfb      	ldrb	r3, [r7, #15]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d004      	beq.n	80171e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	2202      	movs	r2, #2
 80171dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171e0:	e008      	b.n	80171f4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	2201      	movs	r2, #1
 80171e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171ea:	e003      	b.n	80171f4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80171ec:	6839      	ldr	r1, [r7, #0]
 80171ee:	6878      	ldr	r0, [r7, #4]
 80171f0:	f000 f96b 	bl	80174ca <USBD_CtlError>
  }
}
 80171f4:	bf00      	nop
 80171f6:	3710      	adds	r7, #16
 80171f8:	46bd      	mov	sp, r7
 80171fa:	bd80      	pop	{r7, pc}

080171fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b082      	sub	sp, #8
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
 8017204:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017206:	683b      	ldr	r3, [r7, #0]
 8017208:	885b      	ldrh	r3, [r3, #2]
 801720a:	b2da      	uxtb	r2, r3
 801720c:	4b41      	ldr	r3, [pc, #260]	; (8017314 <USBD_SetConfig+0x118>)
 801720e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017210:	4b40      	ldr	r3, [pc, #256]	; (8017314 <USBD_SetConfig+0x118>)
 8017212:	781b      	ldrb	r3, [r3, #0]
 8017214:	2b01      	cmp	r3, #1
 8017216:	d904      	bls.n	8017222 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8017218:	6839      	ldr	r1, [r7, #0]
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f000 f955 	bl	80174ca <USBD_CtlError>
 8017220:	e075      	b.n	801730e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017228:	2b02      	cmp	r3, #2
 801722a:	d002      	beq.n	8017232 <USBD_SetConfig+0x36>
 801722c:	2b03      	cmp	r3, #3
 801722e:	d023      	beq.n	8017278 <USBD_SetConfig+0x7c>
 8017230:	e062      	b.n	80172f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8017232:	4b38      	ldr	r3, [pc, #224]	; (8017314 <USBD_SetConfig+0x118>)
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d01a      	beq.n	8017270 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801723a:	4b36      	ldr	r3, [pc, #216]	; (8017314 <USBD_SetConfig+0x118>)
 801723c:	781b      	ldrb	r3, [r3, #0]
 801723e:	461a      	mov	r2, r3
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2203      	movs	r2, #3
 8017248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801724c:	4b31      	ldr	r3, [pc, #196]	; (8017314 <USBD_SetConfig+0x118>)
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	4619      	mov	r1, r3
 8017252:	6878      	ldr	r0, [r7, #4]
 8017254:	f7ff f9c7 	bl	80165e6 <USBD_SetClassConfig>
 8017258:	4603      	mov	r3, r0
 801725a:	2b02      	cmp	r3, #2
 801725c:	d104      	bne.n	8017268 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801725e:	6839      	ldr	r1, [r7, #0]
 8017260:	6878      	ldr	r0, [r7, #4]
 8017262:	f000 f932 	bl	80174ca <USBD_CtlError>
            return;
 8017266:	e052      	b.n	801730e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8017268:	6878      	ldr	r0, [r7, #4]
 801726a:	f000 f9f7 	bl	801765c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801726e:	e04e      	b.n	801730e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8017270:	6878      	ldr	r0, [r7, #4]
 8017272:	f000 f9f3 	bl	801765c <USBD_CtlSendStatus>
        break;
 8017276:	e04a      	b.n	801730e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8017278:	4b26      	ldr	r3, [pc, #152]	; (8017314 <USBD_SetConfig+0x118>)
 801727a:	781b      	ldrb	r3, [r3, #0]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d112      	bne.n	80172a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2202      	movs	r2, #2
 8017284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8017288:	4b22      	ldr	r3, [pc, #136]	; (8017314 <USBD_SetConfig+0x118>)
 801728a:	781b      	ldrb	r3, [r3, #0]
 801728c:	461a      	mov	r2, r3
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8017292:	4b20      	ldr	r3, [pc, #128]	; (8017314 <USBD_SetConfig+0x118>)
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	4619      	mov	r1, r3
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f7ff f9c3 	bl	8016624 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f000 f9dc 	bl	801765c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80172a4:	e033      	b.n	801730e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80172a6:	4b1b      	ldr	r3, [pc, #108]	; (8017314 <USBD_SetConfig+0x118>)
 80172a8:	781b      	ldrb	r3, [r3, #0]
 80172aa:	461a      	mov	r2, r3
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	685b      	ldr	r3, [r3, #4]
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d01d      	beq.n	80172f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	685b      	ldr	r3, [r3, #4]
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	4619      	mov	r1, r3
 80172bc:	6878      	ldr	r0, [r7, #4]
 80172be:	f7ff f9b1 	bl	8016624 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80172c2:	4b14      	ldr	r3, [pc, #80]	; (8017314 <USBD_SetConfig+0x118>)
 80172c4:	781b      	ldrb	r3, [r3, #0]
 80172c6:	461a      	mov	r2, r3
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80172cc:	4b11      	ldr	r3, [pc, #68]	; (8017314 <USBD_SetConfig+0x118>)
 80172ce:	781b      	ldrb	r3, [r3, #0]
 80172d0:	4619      	mov	r1, r3
 80172d2:	6878      	ldr	r0, [r7, #4]
 80172d4:	f7ff f987 	bl	80165e6 <USBD_SetClassConfig>
 80172d8:	4603      	mov	r3, r0
 80172da:	2b02      	cmp	r3, #2
 80172dc:	d104      	bne.n	80172e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80172de:	6839      	ldr	r1, [r7, #0]
 80172e0:	6878      	ldr	r0, [r7, #4]
 80172e2:	f000 f8f2 	bl	80174ca <USBD_CtlError>
            return;
 80172e6:	e012      	b.n	801730e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80172e8:	6878      	ldr	r0, [r7, #4]
 80172ea:	f000 f9b7 	bl	801765c <USBD_CtlSendStatus>
        break;
 80172ee:	e00e      	b.n	801730e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80172f0:	6878      	ldr	r0, [r7, #4]
 80172f2:	f000 f9b3 	bl	801765c <USBD_CtlSendStatus>
        break;
 80172f6:	e00a      	b.n	801730e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80172f8:	6839      	ldr	r1, [r7, #0]
 80172fa:	6878      	ldr	r0, [r7, #4]
 80172fc:	f000 f8e5 	bl	80174ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8017300:	4b04      	ldr	r3, [pc, #16]	; (8017314 <USBD_SetConfig+0x118>)
 8017302:	781b      	ldrb	r3, [r3, #0]
 8017304:	4619      	mov	r1, r3
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	f7ff f98c 	bl	8016624 <USBD_ClrClassConfig>
        break;
 801730c:	bf00      	nop
    }
  }
}
 801730e:	3708      	adds	r7, #8
 8017310:	46bd      	mov	sp, r7
 8017312:	bd80      	pop	{r7, pc}
 8017314:	20027638 	.word	0x20027638

08017318 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
 8017320:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	88db      	ldrh	r3, [r3, #6]
 8017326:	2b01      	cmp	r3, #1
 8017328:	d004      	beq.n	8017334 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801732a:	6839      	ldr	r1, [r7, #0]
 801732c:	6878      	ldr	r0, [r7, #4]
 801732e:	f000 f8cc 	bl	80174ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017332:	e021      	b.n	8017378 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801733a:	2b01      	cmp	r3, #1
 801733c:	db17      	blt.n	801736e <USBD_GetConfig+0x56>
 801733e:	2b02      	cmp	r3, #2
 8017340:	dd02      	ble.n	8017348 <USBD_GetConfig+0x30>
 8017342:	2b03      	cmp	r3, #3
 8017344:	d00b      	beq.n	801735e <USBD_GetConfig+0x46>
 8017346:	e012      	b.n	801736e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2200      	movs	r2, #0
 801734c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	3308      	adds	r3, #8
 8017352:	2201      	movs	r2, #1
 8017354:	4619      	mov	r1, r3
 8017356:	6878      	ldr	r0, [r7, #4]
 8017358:	f000 f922 	bl	80175a0 <USBD_CtlSendData>
        break;
 801735c:	e00c      	b.n	8017378 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	3304      	adds	r3, #4
 8017362:	2201      	movs	r2, #1
 8017364:	4619      	mov	r1, r3
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f000 f91a 	bl	80175a0 <USBD_CtlSendData>
        break;
 801736c:	e004      	b.n	8017378 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 801736e:	6839      	ldr	r1, [r7, #0]
 8017370:	6878      	ldr	r0, [r7, #4]
 8017372:	f000 f8aa 	bl	80174ca <USBD_CtlError>
        break;
 8017376:	bf00      	nop
}
 8017378:	bf00      	nop
 801737a:	3708      	adds	r7, #8
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}

08017380 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b082      	sub	sp, #8
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017390:	3b01      	subs	r3, #1
 8017392:	2b02      	cmp	r3, #2
 8017394:	d81e      	bhi.n	80173d4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017396:	683b      	ldr	r3, [r7, #0]
 8017398:	88db      	ldrh	r3, [r3, #6]
 801739a:	2b02      	cmp	r3, #2
 801739c:	d004      	beq.n	80173a8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801739e:	6839      	ldr	r1, [r7, #0]
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f000 f892 	bl	80174ca <USBD_CtlError>
        break;
 80173a6:	e01a      	b.n	80173de <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	2201      	movs	r2, #1
 80173ac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d005      	beq.n	80173c4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	68db      	ldr	r3, [r3, #12]
 80173bc:	f043 0202 	orr.w	r2, r3, #2
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	330c      	adds	r3, #12
 80173c8:	2202      	movs	r2, #2
 80173ca:	4619      	mov	r1, r3
 80173cc:	6878      	ldr	r0, [r7, #4]
 80173ce:	f000 f8e7 	bl	80175a0 <USBD_CtlSendData>
      break;
 80173d2:	e004      	b.n	80173de <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80173d4:	6839      	ldr	r1, [r7, #0]
 80173d6:	6878      	ldr	r0, [r7, #4]
 80173d8:	f000 f877 	bl	80174ca <USBD_CtlError>
      break;
 80173dc:	bf00      	nop
  }
}
 80173de:	bf00      	nop
 80173e0:	3708      	adds	r7, #8
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd80      	pop	{r7, pc}

080173e6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80173e6:	b580      	push	{r7, lr}
 80173e8:	b082      	sub	sp, #8
 80173ea:	af00      	add	r7, sp, #0
 80173ec:	6078      	str	r0, [r7, #4]
 80173ee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80173f0:	683b      	ldr	r3, [r7, #0]
 80173f2:	885b      	ldrh	r3, [r3, #2]
 80173f4:	2b01      	cmp	r3, #1
 80173f6:	d106      	bne.n	8017406 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	2201      	movs	r2, #1
 80173fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f000 f92b 	bl	801765c <USBD_CtlSendStatus>
  }
}
 8017406:	bf00      	nop
 8017408:	3708      	adds	r7, #8
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}

0801740e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801740e:	b580      	push	{r7, lr}
 8017410:	b082      	sub	sp, #8
 8017412:	af00      	add	r7, sp, #0
 8017414:	6078      	str	r0, [r7, #4]
 8017416:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801741e:	3b01      	subs	r3, #1
 8017420:	2b02      	cmp	r3, #2
 8017422:	d80b      	bhi.n	801743c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	885b      	ldrh	r3, [r3, #2]
 8017428:	2b01      	cmp	r3, #1
 801742a:	d10c      	bne.n	8017446 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	2200      	movs	r2, #0
 8017430:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	f000 f911 	bl	801765c <USBD_CtlSendStatus>
      }
      break;
 801743a:	e004      	b.n	8017446 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801743c:	6839      	ldr	r1, [r7, #0]
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f000 f843 	bl	80174ca <USBD_CtlError>
      break;
 8017444:	e000      	b.n	8017448 <USBD_ClrFeature+0x3a>
      break;
 8017446:	bf00      	nop
  }
}
 8017448:	bf00      	nop
 801744a:	3708      	adds	r7, #8
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}

08017450 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017450:	b480      	push	{r7}
 8017452:	b083      	sub	sp, #12
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
 8017458:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	781a      	ldrb	r2, [r3, #0]
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8017462:	683b      	ldr	r3, [r7, #0]
 8017464:	785a      	ldrb	r2, [r3, #1]
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	3302      	adds	r3, #2
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	b29a      	uxth	r2, r3
 8017472:	683b      	ldr	r3, [r7, #0]
 8017474:	3303      	adds	r3, #3
 8017476:	781b      	ldrb	r3, [r3, #0]
 8017478:	b29b      	uxth	r3, r3
 801747a:	021b      	lsls	r3, r3, #8
 801747c:	b29b      	uxth	r3, r3
 801747e:	4413      	add	r3, r2
 8017480:	b29a      	uxth	r2, r3
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	3304      	adds	r3, #4
 801748a:	781b      	ldrb	r3, [r3, #0]
 801748c:	b29a      	uxth	r2, r3
 801748e:	683b      	ldr	r3, [r7, #0]
 8017490:	3305      	adds	r3, #5
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	b29b      	uxth	r3, r3
 8017496:	021b      	lsls	r3, r3, #8
 8017498:	b29b      	uxth	r3, r3
 801749a:	4413      	add	r3, r2
 801749c:	b29a      	uxth	r2, r3
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80174a2:	683b      	ldr	r3, [r7, #0]
 80174a4:	3306      	adds	r3, #6
 80174a6:	781b      	ldrb	r3, [r3, #0]
 80174a8:	b29a      	uxth	r2, r3
 80174aa:	683b      	ldr	r3, [r7, #0]
 80174ac:	3307      	adds	r3, #7
 80174ae:	781b      	ldrb	r3, [r3, #0]
 80174b0:	b29b      	uxth	r3, r3
 80174b2:	021b      	lsls	r3, r3, #8
 80174b4:	b29b      	uxth	r3, r3
 80174b6:	4413      	add	r3, r2
 80174b8:	b29a      	uxth	r2, r3
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	80da      	strh	r2, [r3, #6]

}
 80174be:	bf00      	nop
 80174c0:	370c      	adds	r7, #12
 80174c2:	46bd      	mov	sp, r7
 80174c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c8:	4770      	bx	lr

080174ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80174ca:	b580      	push	{r7, lr}
 80174cc:	b082      	sub	sp, #8
 80174ce:	af00      	add	r7, sp, #0
 80174d0:	6078      	str	r0, [r7, #4]
 80174d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80174d4:	2180      	movs	r1, #128	; 0x80
 80174d6:	6878      	ldr	r0, [r7, #4]
 80174d8:	f002 f847 	bl	801956a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80174dc:	2100      	movs	r1, #0
 80174de:	6878      	ldr	r0, [r7, #4]
 80174e0:	f002 f843 	bl	801956a <USBD_LL_StallEP>
}
 80174e4:	bf00      	nop
 80174e6:	3708      	adds	r7, #8
 80174e8:	46bd      	mov	sp, r7
 80174ea:	bd80      	pop	{r7, pc}

080174ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b086      	sub	sp, #24
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	60f8      	str	r0, [r7, #12]
 80174f4:	60b9      	str	r1, [r7, #8]
 80174f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80174f8:	2300      	movs	r3, #0
 80174fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d032      	beq.n	8017568 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8017502:	68f8      	ldr	r0, [r7, #12]
 8017504:	f000 f834 	bl	8017570 <USBD_GetLen>
 8017508:	4603      	mov	r3, r0
 801750a:	3301      	adds	r3, #1
 801750c:	b29b      	uxth	r3, r3
 801750e:	005b      	lsls	r3, r3, #1
 8017510:	b29a      	uxth	r2, r3
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8017516:	7dfb      	ldrb	r3, [r7, #23]
 8017518:	1c5a      	adds	r2, r3, #1
 801751a:	75fa      	strb	r2, [r7, #23]
 801751c:	461a      	mov	r2, r3
 801751e:	68bb      	ldr	r3, [r7, #8]
 8017520:	4413      	add	r3, r2
 8017522:	687a      	ldr	r2, [r7, #4]
 8017524:	7812      	ldrb	r2, [r2, #0]
 8017526:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8017528:	7dfb      	ldrb	r3, [r7, #23]
 801752a:	1c5a      	adds	r2, r3, #1
 801752c:	75fa      	strb	r2, [r7, #23]
 801752e:	461a      	mov	r2, r3
 8017530:	68bb      	ldr	r3, [r7, #8]
 8017532:	4413      	add	r3, r2
 8017534:	2203      	movs	r2, #3
 8017536:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8017538:	e012      	b.n	8017560 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	1c5a      	adds	r2, r3, #1
 801753e:	60fa      	str	r2, [r7, #12]
 8017540:	7dfa      	ldrb	r2, [r7, #23]
 8017542:	1c51      	adds	r1, r2, #1
 8017544:	75f9      	strb	r1, [r7, #23]
 8017546:	4611      	mov	r1, r2
 8017548:	68ba      	ldr	r2, [r7, #8]
 801754a:	440a      	add	r2, r1
 801754c:	781b      	ldrb	r3, [r3, #0]
 801754e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8017550:	7dfb      	ldrb	r3, [r7, #23]
 8017552:	1c5a      	adds	r2, r3, #1
 8017554:	75fa      	strb	r2, [r7, #23]
 8017556:	461a      	mov	r2, r3
 8017558:	68bb      	ldr	r3, [r7, #8]
 801755a:	4413      	add	r3, r2
 801755c:	2200      	movs	r2, #0
 801755e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	781b      	ldrb	r3, [r3, #0]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d1e8      	bne.n	801753a <USBD_GetString+0x4e>
    }
  }
}
 8017568:	bf00      	nop
 801756a:	3718      	adds	r7, #24
 801756c:	46bd      	mov	sp, r7
 801756e:	bd80      	pop	{r7, pc}

08017570 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017570:	b480      	push	{r7}
 8017572:	b085      	sub	sp, #20
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017578:	2300      	movs	r3, #0
 801757a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801757c:	e005      	b.n	801758a <USBD_GetLen+0x1a>
  {
    len++;
 801757e:	7bfb      	ldrb	r3, [r7, #15]
 8017580:	3301      	adds	r3, #1
 8017582:	73fb      	strb	r3, [r7, #15]
    buf++;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	3301      	adds	r3, #1
 8017588:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	781b      	ldrb	r3, [r3, #0]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d1f5      	bne.n	801757e <USBD_GetLen+0xe>
  }

  return len;
 8017592:	7bfb      	ldrb	r3, [r7, #15]
}
 8017594:	4618      	mov	r0, r3
 8017596:	3714      	adds	r7, #20
 8017598:	46bd      	mov	sp, r7
 801759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759e:	4770      	bx	lr

080175a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b084      	sub	sp, #16
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	60f8      	str	r0, [r7, #12]
 80175a8:	60b9      	str	r1, [r7, #8]
 80175aa:	4613      	mov	r3, r2
 80175ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	2202      	movs	r2, #2
 80175b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80175b6:	88fa      	ldrh	r2, [r7, #6]
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80175bc:	88fa      	ldrh	r2, [r7, #6]
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80175c2:	88fb      	ldrh	r3, [r7, #6]
 80175c4:	68ba      	ldr	r2, [r7, #8]
 80175c6:	2100      	movs	r1, #0
 80175c8:	68f8      	ldr	r0, [r7, #12]
 80175ca:	f002 f851 	bl	8019670 <USBD_LL_Transmit>

  return USBD_OK;
 80175ce:	2300      	movs	r3, #0
}
 80175d0:	4618      	mov	r0, r3
 80175d2:	3710      	adds	r7, #16
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}

080175d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b084      	sub	sp, #16
 80175dc:	af00      	add	r7, sp, #0
 80175de:	60f8      	str	r0, [r7, #12]
 80175e0:	60b9      	str	r1, [r7, #8]
 80175e2:	4613      	mov	r3, r2
 80175e4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80175e6:	88fb      	ldrh	r3, [r7, #6]
 80175e8:	68ba      	ldr	r2, [r7, #8]
 80175ea:	2100      	movs	r1, #0
 80175ec:	68f8      	ldr	r0, [r7, #12]
 80175ee:	f002 f83f 	bl	8019670 <USBD_LL_Transmit>

  return USBD_OK;
 80175f2:	2300      	movs	r3, #0
}
 80175f4:	4618      	mov	r0, r3
 80175f6:	3710      	adds	r7, #16
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd80      	pop	{r7, pc}

080175fc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b084      	sub	sp, #16
 8017600:	af00      	add	r7, sp, #0
 8017602:	60f8      	str	r0, [r7, #12]
 8017604:	60b9      	str	r1, [r7, #8]
 8017606:	4613      	mov	r3, r2
 8017608:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	2203      	movs	r2, #3
 801760e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017612:	88fa      	ldrh	r2, [r7, #6]
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801761a:	88fa      	ldrh	r2, [r7, #6]
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017622:	88fb      	ldrh	r3, [r7, #6]
 8017624:	68ba      	ldr	r2, [r7, #8]
 8017626:	2100      	movs	r1, #0
 8017628:	68f8      	ldr	r0, [r7, #12]
 801762a:	f002 f844 	bl	80196b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801762e:	2300      	movs	r3, #0
}
 8017630:	4618      	mov	r0, r3
 8017632:	3710      	adds	r7, #16
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}

08017638 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b084      	sub	sp, #16
 801763c:	af00      	add	r7, sp, #0
 801763e:	60f8      	str	r0, [r7, #12]
 8017640:	60b9      	str	r1, [r7, #8]
 8017642:	4613      	mov	r3, r2
 8017644:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017646:	88fb      	ldrh	r3, [r7, #6]
 8017648:	68ba      	ldr	r2, [r7, #8]
 801764a:	2100      	movs	r1, #0
 801764c:	68f8      	ldr	r0, [r7, #12]
 801764e:	f002 f832 	bl	80196b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017652:	2300      	movs	r3, #0
}
 8017654:	4618      	mov	r0, r3
 8017656:	3710      	adds	r7, #16
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}

0801765c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b082      	sub	sp, #8
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2204      	movs	r2, #4
 8017668:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801766c:	2300      	movs	r3, #0
 801766e:	2200      	movs	r2, #0
 8017670:	2100      	movs	r1, #0
 8017672:	6878      	ldr	r0, [r7, #4]
 8017674:	f001 fffc 	bl	8019670 <USBD_LL_Transmit>

  return USBD_OK;
 8017678:	2300      	movs	r3, #0
}
 801767a:	4618      	mov	r0, r3
 801767c:	3708      	adds	r7, #8
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}

08017682 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017682:	b580      	push	{r7, lr}
 8017684:	b082      	sub	sp, #8
 8017686:	af00      	add	r7, sp, #0
 8017688:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	2205      	movs	r2, #5
 801768e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017692:	2300      	movs	r3, #0
 8017694:	2200      	movs	r2, #0
 8017696:	2100      	movs	r1, #0
 8017698:	6878      	ldr	r0, [r7, #4]
 801769a:	f002 f80c 	bl	80196b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801769e:	2300      	movs	r3, #0
}
 80176a0:	4618      	mov	r0, r3
 80176a2:	3708      	adds	r7, #8
 80176a4:	46bd      	mov	sp, r7
 80176a6:	bd80      	pop	{r7, pc}

080176a8 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b082      	sub	sp, #8
 80176ac:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 80176ae:	f000 fa25 	bl	8017afc <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 80176b2:	480e      	ldr	r0, [pc, #56]	; (80176ec <APP_THREAD_Init+0x44>)
 80176b4:	f000 ff3c 	bl	8018530 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 80176b8:	2101      	movs	r1, #1
 80176ba:	2002      	movs	r0, #2
 80176bc:	f002 f8c4 	bl	8019848 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 80176c0:	f001 f82e 	bl	8018720 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 80176c4:	f001 f81a 	bl	80186fc <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 80176c8:	f7fd ff21 	bl	801550e <SHCI_C2_THREAD_Init>
 80176cc:	4603      	mov	r3, r0
 80176ce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 80176d0:	4a07      	ldr	r2, [pc, #28]	; (80176f0 <APP_THREAD_Init+0x48>)
 80176d2:	2100      	movs	r1, #0
 80176d4:	4807      	ldr	r0, [pc, #28]	; (80176f4 <APP_THREAD_Init+0x4c>)
 80176d6:	f7f8 fb4f 	bl	800fd78 <osThreadNew>
 80176da:	4602      	mov	r2, r0
 80176dc:	4b06      	ldr	r3, [pc, #24]	; (80176f8 <APP_THREAD_Init+0x50>)
 80176de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 80176e0:	f000 f892 	bl	8017808 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 80176e4:	bf00      	nop
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}
 80176ec:	20030838 	.word	0x20030838
 80176f0:	0801bac0 	.word	0x0801bac0
 80176f4:	08017bb9 	.word	0x08017bb9
 80176f8:	20027750 	.word	0x20027750

080176fc <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b082      	sub	sp, #8
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]
 8017704:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2b1a      	cmp	r3, #26
 801770a:	d861      	bhi.n	80177d0 <APP_THREAD_Error+0xd4>
 801770c:	a201      	add	r2, pc, #4	; (adr r2, 8017714 <APP_THREAD_Error+0x18>)
 801770e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017712:	bf00      	nop
 8017714:	08017781 	.word	0x08017781
 8017718:	0801778b 	.word	0x0801778b
 801771c:	08017795 	.word	0x08017795
 8017720:	0801779f 	.word	0x0801779f
 8017724:	080177a9 	.word	0x080177a9
 8017728:	080177b3 	.word	0x080177b3
 801772c:	080177bd 	.word	0x080177bd
 8017730:	080177d1 	.word	0x080177d1
 8017734:	080177d1 	.word	0x080177d1
 8017738:	080177d1 	.word	0x080177d1
 801773c:	080177d1 	.word	0x080177d1
 8017740:	080177d1 	.word	0x080177d1
 8017744:	080177d1 	.word	0x080177d1
 8017748:	080177d1 	.word	0x080177d1
 801774c:	080177d1 	.word	0x080177d1
 8017750:	080177d1 	.word	0x080177d1
 8017754:	080177d1 	.word	0x080177d1
 8017758:	080177d1 	.word	0x080177d1
 801775c:	080177d1 	.word	0x080177d1
 8017760:	080177d1 	.word	0x080177d1
 8017764:	080177d1 	.word	0x080177d1
 8017768:	080177d1 	.word	0x080177d1
 801776c:	080177d1 	.word	0x080177d1
 8017770:	080177d1 	.word	0x080177d1
 8017774:	080177d1 	.word	0x080177d1
 8017778:	080177d1 	.word	0x080177d1
 801777c:	080177c7 	.word	0x080177c7
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8017780:	6839      	ldr	r1, [r7, #0]
 8017782:	4818      	ldr	r0, [pc, #96]	; (80177e4 <APP_THREAD_Error+0xe8>)
 8017784:	f000 f9ae 	bl	8017ae4 <APP_THREAD_TraceError>
    break;
 8017788:	e027      	b.n	80177da <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 801778a:	6839      	ldr	r1, [r7, #0]
 801778c:	4816      	ldr	r0, [pc, #88]	; (80177e8 <APP_THREAD_Error+0xec>)
 801778e:	f000 f9a9 	bl	8017ae4 <APP_THREAD_TraceError>
    break;
 8017792:	e022      	b.n	80177da <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8017794:	6839      	ldr	r1, [r7, #0]
 8017796:	4815      	ldr	r0, [pc, #84]	; (80177ec <APP_THREAD_Error+0xf0>)
 8017798:	f000 f9a4 	bl	8017ae4 <APP_THREAD_TraceError>
    break;
 801779c:	e01d      	b.n	80177da <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 801779e:	6839      	ldr	r1, [r7, #0]
 80177a0:	4813      	ldr	r0, [pc, #76]	; (80177f0 <APP_THREAD_Error+0xf4>)
 80177a2:	f000 f99f 	bl	8017ae4 <APP_THREAD_TraceError>
    break;
 80177a6:	e018      	b.n	80177da <APP_THREAD_Error+0xde>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 80177a8:	6839      	ldr	r1, [r7, #0]
 80177aa:	4812      	ldr	r0, [pc, #72]	; (80177f4 <APP_THREAD_Error+0xf8>)
 80177ac:	f000 f99a 	bl	8017ae4 <APP_THREAD_TraceError>
    break;
 80177b0:	e013      	b.n	80177da <APP_THREAD_Error+0xde>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 80177b2:	6839      	ldr	r1, [r7, #0]
 80177b4:	4810      	ldr	r0, [pc, #64]	; (80177f8 <APP_THREAD_Error+0xfc>)
 80177b6:	f000 f995 	bl	8017ae4 <APP_THREAD_TraceError>
    break;
 80177ba:	e00e      	b.n	80177da <APP_THREAD_Error+0xde>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 80177bc:	6839      	ldr	r1, [r7, #0]
 80177be:	480f      	ldr	r0, [pc, #60]	; (80177fc <APP_THREAD_Error+0x100>)
 80177c0:	f000 f990 	bl	8017ae4 <APP_THREAD_TraceError>
    break;
 80177c4:	e009      	b.n	80177da <APP_THREAD_Error+0xde>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 80177c6:	6839      	ldr	r1, [r7, #0]
 80177c8:	480d      	ldr	r0, [pc, #52]	; (8017800 <APP_THREAD_Error+0x104>)
 80177ca:	f000 f98b 	bl	8017ae4 <APP_THREAD_TraceError>
    break;
 80177ce:	e004      	b.n	80177da <APP_THREAD_Error+0xde>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 80177d0:	2100      	movs	r1, #0
 80177d2:	480c      	ldr	r0, [pc, #48]	; (8017804 <APP_THREAD_Error+0x108>)
 80177d4:	f000 f986 	bl	8017ae4 <APP_THREAD_TraceError>
    break;
 80177d8:	bf00      	nop
  }
}
 80177da:	bf00      	nop
 80177dc:	3708      	adds	r7, #8
 80177de:	46bd      	mov	sp, r7
 80177e0:	bd80      	pop	{r7, pc}
 80177e2:	bf00      	nop
 80177e4:	0801b448 	.word	0x0801b448
 80177e8:	0801b46c 	.word	0x0801b46c
 80177ec:	0801b490 	.word	0x0801b490
 80177f0:	0801b4b0 	.word	0x0801b4b0
 80177f4:	0801b4d0 	.word	0x0801b4d0
 80177f8:	0801b4f0 	.word	0x0801b4f0
 80177fc:	0801b50c 	.word	0x0801b50c
 8017800:	0801b538 	.word	0x0801b538
 8017804:	0801b55c 	.word	0x0801b55c

08017808 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8017808:	b590      	push	{r4, r7, lr}
 801780a:	b083      	sub	sp, #12
 801780c:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 801780e:	2000      	movs	r0, #0
 8017810:	f7fd fa0e 	bl	8014c30 <otInstanceErasePersistentInfo>
 8017814:	4603      	mov	r3, r0
 8017816:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017818:	79fb      	ldrb	r3, [r7, #7]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d004      	beq.n	8017828 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 801781e:	79fb      	ldrb	r3, [r7, #7]
 8017820:	4619      	mov	r1, r3
 8017822:	2006      	movs	r0, #6
 8017824:	f7ff ff6a 	bl	80176fc <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8017828:	2000      	movs	r0, #0
 801782a:	f7fd f9a4 	bl	8014b76 <otInstanceFinalize>
  otInstanceInitSingle();
 801782e:	f7fd f97b 	bl	8014b28 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8017832:	2200      	movs	r2, #0
 8017834:	4979      	ldr	r1, [pc, #484]	; (8017a1c <APP_THREAD_DeviceConfig+0x214>)
 8017836:	2000      	movs	r0, #0
 8017838:	f7fd f9c4 	bl	8014bc4 <otSetStateChangedCallback>
 801783c:	4603      	mov	r3, r0
 801783e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017840:	79fb      	ldrb	r3, [r7, #7]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d004      	beq.n	8017850 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8017846:	79fb      	ldrb	r3, [r7, #7]
 8017848:	4619      	mov	r1, r3
 801784a:	2001      	movs	r0, #1
 801784c:	f7ff ff56 	bl	80176fc <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8017850:	2117      	movs	r1, #23
 8017852:	2000      	movs	r0, #0
 8017854:	f7fd fb2a 	bl	8014eac <otLinkSetChannel>
 8017858:	4603      	mov	r3, r0
 801785a:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801785c:	79fb      	ldrb	r3, [r7, #7]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d004      	beq.n	801786c <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8017862:	79fb      	ldrb	r3, [r7, #7]
 8017864:	4619      	mov	r1, r3
 8017866:	2002      	movs	r0, #2
 8017868:	f7ff ff48 	bl	80176fc <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 801786c:	f241 2134 	movw	r1, #4660	; 0x1234
 8017870:	2000      	movs	r0, #0
 8017872:	f7fd fb4b 	bl	8014f0c <otLinkSetPanId>
 8017876:	4603      	mov	r3, r0
 8017878:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801787a:	79fb      	ldrb	r3, [r7, #7]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d004      	beq.n	801788a <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8017880:	79fb      	ldrb	r3, [r7, #7]
 8017882:	4619      	mov	r1, r3
 8017884:	2003      	movs	r0, #3
 8017886:	f7ff ff39 	bl	80176fc <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 801788a:	2101      	movs	r1, #1
 801788c:	2000      	movs	r0, #0
 801788e:	f7fd f9f8 	bl	8014c82 <otIp6SetEnabled>
 8017892:	4603      	mov	r3, r0
 8017894:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017896:	79fb      	ldrb	r3, [r7, #7]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d004      	beq.n	80178a6 <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 801789c:	79fb      	ldrb	r3, [r7, #7]
 801789e:	4619      	mov	r1, r3
 80178a0:	2004      	movs	r0, #4
 80178a2:	f7ff ff2b 	bl	80176fc <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 80178a6:	2101      	movs	r1, #1
 80178a8:	2000      	movs	r0, #0
 80178aa:	f7fe f81b 	bl	80158e4 <otThreadSetEnabled>
 80178ae:	4603      	mov	r3, r0
 80178b0:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80178b2:	79fb      	ldrb	r3, [r7, #7]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d004      	beq.n	80178c2 <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 80178b8:	79fb      	ldrb	r3, [r7, #7]
 80178ba:	4619      	mov	r1, r3
 80178bc:	2005      	movs	r0, #5
 80178be:	f7ff ff1d 	bl	80176fc <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
	error = otThreadSetEnabled(NULL, false);
 80178c2:	2100      	movs	r1, #0
 80178c4:	2000      	movs	r0, #0
 80178c6:	f7fe f80d 	bl	80158e4 <otThreadSetEnabled>
 80178ca:	4603      	mov	r3, r0
 80178cc:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80178ce:	79fb      	ldrb	r3, [r7, #7]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d004      	beq.n	80178de <APP_THREAD_DeviceConfig+0xd6>
		APP_THREAD_Error(ERR_THREAD_START, error);
 80178d4:	79fb      	ldrb	r3, [r7, #7]
 80178d6:	4619      	mov	r1, r3
 80178d8:	2005      	movs	r0, #5
 80178da:	f7ff ff0f 	bl	80176fc <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, false);
 80178de:	2100      	movs	r1, #0
 80178e0:	2000      	movs	r0, #0
 80178e2:	f7fd f9ce 	bl	8014c82 <otIp6SetEnabled>
 80178e6:	4603      	mov	r3, r0
 80178e8:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80178ea:	79fb      	ldrb	r3, [r7, #7]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d004      	beq.n	80178fa <APP_THREAD_DeviceConfig+0xf2>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 80178f0:	79fb      	ldrb	r3, [r7, #7]
 80178f2:	4619      	mov	r1, r3
 80178f4:	2004      	movs	r0, #4
 80178f6:	f7ff ff01 	bl	80176fc <APP_THREAD_Error>
	}

	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 80178fa:	2106      	movs	r1, #6
 80178fc:	2000      	movs	r0, #0
 80178fe:	f7fd fdd3 	bl	80154a8 <otPlatRadioSetTransmitPower>
 8017902:	4603      	mov	r3, r0
 8017904:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017906:	79fb      	ldrb	r3, [r7, #7]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d004      	beq.n	8017916 <APP_THREAD_DeviceConfig+0x10e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 801790c:	79fb      	ldrb	r3, [r7, #7]
 801790e:	4619      	mov	r1, r3
 8017910:	2002      	movs	r0, #2
 8017912:	f7ff fef3 	bl	80176fc <APP_THREAD_Error>
	}

	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 8017916:	2103      	movs	r1, #3
 8017918:	2000      	movs	r0, #0
 801791a:	f7fe f813 	bl	8015944 <otThreadSetChildTimeout>
//	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);

//   error = otIp6AddressFromString("ff12::1", &multicastAddr);
//   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

	error = otThreadSetMasterKey(NULL, &masterKey);
 801791e:	4940      	ldr	r1, [pc, #256]	; (8017a20 <APP_THREAD_DeviceConfig+0x218>)
 8017920:	2000      	movs	r0, #0
 8017922:	f7fe f86a 	bl	80159fa <otThreadSetMasterKey>
 8017926:	4603      	mov	r3, r0
 8017928:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801792a:	79fb      	ldrb	r3, [r7, #7]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d004      	beq.n	801793a <APP_THREAD_DeviceConfig+0x132>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8017930:	79fb      	ldrb	r3, [r7, #7]
 8017932:	4619      	mov	r1, r3
 8017934:	2002      	movs	r0, #2
 8017936:	f7ff fee1 	bl	80176fc <APP_THREAD_Error>
	}

	error = otThreadSetNetworkName(NULL, networkName);
 801793a:	493a      	ldr	r1, [pc, #232]	; (8017a24 <APP_THREAD_DeviceConfig+0x21c>)
 801793c:	2000      	movs	r0, #0
 801793e:	f7fe f8db 	bl	8015af8 <otThreadSetNetworkName>
 8017942:	4603      	mov	r3, r0
 8017944:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017946:	79fb      	ldrb	r3, [r7, #7]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d004      	beq.n	8017956 <APP_THREAD_DeviceConfig+0x14e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 801794c:	79fb      	ldrb	r3, [r7, #7]
 801794e:	4619      	mov	r1, r3
 8017950:	2002      	movs	r0, #2
 8017952:	f7ff fed3 	bl	80176fc <APP_THREAD_Error>
	}
	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 8017956:	4934      	ldr	r1, [pc, #208]	; (8017a28 <APP_THREAD_DeviceConfig+0x220>)
 8017958:	2000      	movs	r0, #0
 801795a:	f7fe f81f 	bl	801599c <otThreadSetExtendedPanId>
 801795e:	4603      	mov	r3, r0
 8017960:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017962:	79fb      	ldrb	r3, [r7, #7]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d004      	beq.n	8017972 <APP_THREAD_DeviceConfig+0x16a>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8017968:	79fb      	ldrb	r3, [r7, #7]
 801796a:	4619      	mov	r1, r3
 801796c:	2002      	movs	r0, #2
 801796e:	f7ff fec5 	bl	80176fc <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, true);
 8017972:	2101      	movs	r1, #1
 8017974:	2000      	movs	r0, #0
 8017976:	f7fd f984 	bl	8014c82 <otIp6SetEnabled>
 801797a:	4603      	mov	r3, r0
 801797c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801797e:	79fb      	ldrb	r3, [r7, #7]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d004      	beq.n	801798e <APP_THREAD_DeviceConfig+0x186>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8017984:	79fb      	ldrb	r3, [r7, #7]
 8017986:	4619      	mov	r1, r3
 8017988:	2004      	movs	r0, #4
 801798a:	f7ff feb7 	bl	80176fc <APP_THREAD_Error>
	}

	error = otThreadSetEnabled(NULL, true);
 801798e:	2101      	movs	r1, #1
 8017990:	2000      	movs	r0, #0
 8017992:	f7fd ffa7 	bl	80158e4 <otThreadSetEnabled>
 8017996:	4603      	mov	r3, r0
 8017998:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801799a:	79fb      	ldrb	r3, [r7, #7]
 801799c:	2b00      	cmp	r3, #0
 801799e:	d004      	beq.n	80179aa <APP_THREAD_DeviceConfig+0x1a2>
		APP_THREAD_Error(ERR_THREAD_START, error);
 80179a0:	79fb      	ldrb	r3, [r7, #7]
 80179a2:	4619      	mov	r1, r3
 80179a4:	2005      	movs	r0, #5
 80179a6:	f7ff fea9 	bl	80176fc <APP_THREAD_Error>
	}

	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 80179aa:	f241 6133 	movw	r1, #5683	; 0x1633
 80179ae:	2000      	movs	r0, #0
 80179b0:	f7fd f828 	bl	8014a04 <otCoapStart>
 80179b4:	4603      	mov	r3, r0
 80179b6:	71fb      	strb	r3, [r7, #7]
	//  error = otCoapAddResource(NULL, &OT_Light_Ressource);
	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 80179b8:	491c      	ldr	r1, [pc, #112]	; (8017a2c <APP_THREAD_DeviceConfig+0x224>)
 80179ba:	2000      	movs	r0, #0
 80179bc:	f7fd f852 	bl	8014a64 <otCoapAddResource>
 80179c0:	4603      	mov	r3, r0
 80179c2:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 80179c4:	491a      	ldr	r1, [pc, #104]	; (8017a30 <APP_THREAD_DeviceConfig+0x228>)
 80179c6:	2000      	movs	r0, #0
 80179c8:	f7fd f84c 	bl	8014a64 <otCoapAddResource>
 80179cc:	4603      	mov	r3, r0
 80179ce:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 80179d0:	4918      	ldr	r1, [pc, #96]	; (8017a34 <APP_THREAD_DeviceConfig+0x22c>)
 80179d2:	2000      	movs	r0, #0
 80179d4:	f7fd f846 	bl	8014a64 <otCoapAddResource>
 80179d8:	4603      	mov	r3, r0
 80179da:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);
 80179dc:	4916      	ldr	r1, [pc, #88]	; (8017a38 <APP_THREAD_DeviceConfig+0x230>)
 80179de:	2000      	movs	r0, #0
 80179e0:	f7fd f840 	bl	8014a64 <otCoapAddResource>
 80179e4:	4603      	mov	r3, r0
 80179e6:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaProvisioning);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaParameters);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaSend);
#endif
#ifndef DONGLE_CODE
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 80179e8:	4914      	ldr	r1, [pc, #80]	; (8017a3c <APP_THREAD_DeviceConfig+0x234>)
 80179ea:	2000      	movs	r0, #0
 80179ec:	f7fd f83a 	bl	8014a64 <otCoapAddResource>
 80179f0:	4603      	mov	r3, r0
 80179f2:	71fb      	strb	r3, [r7, #7]
#endif
	// set default multicast address for border router
//    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
	otIp6AddressFromString("ff03::1", &multicastAddr);
 80179f4:	4912      	ldr	r1, [pc, #72]	; (8017a40 <APP_THREAD_DeviceConfig+0x238>)
 80179f6:	4813      	ldr	r0, [pc, #76]	; (8017a44 <APP_THREAD_DeviceConfig+0x23c>)
 80179f8:	f7fd fa26 	bl	8014e48 <otIp6AddressFromString>
	memcpy(&borderRouter.ipv6, &multicastAddr, sizeof(multicastAddr));
 80179fc:	4a12      	ldr	r2, [pc, #72]	; (8017a48 <APP_THREAD_DeviceConfig+0x240>)
 80179fe:	4b10      	ldr	r3, [pc, #64]	; (8017a40 <APP_THREAD_DeviceConfig+0x238>)
 8017a00:	4614      	mov	r4, r2
 8017a02:	6818      	ldr	r0, [r3, #0]
 8017a04:	6859      	ldr	r1, [r3, #4]
 8017a06:	689a      	ldr	r2, [r3, #8]
 8017a08:	68db      	ldr	r3, [r3, #12]
 8017a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// set UID in local state variable
//	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
//	 = UID64_BASE;
	stm32UID(msgSendMyIP.uid);
 8017a0c:	480f      	ldr	r0, [pc, #60]	; (8017a4c <APP_THREAD_DeviceConfig+0x244>)
 8017a0e:	f000 f8ed 	bl	8017bec <stm32UID>

  /* USER CODE END DEVICECONFIG */
}
 8017a12:	bf00      	nop
 8017a14:	370c      	adds	r7, #12
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd90      	pop	{r4, r7, pc}
 8017a1a:	bf00      	nop
 8017a1c:	08017a51 	.word	0x08017a51
 8017a20:	0801bb38 	.word	0x0801bb38
 8017a24:	0801bb50 	.word	0x0801bb50
 8017a28:	0801bb48 	.word	0x0801bb48
 8017a2c:	20000198 	.word	0x20000198
 8017a30:	200001a8 	.word	0x200001a8
 8017a34:	200001b8 	.word	0x200001b8
 8017a38:	200001c8 	.word	0x200001c8
 8017a3c:	200001d8 	.word	0x200001d8
 8017a40:	200289d0 	.word	0x200289d0
 8017a44:	0801b56c 	.word	0x0801b56c
 8017a48:	20027820 	.word	0x20027820
 8017a4c:	20000200 	.word	0x20000200

08017a50 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8017a50:	b590      	push	{r4, r7, lr}
 8017a52:	b083      	sub	sp, #12
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
 8017a58:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	f003 0304 	and.w	r3, r3, #4
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d035      	beq.n	8017ad0 <APP_THREAD_StateNotif+0x80>
  {
	  msgSendMyIP.RLOC = otThreadGetRloc16(NULL);
 8017a64:	2000      	movs	r0, #0
 8017a66:	f7fe f89f 	bl	8015ba8 <otThreadGetRloc16>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	461a      	mov	r2, r3
 8017a6e:	4b1b      	ldr	r3, [pc, #108]	; (8017adc <APP_THREAD_StateNotif+0x8c>)
 8017a70:	841a      	strh	r2, [r3, #32]
    switch (otThreadGetDeviceRole(NULL))
 8017a72:	2000      	movs	r0, #0
 8017a74:	f7fe f86f 	bl	8015b56 <otThreadGetDeviceRole>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	2b04      	cmp	r3, #4
 8017a7c:	d825      	bhi.n	8017aca <APP_THREAD_StateNotif+0x7a>
 8017a7e:	a201      	add	r2, pc, #4	; (adr r2, 8017a84 <APP_THREAD_StateNotif+0x34>)
 8017a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a84:	08017a99 	.word	0x08017a99
 8017a88:	08017aa9 	.word	0x08017aa9
 8017a8c:	08017ab9 	.word	0x08017ab9
 8017a90:	08017abf 	.word	0x08017abf
 8017a94:	08017ac5 	.word	0x08017ac5
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
			borderRouter.epoch = 0;
 8017a98:	4a11      	ldr	r2, [pc, #68]	; (8017ae0 <APP_THREAD_StateNotif+0x90>)
 8017a9a:	f04f 0300 	mov.w	r3, #0
 8017a9e:	f04f 0400 	mov.w	r4, #0
 8017aa2:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 8017aa6:	e014      	b.n	8017ad2 <APP_THREAD_StateNotif+0x82>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
			borderRouter.epoch = 0;
 8017aa8:	4a0d      	ldr	r2, [pc, #52]	; (8017ae0 <APP_THREAD_StateNotif+0x90>)
 8017aaa:	f04f 0300 	mov.w	r3, #0
 8017aae:	f04f 0400 	mov.w	r4, #0
 8017ab2:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 8017ab6:	e00c      	b.n	8017ad2 <APP_THREAD_StateNotif+0x82>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_Off(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8017ab8:	f000 f90c 	bl	8017cd4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 8017abc:	e009      	b.n	8017ad2 <APP_THREAD_StateNotif+0x82>
#ifdef DONGLE_CODE
			BSP_LED_Off(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8017abe:	f000 f909 	bl	8017cd4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8017ac2:	e006      	b.n	8017ad2 <APP_THREAD_StateNotif+0x82>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8017ac4:	f000 f906 	bl	8017cd4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 8017ac8:	e003      	b.n	8017ad2 <APP_THREAD_StateNotif+0x82>
    default:
      /* USER CODE BEGIN DEFAULT */
			APP_THREAD_UpdateBorderRouter();
 8017aca:	f000 f903 	bl	8017cd4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END DEFAULT */
      break;
 8017ace:	e000      	b.n	8017ad2 <APP_THREAD_StateNotif+0x82>
    }
  }
 8017ad0:	bf00      	nop
}
 8017ad2:	bf00      	nop
 8017ad4:	370c      	adds	r7, #12
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	bd90      	pop	{r4, r7, pc}
 8017ada:	bf00      	nop
 8017adc:	200001e8 	.word	0x200001e8
 8017ae0:	20027820 	.word	0x20027820

08017ae4 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8017ae4:	b480      	push	{r7}
 8017ae6:	b083      	sub	sp, #12
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
 8017aec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 8017aee:	bf00      	nop
 8017af0:	370c      	adds	r7, #12
 8017af2:	46bd      	mov	sp, r7
 8017af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af8:	4770      	bx	lr
	...

08017afc <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b088      	sub	sp, #32
 8017b00:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8017b02:	1d3b      	adds	r3, r7, #4
 8017b04:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8017b06:	6978      	ldr	r0, [r7, #20]
 8017b08:	f7fd fd2e 	bl	8015568 <SHCI_GetWirelessFwInfo>
 8017b0c:	4603      	mov	r3, r0
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d004      	beq.n	8017b1c <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8017b12:	2101      	movs	r1, #1
 8017b14:	201a      	movs	r0, #26
 8017b16:	f7ff fdf1 	bl	80176fc <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8017b1a:	e03d      	b.n	8017b98 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8017b1c:	4a20      	ldr	r2, [pc, #128]	; (8017ba0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8017b1e:	2101      	movs	r1, #1
 8017b20:	2000      	movs	r0, #0
 8017b22:	f7ed fb6f 	bl	8005204 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8017b26:	4a1f      	ldr	r2, [pc, #124]	; (8017ba4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8017b28:	2101      	movs	r1, #1
 8017b2a:	2000      	movs	r0, #0
 8017b2c:	f7ed fb6a 	bl	8005204 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8017b30:	697b      	ldr	r3, [r7, #20]
 8017b32:	781b      	ldrb	r3, [r3, #0]
 8017b34:	4619      	mov	r1, r3
 8017b36:	697b      	ldr	r3, [r7, #20]
 8017b38:	785b      	ldrb	r3, [r3, #1]
 8017b3a:	461a      	mov	r2, r3
 8017b3c:	697b      	ldr	r3, [r7, #20]
 8017b3e:	789b      	ldrb	r3, [r3, #2]
 8017b40:	9301      	str	r3, [sp, #4]
 8017b42:	9200      	str	r2, [sp, #0]
 8017b44:	460b      	mov	r3, r1
 8017b46:	4a18      	ldr	r2, [pc, #96]	; (8017ba8 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8017b48:	2101      	movs	r1, #1
 8017b4a:	2000      	movs	r0, #0
 8017b4c:	f7ed fb5a 	bl	8005204 <logApplication>
    switch(p_wireless_info->StackType)
 8017b50:	697b      	ldr	r3, [r7, #20]
 8017b52:	7a5b      	ldrb	r3, [r3, #9]
 8017b54:	2b11      	cmp	r3, #17
 8017b56:	d009      	beq.n	8017b6c <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8017b58:	2b50      	cmp	r3, #80	; 0x50
 8017b5a:	d00d      	beq.n	8017b78 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8017b5c:	2b10      	cmp	r3, #16
 8017b5e:	d111      	bne.n	8017b84 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8017b60:	4a12      	ldr	r2, [pc, #72]	; (8017bac <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8017b62:	2101      	movs	r1, #1
 8017b64:	2000      	movs	r0, #0
 8017b66:	f7ed fb4d 	bl	8005204 <logApplication>
      break;
 8017b6a:	e010      	b.n	8017b8e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 8017b6c:	4a10      	ldr	r2, [pc, #64]	; (8017bb0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8017b6e:	2101      	movs	r1, #1
 8017b70:	2000      	movs	r0, #0
 8017b72:	f7ed fb47 	bl	8005204 <logApplication>
      break;
 8017b76:	e00a      	b.n	8017b8e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8017b78:	4a0e      	ldr	r2, [pc, #56]	; (8017bb4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8017b7a:	2101      	movs	r1, #1
 8017b7c:	2000      	movs	r0, #0
 8017b7e:	f7ed fb41 	bl	8005204 <logApplication>
      break;
 8017b82:	e004      	b.n	8017b8e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8017b84:	2101      	movs	r1, #1
 8017b86:	201a      	movs	r0, #26
 8017b88:	f7ff fdb8 	bl	80176fc <APP_THREAD_Error>
      break;
 8017b8c:	bf00      	nop
    APP_DBG("**********************************************************");
 8017b8e:	4a04      	ldr	r2, [pc, #16]	; (8017ba0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8017b90:	2101      	movs	r1, #1
 8017b92:	2000      	movs	r0, #0
 8017b94:	f7ed fb36 	bl	8005204 <logApplication>
}
 8017b98:	bf00      	nop
 8017b9a:	3718      	adds	r7, #24
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd80      	pop	{r7, pc}
 8017ba0:	0801b574 	.word	0x0801b574
 8017ba4:	0801b5b0 	.word	0x0801b5b0
 8017ba8:	0801b5cc 	.word	0x0801b5cc
 8017bac:	0801b5e4 	.word	0x0801b5e4
 8017bb0:	0801b5fc 	.word	0x0801b5fc
 8017bb4:	0801b614 	.word	0x0801b614

08017bb8 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b082      	sub	sp, #8
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8017bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8017bc4:	2101      	movs	r1, #1
 8017bc6:	2001      	movs	r0, #1
 8017bc8:	f7f8 fa2e 	bl	8010028 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8017bcc:	f000 fdda 	bl	8018784 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8017bd0:	e7f6      	b.n	8017bc0 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08017bd2 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8017bd2:	b580      	push	{r7, lr}
 8017bd4:	b082      	sub	sp, #8
 8017bd6:	af00      	add	r7, sp, #0
 8017bd8:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8017bda:	f04f 32ff 	mov.w	r2, #4294967295
 8017bde:	2101      	movs	r1, #1
 8017be0:	2001      	movs	r0, #1
 8017be2:	f7f8 fa21 	bl	8010028 <osThreadFlagsWait>
    Send_CLI_To_M0();
 8017be6:	f000 fd4f 	bl	8018688 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8017bea:	e7f6      	b.n	8017bda <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08017bec <stm32UID>:
  }
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
void stm32UID(uint8_t* uid) {
 8017bec:	b480      	push	{r7}
 8017bee:	b085      	sub	sp, #20
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < 12; i++) {
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	73fb      	strb	r3, [r7, #15]
 8017bf8:	e00c      	b.n	8017c14 <stm32UID+0x28>
    uid[i] = *(volatile uint8_t *)(UID_BASE + i);
 8017bfa:	7bfa      	ldrb	r2, [r7, #15]
 8017bfc:	4b0a      	ldr	r3, [pc, #40]	; (8017c28 <stm32UID+0x3c>)
 8017bfe:	4413      	add	r3, r2
 8017c00:	4619      	mov	r1, r3
 8017c02:	7bfb      	ldrb	r3, [r7, #15]
 8017c04:	687a      	ldr	r2, [r7, #4]
 8017c06:	4413      	add	r3, r2
 8017c08:	780a      	ldrb	r2, [r1, #0]
 8017c0a:	b2d2      	uxtb	r2, r2
 8017c0c:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 12; i++) {
 8017c0e:	7bfb      	ldrb	r3, [r7, #15]
 8017c10:	3301      	adds	r3, #1
 8017c12:	73fb      	strb	r3, [r7, #15]
 8017c14:	7bfb      	ldrb	r3, [r7, #15]
 8017c16:	2b0b      	cmp	r3, #11
 8017c18:	d9ef      	bls.n	8017bfa <stm32UID+0xe>
    }
  }
 8017c1a:	bf00      	nop
 8017c1c:	3714      	adds	r7, #20
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c24:	4770      	bx	lr
 8017c26:	bf00      	nop
 8017c28:	1fff7590 	.word	0x1fff7590

08017c2c <APP_THREAD_DummyRespHandler>:
  return;
}
#endif

static void APP_THREAD_DummyRespHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8017c2c:	b480      	push	{r7}
 8017c2e:	b085      	sub	sp, #20
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	60f8      	str	r0, [r7, #12]
 8017c34:	60b9      	str	r1, [r7, #8]
 8017c36:	607a      	str	r2, [r7, #4]
 8017c38:	603b      	str	r3, [r7, #0]
	UNUSED(p_context);
	UNUSED(pHeader);
	UNUSED(pMessage);
	UNUSED(pMessageInfo);
	UNUSED(Result);
}
 8017c3a:	bf00      	nop
 8017c3c:	3714      	adds	r7, #20
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c44:	4770      	bx	lr
	...

08017c48 <APP_THREAD_CoapRespHandler_UpdateBorderRouter>:

volatile uint16_t test_num;
static void APP_THREAD_CoapRespHandler_UpdateBorderRouter(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8017c48:	b5b0      	push	{r4, r5, r7, lr}
 8017c4a:	b084      	sub	sp, #16
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	60f8      	str	r0, [r7, #12]
 8017c50:	60b9      	str	r1, [r7, #8]
 8017c52:	607a      	str	r2, [r7, #4]
 8017c54:	70fb      	strb	r3, [r7, #3]

//	taskENTER_CRITICAL();
//	test_num = otMessageGetLength(pMessage);
//	test_num = otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal));

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8017c56:	68b8      	ldr	r0, [r7, #8]
 8017c58:	f7fd f9b3 	bl	8014fc2 <otMessageGetOffset>
 8017c5c:	4603      	mov	r3, r0
 8017c5e:	4619      	mov	r1, r3
 8017c60:	2318      	movs	r3, #24
 8017c62:	4a0e      	ldr	r2, [pc, #56]	; (8017c9c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8017c64:	68b8      	ldr	r0, [r7, #8]
 8017c66:	f7fd fa11 	bl	801508c <otMessageRead>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	2b18      	cmp	r3, #24
 8017c6e:	d110      	bne.n	8017c92 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x4a>
			== sizeof(receivedSystemCal)) {

			// if successful, update border router state variable
			memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8017c70:	4a0b      	ldr	r2, [pc, #44]	; (8017ca0 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8017c72:	4b0a      	ldr	r3, [pc, #40]	; (8017c9c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8017c74:	4614      	mov	r4, r2
 8017c76:	461d      	mov	r5, r3
 8017c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017c7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017c80:	e884 0003 	stmia.w	r4, {r0, r1}

			// update the onboard RTC unix time
			updateRTC(borderRouter.epoch);
 8017c84:	4b06      	ldr	r3, [pc, #24]	; (8017ca0 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8017c86:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	4621      	mov	r1, r4
 8017c8e:	f000 f9af 	bl	8017ff0 <updateRTC>
	}
//	taskEXIT_CRITICAL();
}
 8017c92:	bf00      	nop
 8017c94:	3710      	adds	r7, #16
 8017c96:	46bd      	mov	sp, r7
 8017c98:	bdb0      	pop	{r4, r5, r7, pc}
 8017c9a:	bf00      	nop
 8017c9c:	20027838 	.word	0x20027838
 8017ca0:	20027820 	.word	0x20027820

08017ca4 <APP_THREAD_DummyReqHandler>:
 * @brief Dummy request handler
 * @param
 * @retval None
 */
static void APP_THREAD_DummyReqHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8017ca4:	b480      	push	{r7}
 8017ca6:	b085      	sub	sp, #20
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	60f8      	str	r0, [r7, #12]
 8017cac:	60b9      	str	r1, [r7, #8]
 8017cae:	607a      	str	r2, [r7, #4]
 8017cb0:	603b      	str	r3, [r7, #0]
	tempMessageInfo = pMessageInfo;
 8017cb2:	4a06      	ldr	r2, [pc, #24]	; (8017ccc <APP_THREAD_DummyReqHandler+0x28>)
 8017cb4:	683b      	ldr	r3, [r7, #0]
 8017cb6:	6013      	str	r3, [r2, #0]
	receivedMessage = (otMessageInfo*) pMessage;
 8017cb8:	4a05      	ldr	r2, [pc, #20]	; (8017cd0 <APP_THREAD_DummyReqHandler+0x2c>)
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	6013      	str	r3, [r2, #0]
}
 8017cbe:	bf00      	nop
 8017cc0:	3714      	adds	r7, #20
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc8:	4770      	bx	lr
 8017cca:	bf00      	nop
 8017ccc:	200289a8 	.word	0x200289a8
 8017cd0:	200289e4 	.word	0x200289e4

08017cd4 <APP_THREAD_UpdateBorderRouter>:
//volatile otNetifMulticastAddress *test_addr;
//volatile otExtAddress *test_ext_addr;
//volatile otExtAddress test_1;
//volatile otExtAddress test_2;

void APP_THREAD_UpdateBorderRouter() {
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	af00      	add	r7, sp, #0

	// if border router IP is still multicast (ff03::1), attempt to sync
	if (otIp6IsAddressEqual(&multicastAddr, &borderRouter.ipv6)) {
 8017cd8:	4906      	ldr	r1, [pc, #24]	; (8017cf4 <APP_THREAD_UpdateBorderRouter+0x20>)
 8017cda:	4807      	ldr	r0, [pc, #28]	; (8017cf8 <APP_THREAD_UpdateBorderRouter+0x24>)
 8017cdc:	f7fd f87e 	bl	8014ddc <otIp6IsAddressEqual>
 8017ce0:	4603      	mov	r3, r0
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d003      	beq.n	8017cee <APP_THREAD_UpdateBorderRouter+0x1a>
		APP_THREAD_SyncWithBorderRouter();
 8017ce6:	f000 f809 	bl	8017cfc <APP_THREAD_SyncWithBorderRouter>
		APP_THREAD_SendMyInfo();
 8017cea:	f000 f81d 	bl	8017d28 <APP_THREAD_SendMyInfo>
	}

	// send IP to border router
	//APP_THREAD_SendMyInfo();
}
 8017cee:	bf00      	nop
 8017cf0:	bd80      	pop	{r7, pc}
 8017cf2:	bf00      	nop
 8017cf4:	20027820 	.word	0x20027820
 8017cf8:	200289d0 	.word	0x200289d0

08017cfc <APP_THREAD_SyncWithBorderRouter>:

// send a GET request to border router via multicast
void APP_THREAD_SyncWithBorderRouter() {
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b084      	sub	sp, #16
 8017d00:	af04      	add	r7, sp, #16
	APP_THREAD_SendCoapMsgForBorderSync(NULL, 0, &multicastAddr, borderSyncResource, NO_ACK, OT_COAP_CODE_GET, 1U);
 8017d02:	2301      	movs	r3, #1
 8017d04:	9302      	str	r3, [sp, #8]
 8017d06:	2301      	movs	r3, #1
 8017d08:	9301      	str	r3, [sp, #4]
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	9300      	str	r3, [sp, #0]
 8017d0e:	4b04      	ldr	r3, [pc, #16]	; (8017d20 <APP_THREAD_SyncWithBorderRouter+0x24>)
 8017d10:	4a04      	ldr	r2, [pc, #16]	; (8017d24 <APP_THREAD_SyncWithBorderRouter+0x28>)
 8017d12:	2100      	movs	r1, #0
 8017d14:	2000      	movs	r0, #0
 8017d16:	f000 faf7 	bl	8018308 <APP_THREAD_SendCoapMsgForBorderSync>
}
 8017d1a:	bf00      	nop
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	bd80      	pop	{r7, pc}
 8017d20:	0801bb08 	.word	0x0801bb08
 8017d24:	200289d0 	.word	0x200289d0

08017d28 <APP_THREAD_SendMyInfo>:

void APP_THREAD_SendMyInfo() {
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b084      	sub	sp, #16
 8017d2c:	af04      	add	r7, sp, #16
////	test_1 = test_ext_addr[0];
////	test_2 = &test_ext_addr;
//
//	error = otThreadGetNextNeighborInfo(NULL, &test_neighbor_iterator, &test_info_neighbor);
	// TODO: does this need an ACK
	APP_THREAD_SendCoapMsg(&msgSendMyIP, sizeof(msgSendMyIP), &borderRouter.ipv6, nodeInfoResource, NO_ACK,
 8017d2e:	2301      	movs	r3, #1
 8017d30:	9302      	str	r3, [sp, #8]
 8017d32:	2303      	movs	r3, #3
 8017d34:	9301      	str	r3, [sp, #4]
 8017d36:	2300      	movs	r3, #0
 8017d38:	9300      	str	r3, [sp, #0]
 8017d3a:	4b04      	ldr	r3, [pc, #16]	; (8017d4c <APP_THREAD_SendMyInfo+0x24>)
 8017d3c:	4a04      	ldr	r2, [pc, #16]	; (8017d50 <APP_THREAD_SendMyInfo+0x28>)
 8017d3e:	2122      	movs	r1, #34	; 0x22
 8017d40:	4804      	ldr	r0, [pc, #16]	; (8017d54 <APP_THREAD_SendMyInfo+0x2c>)
 8017d42:	f000 f9bf 	bl	80180c4 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 8017d46:	bf00      	nop
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	bd80      	pop	{r7, pc}
 8017d4c:	0801bb28 	.word	0x0801bb28
 8017d50:	20027820 	.word	0x20027820
 8017d54:	200001e8 	.word	0x200001e8

08017d58 <APP_THREAD_SendBorderMessage>:

void APP_THREAD_SendBorderMessage(void *packet, uint8_t len, char *resource) {
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b088      	sub	sp, #32
 8017d5c:	af04      	add	r7, sp, #16
 8017d5e:	60f8      	str	r0, [r7, #12]
 8017d60:	460b      	mov	r3, r1
 8017d62:	607a      	str	r2, [r7, #4]
 8017d64:	72fb      	strb	r3, [r7, #11]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(packet, len, &borderRouter.ipv6, resource, NO_ACK, OT_COAP_CODE_PUT, 1U);
 8017d66:	7afb      	ldrb	r3, [r7, #11]
 8017d68:	b299      	uxth	r1, r3
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	9302      	str	r3, [sp, #8]
 8017d6e:	2303      	movs	r3, #3
 8017d70:	9301      	str	r3, [sp, #4]
 8017d72:	2300      	movs	r3, #0
 8017d74:	9300      	str	r3, [sp, #0]
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	4a03      	ldr	r2, [pc, #12]	; (8017d88 <APP_THREAD_SendBorderMessage+0x30>)
 8017d7a:	68f8      	ldr	r0, [r7, #12]
 8017d7c:	f000 f9a2 	bl	80180c4 <APP_THREAD_SendCoapMsg>
}
 8017d80:	bf00      	nop
 8017d82:	3710      	adds	r7, #16
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}
 8017d88:	20027820 	.word	0x20027820

08017d8c <APP_THREAD_SendBorderPacket>:

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket) {
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b086      	sub	sp, #24
 8017d90:	af04      	add	r7, sp, #16
 8017d92:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(sensorPacket, sizeof(struct LogPacket), &borderRouter.ipv6, borderPacket, NO_ACK,
 8017d94:	2301      	movs	r3, #1
 8017d96:	9302      	str	r3, [sp, #8]
 8017d98:	2303      	movs	r3, #3
 8017d9a:	9301      	str	r3, [sp, #4]
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	9300      	str	r3, [sp, #0]
 8017da0:	4b04      	ldr	r3, [pc, #16]	; (8017db4 <APP_THREAD_SendBorderPacket+0x28>)
 8017da2:	4a05      	ldr	r2, [pc, #20]	; (8017db8 <APP_THREAD_SendBorderPacket+0x2c>)
 8017da4:	21cc      	movs	r1, #204	; 0xcc
 8017da6:	6878      	ldr	r0, [r7, #4]
 8017da8:	f000 f98c 	bl	80180c4 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);

}
 8017dac:	bf00      	nop
 8017dae:	3708      	adds	r7, #8
 8017db0:	46bd      	mov	sp, r7
 8017db2:	bd80      	pop	{r7, pc}
 8017db4:	0801bb18 	.word	0x0801bb18
 8017db8:	20027820 	.word	0x20027820

08017dbc <APP_THREAD_CoapLightsSimpleRequestHandler>:

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b084      	sub	sp, #16
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	60f8      	str	r0, [r7, #12]
 8017dc4:	60b9      	str	r1, [r7, #8]
 8017dc6:	607a      	str	r2, [r7, #4]
	do {

		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8017dc8:	68f8      	ldr	r0, [r7, #12]
 8017dca:	f7fc fcfc 	bl	80147c6 <otCoapHeaderGetCode>
 8017dce:	4603      	mov	r3, r0
 8017dd0:	2b01      	cmp	r3, #1
 8017dd2:	d107      	bne.n	8017de4 <APP_THREAD_CoapLightsSimpleRequestHandler+0x28>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &lightsSimpleMessage, sizeof(lightsSimpleMessage));
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	b299      	uxth	r1, r3
 8017dd8:	2304      	movs	r3, #4
 8017dda:	4a23      	ldr	r2, [pc, #140]	; (8017e68 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 8017ddc:	68f8      	ldr	r0, [r7, #12]
 8017dde:	f000 fb49 	bl	8018474 <APP_THREAD_SendDataResponse>
			break;
 8017de2:	e03d      	b.n	8017e60 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage))
 8017de4:	68b8      	ldr	r0, [r7, #8]
 8017de6:	f7fd f8ec 	bl	8014fc2 <otMessageGetOffset>
 8017dea:	4603      	mov	r3, r0
 8017dec:	4619      	mov	r1, r3
 8017dee:	2304      	movs	r3, #4
 8017df0:	4a1d      	ldr	r2, [pc, #116]	; (8017e68 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 8017df2:	68b8      	ldr	r0, [r7, #8]
 8017df4:	f7fd f94a 	bl	801508c <otMessageRead>
 8017df8:	4603      	mov	r3, r0
 8017dfa:	2b04      	cmp	r3, #4
 8017dfc:	d112      	bne.n	8017e24 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				== 4U) {
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8017dfe:	68f8      	ldr	r0, [r7, #12]
 8017e00:	f7fc fce1 	bl	80147c6 <otCoapHeaderGetCode>
 8017e04:	4603      	mov	r3, r0
 8017e06:	2b03      	cmp	r3, #3
 8017e08:	d005      	beq.n	8017e16 <APP_THREAD_CoapLightsSimpleRequestHandler+0x5a>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8017e0a:	68f8      	ldr	r0, [r7, #12]
 8017e0c:	f7fc fcdb 	bl	80147c6 <otCoapHeaderGetCode>
 8017e10:	4603      	mov	r3, r0
 8017e12:	2b02      	cmp	r3, #2
 8017e14:	d106      	bne.n	8017e24 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 8017e16:	4b15      	ldr	r3, [pc, #84]	; (8017e6c <APP_THREAD_CoapLightsSimpleRequestHandler+0xb0>)
 8017e18:	6818      	ldr	r0, [r3, #0]
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	2200      	movs	r2, #0
 8017e1e:	4912      	ldr	r1, [pc, #72]	; (8017e68 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 8017e20:	f7f8 fe12 	bl	8010a48 <osMessageQueuePut>
			}

		}

		tempMessageInfo = pMessageInfo;
 8017e24:	4a12      	ldr	r2, [pc, #72]	; (8017e70 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb4>)
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8017e2a:	4a12      	ldr	r2, [pc, #72]	; (8017e74 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb8>)
 8017e2c:	68bb      	ldr	r3, [r7, #8]
 8017e2e:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8017e30:	68f8      	ldr	r0, [r7, #12]
 8017e32:	f7fc fc9a 	bl	801476a <otCoapHeaderGetType>
 8017e36:	4603      	mov	r3, r0
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d107      	bne.n	8017e4c <APP_THREAD_CoapLightsSimpleRequestHandler+0x90>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	b299      	uxth	r1, r3
 8017e40:	2300      	movs	r3, #0
 8017e42:	2200      	movs	r2, #0
 8017e44:	68f8      	ldr	r0, [r7, #12]
 8017e46:	f000 fb15 	bl	8018474 <APP_THREAD_SendDataResponse>
			break;
 8017e4a:	e009      	b.n	8017e60 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8017e4c:	68b8      	ldr	r0, [r7, #8]
 8017e4e:	f7fd f8b8 	bl	8014fc2 <otMessageGetOffset>
 8017e52:	4603      	mov	r3, r0
 8017e54:	4619      	mov	r1, r3
 8017e56:	2301      	movs	r3, #1
 8017e58:	4a07      	ldr	r2, [pc, #28]	; (8017e78 <APP_THREAD_CoapLightsSimpleRequestHandler+0xbc>)
 8017e5a:	68b8      	ldr	r0, [r7, #8]
 8017e5c:	f7fd f916 	bl	801508c <otMessageRead>

		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}
	} while (false);
}
 8017e60:	bf00      	nop
 8017e62:	3710      	adds	r7, #16
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd80      	pop	{r7, pc}
 8017e68:	200280a0 	.word	0x200280a0
 8017e6c:	20027c58 	.word	0x20027c58
 8017e70:	200289a8 	.word	0x200289a8
 8017e74:	200289e4 	.word	0x200289e4
 8017e78:	20027819 	.word	0x20027819

08017e7c <APP_THREAD_CoapToggleLoggingRequestHandler>:

#ifndef DONGLE_CODE
// request handler for when receiving a message directed at the data logging resource
static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b084      	sub	sp, #16
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	607a      	str	r2, [r7, #4]
	do {
		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8017e88:	68f8      	ldr	r0, [r7, #12]
 8017e8a:	f7fc fc9c 	bl	80147c6 <otCoapHeaderGetCode>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	d106      	bne.n	8017ea2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x26>
			APP_THREAD_SendDataResponse(&logMessage, sizeof(logMessage), pHeader, pMessageInfo);
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	68fa      	ldr	r2, [r7, #12]
 8017e98:	2106      	movs	r1, #6
 8017e9a:	481a      	ldr	r0, [pc, #104]	; (8017f04 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8017e9c:	f000 faea 	bl	8018474 <APP_THREAD_SendDataResponse>
			break;
 8017ea0:	e02c      	b.n	8017efc <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
		}

		// TODO : this will overwrite log message so maybe add a safer method
		if ( otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage)){
 8017ea2:	68b8      	ldr	r0, [r7, #8]
 8017ea4:	f7fd f88d 	bl	8014fc2 <otMessageGetOffset>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	4619      	mov	r1, r3
 8017eac:	2306      	movs	r3, #6
 8017eae:	4a15      	ldr	r2, [pc, #84]	; (8017f04 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8017eb0:	68b8      	ldr	r0, [r7, #8]
 8017eb2:	f7fd f8eb 	bl	801508c <otMessageRead>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	2b06      	cmp	r3, #6
 8017eba:	d112      	bne.n	8017ee2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
//			otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage));
			// if post or put, add to queue for masterthread processing
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8017ebc:	68f8      	ldr	r0, [r7, #12]
 8017ebe:	f7fc fc82 	bl	80147c6 <otCoapHeaderGetCode>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	2b03      	cmp	r3, #3
 8017ec6:	d005      	beq.n	8017ed4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8017ec8:	68f8      	ldr	r0, [r7, #12]
 8017eca:	f7fc fc7c 	bl	80147c6 <otCoapHeaderGetCode>
 8017ece:	4603      	mov	r3, r0
 8017ed0:	2b02      	cmp	r3, #2
 8017ed2:	d106      	bne.n	8017ee2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
				osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 8017ed4:	4b0c      	ldr	r3, [pc, #48]	; (8017f08 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8c>)
 8017ed6:	6818      	ldr	r0, [r3, #0]
 8017ed8:	2300      	movs	r3, #0
 8017eda:	2200      	movs	r2, #0
 8017edc:	4909      	ldr	r1, [pc, #36]	; (8017f04 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8017ede:	f7f8 fdb3 	bl	8010a48 <osMessageQueuePut>
			}
		}


		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8017ee2:	68f8      	ldr	r0, [r7, #12]
 8017ee4:	f7fc fc41 	bl	801476a <otCoapHeaderGetType>
 8017ee8:	4603      	mov	r3, r0
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d106      	bne.n	8017efc <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	68fa      	ldr	r2, [r7, #12]
 8017ef2:	2100      	movs	r1, #0
 8017ef4:	2000      	movs	r0, #0
 8017ef6:	f000 fabd 	bl	8018474 <APP_THREAD_SendDataResponse>
			break;
 8017efa:	bf00      	nop
		}

	} while (false);
}
 8017efc:	bf00      	nop
 8017efe:	3710      	adds	r7, #16
 8017f00:	46bd      	mov	sp, r7
 8017f02:	bd80      	pop	{r7, pc}
 8017f04:	200289b0 	.word	0x200289b0
 8017f08:	20028088 	.word	0x20028088

08017f0c <APP_THREAD_CoapBorderTimeRequestHandler>:
#endif


// request handler for when receiving a message directed at the border router synchronizing resource
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8017f0c:	b5b0      	push	{r4, r5, r7, lr}
 8017f0e:	b084      	sub	sp, #16
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	60f8      	str	r0, [r7, #12]
 8017f14:	60b9      	str	r1, [r7, #8]
 8017f16:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8017f18:	68b8      	ldr	r0, [r7, #8]
 8017f1a:	f7fd f852 	bl	8014fc2 <otMessageGetOffset>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	4619      	mov	r1, r3
 8017f22:	2318      	movs	r3, #24
 8017f24:	4a1f      	ldr	r2, [pc, #124]	; (8017fa4 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 8017f26:	68b8      	ldr	r0, [r7, #8]
 8017f28:	f7fd f8b0 	bl	801508c <otMessageRead>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	2b18      	cmp	r3, #24
 8017f30:	d11c      	bne.n	8017f6c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
				== sizeof(receivedSystemCal)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8017f32:	68f8      	ldr	r0, [r7, #12]
 8017f34:	f7fc fc47 	bl	80147c6 <otCoapHeaderGetCode>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	2b03      	cmp	r3, #3
 8017f3c:	d005      	beq.n	8017f4a <APP_THREAD_CoapBorderTimeRequestHandler+0x3e>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8017f3e:	68f8      	ldr	r0, [r7, #12]
 8017f40:	f7fc fc41 	bl	80147c6 <otCoapHeaderGetCode>
 8017f44:	4603      	mov	r3, r0
 8017f46:	2b02      	cmp	r3, #2
 8017f48:	d110      	bne.n	8017f6c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>

				memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8017f4a:	4a17      	ldr	r2, [pc, #92]	; (8017fa8 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8017f4c:	4b15      	ldr	r3, [pc, #84]	; (8017fa4 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 8017f4e:	4614      	mov	r4, r2
 8017f50:	461d      	mov	r5, r3
 8017f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017f5a:	e884 0003 	stmia.w	r4, {r0, r1}

				// update the onboard RTC unix time
				updateRTC(borderRouter.epoch);
 8017f5e:	4b12      	ldr	r3, [pc, #72]	; (8017fa8 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8017f60:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8017f64:	4618      	mov	r0, r3
 8017f66:	4621      	mov	r1, r4
 8017f68:	f000 f842 	bl	8017ff0 <updateRTC>
			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 8017f6c:	4a0f      	ldr	r2, [pc, #60]	; (8017fac <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 8017f6e:	68bb      	ldr	r3, [r7, #8]
 8017f70:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8017f72:	68f8      	ldr	r0, [r7, #12]
 8017f74:	f7fc fc27 	bl	80147c6 <otCoapHeaderGetCode>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	2b01      	cmp	r3, #1
 8017f7c:	d00c      	beq.n	8017f98 <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>
			//APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);

			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8017f7e:	68f8      	ldr	r0, [r7, #12]
 8017f80:	f7fc fbf3 	bl	801476a <otCoapHeaderGetType>
 8017f84:	4603      	mov	r3, r0
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d107      	bne.n	8017f9a <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			APP_THREAD_SendDataResponse(NULL, 0 , pHeader, pMessageInfo);
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	68fa      	ldr	r2, [r7, #12]
 8017f8e:	2100      	movs	r1, #0
 8017f90:	2000      	movs	r0, #0
 8017f92:	f000 fa6f 	bl	8018474 <APP_THREAD_SendDataResponse>
			break;
 8017f96:	e000      	b.n	8017f9a <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			break;
 8017f98:	bf00      	nop
		}

	} while (false);
}
 8017f9a:	bf00      	nop
 8017f9c:	3710      	adds	r7, #16
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8017fa2:	bf00      	nop
 8017fa4:	20027838 	.word	0x20027838
 8017fa8:	20027820 	.word	0x20027820
 8017fac:	200289e4 	.word	0x200289e4

08017fb0 <APP_THREAD_CoapNodeInfoRequestHandler>:

// Only get requests allowed for this resource
struct sendIP_struct tempVar = {"test","test",0};
//char test_string[200] = "test";
static void APP_THREAD_CoapNodeInfoRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b084      	sub	sp, #16
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	60f8      	str	r0, [r7, #12]
 8017fb8:	60b9      	str	r1, [r7, #8]
 8017fba:	607a      	str	r2, [r7, #4]
//		}

//		receivedMessage = (otMessageInfo*) pMessage;

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8017fbc:	68f8      	ldr	r0, [r7, #12]
 8017fbe:	f7fc fc02 	bl	80147c6 <otCoapHeaderGetCode>
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	2b01      	cmp	r3, #1
 8017fc6:	d103      	bne.n	8017fd0 <APP_THREAD_CoapNodeInfoRequestHandler+0x20>
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
//			APP_THREAD_SendDataResponse(&msgSendMyIP, sizeof(msgSendMyIP), pHeader, pMessageInfo);
			APP_THREAD_SendMyInfo();
 8017fc8:	f7ff feae 	bl	8017d28 <APP_THREAD_SendMyInfo>

			break;
 8017fcc:	bf00      	nop
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
		}

	} while (false);
}
 8017fce:	e00b      	b.n	8017fe8 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8017fd0:	68f8      	ldr	r0, [r7, #12]
 8017fd2:	f7fc fbca 	bl	801476a <otCoapHeaderGetType>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d105      	bne.n	8017fe8 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	68fa      	ldr	r2, [r7, #12]
 8017fe0:	2100      	movs	r1, #0
 8017fe2:	2000      	movs	r0, #0
 8017fe4:	f000 fa46 	bl	8018474 <APP_THREAD_SendDataResponse>
}
 8017fe8:	bf00      	nop
 8017fea:	3710      	adds	r7, #16
 8017fec:	46bd      	mov	sp, r7
 8017fee:	bd80      	pop	{r7, pc}

08017ff0 <updateRTC>:

void updateRTC(time_t now) {
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b088      	sub	sp, #32
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	e9c7 0100 	strd	r0, r1, [r7]
	RTC_DateTypeDef sDate;

	// https://www.st.com/content/ccc/resource/technical/document/application_note/2a/c2/6f/74/fa/0d/46/3a/CD00015424.pdf/files/CD00015424.pdf/jcr:content/translations/en.CD00015424.pdf
//	struct tm *time_tm;

	RTC_FromEpoch(now, &sTime, &sDate);
 8017ffa:	683b      	ldr	r3, [r7, #0]
 8017ffc:	f107 0208 	add.w	r2, r7, #8
 8018000:	f107 010c 	add.w	r1, r7, #12
 8018004:	4618      	mov	r0, r3
 8018006:	f7ec fcc9 	bl	800499c <RTC_FromEpoch>

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 801800a:	f107 030c 	add.w	r3, r7, #12
 801800e:	2200      	movs	r2, #0
 8018010:	4619      	mov	r1, r3
 8018012:	480a      	ldr	r0, [pc, #40]	; (801803c <updateRTC+0x4c>)
 8018014:	f7f5 f8c9 	bl	800d1aa <HAL_RTC_SetTime>
	}

	/*
	 * update the RTC
	 */
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8018018:	f107 0308 	add.w	r3, r7, #8
 801801c:	2200      	movs	r2, #0
 801801e:	4619      	mov	r1, r3
 8018020:	4806      	ldr	r0, [pc, #24]	; (801803c <updateRTC+0x4c>)
 8018022:	f7f5 f9e2 	bl	800d3ea <HAL_RTC_SetDate>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // lock it in with the backup registers
 8018026:	f243 22f2 	movw	r2, #13042	; 0x32f2
 801802a:	2100      	movs	r1, #0
 801802c:	4803      	ldr	r0, [pc, #12]	; (801803c <updateRTC+0x4c>)
 801802e:	f7f5 fb63 	bl	800d6f8 <HAL_RTCEx_BKUPWrite>
}
 8018032:	bf00      	nop
 8018034:	3720      	adds	r7, #32
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}
 801803a:	bf00      	nop
 801803c:	200287e8 	.word	0x200287e8

08018040 <APP_THREAD_CoapLightsComplexRequestHandler>:

static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8018040:	b580      	push	{r7, lr}
 8018042:	b084      	sub	sp, #16
 8018044:	af00      	add	r7, sp, #0
 8018046:	60f8      	str	r0, [r7, #12]
 8018048:	60b9      	str	r1, [r7, #8]
 801804a:	607a      	str	r2, [r7, #4]
	do {
		//APP_THREAD_SendCoapUnicastRequest();

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex))
 801804c:	68b8      	ldr	r0, [r7, #8]
 801804e:	f7fc ffb8 	bl	8014fc2 <otMessageGetOffset>
 8018052:	4603      	mov	r3, r0
 8018054:	4619      	mov	r1, r3
 8018056:	2312      	movs	r3, #18
 8018058:	4a16      	ldr	r2, [pc, #88]	; (80180b4 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 801805a:	68b8      	ldr	r0, [r7, #8]
 801805c:	f7fd f816 	bl	801508c <otMessageRead>
 8018060:	4603      	mov	r3, r0
 8018062:	2b12      	cmp	r3, #18
 8018064:	d102      	bne.n	801806c <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
				== sizeof(lightMessageComplex)) {
			FrontLightsSet(&lightMessageComplex);
 8018066:	4813      	ldr	r0, [pc, #76]	; (80180b4 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8018068:	f7eb fb94 	bl	8003794 <FrontLightsSet>
		}

		tempMessageInfo = pMessageInfo;
 801806c:	4a12      	ldr	r2, [pc, #72]	; (80180b8 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8018072:	4a12      	ldr	r2, [pc, #72]	; (80180bc <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8018074:	68bb      	ldr	r3, [r7, #8]
 8018076:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE) {
 8018078:	68f8      	ldr	r0, [r7, #12]
 801807a:	f7fc fb76 	bl	801476a <otCoapHeaderGetType>
 801807e:	4603      	mov	r3, r0
 8018080:	2b10      	cmp	r3, #16
 8018082:	d110      	bne.n	80180a6 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
			break;
		}

		if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT) {
 8018084:	68f8      	ldr	r0, [r7, #12]
 8018086:	f7fc fb9e 	bl	80147c6 <otCoapHeaderGetCode>
 801808a:	4603      	mov	r3, r0
 801808c:	2b03      	cmp	r3, #3
 801808e:	d10c      	bne.n	80180aa <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
			break;
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8018090:	68b8      	ldr	r0, [r7, #8]
 8018092:	f7fc ff96 	bl	8014fc2 <otMessageGetOffset>
 8018096:	4603      	mov	r3, r0
 8018098:	4619      	mov	r1, r3
 801809a:	2301      	movs	r3, #1
 801809c:	4a08      	ldr	r2, [pc, #32]	; (80180c0 <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 801809e:	68b8      	ldr	r0, [r7, #8]
 80180a0:	f7fc fff4 	bl	801508c <otMessageRead>
		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}

	} while (false);
}
 80180a4:	e002      	b.n	80180ac <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 80180a6:	bf00      	nop
 80180a8:	e000      	b.n	80180ac <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 80180aa:	bf00      	nop
}
 80180ac:	bf00      	nop
 80180ae:	3710      	adds	r7, #16
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}
 80180b4:	200289bc 	.word	0x200289bc
 80180b8:	200289a8 	.word	0x200289a8
 80180bc:	200289e4 	.word	0x200289e4
 80180c0:	20027819 	.word	0x20027819

080180c4 <APP_THREAD_SendCoapMsg>:
}


static char empty_message[10] = "";
void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 80180c4:	b590      	push	{r4, r7, lr}
 80180c6:	b087      	sub	sp, #28
 80180c8:	af02      	add	r7, sp, #8
 80180ca:	60f8      	str	r0, [r7, #12]
 80180cc:	607a      	str	r2, [r7, #4]
 80180ce:	603b      	str	r3, [r7, #0]
 80180d0:	460b      	mov	r3, r1
 80180d2:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 80180d4:	2000      	movs	r0, #0
 80180d6:	f7fd fd67 	bl	8015ba8 <otThreadGetRloc16>
 80180da:	4603      	mov	r3, r0
 80180dc:	461a      	mov	r2, r3
 80180de:	4b7e      	ldr	r3, [pc, #504]	; (80182d8 <APP_THREAD_SendCoapMsg+0x214>)
 80180e0:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 80180e2:	2000      	movs	r0, #0
 80180e4:	f7fc fe2a 	bl	8014d3c <otIp6GetUnicastAddresses>
 80180e8:	4602      	mov	r2, r0
 80180ea:	4b7c      	ldr	r3, [pc, #496]	; (80182dc <APP_THREAD_SendCoapMsg+0x218>)
 80180ec:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 80180ee:	2000      	movs	r0, #0
 80180f0:	f7fc fdf7 	bl	8014ce2 <otIp6IsEnabled>
 80180f4:	4603      	mov	r3, r0
 80180f6:	461a      	mov	r2, r3
 80180f8:	4b79      	ldr	r3, [pc, #484]	; (80182e0 <APP_THREAD_SendCoapMsg+0x21c>)
 80180fa:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
 80180fc:	2000      	movs	r0, #0
 80180fe:	f7fc fe45 	bl	8014d8c <otIp6GetMulticastAddresses>
 8018102:	4602      	mov	r2, r0
 8018104:	4b77      	ldr	r3, [pc, #476]	; (80182e4 <APP_THREAD_SendCoapMsg+0x220>)
 8018106:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
 8018108:	2000      	movs	r0, #0
 801810a:	f7fd fca5 	bl	8015a58 <otThreadGetMeshLocalEid>
 801810e:	4602      	mov	r2, r0
 8018110:	4b75      	ldr	r3, [pc, #468]	; (80182e8 <APP_THREAD_SendCoapMsg+0x224>)
 8018112:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
 8018114:	2000      	movs	r0, #0
 8018116:	f7fd fcc7 	bl	8015aa8 <otThreadGetLinkLocalIp6Address>
 801811a:	4602      	mov	r2, r0
 801811c:	4b73      	ldr	r3, [pc, #460]	; (80182ec <APP_THREAD_SendCoapMsg+0x228>)
 801811e:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8018120:	222c      	movs	r2, #44	; 0x2c
 8018122:	2100      	movs	r1, #0
 8018124:	4872      	ldr	r0, [pc, #456]	; (80182f0 <APP_THREAD_SendCoapMsg+0x22c>)
 8018126:	f001 ff6c 	bl	801a002 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 801812a:	897b      	ldrh	r3, [r7, #10]
 801812c:	2b64      	cmp	r3, #100	; 0x64
 801812e:	d914      	bls.n	801815a <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8018130:	4b6f      	ldr	r3, [pc, #444]	; (80182f0 <APP_THREAD_SendCoapMsg+0x22c>)
 8018132:	4a70      	ldr	r2, [pc, #448]	; (80182f4 <APP_THREAD_SendCoapMsg+0x230>)
 8018134:	f103 0410 	add.w	r4, r3, #16
 8018138:	4613      	mov	r3, r2
 801813a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801813c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8018140:	2000      	movs	r0, #0
 8018142:	f7fd fc89 	bl	8015a58 <otThreadGetMeshLocalEid>
 8018146:	4602      	mov	r2, r0
 8018148:	4b69      	ldr	r3, [pc, #420]	; (80182f0 <APP_THREAD_SendCoapMsg+0x22c>)
 801814a:	461c      	mov	r4, r3
 801814c:	4613      	mov	r3, r2
 801814e:	6818      	ldr	r0, [r3, #0]
 8018150:	6859      	ldr	r1, [r3, #4]
 8018152:	689a      	ldr	r2, [r3, #8]
 8018154:	68db      	ldr	r3, [r3, #12]
 8018156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018158:	e015      	b.n	8018186 <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 801815a:	4b65      	ldr	r3, [pc, #404]	; (80182f0 <APP_THREAD_SendCoapMsg+0x22c>)
 801815c:	4a66      	ldr	r2, [pc, #408]	; (80182f8 <APP_THREAD_SendCoapMsg+0x234>)
 801815e:	f103 0410 	add.w	r4, r3, #16
 8018162:	4613      	mov	r3, r2
 8018164:	6818      	ldr	r0, [r3, #0]
 8018166:	6859      	ldr	r1, [r3, #4]
 8018168:	689a      	ldr	r2, [r3, #8]
 801816a:	68db      	ldr	r3, [r3, #12]
 801816c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 801816e:	2000      	movs	r0, #0
 8018170:	f7fd fc72 	bl	8015a58 <otThreadGetMeshLocalEid>
 8018174:	4602      	mov	r2, r0
 8018176:	4b5e      	ldr	r3, [pc, #376]	; (80182f0 <APP_THREAD_SendCoapMsg+0x22c>)
 8018178:	461c      	mov	r4, r3
 801817a:	4613      	mov	r3, r2
 801817c:	6818      	ldr	r0, [r3, #0]
 801817e:	6859      	ldr	r1, [r3, #4]
 8018180:	689a      	ldr	r2, [r3, #8]
 8018182:	68db      	ldr	r3, [r3, #12]
 8018184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8018186:	4b5a      	ldr	r3, [pc, #360]	; (80182f0 <APP_THREAD_SendCoapMsg+0x22c>)
 8018188:	2201      	movs	r2, #1
 801818a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 801818e:	4b58      	ldr	r3, [pc, #352]	; (80182f0 <APP_THREAD_SendCoapMsg+0x22c>)
 8018190:	f241 6233 	movw	r2, #5683	; 0x1633
 8018194:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8018196:	4b56      	ldr	r3, [pc, #344]	; (80182f0 <APP_THREAD_SendCoapMsg+0x22c>)
 8018198:	2240      	movs	r2, #64	; 0x40
 801819a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 801819e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d009      	beq.n	80181ba <APP_THREAD_SendCoapMsg+0xf6>
 80181a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80181aa:	2b03      	cmp	r3, #3
 80181ac:	d105      	bne.n	80181ba <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 80181ae:	2203      	movs	r2, #3
 80181b0:	2100      	movs	r1, #0
 80181b2:	4852      	ldr	r0, [pc, #328]	; (80182fc <APP_THREAD_SendCoapMsg+0x238>)
 80181b4:	f7fc f97d 	bl	80144b2 <otCoapHeaderInit>
 80181b8:	e04a      	b.n	8018250 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 80181ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d009      	beq.n	80181d6 <APP_THREAD_SendCoapMsg+0x112>
 80181c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80181c6:	2b01      	cmp	r3, #1
 80181c8:	d105      	bne.n	80181d6 <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 80181ca:	2201      	movs	r2, #1
 80181cc:	2100      	movs	r1, #0
 80181ce:	484b      	ldr	r0, [pc, #300]	; (80182fc <APP_THREAD_SendCoapMsg+0x238>)
 80181d0:	f7fc f96f 	bl	80144b2 <otCoapHeaderInit>
 80181d4:	e03c      	b.n	8018250 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 80181d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d009      	beq.n	80181f2 <APP_THREAD_SendCoapMsg+0x12e>
 80181de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80181e2:	2b02      	cmp	r3, #2
 80181e4:	d105      	bne.n	80181f2 <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 80181e6:	2202      	movs	r2, #2
 80181e8:	2100      	movs	r1, #0
 80181ea:	4844      	ldr	r0, [pc, #272]	; (80182fc <APP_THREAD_SendCoapMsg+0x238>)
 80181ec:	f7fc f961 	bl	80144b2 <otCoapHeaderInit>
 80181f0:	e02e      	b.n	8018250 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 80181f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d109      	bne.n	801820e <APP_THREAD_SendCoapMsg+0x14a>
 80181fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80181fe:	2b03      	cmp	r3, #3
 8018200:	d105      	bne.n	801820e <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8018202:	2203      	movs	r2, #3
 8018204:	2110      	movs	r1, #16
 8018206:	483d      	ldr	r0, [pc, #244]	; (80182fc <APP_THREAD_SendCoapMsg+0x238>)
 8018208:	f7fc f953 	bl	80144b2 <otCoapHeaderInit>
 801820c:	e020      	b.n	8018250 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 801820e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d109      	bne.n	801822a <APP_THREAD_SendCoapMsg+0x166>
 8018216:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801821a:	2b01      	cmp	r3, #1
 801821c:	d105      	bne.n	801822a <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 801821e:	2201      	movs	r2, #1
 8018220:	2110      	movs	r1, #16
 8018222:	4836      	ldr	r0, [pc, #216]	; (80182fc <APP_THREAD_SendCoapMsg+0x238>)
 8018224:	f7fc f945 	bl	80144b2 <otCoapHeaderInit>
 8018228:	e012      	b.n	8018250 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 801822a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d109      	bne.n	8018246 <APP_THREAD_SendCoapMsg+0x182>
 8018232:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018236:	2b02      	cmp	r3, #2
 8018238:	d105      	bne.n	8018246 <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 801823a:	2202      	movs	r2, #2
 801823c:	2110      	movs	r1, #16
 801823e:	482f      	ldr	r0, [pc, #188]	; (80182fc <APP_THREAD_SendCoapMsg+0x238>)
 8018240:	f7fc f937 	bl	80144b2 <otCoapHeaderInit>
 8018244:	e004      	b.n	8018250 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8018246:	2102      	movs	r1, #2
 8018248:	482c      	ldr	r0, [pc, #176]	; (80182fc <APP_THREAD_SendCoapMsg+0x238>)
 801824a:	f7fc f99b 	bl	8014584 <otCoapHeaderGenerateToken>
 801824e:	e040      	b.n	80182d2 <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8018250:	6839      	ldr	r1, [r7, #0]
 8018252:	482a      	ldr	r0, [pc, #168]	; (80182fc <APP_THREAD_SendCoapMsg+0x238>)
 8018254:	f7fc f9f9 	bl	801464a <otCoapHeaderAppendUriPathOptions>
 8018258:	4603      	mov	r3, r0
 801825a:	461a      	mov	r2, r3
 801825c:	4b28      	ldr	r3, [pc, #160]	; (8018300 <APP_THREAD_SendCoapMsg+0x23c>)
 801825e:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8018260:	212a      	movs	r1, #42	; 0x2a
 8018262:	4826      	ldr	r0, [pc, #152]	; (80182fc <APP_THREAD_SendCoapMsg+0x238>)
 8018264:	f7fc f9be 	bl	80145e4 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 8018268:	897b      	ldrh	r3, [r7, #10]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d002      	beq.n	8018274 <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 801826e:	4823      	ldr	r0, [pc, #140]	; (80182fc <APP_THREAD_SendCoapMsg+0x238>)
 8018270:	f7fc fa1d 	bl	80146ae <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018274:	4921      	ldr	r1, [pc, #132]	; (80182fc <APP_THREAD_SendCoapMsg+0x238>)
 8018276:	2000      	movs	r0, #0
 8018278:	f7fc fb5c 	bl	8014934 <otCoapNewMessage>
 801827c:	4602      	mov	r2, r0
 801827e:	4b21      	ldr	r3, [pc, #132]	; (8018304 <APP_THREAD_SendCoapMsg+0x240>)
 8018280:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8018282:	897b      	ldrh	r3, [r7, #10]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d00a      	beq.n	801829e <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8018288:	4b1e      	ldr	r3, [pc, #120]	; (8018304 <APP_THREAD_SendCoapMsg+0x240>)
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	897a      	ldrh	r2, [r7, #10]
 801828e:	68f9      	ldr	r1, [r7, #12]
 8018290:	4618      	mov	r0, r3
 8018292:	f7fc fec4 	bl	801501e <otMessageAppend>
 8018296:	4603      	mov	r3, r0
 8018298:	461a      	mov	r2, r3
 801829a:	4b19      	ldr	r3, [pc, #100]	; (8018300 <APP_THREAD_SendCoapMsg+0x23c>)
 801829c:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 801829e:	4b19      	ldr	r3, [pc, #100]	; (8018304 <APP_THREAD_SendCoapMsg+0x240>)
 80182a0:	6819      	ldr	r1, [r3, #0]
 80182a2:	2300      	movs	r3, #0
 80182a4:	9300      	str	r3, [sp, #0]
 80182a6:	2300      	movs	r3, #0
 80182a8:	4a11      	ldr	r2, [pc, #68]	; (80182f0 <APP_THREAD_SendCoapMsg+0x22c>)
 80182aa:	2000      	movs	r0, #0
 80182ac:	f7fc fb70 	bl	8014990 <otCoapSendRequest>
 80182b0:	4603      	mov	r3, r0
 80182b2:	461a      	mov	r2, r3
 80182b4:	4b12      	ldr	r3, [pc, #72]	; (8018300 <APP_THREAD_SendCoapMsg+0x23c>)
 80182b6:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 80182b8:	4b11      	ldr	r3, [pc, #68]	; (8018300 <APP_THREAD_SendCoapMsg+0x23c>)
 80182ba:	781b      	ldrb	r3, [r3, #0]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d008      	beq.n	80182d2 <APP_THREAD_SendCoapMsg+0x20e>
 80182c0:	4b10      	ldr	r3, [pc, #64]	; (8018304 <APP_THREAD_SendCoapMsg+0x240>)
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d004      	beq.n	80182d2 <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 80182c8:	4b0e      	ldr	r3, [pc, #56]	; (8018304 <APP_THREAD_SendCoapMsg+0x240>)
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	4618      	mov	r0, r3
 80182ce:	f7fc fe4d 	bl	8014f6c <otMessageFree>
		}

	} while (false);
}
 80182d2:	3714      	adds	r7, #20
 80182d4:	46bd      	mov	sp, r7
 80182d6:	bd90      	pop	{r4, r7, pc}
 80182d8:	200289f6 	.word	0x200289f6
 80182dc:	200289f8 	.word	0x200289f8
 80182e0:	200289e0 	.word	0x200289e0
 80182e4:	200289ac 	.word	0x200289ac
 80182e8:	200289f0 	.word	0x200289f0
 80182ec:	200289b8 	.word	0x200289b8
 80182f0:	20027758 	.word	0x20027758
 80182f4:	20027820 	.word	0x20027820
 80182f8:	200289d0 	.word	0x200289d0
 80182fc:	20027784 	.word	0x20027784
 8018300:	20027818 	.word	0x20027818
 8018304:	20027814 	.word	0x20027814

08018308 <APP_THREAD_SendCoapMsgForBorderSync>:

static void APP_THREAD_SendCoapMsgForBorderSync(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8018308:	b590      	push	{r4, r7, lr}
 801830a:	b087      	sub	sp, #28
 801830c:	af02      	add	r7, sp, #8
 801830e:	60f8      	str	r0, [r7, #12]
 8018310:	607a      	str	r2, [r7, #4]
 8018312:	603b      	str	r3, [r7, #0]
 8018314:	460b      	mov	r3, r1
 8018316:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8018318:	222c      	movs	r2, #44	; 0x2c
 801831a:	2100      	movs	r1, #0
 801831c:	484e      	ldr	r0, [pc, #312]	; (8018458 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 801831e:	f001 fe70 	bl	801a002 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed


		memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8018322:	4b4d      	ldr	r3, [pc, #308]	; (8018458 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018324:	4a4d      	ldr	r2, [pc, #308]	; (801845c <APP_THREAD_SendCoapMsgForBorderSync+0x154>)
 8018326:	f103 0410 	add.w	r4, r3, #16
 801832a:	4613      	mov	r3, r2
 801832c:	6818      	ldr	r0, [r3, #0]
 801832e:	6859      	ldr	r1, [r3, #4]
 8018330:	689a      	ldr	r2, [r3, #8]
 8018332:	68db      	ldr	r3, [r3, #12]
 8018334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8018336:	4b48      	ldr	r3, [pc, #288]	; (8018458 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018338:	2201      	movs	r2, #1
 801833a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 801833e:	4b46      	ldr	r3, [pc, #280]	; (8018458 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018340:	f241 6233 	movw	r2, #5683	; 0x1633
 8018344:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8018346:	4b44      	ldr	r3, [pc, #272]	; (8018458 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018348:	2240      	movs	r2, #64	; 0x40
 801834a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 801834e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d009      	beq.n	801836a <APP_THREAD_SendCoapMsgForBorderSync+0x62>
 8018356:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801835a:	2b03      	cmp	r3, #3
 801835c:	d105      	bne.n	801836a <APP_THREAD_SendCoapMsgForBorderSync+0x62>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 801835e:	2203      	movs	r2, #3
 8018360:	2100      	movs	r1, #0
 8018362:	483f      	ldr	r0, [pc, #252]	; (8018460 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018364:	f7fc f8a5 	bl	80144b2 <otCoapHeaderInit>
 8018368:	e04a      	b.n	8018400 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 801836a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d009      	beq.n	8018386 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
 8018372:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018376:	2b01      	cmp	r3, #1
 8018378:	d105      	bne.n	8018386 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 801837a:	2201      	movs	r2, #1
 801837c:	2100      	movs	r1, #0
 801837e:	4838      	ldr	r0, [pc, #224]	; (8018460 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018380:	f7fc f897 	bl	80144b2 <otCoapHeaderInit>
 8018384:	e03c      	b.n	8018400 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8018386:	f897 3020 	ldrb.w	r3, [r7, #32]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d009      	beq.n	80183a2 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
 801838e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018392:	2b02      	cmp	r3, #2
 8018394:	d105      	bne.n	80183a2 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8018396:	2202      	movs	r2, #2
 8018398:	2100      	movs	r1, #0
 801839a:	4831      	ldr	r0, [pc, #196]	; (8018460 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 801839c:	f7fc f889 	bl	80144b2 <otCoapHeaderInit>
 80183a0:	e02e      	b.n	8018400 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 80183a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d109      	bne.n	80183be <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
 80183aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80183ae:	2b03      	cmp	r3, #3
 80183b0:	d105      	bne.n	80183be <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 80183b2:	2203      	movs	r2, #3
 80183b4:	2110      	movs	r1, #16
 80183b6:	482a      	ldr	r0, [pc, #168]	; (8018460 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 80183b8:	f7fc f87b 	bl	80144b2 <otCoapHeaderInit>
 80183bc:	e020      	b.n	8018400 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 80183be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d109      	bne.n	80183da <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
 80183c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80183ca:	2b01      	cmp	r3, #1
 80183cc:	d105      	bne.n	80183da <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 80183ce:	2201      	movs	r2, #1
 80183d0:	2110      	movs	r1, #16
 80183d2:	4823      	ldr	r0, [pc, #140]	; (8018460 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 80183d4:	f7fc f86d 	bl	80144b2 <otCoapHeaderInit>
 80183d8:	e012      	b.n	8018400 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 80183da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d109      	bne.n	80183f6 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
 80183e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80183e6:	2b02      	cmp	r3, #2
 80183e8:	d105      	bne.n	80183f6 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 80183ea:	2202      	movs	r2, #2
 80183ec:	2110      	movs	r1, #16
 80183ee:	481c      	ldr	r0, [pc, #112]	; (8018460 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 80183f0:	f7fc f85f 	bl	80144b2 <otCoapHeaderInit>
 80183f4:	e004      	b.n	8018400 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 80183f6:	2102      	movs	r1, #2
 80183f8:	4819      	ldr	r0, [pc, #100]	; (8018460 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 80183fa:	f7fc f8c3 	bl	8014584 <otCoapHeaderGenerateToken>
 80183fe:	e028      	b.n	8018452 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8018400:	6839      	ldr	r1, [r7, #0]
 8018402:	4817      	ldr	r0, [pc, #92]	; (8018460 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018404:	f7fc f921 	bl	801464a <otCoapHeaderAppendUriPathOptions>
 8018408:	4603      	mov	r3, r0
 801840a:	461a      	mov	r2, r3
 801840c:	4b15      	ldr	r3, [pc, #84]	; (8018464 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 801840e:	701a      	strb	r2, [r3, #0]

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
//		otCoapHeaderSetPayloadMarker(&OT_Header);

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018410:	4913      	ldr	r1, [pc, #76]	; (8018460 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018412:	2000      	movs	r0, #0
 8018414:	f7fc fa8e 	bl	8014934 <otCoapNewMessage>
 8018418:	4602      	mov	r2, r0
 801841a:	4b13      	ldr	r3, [pc, #76]	; (8018468 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 801841c:	601a      	str	r2, [r3, #0]
			 // if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL, pOT_Message, &OT_MessageInfo, &APP_THREAD_DummyRespHandler,
 801841e:	4b12      	ldr	r3, [pc, #72]	; (8018468 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018420:	6819      	ldr	r1, [r3, #0]
 8018422:	4b12      	ldr	r3, [pc, #72]	; (801846c <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8018424:	9300      	str	r3, [sp, #0]
 8018426:	4b12      	ldr	r3, [pc, #72]	; (8018470 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 8018428:	4a0b      	ldr	r2, [pc, #44]	; (8018458 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 801842a:	2000      	movs	r0, #0
 801842c:	f7fc fab0 	bl	8014990 <otCoapSendRequest>
 8018430:	4603      	mov	r3, r0
 8018432:	461a      	mov	r2, r3
 8018434:	4b0b      	ldr	r3, [pc, #44]	; (8018464 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8018436:	701a      	strb	r2, [r3, #0]
				(void*) &APP_THREAD_CoapRespHandler_UpdateBorderRouter);



		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018438:	4b0a      	ldr	r3, [pc, #40]	; (8018464 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 801843a:	781b      	ldrb	r3, [r3, #0]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d008      	beq.n	8018452 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
 8018440:	4b09      	ldr	r3, [pc, #36]	; (8018468 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d004      	beq.n	8018452 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
			otMessageFree(pOT_Message);
 8018448:	4b07      	ldr	r3, [pc, #28]	; (8018468 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	4618      	mov	r0, r3
 801844e:	f7fc fd8d 	bl	8014f6c <otMessageFree>
		}

	} while (false);

}
 8018452:	3714      	adds	r7, #20
 8018454:	46bd      	mov	sp, r7
 8018456:	bd90      	pop	{r4, r7, pc}
 8018458:	20027758 	.word	0x20027758
 801845c:	200289d0 	.word	0x200289d0
 8018460:	20027784 	.word	0x20027784
 8018464:	20027818 	.word	0x20027818
 8018468:	20027814 	.word	0x20027814
 801846c:	08017c49 	.word	0x08017c49
 8018470:	08017c2d 	.word	0x08017c2d

08018474 <APP_THREAD_SendDataResponse>:
request and the Acknowledgement MUST match, and the tokens of the
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(void *message, uint16_t msgSize, otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo) {
 8018474:	b590      	push	{r4, r7, lr}
 8018476:	b087      	sub	sp, #28
 8018478:	af00      	add	r7, sp, #0
 801847a:	60f8      	str	r0, [r7, #12]
 801847c:	607a      	str	r2, [r7, #4]
 801847e:	603b      	str	r3, [r7, #0]
 8018480:	460b      	mov	r3, r1
 8018482:	817b      	strh	r3, [r7, #10]
	otError error = OT_ERROR_NONE;
 8018484:	2300      	movs	r3, #0
 8018486:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8018488:	2244      	movs	r2, #68	; 0x44
 801848a:	2120      	movs	r1, #32
 801848c:	4826      	ldr	r0, [pc, #152]	; (8018528 <APP_THREAD_SendDataResponse+0xb4>)
 801848e:	f7fc f810 	bl	80144b2 <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8018492:	6878      	ldr	r0, [r7, #4]
 8018494:	f7fc f9c5 	bl	8014822 <otCoapHeaderGetMessageId>
 8018498:	4603      	mov	r3, r0
 801849a:	4619      	mov	r1, r3
 801849c:	4822      	ldr	r0, [pc, #136]	; (8018528 <APP_THREAD_SendDataResponse+0xb4>)
 801849e:	f7fc f934 	bl	801470a <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	f7fc fa19 	bl	80148da <otCoapHeaderGetToken>
 80184a8:	4604      	mov	r4, r0
 80184aa:	6878      	ldr	r0, [r7, #4]
 80184ac:	f7fc f9e7 	bl	801487e <otCoapHeaderGetTokenLength>
 80184b0:	4603      	mov	r3, r0
 80184b2:	461a      	mov	r2, r3
 80184b4:	4621      	mov	r1, r4
 80184b6:	481c      	ldr	r0, [pc, #112]	; (8018528 <APP_THREAD_SendDataResponse+0xb4>)
 80184b8:	f7fc f830 	bl	801451c <otCoapHeaderSetToken>

	if (msgSize > 0){
 80184bc:	897b      	ldrh	r3, [r7, #10]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d006      	beq.n	80184d0 <APP_THREAD_SendDataResponse+0x5c>
		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 80184c2:	212a      	movs	r1, #42	; 0x2a
 80184c4:	4818      	ldr	r0, [pc, #96]	; (8018528 <APP_THREAD_SendDataResponse+0xb4>)
 80184c6:	f7fc f88d 	bl	80145e4 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 80184ca:	4817      	ldr	r0, [pc, #92]	; (8018528 <APP_THREAD_SendDataResponse+0xb4>)
 80184cc:	f7fc f8ef 	bl	80146ae <otCoapHeaderSetPayloadMarker>
	}

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80184d0:	4915      	ldr	r1, [pc, #84]	; (8018528 <APP_THREAD_SendDataResponse+0xb4>)
 80184d2:	2000      	movs	r0, #0
 80184d4:	f7fc fa2e 	bl	8014934 <otCoapNewMessage>
 80184d8:	4602      	mov	r2, r0
 80184da:	4b14      	ldr	r3, [pc, #80]	; (801852c <APP_THREAD_SendDataResponse+0xb8>)
 80184dc:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 80184de:	897b      	ldrh	r3, [r7, #10]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d008      	beq.n	80184f6 <APP_THREAD_SendDataResponse+0x82>
		error = otMessageAppend(pOT_Message, message, msgSize);
 80184e4:	4b11      	ldr	r3, [pc, #68]	; (801852c <APP_THREAD_SendDataResponse+0xb8>)
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	897a      	ldrh	r2, [r7, #10]
 80184ea:	68f9      	ldr	r1, [r7, #12]
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7fc fd96 	bl	801501e <otMessageAppend>
 80184f2:	4603      	mov	r3, r0
 80184f4:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 80184f6:	4b0d      	ldr	r3, [pc, #52]	; (801852c <APP_THREAD_SendDataResponse+0xb8>)
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	683a      	ldr	r2, [r7, #0]
 80184fc:	4619      	mov	r1, r3
 80184fe:	2000      	movs	r0, #0
 8018500:	f7fc fadf 	bl	8014ac2 <otCoapSendResponse>
 8018504:	4603      	mov	r3, r0
 8018506:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018508:	7dfb      	ldrb	r3, [r7, #23]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d008      	beq.n	8018520 <APP_THREAD_SendDataResponse+0xac>
 801850e:	4b07      	ldr	r3, [pc, #28]	; (801852c <APP_THREAD_SendDataResponse+0xb8>)
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d004      	beq.n	8018520 <APP_THREAD_SendDataResponse+0xac>
		otMessageFree(pOT_Message);
 8018516:	4b05      	ldr	r3, [pc, #20]	; (801852c <APP_THREAD_SendDataResponse+0xb8>)
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	4618      	mov	r0, r3
 801851c:	f7fc fd26 	bl	8014f6c <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 8018520:	bf00      	nop
 8018522:	371c      	adds	r7, #28
 8018524:	46bd      	mov	sp, r7
 8018526:	bd90      	pop	{r4, r7, pc}
 8018528:	20027784 	.word	0x20027784
 801852c:	20027814 	.word	0x20027814

08018530 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8018530:	b480      	push	{r7}
 8018532:	b083      	sub	sp, #12
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8018538:	4a04      	ldr	r2, [pc, #16]	; (801854c <APP_THREAD_RegisterCmdBuffer+0x1c>)
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	6013      	str	r3, [r2, #0]
}
 801853e:	bf00      	nop
 8018540:	370c      	adds	r7, #12
 8018542:	46bd      	mov	sp, r7
 8018544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018548:	4770      	bx	lr
 801854a:	bf00      	nop
 801854c:	20027740 	.word	0x20027740

08018550 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8018550:	b480      	push	{r7}
 8018552:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8018554:	4b03      	ldr	r3, [pc, #12]	; (8018564 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	330c      	adds	r3, #12
}
 801855a:	4618      	mov	r0, r3
 801855c:	46bd      	mov	sp, r7
 801855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018562:	4770      	bx	lr
 8018564:	20027740 	.word	0x20027740

08018568 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8018568:	b480      	push	{r7}
 801856a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 801856c:	4b03      	ldr	r3, [pc, #12]	; (801857c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	330b      	adds	r3, #11
}
 8018572:	4618      	mov	r0, r3
 8018574:	46bd      	mov	sp, r7
 8018576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857a:	4770      	bx	lr
 801857c:	20027740 	.word	0x20027740

08018580 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8018580:	b480      	push	{r7}
 8018582:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8018584:	4b03      	ldr	r3, [pc, #12]	; (8018594 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	330b      	adds	r3, #11
}
 801858a:	4618      	mov	r0, r3
 801858c:	46bd      	mov	sp, r7
 801858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018592:	4770      	bx	lr
 8018594:	20027744 	.word	0x20027744

08018598 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b082      	sub	sp, #8
 801859c:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 801859e:	4b0f      	ldr	r3, [pc, #60]	; (80185dc <Ot_Cmd_Transfer+0x44>)
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	2200      	movs	r2, #0
 80185a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80185a8:	725a      	strb	r2, [r3, #9]
 80185aa:	2200      	movs	r2, #0
 80185ac:	f042 0202 	orr.w	r2, r2, #2
 80185b0:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 80185b2:	4b0a      	ldr	r3, [pc, #40]	; (80185dc <Ot_Cmd_Transfer+0x44>)
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	330c      	adds	r3, #12
 80185b8:	685b      	ldr	r3, [r3, #4]
 80185ba:	3302      	adds	r3, #2
 80185bc:	009b      	lsls	r3, r3, #2
 80185be:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80185c0:	4b06      	ldr	r3, [pc, #24]	; (80185dc <Ot_Cmd_Transfer+0x44>)
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	687a      	ldr	r2, [r7, #4]
 80185c6:	b2d2      	uxtb	r2, r2
 80185c8:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 80185ca:	f7fd fbff 	bl	8015dcc <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80185ce:	f000 f829 	bl	8018624 <Wait_Getting_Ack_From_M0>
}
 80185d2:	bf00      	nop
 80185d4:	3708      	adds	r7, #8
 80185d6:	46bd      	mov	sp, r7
 80185d8:	bd80      	pop	{r7, pc}
 80185da:	bf00      	nop
 80185dc:	20027740 	.word	0x20027740

080185e0 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b082      	sub	sp, #8
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80185e8:	f000 f82e 	bl	8018648 <Receive_Ack_From_M0>
}
 80185ec:	bf00      	nop
 80185ee:	3708      	adds	r7, #8
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd80      	pop	{r7, pc}

080185f4 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b082      	sub	sp, #8
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80185fc:	4a04      	ldr	r2, [pc, #16]	; (8018610 <TL_THREAD_NotReceived+0x1c>)
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8018602:	f000 f82d 	bl	8018660 <Receive_Notification_From_M0>
}
 8018606:	bf00      	nop
 8018608:	3708      	adds	r7, #8
 801860a:	46bd      	mov	sp, r7
 801860c:	bd80      	pop	{r7, pc}
 801860e:	bf00      	nop
 8018610:	20027744 	.word	0x20027744

08018614 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8018614:	b480      	push	{r7}
 8018616:	af00      	add	r7, sp, #0

}
 8018618:	bf00      	nop
 801861a:	46bd      	mov	sp, r7
 801861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018620:	4770      	bx	lr
	...

08018624 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8018624:	b480      	push	{r7}
 8018626:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8018628:	bf00      	nop
 801862a:	4b06      	ldr	r3, [pc, #24]	; (8018644 <Wait_Getting_Ack_From_M0+0x20>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d0fb      	beq.n	801862a <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8018632:	4b04      	ldr	r3, [pc, #16]	; (8018644 <Wait_Getting_Ack_From_M0+0x20>)
 8018634:	2200      	movs	r2, #0
 8018636:	601a      	str	r2, [r3, #0]
}
 8018638:	bf00      	nop
 801863a:	46bd      	mov	sp, r7
 801863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018640:	4770      	bx	lr
 8018642:	bf00      	nop
 8018644:	2002774c 	.word	0x2002774c

08018648 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8018648:	b480      	push	{r7}
 801864a:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 801864c:	4b03      	ldr	r3, [pc, #12]	; (801865c <Receive_Ack_From_M0+0x14>)
 801864e:	2201      	movs	r2, #1
 8018650:	601a      	str	r2, [r3, #0]
}
 8018652:	bf00      	nop
 8018654:	46bd      	mov	sp, r7
 8018656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865a:	4770      	bx	lr
 801865c:	2002774c 	.word	0x2002774c

08018660 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8018660:	b580      	push	{r7, lr}
 8018662:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8018664:	4b06      	ldr	r3, [pc, #24]	; (8018680 <Receive_Notification_From_M0+0x20>)
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	3301      	adds	r3, #1
 801866a:	4a05      	ldr	r2, [pc, #20]	; (8018680 <Receive_Notification_From_M0+0x20>)
 801866c:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801866e:	4b05      	ldr	r3, [pc, #20]	; (8018684 <Receive_Notification_From_M0+0x24>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	2101      	movs	r1, #1
 8018674:	4618      	mov	r0, r3
 8018676:	f7f7 fc25 	bl	800fec4 <osThreadFlagsSet>
}
 801867a:	bf00      	nop
 801867c:	bd80      	pop	{r7, pc}
 801867e:	bf00      	nop
 8018680:	20027748 	.word	0x20027748
 8018684:	20027750 	.word	0x20027750

08018688 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8018688:	b580      	push	{r7, lr}
 801868a:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 801868c:	22ff      	movs	r2, #255	; 0xff
 801868e:	2100      	movs	r1, #0
 8018690:	4812      	ldr	r0, [pc, #72]	; (80186dc <Send_CLI_To_M0+0x54>)
 8018692:	f001 fcb6 	bl	801a002 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8018696:	4b12      	ldr	r3, [pc, #72]	; (80186e0 <Send_CLI_To_M0+0x58>)
 8018698:	881b      	ldrh	r3, [r3, #0]
 801869a:	b29b      	uxth	r3, r3
 801869c:	461a      	mov	r2, r3
 801869e:	4911      	ldr	r1, [pc, #68]	; (80186e4 <Send_CLI_To_M0+0x5c>)
 80186a0:	480e      	ldr	r0, [pc, #56]	; (80186dc <Send_CLI_To_M0+0x54>)
 80186a2:	f001 fca3 	bl	8019fec <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 80186a6:	4b0e      	ldr	r3, [pc, #56]	; (80186e0 <Send_CLI_To_M0+0x58>)
 80186a8:	881b      	ldrh	r3, [r3, #0]
 80186aa:	b29b      	uxth	r3, r3
 80186ac:	b2da      	uxtb	r2, r3
 80186ae:	4b0e      	ldr	r3, [pc, #56]	; (80186e8 <Send_CLI_To_M0+0x60>)
 80186b0:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 80186b2:	4b0d      	ldr	r3, [pc, #52]	; (80186e8 <Send_CLI_To_M0+0x60>)
 80186b4:	2200      	movs	r2, #0
 80186b6:	725a      	strb	r2, [r3, #9]
 80186b8:	2200      	movs	r2, #0
 80186ba:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 80186bc:	4b0b      	ldr	r3, [pc, #44]	; (80186ec <Send_CLI_To_M0+0x64>)
 80186be:	2200      	movs	r2, #0
 80186c0:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 80186c2:	4b07      	ldr	r3, [pc, #28]	; (80186e0 <Send_CLI_To_M0+0x58>)
 80186c4:	2200      	movs	r2, #0
 80186c6:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 80186c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80186cc:	2100      	movs	r1, #0
 80186ce:	4805      	ldr	r0, [pc, #20]	; (80186e4 <Send_CLI_To_M0+0x5c>)
 80186d0:	f001 fc97 	bl	801a002 <memset>

  TL_CLI_SendCmd();
 80186d4:	f7fd fb88 	bl	8015de8 <TL_CLI_SendCmd>
}
 80186d8:	bf00      	nop
 80186da:	bd80      	pop	{r7, pc}
 80186dc:	20030a5c 	.word	0x20030a5c
 80186e0:	2002773c 	.word	0x2002773c
 80186e4:	2002763c 	.word	0x2002763c
 80186e8:	20030a50 	.word	0x20030a50
 80186ec:	2002773e 	.word	0x2002773e

080186f0 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 80186f4:	f7fd fb94 	bl	8015e20 <TL_THREAD_CliSendAck>
}
 80186f8:	bf00      	nop
 80186fa:	bd80      	pop	{r7, pc}

080186fc <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8018700:	4a04      	ldr	r2, [pc, #16]	; (8018714 <APP_THREAD_Init_UART_CLI+0x18>)
 8018702:	2100      	movs	r1, #0
 8018704:	4804      	ldr	r0, [pc, #16]	; (8018718 <APP_THREAD_Init_UART_CLI+0x1c>)
 8018706:	f7f7 fb37 	bl	800fd78 <osThreadNew>
 801870a:	4602      	mov	r2, r0
 801870c:	4b03      	ldr	r3, [pc, #12]	; (801871c <APP_THREAD_Init_UART_CLI+0x20>)
 801870e:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8018710:	bf00      	nop
 8018712:	bd80      	pop	{r7, pc}
 8018714:	0801bae4 	.word	0x0801bae4
 8018718:	08017bd3 	.word	0x08017bd3
 801871c:	20027754 	.word	0x20027754

08018720 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8018724:	4b06      	ldr	r3, [pc, #24]	; (8018740 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018726:	4a07      	ldr	r2, [pc, #28]	; (8018744 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8018728:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 801872a:	4b05      	ldr	r3, [pc, #20]	; (8018740 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801872c:	4a06      	ldr	r2, [pc, #24]	; (8018748 <APP_THREAD_TL_THREAD_INIT+0x28>)
 801872e:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8018730:	4b03      	ldr	r3, [pc, #12]	; (8018740 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018732:	4a06      	ldr	r2, [pc, #24]	; (801874c <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8018734:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8018736:	4802      	ldr	r0, [pc, #8]	; (8018740 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018738:	f7fd fb2c 	bl	8015d94 <TL_THREAD_Init>
}
 801873c:	bf00      	nop
 801873e:	bd80      	pop	{r7, pc}
 8018740:	200300b8 	.word	0x200300b8
 8018744:	20030838 	.word	0x20030838
 8018748:	20030944 	.word	0x20030944
 801874c:	20030a50 	.word	0x20030a50

08018750 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b084      	sub	sp, #16
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	7adb      	ldrb	r3, [r3, #11]
 8018760:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	330c      	adds	r3, #12
 8018766:	4906      	ldr	r1, [pc, #24]	; (8018780 <TL_THREAD_CliNotReceived+0x30>)
 8018768:	4618      	mov	r0, r3
 801876a:	f7e7 fd09 	bl	8000180 <strcmp>
 801876e:	4603      	mov	r3, r0
 8018770:	2b00      	cmp	r3, #0
 8018772:	d101      	bne.n	8018778 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8018774:	f7ff ffbc 	bl	80186f0 <Send_CLI_Ack_For_OT>
  }
}
 8018778:	bf00      	nop
 801877a:	3710      	adds	r7, #16
 801877c:	46bd      	mov	sp, r7
 801877e:	bd80      	pop	{r7, pc}
 8018780:	0801b640 	.word	0x0801b640

08018784 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8018788:	4b09      	ldr	r3, [pc, #36]	; (80187b0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d00d      	beq.n	80187ac <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8018790:	4b07      	ldr	r3, [pc, #28]	; (80187b0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	2b01      	cmp	r3, #1
 8018796:	d904      	bls.n	80187a2 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8018798:	2100      	movs	r1, #0
 801879a:	2000      	movs	r0, #0
 801879c:	f7fe ffae 	bl	80176fc <APP_THREAD_Error>
 80187a0:	e001      	b.n	80187a6 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 80187a2:	f7fc fcaf 	bl	8015104 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 80187a6:	4b02      	ldr	r3, [pc, #8]	; (80187b0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80187a8:	2200      	movs	r2, #0
 80187aa:	601a      	str	r2, [r3, #0]
  }
}
 80187ac:	bf00      	nop
 80187ae:	bd80      	pop	{r7, pc}
 80187b0:	20027748 	.word	0x20027748

080187b4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80187b4:	b480      	push	{r7}
 80187b6:	b083      	sub	sp, #12
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80187bc:	4b06      	ldr	r3, [pc, #24]	; (80187d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80187be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80187c2:	4905      	ldr	r1, [pc, #20]	; (80187d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	4313      	orrs	r3, r2
 80187c8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80187cc:	bf00      	nop
 80187ce:	370c      	adds	r7, #12
 80187d0:	46bd      	mov	sp, r7
 80187d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187d6:	4770      	bx	lr
 80187d8:	58000800 	.word	0x58000800

080187dc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80187dc:	b480      	push	{r7}
 80187de:	b083      	sub	sp, #12
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80187e4:	4b05      	ldr	r3, [pc, #20]	; (80187fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80187e6:	6a1a      	ldr	r2, [r3, #32]
 80187e8:	4904      	ldr	r1, [pc, #16]	; (80187fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	4313      	orrs	r3, r2
 80187ee:	620b      	str	r3, [r1, #32]
}
 80187f0:	bf00      	nop
 80187f2:	370c      	adds	r7, #12
 80187f4:	46bd      	mov	sp, r7
 80187f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187fa:	4770      	bx	lr
 80187fc:	58000800 	.word	0x58000800

08018800 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8018800:	b480      	push	{r7}
 8018802:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8018804:	4b05      	ldr	r3, [pc, #20]	; (801881c <LL_PWR_EnableBootC2+0x1c>)
 8018806:	68db      	ldr	r3, [r3, #12]
 8018808:	4a04      	ldr	r2, [pc, #16]	; (801881c <LL_PWR_EnableBootC2+0x1c>)
 801880a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801880e:	60d3      	str	r3, [r2, #12]
}
 8018810:	bf00      	nop
 8018812:	46bd      	mov	sp, r7
 8018814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018818:	4770      	bx	lr
 801881a:	bf00      	nop
 801881c:	58000400 	.word	0x58000400

08018820 <LL_AHB3_GRP1_EnableClock>:
{
 8018820:	b480      	push	{r7}
 8018822:	b085      	sub	sp, #20
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8018828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801882c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801882e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	4313      	orrs	r3, r2
 8018836:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8018838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801883c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	4013      	ands	r3, r2
 8018842:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018844:	68fb      	ldr	r3, [r7, #12]
}
 8018846:	bf00      	nop
 8018848:	3714      	adds	r7, #20
 801884a:	46bd      	mov	sp, r7
 801884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018850:	4770      	bx	lr

08018852 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8018852:	b480      	push	{r7}
 8018854:	b083      	sub	sp, #12
 8018856:	af00      	add	r7, sp, #0
 8018858:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	601a      	str	r2, [r3, #0]
}
 8018866:	bf00      	nop
 8018868:	370c      	adds	r7, #12
 801886a:	46bd      	mov	sp, r7
 801886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018870:	4770      	bx	lr

08018872 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8018872:	b480      	push	{r7}
 8018874:	b083      	sub	sp, #12
 8018876:	af00      	add	r7, sp, #0
 8018878:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	f043 0201 	orr.w	r2, r3, #1
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	601a      	str	r2, [r3, #0]
}
 8018886:	bf00      	nop
 8018888:	370c      	adds	r7, #12
 801888a:	46bd      	mov	sp, r7
 801888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018890:	4770      	bx	lr

08018892 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018892:	b480      	push	{r7}
 8018894:	b083      	sub	sp, #12
 8018896:	af00      	add	r7, sp, #0
 8018898:	6078      	str	r0, [r7, #4]
 801889a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	685a      	ldr	r2, [r3, #4]
 80188a0:	683b      	ldr	r3, [r7, #0]
 80188a2:	041b      	lsls	r3, r3, #16
 80188a4:	43db      	mvns	r3, r3
 80188a6:	401a      	ands	r2, r3
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	605a      	str	r2, [r3, #4]
}
 80188ac:	bf00      	nop
 80188ae:	370c      	adds	r7, #12
 80188b0:	46bd      	mov	sp, r7
 80188b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b6:	4770      	bx	lr

080188b8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80188b8:	b480      	push	{r7}
 80188ba:	b083      	sub	sp, #12
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
 80188c0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	685a      	ldr	r2, [r3, #4]
 80188c6:	683b      	ldr	r3, [r7, #0]
 80188c8:	041b      	lsls	r3, r3, #16
 80188ca:	431a      	orrs	r2, r3
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	605a      	str	r2, [r3, #4]
}
 80188d0:	bf00      	nop
 80188d2:	370c      	adds	r7, #12
 80188d4:	46bd      	mov	sp, r7
 80188d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188da:	4770      	bx	lr

080188dc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80188dc:	b480      	push	{r7}
 80188de:	b083      	sub	sp, #12
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
 80188e4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	685a      	ldr	r2, [r3, #4]
 80188ea:	683b      	ldr	r3, [r7, #0]
 80188ec:	43db      	mvns	r3, r3
 80188ee:	401a      	ands	r2, r3
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	605a      	str	r2, [r3, #4]
}
 80188f4:	bf00      	nop
 80188f6:	370c      	adds	r7, #12
 80188f8:	46bd      	mov	sp, r7
 80188fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fe:	4770      	bx	lr

08018900 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018900:	b480      	push	{r7}
 8018902:	b083      	sub	sp, #12
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
 8018908:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	685a      	ldr	r2, [r3, #4]
 801890e:	683b      	ldr	r3, [r7, #0]
 8018910:	431a      	orrs	r2, r3
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	605a      	str	r2, [r3, #4]
}
 8018916:	bf00      	nop
 8018918:	370c      	adds	r7, #12
 801891a:	46bd      	mov	sp, r7
 801891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018920:	4770      	bx	lr

08018922 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018922:	b480      	push	{r7}
 8018924:	b083      	sub	sp, #12
 8018926:	af00      	add	r7, sp, #0
 8018928:	6078      	str	r0, [r7, #4]
 801892a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	683a      	ldr	r2, [r7, #0]
 8018930:	609a      	str	r2, [r3, #8]
}
 8018932:	bf00      	nop
 8018934:	370c      	adds	r7, #12
 8018936:	46bd      	mov	sp, r7
 8018938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893c:	4770      	bx	lr

0801893e <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801893e:	b480      	push	{r7}
 8018940:	b083      	sub	sp, #12
 8018942:	af00      	add	r7, sp, #0
 8018944:	6078      	str	r0, [r7, #4]
 8018946:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8018948:	683b      	ldr	r3, [r7, #0]
 801894a:	041a      	lsls	r2, r3, #16
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	609a      	str	r2, [r3, #8]
}
 8018950:	bf00      	nop
 8018952:	370c      	adds	r7, #12
 8018954:	46bd      	mov	sp, r7
 8018956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895a:	4770      	bx	lr

0801895c <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801895c:	b480      	push	{r7}
 801895e:	b083      	sub	sp, #12
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
 8018964:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	68da      	ldr	r2, [r3, #12]
 801896a:	683b      	ldr	r3, [r7, #0]
 801896c:	4013      	ands	r3, r2
 801896e:	683a      	ldr	r2, [r7, #0]
 8018970:	429a      	cmp	r2, r3
 8018972:	d101      	bne.n	8018978 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8018974:	2301      	movs	r3, #1
 8018976:	e000      	b.n	801897a <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8018978:	2300      	movs	r3, #0
}
 801897a:	4618      	mov	r0, r3
 801897c:	370c      	adds	r7, #12
 801897e:	46bd      	mov	sp, r7
 8018980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018984:	4770      	bx	lr

08018986 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018986:	b480      	push	{r7}
 8018988:	b083      	sub	sp, #12
 801898a:	af00      	add	r7, sp, #0
 801898c:	6078      	str	r0, [r7, #4]
 801898e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	69da      	ldr	r2, [r3, #28]
 8018994:	683b      	ldr	r3, [r7, #0]
 8018996:	4013      	ands	r3, r2
 8018998:	683a      	ldr	r2, [r7, #0]
 801899a:	429a      	cmp	r2, r3
 801899c:	d101      	bne.n	80189a2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 801899e:	2301      	movs	r3, #1
 80189a0:	e000      	b.n	80189a4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80189a2:	2300      	movs	r3, #0
}
 80189a4:	4618      	mov	r0, r3
 80189a6:	370c      	adds	r7, #12
 80189a8:	46bd      	mov	sp, r7
 80189aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ae:	4770      	bx	lr

080189b0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80189b4:	2102      	movs	r1, #2
 80189b6:	482a      	ldr	r0, [pc, #168]	; (8018a60 <HW_IPCC_Rx_Handler+0xb0>)
 80189b8:	f7ff ffe5 	bl	8018986 <LL_C2_IPCC_IsActiveFlag_CHx>
 80189bc:	4603      	mov	r3, r0
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d009      	beq.n	80189d6 <HW_IPCC_Rx_Handler+0x26>
 80189c2:	4b27      	ldr	r3, [pc, #156]	; (8018a60 <HW_IPCC_Rx_Handler+0xb0>)
 80189c4:	685b      	ldr	r3, [r3, #4]
 80189c6:	43db      	mvns	r3, r3
 80189c8:	f003 0302 	and.w	r3, r3, #2
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d002      	beq.n	80189d6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80189d0:	f000 f906 	bl	8018be0 <HW_IPCC_SYS_EvtHandler>
 80189d4:	e041      	b.n	8018a5a <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 80189d6:	2104      	movs	r1, #4
 80189d8:	4821      	ldr	r0, [pc, #132]	; (8018a60 <HW_IPCC_Rx_Handler+0xb0>)
 80189da:	f7ff ffd4 	bl	8018986 <LL_C2_IPCC_IsActiveFlag_CHx>
 80189de:	4603      	mov	r3, r0
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d009      	beq.n	80189f8 <HW_IPCC_Rx_Handler+0x48>
 80189e4:	4b1e      	ldr	r3, [pc, #120]	; (8018a60 <HW_IPCC_Rx_Handler+0xb0>)
 80189e6:	685b      	ldr	r3, [r3, #4]
 80189e8:	43db      	mvns	r3, r3
 80189ea:	f003 0304 	and.w	r3, r3, #4
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d002      	beq.n	80189f8 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 80189f2:	f000 f94f 	bl	8018c94 <HW_IPCC_THREAD_NotEvtHandler>
 80189f6:	e030      	b.n	8018a5a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 80189f8:	2110      	movs	r1, #16
 80189fa:	4819      	ldr	r0, [pc, #100]	; (8018a60 <HW_IPCC_Rx_Handler+0xb0>)
 80189fc:	f7ff ffc3 	bl	8018986 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018a00:	4603      	mov	r3, r0
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d009      	beq.n	8018a1a <HW_IPCC_Rx_Handler+0x6a>
 8018a06:	4b16      	ldr	r3, [pc, #88]	; (8018a60 <HW_IPCC_Rx_Handler+0xb0>)
 8018a08:	685b      	ldr	r3, [r3, #4]
 8018a0a:	43db      	mvns	r3, r3
 8018a0c:	f003 0310 	and.w	r3, r3, #16
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d002      	beq.n	8018a1a <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8018a14:	f000 f94a 	bl	8018cac <HW_IPCC_THREAD_CliNotEvtHandler>
 8018a18:	e01f      	b.n	8018a5a <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8018a1a:	2101      	movs	r1, #1
 8018a1c:	4810      	ldr	r0, [pc, #64]	; (8018a60 <HW_IPCC_Rx_Handler+0xb0>)
 8018a1e:	f7ff ffb2 	bl	8018986 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018a22:	4603      	mov	r3, r0
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d008      	beq.n	8018a3a <HW_IPCC_Rx_Handler+0x8a>
 8018a28:	4b0d      	ldr	r3, [pc, #52]	; (8018a60 <HW_IPCC_Rx_Handler+0xb0>)
 8018a2a:	685b      	ldr	r3, [r3, #4]
 8018a2c:	f003 0301 	and.w	r3, r3, #1
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d102      	bne.n	8018a3a <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8018a34:	f000 f898 	bl	8018b68 <HW_IPCC_BLE_EvtHandler>
 8018a38:	e00f      	b.n	8018a5a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8018a3a:	2108      	movs	r1, #8
 8018a3c:	4808      	ldr	r0, [pc, #32]	; (8018a60 <HW_IPCC_Rx_Handler+0xb0>)
 8018a3e:	f7ff ffa2 	bl	8018986 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018a42:	4603      	mov	r3, r0
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d009      	beq.n	8018a5c <HW_IPCC_Rx_Handler+0xac>
 8018a48:	4b05      	ldr	r3, [pc, #20]	; (8018a60 <HW_IPCC_Rx_Handler+0xb0>)
 8018a4a:	685b      	ldr	r3, [r3, #4]
 8018a4c:	43db      	mvns	r3, r3
 8018a4e:	f003 0308 	and.w	r3, r3, #8
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d002      	beq.n	8018a5c <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8018a56:	f000 f975 	bl	8018d44 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8018a5a:	bf00      	nop
 8018a5c:	bf00      	nop
}
 8018a5e:	bd80      	pop	{r7, pc}
 8018a60:	58000c00 	.word	0x58000c00

08018a64 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8018a68:	2102      	movs	r1, #2
 8018a6a:	482b      	ldr	r0, [pc, #172]	; (8018b18 <HW_IPCC_Tx_Handler+0xb4>)
 8018a6c:	f7ff ff76 	bl	801895c <LL_C1_IPCC_IsActiveFlag_CHx>
 8018a70:	4603      	mov	r3, r0
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d109      	bne.n	8018a8a <HW_IPCC_Tx_Handler+0x26>
 8018a76:	4b28      	ldr	r3, [pc, #160]	; (8018b18 <HW_IPCC_Tx_Handler+0xb4>)
 8018a78:	685b      	ldr	r3, [r3, #4]
 8018a7a:	43db      	mvns	r3, r3
 8018a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d002      	beq.n	8018a8a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8018a84:	f000 f8a0 	bl	8018bc8 <HW_IPCC_SYS_CmdEvtHandler>
 8018a88:	e042      	b.n	8018b10 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8018a8a:	2104      	movs	r1, #4
 8018a8c:	4822      	ldr	r0, [pc, #136]	; (8018b18 <HW_IPCC_Tx_Handler+0xb4>)
 8018a8e:	f7ff ff65 	bl	801895c <LL_C1_IPCC_IsActiveFlag_CHx>
 8018a92:	4603      	mov	r3, r0
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d109      	bne.n	8018aac <HW_IPCC_Tx_Handler+0x48>
 8018a98:	4b1f      	ldr	r3, [pc, #124]	; (8018b18 <HW_IPCC_Tx_Handler+0xb4>)
 8018a9a:	685b      	ldr	r3, [r3, #4]
 8018a9c:	43db      	mvns	r3, r3
 8018a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d002      	beq.n	8018aac <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8018aa6:	f000 f8e9 	bl	8018c7c <HW_IPCC_OT_CmdEvtHandler>
 8018aaa:	e031      	b.n	8018b10 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8018aac:	2102      	movs	r1, #2
 8018aae:	481a      	ldr	r0, [pc, #104]	; (8018b18 <HW_IPCC_Tx_Handler+0xb4>)
 8018ab0:	f7ff ff54 	bl	801895c <LL_C1_IPCC_IsActiveFlag_CHx>
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d109      	bne.n	8018ace <HW_IPCC_Tx_Handler+0x6a>
 8018aba:	4b17      	ldr	r3, [pc, #92]	; (8018b18 <HW_IPCC_Tx_Handler+0xb4>)
 8018abc:	685b      	ldr	r3, [r3, #4]
 8018abe:	43db      	mvns	r3, r3
 8018ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d002      	beq.n	8018ace <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8018ac8:	f000 f87e 	bl	8018bc8 <HW_IPCC_SYS_CmdEvtHandler>
 8018acc:	e020      	b.n	8018b10 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8018ace:	2108      	movs	r1, #8
 8018ad0:	4811      	ldr	r0, [pc, #68]	; (8018b18 <HW_IPCC_Tx_Handler+0xb4>)
 8018ad2:	f7ff ff43 	bl	801895c <LL_C1_IPCC_IsActiveFlag_CHx>
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d109      	bne.n	8018af0 <HW_IPCC_Tx_Handler+0x8c>
 8018adc:	4b0e      	ldr	r3, [pc, #56]	; (8018b18 <HW_IPCC_Tx_Handler+0xb4>)
 8018ade:	685b      	ldr	r3, [r3, #4]
 8018ae0:	43db      	mvns	r3, r3
 8018ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d002      	beq.n	8018af0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8018aea:	f000 f90d 	bl	8018d08 <HW_IPCC_MM_FreeBufHandler>
 8018aee:	e00f      	b.n	8018b10 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8018af0:	2120      	movs	r1, #32
 8018af2:	4809      	ldr	r0, [pc, #36]	; (8018b18 <HW_IPCC_Tx_Handler+0xb4>)
 8018af4:	f7ff ff32 	bl	801895c <LL_C1_IPCC_IsActiveFlag_CHx>
 8018af8:	4603      	mov	r3, r0
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d109      	bne.n	8018b12 <HW_IPCC_Tx_Handler+0xae>
 8018afe:	4b06      	ldr	r3, [pc, #24]	; (8018b18 <HW_IPCC_Tx_Handler+0xb4>)
 8018b00:	685b      	ldr	r3, [r3, #4]
 8018b02:	43db      	mvns	r3, r3
 8018b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d002      	beq.n	8018b12 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8018b0c:	f000 f838 	bl	8018b80 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8018b10:	bf00      	nop
 8018b12:	bf00      	nop
}
 8018b14:	bd80      	pop	{r7, pc}
 8018b16:	bf00      	nop
 8018b18:	58000c00 	.word	0x58000c00

08018b1c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8018b20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018b24:	f7ff fe46 	bl	80187b4 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8018b28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018b2c:	f7ff fe56 	bl	80187dc <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8018b30:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8018b32:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8018b34:	f7ff fe64 	bl	8018800 <LL_PWR_EnableBootC2>

  return;
 8018b38:	bf00      	nop
}
 8018b3a:	bd80      	pop	{r7, pc}

08018b3c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8018b40:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8018b44:	f7ff fe6c 	bl	8018820 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8018b48:	4806      	ldr	r0, [pc, #24]	; (8018b64 <HW_IPCC_Init+0x28>)
 8018b4a:	f7ff fe92 	bl	8018872 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8018b4e:	4805      	ldr	r0, [pc, #20]	; (8018b64 <HW_IPCC_Init+0x28>)
 8018b50:	f7ff fe7f 	bl	8018852 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8018b54:	202c      	movs	r0, #44	; 0x2c
 8018b56:	f7ee ff8e 	bl	8007a76 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8018b5a:	202d      	movs	r0, #45	; 0x2d
 8018b5c:	f7ee ff8b 	bl	8007a76 <HAL_NVIC_EnableIRQ>

  return;
 8018b60:	bf00      	nop
}
 8018b62:	bd80      	pop	{r7, pc}
 8018b64:	58000c00 	.word	0x58000c00

08018b68 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8018b6c:	f7fd f882 	bl	8015c74 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8018b70:	2101      	movs	r1, #1
 8018b72:	4802      	ldr	r0, [pc, #8]	; (8018b7c <HW_IPCC_BLE_EvtHandler+0x14>)
 8018b74:	f7ff fed5 	bl	8018922 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018b78:	bf00      	nop
}
 8018b7a:	bd80      	pop	{r7, pc}
 8018b7c:	58000c00 	.word	0x58000c00

08018b80 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8018b84:	2120      	movs	r1, #32
 8018b86:	4803      	ldr	r0, [pc, #12]	; (8018b94 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8018b88:	f7ff fe96 	bl	80188b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8018b8c:	f7fd f88e 	bl	8015cac <HW_IPCC_BLE_AclDataAckNot>

  return;
 8018b90:	bf00      	nop
}
 8018b92:	bd80      	pop	{r7, pc}
 8018b94:	58000c00 	.word	0x58000c00

08018b98 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8018b9c:	2102      	movs	r1, #2
 8018b9e:	4802      	ldr	r0, [pc, #8]	; (8018ba8 <HW_IPCC_SYS_Init+0x10>)
 8018ba0:	f7ff fe9c 	bl	80188dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018ba4:	bf00      	nop
}
 8018ba6:	bd80      	pop	{r7, pc}
 8018ba8:	58000c00 	.word	0x58000c00

08018bac <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018bb0:	2102      	movs	r1, #2
 8018bb2:	4804      	ldr	r0, [pc, #16]	; (8018bc4 <HW_IPCC_SYS_SendCmd+0x18>)
 8018bb4:	f7ff fec3 	bl	801893e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018bb8:	2102      	movs	r1, #2
 8018bba:	4802      	ldr	r0, [pc, #8]	; (8018bc4 <HW_IPCC_SYS_SendCmd+0x18>)
 8018bbc:	f7ff fe69 	bl	8018892 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8018bc0:	bf00      	nop
}
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	58000c00 	.word	0x58000c00

08018bc8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018bcc:	2102      	movs	r1, #2
 8018bce:	4803      	ldr	r0, [pc, #12]	; (8018bdc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8018bd0:	f7ff fe72 	bl	80188b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8018bd4:	f7fd f8b2 	bl	8015d3c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8018bd8:	bf00      	nop
}
 8018bda:	bd80      	pop	{r7, pc}
 8018bdc:	58000c00 	.word	0x58000c00

08018be0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8018be4:	f7fd f8ba 	bl	8015d5c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8018be8:	2102      	movs	r1, #2
 8018bea:	4802      	ldr	r0, [pc, #8]	; (8018bf4 <HW_IPCC_SYS_EvtHandler+0x14>)
 8018bec:	f7ff fe99 	bl	8018922 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018bf0:	bf00      	nop
}
 8018bf2:	bd80      	pop	{r7, pc}
 8018bf4:	58000c00 	.word	0x58000c00

08018bf8 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8018bfc:	2104      	movs	r1, #4
 8018bfe:	4804      	ldr	r0, [pc, #16]	; (8018c10 <HW_IPCC_THREAD_Init+0x18>)
 8018c00:	f7ff fe6c 	bl	80188dc <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8018c04:	2110      	movs	r1, #16
 8018c06:	4802      	ldr	r0, [pc, #8]	; (8018c10 <HW_IPCC_THREAD_Init+0x18>)
 8018c08:	f7ff fe68 	bl	80188dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018c0c:	bf00      	nop
}
 8018c0e:	bd80      	pop	{r7, pc}
 8018c10:	58000c00 	.word	0x58000c00

08018c14 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8018c18:	2104      	movs	r1, #4
 8018c1a:	4804      	ldr	r0, [pc, #16]	; (8018c2c <HW_IPCC_OT_SendCmd+0x18>)
 8018c1c:	f7ff fe8f 	bl	801893e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8018c20:	2104      	movs	r1, #4
 8018c22:	4802      	ldr	r0, [pc, #8]	; (8018c2c <HW_IPCC_OT_SendCmd+0x18>)
 8018c24:	f7ff fe35 	bl	8018892 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8018c28:	bf00      	nop
}
 8018c2a:	bd80      	pop	{r7, pc}
 8018c2c:	58000c00 	.word	0x58000c00

08018c30 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8018c34:	2110      	movs	r1, #16
 8018c36:	4802      	ldr	r0, [pc, #8]	; (8018c40 <HW_IPCC_CLI_SendCmd+0x10>)
 8018c38:	f7ff fe81 	bl	801893e <LL_C1_IPCC_SetFlag_CHx>

  return;
 8018c3c:	bf00      	nop
}
 8018c3e:	bd80      	pop	{r7, pc}
 8018c40:	58000c00 	.word	0x58000c00

08018c44 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8018c48:	2104      	movs	r1, #4
 8018c4a:	4804      	ldr	r0, [pc, #16]	; (8018c5c <HW_IPCC_THREAD_SendAck+0x18>)
 8018c4c:	f7ff fe69 	bl	8018922 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8018c50:	2104      	movs	r1, #4
 8018c52:	4802      	ldr	r0, [pc, #8]	; (8018c5c <HW_IPCC_THREAD_SendAck+0x18>)
 8018c54:	f7ff fe42 	bl	80188dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018c58:	bf00      	nop
}
 8018c5a:	bd80      	pop	{r7, pc}
 8018c5c:	58000c00 	.word	0x58000c00

08018c60 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8018c64:	2110      	movs	r1, #16
 8018c66:	4804      	ldr	r0, [pc, #16]	; (8018c78 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8018c68:	f7ff fe5b 	bl	8018922 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8018c6c:	2110      	movs	r1, #16
 8018c6e:	4802      	ldr	r0, [pc, #8]	; (8018c78 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8018c70:	f7ff fe34 	bl	80188dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018c74:	bf00      	nop
}
 8018c76:	bd80      	pop	{r7, pc}
 8018c78:	58000c00 	.word	0x58000c00

08018c7c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8018c80:	2104      	movs	r1, #4
 8018c82:	4803      	ldr	r0, [pc, #12]	; (8018c90 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8018c84:	f7ff fe18 	bl	80188b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8018c88:	f7fd f8d8 	bl	8015e3c <HW_IPCC_OT_CmdEvtNot>

  return;
 8018c8c:	bf00      	nop
}
 8018c8e:	bd80      	pop	{r7, pc}
 8018c90:	58000c00 	.word	0x58000c00

08018c94 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8018c98:	2104      	movs	r1, #4
 8018c9a:	4803      	ldr	r0, [pc, #12]	; (8018ca8 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8018c9c:	f7ff fe30 	bl	8018900 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8018ca0:	f7fd f8d8 	bl	8015e54 <HW_IPCC_THREAD_EvtNot>

  return;
 8018ca4:	bf00      	nop
}
 8018ca6:	bd80      	pop	{r7, pc}
 8018ca8:	58000c00 	.word	0x58000c00

08018cac <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8018cb0:	2110      	movs	r1, #16
 8018cb2:	4803      	ldr	r0, [pc, #12]	; (8018cc0 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8018cb4:	f7ff fe24 	bl	8018900 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8018cb8:	f7fd f8d8 	bl	8015e6c <HW_IPCC_THREAD_CliEvtNot>

  return;
 8018cbc:	bf00      	nop
}
 8018cbe:	bd80      	pop	{r7, pc}
 8018cc0:	58000c00 	.word	0x58000c00

08018cc4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b082      	sub	sp, #8
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8018ccc:	2108      	movs	r1, #8
 8018cce:	480c      	ldr	r0, [pc, #48]	; (8018d00 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018cd0:	f7ff fe44 	bl	801895c <LL_C1_IPCC_IsActiveFlag_CHx>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d007      	beq.n	8018cea <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8018cda:	4a0a      	ldr	r2, [pc, #40]	; (8018d04 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018ce0:	2108      	movs	r1, #8
 8018ce2:	4807      	ldr	r0, [pc, #28]	; (8018d00 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018ce4:	f7ff fdd5 	bl	8018892 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8018ce8:	e006      	b.n	8018cf8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018cee:	2108      	movs	r1, #8
 8018cf0:	4803      	ldr	r0, [pc, #12]	; (8018d00 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018cf2:	f7ff fe24 	bl	801893e <LL_C1_IPCC_SetFlag_CHx>
  return;
 8018cf6:	bf00      	nop
}
 8018cf8:	3708      	adds	r7, #8
 8018cfa:	46bd      	mov	sp, r7
 8018cfc:	bd80      	pop	{r7, pc}
 8018cfe:	bf00      	nop
 8018d00:	58000c00 	.word	0x58000c00
 8018d04:	20027850 	.word	0x20027850

08018d08 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018d0c:	2108      	movs	r1, #8
 8018d0e:	4806      	ldr	r0, [pc, #24]	; (8018d28 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8018d10:	f7ff fdd2 	bl	80188b8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8018d14:	4b05      	ldr	r3, [pc, #20]	; (8018d2c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018d1a:	2108      	movs	r1, #8
 8018d1c:	4802      	ldr	r0, [pc, #8]	; (8018d28 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8018d1e:	f7ff fe0e 	bl	801893e <LL_C1_IPCC_SetFlag_CHx>

  return;
 8018d22:	bf00      	nop
}
 8018d24:	bd80      	pop	{r7, pc}
 8018d26:	bf00      	nop
 8018d28:	58000c00 	.word	0x58000c00
 8018d2c:	20027850 	.word	0x20027850

08018d30 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8018d30:	b580      	push	{r7, lr}
 8018d32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8018d34:	2108      	movs	r1, #8
 8018d36:	4802      	ldr	r0, [pc, #8]	; (8018d40 <HW_IPCC_TRACES_Init+0x10>)
 8018d38:	f7ff fdd0 	bl	80188dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018d3c:	bf00      	nop
}
 8018d3e:	bd80      	pop	{r7, pc}
 8018d40:	58000c00 	.word	0x58000c00

08018d44 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8018d48:	f7fd f91e 	bl	8015f88 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8018d4c:	2108      	movs	r1, #8
 8018d4e:	4802      	ldr	r0, [pc, #8]	; (8018d58 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8018d50:	f7ff fde7 	bl	8018922 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018d54:	bf00      	nop
}
 8018d56:	bd80      	pop	{r7, pc}
 8018d58:	58000c00 	.word	0x58000c00

08018d5c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8018d60:	2200      	movs	r2, #0
 8018d62:	4912      	ldr	r1, [pc, #72]	; (8018dac <MX_USB_Device_Init+0x50>)
 8018d64:	4812      	ldr	r0, [pc, #72]	; (8018db0 <MX_USB_Device_Init+0x54>)
 8018d66:	f7fd fbcc 	bl	8016502 <USBD_Init>
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d001      	beq.n	8018d74 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8018d70:	f7ea fec4 	bl	8003afc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8018d74:	490f      	ldr	r1, [pc, #60]	; (8018db4 <MX_USB_Device_Init+0x58>)
 8018d76:	480e      	ldr	r0, [pc, #56]	; (8018db0 <MX_USB_Device_Init+0x54>)
 8018d78:	f7fd fbee 	bl	8016558 <USBD_RegisterClass>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d001      	beq.n	8018d86 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8018d82:	f7ea febb 	bl	8003afc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8018d86:	490c      	ldr	r1, [pc, #48]	; (8018db8 <MX_USB_Device_Init+0x5c>)
 8018d88:	4809      	ldr	r0, [pc, #36]	; (8018db0 <MX_USB_Device_Init+0x54>)
 8018d8a:	f7fd fb4b 	bl	8016424 <USBD_CDC_RegisterInterface>
 8018d8e:	4603      	mov	r3, r0
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d001      	beq.n	8018d98 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8018d94:	f7ea feb2 	bl	8003afc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8018d98:	4805      	ldr	r0, [pc, #20]	; (8018db0 <MX_USB_Device_Init+0x54>)
 8018d9a:	f7fd fbf7 	bl	801658c <USBD_Start>
 8018d9e:	4603      	mov	r3, r0
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d001      	beq.n	8018da8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8018da4:	f7ea feaa 	bl	8003afc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8018da8:	bf00      	nop
 8018daa:	bd80      	pop	{r7, pc}
 8018dac:	2000021c 	.word	0x2000021c
 8018db0:	200289fc 	.word	0x200289fc
 8018db4:	20000094 	.word	0x20000094
 8018db8:	2000020c 	.word	0x2000020c

08018dbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	4905      	ldr	r1, [pc, #20]	; (8018dd8 <CDC_Init_FS+0x1c>)
 8018dc4:	4805      	ldr	r0, [pc, #20]	; (8018ddc <CDC_Init_FS+0x20>)
 8018dc6:	f7fd fb44 	bl	8016452 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018dca:	4905      	ldr	r1, [pc, #20]	; (8018de0 <CDC_Init_FS+0x24>)
 8018dcc:	4803      	ldr	r0, [pc, #12]	; (8018ddc <CDC_Init_FS+0x20>)
 8018dce:	f7fd fb5a 	bl	8016486 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018dd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	bd80      	pop	{r7, pc}
 8018dd8:	200294c0 	.word	0x200294c0
 8018ddc:	200289fc 	.word	0x200289fc
 8018de0:	20028cc0 	.word	0x20028cc0

08018de4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018de4:	b480      	push	{r7}
 8018de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018de8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018dea:	4618      	mov	r0, r3
 8018dec:	46bd      	mov	sp, r7
 8018dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df2:	4770      	bx	lr

08018df4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018df4:	b480      	push	{r7}
 8018df6:	b083      	sub	sp, #12
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	6039      	str	r1, [r7, #0]
 8018dfe:	71fb      	strb	r3, [r7, #7]
 8018e00:	4613      	mov	r3, r2
 8018e02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018e04:	79fb      	ldrb	r3, [r7, #7]
 8018e06:	2b23      	cmp	r3, #35	; 0x23
 8018e08:	d84a      	bhi.n	8018ea0 <CDC_Control_FS+0xac>
 8018e0a:	a201      	add	r2, pc, #4	; (adr r2, 8018e10 <CDC_Control_FS+0x1c>)
 8018e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e10:	08018ea1 	.word	0x08018ea1
 8018e14:	08018ea1 	.word	0x08018ea1
 8018e18:	08018ea1 	.word	0x08018ea1
 8018e1c:	08018ea1 	.word	0x08018ea1
 8018e20:	08018ea1 	.word	0x08018ea1
 8018e24:	08018ea1 	.word	0x08018ea1
 8018e28:	08018ea1 	.word	0x08018ea1
 8018e2c:	08018ea1 	.word	0x08018ea1
 8018e30:	08018ea1 	.word	0x08018ea1
 8018e34:	08018ea1 	.word	0x08018ea1
 8018e38:	08018ea1 	.word	0x08018ea1
 8018e3c:	08018ea1 	.word	0x08018ea1
 8018e40:	08018ea1 	.word	0x08018ea1
 8018e44:	08018ea1 	.word	0x08018ea1
 8018e48:	08018ea1 	.word	0x08018ea1
 8018e4c:	08018ea1 	.word	0x08018ea1
 8018e50:	08018ea1 	.word	0x08018ea1
 8018e54:	08018ea1 	.word	0x08018ea1
 8018e58:	08018ea1 	.word	0x08018ea1
 8018e5c:	08018ea1 	.word	0x08018ea1
 8018e60:	08018ea1 	.word	0x08018ea1
 8018e64:	08018ea1 	.word	0x08018ea1
 8018e68:	08018ea1 	.word	0x08018ea1
 8018e6c:	08018ea1 	.word	0x08018ea1
 8018e70:	08018ea1 	.word	0x08018ea1
 8018e74:	08018ea1 	.word	0x08018ea1
 8018e78:	08018ea1 	.word	0x08018ea1
 8018e7c:	08018ea1 	.word	0x08018ea1
 8018e80:	08018ea1 	.word	0x08018ea1
 8018e84:	08018ea1 	.word	0x08018ea1
 8018e88:	08018ea1 	.word	0x08018ea1
 8018e8c:	08018ea1 	.word	0x08018ea1
 8018e90:	08018ea1 	.word	0x08018ea1
 8018e94:	08018ea1 	.word	0x08018ea1
 8018e98:	08018ea1 	.word	0x08018ea1
 8018e9c:	08018ea1 	.word	0x08018ea1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018ea0:	bf00      	nop
  }

  return (USBD_OK);
 8018ea2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	370c      	adds	r7, #12
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eae:	4770      	bx	lr

08018eb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	b082      	sub	sp, #8
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
 8018eb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if(*Len == 6){
 8018eba:	683b      	ldr	r3, [r7, #0]
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	2b06      	cmp	r3, #6
 8018ec0:	d133      	bne.n	8018f2a <CDC_Receive_FS+0x7a>
	  receivedMsgPacket.len = 6;
 8018ec2:	4b2a      	ldr	r3, [pc, #168]	; (8018f6c <CDC_Receive_FS+0xbc>)
 8018ec4:	2206      	movs	r2, #6
 8018ec6:	701a      	strb	r2, [r3, #0]

	  receivedMsgPacket.buf[0] = Buf[0] - '0';
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	781b      	ldrb	r3, [r3, #0]
 8018ecc:	3b30      	subs	r3, #48	; 0x30
 8018ece:	b2da      	uxtb	r2, r3
 8018ed0:	4b26      	ldr	r3, [pc, #152]	; (8018f6c <CDC_Receive_FS+0xbc>)
 8018ed2:	705a      	strb	r2, [r3, #1]
	  receivedMsgPacket.buf[1] = Buf[1] - '0';
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	3301      	adds	r3, #1
 8018ed8:	781b      	ldrb	r3, [r3, #0]
 8018eda:	3b30      	subs	r3, #48	; 0x30
 8018edc:	b2da      	uxtb	r2, r3
 8018ede:	4b23      	ldr	r3, [pc, #140]	; (8018f6c <CDC_Receive_FS+0xbc>)
 8018ee0:	709a      	strb	r2, [r3, #2]
	  receivedMsgPacket.buf[2] = Buf[2] - '0';
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	3302      	adds	r3, #2
 8018ee6:	781b      	ldrb	r3, [r3, #0]
 8018ee8:	3b30      	subs	r3, #48	; 0x30
 8018eea:	b2da      	uxtb	r2, r3
 8018eec:	4b1f      	ldr	r3, [pc, #124]	; (8018f6c <CDC_Receive_FS+0xbc>)
 8018eee:	70da      	strb	r2, [r3, #3]
	  receivedMsgPacket.buf[3] = Buf[3] - '0';
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	3303      	adds	r3, #3
 8018ef4:	781b      	ldrb	r3, [r3, #0]
 8018ef6:	3b30      	subs	r3, #48	; 0x30
 8018ef8:	b2da      	uxtb	r2, r3
 8018efa:	4b1c      	ldr	r3, [pc, #112]	; (8018f6c <CDC_Receive_FS+0xbc>)
 8018efc:	711a      	strb	r2, [r3, #4]
	  receivedMsgPacket.buf[4] = Buf[4] - '0';
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	3304      	adds	r3, #4
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	3b30      	subs	r3, #48	; 0x30
 8018f06:	b2da      	uxtb	r2, r3
 8018f08:	4b18      	ldr	r3, [pc, #96]	; (8018f6c <CDC_Receive_FS+0xbc>)
 8018f0a:	715a      	strb	r2, [r3, #5]
	  receivedMsgPacket.buf[5]  = Buf[5] - '0';
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	3305      	adds	r3, #5
 8018f10:	781b      	ldrb	r3, [r3, #0]
 8018f12:	3b30      	subs	r3, #48	; 0x30
 8018f14:	b2da      	uxtb	r2, r3
 8018f16:	4b15      	ldr	r3, [pc, #84]	; (8018f6c <CDC_Receive_FS+0xbc>)
 8018f18:	719a      	strb	r2, [r3, #6]

	  osMessageQueuePut(msgPasssingUSB_QueueHandle, &receivedMsgPacket, 0, 0);
 8018f1a:	4b15      	ldr	r3, [pc, #84]	; (8018f70 <CDC_Receive_FS+0xc0>)
 8018f1c:	6818      	ldr	r0, [r3, #0]
 8018f1e:	2300      	movs	r3, #0
 8018f20:	2200      	movs	r2, #0
 8018f22:	4912      	ldr	r1, [pc, #72]	; (8018f6c <CDC_Receive_FS+0xbc>)
 8018f24:	f7f7 fd90 	bl	8010a48 <osMessageQueuePut>
 8018f28:	e013      	b.n	8018f52 <CDC_Receive_FS+0xa2>

//	  APP_THREAD_SendCoapMsg(&logReceivedMessage, sizeof(struct LogMessage), &multicastAddr, "togLog", NO_ACK, OT_COAP_CODE_PUT, 1U);
  }
  else if(*Len == 4){
 8018f2a:	683b      	ldr	r3, [r7, #0]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	2b04      	cmp	r3, #4
 8018f30:	d10f      	bne.n	8018f52 <CDC_Receive_FS+0xa2>
	  receivedMsgPacket.len = 1;
 8018f32:	4b0e      	ldr	r3, [pc, #56]	; (8018f6c <CDC_Receive_FS+0xbc>)
 8018f34:	2201      	movs	r2, #1
 8018f36:	701a      	strb	r2, [r3, #0]

	  receivedMsgPacket.buf[0] = Buf[0] - '0';
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	781b      	ldrb	r3, [r3, #0]
 8018f3c:	3b30      	subs	r3, #48	; 0x30
 8018f3e:	b2da      	uxtb	r2, r3
 8018f40:	4b0a      	ldr	r3, [pc, #40]	; (8018f6c <CDC_Receive_FS+0xbc>)
 8018f42:	705a      	strb	r2, [r3, #1]

	  osMessageQueuePut(msgPasssingUSB_QueueHandle, &receivedMsgPacket, 0, 0);
 8018f44:	4b0a      	ldr	r3, [pc, #40]	; (8018f70 <CDC_Receive_FS+0xc0>)
 8018f46:	6818      	ldr	r0, [r3, #0]
 8018f48:	2300      	movs	r3, #0
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	4907      	ldr	r1, [pc, #28]	; (8018f6c <CDC_Receive_FS+0xbc>)
 8018f4e:	f7f7 fd7b 	bl	8010a48 <osMessageQueuePut>

//	  APP_THREAD_SendCoapMsg(&lightsSimpleReceivedMessage, sizeof(lightsSimpleReceivedMessage), &multicastAddr, "lightS", NO_ACK, OT_COAP_CODE_PUT, 1U);
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018f52:	6879      	ldr	r1, [r7, #4]
 8018f54:	4807      	ldr	r0, [pc, #28]	; (8018f74 <CDC_Receive_FS+0xc4>)
 8018f56:	f7fd fa96 	bl	8016486 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018f5a:	4806      	ldr	r0, [pc, #24]	; (8018f74 <CDC_Receive_FS+0xc4>)
 8018f5c:	f7fd faa7 	bl	80164ae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018f60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3708      	adds	r7, #8
 8018f66:	46bd      	mov	sp, r7
 8018f68:	bd80      	pop	{r7, pc}
 8018f6a:	bf00      	nop
 8018f6c:	20029cc0 	.word	0x20029cc0
 8018f70:	20027c4c 	.word	0x20027c4c
 8018f74:	200289fc 	.word	0x200289fc

08018f78 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018f78:	b480      	push	{r7}
 8018f7a:	b083      	sub	sp, #12
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	4603      	mov	r3, r0
 8018f80:	6039      	str	r1, [r7, #0]
 8018f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8018f84:	683b      	ldr	r3, [r7, #0]
 8018f86:	2212      	movs	r2, #18
 8018f88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8018f8a:	4b03      	ldr	r3, [pc, #12]	; (8018f98 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8018f8c:	4618      	mov	r0, r3
 8018f8e:	370c      	adds	r7, #12
 8018f90:	46bd      	mov	sp, r7
 8018f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f96:	4770      	bx	lr
 8018f98:	2000023c 	.word	0x2000023c

08018f9c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018f9c:	b480      	push	{r7}
 8018f9e:	b083      	sub	sp, #12
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	6039      	str	r1, [r7, #0]
 8018fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018fa8:	683b      	ldr	r3, [r7, #0]
 8018faa:	2204      	movs	r2, #4
 8018fac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018fae:	4b03      	ldr	r3, [pc, #12]	; (8018fbc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018fb0:	4618      	mov	r0, r3
 8018fb2:	370c      	adds	r7, #12
 8018fb4:	46bd      	mov	sp, r7
 8018fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fba:	4770      	bx	lr
 8018fbc:	20000250 	.word	0x20000250

08018fc0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b082      	sub	sp, #8
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	6039      	str	r1, [r7, #0]
 8018fca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018fcc:	79fb      	ldrb	r3, [r7, #7]
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d105      	bne.n	8018fde <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018fd2:	683a      	ldr	r2, [r7, #0]
 8018fd4:	4907      	ldr	r1, [pc, #28]	; (8018ff4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018fd6:	4808      	ldr	r0, [pc, #32]	; (8018ff8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018fd8:	f7fe fa88 	bl	80174ec <USBD_GetString>
 8018fdc:	e004      	b.n	8018fe8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018fde:	683a      	ldr	r2, [r7, #0]
 8018fe0:	4904      	ldr	r1, [pc, #16]	; (8018ff4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018fe2:	4805      	ldr	r0, [pc, #20]	; (8018ff8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018fe4:	f7fe fa82 	bl	80174ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8018fe8:	4b02      	ldr	r3, [pc, #8]	; (8018ff4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8018fea:	4618      	mov	r0, r3
 8018fec:	3708      	adds	r7, #8
 8018fee:	46bd      	mov	sp, r7
 8018ff0:	bd80      	pop	{r7, pc}
 8018ff2:	bf00      	nop
 8018ff4:	20029ccc 	.word	0x20029ccc
 8018ff8:	0801b644 	.word	0x0801b644

08018ffc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	b082      	sub	sp, #8
 8019000:	af00      	add	r7, sp, #0
 8019002:	4603      	mov	r3, r0
 8019004:	6039      	str	r1, [r7, #0]
 8019006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019008:	683a      	ldr	r2, [r7, #0]
 801900a:	4904      	ldr	r1, [pc, #16]	; (801901c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801900c:	4804      	ldr	r0, [pc, #16]	; (8019020 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801900e:	f7fe fa6d 	bl	80174ec <USBD_GetString>
  return USBD_StrDesc;
 8019012:	4b02      	ldr	r3, [pc, #8]	; (801901c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8019014:	4618      	mov	r0, r3
 8019016:	3708      	adds	r7, #8
 8019018:	46bd      	mov	sp, r7
 801901a:	bd80      	pop	{r7, pc}
 801901c:	20029ccc 	.word	0x20029ccc
 8019020:	0801b65c 	.word	0x0801b65c

08019024 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
 801902a:	4603      	mov	r3, r0
 801902c:	6039      	str	r1, [r7, #0]
 801902e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019030:	683b      	ldr	r3, [r7, #0]
 8019032:	221a      	movs	r2, #26
 8019034:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019036:	f000 f843 	bl	80190c0 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801903a:	4b02      	ldr	r3, [pc, #8]	; (8019044 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801903c:	4618      	mov	r0, r3
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}
 8019044:	20000254 	.word	0x20000254

08019048 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b082      	sub	sp, #8
 801904c:	af00      	add	r7, sp, #0
 801904e:	4603      	mov	r3, r0
 8019050:	6039      	str	r1, [r7, #0]
 8019052:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019054:	79fb      	ldrb	r3, [r7, #7]
 8019056:	2b00      	cmp	r3, #0
 8019058:	d105      	bne.n	8019066 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801905a:	683a      	ldr	r2, [r7, #0]
 801905c:	4907      	ldr	r1, [pc, #28]	; (801907c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801905e:	4808      	ldr	r0, [pc, #32]	; (8019080 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019060:	f7fe fa44 	bl	80174ec <USBD_GetString>
 8019064:	e004      	b.n	8019070 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8019066:	683a      	ldr	r2, [r7, #0]
 8019068:	4904      	ldr	r1, [pc, #16]	; (801907c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801906a:	4805      	ldr	r0, [pc, #20]	; (8019080 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801906c:	f7fe fa3e 	bl	80174ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8019070:	4b02      	ldr	r3, [pc, #8]	; (801907c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8019072:	4618      	mov	r0, r3
 8019074:	3708      	adds	r7, #8
 8019076:	46bd      	mov	sp, r7
 8019078:	bd80      	pop	{r7, pc}
 801907a:	bf00      	nop
 801907c:	20029ccc 	.word	0x20029ccc
 8019080:	0801b670 	.word	0x0801b670

08019084 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b082      	sub	sp, #8
 8019088:	af00      	add	r7, sp, #0
 801908a:	4603      	mov	r3, r0
 801908c:	6039      	str	r1, [r7, #0]
 801908e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019090:	79fb      	ldrb	r3, [r7, #7]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d105      	bne.n	80190a2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8019096:	683a      	ldr	r2, [r7, #0]
 8019098:	4907      	ldr	r1, [pc, #28]	; (80190b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801909a:	4808      	ldr	r0, [pc, #32]	; (80190bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801909c:	f7fe fa26 	bl	80174ec <USBD_GetString>
 80190a0:	e004      	b.n	80190ac <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80190a2:	683a      	ldr	r2, [r7, #0]
 80190a4:	4904      	ldr	r1, [pc, #16]	; (80190b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80190a6:	4805      	ldr	r0, [pc, #20]	; (80190bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80190a8:	f7fe fa20 	bl	80174ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80190ac:	4b02      	ldr	r3, [pc, #8]	; (80190b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80190ae:	4618      	mov	r0, r3
 80190b0:	3708      	adds	r7, #8
 80190b2:	46bd      	mov	sp, r7
 80190b4:	bd80      	pop	{r7, pc}
 80190b6:	bf00      	nop
 80190b8:	20029ccc 	.word	0x20029ccc
 80190bc:	0801b67c 	.word	0x0801b67c

080190c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80190c0:	b580      	push	{r7, lr}
 80190c2:	b084      	sub	sp, #16
 80190c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80190c6:	4b0f      	ldr	r3, [pc, #60]	; (8019104 <Get_SerialNum+0x44>)
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80190cc:	4b0e      	ldr	r3, [pc, #56]	; (8019108 <Get_SerialNum+0x48>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80190d2:	4b0e      	ldr	r3, [pc, #56]	; (801910c <Get_SerialNum+0x4c>)
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80190d8:	68fa      	ldr	r2, [r7, #12]
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	4413      	add	r3, r2
 80190de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d009      	beq.n	80190fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80190e6:	2208      	movs	r2, #8
 80190e8:	4909      	ldr	r1, [pc, #36]	; (8019110 <Get_SerialNum+0x50>)
 80190ea:	68f8      	ldr	r0, [r7, #12]
 80190ec:	f000 f814 	bl	8019118 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80190f0:	2204      	movs	r2, #4
 80190f2:	4908      	ldr	r1, [pc, #32]	; (8019114 <Get_SerialNum+0x54>)
 80190f4:	68b8      	ldr	r0, [r7, #8]
 80190f6:	f000 f80f 	bl	8019118 <IntToUnicode>
  }
}
 80190fa:	bf00      	nop
 80190fc:	3710      	adds	r7, #16
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}
 8019102:	bf00      	nop
 8019104:	1fff7590 	.word	0x1fff7590
 8019108:	1fff7594 	.word	0x1fff7594
 801910c:	1fff7598 	.word	0x1fff7598
 8019110:	20000256 	.word	0x20000256
 8019114:	20000266 	.word	0x20000266

08019118 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019118:	b480      	push	{r7}
 801911a:	b087      	sub	sp, #28
 801911c:	af00      	add	r7, sp, #0
 801911e:	60f8      	str	r0, [r7, #12]
 8019120:	60b9      	str	r1, [r7, #8]
 8019122:	4613      	mov	r3, r2
 8019124:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019126:	2300      	movs	r3, #0
 8019128:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801912a:	2300      	movs	r3, #0
 801912c:	75fb      	strb	r3, [r7, #23]
 801912e:	e027      	b.n	8019180 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	0f1b      	lsrs	r3, r3, #28
 8019134:	2b09      	cmp	r3, #9
 8019136:	d80b      	bhi.n	8019150 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	0f1b      	lsrs	r3, r3, #28
 801913c:	b2da      	uxtb	r2, r3
 801913e:	7dfb      	ldrb	r3, [r7, #23]
 8019140:	005b      	lsls	r3, r3, #1
 8019142:	4619      	mov	r1, r3
 8019144:	68bb      	ldr	r3, [r7, #8]
 8019146:	440b      	add	r3, r1
 8019148:	3230      	adds	r2, #48	; 0x30
 801914a:	b2d2      	uxtb	r2, r2
 801914c:	701a      	strb	r2, [r3, #0]
 801914e:	e00a      	b.n	8019166 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	0f1b      	lsrs	r3, r3, #28
 8019154:	b2da      	uxtb	r2, r3
 8019156:	7dfb      	ldrb	r3, [r7, #23]
 8019158:	005b      	lsls	r3, r3, #1
 801915a:	4619      	mov	r1, r3
 801915c:	68bb      	ldr	r3, [r7, #8]
 801915e:	440b      	add	r3, r1
 8019160:	3237      	adds	r2, #55	; 0x37
 8019162:	b2d2      	uxtb	r2, r2
 8019164:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	011b      	lsls	r3, r3, #4
 801916a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801916c:	7dfb      	ldrb	r3, [r7, #23]
 801916e:	005b      	lsls	r3, r3, #1
 8019170:	3301      	adds	r3, #1
 8019172:	68ba      	ldr	r2, [r7, #8]
 8019174:	4413      	add	r3, r2
 8019176:	2200      	movs	r2, #0
 8019178:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801917a:	7dfb      	ldrb	r3, [r7, #23]
 801917c:	3301      	adds	r3, #1
 801917e:	75fb      	strb	r3, [r7, #23]
 8019180:	7dfa      	ldrb	r2, [r7, #23]
 8019182:	79fb      	ldrb	r3, [r7, #7]
 8019184:	429a      	cmp	r2, r3
 8019186:	d3d3      	bcc.n	8019130 <IntToUnicode+0x18>
  }
}
 8019188:	bf00      	nop
 801918a:	371c      	adds	r7, #28
 801918c:	46bd      	mov	sp, r7
 801918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019192:	4770      	bx	lr

08019194 <LL_AHB2_GRP1_EnableClock>:
{
 8019194:	b480      	push	{r7}
 8019196:	b085      	sub	sp, #20
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801919c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80191a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80191a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	4313      	orrs	r3, r2
 80191aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80191ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80191b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	4013      	ands	r3, r2
 80191b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80191b8:	68fb      	ldr	r3, [r7, #12]
}
 80191ba:	bf00      	nop
 80191bc:	3714      	adds	r7, #20
 80191be:	46bd      	mov	sp, r7
 80191c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c4:	4770      	bx	lr

080191c6 <LL_APB1_GRP1_EnableClock>:
{
 80191c6:	b480      	push	{r7}
 80191c8:	b085      	sub	sp, #20
 80191ca:	af00      	add	r7, sp, #0
 80191cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80191ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80191d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80191d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	4313      	orrs	r3, r2
 80191dc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80191de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80191e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	4013      	ands	r3, r2
 80191e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80191ea:	68fb      	ldr	r3, [r7, #12]
}
 80191ec:	bf00      	nop
 80191ee:	3714      	adds	r7, #20
 80191f0:	46bd      	mov	sp, r7
 80191f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f6:	4770      	bx	lr

080191f8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b088      	sub	sp, #32
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019200:	f107 030c 	add.w	r3, r7, #12
 8019204:	2200      	movs	r2, #0
 8019206:	601a      	str	r2, [r3, #0]
 8019208:	605a      	str	r2, [r3, #4]
 801920a:	609a      	str	r2, [r3, #8]
 801920c:	60da      	str	r2, [r3, #12]
 801920e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	4a13      	ldr	r2, [pc, #76]	; (8019264 <HAL_PCD_MspInit+0x6c>)
 8019216:	4293      	cmp	r3, r2
 8019218:	d120      	bne.n	801925c <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801921a:	2001      	movs	r0, #1
 801921c:	f7ff ffba 	bl	8019194 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019220:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019224:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019226:	2302      	movs	r3, #2
 8019228:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801922a:	2300      	movs	r3, #0
 801922c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801922e:	2300      	movs	r3, #0
 8019230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8019232:	230a      	movs	r3, #10
 8019234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019236:	f107 030c 	add.w	r3, r7, #12
 801923a:	4619      	mov	r1, r3
 801923c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019240:	f7ee ff86 	bl	8008150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8019244:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8019248:	f7ff ffbd 	bl	80191c6 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801924c:	2200      	movs	r2, #0
 801924e:	2105      	movs	r1, #5
 8019250:	2014      	movs	r0, #20
 8019252:	f7ee fbf6 	bl	8007a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8019256:	2014      	movs	r0, #20
 8019258:	f7ee fc0d 	bl	8007a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801925c:	bf00      	nop
 801925e:	3720      	adds	r7, #32
 8019260:	46bd      	mov	sp, r7
 8019262:	bd80      	pop	{r7, pc}
 8019264:	40006800 	.word	0x40006800

08019268 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b082      	sub	sp, #8
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	f503 730c 	add.w	r3, r3, #560	; 0x230
 801927c:	4619      	mov	r1, r3
 801927e:	4610      	mov	r0, r2
 8019280:	f7fd f9e3 	bl	801664a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8019284:	bf00      	nop
 8019286:	3708      	adds	r7, #8
 8019288:	46bd      	mov	sp, r7
 801928a:	bd80      	pop	{r7, pc}

0801928c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b082      	sub	sp, #8
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
 8019294:	460b      	mov	r3, r1
 8019296:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 801929e:	78fb      	ldrb	r3, [r7, #3]
 80192a0:	687a      	ldr	r2, [r7, #4]
 80192a2:	015b      	lsls	r3, r3, #5
 80192a4:	4413      	add	r3, r2
 80192a6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80192aa:	681a      	ldr	r2, [r3, #0]
 80192ac:	78fb      	ldrb	r3, [r7, #3]
 80192ae:	4619      	mov	r1, r3
 80192b0:	f7fd fa16 	bl	80166e0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80192b4:	bf00      	nop
 80192b6:	3708      	adds	r7, #8
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}

080192bc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	b082      	sub	sp, #8
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	6078      	str	r0, [r7, #4]
 80192c4:	460b      	mov	r3, r1
 80192c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80192ce:	78fb      	ldrb	r3, [r7, #3]
 80192d0:	687a      	ldr	r2, [r7, #4]
 80192d2:	015b      	lsls	r3, r3, #5
 80192d4:	4413      	add	r3, r2
 80192d6:	333c      	adds	r3, #60	; 0x3c
 80192d8:	681a      	ldr	r2, [r3, #0]
 80192da:	78fb      	ldrb	r3, [r7, #3]
 80192dc:	4619      	mov	r1, r3
 80192de:	f7fd fa70 	bl	80167c2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80192e2:	bf00      	nop
 80192e4:	3708      	adds	r7, #8
 80192e6:	46bd      	mov	sp, r7
 80192e8:	bd80      	pop	{r7, pc}

080192ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80192ea:	b580      	push	{r7, lr}
 80192ec:	b082      	sub	sp, #8
 80192ee:	af00      	add	r7, sp, #0
 80192f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80192f8:	4618      	mov	r0, r3
 80192fa:	f7fd fb83 	bl	8016a04 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80192fe:	bf00      	nop
 8019300:	3708      	adds	r7, #8
 8019302:	46bd      	mov	sp, r7
 8019304:	bd80      	pop	{r7, pc}

08019306 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8019306:	b580      	push	{r7, lr}
 8019308:	b084      	sub	sp, #16
 801930a:	af00      	add	r7, sp, #0
 801930c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801930e:	2301      	movs	r3, #1
 8019310:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	689b      	ldr	r3, [r3, #8]
 8019316:	2b02      	cmp	r3, #2
 8019318:	d001      	beq.n	801931e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801931a:	f7ea fbef 	bl	8003afc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019324:	7bfa      	ldrb	r2, [r7, #15]
 8019326:	4611      	mov	r1, r2
 8019328:	4618      	mov	r0, r3
 801932a:	f7fd fb30 	bl	801698e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019334:	4618      	mov	r0, r3
 8019336:	f7fd fae9 	bl	801690c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801933a:	bf00      	nop
 801933c:	3710      	adds	r7, #16
 801933e:	46bd      	mov	sp, r7
 8019340:	bd80      	pop	{r7, pc}
	...

08019344 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019344:	b580      	push	{r7, lr}
 8019346:	b082      	sub	sp, #8
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019352:	4618      	mov	r0, r3
 8019354:	f7fd fb2b 	bl	80169ae <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	699b      	ldr	r3, [r3, #24]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d005      	beq.n	801936c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019360:	4b04      	ldr	r3, [pc, #16]	; (8019374 <HAL_PCD_SuspendCallback+0x30>)
 8019362:	691b      	ldr	r3, [r3, #16]
 8019364:	4a03      	ldr	r2, [pc, #12]	; (8019374 <HAL_PCD_SuspendCallback+0x30>)
 8019366:	f043 0306 	orr.w	r3, r3, #6
 801936a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801936c:	bf00      	nop
 801936e:	3708      	adds	r7, #8
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}
 8019374:	e000ed00 	.word	0xe000ed00

08019378 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b082      	sub	sp, #8
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	699b      	ldr	r3, [r3, #24]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d007      	beq.n	8019398 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019388:	4b08      	ldr	r3, [pc, #32]	; (80193ac <HAL_PCD_ResumeCallback+0x34>)
 801938a:	691b      	ldr	r3, [r3, #16]
 801938c:	4a07      	ldr	r2, [pc, #28]	; (80193ac <HAL_PCD_ResumeCallback+0x34>)
 801938e:	f023 0306 	bic.w	r3, r3, #6
 8019392:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019394:	f000 fa14 	bl	80197c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801939e:	4618      	mov	r0, r3
 80193a0:	f7fd fb1a 	bl	80169d8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80193a4:	bf00      	nop
 80193a6:	3708      	adds	r7, #8
 80193a8:	46bd      	mov	sp, r7
 80193aa:	bd80      	pop	{r7, pc}
 80193ac:	e000ed00 	.word	0xe000ed00

080193b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b082      	sub	sp, #8
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80193b8:	4a2c      	ldr	r2, [pc, #176]	; (801946c <USBD_LL_Init+0xbc>)
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	4a2a      	ldr	r2, [pc, #168]	; (801946c <USBD_LL_Init+0xbc>)
 80193c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80193c8:	f7f2 f830 	bl	800b42c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80193cc:	4b27      	ldr	r3, [pc, #156]	; (801946c <USBD_LL_Init+0xbc>)
 80193ce:	4a28      	ldr	r2, [pc, #160]	; (8019470 <USBD_LL_Init+0xc0>)
 80193d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80193d2:	4b26      	ldr	r3, [pc, #152]	; (801946c <USBD_LL_Init+0xbc>)
 80193d4:	2208      	movs	r2, #8
 80193d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80193d8:	4b24      	ldr	r3, [pc, #144]	; (801946c <USBD_LL_Init+0xbc>)
 80193da:	2202      	movs	r2, #2
 80193dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80193de:	4b23      	ldr	r3, [pc, #140]	; (801946c <USBD_LL_Init+0xbc>)
 80193e0:	2202      	movs	r2, #2
 80193e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80193e4:	4b21      	ldr	r3, [pc, #132]	; (801946c <USBD_LL_Init+0xbc>)
 80193e6:	2200      	movs	r2, #0
 80193e8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80193ea:	4b20      	ldr	r3, [pc, #128]	; (801946c <USBD_LL_Init+0xbc>)
 80193ec:	2200      	movs	r2, #0
 80193ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80193f0:	4b1e      	ldr	r3, [pc, #120]	; (801946c <USBD_LL_Init+0xbc>)
 80193f2:	2200      	movs	r2, #0
 80193f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80193f6:	4b1d      	ldr	r3, [pc, #116]	; (801946c <USBD_LL_Init+0xbc>)
 80193f8:	2200      	movs	r2, #0
 80193fa:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80193fc:	481b      	ldr	r0, [pc, #108]	; (801946c <USBD_LL_Init+0xbc>)
 80193fe:	f7f1 f8b8 	bl	800a572 <HAL_PCD_Init>
 8019402:	4603      	mov	r3, r0
 8019404:	2b00      	cmp	r3, #0
 8019406:	d001      	beq.n	801940c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8019408:	f7ea fb78 	bl	8003afc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019412:	2318      	movs	r3, #24
 8019414:	2200      	movs	r2, #0
 8019416:	2100      	movs	r1, #0
 8019418:	f7f1 ff82 	bl	800b320 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019422:	2358      	movs	r3, #88	; 0x58
 8019424:	2200      	movs	r2, #0
 8019426:	2180      	movs	r1, #128	; 0x80
 8019428:	f7f1 ff7a 	bl	800b320 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019432:	23c0      	movs	r3, #192	; 0xc0
 8019434:	2200      	movs	r2, #0
 8019436:	2181      	movs	r1, #129	; 0x81
 8019438:	f7f1 ff72 	bl	800b320 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019442:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019446:	2200      	movs	r2, #0
 8019448:	2101      	movs	r1, #1
 801944a:	f7f1 ff69 	bl	800b320 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019458:	2200      	movs	r2, #0
 801945a:	2182      	movs	r1, #130	; 0x82
 801945c:	f7f1 ff60 	bl	800b320 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8019460:	2300      	movs	r3, #0
}
 8019462:	4618      	mov	r0, r3
 8019464:	3708      	adds	r7, #8
 8019466:	46bd      	mov	sp, r7
 8019468:	bd80      	pop	{r7, pc}
 801946a:	bf00      	nop
 801946c:	20029ecc 	.word	0x20029ecc
 8019470:	40006800 	.word	0x40006800

08019474 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b084      	sub	sp, #16
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801947c:	2300      	movs	r3, #0
 801947e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019480:	2300      	movs	r3, #0
 8019482:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801948a:	4618      	mov	r0, r3
 801948c:	f7f1 f92c 	bl	800a6e8 <HAL_PCD_Start>
 8019490:	4603      	mov	r3, r0
 8019492:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019494:	7bfb      	ldrb	r3, [r7, #15]
 8019496:	4618      	mov	r0, r3
 8019498:	f000 f998 	bl	80197cc <USBD_Get_USB_Status>
 801949c:	4603      	mov	r3, r0
 801949e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80194a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80194a2:	4618      	mov	r0, r3
 80194a4:	3710      	adds	r7, #16
 80194a6:	46bd      	mov	sp, r7
 80194a8:	bd80      	pop	{r7, pc}

080194aa <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80194aa:	b580      	push	{r7, lr}
 80194ac:	b084      	sub	sp, #16
 80194ae:	af00      	add	r7, sp, #0
 80194b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80194b2:	2300      	movs	r3, #0
 80194b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194b6:	2300      	movs	r3, #0
 80194b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80194c0:	4618      	mov	r0, r3
 80194c2:	f7f1 f933 	bl	800a72c <HAL_PCD_Stop>
 80194c6:	4603      	mov	r3, r0
 80194c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80194ca:	7bfb      	ldrb	r3, [r7, #15]
 80194cc:	4618      	mov	r0, r3
 80194ce:	f000 f97d 	bl	80197cc <USBD_Get_USB_Status>
 80194d2:	4603      	mov	r3, r0
 80194d4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80194d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80194d8:	4618      	mov	r0, r3
 80194da:	3710      	adds	r7, #16
 80194dc:	46bd      	mov	sp, r7
 80194de:	bd80      	pop	{r7, pc}

080194e0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80194e0:	b580      	push	{r7, lr}
 80194e2:	b084      	sub	sp, #16
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	6078      	str	r0, [r7, #4]
 80194e8:	4608      	mov	r0, r1
 80194ea:	4611      	mov	r1, r2
 80194ec:	461a      	mov	r2, r3
 80194ee:	4603      	mov	r3, r0
 80194f0:	70fb      	strb	r3, [r7, #3]
 80194f2:	460b      	mov	r3, r1
 80194f4:	70bb      	strb	r3, [r7, #2]
 80194f6:	4613      	mov	r3, r2
 80194f8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80194fa:	2300      	movs	r3, #0
 80194fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194fe:	2300      	movs	r3, #0
 8019500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019508:	78bb      	ldrb	r3, [r7, #2]
 801950a:	883a      	ldrh	r2, [r7, #0]
 801950c:	78f9      	ldrb	r1, [r7, #3]
 801950e:	f7f1 faad 	bl	800aa6c <HAL_PCD_EP_Open>
 8019512:	4603      	mov	r3, r0
 8019514:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019516:	7bfb      	ldrb	r3, [r7, #15]
 8019518:	4618      	mov	r0, r3
 801951a:	f000 f957 	bl	80197cc <USBD_Get_USB_Status>
 801951e:	4603      	mov	r3, r0
 8019520:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8019522:	7bbb      	ldrb	r3, [r7, #14]
}
 8019524:	4618      	mov	r0, r3
 8019526:	3710      	adds	r7, #16
 8019528:	46bd      	mov	sp, r7
 801952a:	bd80      	pop	{r7, pc}

0801952c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801952c:	b580      	push	{r7, lr}
 801952e:	b084      	sub	sp, #16
 8019530:	af00      	add	r7, sp, #0
 8019532:	6078      	str	r0, [r7, #4]
 8019534:	460b      	mov	r3, r1
 8019536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019538:	2300      	movs	r3, #0
 801953a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801953c:	2300      	movs	r3, #0
 801953e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019546:	78fa      	ldrb	r2, [r7, #3]
 8019548:	4611      	mov	r1, r2
 801954a:	4618      	mov	r0, r3
 801954c:	f7f1 faee 	bl	800ab2c <HAL_PCD_EP_Close>
 8019550:	4603      	mov	r3, r0
 8019552:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019554:	7bfb      	ldrb	r3, [r7, #15]
 8019556:	4618      	mov	r0, r3
 8019558:	f000 f938 	bl	80197cc <USBD_Get_USB_Status>
 801955c:	4603      	mov	r3, r0
 801955e:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8019560:	7bbb      	ldrb	r3, [r7, #14]
}
 8019562:	4618      	mov	r0, r3
 8019564:	3710      	adds	r7, #16
 8019566:	46bd      	mov	sp, r7
 8019568:	bd80      	pop	{r7, pc}

0801956a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801956a:	b580      	push	{r7, lr}
 801956c:	b084      	sub	sp, #16
 801956e:	af00      	add	r7, sp, #0
 8019570:	6078      	str	r0, [r7, #4]
 8019572:	460b      	mov	r3, r1
 8019574:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019576:	2300      	movs	r3, #0
 8019578:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801957a:	2300      	movs	r3, #0
 801957c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019584:	78fa      	ldrb	r2, [r7, #3]
 8019586:	4611      	mov	r1, r2
 8019588:	4618      	mov	r0, r3
 801958a:	f7f1 fb99 	bl	800acc0 <HAL_PCD_EP_SetStall>
 801958e:	4603      	mov	r3, r0
 8019590:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019592:	7bfb      	ldrb	r3, [r7, #15]
 8019594:	4618      	mov	r0, r3
 8019596:	f000 f919 	bl	80197cc <USBD_Get_USB_Status>
 801959a:	4603      	mov	r3, r0
 801959c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801959e:	7bbb      	ldrb	r3, [r7, #14]
}
 80195a0:	4618      	mov	r0, r3
 80195a2:	3710      	adds	r7, #16
 80195a4:	46bd      	mov	sp, r7
 80195a6:	bd80      	pop	{r7, pc}

080195a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b084      	sub	sp, #16
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	6078      	str	r0, [r7, #4]
 80195b0:	460b      	mov	r3, r1
 80195b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80195b4:	2300      	movs	r3, #0
 80195b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80195b8:	2300      	movs	r3, #0
 80195ba:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80195c2:	78fa      	ldrb	r2, [r7, #3]
 80195c4:	4611      	mov	r1, r2
 80195c6:	4618      	mov	r0, r3
 80195c8:	f7f1 fbd4 	bl	800ad74 <HAL_PCD_EP_ClrStall>
 80195cc:	4603      	mov	r3, r0
 80195ce:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80195d0:	7bfb      	ldrb	r3, [r7, #15]
 80195d2:	4618      	mov	r0, r3
 80195d4:	f000 f8fa 	bl	80197cc <USBD_Get_USB_Status>
 80195d8:	4603      	mov	r3, r0
 80195da:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80195dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80195de:	4618      	mov	r0, r3
 80195e0:	3710      	adds	r7, #16
 80195e2:	46bd      	mov	sp, r7
 80195e4:	bd80      	pop	{r7, pc}

080195e6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80195e6:	b480      	push	{r7}
 80195e8:	b085      	sub	sp, #20
 80195ea:	af00      	add	r7, sp, #0
 80195ec:	6078      	str	r0, [r7, #4]
 80195ee:	460b      	mov	r3, r1
 80195f0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80195f8:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80195fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	da08      	bge.n	8019614 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8019602:	78fb      	ldrb	r3, [r7, #3]
 8019604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019608:	68fa      	ldr	r2, [r7, #12]
 801960a:	015b      	lsls	r3, r3, #5
 801960c:	4413      	add	r3, r2
 801960e:	332a      	adds	r3, #42	; 0x2a
 8019610:	781b      	ldrb	r3, [r3, #0]
 8019612:	e008      	b.n	8019626 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8019614:	78fb      	ldrb	r3, [r7, #3]
 8019616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801961a:	68fa      	ldr	r2, [r7, #12]
 801961c:	015b      	lsls	r3, r3, #5
 801961e:	4413      	add	r3, r2
 8019620:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8019624:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019626:	4618      	mov	r0, r3
 8019628:	3714      	adds	r7, #20
 801962a:	46bd      	mov	sp, r7
 801962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019630:	4770      	bx	lr

08019632 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019632:	b580      	push	{r7, lr}
 8019634:	b084      	sub	sp, #16
 8019636:	af00      	add	r7, sp, #0
 8019638:	6078      	str	r0, [r7, #4]
 801963a:	460b      	mov	r3, r1
 801963c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801963e:	2300      	movs	r3, #0
 8019640:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019642:	2300      	movs	r3, #0
 8019644:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801964c:	78fa      	ldrb	r2, [r7, #3]
 801964e:	4611      	mov	r1, r2
 8019650:	4618      	mov	r0, r3
 8019652:	f7f1 f9e6 	bl	800aa22 <HAL_PCD_SetAddress>
 8019656:	4603      	mov	r3, r0
 8019658:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 801965a:	7bfb      	ldrb	r3, [r7, #15]
 801965c:	4618      	mov	r0, r3
 801965e:	f000 f8b5 	bl	80197cc <USBD_Get_USB_Status>
 8019662:	4603      	mov	r3, r0
 8019664:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8019666:	7bbb      	ldrb	r3, [r7, #14]
}
 8019668:	4618      	mov	r0, r3
 801966a:	3710      	adds	r7, #16
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}

08019670 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b086      	sub	sp, #24
 8019674:	af00      	add	r7, sp, #0
 8019676:	60f8      	str	r0, [r7, #12]
 8019678:	607a      	str	r2, [r7, #4]
 801967a:	461a      	mov	r2, r3
 801967c:	460b      	mov	r3, r1
 801967e:	72fb      	strb	r3, [r7, #11]
 8019680:	4613      	mov	r3, r2
 8019682:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019684:	2300      	movs	r3, #0
 8019686:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019688:	2300      	movs	r3, #0
 801968a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019692:	893b      	ldrh	r3, [r7, #8]
 8019694:	7af9      	ldrb	r1, [r7, #11]
 8019696:	687a      	ldr	r2, [r7, #4]
 8019698:	f7f1 fad9 	bl	800ac4e <HAL_PCD_EP_Transmit>
 801969c:	4603      	mov	r3, r0
 801969e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80196a0:	7dfb      	ldrb	r3, [r7, #23]
 80196a2:	4618      	mov	r0, r3
 80196a4:	f000 f892 	bl	80197cc <USBD_Get_USB_Status>
 80196a8:	4603      	mov	r3, r0
 80196aa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80196ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80196ae:	4618      	mov	r0, r3
 80196b0:	3718      	adds	r7, #24
 80196b2:	46bd      	mov	sp, r7
 80196b4:	bd80      	pop	{r7, pc}

080196b6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80196b6:	b580      	push	{r7, lr}
 80196b8:	b086      	sub	sp, #24
 80196ba:	af00      	add	r7, sp, #0
 80196bc:	60f8      	str	r0, [r7, #12]
 80196be:	607a      	str	r2, [r7, #4]
 80196c0:	461a      	mov	r2, r3
 80196c2:	460b      	mov	r3, r1
 80196c4:	72fb      	strb	r3, [r7, #11]
 80196c6:	4613      	mov	r3, r2
 80196c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80196ca:	2300      	movs	r3, #0
 80196cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80196ce:	2300      	movs	r3, #0
 80196d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80196d2:	68fb      	ldr	r3, [r7, #12]
 80196d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80196d8:	893b      	ldrh	r3, [r7, #8]
 80196da:	7af9      	ldrb	r1, [r7, #11]
 80196dc:	687a      	ldr	r2, [r7, #4]
 80196de:	f7f1 fa67 	bl	800abb0 <HAL_PCD_EP_Receive>
 80196e2:	4603      	mov	r3, r0
 80196e4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80196e6:	7dfb      	ldrb	r3, [r7, #23]
 80196e8:	4618      	mov	r0, r3
 80196ea:	f000 f86f 	bl	80197cc <USBD_Get_USB_Status>
 80196ee:	4603      	mov	r3, r0
 80196f0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80196f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	3718      	adds	r7, #24
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}

080196fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b082      	sub	sp, #8
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
 8019704:	460b      	mov	r3, r1
 8019706:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801970e:	78fa      	ldrb	r2, [r7, #3]
 8019710:	4611      	mov	r1, r2
 8019712:	4618      	mov	r0, r3
 8019714:	f7f1 fa86 	bl	800ac24 <HAL_PCD_EP_GetRxCount>
 8019718:	4603      	mov	r3, r0
}
 801971a:	4618      	mov	r0, r3
 801971c:	3708      	adds	r7, #8
 801971e:	46bd      	mov	sp, r7
 8019720:	bd80      	pop	{r7, pc}
	...

08019724 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019724:	b580      	push	{r7, lr}
 8019726:	b082      	sub	sp, #8
 8019728:	af00      	add	r7, sp, #0
 801972a:	6078      	str	r0, [r7, #4]
 801972c:	460b      	mov	r3, r1
 801972e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8019730:	78fb      	ldrb	r3, [r7, #3]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d002      	beq.n	801973c <HAL_PCDEx_LPM_Callback+0x18>
 8019736:	2b01      	cmp	r3, #1
 8019738:	d013      	beq.n	8019762 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 801973a:	e023      	b.n	8019784 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	699b      	ldr	r3, [r3, #24]
 8019740:	2b00      	cmp	r3, #0
 8019742:	d007      	beq.n	8019754 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019744:	f000 f83c 	bl	80197c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019748:	4b10      	ldr	r3, [pc, #64]	; (801978c <HAL_PCDEx_LPM_Callback+0x68>)
 801974a:	691b      	ldr	r3, [r3, #16]
 801974c:	4a0f      	ldr	r2, [pc, #60]	; (801978c <HAL_PCDEx_LPM_Callback+0x68>)
 801974e:	f023 0306 	bic.w	r3, r3, #6
 8019752:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801975a:	4618      	mov	r0, r3
 801975c:	f7fd f93c 	bl	80169d8 <USBD_LL_Resume>
    break;
 8019760:	e010      	b.n	8019784 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019768:	4618      	mov	r0, r3
 801976a:	f7fd f920 	bl	80169ae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	699b      	ldr	r3, [r3, #24]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d005      	beq.n	8019782 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019776:	4b05      	ldr	r3, [pc, #20]	; (801978c <HAL_PCDEx_LPM_Callback+0x68>)
 8019778:	691b      	ldr	r3, [r3, #16]
 801977a:	4a04      	ldr	r2, [pc, #16]	; (801978c <HAL_PCDEx_LPM_Callback+0x68>)
 801977c:	f043 0306 	orr.w	r3, r3, #6
 8019780:	6113      	str	r3, [r2, #16]
    break;   
 8019782:	bf00      	nop
}
 8019784:	bf00      	nop
 8019786:	3708      	adds	r7, #8
 8019788:	46bd      	mov	sp, r7
 801978a:	bd80      	pop	{r7, pc}
 801978c:	e000ed00 	.word	0xe000ed00

08019790 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019790:	b480      	push	{r7}
 8019792:	b083      	sub	sp, #12
 8019794:	af00      	add	r7, sp, #0
 8019796:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019798:	4b03      	ldr	r3, [pc, #12]	; (80197a8 <USBD_static_malloc+0x18>)
}
 801979a:	4618      	mov	r0, r3
 801979c:	370c      	adds	r7, #12
 801979e:	46bd      	mov	sp, r7
 80197a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a4:	4770      	bx	lr
 80197a6:	bf00      	nop
 80197a8:	20027854 	.word	0x20027854

080197ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80197ac:	b480      	push	{r7}
 80197ae:	b083      	sub	sp, #12
 80197b0:	af00      	add	r7, sp, #0
 80197b2:	6078      	str	r0, [r7, #4]

}
 80197b4:	bf00      	nop
 80197b6:	370c      	adds	r7, #12
 80197b8:	46bd      	mov	sp, r7
 80197ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197be:	4770      	bx	lr

080197c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80197c4:	f7ea f8e0 	bl	8003988 <SystemClock_Config>
}
 80197c8:	bf00      	nop
 80197ca:	bd80      	pop	{r7, pc}

080197cc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80197cc:	b480      	push	{r7}
 80197ce:	b085      	sub	sp, #20
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	4603      	mov	r3, r0
 80197d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80197d6:	2300      	movs	r3, #0
 80197d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80197da:	79fb      	ldrb	r3, [r7, #7]
 80197dc:	2b03      	cmp	r3, #3
 80197de:	d817      	bhi.n	8019810 <USBD_Get_USB_Status+0x44>
 80197e0:	a201      	add	r2, pc, #4	; (adr r2, 80197e8 <USBD_Get_USB_Status+0x1c>)
 80197e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197e6:	bf00      	nop
 80197e8:	080197f9 	.word	0x080197f9
 80197ec:	080197ff 	.word	0x080197ff
 80197f0:	08019805 	.word	0x08019805
 80197f4:	0801980b 	.word	0x0801980b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80197f8:	2300      	movs	r3, #0
 80197fa:	73fb      	strb	r3, [r7, #15]
    break;
 80197fc:	e00b      	b.n	8019816 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80197fe:	2302      	movs	r3, #2
 8019800:	73fb      	strb	r3, [r7, #15]
    break;
 8019802:	e008      	b.n	8019816 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019804:	2301      	movs	r3, #1
 8019806:	73fb      	strb	r3, [r7, #15]
    break;
 8019808:	e005      	b.n	8019816 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801980a:	2302      	movs	r3, #2
 801980c:	73fb      	strb	r3, [r7, #15]
    break;
 801980e:	e002      	b.n	8019816 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019810:	2302      	movs	r3, #2
 8019812:	73fb      	strb	r3, [r7, #15]
    break;
 8019814:	bf00      	nop
  }
  return usb_status;
 8019816:	7bfb      	ldrb	r3, [r7, #15]
}
 8019818:	4618      	mov	r0, r3
 801981a:	3714      	adds	r7, #20
 801981c:	46bd      	mov	sp, r7
 801981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019822:	4770      	bx	lr

08019824 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8019824:	b480      	push	{r7}
 8019826:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019828:	4b05      	ldr	r3, [pc, #20]	; (8019840 <UTIL_LPM_Init+0x1c>)
 801982a:	2200      	movs	r2, #0
 801982c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801982e:	4b05      	ldr	r3, [pc, #20]	; (8019844 <UTIL_LPM_Init+0x20>)
 8019830:	2200      	movs	r2, #0
 8019832:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019834:	bf00      	nop
 8019836:	46bd      	mov	sp, r7
 8019838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801983c:	4770      	bx	lr
 801983e:	bf00      	nop
 8019840:	20027a74 	.word	0x20027a74
 8019844:	20027a78 	.word	0x20027a78

08019848 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019848:	b480      	push	{r7}
 801984a:	b087      	sub	sp, #28
 801984c:	af00      	add	r7, sp, #0
 801984e:	6078      	str	r0, [r7, #4]
 8019850:	460b      	mov	r3, r1
 8019852:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019854:	f3ef 8310 	mrs	r3, PRIMASK
 8019858:	613b      	str	r3, [r7, #16]
  return(result);
 801985a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801985c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801985e:	b672      	cpsid	i
  
  switch(state)
 8019860:	78fb      	ldrb	r3, [r7, #3]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d009      	beq.n	801987a <UTIL_LPM_SetOffMode+0x32>
 8019866:	2b01      	cmp	r3, #1
 8019868:	d000      	beq.n	801986c <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 801986a:	e00e      	b.n	801988a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 801986c:	4b0c      	ldr	r3, [pc, #48]	; (80198a0 <UTIL_LPM_SetOffMode+0x58>)
 801986e:	681a      	ldr	r2, [r3, #0]
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	4313      	orrs	r3, r2
 8019874:	4a0a      	ldr	r2, [pc, #40]	; (80198a0 <UTIL_LPM_SetOffMode+0x58>)
 8019876:	6013      	str	r3, [r2, #0]
      break;
 8019878:	e007      	b.n	801988a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	43da      	mvns	r2, r3
 801987e:	4b08      	ldr	r3, [pc, #32]	; (80198a0 <UTIL_LPM_SetOffMode+0x58>)
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	4013      	ands	r3, r2
 8019884:	4a06      	ldr	r2, [pc, #24]	; (80198a0 <UTIL_LPM_SetOffMode+0x58>)
 8019886:	6013      	str	r3, [r2, #0]
      break;
 8019888:	bf00      	nop
 801988a:	697b      	ldr	r3, [r7, #20]
 801988c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019894:	bf00      	nop
 8019896:	371c      	adds	r7, #28
 8019898:	46bd      	mov	sp, r7
 801989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801989e:	4770      	bx	lr
 80198a0:	20027a78 	.word	0x20027a78

080198a4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80198a4:	b480      	push	{r7}
 80198a6:	b083      	sub	sp, #12
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	687a      	ldr	r2, [r7, #4]
 80198b0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	687a      	ldr	r2, [r7, #4]
 80198b6:	605a      	str	r2, [r3, #4]
}
 80198b8:	bf00      	nop
 80198ba:	370c      	adds	r7, #12
 80198bc:	46bd      	mov	sp, r7
 80198be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198c2:	4770      	bx	lr

080198c4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80198c4:	b480      	push	{r7}
 80198c6:	b087      	sub	sp, #28
 80198c8:	af00      	add	r7, sp, #0
 80198ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80198cc:	f3ef 8310 	mrs	r3, PRIMASK
 80198d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80198d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80198d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80198d6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	687a      	ldr	r2, [r7, #4]
 80198de:	429a      	cmp	r2, r3
 80198e0:	d102      	bne.n	80198e8 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 80198e2:	2301      	movs	r3, #1
 80198e4:	75fb      	strb	r3, [r7, #23]
 80198e6:	e001      	b.n	80198ec <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 80198e8:	2300      	movs	r3, #0
 80198ea:	75fb      	strb	r3, [r7, #23]
 80198ec:	693b      	ldr	r3, [r7, #16]
 80198ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198f0:	68bb      	ldr	r3, [r7, #8]
 80198f2:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80198f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80198f8:	4618      	mov	r0, r3
 80198fa:	371c      	adds	r7, #28
 80198fc:	46bd      	mov	sp, r7
 80198fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019902:	4770      	bx	lr

08019904 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8019904:	b480      	push	{r7}
 8019906:	b087      	sub	sp, #28
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
 801990c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801990e:	f3ef 8310 	mrs	r3, PRIMASK
 8019912:	60fb      	str	r3, [r7, #12]
  return(result);
 8019914:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8019916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019918:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681a      	ldr	r2, [r3, #0]
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8019922:	683b      	ldr	r3, [r7, #0]
 8019924:	687a      	ldr	r2, [r7, #4]
 8019926:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	683a      	ldr	r2, [r7, #0]
 801992c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 801992e:	683b      	ldr	r3, [r7, #0]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	683a      	ldr	r2, [r7, #0]
 8019934:	605a      	str	r2, [r3, #4]
 8019936:	697b      	ldr	r3, [r7, #20]
 8019938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801993a:	693b      	ldr	r3, [r7, #16]
 801993c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8019940:	bf00      	nop
 8019942:	371c      	adds	r7, #28
 8019944:	46bd      	mov	sp, r7
 8019946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801994a:	4770      	bx	lr

0801994c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 801994c:	b480      	push	{r7}
 801994e:	b087      	sub	sp, #28
 8019950:	af00      	add	r7, sp, #0
 8019952:	6078      	str	r0, [r7, #4]
 8019954:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019956:	f3ef 8310 	mrs	r3, PRIMASK
 801995a:	60fb      	str	r3, [r7, #12]
  return(result);
 801995c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801995e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019960:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8019962:	683b      	ldr	r3, [r7, #0]
 8019964:	687a      	ldr	r2, [r7, #4]
 8019966:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	685a      	ldr	r2, [r3, #4]
 801996c:	683b      	ldr	r3, [r7, #0]
 801996e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	683a      	ldr	r2, [r7, #0]
 8019974:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8019976:	683b      	ldr	r3, [r7, #0]
 8019978:	685b      	ldr	r3, [r3, #4]
 801997a:	683a      	ldr	r2, [r7, #0]
 801997c:	601a      	str	r2, [r3, #0]
 801997e:	697b      	ldr	r3, [r7, #20]
 8019980:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019982:	693b      	ldr	r3, [r7, #16]
 8019984:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8019988:	bf00      	nop
 801998a:	371c      	adds	r7, #28
 801998c:	46bd      	mov	sp, r7
 801998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019992:	4770      	bx	lr

08019994 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8019994:	b480      	push	{r7}
 8019996:	b087      	sub	sp, #28
 8019998:	af00      	add	r7, sp, #0
 801999a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801999c:	f3ef 8310 	mrs	r3, PRIMASK
 80199a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80199a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80199a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199a6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	685b      	ldr	r3, [r3, #4]
 80199ac:	687a      	ldr	r2, [r7, #4]
 80199ae:	6812      	ldr	r2, [r2, #0]
 80199b0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	687a      	ldr	r2, [r7, #4]
 80199b8:	6852      	ldr	r2, [r2, #4]
 80199ba:	605a      	str	r2, [r3, #4]
 80199bc:	697b      	ldr	r3, [r7, #20]
 80199be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199c0:	693b      	ldr	r3, [r7, #16]
 80199c2:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80199c6:	bf00      	nop
 80199c8:	371c      	adds	r7, #28
 80199ca:	46bd      	mov	sp, r7
 80199cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199d0:	4770      	bx	lr

080199d2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80199d2:	b580      	push	{r7, lr}
 80199d4:	b086      	sub	sp, #24
 80199d6:	af00      	add	r7, sp, #0
 80199d8:	6078      	str	r0, [r7, #4]
 80199da:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199dc:	f3ef 8310 	mrs	r3, PRIMASK
 80199e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80199e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80199e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199e6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	681a      	ldr	r2, [r3, #0]
 80199ec:	683b      	ldr	r3, [r7, #0]
 80199ee:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	4618      	mov	r0, r3
 80199f6:	f7ff ffcd 	bl	8019994 <LST_remove_node>
 80199fa:	697b      	ldr	r3, [r7, #20]
 80199fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199fe:	693b      	ldr	r3, [r7, #16]
 8019a00:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8019a04:	bf00      	nop
 8019a06:	3718      	adds	r7, #24
 8019a08:	46bd      	mov	sp, r7
 8019a0a:	bd80      	pop	{r7, pc}

08019a0c <arm_power_f32>:
 8019a0c:	b430      	push	{r4, r5}
 8019a0e:	088d      	lsrs	r5, r1, #2
 8019a10:	eddf 5a20 	vldr	s11, [pc, #128]	; 8019a94 <arm_power_f32+0x88>
 8019a14:	d020      	beq.n	8019a58 <arm_power_f32+0x4c>
 8019a16:	f100 0310 	add.w	r3, r0, #16
 8019a1a:	462c      	mov	r4, r5
 8019a1c:	ed53 6a04 	vldr	s13, [r3, #-16]
 8019a20:	ed13 7a03 	vldr	s14, [r3, #-12]
 8019a24:	ed53 7a02 	vldr	s15, [r3, #-8]
 8019a28:	ed13 6a01 	vldr	s12, [r3, #-4]
 8019a2c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8019a30:	ee27 7a07 	vmul.f32	s14, s14, s14
 8019a34:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019a38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019a3c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019a40:	ee26 6a06 	vmul.f32	s12, s12, s12
 8019a44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019a48:	3c01      	subs	r4, #1
 8019a4a:	f103 0310 	add.w	r3, r3, #16
 8019a4e:	ee76 5a27 	vadd.f32	s11, s12, s15
 8019a52:	d1e3      	bne.n	8019a1c <arm_power_f32+0x10>
 8019a54:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8019a58:	f011 0103 	ands.w	r1, r1, #3
 8019a5c:	d015      	beq.n	8019a8a <arm_power_f32+0x7e>
 8019a5e:	edd0 7a00 	vldr	s15, [r0]
 8019a62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019a66:	3901      	subs	r1, #1
 8019a68:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019a6c:	d00d      	beq.n	8019a8a <arm_power_f32+0x7e>
 8019a6e:	edd0 7a01 	vldr	s15, [r0, #4]
 8019a72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019a76:	2901      	cmp	r1, #1
 8019a78:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019a7c:	d005      	beq.n	8019a8a <arm_power_f32+0x7e>
 8019a7e:	edd0 7a02 	vldr	s15, [r0, #8]
 8019a82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019a86:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019a8a:	edc2 5a00 	vstr	s11, [r2]
 8019a8e:	bc30      	pop	{r4, r5}
 8019a90:	4770      	bx	lr
 8019a92:	bf00      	nop
 8019a94:	00000000 	.word	0x00000000

08019a98 <arm_mat_mult_f32>:
 8019a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a9c:	8845      	ldrh	r5, [r0, #2]
 8019a9e:	880b      	ldrh	r3, [r1, #0]
 8019aa0:	8806      	ldrh	r6, [r0, #0]
 8019aa2:	6847      	ldr	r7, [r0, #4]
 8019aa4:	6854      	ldr	r4, [r2, #4]
 8019aa6:	6848      	ldr	r0, [r1, #4]
 8019aa8:	b08b      	sub	sp, #44	; 0x2c
 8019aaa:	42ab      	cmp	r3, r5
 8019aac:	9109      	str	r1, [sp, #36]	; 0x24
 8019aae:	9604      	str	r6, [sp, #16]
 8019ab0:	8849      	ldrh	r1, [r1, #2]
 8019ab2:	f040 808a 	bne.w	8019bca <arm_mat_mult_f32+0x132>
 8019ab6:	8815      	ldrh	r5, [r2, #0]
 8019ab8:	42b5      	cmp	r5, r6
 8019aba:	f040 8086 	bne.w	8019bca <arm_mat_mult_f32+0x132>
 8019abe:	8852      	ldrh	r2, [r2, #2]
 8019ac0:	428a      	cmp	r2, r1
 8019ac2:	f040 8082 	bne.w	8019bca <arm_mat_mult_f32+0x132>
 8019ac6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8019aca:	1d01      	adds	r1, r0, #4
 8019acc:	0116      	lsls	r6, r2, #4
 8019ace:	9108      	str	r1, [sp, #32]
 8019ad0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8019ad4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8019ad8:	9101      	str	r1, [sp, #4]
 8019ada:	fb06 f108 	mul.w	r1, r6, r8
 8019ade:	0095      	lsls	r5, r2, #2
 8019ae0:	9103      	str	r1, [sp, #12]
 8019ae2:	00d2      	lsls	r2, r2, #3
 8019ae4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8019ae8:	f003 0903 	and.w	r9, r3, #3
 8019aec:	009b      	lsls	r3, r3, #2
 8019aee:	f107 0b10 	add.w	fp, r7, #16
 8019af2:	eb04 0a05 	add.w	sl, r4, r5
 8019af6:	9107      	str	r1, [sp, #28]
 8019af8:	9202      	str	r2, [sp, #8]
 8019afa:	9306      	str	r3, [sp, #24]
 8019afc:	f1ab 0310 	sub.w	r3, fp, #16
 8019b00:	9305      	str	r3, [sp, #20]
 8019b02:	9b07      	ldr	r3, [sp, #28]
 8019b04:	f8dd e020 	ldr.w	lr, [sp, #32]
 8019b08:	eb03 0c0a 	add.w	ip, r3, sl
 8019b0c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8019bd4 <arm_mat_mult_f32+0x13c>
 8019b10:	f1b8 0f00 	cmp.w	r8, #0
 8019b14:	d053      	beq.n	8019bbe <arm_mat_mult_f32+0x126>
 8019b16:	9b02      	ldr	r3, [sp, #8]
 8019b18:	4644      	mov	r4, r8
 8019b1a:	18c1      	adds	r1, r0, r3
 8019b1c:	4602      	mov	r2, r0
 8019b1e:	465b      	mov	r3, fp
 8019b20:	ed92 6a00 	vldr	s12, [r2]
 8019b24:	ed13 7a04 	vldr	s14, [r3, #-16]
 8019b28:	ed53 4a03 	vldr	s9, [r3, #-12]
 8019b2c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8019b30:	ed91 5a00 	vldr	s10, [r1]
 8019b34:	ed53 5a01 	vldr	s11, [r3, #-4]
 8019b38:	1957      	adds	r7, r2, r5
 8019b3a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019b3e:	ed97 6a00 	vldr	s12, [r7]
 8019b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b46:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019b4a:	194f      	adds	r7, r1, r5
 8019b4c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8019b50:	ee26 7a85 	vmul.f32	s14, s13, s10
 8019b54:	edd7 7a00 	vldr	s15, [r7]
 8019b58:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019b5c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019b60:	3c01      	subs	r4, #1
 8019b62:	4432      	add	r2, r6
 8019b64:	4431      	add	r1, r6
 8019b66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b6a:	f103 0310 	add.w	r3, r3, #16
 8019b6e:	d1d7      	bne.n	8019b20 <arm_mat_mult_f32+0x88>
 8019b70:	9b03      	ldr	r3, [sp, #12]
 8019b72:	9a01      	ldr	r2, [sp, #4]
 8019b74:	4418      	add	r0, r3
 8019b76:	f1b9 0f00 	cmp.w	r9, #0
 8019b7a:	d00b      	beq.n	8019b94 <arm_mat_mult_f32+0xfc>
 8019b7c:	464b      	mov	r3, r9
 8019b7e:	edd0 6a00 	vldr	s13, [r0]
 8019b82:	ecb2 7a01 	vldmia	r2!, {s14}
 8019b86:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019b8a:	3b01      	subs	r3, #1
 8019b8c:	4428      	add	r0, r5
 8019b8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b92:	d1f4      	bne.n	8019b7e <arm_mat_mult_f32+0xe6>
 8019b94:	ecec 7a01 	vstmia	ip!, {s15}
 8019b98:	45d4      	cmp	ip, sl
 8019b9a:	4670      	mov	r0, lr
 8019b9c:	f10e 0e04 	add.w	lr, lr, #4
 8019ba0:	d1b4      	bne.n	8019b0c <arm_mat_mult_f32+0x74>
 8019ba2:	9a01      	ldr	r2, [sp, #4]
 8019ba4:	9b06      	ldr	r3, [sp, #24]
 8019ba6:	4611      	mov	r1, r2
 8019ba8:	4419      	add	r1, r3
 8019baa:	449b      	add	fp, r3
 8019bac:	9b04      	ldr	r3, [sp, #16]
 8019bae:	9101      	str	r1, [sp, #4]
 8019bb0:	3b01      	subs	r3, #1
 8019bb2:	44aa      	add	sl, r5
 8019bb4:	9304      	str	r3, [sp, #16]
 8019bb6:	d004      	beq.n	8019bc2 <arm_mat_mult_f32+0x12a>
 8019bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019bba:	6858      	ldr	r0, [r3, #4]
 8019bbc:	e79e      	b.n	8019afc <arm_mat_mult_f32+0x64>
 8019bbe:	9a05      	ldr	r2, [sp, #20]
 8019bc0:	e7d9      	b.n	8019b76 <arm_mat_mult_f32+0xde>
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	b00b      	add	sp, #44	; 0x2c
 8019bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bca:	f06f 0002 	mvn.w	r0, #2
 8019bce:	b00b      	add	sp, #44	; 0x2c
 8019bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bd4:	00000000 	.word	0x00000000

08019bd8 <arm_sin_f32>:
 8019bd8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019c58 <arm_sin_f32+0x80>
 8019bdc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019be0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019be8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019bec:	d504      	bpl.n	8019bf8 <arm_sin_f32+0x20>
 8019bee:	ee17 3a90 	vmov	r3, s15
 8019bf2:	3b01      	subs	r3, #1
 8019bf4:	ee07 3a90 	vmov	s15, r3
 8019bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019bfc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8019c5c <arm_sin_f32+0x84>
 8019c00:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019c04:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019c08:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019c0c:	ee17 3a90 	vmov	r3, s15
 8019c10:	b29b      	uxth	r3, r3
 8019c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019c16:	d21a      	bcs.n	8019c4e <arm_sin_f32+0x76>
 8019c18:	ee07 3a90 	vmov	s15, r3
 8019c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019c20:	1c59      	adds	r1, r3, #1
 8019c22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019c26:	4a0e      	ldr	r2, [pc, #56]	; (8019c60 <arm_sin_f32+0x88>)
 8019c28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019c2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019c30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8019c34:	ed93 7a00 	vldr	s14, [r3]
 8019c38:	edd2 6a00 	vldr	s13, [r2]
 8019c3c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019c40:	ee20 0a26 	vmul.f32	s0, s0, s13
 8019c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c48:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019c4c:	4770      	bx	lr
 8019c4e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019c52:	2101      	movs	r1, #1
 8019c54:	2300      	movs	r3, #0
 8019c56:	e7e6      	b.n	8019c26 <arm_sin_f32+0x4e>
 8019c58:	3e22f983 	.word	0x3e22f983
 8019c5c:	44000000 	.word	0x44000000
 8019c60:	0801bb64 	.word	0x0801bb64

08019c64 <arm_cos_f32>:
 8019c64:	eddf 7a21 	vldr	s15, [pc, #132]	; 8019cec <arm_cos_f32+0x88>
 8019c68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019c6c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8019c70:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019c74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c7c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019c80:	d504      	bpl.n	8019c8c <arm_cos_f32+0x28>
 8019c82:	ee17 3a90 	vmov	r3, s15
 8019c86:	3b01      	subs	r3, #1
 8019c88:	ee07 3a90 	vmov	s15, r3
 8019c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c90:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8019cf0 <arm_cos_f32+0x8c>
 8019c94:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019c98:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019c9c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019ca0:	ee17 3a90 	vmov	r3, s15
 8019ca4:	b29b      	uxth	r3, r3
 8019ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019caa:	d21a      	bcs.n	8019ce2 <arm_cos_f32+0x7e>
 8019cac:	ee07 3a90 	vmov	s15, r3
 8019cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019cb4:	1c59      	adds	r1, r3, #1
 8019cb6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019cba:	4a0e      	ldr	r2, [pc, #56]	; (8019cf4 <arm_cos_f32+0x90>)
 8019cbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019cc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019cc4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8019cc8:	ed93 7a00 	vldr	s14, [r3]
 8019ccc:	edd2 6a00 	vldr	s13, [r2]
 8019cd0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019cd4:	ee20 0a26 	vmul.f32	s0, s0, s13
 8019cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019cdc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019ce0:	4770      	bx	lr
 8019ce2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019ce6:	2101      	movs	r1, #1
 8019ce8:	2300      	movs	r3, #0
 8019cea:	e7e6      	b.n	8019cba <arm_cos_f32+0x56>
 8019cec:	3e22f983 	.word	0x3e22f983
 8019cf0:	44000000 	.word	0x44000000
 8019cf4:	0801bb64 	.word	0x0801bb64

08019cf8 <arm_sub_f32>:
 8019cf8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8019cfc:	b4f0      	push	{r4, r5, r6, r7}
 8019cfe:	d033      	beq.n	8019d68 <arm_sub_f32+0x70>
 8019d00:	f100 0610 	add.w	r6, r0, #16
 8019d04:	f101 0510 	add.w	r5, r1, #16
 8019d08:	f102 0410 	add.w	r4, r2, #16
 8019d0c:	4667      	mov	r7, ip
 8019d0e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8019d12:	ed56 7a04 	vldr	s15, [r6, #-16]
 8019d16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d1a:	3f01      	subs	r7, #1
 8019d1c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8019d20:	ed15 7a03 	vldr	s14, [r5, #-12]
 8019d24:	ed56 7a03 	vldr	s15, [r6, #-12]
 8019d28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d2c:	f106 0610 	add.w	r6, r6, #16
 8019d30:	ed44 7a03 	vstr	s15, [r4, #-12]
 8019d34:	ed15 7a02 	vldr	s14, [r5, #-8]
 8019d38:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8019d3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d40:	f105 0510 	add.w	r5, r5, #16
 8019d44:	ed44 7a02 	vstr	s15, [r4, #-8]
 8019d48:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8019d4c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8019d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d54:	f104 0410 	add.w	r4, r4, #16
 8019d58:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8019d5c:	d1d7      	bne.n	8019d0e <arm_sub_f32+0x16>
 8019d5e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8019d62:	4420      	add	r0, r4
 8019d64:	4421      	add	r1, r4
 8019d66:	4422      	add	r2, r4
 8019d68:	f013 0303 	ands.w	r3, r3, #3
 8019d6c:	d01b      	beq.n	8019da6 <arm_sub_f32+0xae>
 8019d6e:	edd0 7a00 	vldr	s15, [r0]
 8019d72:	ed91 7a00 	vldr	s14, [r1]
 8019d76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d7a:	3b01      	subs	r3, #1
 8019d7c:	edc2 7a00 	vstr	s15, [r2]
 8019d80:	d011      	beq.n	8019da6 <arm_sub_f32+0xae>
 8019d82:	edd0 7a01 	vldr	s15, [r0, #4]
 8019d86:	ed91 7a01 	vldr	s14, [r1, #4]
 8019d8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d8e:	2b01      	cmp	r3, #1
 8019d90:	edc2 7a01 	vstr	s15, [r2, #4]
 8019d94:	d007      	beq.n	8019da6 <arm_sub_f32+0xae>
 8019d96:	edd0 7a02 	vldr	s15, [r0, #8]
 8019d9a:	ed91 7a02 	vldr	s14, [r1, #8]
 8019d9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019da2:	edc2 7a02 	vstr	s15, [r2, #8]
 8019da6:	bcf0      	pop	{r4, r5, r6, r7}
 8019da8:	4770      	bx	lr
 8019daa:	bf00      	nop

08019dac <arm_scale_f32>:
 8019dac:	b470      	push	{r4, r5, r6}
 8019dae:	0896      	lsrs	r6, r2, #2
 8019db0:	d025      	beq.n	8019dfe <arm_scale_f32+0x52>
 8019db2:	f100 0410 	add.w	r4, r0, #16
 8019db6:	f101 0310 	add.w	r3, r1, #16
 8019dba:	4635      	mov	r5, r6
 8019dbc:	ed54 7a04 	vldr	s15, [r4, #-16]
 8019dc0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019dc4:	3d01      	subs	r5, #1
 8019dc6:	ed43 7a04 	vstr	s15, [r3, #-16]
 8019dca:	ed54 7a03 	vldr	s15, [r4, #-12]
 8019dce:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019dd2:	f104 0410 	add.w	r4, r4, #16
 8019dd6:	ed43 7a03 	vstr	s15, [r3, #-12]
 8019dda:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8019dde:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019de2:	f103 0310 	add.w	r3, r3, #16
 8019de6:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8019dea:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8019dee:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019df2:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8019df6:	d1e1      	bne.n	8019dbc <arm_scale_f32+0x10>
 8019df8:	0136      	lsls	r6, r6, #4
 8019dfa:	4430      	add	r0, r6
 8019dfc:	4431      	add	r1, r6
 8019dfe:	f012 0203 	ands.w	r2, r2, #3
 8019e02:	d015      	beq.n	8019e30 <arm_scale_f32+0x84>
 8019e04:	edd0 7a00 	vldr	s15, [r0]
 8019e08:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019e0c:	3a01      	subs	r2, #1
 8019e0e:	edc1 7a00 	vstr	s15, [r1]
 8019e12:	d00d      	beq.n	8019e30 <arm_scale_f32+0x84>
 8019e14:	edd0 7a01 	vldr	s15, [r0, #4]
 8019e18:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019e1c:	2a01      	cmp	r2, #1
 8019e1e:	edc1 7a01 	vstr	s15, [r1, #4]
 8019e22:	d005      	beq.n	8019e30 <arm_scale_f32+0x84>
 8019e24:	edd0 7a02 	vldr	s15, [r0, #8]
 8019e28:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019e2c:	ed81 0a02 	vstr	s0, [r1, #8]
 8019e30:	bc70      	pop	{r4, r5, r6}
 8019e32:	4770      	bx	lr

08019e34 <arm_dot_prod_f32>:
 8019e34:	b4f0      	push	{r4, r5, r6, r7}
 8019e36:	0897      	lsrs	r7, r2, #2
 8019e38:	eddf 5a29 	vldr	s11, [pc, #164]	; 8019ee0 <arm_dot_prod_f32+0xac>
 8019e3c:	d02d      	beq.n	8019e9a <arm_dot_prod_f32+0x66>
 8019e3e:	f100 0510 	add.w	r5, r0, #16
 8019e42:	f101 0410 	add.w	r4, r1, #16
 8019e46:	463e      	mov	r6, r7
 8019e48:	ed55 6a04 	vldr	s13, [r5, #-16]
 8019e4c:	ed54 3a04 	vldr	s7, [r4, #-16]
 8019e50:	ed15 7a03 	vldr	s14, [r5, #-12]
 8019e54:	ed14 4a03 	vldr	s8, [r4, #-12]
 8019e58:	ed55 7a02 	vldr	s15, [r5, #-8]
 8019e5c:	ed54 4a02 	vldr	s9, [r4, #-8]
 8019e60:	ed15 6a01 	vldr	s12, [r5, #-4]
 8019e64:	ed14 5a01 	vldr	s10, [r4, #-4]
 8019e68:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8019e6c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e70:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019e74:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8019e78:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019e7c:	ee66 6a05 	vmul.f32	s13, s12, s10
 8019e80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019e84:	3e01      	subs	r6, #1
 8019e86:	f105 0510 	add.w	r5, r5, #16
 8019e8a:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8019e8e:	f104 0410 	add.w	r4, r4, #16
 8019e92:	d1d9      	bne.n	8019e48 <arm_dot_prod_f32+0x14>
 8019e94:	013f      	lsls	r7, r7, #4
 8019e96:	4438      	add	r0, r7
 8019e98:	4439      	add	r1, r7
 8019e9a:	f012 0203 	ands.w	r2, r2, #3
 8019e9e:	d01b      	beq.n	8019ed8 <arm_dot_prod_f32+0xa4>
 8019ea0:	edd1 7a00 	vldr	s15, [r1]
 8019ea4:	ed90 7a00 	vldr	s14, [r0]
 8019ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019eac:	3a01      	subs	r2, #1
 8019eae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019eb2:	d011      	beq.n	8019ed8 <arm_dot_prod_f32+0xa4>
 8019eb4:	edd1 7a01 	vldr	s15, [r1, #4]
 8019eb8:	ed90 7a01 	vldr	s14, [r0, #4]
 8019ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019ec0:	2a01      	cmp	r2, #1
 8019ec2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019ec6:	d007      	beq.n	8019ed8 <arm_dot_prod_f32+0xa4>
 8019ec8:	edd0 7a02 	vldr	s15, [r0, #8]
 8019ecc:	ed91 7a02 	vldr	s14, [r1, #8]
 8019ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019ed4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019ed8:	edc3 5a00 	vstr	s11, [r3]
 8019edc:	bcf0      	pop	{r4, r5, r6, r7}
 8019ede:	4770      	bx	lr
 8019ee0:	00000000 	.word	0x00000000

08019ee4 <arm_add_f32>:
 8019ee4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8019ee8:	b4f0      	push	{r4, r5, r6, r7}
 8019eea:	d033      	beq.n	8019f54 <arm_add_f32+0x70>
 8019eec:	f100 0610 	add.w	r6, r0, #16
 8019ef0:	f101 0510 	add.w	r5, r1, #16
 8019ef4:	f102 0410 	add.w	r4, r2, #16
 8019ef8:	4667      	mov	r7, ip
 8019efa:	ed15 7a04 	vldr	s14, [r5, #-16]
 8019efe:	ed56 7a04 	vldr	s15, [r6, #-16]
 8019f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f06:	3f01      	subs	r7, #1
 8019f08:	ed44 7a04 	vstr	s15, [r4, #-16]
 8019f0c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8019f10:	ed56 7a03 	vldr	s15, [r6, #-12]
 8019f14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f18:	f106 0610 	add.w	r6, r6, #16
 8019f1c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8019f20:	ed15 7a02 	vldr	s14, [r5, #-8]
 8019f24:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8019f28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f2c:	f105 0510 	add.w	r5, r5, #16
 8019f30:	ed44 7a02 	vstr	s15, [r4, #-8]
 8019f34:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8019f38:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8019f3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f40:	f104 0410 	add.w	r4, r4, #16
 8019f44:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8019f48:	d1d7      	bne.n	8019efa <arm_add_f32+0x16>
 8019f4a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8019f4e:	4420      	add	r0, r4
 8019f50:	4421      	add	r1, r4
 8019f52:	4422      	add	r2, r4
 8019f54:	f013 0303 	ands.w	r3, r3, #3
 8019f58:	d01b      	beq.n	8019f92 <arm_add_f32+0xae>
 8019f5a:	edd1 7a00 	vldr	s15, [r1]
 8019f5e:	ed90 7a00 	vldr	s14, [r0]
 8019f62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f66:	3b01      	subs	r3, #1
 8019f68:	edc2 7a00 	vstr	s15, [r2]
 8019f6c:	d011      	beq.n	8019f92 <arm_add_f32+0xae>
 8019f6e:	edd0 7a01 	vldr	s15, [r0, #4]
 8019f72:	ed91 7a01 	vldr	s14, [r1, #4]
 8019f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f7a:	2b01      	cmp	r3, #1
 8019f7c:	edc2 7a01 	vstr	s15, [r2, #4]
 8019f80:	d007      	beq.n	8019f92 <arm_add_f32+0xae>
 8019f82:	edd0 7a02 	vldr	s15, [r0, #8]
 8019f86:	ed91 7a02 	vldr	s14, [r1, #8]
 8019f8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f8e:	edc2 7a02 	vstr	s15, [r2, #8]
 8019f92:	bcf0      	pop	{r4, r5, r6, r7}
 8019f94:	4770      	bx	lr
 8019f96:	bf00      	nop

08019f98 <__errno>:
 8019f98:	4b01      	ldr	r3, [pc, #4]	; (8019fa0 <__errno+0x8>)
 8019f9a:	6818      	ldr	r0, [r3, #0]
 8019f9c:	4770      	bx	lr
 8019f9e:	bf00      	nop
 8019fa0:	20000270 	.word	0x20000270

08019fa4 <__libc_init_array>:
 8019fa4:	b570      	push	{r4, r5, r6, lr}
 8019fa6:	4e0d      	ldr	r6, [pc, #52]	; (8019fdc <__libc_init_array+0x38>)
 8019fa8:	4c0d      	ldr	r4, [pc, #52]	; (8019fe0 <__libc_init_array+0x3c>)
 8019faa:	1ba4      	subs	r4, r4, r6
 8019fac:	10a4      	asrs	r4, r4, #2
 8019fae:	2500      	movs	r5, #0
 8019fb0:	42a5      	cmp	r5, r4
 8019fb2:	d109      	bne.n	8019fc8 <__libc_init_array+0x24>
 8019fb4:	4e0b      	ldr	r6, [pc, #44]	; (8019fe4 <__libc_init_array+0x40>)
 8019fb6:	4c0c      	ldr	r4, [pc, #48]	; (8019fe8 <__libc_init_array+0x44>)
 8019fb8:	f001 f8d4 	bl	801b164 <_init>
 8019fbc:	1ba4      	subs	r4, r4, r6
 8019fbe:	10a4      	asrs	r4, r4, #2
 8019fc0:	2500      	movs	r5, #0
 8019fc2:	42a5      	cmp	r5, r4
 8019fc4:	d105      	bne.n	8019fd2 <__libc_init_array+0x2e>
 8019fc6:	bd70      	pop	{r4, r5, r6, pc}
 8019fc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019fcc:	4798      	blx	r3
 8019fce:	3501      	adds	r5, #1
 8019fd0:	e7ee      	b.n	8019fb0 <__libc_init_array+0xc>
 8019fd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019fd6:	4798      	blx	r3
 8019fd8:	3501      	adds	r5, #1
 8019fda:	e7f2      	b.n	8019fc2 <__libc_init_array+0x1e>
 8019fdc:	0801c420 	.word	0x0801c420
 8019fe0:	0801c420 	.word	0x0801c420
 8019fe4:	0801c420 	.word	0x0801c420
 8019fe8:	0801c424 	.word	0x0801c424

08019fec <memcpy>:
 8019fec:	b510      	push	{r4, lr}
 8019fee:	1e43      	subs	r3, r0, #1
 8019ff0:	440a      	add	r2, r1
 8019ff2:	4291      	cmp	r1, r2
 8019ff4:	d100      	bne.n	8019ff8 <memcpy+0xc>
 8019ff6:	bd10      	pop	{r4, pc}
 8019ff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a000:	e7f7      	b.n	8019ff2 <memcpy+0x6>

0801a002 <memset>:
 801a002:	4402      	add	r2, r0
 801a004:	4603      	mov	r3, r0
 801a006:	4293      	cmp	r3, r2
 801a008:	d100      	bne.n	801a00c <memset+0xa>
 801a00a:	4770      	bx	lr
 801a00c:	f803 1b01 	strb.w	r1, [r3], #1
 801a010:	e7f9      	b.n	801a006 <memset+0x4>
	...

0801a014 <pow>:
 801a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a018:	ed2d 8b04 	vpush	{d8-d9}
 801a01c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801a2f0 <pow+0x2dc>
 801a020:	b08d      	sub	sp, #52	; 0x34
 801a022:	ec57 6b10 	vmov	r6, r7, d0
 801a026:	ec55 4b11 	vmov	r4, r5, d1
 801a02a:	f000 f9b5 	bl	801a398 <__ieee754_pow>
 801a02e:	f999 3000 	ldrsb.w	r3, [r9]
 801a032:	9300      	str	r3, [sp, #0]
 801a034:	3301      	adds	r3, #1
 801a036:	eeb0 8a40 	vmov.f32	s16, s0
 801a03a:	eef0 8a60 	vmov.f32	s17, s1
 801a03e:	46c8      	mov	r8, r9
 801a040:	d05f      	beq.n	801a102 <pow+0xee>
 801a042:	4622      	mov	r2, r4
 801a044:	462b      	mov	r3, r5
 801a046:	4620      	mov	r0, r4
 801a048:	4629      	mov	r1, r5
 801a04a:	f7e6 fcf9 	bl	8000a40 <__aeabi_dcmpun>
 801a04e:	4683      	mov	fp, r0
 801a050:	2800      	cmp	r0, #0
 801a052:	d156      	bne.n	801a102 <pow+0xee>
 801a054:	4632      	mov	r2, r6
 801a056:	463b      	mov	r3, r7
 801a058:	4630      	mov	r0, r6
 801a05a:	4639      	mov	r1, r7
 801a05c:	f7e6 fcf0 	bl	8000a40 <__aeabi_dcmpun>
 801a060:	9001      	str	r0, [sp, #4]
 801a062:	b1e8      	cbz	r0, 801a0a0 <pow+0x8c>
 801a064:	2200      	movs	r2, #0
 801a066:	2300      	movs	r3, #0
 801a068:	4620      	mov	r0, r4
 801a06a:	4629      	mov	r1, r5
 801a06c:	f7e6 fcb6 	bl	80009dc <__aeabi_dcmpeq>
 801a070:	2800      	cmp	r0, #0
 801a072:	d046      	beq.n	801a102 <pow+0xee>
 801a074:	2301      	movs	r3, #1
 801a076:	9302      	str	r3, [sp, #8]
 801a078:	4b96      	ldr	r3, [pc, #600]	; (801a2d4 <pow+0x2c0>)
 801a07a:	9303      	str	r3, [sp, #12]
 801a07c:	4b96      	ldr	r3, [pc, #600]	; (801a2d8 <pow+0x2c4>)
 801a07e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a082:	2200      	movs	r2, #0
 801a084:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a088:	9b00      	ldr	r3, [sp, #0]
 801a08a:	2b02      	cmp	r3, #2
 801a08c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a090:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a094:	d033      	beq.n	801a0fe <pow+0xea>
 801a096:	a802      	add	r0, sp, #8
 801a098:	f000 ff50 	bl	801af3c <matherr>
 801a09c:	bb48      	cbnz	r0, 801a0f2 <pow+0xde>
 801a09e:	e05d      	b.n	801a15c <pow+0x148>
 801a0a0:	f04f 0a00 	mov.w	sl, #0
 801a0a4:	f04f 0b00 	mov.w	fp, #0
 801a0a8:	4652      	mov	r2, sl
 801a0aa:	465b      	mov	r3, fp
 801a0ac:	4630      	mov	r0, r6
 801a0ae:	4639      	mov	r1, r7
 801a0b0:	f7e6 fc94 	bl	80009dc <__aeabi_dcmpeq>
 801a0b4:	ec4b ab19 	vmov	d9, sl, fp
 801a0b8:	2800      	cmp	r0, #0
 801a0ba:	d054      	beq.n	801a166 <pow+0x152>
 801a0bc:	4652      	mov	r2, sl
 801a0be:	465b      	mov	r3, fp
 801a0c0:	4620      	mov	r0, r4
 801a0c2:	4629      	mov	r1, r5
 801a0c4:	f7e6 fc8a 	bl	80009dc <__aeabi_dcmpeq>
 801a0c8:	4680      	mov	r8, r0
 801a0ca:	b318      	cbz	r0, 801a114 <pow+0x100>
 801a0cc:	2301      	movs	r3, #1
 801a0ce:	9302      	str	r3, [sp, #8]
 801a0d0:	4b80      	ldr	r3, [pc, #512]	; (801a2d4 <pow+0x2c0>)
 801a0d2:	9303      	str	r3, [sp, #12]
 801a0d4:	9b01      	ldr	r3, [sp, #4]
 801a0d6:	930a      	str	r3, [sp, #40]	; 0x28
 801a0d8:	9b00      	ldr	r3, [sp, #0]
 801a0da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a0de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a0e2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d0d5      	beq.n	801a096 <pow+0x82>
 801a0ea:	4b7b      	ldr	r3, [pc, #492]	; (801a2d8 <pow+0x2c4>)
 801a0ec:	2200      	movs	r2, #0
 801a0ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a0f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0f4:	b11b      	cbz	r3, 801a0fe <pow+0xea>
 801a0f6:	f7ff ff4f 	bl	8019f98 <__errno>
 801a0fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0fc:	6003      	str	r3, [r0, #0]
 801a0fe:	ed9d 8b08 	vldr	d8, [sp, #32]
 801a102:	eeb0 0a48 	vmov.f32	s0, s16
 801a106:	eef0 0a68 	vmov.f32	s1, s17
 801a10a:	b00d      	add	sp, #52	; 0x34
 801a10c:	ecbd 8b04 	vpop	{d8-d9}
 801a110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a114:	ec45 4b10 	vmov	d0, r4, r5
 801a118:	f000 ff08 	bl	801af2c <finite>
 801a11c:	2800      	cmp	r0, #0
 801a11e:	d0f0      	beq.n	801a102 <pow+0xee>
 801a120:	4652      	mov	r2, sl
 801a122:	465b      	mov	r3, fp
 801a124:	4620      	mov	r0, r4
 801a126:	4629      	mov	r1, r5
 801a128:	f7e6 fc62 	bl	80009f0 <__aeabi_dcmplt>
 801a12c:	2800      	cmp	r0, #0
 801a12e:	d0e8      	beq.n	801a102 <pow+0xee>
 801a130:	2301      	movs	r3, #1
 801a132:	9302      	str	r3, [sp, #8]
 801a134:	4b67      	ldr	r3, [pc, #412]	; (801a2d4 <pow+0x2c0>)
 801a136:	9303      	str	r3, [sp, #12]
 801a138:	f999 3000 	ldrsb.w	r3, [r9]
 801a13c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801a140:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a144:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a148:	b913      	cbnz	r3, 801a150 <pow+0x13c>
 801a14a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801a14e:	e7a2      	b.n	801a096 <pow+0x82>
 801a150:	4962      	ldr	r1, [pc, #392]	; (801a2dc <pow+0x2c8>)
 801a152:	2000      	movs	r0, #0
 801a154:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a158:	2b02      	cmp	r3, #2
 801a15a:	d19c      	bne.n	801a096 <pow+0x82>
 801a15c:	f7ff ff1c 	bl	8019f98 <__errno>
 801a160:	2321      	movs	r3, #33	; 0x21
 801a162:	6003      	str	r3, [r0, #0]
 801a164:	e7c5      	b.n	801a0f2 <pow+0xde>
 801a166:	eeb0 0a48 	vmov.f32	s0, s16
 801a16a:	eef0 0a68 	vmov.f32	s1, s17
 801a16e:	f000 fedd 	bl	801af2c <finite>
 801a172:	9000      	str	r0, [sp, #0]
 801a174:	2800      	cmp	r0, #0
 801a176:	f040 8081 	bne.w	801a27c <pow+0x268>
 801a17a:	ec47 6b10 	vmov	d0, r6, r7
 801a17e:	f000 fed5 	bl	801af2c <finite>
 801a182:	2800      	cmp	r0, #0
 801a184:	d07a      	beq.n	801a27c <pow+0x268>
 801a186:	ec45 4b10 	vmov	d0, r4, r5
 801a18a:	f000 fecf 	bl	801af2c <finite>
 801a18e:	2800      	cmp	r0, #0
 801a190:	d074      	beq.n	801a27c <pow+0x268>
 801a192:	ec53 2b18 	vmov	r2, r3, d8
 801a196:	ee18 0a10 	vmov	r0, s16
 801a19a:	4619      	mov	r1, r3
 801a19c:	f7e6 fc50 	bl	8000a40 <__aeabi_dcmpun>
 801a1a0:	f999 9000 	ldrsb.w	r9, [r9]
 801a1a4:	4b4b      	ldr	r3, [pc, #300]	; (801a2d4 <pow+0x2c0>)
 801a1a6:	b1b0      	cbz	r0, 801a1d6 <pow+0x1c2>
 801a1a8:	2201      	movs	r2, #1
 801a1aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a1ae:	9b00      	ldr	r3, [sp, #0]
 801a1b0:	930a      	str	r3, [sp, #40]	; 0x28
 801a1b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a1b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a1ba:	f1b9 0f00 	cmp.w	r9, #0
 801a1be:	d0c4      	beq.n	801a14a <pow+0x136>
 801a1c0:	4652      	mov	r2, sl
 801a1c2:	465b      	mov	r3, fp
 801a1c4:	4650      	mov	r0, sl
 801a1c6:	4659      	mov	r1, fp
 801a1c8:	f7e6 faca 	bl	8000760 <__aeabi_ddiv>
 801a1cc:	f1b9 0f02 	cmp.w	r9, #2
 801a1d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a1d4:	e7c1      	b.n	801a15a <pow+0x146>
 801a1d6:	2203      	movs	r2, #3
 801a1d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a1dc:	900a      	str	r0, [sp, #40]	; 0x28
 801a1de:	4629      	mov	r1, r5
 801a1e0:	4620      	mov	r0, r4
 801a1e2:	2200      	movs	r2, #0
 801a1e4:	4b3e      	ldr	r3, [pc, #248]	; (801a2e0 <pow+0x2cc>)
 801a1e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a1ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a1ee:	f7e6 f98d 	bl	800050c <__aeabi_dmul>
 801a1f2:	4604      	mov	r4, r0
 801a1f4:	460d      	mov	r5, r1
 801a1f6:	f1b9 0f00 	cmp.w	r9, #0
 801a1fa:	d124      	bne.n	801a246 <pow+0x232>
 801a1fc:	4b39      	ldr	r3, [pc, #228]	; (801a2e4 <pow+0x2d0>)
 801a1fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a202:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a206:	4630      	mov	r0, r6
 801a208:	4652      	mov	r2, sl
 801a20a:	465b      	mov	r3, fp
 801a20c:	4639      	mov	r1, r7
 801a20e:	f7e6 fbef 	bl	80009f0 <__aeabi_dcmplt>
 801a212:	2800      	cmp	r0, #0
 801a214:	d056      	beq.n	801a2c4 <pow+0x2b0>
 801a216:	ec45 4b10 	vmov	d0, r4, r5
 801a21a:	f000 fe99 	bl	801af50 <rint>
 801a21e:	4622      	mov	r2, r4
 801a220:	462b      	mov	r3, r5
 801a222:	ec51 0b10 	vmov	r0, r1, d0
 801a226:	f7e6 fbd9 	bl	80009dc <__aeabi_dcmpeq>
 801a22a:	b920      	cbnz	r0, 801a236 <pow+0x222>
 801a22c:	4b2e      	ldr	r3, [pc, #184]	; (801a2e8 <pow+0x2d4>)
 801a22e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a232:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a236:	f998 3000 	ldrsb.w	r3, [r8]
 801a23a:	2b02      	cmp	r3, #2
 801a23c:	d142      	bne.n	801a2c4 <pow+0x2b0>
 801a23e:	f7ff feab 	bl	8019f98 <__errno>
 801a242:	2322      	movs	r3, #34	; 0x22
 801a244:	e78d      	b.n	801a162 <pow+0x14e>
 801a246:	4b29      	ldr	r3, [pc, #164]	; (801a2ec <pow+0x2d8>)
 801a248:	2200      	movs	r2, #0
 801a24a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a24e:	4630      	mov	r0, r6
 801a250:	4652      	mov	r2, sl
 801a252:	465b      	mov	r3, fp
 801a254:	4639      	mov	r1, r7
 801a256:	f7e6 fbcb 	bl	80009f0 <__aeabi_dcmplt>
 801a25a:	2800      	cmp	r0, #0
 801a25c:	d0eb      	beq.n	801a236 <pow+0x222>
 801a25e:	ec45 4b10 	vmov	d0, r4, r5
 801a262:	f000 fe75 	bl	801af50 <rint>
 801a266:	4622      	mov	r2, r4
 801a268:	462b      	mov	r3, r5
 801a26a:	ec51 0b10 	vmov	r0, r1, d0
 801a26e:	f7e6 fbb5 	bl	80009dc <__aeabi_dcmpeq>
 801a272:	2800      	cmp	r0, #0
 801a274:	d1df      	bne.n	801a236 <pow+0x222>
 801a276:	2200      	movs	r2, #0
 801a278:	4b18      	ldr	r3, [pc, #96]	; (801a2dc <pow+0x2c8>)
 801a27a:	e7da      	b.n	801a232 <pow+0x21e>
 801a27c:	2200      	movs	r2, #0
 801a27e:	2300      	movs	r3, #0
 801a280:	ec51 0b18 	vmov	r0, r1, d8
 801a284:	f7e6 fbaa 	bl	80009dc <__aeabi_dcmpeq>
 801a288:	2800      	cmp	r0, #0
 801a28a:	f43f af3a 	beq.w	801a102 <pow+0xee>
 801a28e:	ec47 6b10 	vmov	d0, r6, r7
 801a292:	f000 fe4b 	bl	801af2c <finite>
 801a296:	2800      	cmp	r0, #0
 801a298:	f43f af33 	beq.w	801a102 <pow+0xee>
 801a29c:	ec45 4b10 	vmov	d0, r4, r5
 801a2a0:	f000 fe44 	bl	801af2c <finite>
 801a2a4:	2800      	cmp	r0, #0
 801a2a6:	f43f af2c 	beq.w	801a102 <pow+0xee>
 801a2aa:	2304      	movs	r3, #4
 801a2ac:	9302      	str	r3, [sp, #8]
 801a2ae:	4b09      	ldr	r3, [pc, #36]	; (801a2d4 <pow+0x2c0>)
 801a2b0:	9303      	str	r3, [sp, #12]
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	930a      	str	r3, [sp, #40]	; 0x28
 801a2b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a2ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a2be:	ed8d 9b08 	vstr	d9, [sp, #32]
 801a2c2:	e7b8      	b.n	801a236 <pow+0x222>
 801a2c4:	a802      	add	r0, sp, #8
 801a2c6:	f000 fe39 	bl	801af3c <matherr>
 801a2ca:	2800      	cmp	r0, #0
 801a2cc:	f47f af11 	bne.w	801a0f2 <pow+0xde>
 801a2d0:	e7b5      	b.n	801a23e <pow+0x22a>
 801a2d2:	bf00      	nop
 801a2d4:	0801c3c8 	.word	0x0801c3c8
 801a2d8:	3ff00000 	.word	0x3ff00000
 801a2dc:	fff00000 	.word	0xfff00000
 801a2e0:	3fe00000 	.word	0x3fe00000
 801a2e4:	47efffff 	.word	0x47efffff
 801a2e8:	c7efffff 	.word	0xc7efffff
 801a2ec:	7ff00000 	.word	0x7ff00000
 801a2f0:	200002d4 	.word	0x200002d4

0801a2f4 <sqrtf>:
 801a2f4:	b510      	push	{r4, lr}
 801a2f6:	ed2d 8b02 	vpush	{d8}
 801a2fa:	b08a      	sub	sp, #40	; 0x28
 801a2fc:	eeb0 8a40 	vmov.f32	s16, s0
 801a300:	f000 fe08 	bl	801af14 <__ieee754_sqrtf>
 801a304:	4b21      	ldr	r3, [pc, #132]	; (801a38c <sqrtf+0x98>)
 801a306:	f993 4000 	ldrsb.w	r4, [r3]
 801a30a:	1c63      	adds	r3, r4, #1
 801a30c:	d02c      	beq.n	801a368 <sqrtf+0x74>
 801a30e:	eeb4 8a48 	vcmp.f32	s16, s16
 801a312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a316:	d627      	bvs.n	801a368 <sqrtf+0x74>
 801a318:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a320:	d522      	bpl.n	801a368 <sqrtf+0x74>
 801a322:	2301      	movs	r3, #1
 801a324:	9300      	str	r3, [sp, #0]
 801a326:	4b1a      	ldr	r3, [pc, #104]	; (801a390 <sqrtf+0x9c>)
 801a328:	9301      	str	r3, [sp, #4]
 801a32a:	ee18 0a10 	vmov	r0, s16
 801a32e:	2300      	movs	r3, #0
 801a330:	9308      	str	r3, [sp, #32]
 801a332:	f7e6 f893 	bl	800045c <__aeabi_f2d>
 801a336:	2200      	movs	r2, #0
 801a338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a340:	2300      	movs	r3, #0
 801a342:	b9ac      	cbnz	r4, 801a370 <sqrtf+0x7c>
 801a344:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a348:	4668      	mov	r0, sp
 801a34a:	f000 fdf7 	bl	801af3c <matherr>
 801a34e:	b1b8      	cbz	r0, 801a380 <sqrtf+0x8c>
 801a350:	9b08      	ldr	r3, [sp, #32]
 801a352:	b11b      	cbz	r3, 801a35c <sqrtf+0x68>
 801a354:	f7ff fe20 	bl	8019f98 <__errno>
 801a358:	9b08      	ldr	r3, [sp, #32]
 801a35a:	6003      	str	r3, [r0, #0]
 801a35c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a360:	f7e6 fb84 	bl	8000a6c <__aeabi_d2f>
 801a364:	ee00 0a10 	vmov	s0, r0
 801a368:	b00a      	add	sp, #40	; 0x28
 801a36a:	ecbd 8b02 	vpop	{d8}
 801a36e:	bd10      	pop	{r4, pc}
 801a370:	4610      	mov	r0, r2
 801a372:	4619      	mov	r1, r3
 801a374:	f7e6 f9f4 	bl	8000760 <__aeabi_ddiv>
 801a378:	2c02      	cmp	r4, #2
 801a37a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a37e:	d1e3      	bne.n	801a348 <sqrtf+0x54>
 801a380:	f7ff fe0a 	bl	8019f98 <__errno>
 801a384:	2321      	movs	r3, #33	; 0x21
 801a386:	6003      	str	r3, [r0, #0]
 801a388:	e7e2      	b.n	801a350 <sqrtf+0x5c>
 801a38a:	bf00      	nop
 801a38c:	200002d4 	.word	0x200002d4
 801a390:	0801c3cc 	.word	0x0801c3cc
 801a394:	00000000 	.word	0x00000000

0801a398 <__ieee754_pow>:
 801a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a39c:	b091      	sub	sp, #68	; 0x44
 801a39e:	ed8d 1b00 	vstr	d1, [sp]
 801a3a2:	e9dd 2900 	ldrd	r2, r9, [sp]
 801a3a6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801a3aa:	ea58 0302 	orrs.w	r3, r8, r2
 801a3ae:	ec57 6b10 	vmov	r6, r7, d0
 801a3b2:	f000 84be 	beq.w	801ad32 <__ieee754_pow+0x99a>
 801a3b6:	4b7a      	ldr	r3, [pc, #488]	; (801a5a0 <__ieee754_pow+0x208>)
 801a3b8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801a3bc:	429c      	cmp	r4, r3
 801a3be:	463d      	mov	r5, r7
 801a3c0:	ee10 aa10 	vmov	sl, s0
 801a3c4:	dc09      	bgt.n	801a3da <__ieee754_pow+0x42>
 801a3c6:	d103      	bne.n	801a3d0 <__ieee754_pow+0x38>
 801a3c8:	b93e      	cbnz	r6, 801a3da <__ieee754_pow+0x42>
 801a3ca:	45a0      	cmp	r8, r4
 801a3cc:	dc0d      	bgt.n	801a3ea <__ieee754_pow+0x52>
 801a3ce:	e001      	b.n	801a3d4 <__ieee754_pow+0x3c>
 801a3d0:	4598      	cmp	r8, r3
 801a3d2:	dc02      	bgt.n	801a3da <__ieee754_pow+0x42>
 801a3d4:	4598      	cmp	r8, r3
 801a3d6:	d10e      	bne.n	801a3f6 <__ieee754_pow+0x5e>
 801a3d8:	b16a      	cbz	r2, 801a3f6 <__ieee754_pow+0x5e>
 801a3da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a3de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a3e2:	ea54 030a 	orrs.w	r3, r4, sl
 801a3e6:	f000 84a4 	beq.w	801ad32 <__ieee754_pow+0x99a>
 801a3ea:	486e      	ldr	r0, [pc, #440]	; (801a5a4 <__ieee754_pow+0x20c>)
 801a3ec:	b011      	add	sp, #68	; 0x44
 801a3ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3f2:	f000 bda5 	b.w	801af40 <nan>
 801a3f6:	2d00      	cmp	r5, #0
 801a3f8:	da53      	bge.n	801a4a2 <__ieee754_pow+0x10a>
 801a3fa:	4b6b      	ldr	r3, [pc, #428]	; (801a5a8 <__ieee754_pow+0x210>)
 801a3fc:	4598      	cmp	r8, r3
 801a3fe:	dc4d      	bgt.n	801a49c <__ieee754_pow+0x104>
 801a400:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801a404:	4598      	cmp	r8, r3
 801a406:	dd4c      	ble.n	801a4a2 <__ieee754_pow+0x10a>
 801a408:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a40c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a410:	2b14      	cmp	r3, #20
 801a412:	dd26      	ble.n	801a462 <__ieee754_pow+0xca>
 801a414:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801a418:	fa22 f103 	lsr.w	r1, r2, r3
 801a41c:	fa01 f303 	lsl.w	r3, r1, r3
 801a420:	4293      	cmp	r3, r2
 801a422:	d13e      	bne.n	801a4a2 <__ieee754_pow+0x10a>
 801a424:	f001 0101 	and.w	r1, r1, #1
 801a428:	f1c1 0b02 	rsb	fp, r1, #2
 801a42c:	2a00      	cmp	r2, #0
 801a42e:	d15b      	bne.n	801a4e8 <__ieee754_pow+0x150>
 801a430:	4b5b      	ldr	r3, [pc, #364]	; (801a5a0 <__ieee754_pow+0x208>)
 801a432:	4598      	cmp	r8, r3
 801a434:	d124      	bne.n	801a480 <__ieee754_pow+0xe8>
 801a436:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a43a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a43e:	ea53 030a 	orrs.w	r3, r3, sl
 801a442:	f000 8476 	beq.w	801ad32 <__ieee754_pow+0x99a>
 801a446:	4b59      	ldr	r3, [pc, #356]	; (801a5ac <__ieee754_pow+0x214>)
 801a448:	429c      	cmp	r4, r3
 801a44a:	dd2d      	ble.n	801a4a8 <__ieee754_pow+0x110>
 801a44c:	f1b9 0f00 	cmp.w	r9, #0
 801a450:	f280 8473 	bge.w	801ad3a <__ieee754_pow+0x9a2>
 801a454:	2000      	movs	r0, #0
 801a456:	2100      	movs	r1, #0
 801a458:	ec41 0b10 	vmov	d0, r0, r1
 801a45c:	b011      	add	sp, #68	; 0x44
 801a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a462:	2a00      	cmp	r2, #0
 801a464:	d13e      	bne.n	801a4e4 <__ieee754_pow+0x14c>
 801a466:	f1c3 0314 	rsb	r3, r3, #20
 801a46a:	fa48 f103 	asr.w	r1, r8, r3
 801a46e:	fa01 f303 	lsl.w	r3, r1, r3
 801a472:	4543      	cmp	r3, r8
 801a474:	f040 8469 	bne.w	801ad4a <__ieee754_pow+0x9b2>
 801a478:	f001 0101 	and.w	r1, r1, #1
 801a47c:	f1c1 0b02 	rsb	fp, r1, #2
 801a480:	4b4b      	ldr	r3, [pc, #300]	; (801a5b0 <__ieee754_pow+0x218>)
 801a482:	4598      	cmp	r8, r3
 801a484:	d118      	bne.n	801a4b8 <__ieee754_pow+0x120>
 801a486:	f1b9 0f00 	cmp.w	r9, #0
 801a48a:	f280 845a 	bge.w	801ad42 <__ieee754_pow+0x9aa>
 801a48e:	4948      	ldr	r1, [pc, #288]	; (801a5b0 <__ieee754_pow+0x218>)
 801a490:	4632      	mov	r2, r6
 801a492:	463b      	mov	r3, r7
 801a494:	2000      	movs	r0, #0
 801a496:	f7e6 f963 	bl	8000760 <__aeabi_ddiv>
 801a49a:	e7dd      	b.n	801a458 <__ieee754_pow+0xc0>
 801a49c:	f04f 0b02 	mov.w	fp, #2
 801a4a0:	e7c4      	b.n	801a42c <__ieee754_pow+0x94>
 801a4a2:	f04f 0b00 	mov.w	fp, #0
 801a4a6:	e7c1      	b.n	801a42c <__ieee754_pow+0x94>
 801a4a8:	f1b9 0f00 	cmp.w	r9, #0
 801a4ac:	dad2      	bge.n	801a454 <__ieee754_pow+0xbc>
 801a4ae:	e9dd 0300 	ldrd	r0, r3, [sp]
 801a4b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a4b6:	e7cf      	b.n	801a458 <__ieee754_pow+0xc0>
 801a4b8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801a4bc:	d106      	bne.n	801a4cc <__ieee754_pow+0x134>
 801a4be:	4632      	mov	r2, r6
 801a4c0:	463b      	mov	r3, r7
 801a4c2:	4610      	mov	r0, r2
 801a4c4:	4619      	mov	r1, r3
 801a4c6:	f7e6 f821 	bl	800050c <__aeabi_dmul>
 801a4ca:	e7c5      	b.n	801a458 <__ieee754_pow+0xc0>
 801a4cc:	4b39      	ldr	r3, [pc, #228]	; (801a5b4 <__ieee754_pow+0x21c>)
 801a4ce:	4599      	cmp	r9, r3
 801a4d0:	d10a      	bne.n	801a4e8 <__ieee754_pow+0x150>
 801a4d2:	2d00      	cmp	r5, #0
 801a4d4:	db08      	blt.n	801a4e8 <__ieee754_pow+0x150>
 801a4d6:	ec47 6b10 	vmov	d0, r6, r7
 801a4da:	b011      	add	sp, #68	; 0x44
 801a4dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4e0:	f000 bc68 	b.w	801adb4 <__ieee754_sqrt>
 801a4e4:	f04f 0b00 	mov.w	fp, #0
 801a4e8:	ec47 6b10 	vmov	d0, r6, r7
 801a4ec:	f000 fd15 	bl	801af1a <fabs>
 801a4f0:	ec51 0b10 	vmov	r0, r1, d0
 801a4f4:	f1ba 0f00 	cmp.w	sl, #0
 801a4f8:	d127      	bne.n	801a54a <__ieee754_pow+0x1b2>
 801a4fa:	b124      	cbz	r4, 801a506 <__ieee754_pow+0x16e>
 801a4fc:	4b2c      	ldr	r3, [pc, #176]	; (801a5b0 <__ieee754_pow+0x218>)
 801a4fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801a502:	429a      	cmp	r2, r3
 801a504:	d121      	bne.n	801a54a <__ieee754_pow+0x1b2>
 801a506:	f1b9 0f00 	cmp.w	r9, #0
 801a50a:	da05      	bge.n	801a518 <__ieee754_pow+0x180>
 801a50c:	4602      	mov	r2, r0
 801a50e:	460b      	mov	r3, r1
 801a510:	2000      	movs	r0, #0
 801a512:	4927      	ldr	r1, [pc, #156]	; (801a5b0 <__ieee754_pow+0x218>)
 801a514:	f7e6 f924 	bl	8000760 <__aeabi_ddiv>
 801a518:	2d00      	cmp	r5, #0
 801a51a:	da9d      	bge.n	801a458 <__ieee754_pow+0xc0>
 801a51c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a520:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a524:	ea54 030b 	orrs.w	r3, r4, fp
 801a528:	d108      	bne.n	801a53c <__ieee754_pow+0x1a4>
 801a52a:	4602      	mov	r2, r0
 801a52c:	460b      	mov	r3, r1
 801a52e:	4610      	mov	r0, r2
 801a530:	4619      	mov	r1, r3
 801a532:	f7e5 fe33 	bl	800019c <__aeabi_dsub>
 801a536:	4602      	mov	r2, r0
 801a538:	460b      	mov	r3, r1
 801a53a:	e7ac      	b.n	801a496 <__ieee754_pow+0xfe>
 801a53c:	f1bb 0f01 	cmp.w	fp, #1
 801a540:	d18a      	bne.n	801a458 <__ieee754_pow+0xc0>
 801a542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a546:	4619      	mov	r1, r3
 801a548:	e786      	b.n	801a458 <__ieee754_pow+0xc0>
 801a54a:	0fed      	lsrs	r5, r5, #31
 801a54c:	1e6b      	subs	r3, r5, #1
 801a54e:	930d      	str	r3, [sp, #52]	; 0x34
 801a550:	ea5b 0303 	orrs.w	r3, fp, r3
 801a554:	d102      	bne.n	801a55c <__ieee754_pow+0x1c4>
 801a556:	4632      	mov	r2, r6
 801a558:	463b      	mov	r3, r7
 801a55a:	e7e8      	b.n	801a52e <__ieee754_pow+0x196>
 801a55c:	4b16      	ldr	r3, [pc, #88]	; (801a5b8 <__ieee754_pow+0x220>)
 801a55e:	4598      	cmp	r8, r3
 801a560:	f340 80fe 	ble.w	801a760 <__ieee754_pow+0x3c8>
 801a564:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a568:	4598      	cmp	r8, r3
 801a56a:	dd0a      	ble.n	801a582 <__ieee754_pow+0x1ea>
 801a56c:	4b0f      	ldr	r3, [pc, #60]	; (801a5ac <__ieee754_pow+0x214>)
 801a56e:	429c      	cmp	r4, r3
 801a570:	dc0d      	bgt.n	801a58e <__ieee754_pow+0x1f6>
 801a572:	f1b9 0f00 	cmp.w	r9, #0
 801a576:	f6bf af6d 	bge.w	801a454 <__ieee754_pow+0xbc>
 801a57a:	a307      	add	r3, pc, #28	; (adr r3, 801a598 <__ieee754_pow+0x200>)
 801a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a580:	e79f      	b.n	801a4c2 <__ieee754_pow+0x12a>
 801a582:	4b0e      	ldr	r3, [pc, #56]	; (801a5bc <__ieee754_pow+0x224>)
 801a584:	429c      	cmp	r4, r3
 801a586:	ddf4      	ble.n	801a572 <__ieee754_pow+0x1da>
 801a588:	4b09      	ldr	r3, [pc, #36]	; (801a5b0 <__ieee754_pow+0x218>)
 801a58a:	429c      	cmp	r4, r3
 801a58c:	dd18      	ble.n	801a5c0 <__ieee754_pow+0x228>
 801a58e:	f1b9 0f00 	cmp.w	r9, #0
 801a592:	dcf2      	bgt.n	801a57a <__ieee754_pow+0x1e2>
 801a594:	e75e      	b.n	801a454 <__ieee754_pow+0xbc>
 801a596:	bf00      	nop
 801a598:	8800759c 	.word	0x8800759c
 801a59c:	7e37e43c 	.word	0x7e37e43c
 801a5a0:	7ff00000 	.word	0x7ff00000
 801a5a4:	0801c3d1 	.word	0x0801c3d1
 801a5a8:	433fffff 	.word	0x433fffff
 801a5ac:	3fefffff 	.word	0x3fefffff
 801a5b0:	3ff00000 	.word	0x3ff00000
 801a5b4:	3fe00000 	.word	0x3fe00000
 801a5b8:	41e00000 	.word	0x41e00000
 801a5bc:	3feffffe 	.word	0x3feffffe
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	4b63      	ldr	r3, [pc, #396]	; (801a750 <__ieee754_pow+0x3b8>)
 801a5c4:	f7e5 fdea 	bl	800019c <__aeabi_dsub>
 801a5c8:	a355      	add	r3, pc, #340	; (adr r3, 801a720 <__ieee754_pow+0x388>)
 801a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ce:	4604      	mov	r4, r0
 801a5d0:	460d      	mov	r5, r1
 801a5d2:	f7e5 ff9b 	bl	800050c <__aeabi_dmul>
 801a5d6:	a354      	add	r3, pc, #336	; (adr r3, 801a728 <__ieee754_pow+0x390>)
 801a5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5dc:	4606      	mov	r6, r0
 801a5de:	460f      	mov	r7, r1
 801a5e0:	4620      	mov	r0, r4
 801a5e2:	4629      	mov	r1, r5
 801a5e4:	f7e5 ff92 	bl	800050c <__aeabi_dmul>
 801a5e8:	2200      	movs	r2, #0
 801a5ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a5ee:	4b59      	ldr	r3, [pc, #356]	; (801a754 <__ieee754_pow+0x3bc>)
 801a5f0:	4620      	mov	r0, r4
 801a5f2:	4629      	mov	r1, r5
 801a5f4:	f7e5 ff8a 	bl	800050c <__aeabi_dmul>
 801a5f8:	4602      	mov	r2, r0
 801a5fa:	460b      	mov	r3, r1
 801a5fc:	a14c      	add	r1, pc, #304	; (adr r1, 801a730 <__ieee754_pow+0x398>)
 801a5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a602:	f7e5 fdcb 	bl	800019c <__aeabi_dsub>
 801a606:	4622      	mov	r2, r4
 801a608:	462b      	mov	r3, r5
 801a60a:	f7e5 ff7f 	bl	800050c <__aeabi_dmul>
 801a60e:	4602      	mov	r2, r0
 801a610:	460b      	mov	r3, r1
 801a612:	2000      	movs	r0, #0
 801a614:	4950      	ldr	r1, [pc, #320]	; (801a758 <__ieee754_pow+0x3c0>)
 801a616:	f7e5 fdc1 	bl	800019c <__aeabi_dsub>
 801a61a:	4622      	mov	r2, r4
 801a61c:	462b      	mov	r3, r5
 801a61e:	4680      	mov	r8, r0
 801a620:	4689      	mov	r9, r1
 801a622:	4620      	mov	r0, r4
 801a624:	4629      	mov	r1, r5
 801a626:	f7e5 ff71 	bl	800050c <__aeabi_dmul>
 801a62a:	4602      	mov	r2, r0
 801a62c:	460b      	mov	r3, r1
 801a62e:	4640      	mov	r0, r8
 801a630:	4649      	mov	r1, r9
 801a632:	f7e5 ff6b 	bl	800050c <__aeabi_dmul>
 801a636:	a340      	add	r3, pc, #256	; (adr r3, 801a738 <__ieee754_pow+0x3a0>)
 801a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a63c:	f7e5 ff66 	bl	800050c <__aeabi_dmul>
 801a640:	4602      	mov	r2, r0
 801a642:	460b      	mov	r3, r1
 801a644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a648:	f7e5 fda8 	bl	800019c <__aeabi_dsub>
 801a64c:	4602      	mov	r2, r0
 801a64e:	460b      	mov	r3, r1
 801a650:	4604      	mov	r4, r0
 801a652:	460d      	mov	r5, r1
 801a654:	4630      	mov	r0, r6
 801a656:	4639      	mov	r1, r7
 801a658:	f7e5 fda2 	bl	80001a0 <__adddf3>
 801a65c:	2000      	movs	r0, #0
 801a65e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a662:	4632      	mov	r2, r6
 801a664:	463b      	mov	r3, r7
 801a666:	f7e5 fd99 	bl	800019c <__aeabi_dsub>
 801a66a:	4602      	mov	r2, r0
 801a66c:	460b      	mov	r3, r1
 801a66e:	4620      	mov	r0, r4
 801a670:	4629      	mov	r1, r5
 801a672:	f7e5 fd93 	bl	800019c <__aeabi_dsub>
 801a676:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a678:	f10b 33ff 	add.w	r3, fp, #4294967295
 801a67c:	4313      	orrs	r3, r2
 801a67e:	4606      	mov	r6, r0
 801a680:	460f      	mov	r7, r1
 801a682:	f040 81eb 	bne.w	801aa5c <__ieee754_pow+0x6c4>
 801a686:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801a740 <__ieee754_pow+0x3a8>
 801a68a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801a68e:	2400      	movs	r4, #0
 801a690:	4622      	mov	r2, r4
 801a692:	462b      	mov	r3, r5
 801a694:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a698:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a69c:	f7e5 fd7e 	bl	800019c <__aeabi_dsub>
 801a6a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a6a4:	f7e5 ff32 	bl	800050c <__aeabi_dmul>
 801a6a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a6ac:	4680      	mov	r8, r0
 801a6ae:	4689      	mov	r9, r1
 801a6b0:	4630      	mov	r0, r6
 801a6b2:	4639      	mov	r1, r7
 801a6b4:	f7e5 ff2a 	bl	800050c <__aeabi_dmul>
 801a6b8:	4602      	mov	r2, r0
 801a6ba:	460b      	mov	r3, r1
 801a6bc:	4640      	mov	r0, r8
 801a6be:	4649      	mov	r1, r9
 801a6c0:	f7e5 fd6e 	bl	80001a0 <__adddf3>
 801a6c4:	4622      	mov	r2, r4
 801a6c6:	462b      	mov	r3, r5
 801a6c8:	4680      	mov	r8, r0
 801a6ca:	4689      	mov	r9, r1
 801a6cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a6d0:	f7e5 ff1c 	bl	800050c <__aeabi_dmul>
 801a6d4:	460b      	mov	r3, r1
 801a6d6:	4604      	mov	r4, r0
 801a6d8:	460d      	mov	r5, r1
 801a6da:	4602      	mov	r2, r0
 801a6dc:	4649      	mov	r1, r9
 801a6de:	4640      	mov	r0, r8
 801a6e0:	e9cd 4500 	strd	r4, r5, [sp]
 801a6e4:	f7e5 fd5c 	bl	80001a0 <__adddf3>
 801a6e8:	4b1c      	ldr	r3, [pc, #112]	; (801a75c <__ieee754_pow+0x3c4>)
 801a6ea:	4299      	cmp	r1, r3
 801a6ec:	4606      	mov	r6, r0
 801a6ee:	460f      	mov	r7, r1
 801a6f0:	468b      	mov	fp, r1
 801a6f2:	f340 82f7 	ble.w	801ace4 <__ieee754_pow+0x94c>
 801a6f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801a6fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801a6fe:	4303      	orrs	r3, r0
 801a700:	f000 81ea 	beq.w	801aad8 <__ieee754_pow+0x740>
 801a704:	a310      	add	r3, pc, #64	; (adr r3, 801a748 <__ieee754_pow+0x3b0>)
 801a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a70a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a70e:	f7e5 fefd 	bl	800050c <__aeabi_dmul>
 801a712:	a30d      	add	r3, pc, #52	; (adr r3, 801a748 <__ieee754_pow+0x3b0>)
 801a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a718:	e6d5      	b.n	801a4c6 <__ieee754_pow+0x12e>
 801a71a:	bf00      	nop
 801a71c:	f3af 8000 	nop.w
 801a720:	60000000 	.word	0x60000000
 801a724:	3ff71547 	.word	0x3ff71547
 801a728:	f85ddf44 	.word	0xf85ddf44
 801a72c:	3e54ae0b 	.word	0x3e54ae0b
 801a730:	55555555 	.word	0x55555555
 801a734:	3fd55555 	.word	0x3fd55555
 801a738:	652b82fe 	.word	0x652b82fe
 801a73c:	3ff71547 	.word	0x3ff71547
 801a740:	00000000 	.word	0x00000000
 801a744:	bff00000 	.word	0xbff00000
 801a748:	8800759c 	.word	0x8800759c
 801a74c:	7e37e43c 	.word	0x7e37e43c
 801a750:	3ff00000 	.word	0x3ff00000
 801a754:	3fd00000 	.word	0x3fd00000
 801a758:	3fe00000 	.word	0x3fe00000
 801a75c:	408fffff 	.word	0x408fffff
 801a760:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801a764:	f04f 0200 	mov.w	r2, #0
 801a768:	da05      	bge.n	801a776 <__ieee754_pow+0x3de>
 801a76a:	4bd3      	ldr	r3, [pc, #844]	; (801aab8 <__ieee754_pow+0x720>)
 801a76c:	f7e5 fece 	bl	800050c <__aeabi_dmul>
 801a770:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801a774:	460c      	mov	r4, r1
 801a776:	1523      	asrs	r3, r4, #20
 801a778:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a77c:	4413      	add	r3, r2
 801a77e:	9309      	str	r3, [sp, #36]	; 0x24
 801a780:	4bce      	ldr	r3, [pc, #824]	; (801aabc <__ieee754_pow+0x724>)
 801a782:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a786:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801a78a:	429c      	cmp	r4, r3
 801a78c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a790:	dd08      	ble.n	801a7a4 <__ieee754_pow+0x40c>
 801a792:	4bcb      	ldr	r3, [pc, #812]	; (801aac0 <__ieee754_pow+0x728>)
 801a794:	429c      	cmp	r4, r3
 801a796:	f340 815e 	ble.w	801aa56 <__ieee754_pow+0x6be>
 801a79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a79c:	3301      	adds	r3, #1
 801a79e:	9309      	str	r3, [sp, #36]	; 0x24
 801a7a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801a7a4:	f04f 0a00 	mov.w	sl, #0
 801a7a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801a7ac:	930c      	str	r3, [sp, #48]	; 0x30
 801a7ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a7b0:	4bc4      	ldr	r3, [pc, #784]	; (801aac4 <__ieee754_pow+0x72c>)
 801a7b2:	4413      	add	r3, r2
 801a7b4:	ed93 7b00 	vldr	d7, [r3]
 801a7b8:	4629      	mov	r1, r5
 801a7ba:	ec53 2b17 	vmov	r2, r3, d7
 801a7be:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a7c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a7c6:	f7e5 fce9 	bl	800019c <__aeabi_dsub>
 801a7ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a7ce:	4606      	mov	r6, r0
 801a7d0:	460f      	mov	r7, r1
 801a7d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a7d6:	f7e5 fce3 	bl	80001a0 <__adddf3>
 801a7da:	4602      	mov	r2, r0
 801a7dc:	460b      	mov	r3, r1
 801a7de:	2000      	movs	r0, #0
 801a7e0:	49b9      	ldr	r1, [pc, #740]	; (801aac8 <__ieee754_pow+0x730>)
 801a7e2:	f7e5 ffbd 	bl	8000760 <__aeabi_ddiv>
 801a7e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801a7ea:	4602      	mov	r2, r0
 801a7ec:	460b      	mov	r3, r1
 801a7ee:	4630      	mov	r0, r6
 801a7f0:	4639      	mov	r1, r7
 801a7f2:	f7e5 fe8b 	bl	800050c <__aeabi_dmul>
 801a7f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a7fa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801a7fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801a802:	2300      	movs	r3, #0
 801a804:	9302      	str	r3, [sp, #8]
 801a806:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801a80a:	106d      	asrs	r5, r5, #1
 801a80c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801a810:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801a814:	2200      	movs	r2, #0
 801a816:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801a81a:	4640      	mov	r0, r8
 801a81c:	4649      	mov	r1, r9
 801a81e:	4614      	mov	r4, r2
 801a820:	461d      	mov	r5, r3
 801a822:	f7e5 fe73 	bl	800050c <__aeabi_dmul>
 801a826:	4602      	mov	r2, r0
 801a828:	460b      	mov	r3, r1
 801a82a:	4630      	mov	r0, r6
 801a82c:	4639      	mov	r1, r7
 801a82e:	f7e5 fcb5 	bl	800019c <__aeabi_dsub>
 801a832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a836:	4606      	mov	r6, r0
 801a838:	460f      	mov	r7, r1
 801a83a:	4620      	mov	r0, r4
 801a83c:	4629      	mov	r1, r5
 801a83e:	f7e5 fcad 	bl	800019c <__aeabi_dsub>
 801a842:	4602      	mov	r2, r0
 801a844:	460b      	mov	r3, r1
 801a846:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a84a:	f7e5 fca7 	bl	800019c <__aeabi_dsub>
 801a84e:	4642      	mov	r2, r8
 801a850:	464b      	mov	r3, r9
 801a852:	f7e5 fe5b 	bl	800050c <__aeabi_dmul>
 801a856:	4602      	mov	r2, r0
 801a858:	460b      	mov	r3, r1
 801a85a:	4630      	mov	r0, r6
 801a85c:	4639      	mov	r1, r7
 801a85e:	f7e5 fc9d 	bl	800019c <__aeabi_dsub>
 801a862:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801a866:	f7e5 fe51 	bl	800050c <__aeabi_dmul>
 801a86a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a86e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a872:	4610      	mov	r0, r2
 801a874:	4619      	mov	r1, r3
 801a876:	f7e5 fe49 	bl	800050c <__aeabi_dmul>
 801a87a:	a37b      	add	r3, pc, #492	; (adr r3, 801aa68 <__ieee754_pow+0x6d0>)
 801a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a880:	4604      	mov	r4, r0
 801a882:	460d      	mov	r5, r1
 801a884:	f7e5 fe42 	bl	800050c <__aeabi_dmul>
 801a888:	a379      	add	r3, pc, #484	; (adr r3, 801aa70 <__ieee754_pow+0x6d8>)
 801a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a88e:	f7e5 fc87 	bl	80001a0 <__adddf3>
 801a892:	4622      	mov	r2, r4
 801a894:	462b      	mov	r3, r5
 801a896:	f7e5 fe39 	bl	800050c <__aeabi_dmul>
 801a89a:	a377      	add	r3, pc, #476	; (adr r3, 801aa78 <__ieee754_pow+0x6e0>)
 801a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8a0:	f7e5 fc7e 	bl	80001a0 <__adddf3>
 801a8a4:	4622      	mov	r2, r4
 801a8a6:	462b      	mov	r3, r5
 801a8a8:	f7e5 fe30 	bl	800050c <__aeabi_dmul>
 801a8ac:	a374      	add	r3, pc, #464	; (adr r3, 801aa80 <__ieee754_pow+0x6e8>)
 801a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8b2:	f7e5 fc75 	bl	80001a0 <__adddf3>
 801a8b6:	4622      	mov	r2, r4
 801a8b8:	462b      	mov	r3, r5
 801a8ba:	f7e5 fe27 	bl	800050c <__aeabi_dmul>
 801a8be:	a372      	add	r3, pc, #456	; (adr r3, 801aa88 <__ieee754_pow+0x6f0>)
 801a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c4:	f7e5 fc6c 	bl	80001a0 <__adddf3>
 801a8c8:	4622      	mov	r2, r4
 801a8ca:	462b      	mov	r3, r5
 801a8cc:	f7e5 fe1e 	bl	800050c <__aeabi_dmul>
 801a8d0:	a36f      	add	r3, pc, #444	; (adr r3, 801aa90 <__ieee754_pow+0x6f8>)
 801a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8d6:	f7e5 fc63 	bl	80001a0 <__adddf3>
 801a8da:	4622      	mov	r2, r4
 801a8dc:	4606      	mov	r6, r0
 801a8de:	460f      	mov	r7, r1
 801a8e0:	462b      	mov	r3, r5
 801a8e2:	4620      	mov	r0, r4
 801a8e4:	4629      	mov	r1, r5
 801a8e6:	f7e5 fe11 	bl	800050c <__aeabi_dmul>
 801a8ea:	4602      	mov	r2, r0
 801a8ec:	460b      	mov	r3, r1
 801a8ee:	4630      	mov	r0, r6
 801a8f0:	4639      	mov	r1, r7
 801a8f2:	f7e5 fe0b 	bl	800050c <__aeabi_dmul>
 801a8f6:	4642      	mov	r2, r8
 801a8f8:	4604      	mov	r4, r0
 801a8fa:	460d      	mov	r5, r1
 801a8fc:	464b      	mov	r3, r9
 801a8fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a902:	f7e5 fc4d 	bl	80001a0 <__adddf3>
 801a906:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a90a:	f7e5 fdff 	bl	800050c <__aeabi_dmul>
 801a90e:	4622      	mov	r2, r4
 801a910:	462b      	mov	r3, r5
 801a912:	f7e5 fc45 	bl	80001a0 <__adddf3>
 801a916:	4642      	mov	r2, r8
 801a918:	4606      	mov	r6, r0
 801a91a:	460f      	mov	r7, r1
 801a91c:	464b      	mov	r3, r9
 801a91e:	4640      	mov	r0, r8
 801a920:	4649      	mov	r1, r9
 801a922:	f7e5 fdf3 	bl	800050c <__aeabi_dmul>
 801a926:	2200      	movs	r2, #0
 801a928:	4b68      	ldr	r3, [pc, #416]	; (801aacc <__ieee754_pow+0x734>)
 801a92a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a92e:	f7e5 fc37 	bl	80001a0 <__adddf3>
 801a932:	4632      	mov	r2, r6
 801a934:	463b      	mov	r3, r7
 801a936:	f7e5 fc33 	bl	80001a0 <__adddf3>
 801a93a:	9802      	ldr	r0, [sp, #8]
 801a93c:	460d      	mov	r5, r1
 801a93e:	4604      	mov	r4, r0
 801a940:	4602      	mov	r2, r0
 801a942:	460b      	mov	r3, r1
 801a944:	4640      	mov	r0, r8
 801a946:	4649      	mov	r1, r9
 801a948:	f7e5 fde0 	bl	800050c <__aeabi_dmul>
 801a94c:	2200      	movs	r2, #0
 801a94e:	4680      	mov	r8, r0
 801a950:	4689      	mov	r9, r1
 801a952:	4b5e      	ldr	r3, [pc, #376]	; (801aacc <__ieee754_pow+0x734>)
 801a954:	4620      	mov	r0, r4
 801a956:	4629      	mov	r1, r5
 801a958:	f7e5 fc20 	bl	800019c <__aeabi_dsub>
 801a95c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a960:	f7e5 fc1c 	bl	800019c <__aeabi_dsub>
 801a964:	4602      	mov	r2, r0
 801a966:	460b      	mov	r3, r1
 801a968:	4630      	mov	r0, r6
 801a96a:	4639      	mov	r1, r7
 801a96c:	f7e5 fc16 	bl	800019c <__aeabi_dsub>
 801a970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a974:	f7e5 fdca 	bl	800050c <__aeabi_dmul>
 801a978:	4622      	mov	r2, r4
 801a97a:	4606      	mov	r6, r0
 801a97c:	460f      	mov	r7, r1
 801a97e:	462b      	mov	r3, r5
 801a980:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a984:	f7e5 fdc2 	bl	800050c <__aeabi_dmul>
 801a988:	4602      	mov	r2, r0
 801a98a:	460b      	mov	r3, r1
 801a98c:	4630      	mov	r0, r6
 801a98e:	4639      	mov	r1, r7
 801a990:	f7e5 fc06 	bl	80001a0 <__adddf3>
 801a994:	4606      	mov	r6, r0
 801a996:	460f      	mov	r7, r1
 801a998:	4602      	mov	r2, r0
 801a99a:	460b      	mov	r3, r1
 801a99c:	4640      	mov	r0, r8
 801a99e:	4649      	mov	r1, r9
 801a9a0:	f7e5 fbfe 	bl	80001a0 <__adddf3>
 801a9a4:	9802      	ldr	r0, [sp, #8]
 801a9a6:	a33c      	add	r3, pc, #240	; (adr r3, 801aa98 <__ieee754_pow+0x700>)
 801a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9ac:	4604      	mov	r4, r0
 801a9ae:	460d      	mov	r5, r1
 801a9b0:	f7e5 fdac 	bl	800050c <__aeabi_dmul>
 801a9b4:	4642      	mov	r2, r8
 801a9b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a9ba:	464b      	mov	r3, r9
 801a9bc:	4620      	mov	r0, r4
 801a9be:	4629      	mov	r1, r5
 801a9c0:	f7e5 fbec 	bl	800019c <__aeabi_dsub>
 801a9c4:	4602      	mov	r2, r0
 801a9c6:	460b      	mov	r3, r1
 801a9c8:	4630      	mov	r0, r6
 801a9ca:	4639      	mov	r1, r7
 801a9cc:	f7e5 fbe6 	bl	800019c <__aeabi_dsub>
 801a9d0:	a333      	add	r3, pc, #204	; (adr r3, 801aaa0 <__ieee754_pow+0x708>)
 801a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9d6:	f7e5 fd99 	bl	800050c <__aeabi_dmul>
 801a9da:	a333      	add	r3, pc, #204	; (adr r3, 801aaa8 <__ieee754_pow+0x710>)
 801a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9e0:	4606      	mov	r6, r0
 801a9e2:	460f      	mov	r7, r1
 801a9e4:	4620      	mov	r0, r4
 801a9e6:	4629      	mov	r1, r5
 801a9e8:	f7e5 fd90 	bl	800050c <__aeabi_dmul>
 801a9ec:	4602      	mov	r2, r0
 801a9ee:	460b      	mov	r3, r1
 801a9f0:	4630      	mov	r0, r6
 801a9f2:	4639      	mov	r1, r7
 801a9f4:	f7e5 fbd4 	bl	80001a0 <__adddf3>
 801a9f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a9fa:	4b35      	ldr	r3, [pc, #212]	; (801aad0 <__ieee754_pow+0x738>)
 801a9fc:	4413      	add	r3, r2
 801a9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa02:	f7e5 fbcd 	bl	80001a0 <__adddf3>
 801aa06:	4604      	mov	r4, r0
 801aa08:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa0a:	460d      	mov	r5, r1
 801aa0c:	f7e5 fd14 	bl	8000438 <__aeabi_i2d>
 801aa10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa12:	4b30      	ldr	r3, [pc, #192]	; (801aad4 <__ieee754_pow+0x73c>)
 801aa14:	4413      	add	r3, r2
 801aa16:	e9d3 8900 	ldrd	r8, r9, [r3]
 801aa1a:	4606      	mov	r6, r0
 801aa1c:	460f      	mov	r7, r1
 801aa1e:	4622      	mov	r2, r4
 801aa20:	462b      	mov	r3, r5
 801aa22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aa26:	f7e5 fbbb 	bl	80001a0 <__adddf3>
 801aa2a:	4642      	mov	r2, r8
 801aa2c:	464b      	mov	r3, r9
 801aa2e:	f7e5 fbb7 	bl	80001a0 <__adddf3>
 801aa32:	4632      	mov	r2, r6
 801aa34:	463b      	mov	r3, r7
 801aa36:	f7e5 fbb3 	bl	80001a0 <__adddf3>
 801aa3a:	9802      	ldr	r0, [sp, #8]
 801aa3c:	4632      	mov	r2, r6
 801aa3e:	463b      	mov	r3, r7
 801aa40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aa44:	f7e5 fbaa 	bl	800019c <__aeabi_dsub>
 801aa48:	4642      	mov	r2, r8
 801aa4a:	464b      	mov	r3, r9
 801aa4c:	f7e5 fba6 	bl	800019c <__aeabi_dsub>
 801aa50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801aa54:	e607      	b.n	801a666 <__ieee754_pow+0x2ce>
 801aa56:	f04f 0a01 	mov.w	sl, #1
 801aa5a:	e6a5      	b.n	801a7a8 <__ieee754_pow+0x410>
 801aa5c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801aab0 <__ieee754_pow+0x718>
 801aa60:	e613      	b.n	801a68a <__ieee754_pow+0x2f2>
 801aa62:	bf00      	nop
 801aa64:	f3af 8000 	nop.w
 801aa68:	4a454eef 	.word	0x4a454eef
 801aa6c:	3fca7e28 	.word	0x3fca7e28
 801aa70:	93c9db65 	.word	0x93c9db65
 801aa74:	3fcd864a 	.word	0x3fcd864a
 801aa78:	a91d4101 	.word	0xa91d4101
 801aa7c:	3fd17460 	.word	0x3fd17460
 801aa80:	518f264d 	.word	0x518f264d
 801aa84:	3fd55555 	.word	0x3fd55555
 801aa88:	db6fabff 	.word	0xdb6fabff
 801aa8c:	3fdb6db6 	.word	0x3fdb6db6
 801aa90:	33333303 	.word	0x33333303
 801aa94:	3fe33333 	.word	0x3fe33333
 801aa98:	e0000000 	.word	0xe0000000
 801aa9c:	3feec709 	.word	0x3feec709
 801aaa0:	dc3a03fd 	.word	0xdc3a03fd
 801aaa4:	3feec709 	.word	0x3feec709
 801aaa8:	145b01f5 	.word	0x145b01f5
 801aaac:	be3e2fe0 	.word	0xbe3e2fe0
 801aab0:	00000000 	.word	0x00000000
 801aab4:	3ff00000 	.word	0x3ff00000
 801aab8:	43400000 	.word	0x43400000
 801aabc:	0003988e 	.word	0x0003988e
 801aac0:	000bb679 	.word	0x000bb679
 801aac4:	0801c3d8 	.word	0x0801c3d8
 801aac8:	3ff00000 	.word	0x3ff00000
 801aacc:	40080000 	.word	0x40080000
 801aad0:	0801c3f8 	.word	0x0801c3f8
 801aad4:	0801c3e8 	.word	0x0801c3e8
 801aad8:	a3b4      	add	r3, pc, #720	; (adr r3, 801adac <__ieee754_pow+0xa14>)
 801aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aade:	4640      	mov	r0, r8
 801aae0:	4649      	mov	r1, r9
 801aae2:	f7e5 fb5d 	bl	80001a0 <__adddf3>
 801aae6:	4622      	mov	r2, r4
 801aae8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aaec:	462b      	mov	r3, r5
 801aaee:	4630      	mov	r0, r6
 801aaf0:	4639      	mov	r1, r7
 801aaf2:	f7e5 fb53 	bl	800019c <__aeabi_dsub>
 801aaf6:	4602      	mov	r2, r0
 801aaf8:	460b      	mov	r3, r1
 801aafa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aafe:	f7e5 ff95 	bl	8000a2c <__aeabi_dcmpgt>
 801ab02:	2800      	cmp	r0, #0
 801ab04:	f47f adfe 	bne.w	801a704 <__ieee754_pow+0x36c>
 801ab08:	4aa3      	ldr	r2, [pc, #652]	; (801ad98 <__ieee754_pow+0xa00>)
 801ab0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ab0e:	4293      	cmp	r3, r2
 801ab10:	f340 810a 	ble.w	801ad28 <__ieee754_pow+0x990>
 801ab14:	151b      	asrs	r3, r3, #20
 801ab16:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ab1a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ab1e:	fa4a f303 	asr.w	r3, sl, r3
 801ab22:	445b      	add	r3, fp
 801ab24:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ab28:	4e9c      	ldr	r6, [pc, #624]	; (801ad9c <__ieee754_pow+0xa04>)
 801ab2a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ab2e:	4116      	asrs	r6, r2
 801ab30:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801ab34:	2000      	movs	r0, #0
 801ab36:	ea23 0106 	bic.w	r1, r3, r6
 801ab3a:	f1c2 0214 	rsb	r2, r2, #20
 801ab3e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ab42:	fa4a fa02 	asr.w	sl, sl, r2
 801ab46:	f1bb 0f00 	cmp.w	fp, #0
 801ab4a:	4602      	mov	r2, r0
 801ab4c:	460b      	mov	r3, r1
 801ab4e:	4620      	mov	r0, r4
 801ab50:	4629      	mov	r1, r5
 801ab52:	bfb8      	it	lt
 801ab54:	f1ca 0a00 	rsblt	sl, sl, #0
 801ab58:	f7e5 fb20 	bl	800019c <__aeabi_dsub>
 801ab5c:	e9cd 0100 	strd	r0, r1, [sp]
 801ab60:	4642      	mov	r2, r8
 801ab62:	464b      	mov	r3, r9
 801ab64:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ab68:	f7e5 fb1a 	bl	80001a0 <__adddf3>
 801ab6c:	2000      	movs	r0, #0
 801ab6e:	a378      	add	r3, pc, #480	; (adr r3, 801ad50 <__ieee754_pow+0x9b8>)
 801ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab74:	4604      	mov	r4, r0
 801ab76:	460d      	mov	r5, r1
 801ab78:	f7e5 fcc8 	bl	800050c <__aeabi_dmul>
 801ab7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ab80:	4606      	mov	r6, r0
 801ab82:	460f      	mov	r7, r1
 801ab84:	4620      	mov	r0, r4
 801ab86:	4629      	mov	r1, r5
 801ab88:	f7e5 fb08 	bl	800019c <__aeabi_dsub>
 801ab8c:	4602      	mov	r2, r0
 801ab8e:	460b      	mov	r3, r1
 801ab90:	4640      	mov	r0, r8
 801ab92:	4649      	mov	r1, r9
 801ab94:	f7e5 fb02 	bl	800019c <__aeabi_dsub>
 801ab98:	a36f      	add	r3, pc, #444	; (adr r3, 801ad58 <__ieee754_pow+0x9c0>)
 801ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab9e:	f7e5 fcb5 	bl	800050c <__aeabi_dmul>
 801aba2:	a36f      	add	r3, pc, #444	; (adr r3, 801ad60 <__ieee754_pow+0x9c8>)
 801aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba8:	4680      	mov	r8, r0
 801abaa:	4689      	mov	r9, r1
 801abac:	4620      	mov	r0, r4
 801abae:	4629      	mov	r1, r5
 801abb0:	f7e5 fcac 	bl	800050c <__aeabi_dmul>
 801abb4:	4602      	mov	r2, r0
 801abb6:	460b      	mov	r3, r1
 801abb8:	4640      	mov	r0, r8
 801abba:	4649      	mov	r1, r9
 801abbc:	f7e5 faf0 	bl	80001a0 <__adddf3>
 801abc0:	4604      	mov	r4, r0
 801abc2:	460d      	mov	r5, r1
 801abc4:	4602      	mov	r2, r0
 801abc6:	460b      	mov	r3, r1
 801abc8:	4630      	mov	r0, r6
 801abca:	4639      	mov	r1, r7
 801abcc:	f7e5 fae8 	bl	80001a0 <__adddf3>
 801abd0:	4632      	mov	r2, r6
 801abd2:	463b      	mov	r3, r7
 801abd4:	4680      	mov	r8, r0
 801abd6:	4689      	mov	r9, r1
 801abd8:	f7e5 fae0 	bl	800019c <__aeabi_dsub>
 801abdc:	4602      	mov	r2, r0
 801abde:	460b      	mov	r3, r1
 801abe0:	4620      	mov	r0, r4
 801abe2:	4629      	mov	r1, r5
 801abe4:	f7e5 fada 	bl	800019c <__aeabi_dsub>
 801abe8:	4642      	mov	r2, r8
 801abea:	4606      	mov	r6, r0
 801abec:	460f      	mov	r7, r1
 801abee:	464b      	mov	r3, r9
 801abf0:	4640      	mov	r0, r8
 801abf2:	4649      	mov	r1, r9
 801abf4:	f7e5 fc8a 	bl	800050c <__aeabi_dmul>
 801abf8:	a35b      	add	r3, pc, #364	; (adr r3, 801ad68 <__ieee754_pow+0x9d0>)
 801abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abfe:	4604      	mov	r4, r0
 801ac00:	460d      	mov	r5, r1
 801ac02:	f7e5 fc83 	bl	800050c <__aeabi_dmul>
 801ac06:	a35a      	add	r3, pc, #360	; (adr r3, 801ad70 <__ieee754_pow+0x9d8>)
 801ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac0c:	f7e5 fac6 	bl	800019c <__aeabi_dsub>
 801ac10:	4622      	mov	r2, r4
 801ac12:	462b      	mov	r3, r5
 801ac14:	f7e5 fc7a 	bl	800050c <__aeabi_dmul>
 801ac18:	a357      	add	r3, pc, #348	; (adr r3, 801ad78 <__ieee754_pow+0x9e0>)
 801ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac1e:	f7e5 fabf 	bl	80001a0 <__adddf3>
 801ac22:	4622      	mov	r2, r4
 801ac24:	462b      	mov	r3, r5
 801ac26:	f7e5 fc71 	bl	800050c <__aeabi_dmul>
 801ac2a:	a355      	add	r3, pc, #340	; (adr r3, 801ad80 <__ieee754_pow+0x9e8>)
 801ac2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac30:	f7e5 fab4 	bl	800019c <__aeabi_dsub>
 801ac34:	4622      	mov	r2, r4
 801ac36:	462b      	mov	r3, r5
 801ac38:	f7e5 fc68 	bl	800050c <__aeabi_dmul>
 801ac3c:	a352      	add	r3, pc, #328	; (adr r3, 801ad88 <__ieee754_pow+0x9f0>)
 801ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac42:	f7e5 faad 	bl	80001a0 <__adddf3>
 801ac46:	4622      	mov	r2, r4
 801ac48:	462b      	mov	r3, r5
 801ac4a:	f7e5 fc5f 	bl	800050c <__aeabi_dmul>
 801ac4e:	4602      	mov	r2, r0
 801ac50:	460b      	mov	r3, r1
 801ac52:	4640      	mov	r0, r8
 801ac54:	4649      	mov	r1, r9
 801ac56:	f7e5 faa1 	bl	800019c <__aeabi_dsub>
 801ac5a:	4604      	mov	r4, r0
 801ac5c:	460d      	mov	r5, r1
 801ac5e:	4602      	mov	r2, r0
 801ac60:	460b      	mov	r3, r1
 801ac62:	4640      	mov	r0, r8
 801ac64:	4649      	mov	r1, r9
 801ac66:	f7e5 fc51 	bl	800050c <__aeabi_dmul>
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	e9cd 0100 	strd	r0, r1, [sp]
 801ac70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ac74:	4620      	mov	r0, r4
 801ac76:	4629      	mov	r1, r5
 801ac78:	f7e5 fa90 	bl	800019c <__aeabi_dsub>
 801ac7c:	4602      	mov	r2, r0
 801ac7e:	460b      	mov	r3, r1
 801ac80:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ac84:	f7e5 fd6c 	bl	8000760 <__aeabi_ddiv>
 801ac88:	4632      	mov	r2, r6
 801ac8a:	4604      	mov	r4, r0
 801ac8c:	460d      	mov	r5, r1
 801ac8e:	463b      	mov	r3, r7
 801ac90:	4640      	mov	r0, r8
 801ac92:	4649      	mov	r1, r9
 801ac94:	f7e5 fc3a 	bl	800050c <__aeabi_dmul>
 801ac98:	4632      	mov	r2, r6
 801ac9a:	463b      	mov	r3, r7
 801ac9c:	f7e5 fa80 	bl	80001a0 <__adddf3>
 801aca0:	4602      	mov	r2, r0
 801aca2:	460b      	mov	r3, r1
 801aca4:	4620      	mov	r0, r4
 801aca6:	4629      	mov	r1, r5
 801aca8:	f7e5 fa78 	bl	800019c <__aeabi_dsub>
 801acac:	4642      	mov	r2, r8
 801acae:	464b      	mov	r3, r9
 801acb0:	f7e5 fa74 	bl	800019c <__aeabi_dsub>
 801acb4:	4602      	mov	r2, r0
 801acb6:	460b      	mov	r3, r1
 801acb8:	2000      	movs	r0, #0
 801acba:	4939      	ldr	r1, [pc, #228]	; (801ada0 <__ieee754_pow+0xa08>)
 801acbc:	f7e5 fa6e 	bl	800019c <__aeabi_dsub>
 801acc0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801acc4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801acc8:	4602      	mov	r2, r0
 801acca:	460b      	mov	r3, r1
 801accc:	da2f      	bge.n	801ad2e <__ieee754_pow+0x996>
 801acce:	4650      	mov	r0, sl
 801acd0:	ec43 2b10 	vmov	d0, r2, r3
 801acd4:	f000 f9c0 	bl	801b058 <scalbn>
 801acd8:	ec51 0b10 	vmov	r0, r1, d0
 801acdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ace0:	f7ff bbf1 	b.w	801a4c6 <__ieee754_pow+0x12e>
 801ace4:	4b2f      	ldr	r3, [pc, #188]	; (801ada4 <__ieee754_pow+0xa0c>)
 801ace6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801acea:	429e      	cmp	r6, r3
 801acec:	f77f af0c 	ble.w	801ab08 <__ieee754_pow+0x770>
 801acf0:	4b2d      	ldr	r3, [pc, #180]	; (801ada8 <__ieee754_pow+0xa10>)
 801acf2:	440b      	add	r3, r1
 801acf4:	4303      	orrs	r3, r0
 801acf6:	d00b      	beq.n	801ad10 <__ieee754_pow+0x978>
 801acf8:	a325      	add	r3, pc, #148	; (adr r3, 801ad90 <__ieee754_pow+0x9f8>)
 801acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ad02:	f7e5 fc03 	bl	800050c <__aeabi_dmul>
 801ad06:	a322      	add	r3, pc, #136	; (adr r3, 801ad90 <__ieee754_pow+0x9f8>)
 801ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad0c:	f7ff bbdb 	b.w	801a4c6 <__ieee754_pow+0x12e>
 801ad10:	4622      	mov	r2, r4
 801ad12:	462b      	mov	r3, r5
 801ad14:	f7e5 fa42 	bl	800019c <__aeabi_dsub>
 801ad18:	4642      	mov	r2, r8
 801ad1a:	464b      	mov	r3, r9
 801ad1c:	f7e5 fe7c 	bl	8000a18 <__aeabi_dcmpge>
 801ad20:	2800      	cmp	r0, #0
 801ad22:	f43f aef1 	beq.w	801ab08 <__ieee754_pow+0x770>
 801ad26:	e7e7      	b.n	801acf8 <__ieee754_pow+0x960>
 801ad28:	f04f 0a00 	mov.w	sl, #0
 801ad2c:	e718      	b.n	801ab60 <__ieee754_pow+0x7c8>
 801ad2e:	4621      	mov	r1, r4
 801ad30:	e7d4      	b.n	801acdc <__ieee754_pow+0x944>
 801ad32:	2000      	movs	r0, #0
 801ad34:	491a      	ldr	r1, [pc, #104]	; (801ada0 <__ieee754_pow+0xa08>)
 801ad36:	f7ff bb8f 	b.w	801a458 <__ieee754_pow+0xc0>
 801ad3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ad3e:	f7ff bb8b 	b.w	801a458 <__ieee754_pow+0xc0>
 801ad42:	4630      	mov	r0, r6
 801ad44:	4639      	mov	r1, r7
 801ad46:	f7ff bb87 	b.w	801a458 <__ieee754_pow+0xc0>
 801ad4a:	4693      	mov	fp, r2
 801ad4c:	f7ff bb98 	b.w	801a480 <__ieee754_pow+0xe8>
 801ad50:	00000000 	.word	0x00000000
 801ad54:	3fe62e43 	.word	0x3fe62e43
 801ad58:	fefa39ef 	.word	0xfefa39ef
 801ad5c:	3fe62e42 	.word	0x3fe62e42
 801ad60:	0ca86c39 	.word	0x0ca86c39
 801ad64:	be205c61 	.word	0xbe205c61
 801ad68:	72bea4d0 	.word	0x72bea4d0
 801ad6c:	3e663769 	.word	0x3e663769
 801ad70:	c5d26bf1 	.word	0xc5d26bf1
 801ad74:	3ebbbd41 	.word	0x3ebbbd41
 801ad78:	af25de2c 	.word	0xaf25de2c
 801ad7c:	3f11566a 	.word	0x3f11566a
 801ad80:	16bebd93 	.word	0x16bebd93
 801ad84:	3f66c16c 	.word	0x3f66c16c
 801ad88:	5555553e 	.word	0x5555553e
 801ad8c:	3fc55555 	.word	0x3fc55555
 801ad90:	c2f8f359 	.word	0xc2f8f359
 801ad94:	01a56e1f 	.word	0x01a56e1f
 801ad98:	3fe00000 	.word	0x3fe00000
 801ad9c:	000fffff 	.word	0x000fffff
 801ada0:	3ff00000 	.word	0x3ff00000
 801ada4:	4090cbff 	.word	0x4090cbff
 801ada8:	3f6f3400 	.word	0x3f6f3400
 801adac:	652b82fe 	.word	0x652b82fe
 801adb0:	3c971547 	.word	0x3c971547

0801adb4 <__ieee754_sqrt>:
 801adb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adb8:	4955      	ldr	r1, [pc, #340]	; (801af10 <__ieee754_sqrt+0x15c>)
 801adba:	ec55 4b10 	vmov	r4, r5, d0
 801adbe:	43a9      	bics	r1, r5
 801adc0:	462b      	mov	r3, r5
 801adc2:	462a      	mov	r2, r5
 801adc4:	d112      	bne.n	801adec <__ieee754_sqrt+0x38>
 801adc6:	ee10 2a10 	vmov	r2, s0
 801adca:	ee10 0a10 	vmov	r0, s0
 801adce:	4629      	mov	r1, r5
 801add0:	f7e5 fb9c 	bl	800050c <__aeabi_dmul>
 801add4:	4602      	mov	r2, r0
 801add6:	460b      	mov	r3, r1
 801add8:	4620      	mov	r0, r4
 801adda:	4629      	mov	r1, r5
 801addc:	f7e5 f9e0 	bl	80001a0 <__adddf3>
 801ade0:	4604      	mov	r4, r0
 801ade2:	460d      	mov	r5, r1
 801ade4:	ec45 4b10 	vmov	d0, r4, r5
 801ade8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adec:	2d00      	cmp	r5, #0
 801adee:	ee10 0a10 	vmov	r0, s0
 801adf2:	4621      	mov	r1, r4
 801adf4:	dc0f      	bgt.n	801ae16 <__ieee754_sqrt+0x62>
 801adf6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801adfa:	4330      	orrs	r0, r6
 801adfc:	d0f2      	beq.n	801ade4 <__ieee754_sqrt+0x30>
 801adfe:	b155      	cbz	r5, 801ae16 <__ieee754_sqrt+0x62>
 801ae00:	ee10 2a10 	vmov	r2, s0
 801ae04:	4620      	mov	r0, r4
 801ae06:	4629      	mov	r1, r5
 801ae08:	f7e5 f9c8 	bl	800019c <__aeabi_dsub>
 801ae0c:	4602      	mov	r2, r0
 801ae0e:	460b      	mov	r3, r1
 801ae10:	f7e5 fca6 	bl	8000760 <__aeabi_ddiv>
 801ae14:	e7e4      	b.n	801ade0 <__ieee754_sqrt+0x2c>
 801ae16:	151b      	asrs	r3, r3, #20
 801ae18:	d073      	beq.n	801af02 <__ieee754_sqrt+0x14e>
 801ae1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ae1e:	07dd      	lsls	r5, r3, #31
 801ae20:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801ae24:	bf48      	it	mi
 801ae26:	0fc8      	lsrmi	r0, r1, #31
 801ae28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801ae2c:	bf44      	itt	mi
 801ae2e:	0049      	lslmi	r1, r1, #1
 801ae30:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801ae34:	2500      	movs	r5, #0
 801ae36:	1058      	asrs	r0, r3, #1
 801ae38:	0fcb      	lsrs	r3, r1, #31
 801ae3a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801ae3e:	0049      	lsls	r1, r1, #1
 801ae40:	2316      	movs	r3, #22
 801ae42:	462c      	mov	r4, r5
 801ae44:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801ae48:	19a7      	adds	r7, r4, r6
 801ae4a:	4297      	cmp	r7, r2
 801ae4c:	bfde      	ittt	le
 801ae4e:	19bc      	addle	r4, r7, r6
 801ae50:	1bd2      	suble	r2, r2, r7
 801ae52:	19ad      	addle	r5, r5, r6
 801ae54:	0fcf      	lsrs	r7, r1, #31
 801ae56:	3b01      	subs	r3, #1
 801ae58:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801ae5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ae60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ae64:	d1f0      	bne.n	801ae48 <__ieee754_sqrt+0x94>
 801ae66:	f04f 0c20 	mov.w	ip, #32
 801ae6a:	469e      	mov	lr, r3
 801ae6c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801ae70:	42a2      	cmp	r2, r4
 801ae72:	eb06 070e 	add.w	r7, r6, lr
 801ae76:	dc02      	bgt.n	801ae7e <__ieee754_sqrt+0xca>
 801ae78:	d112      	bne.n	801aea0 <__ieee754_sqrt+0xec>
 801ae7a:	428f      	cmp	r7, r1
 801ae7c:	d810      	bhi.n	801aea0 <__ieee754_sqrt+0xec>
 801ae7e:	2f00      	cmp	r7, #0
 801ae80:	eb07 0e06 	add.w	lr, r7, r6
 801ae84:	da42      	bge.n	801af0c <__ieee754_sqrt+0x158>
 801ae86:	f1be 0f00 	cmp.w	lr, #0
 801ae8a:	db3f      	blt.n	801af0c <__ieee754_sqrt+0x158>
 801ae8c:	f104 0801 	add.w	r8, r4, #1
 801ae90:	1b12      	subs	r2, r2, r4
 801ae92:	428f      	cmp	r7, r1
 801ae94:	bf88      	it	hi
 801ae96:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ae9a:	1bc9      	subs	r1, r1, r7
 801ae9c:	4433      	add	r3, r6
 801ae9e:	4644      	mov	r4, r8
 801aea0:	0052      	lsls	r2, r2, #1
 801aea2:	f1bc 0c01 	subs.w	ip, ip, #1
 801aea6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801aeaa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801aeae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801aeb2:	d1dd      	bne.n	801ae70 <__ieee754_sqrt+0xbc>
 801aeb4:	430a      	orrs	r2, r1
 801aeb6:	d006      	beq.n	801aec6 <__ieee754_sqrt+0x112>
 801aeb8:	1c5c      	adds	r4, r3, #1
 801aeba:	bf13      	iteet	ne
 801aebc:	3301      	addne	r3, #1
 801aebe:	3501      	addeq	r5, #1
 801aec0:	4663      	moveq	r3, ip
 801aec2:	f023 0301 	bicne.w	r3, r3, #1
 801aec6:	106a      	asrs	r2, r5, #1
 801aec8:	085b      	lsrs	r3, r3, #1
 801aeca:	07e9      	lsls	r1, r5, #31
 801aecc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801aed0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801aed4:	bf48      	it	mi
 801aed6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801aeda:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801aede:	461c      	mov	r4, r3
 801aee0:	e780      	b.n	801ade4 <__ieee754_sqrt+0x30>
 801aee2:	0aca      	lsrs	r2, r1, #11
 801aee4:	3815      	subs	r0, #21
 801aee6:	0549      	lsls	r1, r1, #21
 801aee8:	2a00      	cmp	r2, #0
 801aeea:	d0fa      	beq.n	801aee2 <__ieee754_sqrt+0x12e>
 801aeec:	02d6      	lsls	r6, r2, #11
 801aeee:	d50a      	bpl.n	801af06 <__ieee754_sqrt+0x152>
 801aef0:	f1c3 0420 	rsb	r4, r3, #32
 801aef4:	fa21 f404 	lsr.w	r4, r1, r4
 801aef8:	1e5d      	subs	r5, r3, #1
 801aefa:	4099      	lsls	r1, r3
 801aefc:	4322      	orrs	r2, r4
 801aefe:	1b43      	subs	r3, r0, r5
 801af00:	e78b      	b.n	801ae1a <__ieee754_sqrt+0x66>
 801af02:	4618      	mov	r0, r3
 801af04:	e7f0      	b.n	801aee8 <__ieee754_sqrt+0x134>
 801af06:	0052      	lsls	r2, r2, #1
 801af08:	3301      	adds	r3, #1
 801af0a:	e7ef      	b.n	801aeec <__ieee754_sqrt+0x138>
 801af0c:	46a0      	mov	r8, r4
 801af0e:	e7bf      	b.n	801ae90 <__ieee754_sqrt+0xdc>
 801af10:	7ff00000 	.word	0x7ff00000

0801af14 <__ieee754_sqrtf>:
 801af14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801af18:	4770      	bx	lr

0801af1a <fabs>:
 801af1a:	ec51 0b10 	vmov	r0, r1, d0
 801af1e:	ee10 2a10 	vmov	r2, s0
 801af22:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801af26:	ec43 2b10 	vmov	d0, r2, r3
 801af2a:	4770      	bx	lr

0801af2c <finite>:
 801af2c:	ee10 3a90 	vmov	r3, s1
 801af30:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801af34:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801af38:	0fc0      	lsrs	r0, r0, #31
 801af3a:	4770      	bx	lr

0801af3c <matherr>:
 801af3c:	2000      	movs	r0, #0
 801af3e:	4770      	bx	lr

0801af40 <nan>:
 801af40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801af48 <nan+0x8>
 801af44:	4770      	bx	lr
 801af46:	bf00      	nop
 801af48:	00000000 	.word	0x00000000
 801af4c:	7ff80000 	.word	0x7ff80000

0801af50 <rint>:
 801af50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af52:	ec51 0b10 	vmov	r0, r1, d0
 801af56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801af5a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801af5e:	2e13      	cmp	r6, #19
 801af60:	460b      	mov	r3, r1
 801af62:	ee10 4a10 	vmov	r4, s0
 801af66:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801af6a:	dc56      	bgt.n	801b01a <rint+0xca>
 801af6c:	2e00      	cmp	r6, #0
 801af6e:	da2b      	bge.n	801afc8 <rint+0x78>
 801af70:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801af74:	4302      	orrs	r2, r0
 801af76:	d023      	beq.n	801afc0 <rint+0x70>
 801af78:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801af7c:	4302      	orrs	r2, r0
 801af7e:	4254      	negs	r4, r2
 801af80:	4314      	orrs	r4, r2
 801af82:	0c4b      	lsrs	r3, r1, #17
 801af84:	0b24      	lsrs	r4, r4, #12
 801af86:	045b      	lsls	r3, r3, #17
 801af88:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801af8c:	ea44 0103 	orr.w	r1, r4, r3
 801af90:	460b      	mov	r3, r1
 801af92:	492f      	ldr	r1, [pc, #188]	; (801b050 <rint+0x100>)
 801af94:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801af98:	e9d1 6700 	ldrd	r6, r7, [r1]
 801af9c:	4602      	mov	r2, r0
 801af9e:	4639      	mov	r1, r7
 801afa0:	4630      	mov	r0, r6
 801afa2:	f7e5 f8fd 	bl	80001a0 <__adddf3>
 801afa6:	e9cd 0100 	strd	r0, r1, [sp]
 801afaa:	463b      	mov	r3, r7
 801afac:	4632      	mov	r2, r6
 801afae:	e9dd 0100 	ldrd	r0, r1, [sp]
 801afb2:	f7e5 f8f3 	bl	800019c <__aeabi_dsub>
 801afb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801afba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801afbe:	4639      	mov	r1, r7
 801afc0:	ec41 0b10 	vmov	d0, r0, r1
 801afc4:	b003      	add	sp, #12
 801afc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afc8:	4a22      	ldr	r2, [pc, #136]	; (801b054 <rint+0x104>)
 801afca:	4132      	asrs	r2, r6
 801afcc:	ea01 0702 	and.w	r7, r1, r2
 801afd0:	4307      	orrs	r7, r0
 801afd2:	d0f5      	beq.n	801afc0 <rint+0x70>
 801afd4:	0852      	lsrs	r2, r2, #1
 801afd6:	4011      	ands	r1, r2
 801afd8:	430c      	orrs	r4, r1
 801afda:	d00b      	beq.n	801aff4 <rint+0xa4>
 801afdc:	ea23 0202 	bic.w	r2, r3, r2
 801afe0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801afe4:	2e13      	cmp	r6, #19
 801afe6:	fa43 f306 	asr.w	r3, r3, r6
 801afea:	bf0c      	ite	eq
 801afec:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801aff0:	2400      	movne	r4, #0
 801aff2:	4313      	orrs	r3, r2
 801aff4:	4916      	ldr	r1, [pc, #88]	; (801b050 <rint+0x100>)
 801aff6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801affa:	4622      	mov	r2, r4
 801affc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b000:	4620      	mov	r0, r4
 801b002:	4629      	mov	r1, r5
 801b004:	f7e5 f8cc 	bl	80001a0 <__adddf3>
 801b008:	e9cd 0100 	strd	r0, r1, [sp]
 801b00c:	4622      	mov	r2, r4
 801b00e:	462b      	mov	r3, r5
 801b010:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b014:	f7e5 f8c2 	bl	800019c <__aeabi_dsub>
 801b018:	e7d2      	b.n	801afc0 <rint+0x70>
 801b01a:	2e33      	cmp	r6, #51	; 0x33
 801b01c:	dd07      	ble.n	801b02e <rint+0xde>
 801b01e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b022:	d1cd      	bne.n	801afc0 <rint+0x70>
 801b024:	ee10 2a10 	vmov	r2, s0
 801b028:	f7e5 f8ba 	bl	80001a0 <__adddf3>
 801b02c:	e7c8      	b.n	801afc0 <rint+0x70>
 801b02e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801b032:	f04f 32ff 	mov.w	r2, #4294967295
 801b036:	40f2      	lsrs	r2, r6
 801b038:	4210      	tst	r0, r2
 801b03a:	d0c1      	beq.n	801afc0 <rint+0x70>
 801b03c:	0852      	lsrs	r2, r2, #1
 801b03e:	4210      	tst	r0, r2
 801b040:	bf1f      	itttt	ne
 801b042:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801b046:	ea20 0202 	bicne.w	r2, r0, r2
 801b04a:	4134      	asrne	r4, r6
 801b04c:	4314      	orrne	r4, r2
 801b04e:	e7d1      	b.n	801aff4 <rint+0xa4>
 801b050:	0801c408 	.word	0x0801c408
 801b054:	000fffff 	.word	0x000fffff

0801b058 <scalbn>:
 801b058:	b570      	push	{r4, r5, r6, lr}
 801b05a:	ec55 4b10 	vmov	r4, r5, d0
 801b05e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b062:	4606      	mov	r6, r0
 801b064:	462b      	mov	r3, r5
 801b066:	b9aa      	cbnz	r2, 801b094 <scalbn+0x3c>
 801b068:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b06c:	4323      	orrs	r3, r4
 801b06e:	d03b      	beq.n	801b0e8 <scalbn+0x90>
 801b070:	4b31      	ldr	r3, [pc, #196]	; (801b138 <scalbn+0xe0>)
 801b072:	4629      	mov	r1, r5
 801b074:	2200      	movs	r2, #0
 801b076:	ee10 0a10 	vmov	r0, s0
 801b07a:	f7e5 fa47 	bl	800050c <__aeabi_dmul>
 801b07e:	4b2f      	ldr	r3, [pc, #188]	; (801b13c <scalbn+0xe4>)
 801b080:	429e      	cmp	r6, r3
 801b082:	4604      	mov	r4, r0
 801b084:	460d      	mov	r5, r1
 801b086:	da12      	bge.n	801b0ae <scalbn+0x56>
 801b088:	a327      	add	r3, pc, #156	; (adr r3, 801b128 <scalbn+0xd0>)
 801b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b08e:	f7e5 fa3d 	bl	800050c <__aeabi_dmul>
 801b092:	e009      	b.n	801b0a8 <scalbn+0x50>
 801b094:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b098:	428a      	cmp	r2, r1
 801b09a:	d10c      	bne.n	801b0b6 <scalbn+0x5e>
 801b09c:	ee10 2a10 	vmov	r2, s0
 801b0a0:	4620      	mov	r0, r4
 801b0a2:	4629      	mov	r1, r5
 801b0a4:	f7e5 f87c 	bl	80001a0 <__adddf3>
 801b0a8:	4604      	mov	r4, r0
 801b0aa:	460d      	mov	r5, r1
 801b0ac:	e01c      	b.n	801b0e8 <scalbn+0x90>
 801b0ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b0b2:	460b      	mov	r3, r1
 801b0b4:	3a36      	subs	r2, #54	; 0x36
 801b0b6:	4432      	add	r2, r6
 801b0b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b0bc:	428a      	cmp	r2, r1
 801b0be:	dd0b      	ble.n	801b0d8 <scalbn+0x80>
 801b0c0:	ec45 4b11 	vmov	d1, r4, r5
 801b0c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b130 <scalbn+0xd8>
 801b0c8:	f000 f83c 	bl	801b144 <copysign>
 801b0cc:	a318      	add	r3, pc, #96	; (adr r3, 801b130 <scalbn+0xd8>)
 801b0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d2:	ec51 0b10 	vmov	r0, r1, d0
 801b0d6:	e7da      	b.n	801b08e <scalbn+0x36>
 801b0d8:	2a00      	cmp	r2, #0
 801b0da:	dd08      	ble.n	801b0ee <scalbn+0x96>
 801b0dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b0e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b0e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b0e8:	ec45 4b10 	vmov	d0, r4, r5
 801b0ec:	bd70      	pop	{r4, r5, r6, pc}
 801b0ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b0f2:	da0d      	bge.n	801b110 <scalbn+0xb8>
 801b0f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b0f8:	429e      	cmp	r6, r3
 801b0fa:	ec45 4b11 	vmov	d1, r4, r5
 801b0fe:	dce1      	bgt.n	801b0c4 <scalbn+0x6c>
 801b100:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b128 <scalbn+0xd0>
 801b104:	f000 f81e 	bl	801b144 <copysign>
 801b108:	a307      	add	r3, pc, #28	; (adr r3, 801b128 <scalbn+0xd0>)
 801b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b10e:	e7e0      	b.n	801b0d2 <scalbn+0x7a>
 801b110:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b114:	3236      	adds	r2, #54	; 0x36
 801b116:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b11a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b11e:	4620      	mov	r0, r4
 801b120:	4629      	mov	r1, r5
 801b122:	2200      	movs	r2, #0
 801b124:	4b06      	ldr	r3, [pc, #24]	; (801b140 <scalbn+0xe8>)
 801b126:	e7b2      	b.n	801b08e <scalbn+0x36>
 801b128:	c2f8f359 	.word	0xc2f8f359
 801b12c:	01a56e1f 	.word	0x01a56e1f
 801b130:	8800759c 	.word	0x8800759c
 801b134:	7e37e43c 	.word	0x7e37e43c
 801b138:	43500000 	.word	0x43500000
 801b13c:	ffff3cb0 	.word	0xffff3cb0
 801b140:	3c900000 	.word	0x3c900000

0801b144 <copysign>:
 801b144:	ec51 0b10 	vmov	r0, r1, d0
 801b148:	ee11 0a90 	vmov	r0, s3
 801b14c:	ee10 2a10 	vmov	r2, s0
 801b150:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b154:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b158:	ea41 0300 	orr.w	r3, r1, r0
 801b15c:	ec43 2b10 	vmov	d0, r2, r3
 801b160:	4770      	bx	lr
	...

0801b164 <_init>:
 801b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b166:	bf00      	nop
 801b168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b16a:	bc08      	pop	{r3}
 801b16c:	469e      	mov	lr, r3
 801b16e:	4770      	bx	lr

0801b170 <_fini>:
 801b170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b172:	bf00      	nop
 801b174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b176:	bc08      	pop	{r3}
 801b178:	469e      	mov	lr, r3
 801b17a:	4770      	bx	lr
